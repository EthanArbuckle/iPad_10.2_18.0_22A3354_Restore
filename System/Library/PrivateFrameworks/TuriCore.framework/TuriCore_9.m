void sub_218219C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, uint64_t a19, int a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;

  MEMORY[0x219A19A08](v22, 0x1020C405E66F15BLL);
  do
  {
    v24 = __ldaxr((unint64_t *)v21);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unint64_t *)v21));
  if (v25)
    v26 = 1;
  else
    v26 = v21 == 0;
  if (!v26)
  {
    boost::detail::shared_count::~shared_count((unsigned int **)(v21 + 16));
    MEMORY[0x219A19A08](v21, 0x1030C40F1F0227BLL);
  }
  switch(a18)
  {
    case 2:
      v27 = (unint64_t *)a16;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_46;
      v30 = a16;
      if (!a16)
        goto LABEL_46;
      if (*(char *)(a16 + 31) < 0)
        operator delete(*(void **)(a16 + 8));
      v31 = (_QWORD *)v30;
      v32 = 0x1012C404EF22A49;
      goto LABEL_45;
    case 3:
      v41 = (unint64_t *)a16;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (v43)
        goto LABEL_46;
      v44 = a16;
      if (!a16)
        goto LABEL_46;
      v45 = *(void **)(a16 + 8);
      if (v45)
      {
        *(_QWORD *)(a16 + 16) = v45;
        operator delete(v45);
      }
      v31 = (_QWORD *)v44;
      v32 = 0x1080C409938AC02;
      goto LABEL_45;
    case 4:
      v33 = (unint64_t *)a16;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (v35)
        goto LABEL_46;
      v36 = a16;
      if (!a16)
        goto LABEL_46;
      a15 = a16 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
      goto LABEL_38;
    case 5:
      v46 = (unint64_t *)a16;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (v48)
        goto LABEL_46;
      v36 = a16;
      if (!a16)
        goto LABEL_46;
      a15 = a16 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
LABEL_38:
      v31 = (_QWORD *)v36;
      v32 = 0x1020C405E66F15BLL;
      goto LABEL_45;
    case 8:
      v49 = (unint64_t *)a16;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (v51)
        goto LABEL_46;
      v52 = a16;
      if (!a16)
        goto LABEL_46;
      boost::detail::shared_count::~shared_count((unsigned int **)(a16 + 16));
      v31 = (_QWORD *)v52;
      v40 = -235920773;
      goto LABEL_44;
    case 9:
      v37 = (unint64_t *)a16;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39 || !a16)
        goto LABEL_46;
      v31 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a16);
      v40 = 2071181815;
LABEL_44:
      v32 = v40 | 0x1030C4000000000;
LABEL_45:
      MEMORY[0x219A19A08](v31, v32);
LABEL_46:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_46;
  }
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21821AADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21821AC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::name(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21821ADDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21821AF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21821B0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

__n128 turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::new_instance(__n128 *a1)
{
  uint64_t v2;
  __n128 result;
  unint64_t v4;

  v2 = operator new();
  *(_QWORD *)v2 = off_24D932218;
  result = a1[1];
  *(__n128 *)(v2 + 16) = result;
  v4 = a1[2].n128_u64[0];
  *(_QWORD *)(v2 + 32) = v4;
  *(__n128 *)(v2 + 40) = result;
  *(_QWORD *)(v2 + 56) = v4;
  return result;
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::add_element_simple(uint64_t a1, int *a2)
{
  double v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  char *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  float v22;
  double v23;
  double v24;
  double v25;
  double v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  double v30;
  char *v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  __int128 v40;
  __int128 v41;
  float v42;
  std::runtime_error *exception;
  std::string *v44;
  __int128 v45;
  std::runtime_error *v46;
  std::string *v47;
  __int128 v48;
  void *__p[2];
  void *v50[2];
  __int128 v51;
  __int128 v52;
  std::string v53;
  size_t __idx;

  if (*((_BYTE *)a2 + 12) != 7)
  {
    ++*(_QWORD *)(a1 + 40);
    v4 = 0.0;
    switch(*((_BYTE *)a2 + 12))
    {
      case 0:
        v4 = (double)*(uint64_t *)a2;
        break;
      case 1:
        v4 = *(double *)a2;
        break;
      case 2:
        v9 = *(_QWORD *)a2;
        v10 = (char **)(*(_QWORD *)a2 + 8);
        __idx = 0;
        v11 = (char *)v10;
        if (*(char *)(v9 + 31) < 0)
          v11 = *v10;
        std::string::basic_string[abi:ne180100]<0>(__p, v11);
        v12 = std::stod((const std::string *)__p, &__idx);
        if (SHIBYTE(v50[0]) < 0)
          operator delete(__p[0]);
        if (*(char *)(v9 + 31) < 0)
          v13 = *(_QWORD *)(v9 + 16);
        else
          v13 = *(unsigned __int8 *)(v9 + 31);
        if (__idx != v13)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v44 = std::string::append(&v53, " cannot be interpreted as a float");
          v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v50[0] = (void *)v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v22 = v12;
        v4 = v22;
        break;
      case 3:
        v5 = *(_QWORD *)a2;
        __p[1] = 0;
        v50[0] = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(_QWORD *)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        break;
      case 4:
        v14 = *(_QWORD *)a2;
        __p[1] = 0;
        v50[0] = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
        break;
      case 5:
        v15 = *(_QWORD *)a2;
        __p[1] = 0;
        v50[0] = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
        break;
      case 6:
        v4 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
        break;
      case 7:
        break;
      case 8:
        v16 = *(_QWORD *)a2;
        v17 = *(unsigned int **)(*(_QWORD *)a2 + 16);
        __p[0] = *(void **)(*(_QWORD *)a2 + 8);
        __p[1] = v17;
        if (v17)
        {
          v18 = v17 + 2;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = *(_OWORD *)(v16 + 24);
        v21 = *(_OWORD *)(v16 + 56);
        v51 = *(_OWORD *)(v16 + 40);
        v52 = v21;
        *(_OWORD *)v50 = v20;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v51 + 1))
        {
          *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
          operator delete(*((void **)&v51 + 1));
        }
        if (v50[0])
        {
          v50[1] = v50[0];
          operator delete(v50[0]);
        }
        v6 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v7 = (unint64_t *)((char *)__p[1] + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        break;
      default:
        turi::apply_binary_op_ff();
    }
    v23 = *(double *)(a1 + 48);
    v24 = v4 - v23;
    *(double *)(a1 + 48) = v23 + (v4 - v23) / (double)*(unint64_t *)(a1 + 40);
    v25 = 0.0;
    switch(*((_BYTE *)a2 + 12))
    {
      case 0:
        v25 = (double)*(uint64_t *)a2;
        break;
      case 1:
        v25 = *(double *)a2;
        break;
      case 2:
        v30 = *(double *)a2;
        __idx = 0;
        v31 = (char *)(*(_QWORD *)&v30 + 8);
        if (*(char *)(*(_QWORD *)&v30 + 31) < 0)
          v31 = *(char **)(*(_QWORD *)&v30 + 8);
        std::string::basic_string[abi:ne180100]<0>(__p, v31);
        v32 = std::stod((const std::string *)__p, &__idx);
        if (SHIBYTE(v50[0]) < 0)
          operator delete(__p[0]);
        if (*(char *)(*(_QWORD *)&v30 + 31) < 0)
          v33 = *(_QWORD *)(*(_QWORD *)&v30 + 16);
        else
          v33 = *(unsigned __int8 *)(*(_QWORD *)&v30 + 31);
        if (__idx != v33)
        {
          v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v47 = std::string::append(&v53, " cannot be interpreted as a float");
          v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v50[0] = (void *)v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v46, (const std::string *)__p);
          __cxa_throw(v46, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v42 = v32;
        v25 = v42;
        break;
      case 3:
        v26 = *(double *)a2;
        __p[1] = 0;
        v50[0] = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v26 + 8), *(_QWORD *)(*(_QWORD *)&v26 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v26 + 16) - *(_QWORD *)(*(_QWORD *)&v26 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        break;
      case 4:
        v34 = *(double *)a2;
        __p[1] = 0;
        v50[0] = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v34 + 8), *(uint64_t **)(*(_QWORD *)&v34 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v34 + 16) - *(_QWORD *)(*(_QWORD *)&v34 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
        break;
      case 5:
        v35 = *(double *)a2;
        __p[1] = 0;
        v50[0] = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v35 + 8), *(uint64_t **)(*(_QWORD *)&v35 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v35 + 16) - *(_QWORD *)(*(_QWORD *)&v35 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
        break;
      case 6:
        v25 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
        break;
      case 7:
        break;
      case 8:
        v36 = *(double *)a2;
        v37 = *(unsigned int **)(*(_QWORD *)a2 + 16);
        __p[0] = *(void **)(*(_QWORD *)a2 + 8);
        __p[1] = v37;
        if (v37)
        {
          v38 = v37 + 2;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v40 = *(_OWORD *)(*(_QWORD *)&v36 + 24);
        v41 = *(_OWORD *)(*(_QWORD *)&v36 + 56);
        v51 = *(_OWORD *)(*(_QWORD *)&v36 + 40);
        v52 = v41;
        *(_OWORD *)v50 = v40;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v51 + 1))
        {
          *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
          operator delete(*((void **)&v51 + 1));
        }
        if (v50[0])
        {
          v50[1] = v50[0];
          operator delete(v50[0]);
        }
        v27 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v28 = (unint64_t *)((char *)__p[1] + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        break;
      default:
        turi::apply_binary_op_ff();
    }
    *(double *)(a1 + 56) = *(double *)(a1 + 56) + v24 * (v25 - *(double *)(a1 + 48));
  }
}

void sub_21821B7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::combine()
{
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()();
}

uint64_t turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::emit@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 __p;
  char v5;
  _QWORD v6[13];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  std::ostream::write();
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a1, &__p);
  if (v5 < 0)
    operator delete((void *)__p);
  v6[0] = *MEMORY[0x24BEDB7F0];
  v2 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[2] = v2;
  v6[3] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v8);
}

void sub_21821BA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::support_type()
{
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::name()
{
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::name(void)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::save()
{
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::load()
{
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::~generic_aggregator()
{
  JUMPOUT(0x219A19A08);
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21821BB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21821BCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::name(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21821BE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21821BFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::unity_sarray::var(unsigned long)::incremental_var,turi::unity_sarray::var(unsigned long)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21821C178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<std::istringstream>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_21821C268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<std::istringstream>::shared_ptr[abi:ne180100]<std::istringstream,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D9322B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21821C2D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<std::istringstream *,std::shared_ptr<std::istringstream>::__shared_ptr_default_delete<std::istringstream,std::istringstream>,std::allocator<std::istringstream>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::istringstream *,std::shared_ptr<std::istringstream>::__shared_ptr_default_delete<std::istringstream,std::istringstream>,std::allocator<std::istringstream>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24D932330;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v3 = (void **)(a1 + 8);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = off_24D932330;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v3 = (void **)(a1 + 8);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0x10B3C40FAD5EF0DLL);
}

char *std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  char *v2;

  v1 = a1 + 8;
  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24D932330;
  std::__compressed_pair_elem<turi::unity_sarray::str_to_datetime(std::string)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::str_to_datetime(std::string)::$_1 const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_21821C448(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_24D932330;
  return std::__compressed_pair_elem<turi::unity_sarray::str_to_datetime(std::string)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::str_to_datetime(std::string)::$_1 const&,0ul>((std::string *)(a2 + 8), a1 + 8);
}

void std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(turi::thread *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25[2];
  unsigned int *v26;
  uint64_t time_rep;
  uint64_t v28;
  unsigned int *v29;

  v6 = *(_QWORD *)turi::thread::get_tls_data(a1);
  v7 = *((_QWORD *)a1 + 1);
  if (*(char *)(*(_QWORD *)a2 + 31) < 0)
  {
    if (*(_QWORD *)(*(_QWORD *)a2 + 16))
      goto LABEL_3;
LABEL_17:
    *(_QWORD *)(a3 + 5) = 0;
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 12) = 7;
    return;
  }
  if (!*(_BYTE *)(*(_QWORD *)a2 + 31))
    goto LABEL_17;
LABEL_3:
  v25[1] = 0;
  v26 = 0;
  v8 = (uint64_t **)(v7 + 16 * v6);
  time_rep = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(0);
  v28 = 0;
  v29 = 0;
  boost::detail::shared_count::~shared_count(&v26);
  v9 = *v8;
  std::string::operator=((std::string *)(*v8 + 10), (const std::string *)(*(_QWORD *)a2 + 8));
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)(v9 + 2));
  boost::local_time::operator>><char,std::char_traits<char>>(*v8, (uint64_t)&time_rep);
  v25[0] = time_rep;
  v10 = turi::flexible_type_impl::ptime_to_time_t(v25);
  v11 = turi::flexible_type_impl::ptime_to_fractional_microseconds(v25);
  v12 = v28;
  v23 = v28;
  v24 = v29;
  if (v29)
  {
    v13 = v29 + 2;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  boost::detail::shared_count::~shared_count(&v24);
  if (v12)
  {
    v15 = v28;
    v23 = v28;
    v24 = v29;
    if (v29)
    {
      v16 = v29 + 2;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v15 + 72))(&v22);
    v18 = v22 / 1000000;
    v19 = (int)(v22 / 1000000) / 900;
    boost::detail::shared_count::~shared_count(&v24);
    if ((v18 - 58500) <= 0xFFFFFC7B && (v19 - 49) <= 0xFFFFFF9E)
      turi::flex_date_time::set_time_zone_offset(int)::{lambda(void)#1}::operator()();
    if ((int)v18 >= -899)
      v20 = 25;
    else
      v20 = 231;
    v21 = (unint64_t)(v20 + v19) << 56;
  }
  else
  {
    v21 = 0x5900000000000000;
  }
  if (v11 >= 0xF4240)
    turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
  *(_BYTE *)(a3 + 12) = 6;
  *(_QWORD *)a3 = v21 | v10 & 0xFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a3 + 8) = v11;
  boost::detail::shared_count::~shared_count(&v29);
}

void sub_21821C6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unsigned int **v17;
  unsigned int **v18;

  boost::detail::shared_count::~shared_count(v18);
  boost::detail::shared_count::~shared_count(v17);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    turi::unity_sarray::str_to_datetime(std::string)::$_1::operator() const(turi::flexible_type const&)::{lambda(void)#1}::operator()();
  }
  _Unwind_Resume(a1);
}

void sub_21821C754()
{
  __cxa_end_catch();
  JUMPOUT(0x21821C75CLL);
}

uint64_t std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

std::string *std::__compressed_pair_elem<turi::unity_sarray::str_to_datetime(std::string)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::str_to_datetime(std::string)::$_1 const&,0ul>(std::string *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)a1, *(_QWORD **)a2, *(_QWORD **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  v4 = a1 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_21821C824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__function::__alloc_func<turi::unity_sarray::str_to_datetime(std::string)::$_1,std::allocator<turi::unity_sarray::str_to_datetime(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = (void **)a1;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

_QWORD *std::vector<std::shared_ptr<std::ostringstream>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_21821C8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<std::ostringstream>::shared_ptr[abi:ne180100]<std::ostringstream,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D9323B0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21821C950(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<std::ostringstream *,std::shared_ptr<std::ostringstream>::__shared_ptr_default_delete<std::ostringstream,std::ostringstream>,std::allocator<std::ostringstream>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::ostringstream *,std::shared_ptr<std::ostringstream>::__shared_ptr_default_delete<std::ostringstream,std::ostringstream>,std::allocator<std::ostringstream>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::time_facet(uint64_t a1, char *a2, uint64_t a3, __int128 **a4, __int128 **a5, uint64_t a6)
{
  std::string *v11;
  __int128 v12;
  std::string v14;
  std::string v15;
  std::string v16;
  _BYTE v17[8];
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;

  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter((uint64_t)v17, a3);
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_facet(a1, a2, (uint64_t)v17, (__int128 **)&v16, (__int128 **)&v15, a6);
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (v25 < 0)
    operator delete(__p);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  *(_QWORD *)a1 = &unk_24D932428;
  std::string::basic_string[abi:ne180100]<0>(&v14, boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[0]);
  v11 = std::string::append(&v14, boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::default_time_duration_format[0]);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 352) = *((_QWORD *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 336) = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_21821CB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(v21);
  _Unwind_Resume(a1);
}

void boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::~time_facet(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D932428;
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(a1);
}

{
  *(_QWORD *)a1 = &unk_24D932428;
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(a1);
  JUMPOUT(0x219A19A08);
}

void boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::set_iso_format()
{
  JUMPOUT(0x219A19390);
}

void boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::set_iso_extended_format()
{
  JUMPOUT(0x219A19390);
}

void boost::local_time::custom_time_zone_base<char>::~custom_time_zone_base(uint64_t a1)
{
  boost::local_time::custom_time_zone_base<char>::~custom_time_zone_base(a1);
  JUMPOUT(0x219A19A08);
}

BOOL boost::local_time::custom_time_zone_base<char>::has_dst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136) != 0;
}

uint64_t boost::local_time::custom_time_zone_base<char>::dst_local_start_time(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 136);
  if (v3)
    v4 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, a2);
  else
    v4 = -2;
  v6 = *(_QWORD *)(a1 + 120);
  v7 = v4;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v8, &v7, &v6);
  return v8;
}

uint64_t boost::local_time::custom_time_zone_base<char>::dst_local_end_time(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 136);
  if (v3)
    v4 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, a2);
  else
    v4 = -2;
  v6 = *(_QWORD *)(a1 + 128);
  v7 = v4;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v8, &v7, &v6);
  return v8;
}

uint64_t boost::local_time::custom_time_zone_base<char>::base_utc_offset@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 104);
  return result;
}

uint64_t boost::local_time::custom_time_zone_base<char>::to_posix_string(uint64_t a1)
{
  const std::ios_base *v2;
  const std::locale::facet *v3;
  std::string *v4;
  std::string::size_type size;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *v10;
  std::string::size_type v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *p_p;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *__p;
  std::string::size_type v38;
  unsigned __int8 v39;
  std::string v40;
  uint64_t v41;
  unsigned int *v42;
  _QWORD v43[11];
  char v44;
  uint64_t v45;
  char v46;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
  v2 = (const std::ios_base *)((char *)v43 + *(_QWORD *)(v43[0] - 24));
  if (v2[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v2);
    v3 = std::locale::use_facet((const std::locale *)&v40, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 32);
    std::locale::~locale((std::locale *)&v40);
  }
  v2[1].__fmtflags_ = 48;
  v41 = 0;
  v42 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v40, a1);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v40;
  else
    v4 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  else
    size = v40.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v4, size);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&__p, a1);
  v40.__r_.__value_.__r.__words[0] = 0;
  if (boost::date_time::int_adapter<long long>::compare((int64_t *)&__p, (int64_t *)&v40) == -1)
  {
    v40.__r_.__value_.__s.__data_[0] = 45;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    *(_QWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 24) = 2;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v40, a1);
    LODWORD(__p) = -1;
    if (v40.__r_.__value_.__r.__words[0] - 0x7FFFFFFFFFFFFFFELL <= 2)
      boost::date_time::int_adapter<long long>::mult_div_specials((int64_t *)&v40, (int *)&__p);
    std::ostream::operator<<();
  }
  else
  {
    v40.__r_.__value_.__s.__data_[0] = 43;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 2;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v40, a1);
    std::ostream::operator<<();
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v40, a1);
  if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 60000000) + 0x888888888888888, 2) > 0x444444444444444uLL|| ((*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&__p, a1), __ROR8__(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)__p / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL))
  {
    v40.__r_.__value_.__s.__data_[0] = 58;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 2;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v40, a1);
    std::ostream::operator<<();
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v40, a1);
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(_QWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v40, a1);
      std::ostream::operator<<();
    }
  }
  if (*(_QWORD *)(a1 + 136) != v41)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v40, a1);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v40;
    else
      v10 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v11 = v40.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v10, v11);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&__p, a1);
    v40.__r_.__value_.__r.__words[0] = 0;
    if (boost::date_time::int_adapter<long long>::compare((int64_t *)&__p, (int64_t *)&v40) == -1)
    {
      v40.__r_.__value_.__s.__data_[0] = 45;
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(_QWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v40, a1);
      LODWORD(__p) = -1;
      if (v40.__r_.__value_.__r.__words[0] - 0x7FFFFFFFFFFFFFFELL <= 2)
        boost::date_time::int_adapter<long long>::mult_div_specials((int64_t *)&v40, (int *)&__p);
      std::ostream::operator<<();
    }
    else
    {
      v40.__r_.__value_.__s.__data_[0] = 43;
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(_QWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v40, a1);
      std::ostream::operator<<();
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v40, a1);
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 60000000) + 0x888888888888888, 2) > 0x444444444444444uLL|| ((*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&__p, a1), __ROR8__(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)__p / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL))
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(_QWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v40, a1);
      std::ostream::operator<<();
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v40, a1);
      if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
      {
        v40.__r_.__value_.__s.__data_[0] = 58;
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
        *(_QWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 24) = 2;
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v40, a1);
        std::ostream::operator<<();
      }
    }
    v40.__r_.__value_.__s.__data_[0] = 44;
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 136) + 24))(&__p);
    memset(&v40, 0, sizeof(v40));
    if ((v39 & 0x80u) == 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if ((v39 & 0x80u) == 0)
      v18 = v39;
    else
      v18 = v38;
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v40, (uint64_t)&v40, p_p, &p_p[v18], v18);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v40;
    else
      v19 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v20 = v40.__r_.__value_.__l.__size_;
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v19, v20);
    v46 = 47;
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)&v46, 1);
    *(_QWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 24) = 2;
    v23 = (_QWORD *)std::ostream::operator<<();
    v46 = 58;
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v46, 1);
    *(_QWORD *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 24) = 2;
    std::ostream::operator<<();
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if ((char)v39 < 0)
      operator delete(__p);
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * (*(_QWORD *)(a1 + 120) / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(_QWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 24) = 2;
      std::ostream::operator<<();
    }
    v40.__r_.__value_.__s.__data_[0] = 44;
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 136) + 40))(&__p);
    memset(&v40, 0, sizeof(v40));
    if ((v39 & 0x80u) == 0)
      v27 = (char *)&__p;
    else
      v27 = (char *)__p;
    if ((v39 & 0x80u) == 0)
      v28 = v39;
    else
      v28 = v38;
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v40, (uint64_t)&v40, v27, &v27[v28], v28);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v40;
    else
      v29 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v30 = v40.__r_.__value_.__l.__size_;
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v29, v30);
    v46 = 47;
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)&v46, 1);
    *(_QWORD *)((char *)v32 + *(_QWORD *)(*v32 - 24) + 24) = 2;
    v33 = (_QWORD *)std::ostream::operator<<();
    v46 = 58;
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v46, 1);
    *(_QWORD *)((char *)v34 + *(_QWORD *)(*v34 - 24) + 24) = 2;
    std::ostream::operator<<();
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if ((char)v39 < 0)
      operator delete(__p);
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * (*(_QWORD *)(a1 + 128) / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(_QWORD *)((char *)v35 + *(_QWORD *)(*v35 - 24) + 24) = 2;
      std::ostream::operator<<();
    }
  }
  std::stringbuf::str();
  boost::detail::shared_count::~shared_count(&v42);
  v43[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v43[1] = MEMORY[0x24BEDB848] + 16;
  if (v44 < 0)
    operator delete((void *)v43[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v45);
}

void sub_21821D864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  boost::detail::shared_count::~shared_count((unsigned int **)&a22);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

std::string *boost::date_time::time_zone_names_base<char>::time_zone_names_base(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  v7 = this + 3;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_21821DA30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::local_time::custom_time_zone_base<char>::~custom_time_zone_base(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D932488;
  boost::detail::shared_count::~shared_count((unsigned int **)(a1 + 144));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *boost::shared_ptr<boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::shared_ptr<boost::local_time::custom_time_zone_base<char>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::local_time::custom_time_zone_base<char>>(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count(&v5);
  return a1;
}

void sub_21821DB44(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::local_time::custom_time_zone_base<char>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D932510;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_21821DBB8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_rethrow();
}

void sub_21821DBD8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24D932570;
  boost::detail::shared_count::~shared_count((unsigned int **)(a1 + 64));
  v3 = (void **)(a1 + 32);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = off_24D932570;
  boost::detail::shared_count::~shared_count((unsigned int **)(a1 + 64));
  v3 = (void **)(a1 + 32);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return MEMORY[0x219A19A08](a1, 0x10B3C40962E4BC9);
}

char *std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_24D932570;
  std::__compressed_pair_elem<turi::unity_sarray::datetime_to_str(std::string)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::datetime_to_str(std::string)::$_1 const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_21821DCF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_24D932570;
  return std::__compressed_pair_elem<turi::unity_sarray::datetime_to_str(std::string)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::datetime_to_str(std::string)::$_1 const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(turi::thread *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  void *v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  std::string *v32;
  std::string v33;
  std::string v34;
  void *__p[2];
  unsigned int *v36;
  __int128 v37;
  std::string __str;

  v6 = (std::string **)(*((_QWORD *)a1 + 4) + 16 * *(_QWORD *)turi::thread::get_tls_data(a1));
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  v7 = *(uint64_t *)a2 >> 56;
  if ((int)v7 < 0)
    v8 = 25;
  else
    v8 = -25;
  if (v8 + (_DWORD)v7 == 64)
  {
    v9 = turi::flexible_type_impl::ptime_from_time_t((uint64_t)(*(_QWORD *)a2 << 8) >> 8, *(_DWORD *)(a2 + 8));
    v10 = (void *)*((_QWORD *)a1 + 7);
    v11 = (unsigned int *)*((_QWORD *)a1 + 8);
    __p[0] = v10;
    __p[1] = v11;
    if (v11)
    {
      v12 = v11 + 2;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      __str.__r_.__value_.__r.__words[0] = v9;
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)__p[1];
      if (__p[1])
      {
        v14 = (unsigned int *)((char *)__p[1] + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    else
    {
      __str.__r_.__value_.__r.__words[0] = v9;
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = (unint64_t)v10;
    }
    boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
    boost::local_time::operator<<<char,std::char_traits<char>>(*v6, (uint64_t *)&__str);
    boost::detail::shared_count::~shared_count((unsigned int **)&__str.__r_.__value_.__r.__words[2]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "0.");
    v16 = *(char *)(a2 + 7);
    if (v16 < 0)
      v17 = 25;
    else
      v17 = -25;
    if (v17 + v16 < 0)
    {
      MEMORY[0x219A19390](&__str, "-0.");
      v18 = -15;
    }
    else
    {
      v18 = 15;
    }
    v19 = operator new();
    std::operator+<char>();
    v20 = *(char *)(a2 + 7);
    if (v20 < 0)
      v21 = 25;
    else
      v21 = -25;
    std::to_string(&v33, (v21 + v20) * v18);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v33;
    else
      v22 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    else
      size = v33.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v34, (const std::string::value_type *)v22, size);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v36 = (unsigned int *)v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    boost::local_time::posix_time_zone_base<char>::posix_time_zone_base(v19, (uint64_t *)__p);
    boost::shared_ptr<boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::shared_ptr<boost::local_time::posix_time_zone_base<char>>((uint64_t *)&v37, v19);
    if (SHIBYTE(v36) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    v26 = (void *)turi::flexible_type_impl::ptime_from_time_t((uint64_t)(*(_QWORD *)a2 << 8) >> 8, *(_DWORD *)(a2 + 8));
    v27 = (void *)v37;
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v37;
    if (*((_QWORD *)&v37 + 1))
    {
      v28 = (unsigned int *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      __p[0] = v26;
      __p[1] = v27;
      v36 = (unsigned int *)v34.__r_.__value_.__l.__size_;
      if (v34.__r_.__value_.__l.__size_)
      {
        v30 = (unsigned int *)(v34.__r_.__value_.__l.__size_ + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
    }
    else
    {
      __p[0] = v26;
      __p[1] = (void *)v37;
      v36 = 0;
    }
    boost::detail::shared_count::~shared_count((unsigned int **)&v34.__r_.__value_.__l.__size_);
    boost::local_time::operator<<<char,std::char_traits<char>>(*v6, (uint64_t *)__p);
    boost::detail::shared_count::~shared_count(&v36);
    boost::detail::shared_count::~shared_count((unsigned int **)&v37 + 1);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  turi::flexible_type::operator=<std::string>((uint64_t *)a3, (__int128 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v32 = *v6;
  memset(&__str, 0, sizeof(__str));
  std::string::operator=(v32 + 3, &__str);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)&v32->__r_.__value_.__l.__size_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_21821E098(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  turi::unity_sarray::datetime_to_str(std::string)::$_1::operator() const(turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void sub_21821E1A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _BYTE *v2;

  __cxa_end_catch();
  std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(v2, (unint64_t **)v1);
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

std::string *std::__compressed_pair_elem<turi::unity_sarray::datetime_to_str(std::string)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::datetime_to_str(std::string)::$_1 const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unsigned int *v6;
  unsigned int v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)&this[1], *((_QWORD **)a2 + 3), *((_QWORD **)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 4);
  v5 = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
  this[2].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return this;
}

void sub_21821E29C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<turi::unity_sarray::datetime_to_str(std::string)::$_1,std::allocator<turi::unity_sarray::datetime_to_str(std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  boost::detail::shared_count::~shared_count((unsigned int **)(a1 + 56));
  v2 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *boost::local_time::operator<<<char,std::char_traits<char>>(_QWORD *a1, uint64_t *a2)
{
  const std::ios_base *v4;
  std::ios_base::fmtflags fmtflags;
  uint64_t rdbuf;
  _BOOL4 has_facet;
  const std::locale::facet *v8;
  const std::ios_base *v9;
  std::ios_base::fmtflags v10;
  const std::locale::facet *v11;
  std::locale *p_loc;
  std::locale::facet *v13;
  uint64_t v14;
  std::ios_base *v15;
  std::locale *v16;
  std::locale *v17;
  const std::ios_base *v18;
  std::ios_base::fmtflags v19;
  const std::locale::facet *v20;
  std::locale v22;
  std::locale __loc;
  std::locale v24;
  std::locale v25;

  v4 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  fmtflags = v4->__fmtflags_;
  rdbuf = (uint64_t)v4->__rdbuf_;
  std::ios_base::getloc(v4);
  has_facet = std::locale::has_facet(&v25, &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::id);
  std::locale::~locale(&v25);
  if (has_facet)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v8 = std::locale::use_facet(&v24, &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::id);
    v9 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v10 = v9[1].__fmtflags_;
    if (v10 == -1)
    {
      std::ios_base::getloc(v9);
      v11 = std::locale::use_facet(&v25, MEMORY[0x24BEDB350]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v25);
      v9[1].__fmtflags_ = v10;
    }
    boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::put((uint64_t)v8, rdbuf, v9, (char)v10, a2);
    p_loc = &v24;
  }
  else
  {
    v13 = (std::locale::facet *)operator new();
    boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::time_facet((uint64_t)v13, 0);
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v14 = std::locale::id::__get(&boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::id);
    std::locale::__install_ctor(&__loc, &v25, v13, v14);
    std::locale::~locale(&v25);
    v15 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    std::ios_base::getloc(v15);
    std::ios_base::imbue(v15, &__loc);
    std::locale::~locale(&v25);
    v16 = (std::locale *)v15->__rdbuf_;
    if (v16)
    {
      (*((void (**)(std::locale *, std::locale *))v16->__locale_ + 2))(v16, &__loc);
      v17 = v16 + 1;
      std::locale::locale(&v24, v17);
      std::locale::operator=(v17, &__loc);
      std::locale::~locale(&v24);
    }
    std::locale::~locale(&v22);
    v18 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v19 = v18[1].__fmtflags_;
    if (v19 == -1)
    {
      std::ios_base::getloc(v18);
      v20 = std::locale::use_facet(&v25, MEMORY[0x24BEDB350]);
      v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 32);
      std::locale::~locale(&v25);
      v18[1].__fmtflags_ = v19;
    }
    boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::put((uint64_t)v13, rdbuf, v18, (char)v19, a2);
    p_loc = &__loc;
  }
  std::locale::~locale(p_loc);
  v4->__fmtflags_ = fmtflags;
  return a1;
}

void sub_21821E574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, char a11, std::locale a12)
{
  uint64_t v12;
  int v13;

  std::locale::~locale(&a12);
  std::locale::~locale(&a10);
  *(_DWORD *)(v12 + 8) = v13;
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::put(uint64_t a1, uint64_t a2, const std::ios_base *a3, uint64_t a4, uint64_t *a5)
{
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 v15;
  std::string::size_type size;
  std::string *v17;
  std::string *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char *v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  std::string *v34;
  char *v35;
  std::string *v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  char *v40;
  int v41;
  std::string *v42;
  int64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const std::locale::facet *v50;
  std::string::value_type v51;
  std::string *v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  size_t v55;
  char v56;
  std::string::size_type v57;
  std::string *v58;
  std::string *v59;
  std::string::size_type v60;
  char *v61;
  std::string *v62;
  std::string::size_type v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  std::string *v67;
  char *v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  char *v72;
  int v73;
  std::string *v74;
  int64_t v75;
  char *v76;
  char *v77;
  size_t v78;
  char v79;
  std::string::size_type v80;
  std::string *v81;
  std::string *v82;
  std::string::size_type v83;
  char *v84;
  std::string *v85;
  std::string::size_type v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  std::string *v90;
  std::locale::__imp *locale;
  size_t v92;
  std::string::size_type v93;
  std::string *v94;
  std::string *v95;
  std::string::size_type v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  std::string *v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  char *v106;
  int v107;
  std::string *v108;
  int64_t v109;
  char *v110;
  char *v111;
  size_t v112;
  char v113;
  std::string::size_type v114;
  std::string *v115;
  std::string *v116;
  std::string::size_type v117;
  char *v118;
  std::string *v119;
  std::string::size_type v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  std::string *v124;
  std::locale::__imp *v125;
  _QWORD *v126;
  size_t v127;
  unsigned __int8 v128;
  char *p_p;
  uint64_t v130;
  std::string *v131;
  std::string::size_type v132;
  std::string::size_type v133;
  std::string *v134;
  uint64_t v135;
  std::string::size_type v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  const void *v141;
  std::string *v142;
  int64_t v143;
  int64_t v144;
  int64_t v145;
  char *v146;
  int v147;
  std::string *v148;
  int64_t v149;
  char *v150;
  char *v151;
  size_t v152;
  char v153;
  std::string::size_type v154;
  std::string *v155;
  std::string *v156;
  std::string::size_type v157;
  char *v158;
  std::string *v159;
  std::string::size_type v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  std::string *v164;
  std::locale::__imp *v165;
  _QWORD *v166;
  size_t v167;
  unsigned __int8 v168;
  char *v169;
  uint64_t v170;
  std::string *v171;
  std::string::size_type v172;
  std::string::size_type v173;
  std::string *v174;
  uint64_t v175;
  std::string::size_type v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  std::string *v182;
  int64_t v183;
  int64_t v184;
  int64_t v185;
  char *v186;
  int v187;
  std::string *v188;
  int64_t v189;
  char *v190;
  char *v191;
  size_t v192;
  char v193;
  std::string::size_type v194;
  std::string *v195;
  std::string *v196;
  std::string::size_type v197;
  char *v198;
  std::string *v199;
  std::string::size_type v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  std::string *v204;
  std::locale::__imp *v205;
  size_t v206;
  std::string::size_type v207;
  std::string *v208;
  std::string *v209;
  std::string::size_type v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  const void *v215;
  std::string *v216;
  int64_t v217;
  int64_t v218;
  int64_t v219;
  char *v220;
  int v221;
  std::string *v222;
  int64_t v223;
  char *v224;
  char *v225;
  size_t v226;
  char v227;
  std::string::size_type v228;
  std::string *v229;
  std::string *v230;
  std::string::size_type v231;
  char *v232;
  std::string *v233;
  std::string::size_type v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  std::string *v238;
  std::locale::__imp *v239;
  size_t v240;
  std::string::size_type v241;
  std::string *v242;
  std::string *v243;
  std::string::size_type v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  unsigned __int8 v250;
  std::string *v251;
  std::string *v252;
  int64_t v253;
  int64_t v254;
  int64_t v255;
  char *v256;
  int v257;
  std::string *v258;
  int64_t v259;
  char *v260;
  char *v261;
  unint64_t v262;
  unint64_t v263;
  std::locale::__imp *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  size_t v270;
  char *v271;
  unint64_t v272;
  std::string *v273;
  std::string::size_type v274;
  char *v275;
  std::string *v276;
  std::string::size_type v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  std::string *v281;
  const void *v282;
  int64_t v283;
  int64_t v284;
  int64_t v285;
  char *v286;
  int v287;
  std::string *v288;
  int64_t v289;
  char *v290;
  char *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  const std::locale::facet *v297;
  std::string::value_type v298;
  const std::string::value_type *v299;
  std::string::size_type v300;
  size_t v301;
  char v302;
  std::string::size_type v303;
  std::string *v304;
  std::string *v305;
  std::string::size_type v306;
  char *v307;
  std::string *v308;
  std::string::size_type v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  std::string *v313;
  size_t v314;
  std::string::size_type v315;
  std::string *v316;
  std::string *v317;
  std::string::size_type v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v327;
  unsigned int v328;
  std::ios_base *v329;
  std::string v330;
  void *__p;
  uint64_t v332;
  unsigned __int8 v333;
  std::locale v334[2];
  __int128 v335;
  __int128 v336;
  uint64_t v337;
  void *v338;
  char v339;
  _BYTE v340[160];
  __int128 v341;
  uint64_t v342;
  std::string v343;
  std::string v344;

  if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) <= 2)
  {
    v10 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(a5);
    if (v10 == -1)
      v11 = 2;
    else
      v11 = 5;
    if (v10)
      v12 = v11;
    else
      v12 = 1;
    if (v10 == -2)
      v13 = 0;
    else
      v13 = v12;
    return (*(uint64_t (**)(uint64_t, uint64_t, const std::ios_base *, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, a3, a4, v13);
  }
  if (*(char *)(a1 + 39) < 0)
    std::string::__init_copy_ctor_external(&v343, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  else
    v343 = *(std::string *)(a1 + 16);
  v15 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
  size = v343.__r_.__value_.__l.__size_;
  v17 = (std::string *)v343.__r_.__value_.__r.__words[0];
  if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v343;
  else
    v18 = (std::string *)v343.__r_.__value_.__r.__words[0];
  v19 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
  if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
  else
    v20 = v343.__r_.__value_.__l.__size_;
  if (v20)
  {
    v21 = (std::string *)((char *)v18 + v20);
    v22 = v20 - 1;
    while (1)
    {
      v23 = 0;
      while (v18->__r_.__value_.__s.__data_[v23] == boost::date_time::time_formats<char>::full_24_hour_time_format[v23])
      {
        v24 = v23 + 1;
        if (v22 != v23)
        {
          v25 = v23++ == 1;
          if (!v25)
            continue;
        }
        v26 = &boost::date_time::time_formats<char>::full_24_hour_time_format[v24];
        v27 = (std::string *)((char *)v18 + v24);
        goto LABEL_30;
      }
      v26 = &boost::date_time::time_formats<char>::full_24_hour_time_format[v23];
      v27 = (std::string *)((char *)v18 + v23);
LABEL_30:
      if (v26 == (char *)&unk_2186C9E78)
        break;
      v18 = (std::string *)((char *)v18 + 1);
      --v22;
      if (v18 == v21)
        goto LABEL_35;
    }
    if (v18 != v27)
    {
      v334[0].__locale_ = (std::locale::__imp *)boost::date_time::time_formats<char>::full_24_hour_time_format;
      v334[1].__locale_ = (std::locale::__imp *)&unk_2186C9E78;
      boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&v343, (uint64_t *)v334, "%H:%M:%S", "", v18, v27, "%H:%M:%S", "");
      v19 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
      size = v343.__r_.__value_.__l.__size_;
      v17 = (std::string *)v343.__r_.__value_.__r.__words[0];
      v15 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
    }
  }
LABEL_35:
  if ((v15 & 0x80u) == 0)
    v28 = &v343;
  else
    v28 = v17;
  if ((v15 & 0x80u) != 0)
    v19 = size;
  if (v19)
  {
    v29 = (std::string *)((char *)v28 + v19);
    v30 = v19 - 1;
    while (1)
    {
      v31 = 0;
      while (v28->__r_.__value_.__s.__data_[v31] == boost::date_time::time_formats<char>::short_24_hour_time_format[v31])
      {
        v32 = v31 + 1;
        if (v30 != v31)
        {
          v25 = v31++ == 1;
          if (!v25)
            continue;
        }
        v33 = &boost::date_time::time_formats<char>::short_24_hour_time_format[v32];
        v34 = (std::string *)((char *)v28 + v32);
        goto LABEL_49;
      }
      v33 = &boost::date_time::time_formats<char>::short_24_hour_time_format[v31];
      v34 = (std::string *)((char *)v28 + v31);
LABEL_49:
      if (v33 == (char *)&unk_2186C9E7C)
        break;
      v28 = (std::string *)((char *)v28 + 1);
      --v30;
      if (v28 == v29)
        goto LABEL_54;
    }
    if (v28 != v34)
    {
      v334[0].__locale_ = (std::locale::__imp *)boost::date_time::time_formats<char>::short_24_hour_time_format;
      v334[1].__locale_ = (std::locale::__imp *)&unk_2186C9E7C;
      boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&v343, (uint64_t *)v334, "%H:%M", "", v28, v34, "%H:%M", "");
      v15 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
      v17 = (std::string *)v343.__r_.__value_.__r.__words[0];
    }
  }
LABEL_54:
  v327 = a1;
  v329 = (std::ios_base *)a3;
  v328 = a4;
  v341 = 0uLL;
  v342 = 0;
  v35 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format;
  if ((v15 & 0x80u) == 0)
    v36 = &v343;
  else
    v36 = v17;
  v37 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format);
  if (v37)
  {
    v38 = v37;
    v39 = v343.__r_.__value_.__l.__size_;
    if ((v15 & 0x80u) == 0)
      v39 = v15;
    if (v39 >= v37)
    {
      v40 = (char *)v36 + v39;
      v41 = *boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format;
      v42 = v36;
      do
      {
        v43 = v39 - v38;
        if (v43 == -1)
          break;
        v44 = (char *)memchr(v42, v41, v43 + 1);
        if (!v44)
          break;
        v45 = v44;
        if (!memcmp(v44, v35, v38))
        {
          if (v45 == v40 || v45 - (char *)v36 == -1)
            break;
          goto LABEL_69;
        }
        v42 = (std::string *)(v45 + 1);
        v39 = v40 - (v45 + 1);
      }
      while (v39 >= v38);
    }
  }
  else
  {
LABEL_69:
    v46 = *a5;
    v47 = 0x7FFFFFFFFFFFFFFELL;
    if (*a5 == 0x8000000000000000)
      v47 = 0x8000000000000000;
    if (v46 != 0x7FFFFFFFFFFFFFFFLL)
      v46 = v47;
    if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2)
      v46 = *a5 % 86400000000;
    v48 = v46 % 1000000;
    if (v48 >= 0)
      v49 = v48;
    else
      v49 = -v48;
    boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v49, 6);
    if (SHIBYTE(v342) < 0)
      operator delete((void *)v341);
    v341 = *(_OWORD *)&v334[0].__locale_;
    v342 = v335;
    std::ios_base::getloc(a3);
    v50 = std::locale::use_facet(v334, MEMORY[0x24BEDB588]);
    v51 = ((uint64_t (*)(const std::locale::facet *))v50->__vftable[1].~facet)(v50);
    std::locale::~locale(v334);
    v52 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v344, (char *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_format);
    std::string::push_back(v52, v51);
    if (v342 >= 0)
      v53 = (const std::string::value_type *)&v341;
    else
      v53 = (const std::string::value_type *)v341;
    if (v342 >= 0)
      v54 = HIBYTE(v342);
    else
      v54 = *((_QWORD *)&v341 + 1);
    std::string::append(&v344, v53, v54);
    v55 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format);
    v56 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
    v57 = v344.__r_.__value_.__l.__size_;
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v344;
    else
      v58 = (std::string *)v344.__r_.__value_.__r.__words[0];
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = &v343;
    else
      v59 = (std::string *)v343.__r_.__value_.__r.__words[0];
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
    else
      v60 = v343.__r_.__value_.__l.__size_;
    if (v60 && v55)
    {
      v61 = (char *)v58 + v57;
      v62 = (std::string *)((char *)v59 + v60);
      v63 = v60 - 1;
      while (1)
      {
        v64 = 0;
        while (v59->__r_.__value_.__s.__data_[v64] == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v64])
        {
          v65 = v64 + 1;
          if (v63 != v64)
          {
            v25 = v55 - 1 == v64++;
            if (!v25)
              continue;
          }
          v66 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v65];
          v67 = (std::string *)((char *)v59 + v65);
          goto LABEL_107;
        }
        v66 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v64];
        v67 = (std::string *)((char *)v59 + v64);
LABEL_107:
        if (v66 == &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v55])
          break;
        v59 = (std::string *)((char *)v59 + 1);
        --v63;
        if (v59 == v62)
          goto LABEL_112;
      }
      if (v59 != v67)
      {
        v334[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format;
        v334[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v55];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v343, (uint64_t *)v334, (char *)v58, v61, v59, v67, (char *)v58, v61);
        v56 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      }
    }
LABEL_112:
    if (v56 < 0)
      operator delete(v344.__r_.__value_.__l.__data_);
    v15 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
    v17 = (std::string *)v343.__r_.__value_.__r.__words[0];
  }
  v68 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0];
  if ((v15 & 0x80u) == 0)
    v17 = &v343;
  v69 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0]);
  if (!v69)
  {
LABEL_129:
    boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_abbrev(a5, 0, v334);
    if (SBYTE7(v335) < 0)
    {
      locale = v334[1].__locale_;
      operator delete(v334[0].__locale_);
      if (locale)
        goto LABEL_131;
    }
    else if (BYTE7(v335))
    {
LABEL_131:
      boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_posix_string((uint64_t)a5, &v344);
      v78 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0]);
      v79 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      v80 = v344.__r_.__value_.__l.__size_;
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = &v344;
      else
        v81 = (std::string *)v344.__r_.__value_.__r.__words[0];
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = &v343;
      else
        v82 = (std::string *)v343.__r_.__value_.__r.__words[0];
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
      else
        v83 = v343.__r_.__value_.__l.__size_;
      if (v83 && v78)
      {
        v84 = (char *)v81 + v80;
        v85 = (std::string *)((char *)v82 + v83);
        v86 = v83 - 1;
        while (1)
        {
          v87 = 0;
          while (v82->__r_.__value_.__s.__data_[v87] == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0][v87])
          {
            v88 = v87 + 1;
            if (v86 != v87)
            {
              v25 = v78 - 1 == v87++;
              if (!v25)
                continue;
            }
            v89 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0][v88];
            v90 = (std::string *)((char *)v82 + v88);
            goto LABEL_152;
          }
          v89 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0][v87];
          v90 = (std::string *)((char *)v82 + v87);
LABEL_152:
          if (v89 == &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0][v78])
            break;
          v82 = (std::string *)((char *)v82 + 1);
          --v86;
          if (v82 == v85)
            goto LABEL_176;
        }
        if (v82 != v90)
        {
          v334[0] = (std::locale)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0];
          v334[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0][v78];
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v343, (uint64_t *)v334, (char *)v81, v84, v82, v90, (char *)v81, v84);
          v79 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_176:
      if (v79 < 0)
        operator delete(v344.__r_.__value_.__l.__data_);
      goto LABEL_180;
    }
    v92 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0]);
    v93 = v343.__r_.__value_.__l.__size_;
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94 = &v343;
    else
      v94 = (std::string *)v343.__r_.__value_.__r.__words[0];
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v93 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
    if (v93 && v92)
    {
      v95 = (std::string *)((char *)v94 + v93);
      v96 = v93 - 1;
      while (1)
      {
        v97 = 0;
        while (v94->__r_.__value_.__s.__data_[v97] == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0][v97])
        {
          v98 = v97 + 1;
          if (v96 != v97)
          {
            v25 = v92 - 1 == v97++;
            if (!v25)
              continue;
          }
          v99 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0][v98];
          v100 = (uint64_t)v94 + v98;
          goto LABEL_171;
        }
        v99 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0][v97];
        v100 = (uint64_t)v94 + v97;
LABEL_171:
        if (v99 == &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0][v92])
          break;
        v94 = (std::string *)((char *)v94 + 1);
        --v96;
        if (v94 == v95)
          goto LABEL_180;
      }
      if (v94 != (std::string *)v100)
      {
        v334[0] = (std::locale)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0];
        v334[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0][v92];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v343, (uint64_t *)v334, v94, v100);
      }
    }
    goto LABEL_180;
  }
  v70 = v69;
  v71 = v343.__r_.__value_.__l.__size_;
  if ((v15 & 0x80u) == 0)
    v71 = v15;
  if (v71 >= v69)
  {
    v72 = (char *)v17 + v71;
    v73 = *boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0];
    v74 = v17;
    do
    {
      v75 = v71 - v70;
      if (v75 == -1)
        break;
      v76 = (char *)memchr(v74, v73, v75 + 1);
      if (!v76)
        break;
      v77 = v76;
      if (!memcmp(v76, v68, v70))
      {
        if (v77 == v72 || v77 - (char *)v17 == -1)
          break;
        goto LABEL_129;
      }
      v74 = (std::string *)(v77 + 1);
      v71 = v72 - (v77 + 1);
    }
    while (v71 >= v70);
  }
LABEL_180:
  v101 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format;
  if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = &v343;
  else
    v102 = (std::string *)v343.__r_.__value_.__r.__words[0];
  v103 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format);
  if (!v103)
  {
LABEL_196:
    boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_name(a5, 0, v334);
    if (SBYTE7(v335) < 0)
    {
      v125 = v334[1].__locale_;
      operator delete(v334[0].__locale_);
      if (v125)
        goto LABEL_198;
    }
    else if (BYTE7(v335))
    {
LABEL_198:
      boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_name(a5, 0, &v344);
      v112 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format);
      v113 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      v114 = v344.__r_.__value_.__l.__size_;
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v115 = &v344;
      else
        v115 = (std::string *)v344.__r_.__value_.__r.__words[0];
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v114 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v116 = &v343;
      else
        v116 = (std::string *)v343.__r_.__value_.__r.__words[0];
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v117 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
      else
        v117 = v343.__r_.__value_.__l.__size_;
      if (v117 && v112)
      {
        v118 = (char *)v115 + v114;
        v119 = (std::string *)((char *)v116 + v117);
        v120 = v117 - 1;
        while (1)
        {
          v121 = 0;
          while (v116->__r_.__value_.__s.__data_[v121] == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format[v121])
          {
            v122 = v121 + 1;
            if (v120 != v121)
            {
              v25 = v112 - 1 == v121++;
              if (!v25)
                continue;
            }
            v123 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format[v122];
            v124 = (std::string *)((char *)v116 + v122);
            goto LABEL_219;
          }
          v123 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format[v121];
          v124 = (std::string *)((char *)v116 + v121);
LABEL_219:
          if (v123 == &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format[v112])
            break;
          v116 = (std::string *)((char *)v116 + 1);
          --v120;
          if (v116 == v119)
            goto LABEL_247;
        }
        if (v116 != v124)
        {
          v334[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format;
          v334[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format[v112];
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v343, (uint64_t *)v334, (char *)v115, v118, v116, v124, (char *)v115, v118);
          v113 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_247:
      if (v113 < 0)
        operator delete(v344.__r_.__value_.__l.__data_);
      goto LABEL_256;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v334);
    v344.__r_.__value_.__s.__data_[0] = 32;
    v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v334, (uint64_t)&v344, 1);
    v127 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format, v127);
    std::stringbuf::str();
    v128 = v333;
    p_p = (char *)__p;
    if ((v333 & 0x80u) != 0)
    {
      v130 = v332;
    }
    else
    {
      p_p = (char *)&__p;
      v130 = v333;
    }
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v131 = &v343;
    else
      v131 = (std::string *)v343.__r_.__value_.__r.__words[0];
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v132 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
    else
      v132 = v343.__r_.__value_.__l.__size_;
    if (v132 && v130)
    {
      v133 = (std::string::size_type)&p_p[v130];
      v134 = (std::string *)((char *)v131 + v132);
      v135 = v130 - 1;
      v136 = v132 - 1;
      while (1)
      {
        v137 = 0;
        while (v131->__r_.__value_.__s.__data_[v137] == p_p[v137])
        {
          v138 = v137 + 1;
          if (v136 != v137)
          {
            v25 = v135 == v137++;
            if (!v25)
              continue;
          }
          v139 = &p_p[v138];
          v140 = (uint64_t)v131 + v138;
          goto LABEL_242;
        }
        v139 = &p_p[v137];
        v140 = (uint64_t)v131 + v137;
LABEL_242:
        if (v139 == (char *)v133)
          break;
        v131 = (std::string *)((char *)v131 + 1);
        --v136;
        if (v131 == v134)
          goto LABEL_251;
      }
      if (v131 != (std::string *)v140)
      {
        v344.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
        v344.__r_.__value_.__l.__size_ = v133;
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v343, (uint64_t *)&v344, v131, v140);
        v128 = v333;
      }
    }
LABEL_251:
    if ((v128 & 0x80) != 0)
      operator delete(__p);
    v334[0] = *(std::locale *)MEMORY[0x24BEDB800];
    *(std::locale *)((char *)v334 + *((_QWORD *)v334[0].__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB800] + 24);
    v334[1].__locale_ = (std::locale::__imp *)(MEMORY[0x24BEDB848] + 16);
    if (v339 < 0)
      operator delete(v338);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x219A198F4](v340);
    goto LABEL_256;
  }
  v104 = v103;
  if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v105 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
  else
    v105 = v343.__r_.__value_.__l.__size_;
  if (v105 >= v103)
  {
    v106 = (char *)v102 + v105;
    v107 = *boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_name_format;
    v108 = v102;
    do
    {
      v109 = v105 - v104;
      if (v109 == -1)
        break;
      v110 = (char *)memchr(v108, v107, v109 + 1);
      if (!v110)
        break;
      v111 = v110;
      if (!memcmp(v110, v101, v104))
      {
        if (v111 == v106 || v111 - (char *)v102 == -1)
          break;
        goto LABEL_196;
      }
      v108 = (std::string *)(v111 + 1);
      v105 = v106 - (v111 + 1);
    }
    while (v105 >= v104);
  }
LABEL_256:
  v141 = (const void *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format;
  if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v142 = &v343;
  else
    v142 = (std::string *)v343.__r_.__value_.__r.__words[0];
  v143 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format);
  if (!v143)
  {
LABEL_272:
    boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_abbrev(a5, 0, v334);
    if (SBYTE7(v335) < 0)
    {
      v165 = v334[1].__locale_;
      operator delete(v334[0].__locale_);
      if (v165)
        goto LABEL_274;
    }
    else if (BYTE7(v335))
    {
LABEL_274:
      boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_abbrev(a5, 0, &v344);
      v152 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format);
      v153 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      v154 = v344.__r_.__value_.__l.__size_;
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v155 = &v344;
      else
        v155 = (std::string *)v344.__r_.__value_.__r.__words[0];
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v154 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v156 = &v343;
      else
        v156 = (std::string *)v343.__r_.__value_.__r.__words[0];
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v157 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
      else
        v157 = v343.__r_.__value_.__l.__size_;
      if (v157 && v152)
      {
        v158 = (char *)v155 + v154;
        v159 = (std::string *)((char *)v156 + v157);
        v160 = v157 - 1;
        while (1)
        {
          v161 = 0;
          while (v156->__r_.__value_.__s.__data_[v161] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format
                                                                                               + v161))
          {
            v162 = v161 + 1;
            if (v160 != v161)
            {
              v25 = v152 - 1 == v161++;
              if (!v25)
                continue;
            }
            v163 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format
                 + v162;
            v164 = (std::string *)((char *)v156 + v162);
            goto LABEL_295;
          }
          v163 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format
               + v161;
          v164 = (std::string *)((char *)v156 + v161);
LABEL_295:
          if (v163 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format
                     + v152)
            break;
          v156 = (std::string *)((char *)v156 + 1);
          --v160;
          if (v156 == v159)
            goto LABEL_323;
        }
        if (v156 != v164)
        {
          v334[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format;
          v334[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format
                                                   + v152);
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v343, (uint64_t *)v334, (char *)v155, v158, v156, v164, (char *)v155, v158);
          v153 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_323:
      if (v153 < 0)
        operator delete(v344.__r_.__value_.__l.__data_);
      goto LABEL_332;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v334);
    v344.__r_.__value_.__s.__data_[0] = 32;
    v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v334, (uint64_t)&v344, 1);
    v167 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format, v167);
    std::stringbuf::str();
    v168 = v333;
    v169 = (char *)__p;
    if ((v333 & 0x80u) != 0)
    {
      v170 = v332;
    }
    else
    {
      v169 = (char *)&__p;
      v170 = v333;
    }
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v171 = &v343;
    else
      v171 = (std::string *)v343.__r_.__value_.__r.__words[0];
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v172 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
    else
      v172 = v343.__r_.__value_.__l.__size_;
    if (v172 && v170)
    {
      v173 = (std::string::size_type)&v169[v170];
      v174 = (std::string *)((char *)v171 + v172);
      v175 = v170 - 1;
      v176 = v172 - 1;
      while (1)
      {
        v177 = 0;
        while (v171->__r_.__value_.__s.__data_[v177] == v169[v177])
        {
          v178 = v177 + 1;
          if (v176 != v177)
          {
            v25 = v175 == v177++;
            if (!v25)
              continue;
          }
          v179 = &v169[v178];
          v180 = (uint64_t)v171 + v178;
          goto LABEL_318;
        }
        v179 = &v169[v177];
        v180 = (uint64_t)v171 + v177;
LABEL_318:
        if (v179 == (char *)v173)
          break;
        v171 = (std::string *)((char *)v171 + 1);
        --v176;
        if (v171 == v174)
          goto LABEL_327;
      }
      if (v171 != (std::string *)v180)
      {
        v344.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
        v344.__r_.__value_.__l.__size_ = v173;
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v343, (uint64_t *)&v344, v171, v180);
        v168 = v333;
      }
    }
LABEL_327:
    if ((v168 & 0x80) != 0)
      operator delete(__p);
    v334[0] = *(std::locale *)MEMORY[0x24BEDB800];
    *(std::locale *)((char *)v334 + *((_QWORD *)v334[0].__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB800] + 24);
    v334[1].__locale_ = (std::locale::__imp *)(MEMORY[0x24BEDB848] + 16);
    if (v339 < 0)
      operator delete(v338);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x219A198F4](v340);
    goto LABEL_332;
  }
  v144 = v143;
  if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v145 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
  else
    v145 = v343.__r_.__value_.__l.__size_;
  if (v145 >= v143)
  {
    v146 = (char *)v142 + v145;
    v147 = (char)*boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_abbrev_format;
    v148 = v142;
    do
    {
      v149 = v145 - v144;
      if (v149 == -1)
        break;
      v150 = (char *)memchr(v148, v147, v149 + 1);
      if (!v150)
        break;
      v151 = v150;
      if (!memcmp(v150, v141, v144))
      {
        if (v151 == v146 || v151 - (char *)v142 == -1)
          break;
        goto LABEL_272;
      }
      v148 = (std::string *)(v151 + 1);
      v145 = v146 - (v151 + 1);
    }
    while (v145 >= v144);
  }
LABEL_332:
  v181 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format;
  if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v182 = &v343;
  else
    v182 = (std::string *)v343.__r_.__value_.__r.__words[0];
  v183 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format);
  if (!v183)
  {
LABEL_348:
    boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_name(a5, 1, v334);
    if (SBYTE7(v335) < 0)
    {
      v205 = v334[1].__locale_;
      operator delete(v334[0].__locale_);
      if (v205)
        goto LABEL_350;
    }
    else if (BYTE7(v335))
    {
LABEL_350:
      boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_name(a5, 1, &v344);
      v192 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format);
      v193 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      v194 = v344.__r_.__value_.__l.__size_;
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v195 = &v344;
      else
        v195 = (std::string *)v344.__r_.__value_.__r.__words[0];
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v194 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v196 = &v343;
      else
        v196 = (std::string *)v343.__r_.__value_.__r.__words[0];
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v197 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
      else
        v197 = v343.__r_.__value_.__l.__size_;
      if (v197 && v192)
      {
        v198 = (char *)v195 + v194;
        v199 = (std::string *)((char *)v196 + v197);
        v200 = v197 - 1;
        while (1)
        {
          v201 = 0;
          while (v196->__r_.__value_.__s.__data_[v201] == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[v201])
          {
            v202 = v201 + 1;
            if (v200 != v201)
            {
              v25 = v192 - 1 == v201++;
              if (!v25)
                continue;
            }
            v203 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[v202];
            v204 = (std::string *)((char *)v196 + v202);
            goto LABEL_371;
          }
          v203 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[v201];
          v204 = (std::string *)((char *)v196 + v201);
LABEL_371:
          if (v203 == &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[v192])
            break;
          v196 = (std::string *)((char *)v196 + 1);
          --v200;
          if (v196 == v199)
            goto LABEL_395;
        }
        if (v196 != v204)
        {
          v334[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format;
          v334[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[v192];
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v343, (uint64_t *)v334, (char *)v195, v198, v196, v204, (char *)v195, v198);
          v193 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_395:
      if (v193 < 0)
        operator delete(v344.__r_.__value_.__l.__data_);
      goto LABEL_399;
    }
    v206 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format);
    v207 = v343.__r_.__value_.__l.__size_;
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v208 = &v343;
    else
      v208 = (std::string *)v343.__r_.__value_.__r.__words[0];
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v207 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
    if (v207 && v206)
    {
      v209 = (std::string *)((char *)v208 + v207);
      v210 = v207 - 1;
      while (1)
      {
        v211 = 0;
        while (v208->__r_.__value_.__s.__data_[v211] == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[v211])
        {
          v212 = v211 + 1;
          if (v210 != v211)
          {
            v25 = v206 - 1 == v211++;
            if (!v25)
              continue;
          }
          v213 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[v212];
          v214 = (uint64_t)v208 + v212;
          goto LABEL_390;
        }
        v213 = &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[v211];
        v214 = (uint64_t)v208 + v211;
LABEL_390:
        if (v213 == &boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[v206])
          break;
        v208 = (std::string *)((char *)v208 + 1);
        --v210;
        if (v208 == v209)
          goto LABEL_399;
      }
      if (v208 != (std::string *)v214)
      {
        v334[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format;
        v334[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[v206];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v343, (uint64_t *)v334, v208, v214);
      }
    }
    goto LABEL_399;
  }
  v184 = v183;
  if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v185 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
  else
    v185 = v343.__r_.__value_.__l.__size_;
  if (v185 >= v183)
  {
    v186 = (char *)v182 + v185;
    v187 = *boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format;
    v188 = v182;
    do
    {
      v189 = v185 - v184;
      if (v189 == -1)
        break;
      v190 = (char *)memchr(v188, v187, v189 + 1);
      if (!v190)
        break;
      v191 = v190;
      if (!memcmp(v190, v181, v184))
      {
        if (v191 == v186 || v191 - (char *)v182 == -1)
          break;
        goto LABEL_348;
      }
      v188 = (std::string *)(v191 + 1);
      v185 = v186 - (v191 + 1);
    }
    while (v185 >= v184);
  }
LABEL_399:
  v215 = (const void *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format;
  if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v216 = &v343;
  else
    v216 = (std::string *)v343.__r_.__value_.__r.__words[0];
  v217 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format);
  if (v217)
  {
    v218 = v217;
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v219 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
    else
      v219 = v343.__r_.__value_.__l.__size_;
    if (v219 >= v217)
    {
      v220 = (char *)v216 + v219;
      v221 = (char)*boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format;
      v222 = v216;
      while (1)
      {
        v223 = v219 - v218;
        if (v223 == -1)
          break;
        v224 = (char *)memchr(v222, v221, v223 + 1);
        if (!v224)
          break;
        v225 = v224;
        if (!memcmp(v224, v215, v218))
        {
          if (v225 == v220 || v225 - (char *)v216 == -1)
            goto LABEL_466;
          goto LABEL_415;
        }
        v222 = (std::string *)(v225 + 1);
        v219 = v220 - (v225 + 1);
        if (v219 < v218)
          goto LABEL_466;
      }
    }
    goto LABEL_466;
  }
LABEL_415:
  boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_abbrev(a5, 1, v334);
  if (SBYTE7(v335) < 0)
  {
    v239 = v334[1].__locale_;
    operator delete(v334[0].__locale_);
    if (v239)
      goto LABEL_417;
LABEL_442:
    v240 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format);
    v241 = v343.__r_.__value_.__l.__size_;
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v242 = &v343;
    else
      v242 = (std::string *)v343.__r_.__value_.__r.__words[0];
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v241 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
    if (v241 && v240)
    {
      v243 = (std::string *)((char *)v242 + v241);
      v244 = v241 - 1;
      while (1)
      {
        v245 = 0;
        while (v242->__r_.__value_.__s.__data_[v245] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
                                                                                             + v245))
        {
          v246 = v245 + 1;
          if (v244 != v245)
          {
            v25 = v240 - 1 == v245++;
            if (!v25)
              continue;
          }
          v247 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
               + v246;
          v248 = (uint64_t)v242 + v246;
          goto LABEL_457;
        }
        v247 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
             + v245;
        v248 = (uint64_t)v242 + v245;
LABEL_457:
        if (v247 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
                   + v240)
          break;
        v242 = (std::string *)((char *)v242 + 1);
        --v244;
        if (v242 == v243)
          goto LABEL_466;
      }
      if (v242 != (std::string *)v248)
      {
        v334[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format;
        v334[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
                                                 + v240);
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v343, (uint64_t *)v334, v242, v248);
      }
    }
    goto LABEL_466;
  }
  if (!BYTE7(v335))
    goto LABEL_442;
LABEL_417:
  boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_abbrev(a5, 1, &v344);
  v226 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format);
  v227 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
  v228 = v344.__r_.__value_.__l.__size_;
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v229 = &v344;
  else
    v229 = (std::string *)v344.__r_.__value_.__r.__words[0];
  if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v228 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
  if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v230 = &v343;
  else
    v230 = (std::string *)v343.__r_.__value_.__r.__words[0];
  if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v231 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
  else
    v231 = v343.__r_.__value_.__l.__size_;
  if (v231 && v226)
  {
    v232 = (char *)v229 + v228;
    v233 = (std::string *)((char *)v230 + v231);
    v234 = v231 - 1;
    while (1)
    {
      v235 = 0;
      while (v230->__r_.__value_.__s.__data_[v235] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
                                                                                           + v235))
      {
        v236 = v235 + 1;
        if (v234 != v235)
        {
          v25 = v226 - 1 == v235++;
          if (!v25)
            continue;
        }
        v237 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
             + v236;
        v238 = (std::string *)((char *)v230 + v236);
        goto LABEL_438;
      }
      v237 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
           + v235;
      v238 = (std::string *)((char *)v230 + v235);
LABEL_438:
      if (v237 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
                 + v226)
        break;
      v230 = (std::string *)((char *)v230 + 1);
      --v234;
      if (v230 == v233)
        goto LABEL_462;
    }
    if (v230 != v238)
    {
      v334[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format;
      v334[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::zone_iso_format
                                               + v226);
      boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v343, (uint64_t *)v334, (char *)v229, v232, v230, v238, (char *)v229, v232);
      v227 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
    }
  }
LABEL_462:
  if (v227 < 0)
    operator delete(v344.__r_.__value_.__l.__data_);
LABEL_466:
  v249 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_format;
  v250 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
  v251 = (std::string *)v343.__r_.__value_.__r.__words[0];
  if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v252 = &v343;
  else
    v252 = (std::string *)v343.__r_.__value_.__r.__words[0];
  v253 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_format);
  if (v253)
  {
    v254 = v253;
    v255 = v343.__r_.__value_.__l.__size_;
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v255 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
    if (v255 >= v253)
    {
      v256 = (char *)v252 + v255;
      v257 = *boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_format;
      v258 = v252;
      do
      {
        v259 = v255 - v254;
        if (v259 == -1)
          break;
        v260 = (char *)memchr(v258, v257, v259 + 1);
        if (!v260)
          break;
        v261 = v260;
        if (!memcmp(v260, v249, v254))
        {
          if (v261 == v256 || v261 - (char *)v252 == -1)
            break;
          goto LABEL_481;
        }
        v258 = (std::string *)(v261 + 1);
        v255 = v256 - (v261 + 1);
      }
      while (v255 >= v254);
    }
  }
  else
  {
LABEL_481:
    v262 = HIBYTE(v342);
    LOBYTE(v263) = HIBYTE(v342);
    v264 = (std::locale::__imp *)*((_QWORD *)&v341 + 1);
    if (v342 >= 0)
      v265 = HIBYTE(v342);
    else
      v265 = *((_QWORD *)&v341 + 1);
    if (!v265)
    {
      v266 = *a5;
      v267 = 0x7FFFFFFFFFFFFFFELL;
      if (*a5 == 0x8000000000000000)
        v267 = 0x8000000000000000;
      if (v266 != 0x7FFFFFFFFFFFFFFFLL)
        v266 = v267;
      if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2)
        v266 = *a5 % 86400000000;
      v268 = v266 % 1000000;
      if (v268 >= 0)
        v269 = v268;
      else
        v269 = -v268;
      boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v269, 6);
      if (SHIBYTE(v342) < 0)
        operator delete((void *)v341);
      v342 = v335;
      v341 = *(_OWORD *)&v334[0].__locale_;
      v249 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_format;
      v262 = BYTE7(v335);
      v264 = v334[1].__locale_;
      v250 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
      v251 = (std::string *)v343.__r_.__value_.__r.__words[0];
      v263 = BYTE7(v335);
    }
    v270 = strlen(v249);
    if ((v263 & 0x80u) == 0)
      v271 = (char *)&v341;
    else
      v271 = (char *)v341;
    if ((v263 & 0x80u) == 0)
      v272 = v262;
    else
      v272 = (unint64_t)v264;
    if ((v250 & 0x80u) == 0)
      v273 = &v343;
    else
      v273 = v251;
    if ((v250 & 0x80u) == 0)
      v274 = v250;
    else
      v274 = v343.__r_.__value_.__l.__size_;
    if (v274 && v270)
    {
      v275 = &v271[v272];
      v276 = (std::string *)((char *)v273 + v274);
      v277 = v274 - 1;
      while (1)
      {
        v278 = 0;
        while (v273->__r_.__value_.__s.__data_[v278] == v249[v278])
        {
          v279 = v278 + 1;
          if (v277 != v278)
          {
            v25 = v270 - 1 == v278++;
            if (!v25)
              continue;
          }
          v280 = &v249[v279];
          v281 = (std::string *)((char *)v273 + v279);
          goto LABEL_519;
        }
        v280 = &v249[v278];
        v281 = (std::string *)((char *)v273 + v278);
LABEL_519:
        if (v280 == &v249[v270])
          break;
        v273 = (std::string *)((char *)v273 + 1);
        --v277;
        if (v273 == v276)
          goto LABEL_524;
      }
      if (v273 != v281)
      {
        v334[0].__locale_ = (std::locale::__imp *)v249;
        v334[1].__locale_ = (std::locale::__imp *)&v249[v270];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v343, (uint64_t *)v334, v271, v275, v273, v281, v271, v275);
        v250 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
        v251 = (std::string *)v343.__r_.__value_.__r.__words[0];
      }
    }
  }
LABEL_524:
  v282 = (const void *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
  if ((v250 & 0x80u) == 0)
    v251 = &v343;
  v283 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format);
  if (v283)
  {
    v284 = v283;
    v285 = v343.__r_.__value_.__l.__size_;
    if ((v250 & 0x80u) == 0)
      v285 = v250;
    if (v285 >= v283)
    {
      v286 = (char *)v251 + v285;
      v287 = (char)*boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
      v288 = v251;
      do
      {
        v289 = v285 - v284;
        if (v289 == -1)
          break;
        v290 = (char *)memchr(v288, v287, v289 + 1);
        if (!v290)
          break;
        v291 = v290;
        if (!memcmp(v290, v282, v284))
        {
          if (v291 == v286 || v291 - (char *)v251 == -1)
            break;
          goto LABEL_538;
        }
        v288 = (std::string *)(v291 + 1);
        v285 = v286 - (v291 + 1);
      }
      while (v285 >= v284);
    }
  }
  else
  {
LABEL_538:
    v292 = *a5;
    v293 = 0x7FFFFFFFFFFFFFFELL;
    if (*a5 == 0x8000000000000000)
      v293 = 0x8000000000000000;
    if (v292 != 0x7FFFFFFFFFFFFFFFLL)
      v292 = v293;
    if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2)
      v292 = *a5 % 86400000000;
    v294 = v292 % 1000000;
    if (v294)
    {
      if (v294 >= 0)
        v295 = v294;
      else
        v295 = -v294;
      boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v295, 6);
    }
    else
    {
      v334[0].__locale_ = 0;
      v334[1].__locale_ = 0;
      *(_QWORD *)&v335 = 0;
    }
    if (SHIBYTE(v342) < 0)
      operator delete((void *)v341);
    v342 = v335;
    v341 = *(_OWORD *)&v334[0].__locale_;
    v296 = BYTE7(v335);
    if (SBYTE7(v335) < 0)
      v296 = *((_QWORD *)&v341 + 1);
    if (v296)
    {
      std::ios_base::getloc(v329);
      v297 = std::locale::use_facet(v334, MEMORY[0x24BEDB588]);
      v298 = ((uint64_t (*)(const std::locale::facet *))v297->__vftable[1].~facet)(v297);
      std::locale::~locale(v334);
      memset(&v344, 0, sizeof(v344));
      std::string::push_back(&v344, v298);
      if (v342 >= 0)
        v299 = (const std::string::value_type *)&v341;
      else
        v299 = (const std::string::value_type *)v341;
      if (v342 >= 0)
        v300 = HIBYTE(v342);
      else
        v300 = *((_QWORD *)&v341 + 1);
      std::string::append(&v344, v299, v300);
      v301 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format);
      v302 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      v303 = v344.__r_.__value_.__l.__size_;
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v304 = &v344;
      else
        v304 = (std::string *)v344.__r_.__value_.__r.__words[0];
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v303 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v305 = &v343;
      else
        v305 = (std::string *)v343.__r_.__value_.__r.__words[0];
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v306 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
      else
        v306 = v343.__r_.__value_.__l.__size_;
      if (v306 && v301)
      {
        v307 = (char *)v304 + v303;
        v308 = (std::string *)((char *)v305 + v306);
        v309 = v306 - 1;
        while (1)
        {
          v310 = 0;
          while (v305->__r_.__value_.__s.__data_[v310] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                                                               + v310))
          {
            v311 = v310 + 1;
            if (v309 != v310)
            {
              v25 = v301 - 1 == v310++;
              if (!v25)
                continue;
            }
            v312 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                 + v311;
            v313 = (std::string *)((char *)v305 + v311);
            goto LABEL_582;
          }
          v312 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
               + v310;
          v313 = (std::string *)((char *)v305 + v310);
LABEL_582:
          if (v312 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                     + v301)
            break;
          v305 = (std::string *)((char *)v305 + 1);
          --v309;
          if (v305 == v308)
            goto LABEL_605;
        }
        if (v305 != v313)
        {
          v334[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
          v334[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                   + v301);
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v343, (uint64_t *)v334, (char *)v304, v307, v305, v313, (char *)v304, v307);
          v302 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_605:
      if (v302 < 0)
        operator delete(v344.__r_.__value_.__l.__data_);
    }
    else
    {
      v314 = strlen(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format);
      v315 = v343.__r_.__value_.__l.__size_;
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v316 = &v343;
      else
        v316 = (std::string *)v343.__r_.__value_.__r.__words[0];
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v315 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
      if (v315 && v314)
      {
        v317 = (std::string *)((char *)v316 + v315);
        v318 = v315 - 1;
        while (1)
        {
          v319 = 0;
          while (v316->__r_.__value_.__s.__data_[v319] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                                                               + v319))
          {
            v320 = v319 + 1;
            if (v318 != v319)
            {
              v25 = v314 - 1 == v319++;
              if (!v25)
                continue;
            }
            v321 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                 + v320;
            v322 = (uint64_t)v316 + v320;
            goto LABEL_600;
          }
          v321 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
               + v319;
          v322 = (uint64_t)v316 + v319;
LABEL_600:
          if (v321 == boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                     + v314)
            break;
          v316 = (std::string *)((char *)v316 + 1);
          --v318;
          if (v316 == v317)
            goto LABEL_609;
        }
        if (v316 != (std::string *)v322)
        {
          v334[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
          v334[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                   + v314);
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v343, (uint64_t *)v334, v316, v322);
        }
      }
    }
  }
LABEL_609:
  v344.__r_.__value_.__r.__words[0] = boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::local_time(a5);
  *(_OWORD *)&v334[0].__locale_ = 0u;
  v335 = 0u;
  v336 = 0u;
  v337 = 0;
  LODWORD(__p) = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date((uint64_t *)&v344);
  boost::gregorian::to_tm((boost::gregorian *)&__p, (uint64_t)v334);
  v323 = v344.__r_.__value_.__r.__words[0];
  v324 = 0x7FFFFFFFFFFFFFFELL;
  if (v344.__r_.__value_.__r.__words[0] == 0x8000000000000000)
    v324 = 0x8000000000000000;
  if (v344.__r_.__value_.__r.__words[0] != 0x7FFFFFFFFFFFFFFFLL)
    v323 = v324;
  if (v344.__r_.__value_.__r.__words[0] - 0x7FFFFFFFFFFFFFFELL > 2)
    v323 = (int64_t)v344.__r_.__value_.__r.__words[0] % 86400000000;
  LODWORD(v334[0].__locale_) = (int)(v323 / 1000000) % 60;
  HIDWORD(v334[0].__locale_) = (int)(v323 / 60000000) % 60;
  LODWORD(v334[1].__locale_) = (int)v323 / -694967296;
  LODWORD(v336) = -1;
  LODWORD(v336) = boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::is_dst(a5);
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v330, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
  else
    v330 = v343;
  v325 = (*(uint64_t (**)(uint64_t, uint64_t, std::ios_base *, _QWORD, std::locale *, std::string *))(*(_QWORD *)v327 + 48))(v327, a2, v329, v328, v334, &v330);
  if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v330.__r_.__value_.__l.__data_);
  if (SHIBYTE(v342) < 0)
    operator delete((void *)v341);
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  return v325;
}

void sub_21822013C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::locale a25)
{
  uint64_t v25;

  if (a24 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a25);
  if (*(char *)(v25 - 153) < 0)
    operator delete(*(void **)(v25 - 176));
  if (*(char *)(v25 - 121) < 0)
    operator delete(*(void **)(v25 - 144));
  _Unwind_Resume(a1);
}

void boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_abbrev(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  char *v7;
  void (*v8)(void);
  void *__p;
  unsigned int *v10;
  char v11;
  unint64_t v12;
  int64_t v13;

  __p = 0;
  v10 = 0;
  v6 = a1[1];
  boost::detail::shared_count::~shared_count(&v10);
  if (v6)
  {
    if (boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::is_dst(a1))
    {
      if (a2)
      {
        (*(void (**)(int64_t *__return_ptr))(*(_QWORD *)a1[1] + 72))(&v13);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 80))(&__p);
        boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>>::operator+=((unint64_t *)&v13, (unint64_t *)&__p, &v12);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_offset((uint64_t)a1, &v13, (uint64_t)&__p);
        goto LABEL_9;
      }
      v8 = *(void (**)(void))(*(_QWORD *)a1[1] + 16);
    }
    else
    {
      if (a2)
      {
        (*(void (**)(int64_t *__return_ptr))(*(_QWORD *)a1[1] + 72))(&v13);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_offset((uint64_t)a1, &v13, (uint64_t)&__p);
LABEL_9:
        if (v11 < 0)
          operator delete(__p);
        return;
      }
      v8 = *(void (**)(void))(*(_QWORD *)a1[1] + 24);
    }
    v8();
    return;
  }
  if (a2)
    v7 = "Z";
  else
    v7 = "UTC";
  std::string::basic_string[abi:ne180100]<0>(a3, v7);
}

void sub_2182203A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_posix_string@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unsigned int *v6;

  v6 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  boost::detail::shared_count::~shared_count(&v6);
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "UTC+00");
}

void boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_name(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  char *v7;
  void (*v8)(void);
  void *__p;
  unsigned int *v10;
  char v11;
  unint64_t v12;
  int64_t v13;

  __p = 0;
  v10 = 0;
  v6 = a1[1];
  boost::detail::shared_count::~shared_count(&v10);
  if (v6)
  {
    if (boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::is_dst(a1))
    {
      if (a2)
      {
        (*(void (**)(int64_t *__return_ptr))(*(_QWORD *)a1[1] + 72))(&v13);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 80))(&__p);
        boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>>::operator+=((unint64_t *)&v13, (unint64_t *)&__p, &v12);
        std::string::basic_string[abi:ne180100]<0>(&__p, ":");
        boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_offset((uint64_t)a1, &v13, (uint64_t)&__p);
        goto LABEL_9;
      }
      v8 = *(void (**)(void))(*(_QWORD *)a1[1] + 32);
    }
    else
    {
      if (a2)
      {
        (*(void (**)(int64_t *__return_ptr))(*(_QWORD *)a1[1] + 72))(&v13);
        std::string::basic_string[abi:ne180100]<0>(&__p, ":");
        boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_offset((uint64_t)a1, &v13, (uint64_t)&__p);
LABEL_9:
        if (v11 < 0)
          operator delete(__p);
        return;
      }
      v8 = *(void (**)(void))(*(_QWORD *)a1[1] + 40);
    }
    v8();
    return;
  }
  if (a2)
    v7 = "Z";
  else
    v7 = "Coordinated Universal Time";
  std::string::basic_string[abi:ne180100]<0>(a3, v7);
}

void sub_218220588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::is_dst(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;

  v25 = 0;
  v26 = 0;
  v2 = a1[1];
  if (!v2 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2))
  {
    boost::detail::shared_count::~shared_count(&v26);
    return 0;
  }
  v3 = *a1 - 0x7FFFFFFFFFFFFFFELL;
  boost::detail::shared_count::~shared_count(&v26);
  if (v3 < 3)
    return 0;
  v4 = a1[1];
  v24 = *a1;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 72))(&v25);
  boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=(&v24, (unint64_t *)&v25);
  v5 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v24);
  v6 = v24;
  v7 = 0x7FFFFFFFFFFFFFFELL;
  if (v24 == 0x8000000000000000)
    v7 = 0x8000000000000000;
  if (v24 != 0x7FFFFFFFFFFFFFFFLL)
    v6 = v7;
  if ((unint64_t)(v24 - 0x7FFFFFFFFFFFFFFELL) <= 2)
    v8 = v6;
  else
    v8 = v24 % 86400000000;
  v9 = (unsigned int *)a1[2];
  v21 = a1[1];
  v22 = v9;
  v23 = v8;
  if (v9)
  {
    v10 = v9 + 2;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::check_dst(v5, &v23, &v21);
  boost::detail::shared_count::~shared_count(&v22);
  result = 0;
  switch(v12)
  {
    case 0:
      return result;
    case 1:
      goto LABEL_21;
    case 2:
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 80))(&v20);
      v25 = v20;
      v14 = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::add_time_duration(&v24, &v25);
      v15 = a1[1];
      LODWORD(v25) = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v24);
      v16 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(&v25);
      if (v14 >= (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, v16))
        return 0;
      goto LABEL_21;
    case 3:
      v17 = a1[1];
      LODWORD(v25) = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v24);
      v18 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(&v25);
      v19 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 56))(v17, v18);
      if (v24 < v19)
        return 0;
LABEL_21:
      result = 1;
      break;
    default:
      return 0;
  }
  return result;
}

void sub_2182207BC(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

unint64_t *boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000ll,(unsigned short)6,long long>>::operator+=@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *result;
  if (*result - 0x7FFFFFFFFFFFFFFELL >= 3)
  {
    v5 = *a2;
    if (*a2 - 0x7FFFFFFFFFFFFFFELL >= 3)
      goto LABEL_14;
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFELL;
    if (v3 == 0x7FFFFFFFFFFFFFFELL)
      goto LABEL_16;
    v5 = *a2;
  }
  v4 = 0x7FFFFFFFFFFFFFFELL;
  if (v5 == 0x7FFFFFFFFFFFFFFELL)
    goto LABEL_16;
  if (v3 == 0x8000000000000000)
  {
    v6 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_10:
    if (v5 == v6)
      v4 = 0x7FFFFFFFFFFFFFFELL;
    else
      v4 = *result;
    goto LABEL_16;
  }
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = 0x8000000000000000;
    goto LABEL_10;
  }
  v4 = 0x8000000000000000;
  if (v5 != 0x8000000000000000)
  {
    v4 = v5;
    if (v5 != 0x7FFFFFFFFFFFFFFFLL)
LABEL_14:
      v4 = v5 + v3;
  }
LABEL_16:
  *result = v4;
  *a3 = v4;
  return result;
}

uint64_t boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::zone_as_offset(uint64_t a1, int64_t *a2, uint64_t a3)
{
  const char *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  int64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  v16 = 0;
  if (boost::date_time::int_adapter<long long>::compare(a2, &v16) == -1)
    v5 = "-";
  else
    v5 = "+";
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v5, 1);
  *(_QWORD *)((char *)&v13[3] + *(_QWORD *)(v13[0] - 24)) = 2;
  LOBYTE(v16) = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, (char *)&v16);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = *(char *)(a3 + 23);
  if (v7 >= 0)
    v8 = a3;
  else
    v8 = *(_QWORD *)a3;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 24) = 2;
  v12 = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, &v12);
  std::ostream::operator<<();
  std::stringbuf::str();
  v13[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v15);
}

void sub_218220A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::local_time(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;

  v8 = 0;
  v9 = 0;
  v2 = a1[1];
  boost::detail::shared_count::~shared_count(&v9);
  if (!v2)
    return *a1;
  v3 = a1[1];
  v7 = *a1;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 72))(&v6);
  v8 = v6;
  v4 = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::add_time_duration(&v7, &v8);
  v10 = v4;
  if (boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::is_dst(a1))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 80))(&v8);
    boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=((uint64_t *)&v10, (unint64_t *)&v8);
    return v10;
  }
  return v4;
}

uint64_t boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::time_facet(uint64_t a1, uint64_t a2)
{
  char *v4;
  std::string *v5;
  __int128 v6;
  std::string v8;
  __int128 *v9[3];
  std::vector<std::string> v10;
  _BYTE v11[8];
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;

  v4 = boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::default_time_format;
  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter((uint64_t)v11, 1, "/", "[", ")", "]");
  boost::date_time::special_values_formatter<char,std::ostreambuf_iterator<char>>::special_values_formatter(&v10);
  boost::date_time::date_generator_formatter<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_generator_formatter((uint64_t)v9);
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_facet(a1, v4, (uint64_t)v11, (__int128 **)&v10, v9, a2);
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v19 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  *(_QWORD *)a1 = &unk_24D932428;
  std::string::basic_string[abi:ne180100]<0>(&v8, boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[0]);
  v5 = std::string::append(&v8, boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::default_time_duration_format[0]);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 352) = *((_QWORD *)&v5->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 336) = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  return a1;
}

void sub_218220C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(v21);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_BYTE *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D9325F0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D9325F0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(turi::flexible_type_impl *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  std::string v6;
  void *v7[2];
  uint64_t v8;
  uint64_t v9;
  void *__p;
  char v11;
  uint64_t v12;

  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_10;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_10:
      v7[0] = *(void **)MEMORY[0x24BEDB7F0];
      v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)v7 + *((_QWORD *)v7[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v8 = v5;
      v9 = MEMORY[0x24BEDB848] + 16;
      if (v11 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v12);
      goto LABEL_17;
    case 2:
      v3 = *(_QWORD *)a1;
      if (*(char *)(*(_QWORD *)a1 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
      }
      else
      {
        v4 = *(_OWORD *)(v3 + 8);
        v6.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
        *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v4;
      }
      goto LABEL_17;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v7, (_QWORD *)(*(_QWORD *)a1 + 8));
      goto LABEL_17;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v7, (uint64_t *)(*(_QWORD *)a1 + 8));
      goto LABEL_17;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v7, (_QWORD *)(*(_QWORD *)a1 + 8));
      goto LABEL_17;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(a1, &v6);
      goto LABEL_17;
    case 7:
      memset(&v6, 0, sizeof(v6));
      goto LABEL_17;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_17;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v7, (_QWORD *)(*(_QWORD *)a1 + 8));
LABEL_17:
      std::string::basic_string[abi:ne180100]<0>(v7, "");
      turi::image_util::load_image((uint64_t)&v6, (uint64_t *)v7, a2);
      if (SHIBYTE(v8) < 0)
        operator delete(v7[0]);
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v6.__r_.__value_.__l.__data_);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_218221100(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

_QWORD *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24D932670;
  v2 = (uint64_t)(a1 + 2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24D932670;
  v1 = (uint64_t)(a1 + 2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = &off_24D932670;
  std::__compressed_pair_elem<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D932670;
  return std::__compressed_pair_elem<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 16;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 32);
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  uint64_t v2;

  v2 = (uint64_t)a1 + 16;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(_BYTE *a1@<X0>, int *a2@<X1>, std::string::size_type a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char **v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  void *v70;
  void *v71;
  unsigned int v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  void *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  char **v86;
  char *v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  void *v105;
  void *v106;
  unsigned int v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  void *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t *v123;
  void *v124;
  void *v125;
  unsigned int v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  unsigned int v131;
  BOOL v132;
  int v133;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t *v144;
  void *v145;
  void *v146;
  unsigned int v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  void *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  void *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unsigned int v165;
  int v166;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unsigned int v177;
  int v178;
  unint64_t *v180;
  unint64_t v181;
  std::runtime_error *exception;
  std::string *v183;
  __int128 v184;
  float v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t *v190;
  uint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t *v199;
  void *v200;
  void *v201;
  unsigned int v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t *v206;
  void *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t *v214;
  std::runtime_error *v215;
  std::string *v216;
  __int128 v217;
  char v218;
  std::string v219;
  size_t __idx;
  _BYTE __str[32];
  __int128 v222;
  __int128 v223;
  uint64_t v224;

  v224 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int8 *)a2 + 12);
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  if (v4 == 7)
  {
    if (a2 != (int *)a3)
    {
      *(_QWORD *)(a3 + 5) = *(_QWORD *)((char *)a2 + 5);
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_BYTE *)(a3 + 12) = 7;
    }
  }
  else
  {
    switch(a1[8])
    {
      case 0:
        switch(v4)
        {
          case 0:
            v6 = *(_QWORD *)a2;
            goto LABEL_86;
          case 1:
            v6 = (uint64_t)*(double *)a2;
            goto LABEL_86;
          case 2:
            v45 = *(_QWORD *)a2;
            v46 = (char **)(*(_QWORD *)a2 + 8);
            __idx = 0;
            v47 = (char *)v46;
            if (*(char *)(v45 + 31) < 0)
              v47 = *v46;
            std::string::basic_string[abi:ne180100]<0>(__str, v47);
            v6 = std::stoll((const std::string *)__str, &__idx, 10);
            if ((__str[23] & 0x80000000) != 0)
              operator delete(*(void **)__str);
            if (*(char *)(v45 + 31) < 0)
              v48 = *(_QWORD *)(v45 + 16);
            else
              v48 = *(unsigned __int8 *)(v45 + 31);
            if (__idx != v48)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v183 = std::string::append(&v219, " cannot be interpreted as an integer");
              v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
              *(_QWORD *)&__str[16] = *((_QWORD *)&v183->__r_.__value_.__l + 2);
              *(_OWORD *)__str = v184;
              v183->__r_.__value_.__l.__size_ = 0;
              v183->__r_.__value_.__r.__words[2] = 0;
              v183->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, (const std::string *)__str);
              __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_86;
          case 3:
            v55 = *(_QWORD *)a2;
            memset(__str, 0, 24);
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v55 + 8), *(_QWORD *)(v55 + 16), (uint64_t)(*(_QWORD *)(v55 + 16) - *(_QWORD *)(v55 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (*(_QWORD *)__str)
            {
              *(_QWORD *)&__str[8] = *(_QWORD *)__str;
              operator delete(*(void **)__str);
            }
            goto LABEL_85;
          case 4:
            v41 = *(_QWORD *)a2;
            memset(__str, 0, 24);
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v41 + 8), *(uint64_t **)(v41 + 16), (uint64_t)(*(_QWORD *)(v41 + 16) - *(_QWORD *)(v41 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v219.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
            goto LABEL_85;
          case 5:
            v43 = *(_QWORD *)a2;
            memset(__str, 0, 24);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v43 + 8), *(uint64_t **)(v43 + 16), (uint64_t)(*(_QWORD *)(v43 + 16) - *(_QWORD *)(v43 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v219.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
            goto LABEL_85;
          case 6:
            v6 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
            goto LABEL_86;
          case 8:
            v49 = *(_QWORD *)a2;
            v50 = *(_QWORD *)(*(_QWORD *)a2 + 16);
            *(_QWORD *)__str = *(_QWORD *)(*(_QWORD *)a2 + 8);
            *(_QWORD *)&__str[8] = v50;
            if (v50)
            {
              v51 = (unsigned int *)(v50 + 8);
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
            }
            v53 = *(_OWORD *)(v49 + 24);
            v54 = *(_OWORD *)(v49 + 56);
            v222 = *(_OWORD *)(v49 + 40);
            v223 = v54;
            *(_OWORD *)&__str[16] = v53;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
            goto LABEL_85;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)a2 + 8);
            turi::flexible_type_fail(0);
            if (*((_QWORD *)&v222 + 1))
            {
              *(_QWORD *)&v223 = *((_QWORD *)&v222 + 1);
              operator delete(*((void **)&v222 + 1));
            }
            if (*(_QWORD *)&__str[16])
            {
              *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
              operator delete(*(void **)&__str[16]);
            }
            v35 = *(std::__shared_weak_count **)&__str[8];
            if (*(_QWORD *)&__str[8])
            {
              v36 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
LABEL_85:
            v6 = 0;
LABEL_86:
            switch(*(_BYTE *)(a3 + 12))
            {
              case 2:
                v56 = *(unint64_t **)a3;
                do
                {
                  v57 = __ldaxr(v56);
                  v58 = v57 - 1;
                }
                while (__stlxr(v58, v56));
                if (!v58)
                {
                  v59 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_128;
                  if (*((char *)v59 + 31) < 0)
                    operator delete((void *)v59[1]);
                  v60 = v59;
                  v61 = 0x1012C404EF22A49;
                  goto LABEL_127;
                }
                break;
              case 3:
                v73 = *(unint64_t **)a3;
                do
                {
                  v74 = __ldaxr(v73);
                  v75 = v74 - 1;
                }
                while (__stlxr(v75, v73));
                if (!v75)
                {
                  v76 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_128;
                  v77 = (void *)v76[1];
                  if (v77)
                  {
                    v76[2] = (unint64_t)v77;
                    operator delete(v77);
                  }
                  v60 = v76;
                  v61 = 0x1080C409938AC02;
                  goto LABEL_127;
                }
                break;
              case 4:
                v62 = *(unint64_t **)a3;
                do
                {
                  v63 = __ldaxr(v62);
                  v64 = v63 - 1;
                }
                while (__stlxr(v64, v62));
                if (!v64)
                {
                  v65 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_128;
                  *(_QWORD *)__str = v65 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                  goto LABEL_120;
                }
                break;
              case 5:
                v78 = *(unint64_t **)a3;
                do
                {
                  v79 = __ldaxr(v78);
                  v80 = v79 - 1;
                }
                while (__stlxr(v80, v78));
                if (!v80)
                {
                  v65 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_128;
                  *(_QWORD *)__str = v65 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_120:
                  v60 = v65;
                  v61 = 0x1020C405E66F15BLL;
                  goto LABEL_127;
                }
                break;
              case 8:
                v81 = *(unint64_t **)a3;
                do
                {
                  v82 = __ldaxr(v81);
                  v83 = v82 - 1;
                }
                while (__stlxr(v83, v81));
                if (!v83)
                {
                  v84 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_128;
                  boost::detail::shared_count::~shared_count((unsigned int **)v84 + 2);
                  v60 = v84;
                  v72 = -235920773;
                  goto LABEL_126;
                }
                break;
              case 9:
                v66 = *(unint64_t **)a3;
                do
                {
                  v67 = __ldaxr(v66);
                  v68 = v67 - 1;
                }
                while (__stlxr(v68, v66));
                if (!v68)
                {
                  v69 = *(unint64_t **)a3;
                  if (*(_QWORD *)a3)
                  {
                    v70 = (void *)v69[6];
                    if (v70)
                    {
                      v69[7] = (unint64_t)v70;
                      operator delete(v70);
                    }
                    v71 = (void *)v69[3];
                    if (v71)
                    {
                      v69[4] = (unint64_t)v71;
                      operator delete(v71);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v69 + 1));
                    v60 = v69;
                    v72 = 2071181815;
LABEL_126:
                    v61 = v72 | 0x1030C4000000000;
LABEL_127:
                    MEMORY[0x219A19A08](v60, v61);
                  }
LABEL_128:
                  *(_QWORD *)a3 = 0;
                }
                break;
              default:
                break;
            }
            *(_DWORD *)(a3 + 8) = 0;
            *(_BYTE *)(a3 + 12) = 0;
            *(_QWORD *)a3 = v6;
            break;
          default:
            goto LABEL_328;
        }
        break;
      case 1:
        switch(v4)
        {
          case 0:
            v10 = (double)*(uint64_t *)a2;
            goto LABEL_279;
          case 1:
            v10 = *(double *)a2;
            goto LABEL_279;
          case 2:
            v85 = *(_QWORD *)a2;
            v86 = (char **)(*(_QWORD *)a2 + 8);
            __idx = 0;
            v87 = (char *)v86;
            if (*(char *)(v85 + 31) < 0)
              v87 = *v86;
            std::string::basic_string[abi:ne180100]<0>(__str, v87);
            v88 = std::stod((const std::string *)__str, &__idx);
            if ((__str[23] & 0x80000000) != 0)
              operator delete(*(void **)__str);
            if (*(char *)(v85 + 31) < 0)
              v89 = *(_QWORD *)(v85 + 16);
            else
              v89 = *(unsigned __int8 *)(v85 + 31);
            if (__idx != v89)
            {
              v215 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v216 = std::string::append(&v219, " cannot be interpreted as a float");
              v217 = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
              *(_QWORD *)&__str[16] = *((_QWORD *)&v216->__r_.__value_.__l + 2);
              *(_OWORD *)__str = v217;
              v216->__r_.__value_.__l.__size_ = 0;
              v216->__r_.__value_.__r.__words[2] = 0;
              v216->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v215, (const std::string *)__str);
              __cxa_throw(v215, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            v185 = v88;
            v10 = v185;
            goto LABEL_279;
          case 3:
            v96 = *(_QWORD *)a2;
            memset(__str, 0, 24);
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v96 + 8), *(_QWORD *)(v96 + 16), (uint64_t)(*(_QWORD *)(v96 + 16) - *(_QWORD *)(v96 + 8)) >> 3);
            turi::flexible_type_fail(0);
            v10 = 0.0;
            if (*(_QWORD *)__str)
            {
              *(_QWORD *)&__str[8] = *(_QWORD *)__str;
              operator delete(*(void **)__str);
            }
            goto LABEL_279;
          case 4:
            v42 = *(_QWORD *)a2;
            memset(__str, 0, 24);
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v42 + 8), *(uint64_t **)(v42 + 16), (uint64_t)(*(_QWORD *)(v42 + 16) - *(_QWORD *)(v42 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v219.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
            goto LABEL_141;
          case 5:
            v44 = *(_QWORD *)a2;
            memset(__str, 0, 24);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(_QWORD *)(v44 + 16) - *(_QWORD *)(v44 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v219.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
            goto LABEL_141;
          case 6:
            v10 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
            goto LABEL_279;
          case 8:
            v90 = *(_QWORD *)a2;
            v91 = *(_QWORD *)(*(_QWORD *)a2 + 16);
            *(_QWORD *)__str = *(_QWORD *)(*(_QWORD *)a2 + 8);
            *(_QWORD *)&__str[8] = v91;
            if (v91)
            {
              v92 = (unsigned int *)(v91 + 8);
              do
                v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
            }
            v94 = *(_OWORD *)(v90 + 24);
            v95 = *(_OWORD *)(v90 + 56);
            v222 = *(_OWORD *)(v90 + 40);
            v223 = v95;
            *(_OWORD *)&__str[16] = v94;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
LABEL_141:
            v10 = 0.0;
            goto LABEL_279;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)a2 + 8);
            turi::flexible_type_fail(0);
            if (*((_QWORD *)&v222 + 1))
            {
              *(_QWORD *)&v223 = *((_QWORD *)&v222 + 1);
              operator delete(*((void **)&v222 + 1));
            }
            if (*(_QWORD *)&__str[16])
            {
              *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
              operator delete(*(void **)&__str[16]);
            }
            v38 = *(std::__shared_weak_count **)&__str[8];
            v10 = 0.0;
            if (*(_QWORD *)&__str[8])
            {
              v39 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
LABEL_279:
            switch(*(_BYTE *)(a3 + 12))
            {
              case 2:
                v186 = *(unint64_t **)a3;
                do
                {
                  v187 = __ldaxr(v186);
                  v188 = v187 - 1;
                }
                while (__stlxr(v188, v186));
                if (!v188)
                {
                  v189 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_321;
                  if (*((char *)v189 + 31) < 0)
                    operator delete((void *)v189[1]);
                  v190 = v189;
                  v191 = 0x1012C404EF22A49;
                  goto LABEL_320;
                }
                break;
              case 3:
                v203 = *(unint64_t **)a3;
                do
                {
                  v204 = __ldaxr(v203);
                  v205 = v204 - 1;
                }
                while (__stlxr(v205, v203));
                if (!v205)
                {
                  v206 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_321;
                  v207 = (void *)v206[1];
                  if (v207)
                  {
                    v206[2] = (unint64_t)v207;
                    operator delete(v207);
                  }
                  v190 = v206;
                  v191 = 0x1080C409938AC02;
                  goto LABEL_320;
                }
                break;
              case 4:
                v192 = *(unint64_t **)a3;
                do
                {
                  v193 = __ldaxr(v192);
                  v194 = v193 - 1;
                }
                while (__stlxr(v194, v192));
                if (!v194)
                {
                  v195 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_321;
                  *(_QWORD *)__str = v195 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                  goto LABEL_313;
                }
                break;
              case 5:
                v208 = *(unint64_t **)a3;
                do
                {
                  v209 = __ldaxr(v208);
                  v210 = v209 - 1;
                }
                while (__stlxr(v210, v208));
                if (!v210)
                {
                  v195 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_321;
                  *(_QWORD *)__str = v195 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_313:
                  v190 = v195;
                  v191 = 0x1020C405E66F15BLL;
                  goto LABEL_320;
                }
                break;
              case 8:
                v211 = *(unint64_t **)a3;
                do
                {
                  v212 = __ldaxr(v211);
                  v213 = v212 - 1;
                }
                while (__stlxr(v213, v211));
                if (!v213)
                {
                  v214 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_321;
                  boost::detail::shared_count::~shared_count((unsigned int **)v214 + 2);
                  v190 = v214;
                  v202 = -235920773;
                  goto LABEL_319;
                }
                break;
              case 9:
                v196 = *(unint64_t **)a3;
                do
                {
                  v197 = __ldaxr(v196);
                  v198 = v197 - 1;
                }
                while (__stlxr(v198, v196));
                if (!v198)
                {
                  v199 = *(unint64_t **)a3;
                  if (*(_QWORD *)a3)
                  {
                    v200 = (void *)v199[6];
                    if (v200)
                    {
                      v199[7] = (unint64_t)v200;
                      operator delete(v200);
                    }
                    v201 = (void *)v199[3];
                    if (v201)
                    {
                      v199[4] = (unint64_t)v201;
                      operator delete(v201);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v199 + 1));
                    v190 = v199;
                    v202 = 2071181815;
LABEL_319:
                    v191 = v202 | 0x1030C4000000000;
LABEL_320:
                    MEMORY[0x219A19A08](v190, v191);
                  }
LABEL_321:
                  *(_QWORD *)a3 = 0;
                }
                break;
              default:
                break;
            }
            *(_DWORD *)(a3 + 8) = 0;
            *(_BYTE *)(a3 + 12) = 1;
            *(double *)a3 = v10;
            break;
          default:
LABEL_328:
            turi::flexible_type_fail(0);
            __break(1u);
            break;
        }
        break;
      case 3:
        v218 = 0;
        v7 = *(_QWORD *)a2;
        if (*(char *)(*(_QWORD *)a2 + 31) < 0)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v7 + 16);
        }
        else
        {
          v8 = v7 + 8;
          v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
        }
        __idx = v8;
        turi::flexible_type_parser::vector_parse((turi::flexible_type_parser *)(a1 + 16), (const char **)&__idx, v9, (_QWORD **)__str);
        v219.__r_.__value_.__r.__words[0] = a3;
        v219.__r_.__value_.__l.__size_ = (std::string::size_type)&v218;
        std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>((uint64_t **)&v219, (uint64_t *)__str);
        std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)__str);
        if (!v218)
        {
          if (!a1[9])
            turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2::operator()(turi::flexible_type const&)::{lambda(void)#1}::operator()();
          if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
          {
            switch(*(_BYTE *)(a3 + 12))
            {
              case 2:
                v17 = *(unint64_t **)a3;
                do
                {
                  v18 = __ldaxr(v17);
                  v19 = v18 - 1;
                }
                while (__stlxr(v19, v17));
                if (!v19)
                {
                  v20 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_195;
                  if (*((char *)v20 + 31) < 0)
                    operator delete((void *)v20[1]);
                  v21 = v20;
                  v22 = 0x1012C404EF22A49;
                  goto LABEL_194;
                }
                break;
              case 3:
                v108 = *(unint64_t **)a3;
                do
                {
                  v109 = __ldaxr(v108);
                  v110 = v109 - 1;
                }
                while (__stlxr(v110, v108));
                if (!v110)
                {
                  v111 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_195;
                  v112 = (void *)v111[1];
                  if (v112)
                  {
                    v111[2] = (unint64_t)v112;
                    operator delete(v112);
                  }
                  v21 = v111;
                  v22 = 0x1080C409938AC02;
                  goto LABEL_194;
                }
                break;
              case 4:
                v97 = *(unint64_t **)a3;
                do
                {
                  v98 = __ldaxr(v97);
                  v99 = v98 - 1;
                }
                while (__stlxr(v99, v97));
                if (!v99)
                {
                  v100 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_195;
                  *(_QWORD *)__str = v100 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                  goto LABEL_173;
                }
                break;
              case 5:
                v113 = *(unint64_t **)a3;
                do
                {
                  v114 = __ldaxr(v113);
                  v115 = v114 - 1;
                }
                while (__stlxr(v115, v113));
                if (!v115)
                {
                  v100 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_195;
                  *(_QWORD *)__str = v100 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_173:
                  v21 = v100;
                  v22 = 0x1020C405E66F15BLL;
                  goto LABEL_194;
                }
                break;
              case 8:
                v127 = *(unint64_t **)a3;
                do
                {
                  v128 = __ldaxr(v127);
                  v129 = v128 - 1;
                }
                while (__stlxr(v129, v127));
                if (!v129)
                {
                  v130 = *(unint64_t **)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_195;
                  boost::detail::shared_count::~shared_count((unsigned int **)v130 + 2);
                  v21 = v130;
                  v107 = -235920773;
                  goto LABEL_193;
                }
                break;
              case 9:
                v101 = *(unint64_t **)a3;
                do
                {
                  v102 = __ldaxr(v101);
                  v103 = v102 - 1;
                }
                while (__stlxr(v103, v101));
                if (!v103)
                {
                  v104 = *(unint64_t **)a3;
                  if (*(_QWORD *)a3)
                  {
                    v105 = (void *)v104[6];
                    if (v105)
                    {
                      v104[7] = (unint64_t)v105;
                      operator delete(v105);
                    }
                    v106 = (void *)v104[3];
                    if (v106)
                    {
                      v104[4] = (unint64_t)v106;
                      operator delete(v106);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v104 + 1));
                    v21 = v104;
                    v107 = 2071181815;
LABEL_193:
                    v22 = v107 | 0x1030C4000000000;
LABEL_194:
                    MEMORY[0x219A19A08](v21, v22);
                  }
LABEL_195:
                  *(_QWORD *)a3 = 0;
                }
                break;
              default:
                break;
            }
            *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
            *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
            v131 = byte_254FF281C;
            *(_BYTE *)(a3 + 12) = byte_254FF281C;
            v132 = v131 > 9;
            v133 = (1 << v131) & 0x33C;
            if (!v132 && v133 != 0)
            {
              v135 = *(unint64_t **)a3;
              do
                v136 = __ldaxr(v135);
              while (__stlxr(v136 + 1, v135));
            }
          }
        }
        break;
      case 4:
        v218 = 0;
        v11 = *(_QWORD *)a2;
        if (*(char *)(*(_QWORD *)a2 + 31) < 0)
        {
          v12 = *(_QWORD *)(v11 + 8);
          v13 = *(_QWORD *)(v11 + 16);
        }
        else
        {
          v12 = v11 + 8;
          v13 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
        }
        __idx = v12;
        turi::flexible_type_parser::recursive_parse((turi::flexible_type_parser *)(a1 + 16), (const char **)&__idx, v13, (_QWORD **)__str);
        v219.__r_.__value_.__r.__words[0] = a3;
        v219.__r_.__value_.__l.__size_ = (std::string::size_type)&v218;
        std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>((uint64_t **)&v219, (uint64_t *)__str);
        std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)__str);
        if (!v218)
        {
          if (!a1[9])
            turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2::operator()(turi::flexible_type const&)::{lambda(void)#2}::operator()();
          if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
          {
            switch(*(_BYTE *)(a3 + 12))
            {
              case 2:
                v23 = *(unint64_t **)a3;
                do
                {
                  v24 = __ldaxr(v23);
                  v25 = v24 - 1;
                }
                while (__stlxr(v25, v23));
                if (!v25)
                {
                  v26 = *(_QWORD *)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_244;
                  if (*(char *)(v26 + 31) < 0)
                    operator delete(*(void **)(v26 + 8));
                  v27 = (_QWORD *)v26;
                  v28 = 0x1012C404EF22A49;
                  goto LABEL_243;
                }
                break;
              case 3:
                v148 = *(unint64_t **)a3;
                do
                {
                  v149 = __ldaxr(v148);
                  v150 = v149 - 1;
                }
                while (__stlxr(v150, v148));
                if (!v150)
                {
                  v151 = *(_QWORD *)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_244;
                  v152 = *(void **)(v151 + 8);
                  if (v152)
                  {
                    *(_QWORD *)(v151 + 16) = v152;
                    operator delete(v152);
                  }
                  v27 = (_QWORD *)v151;
                  v28 = 0x1080C409938AC02;
                  goto LABEL_243;
                }
                break;
              case 4:
                v116 = *(unint64_t **)a3;
                do
                {
                  v117 = __ldaxr(v116);
                  v118 = v117 - 1;
                }
                while (__stlxr(v118, v116));
                if (!v118)
                {
                  v119 = *(_QWORD *)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_244;
                  *(_QWORD *)__str = v119 + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                  goto LABEL_236;
                }
                break;
              case 5:
                v158 = *(unint64_t **)a3;
                do
                {
                  v159 = __ldaxr(v158);
                  v160 = v159 - 1;
                }
                while (__stlxr(v160, v158));
                if (!v160)
                {
                  v119 = *(_QWORD *)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_244;
                  *(_QWORD *)__str = v119 + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_236:
                  v27 = (_QWORD *)v119;
                  v28 = 0x1020C405E66F15BLL;
                  goto LABEL_243;
                }
                break;
              case 8:
                v161 = *(unint64_t **)a3;
                do
                {
                  v162 = __ldaxr(v161);
                  v163 = v162 - 1;
                }
                while (__stlxr(v163, v161));
                if (!v163)
                {
                  v164 = *(_QWORD *)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_244;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v164 + 16));
                  v27 = (_QWORD *)v164;
                  v126 = -235920773;
                  goto LABEL_242;
                }
                break;
              case 9:
                v120 = *(unint64_t **)a3;
                do
                {
                  v121 = __ldaxr(v120);
                  v122 = v121 - 1;
                }
                while (__stlxr(v122, v120));
                if (!v122)
                {
                  v123 = *(unint64_t **)a3;
                  if (*(_QWORD *)a3)
                  {
                    v124 = (void *)v123[6];
                    if (v124)
                    {
                      v123[7] = (unint64_t)v124;
                      operator delete(v124);
                    }
                    v125 = (void *)v123[3];
                    if (v125)
                    {
                      v123[4] = (unint64_t)v125;
                      operator delete(v125);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v123 + 1));
                    v27 = v123;
                    v126 = 2071181815;
LABEL_242:
                    v28 = v126 | 0x1030C4000000000;
LABEL_243:
                    MEMORY[0x219A19A08](v27, v28);
                  }
LABEL_244:
                  *(_QWORD *)a3 = 0;
                }
                break;
              default:
                break;
            }
            *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
            *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
            v165 = byte_254FF281C;
            *(_BYTE *)(a3 + 12) = byte_254FF281C;
            v132 = v165 > 9;
            v166 = (1 << v165) & 0x33C;
            if (!v132 && v166 != 0)
            {
              v168 = *(unint64_t **)a3;
              do
                v169 = __ldaxr(v168);
              while (__stlxr(v169 + 1, v168));
            }
          }
        }
        break;
      case 5:
        v218 = 0;
        v14 = *(_QWORD *)a2;
        if (*(char *)(*(_QWORD *)a2 + 31) < 0)
        {
          v15 = *(_QWORD *)(v14 + 8);
          v16 = *(_QWORD *)(v14 + 16);
        }
        else
        {
          v15 = v14 + 8;
          v16 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
        }
        __idx = v15;
        turi::flexible_type_parser::dict_parse((turi::flexible_type_parser *)(a1 + 16), (const char **)&__idx, v16, (_QWORD **)__str);
        v219.__r_.__value_.__r.__words[0] = a3;
        v219.__r_.__value_.__l.__size_ = (std::string::size_type)&v218;
        std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>((uint64_t **)&v219, (uint64_t *)__str);
        std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)__str);
        if (!v218)
        {
          if (!a1[9])
            turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2::operator()(turi::flexible_type const&)::{lambda(void)#3}::operator()();
          if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
          {
            switch(*(_BYTE *)(a3 + 12))
            {
              case 2:
                v29 = *(unint64_t **)a3;
                do
                {
                  v30 = __ldaxr(v29);
                  v31 = v30 - 1;
                }
                while (__stlxr(v31, v29));
                if (!v31)
                {
                  v32 = *(_QWORD *)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_265;
                  if (*(char *)(v32 + 31) < 0)
                    operator delete(*(void **)(v32 + 8));
                  v33 = (_QWORD *)v32;
                  v34 = 0x1012C404EF22A49;
                  goto LABEL_264;
                }
                break;
              case 3:
                v153 = *(unint64_t **)a3;
                do
                {
                  v154 = __ldaxr(v153);
                  v155 = v154 - 1;
                }
                while (__stlxr(v155, v153));
                if (!v155)
                {
                  v156 = *(_QWORD *)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_265;
                  v157 = *(void **)(v156 + 8);
                  if (v157)
                  {
                    *(_QWORD *)(v156 + 16) = v157;
                    operator delete(v157);
                  }
                  v33 = (_QWORD *)v156;
                  v34 = 0x1080C409938AC02;
                  goto LABEL_264;
                }
                break;
              case 4:
                v137 = *(unint64_t **)a3;
                do
                {
                  v138 = __ldaxr(v137);
                  v139 = v138 - 1;
                }
                while (__stlxr(v139, v137));
                if (!v139)
                {
                  v140 = *(_QWORD *)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_265;
                  *(_QWORD *)__str = v140 + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                  goto LABEL_257;
                }
                break;
              case 5:
                v170 = *(unint64_t **)a3;
                do
                {
                  v171 = __ldaxr(v170);
                  v172 = v171 - 1;
                }
                while (__stlxr(v172, v170));
                if (!v172)
                {
                  v140 = *(_QWORD *)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_265;
                  *(_QWORD *)__str = v140 + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_257:
                  v33 = (_QWORD *)v140;
                  v34 = 0x1020C405E66F15BLL;
                  goto LABEL_264;
                }
                break;
              case 8:
                v173 = *(unint64_t **)a3;
                do
                {
                  v174 = __ldaxr(v173);
                  v175 = v174 - 1;
                }
                while (__stlxr(v175, v173));
                if (!v175)
                {
                  v176 = *(_QWORD *)a3;
                  if (!*(_QWORD *)a3)
                    goto LABEL_265;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v176 + 16));
                  v33 = (_QWORD *)v176;
                  v147 = -235920773;
                  goto LABEL_263;
                }
                break;
              case 9:
                v141 = *(unint64_t **)a3;
                do
                {
                  v142 = __ldaxr(v141);
                  v143 = v142 - 1;
                }
                while (__stlxr(v143, v141));
                if (!v143)
                {
                  v144 = *(unint64_t **)a3;
                  if (*(_QWORD *)a3)
                  {
                    v145 = (void *)v144[6];
                    if (v145)
                    {
                      v144[7] = (unint64_t)v145;
                      operator delete(v145);
                    }
                    v146 = (void *)v144[3];
                    if (v146)
                    {
                      v144[4] = (unint64_t)v146;
                      operator delete(v146);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v144 + 1));
                    v33 = v144;
                    v147 = 2071181815;
LABEL_263:
                    v34 = v147 | 0x1030C4000000000;
LABEL_264:
                    MEMORY[0x219A19A08](v33, v34);
                  }
LABEL_265:
                  *(_QWORD *)a3 = 0;
                }
                break;
              default:
                break;
            }
            *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
            *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
            v177 = byte_254FF281C;
            *(_BYTE *)(a3 + 12) = byte_254FF281C;
            v132 = v177 > 9;
            v178 = (1 << v177) & 0x33C;
            if (!v132 && v178 != 0)
            {
              v180 = *(unint64_t **)a3;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 + 1, v180));
            }
          }
        }
        break;
      default:
        return;
    }
  }
}

void sub_218222AD0()
{
  uint64_t v0;
  char v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void **v15[26];

  __cxa_end_catch();
  switch(*(_BYTE *)(v0 + 12))
  {
    case 2:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v0);
      goto LABEL_22;
    case 3:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v0);
      goto LABEL_22;
    case 4:
      v2 = *(unint64_t **)v0;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (v4)
        goto LABEL_24;
      v5 = *(unint64_t **)v0;
      if (!*(_QWORD *)v0)
        goto LABEL_23;
      v15[0] = (void **)(v5 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v15);
      goto LABEL_14;
    case 5:
      v6 = *(unint64_t **)v0;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (v8)
        goto LABEL_24;
      v5 = *(unint64_t **)v0;
      if (!*(_QWORD *)v0)
        goto LABEL_23;
      v15[0] = (void **)(v5 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v15);
LABEL_14:
      v9 = v5;
      v10 = 0x1020C405E66F15BLL;
      break;
    case 8:
      v11 = *(unint64_t **)v0;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (v13)
        goto LABEL_24;
      v14 = *(unint64_t **)v0;
      if (!*(_QWORD *)v0)
        goto LABEL_23;
      boost::detail::shared_count::~shared_count((unsigned int **)v14 + 2);
      v9 = v14;
      v10 = 0x1030C40F1F0227BLL;
      break;
    case 9:
      std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()((unint64_t **)v0);
LABEL_22:
      if ((v1 & 1) == 0)
        goto LABEL_23;
      goto LABEL_24;
    default:
      goto LABEL_24;
  }
  MEMORY[0x219A19A08](v9, v10);
LABEL_23:
  *(_QWORD *)v0 = 0;
LABEL_24:
  *(_QWORD *)v0 = 0;
  *(_DWORD *)(v0 + 8) = 0;
  *(_BYTE *)(v0 + 12) = 0;
  JUMPOUT(0x218222C24);
}

void sub_218222ADC()
{
  uint64_t v0;
  char v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void **v15[26];

  __cxa_end_catch();
  switch(*(_BYTE *)(v0 + 12))
  {
    case 2:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v0);
      goto LABEL_22;
    case 3:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v0);
      goto LABEL_22;
    case 4:
      v2 = *(unint64_t **)v0;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (v4)
        goto LABEL_24;
      v5 = *(unint64_t **)v0;
      if (!*(_QWORD *)v0)
        goto LABEL_23;
      v15[0] = (void **)(v5 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v15);
      goto LABEL_14;
    case 5:
      v6 = *(unint64_t **)v0;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (v8)
        goto LABEL_24;
      v5 = *(unint64_t **)v0;
      if (!*(_QWORD *)v0)
        goto LABEL_23;
      v15[0] = (void **)(v5 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v15);
LABEL_14:
      v9 = v5;
      v10 = 0x1020C405E66F15BLL;
      break;
    case 8:
      v11 = *(unint64_t **)v0;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (v13)
        goto LABEL_24;
      v14 = *(unint64_t **)v0;
      if (!*(_QWORD *)v0)
        goto LABEL_23;
      boost::detail::shared_count::~shared_count((unsigned int **)v14 + 2);
      v9 = v14;
      v10 = 0x1030C40F1F0227BLL;
      break;
    case 9:
      std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()((unint64_t **)v0);
LABEL_22:
      if ((v1 & 1) == 0)
        goto LABEL_23;
      goto LABEL_24;
    default:
      goto LABEL_24;
  }
  MEMORY[0x219A19A08](v9, v10);
LABEL_23:
  *(_QWORD *)v0 = 0;
LABEL_24:
  *(_QWORD *)v0 = 0;
  *(_DWORD *)(v0 + 8) = 0;
  *(_BYTE *)(v0 + 12) = 0;
  JUMPOUT(0x218222C24);
}

void sub_218222AE8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_218222AF8()
{
  JUMPOUT(0x218222B00);
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2 const&,0ul>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_WORD *)result = *(_WORD *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 32) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(result + 40) = *(_BYTE *)(a2 + 40);
  return result;
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_WORD *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D9326F0;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D9326F0;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

void std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3::operator()((unsigned __int8 *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3,std::allocator<turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_3::operator()(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  int v7;
  double v8;
  double v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  double v25;
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  char *v46;
  uint64_t *v47;
  uint64_t *v48;
  _QWORD *v49;
  _QWORD *v51;
  unint64_t v52;
  BOOL v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  unint64_t v78;
  BOOL v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  void *v96;
  void *v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  void *v101;
  _QWORD *v102;
  void *v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  double v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  __int128 v135;
  __int128 v136;
  unint64_t v137;
  BOOL v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  BOOL v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int *v161;
  unsigned int v162;
  __int128 v163;
  __int128 v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  _QWORD *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  void *v177;
  _QWORD *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  __int128 v185;
  __int128 v186;
  unint64_t v187;
  _QWORD *v188;
  unint64_t v189;
  void *v190;
  _QWORD *v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  unint64_t v195;
  unint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  unint64_t v199;
  int v200;
  _QWORD *v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int *v211;
  unsigned int v212;
  __int128 v213;
  __int128 v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  __int128 v221;
  __int128 v222;
  unint64_t v223;
  _QWORD *v224;
  unint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  __int128 v235;
  __int128 v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int *v241;
  unsigned int v242;
  __int128 v243;
  __int128 v244;
  unint64_t v245;
  _QWORD *v246;
  unint64_t v247;
  _QWORD *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int *v253;
  unsigned int v254;
  __int128 v255;
  __int128 v256;
  unint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int *v263;
  unsigned int v264;
  __int128 v265;
  __int128 v266;
  unint64_t v267;
  _QWORD *v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int *v273;
  unsigned int v274;
  __int128 v275;
  __int128 v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  void **v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t *v304;
  void **v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  __int128 v317;
  __int128 v318;
  _BYTE v319[32];
  uint64_t v320;
  void *v321;
  void *v322;
  uint64_t v323;
  void **v324;
  void **v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329[3];

  v6 = 0;
  v329[2] = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  memset(v329, 0, 13);
  BYTE4(v329[1]) = v7;
  switch(v7)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      v6 = operator new();
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 8) = 0;
      goto LABEL_5;
    case 6:
      v6 = 0x1900000000000000;
      v329[0] = 0x1900000000000000;
      LODWORD(v329[1]) = 0;
      break;
    case 8:
      v6 = operator new();
      *(_QWORD *)v6 = 0;
      a4 = 0.0;
      *(_OWORD *)(v6 + 8) = 0u;
      *(_OWORD *)(v6 + 24) = 0u;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_QWORD *)(v6 + 56) = 0;
      *(_QWORD *)(v6 + 64) = 3;
      goto LABEL_5;
    case 9:
      v6 = operator new();
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v6);
LABEL_5:
      v329[0] = v6;
      *(_QWORD *)v6 = 1;
      break;
    default:
      break;
  }
  if (v329 != (uint64_t *)a2)
  {
    switch(*(_BYTE *)(a2 + 12))
    {
      case 0:
        switch(BYTE4(v329[1]))
        {
          case 0:
            v8 = *(double *)a2;
            goto LABEL_63;
          case 1:
            v124 = (double)*(uint64_t *)a2;
            goto LABEL_290;
          case 2:
            if (*(_QWORD *)v6 != 1)
            {
              v117 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v117, v329[0]);
              v329[0] = (uint64_t)v117;
              *v117 = 1;
              do
              {
                v118 = __ldaxr((unint64_t *)v6);
                v119 = v118 - 1;
              }
              while (__stlxr(v119, (unint64_t *)v6));
              if (!v119)
              {
                if (*(char *)(v6 + 31) < 0)
                  operator delete(*(void **)(v6 + 8));
                MEMORY[0x219A19A08](v6, 0x1012C404EF22A49);
              }
            }
            v120 = v329[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v317);
            std::ostream::operator<<();
            std::stringbuf::str();
            v121 = v120 + 8;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v317);
            if (*(char *)(v120 + 31) < 0)
              goto LABEL_208;
            goto LABEL_209;
          case 3:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v86 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v86, v329[0]);
            v329[0] = (uint64_t)v86;
            *v86 = 1;
            do
            {
              v87 = __ldaxr((unint64_t *)v6);
              v53 = --v87 == 0;
            }
            while (__stlxr(v87, (unint64_t *)v6));
            goto LABEL_301;
          case 4:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v201 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v201, v329[0]);
            v329[0] = (uint64_t)v201;
            *v201 = 1;
            do
            {
              v202 = __ldaxr((unint64_t *)v6);
              v148 = --v202 == 0;
            }
            while (__stlxr(v202, (unint64_t *)v6));
            goto LABEL_410;
          case 5:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v226 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v226, v329[0]);
            v329[0] = (uint64_t)v226;
            *v226 = 1;
            do
            {
              v227 = __ldaxr((unint64_t *)v6);
              v79 = --v227 == 0;
            }
            while (__stlxr(v227, (unint64_t *)v6));
            goto LABEL_397;
          case 6:
            v329[0] = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            LODWORD(v329[1]) = 0;
            goto LABEL_424;
          case 7:
            goto LABEL_423;
          case 8:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v230 = operator new();
            v231 = v329[0];
            *(_QWORD *)v230 = *(_QWORD *)v329[0];
            *(_QWORD *)(v230 + 8) = *(_QWORD *)(v231 + 8);
            v232 = *(_QWORD *)(v231 + 16);
            *(_QWORD *)(v230 + 16) = v232;
            if (v232)
            {
              v233 = (unsigned int *)(v232 + 8);
              do
                v234 = __ldxr(v233);
              while (__stxr(v234 + 1, v233));
            }
            v235 = *(_OWORD *)(v231 + 24);
            v236 = *(_OWORD *)(v231 + 40);
            *(_OWORD *)(v230 + 56) = *(_OWORD *)(v231 + 56);
            *(_OWORD *)(v230 + 40) = v236;
            *(_OWORD *)(v230 + 24) = v235;
            v329[0] = v230;
            *(_QWORD *)v230 = 1;
            do
            {
              v237 = __ldaxr((unint64_t *)v6);
              v138 = --v237 == 0;
            }
            while (__stlxr(v237, (unint64_t *)v6));
            goto LABEL_419;
          case 9:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v109 = (_QWORD *)operator new();
            v110 = v329[0] + 8;
            *v109 = *(_QWORD *)v329[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v109 + 1, v110);
            v329[0] = (uint64_t)v109;
            *v109 = 1;
            do
            {
              v111 = __ldaxr((unint64_t *)v6);
              v76 = --v111 == 0;
            }
            while (__stlxr(v111, (unint64_t *)v6));
            goto LABEL_248;
          default:
            goto LABEL_487;
        }
      case 1:
        switch(BYTE4(v329[1]))
        {
          case 0:
            *(_QWORD *)&v8 = (uint64_t)*(double *)a2;
            goto LABEL_63;
          case 1:
            v124 = *(double *)a2;
            goto LABEL_290;
          case 2:
            if (*(_QWORD *)v6 != 1)
            {
              v153 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v153, v329[0]);
              v329[0] = (uint64_t)v153;
              *v153 = 1;
              do
              {
                v154 = __ldaxr((unint64_t *)v6);
                v155 = v154 - 1;
              }
              while (__stlxr(v155, (unint64_t *)v6));
              if (!v155)
              {
                if (*(char *)(v6 + 31) < 0)
                  operator delete(*(void **)(v6 + 8));
                MEMORY[0x219A19A08](v6, 0x1012C404EF22A49);
              }
            }
            v156 = v329[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v317);
            std::ostream::operator<<();
            std::stringbuf::str();
            v121 = v156 + 8;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v317);
            if (*(char *)(v156 + 31) < 0)
LABEL_208:
              operator delete(*(void **)v121);
LABEL_209:
            v122 = v327;
            v123 = v328;
            goto LABEL_429;
          case 3:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v88 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v88, v329[0]);
            v329[0] = (uint64_t)v88;
            *v88 = 1;
            do
            {
              v89 = __ldaxr((unint64_t *)v6);
              v53 = --v89 == 0;
            }
            while (__stlxr(v89, (unint64_t *)v6));
            goto LABEL_301;
          case 4:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v203 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v203, v329[0]);
            v329[0] = (uint64_t)v203;
            *v203 = 1;
            do
            {
              v204 = __ldaxr((unint64_t *)v6);
              v148 = --v204 == 0;
            }
            while (__stlxr(v204, (unint64_t *)v6));
            goto LABEL_410;
          case 5:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v228 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v228, v329[0]);
            v329[0] = (uint64_t)v228;
            *v228 = 1;
            do
            {
              v229 = __ldaxr((unint64_t *)v6);
              v79 = --v229 == 0;
            }
            while (__stlxr(v229, (unint64_t *)v6));
            goto LABEL_397;
          case 6:
            v157 = (int)((*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0);
            if (v157 >= 999999)
              v157 = 999999;
            if (v157 >= 0xF4240)
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            v329[0] = vcvtmd_s64_f64(*(double *)a2) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            LODWORD(v329[1]) = v157;
            goto LABEL_424;
          case 7:
            goto LABEL_423;
          case 8:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v238 = operator new();
            v239 = v329[0];
            *(_QWORD *)v238 = *(_QWORD *)v329[0];
            *(_QWORD *)(v238 + 8) = *(_QWORD *)(v239 + 8);
            v240 = *(_QWORD *)(v239 + 16);
            *(_QWORD *)(v238 + 16) = v240;
            if (v240)
            {
              v241 = (unsigned int *)(v240 + 8);
              do
                v242 = __ldxr(v241);
              while (__stxr(v242 + 1, v241));
            }
            v243 = *(_OWORD *)(v239 + 24);
            v244 = *(_OWORD *)(v239 + 40);
            *(_OWORD *)(v238 + 56) = *(_OWORD *)(v239 + 56);
            *(_OWORD *)(v238 + 40) = v244;
            *(_OWORD *)(v238 + 24) = v243;
            v329[0] = v238;
            *(_QWORD *)v238 = 1;
            do
            {
              v245 = __ldaxr((unint64_t *)v6);
              v138 = --v245 == 0;
            }
            while (__stlxr(v245, (unint64_t *)v6));
            goto LABEL_419;
          case 9:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v112 = (_QWORD *)operator new();
            v113 = v329[0] + 8;
            *v112 = *(_QWORD *)v329[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v112 + 1, v113);
            v329[0] = (uint64_t)v112;
            *v112 = 1;
            do
            {
              v114 = __ldaxr((unint64_t *)v6);
              v76 = --v114 == 0;
            }
            while (__stlxr(v114, (unint64_t *)v6));
            goto LABEL_248;
          default:
            goto LABEL_487;
        }
      case 2:
        switch(BYTE4(v329[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_423;
          case 2:
            v20 = *(double *)a2;
            if (*(_QWORD *)v6 != 1)
            {
              v21 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v21, v329[0]);
              v329[0] = (uint64_t)v21;
              *v21 = 1;
              do
              {
                v22 = __ldaxr((unint64_t *)v6);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, (unint64_t *)v6));
              if (!v23)
              {
                if (*(char *)(v6 + 31) < 0)
                  operator delete(*(void **)(v6 + 8));
                MEMORY[0x219A19A08](v6, 0x1012C404EF22A49);
              }
            }
            v14 = v329[0];
            if (*(char *)(*(_QWORD *)&v20 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v317, *(const std::string::value_type **)(*(_QWORD *)&v20 + 8), *(_QWORD *)(*(_QWORD *)&v20 + 16));
            }
            else
            {
              v24 = *(_OWORD *)(*(_QWORD *)&v20 + 8);
              *(_QWORD *)&v318 = *(_QWORD *)(*(_QWORD *)&v20 + 24);
              v317 = v24;
            }
            goto LABEL_426;
          case 3:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v51 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v51, v329[0]);
            v329[0] = (uint64_t)v51;
            *v51 = 1;
            do
            {
              v52 = __ldaxr((unint64_t *)v6);
              v53 = --v52 == 0;
            }
            while (__stlxr(v52, (unint64_t *)v6));
            goto LABEL_301;
          case 4:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v178 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v178, v329[0]);
            v329[0] = (uint64_t)v178;
            *v178 = 1;
            do
            {
              v179 = __ldaxr((unint64_t *)v6);
              v148 = --v179 == 0;
            }
            while (__stlxr(v179, (unint64_t *)v6));
            goto LABEL_410;
          case 5:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v115 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v115, v329[0]);
            v329[0] = (uint64_t)v115;
            *v115 = 1;
            do
            {
              v116 = __ldaxr((unint64_t *)v6);
              v79 = --v116 == 0;
            }
            while (__stlxr(v116, (unint64_t *)v6));
            goto LABEL_397;
          case 8:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v180 = operator new();
            v181 = v329[0];
            *(_QWORD *)v180 = *(_QWORD *)v329[0];
            *(_QWORD *)(v180 + 8) = *(_QWORD *)(v181 + 8);
            v182 = *(_QWORD *)(v181 + 16);
            *(_QWORD *)(v180 + 16) = v182;
            if (v182)
            {
              v183 = (unsigned int *)(v182 + 8);
              do
                v184 = __ldxr(v183);
              while (__stxr(v184 + 1, v183));
            }
            v185 = *(_OWORD *)(v181 + 24);
            v186 = *(_OWORD *)(v181 + 40);
            *(_OWORD *)(v180 + 56) = *(_OWORD *)(v181 + 56);
            *(_OWORD *)(v180 + 40) = v186;
            *(_OWORD *)(v180 + 24) = v185;
            v329[0] = v180;
            *(_QWORD *)v180 = 1;
            do
            {
              v187 = __ldaxr((unint64_t *)v6);
              v138 = --v187 == 0;
            }
            while (__stlxr(v187, (unint64_t *)v6));
            goto LABEL_419;
          case 9:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v73 = (_QWORD *)operator new();
            v74 = v329[0] + 8;
            *v73 = *(_QWORD *)v329[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v73 + 1, v74);
            v329[0] = (uint64_t)v73;
            *v73 = 1;
            do
            {
              v75 = __ldaxr((unint64_t *)v6);
              v76 = --v75 == 0;
            }
            while (__stlxr(v75, (unint64_t *)v6));
            goto LABEL_248;
          default:
            goto LABEL_487;
        }
      case 3:
        v25 = *(double *)a2;
        v26 = (char *)(*(_QWORD *)a2 + 8);
        switch(BYTE4(v329[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_423;
          case 2:
            if (*(_QWORD *)v6 != 1)
            {
              v27 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v27, v329[0]);
              v329[0] = (uint64_t)v27;
              *v27 = 1;
              do
              {
                v28 = __ldaxr((unint64_t *)v6);
                v29 = v28 - 1;
              }
              while (__stlxr(v29, (unint64_t *)v6));
              if (!v29)
              {
                if (*(char *)(v6 + 31) < 0)
                  operator delete(*(void **)(v6 + 8));
                MEMORY[0x219A19A08](v6, 0x1012C404EF22A49);
              }
            }
            v14 = v329[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v327, v26);
            goto LABEL_426;
          case 3:
            if (*(_QWORD *)v6 != 1)
            {
              v62 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v62, v329[0]);
              v329[0] = (uint64_t)v62;
              *v62 = 1;
              do
              {
                v63 = __ldaxr((unint64_t *)v6);
                v64 = v63 - 1;
              }
              while (__stlxr(v64, (unint64_t *)v6));
              if (!v64)
              {
                v65 = *(void **)(v6 + 8);
                if (v65)
                {
                  *(_QWORD *)(v6 + 16) = v65;
                  operator delete(v65);
                }
                MEMORY[0x219A19A08](v6, 0x1080C409938AC02);
              }
            }
            if (v329[0] == *(_QWORD *)&v25)
              goto LABEL_424;
            v46 = (char *)(v329[0] + 8);
            v66 = (uint64_t *)(*(_QWORD *)&v25 + 16);
            goto LABEL_118;
          case 4:
            if (*(_QWORD *)v6 != 1)
            {
              v194 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v194, v329[0]);
              v329[0] = (uint64_t)v194;
              *v194 = 1;
              do
              {
                v195 = __ldaxr((unint64_t *)v6);
                v196 = v195 - 1;
              }
              while (__stlxr(v196, (unint64_t *)v6));
              if (!v196)
              {
                *(_QWORD *)&v317 = v6 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v317);
                MEMORY[0x219A19A08](v6, 0x1020C405E66F15BLL);
              }
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(v329[0] + 8), *(_QWORD **)(*(_QWORD *)&v25 + 8), *(_QWORD **)(*(_QWORD *)&v25 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v25 + 16) - *(_QWORD *)(*(_QWORD *)&v25 + 8)) >> 3);
            goto LABEL_424;
          case 5:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v142 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v142, v329[0]);
            v329[0] = (uint64_t)v142;
            *v142 = 1;
            do
            {
              v143 = __ldaxr((unint64_t *)v6);
              v79 = --v143 == 0;
            }
            while (__stlxr(v143, (unint64_t *)v6));
            goto LABEL_397;
          case 8:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v208 = operator new();
            v209 = v329[0];
            *(_QWORD *)v208 = *(_QWORD *)v329[0];
            *(_QWORD *)(v208 + 8) = *(_QWORD *)(v209 + 8);
            v210 = *(_QWORD *)(v209 + 16);
            *(_QWORD *)(v208 + 16) = v210;
            if (v210)
            {
              v211 = (unsigned int *)(v210 + 8);
              do
                v212 = __ldxr(v211);
              while (__stxr(v212 + 1, v211));
            }
            v213 = *(_OWORD *)(v209 + 24);
            v214 = *(_OWORD *)(v209 + 40);
            *(_OWORD *)(v208 + 56) = *(_OWORD *)(v209 + 56);
            *(_OWORD *)(v208 + 40) = v214;
            *(_OWORD *)(v208 + 24) = v213;
            v329[0] = v208;
            *(_QWORD *)v208 = 1;
            do
            {
              v215 = __ldaxr((unint64_t *)v6);
              v138 = --v215 == 0;
            }
            while (__stlxr(v215, (unint64_t *)v6));
            goto LABEL_419;
          case 9:
            if (*(_QWORD *)v6 != 1)
            {
              v90 = (_QWORD *)operator new();
              v91 = v329[0] + 8;
              *v90 = *(_QWORD *)v329[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v90 + 1, v91);
              v329[0] = (uint64_t)v90;
              *v90 = 1;
              do
              {
                v92 = __ldaxr((unint64_t *)v6);
                v93 = v92 - 1;
              }
              while (__stlxr(v93, (unint64_t *)v6));
              if (!v93)
              {
                v94 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v6);
                MEMORY[0x219A19A08](v94, 0x1030C407B73B9F7);
              }
            }
            v95 = (_QWORD *)v329[0];
            v327 = 0uLL;
            v328 = 0;
            v324 = 0;
            v325 = 0;
            v326 = 0;
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v26, &v321);
            turi::flexible_type_impl::ndarray<double>::ndarray(&v317, &v321, (uint64_t)&v327, (uint64_t)&v324, 0);
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v321);
            if (v324)
            {
              v325 = v324;
              operator delete(v324);
            }
            if ((_QWORD)v327)
            {
              *((_QWORD *)&v327 + 1) = v327;
              operator delete((void *)v327);
            }
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v95 + 1), &v317);
            v96 = (void *)v95[3];
            if (v96)
            {
              v95[4] = v96;
              operator delete(v96);
              v95[3] = 0;
              v95[4] = 0;
              v95[5] = 0;
            }
            v97 = (void *)v95[6];
            *(_OWORD *)(v95 + 3) = v318;
            v95[5] = *(_QWORD *)v319;
            v318 = 0uLL;
            *(_QWORD *)v319 = 0;
            if (v97)
              goto LABEL_282;
            goto LABEL_283;
          default:
            goto LABEL_487;
        }
      case 4:
        v9 = *(double *)a2;
        v10 = (uint64_t *)(*(_QWORD *)a2 + 8);
        switch(BYTE4(v329[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_423;
          case 2:
            if (*(_QWORD *)v6 != 1)
            {
              v11 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v11, v329[0]);
              v329[0] = (uint64_t)v11;
              *v11 = 1;
              do
              {
                v12 = __ldaxr((unint64_t *)v6);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, (unint64_t *)v6));
              if (!v13)
              {
                if (*(char *)(v6 + 31) < 0)
                  operator delete(*(void **)(v6 + 8));
                MEMORY[0x219A19A08](v6, 0x1012C404EF22A49);
              }
            }
            v14 = v329[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v327, v10);
            goto LABEL_426;
          case 3:
            if (*(_QWORD *)v6 != 1)
            {
              v38 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v38, v329[0]);
              v329[0] = (uint64_t)v38;
              *v38 = 1;
              do
              {
                v39 = __ldaxr((unint64_t *)v6);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, (unint64_t *)v6));
              if (!v40)
              {
                v41 = *(void **)(v6 + 8);
                if (v41)
                {
                  *(_QWORD *)(v6 + 16) = v41;
                  operator delete(v41);
                }
                MEMORY[0x219A19A08](v6, 0x1080C409938AC02);
              }
            }
            turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)&v317, (_QWORD *)(v329[0] + 8), v10);
            goto LABEL_424;
          case 4:
            if (*(_QWORD *)v6 != 1)
            {
              v125 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v125, v329[0]);
              v329[0] = (uint64_t)v125;
              *v125 = 1;
              do
              {
                v126 = __ldaxr((unint64_t *)v6);
                v127 = v126 - 1;
              }
              while (__stlxr(v127, (unint64_t *)v6));
              if (!v127)
              {
                *(_QWORD *)&v317 = v6 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v317);
                MEMORY[0x219A19A08](v6, 0x1020C405E66F15BLL);
              }
            }
            if (v329[0] != *(_QWORD *)&v9)
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v329[0] + 8, *(uint64_t **)(*(_QWORD *)&v9 + 8), *(uint64_t **)(*(_QWORD *)&v9 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v9 + 16) - *(_QWORD *)(*(_QWORD *)&v9 + 8)) >> 4);
            goto LABEL_424;
          case 5:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v77 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v77, v329[0]);
            v329[0] = (uint64_t)v77;
            *v77 = 1;
            do
            {
              v78 = __ldaxr((unint64_t *)v6);
              v79 = --v78 == 0;
            }
            while (__stlxr(v78, (unint64_t *)v6));
            goto LABEL_397;
          case 8:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v130 = operator new();
            v131 = v329[0];
            *(_QWORD *)v130 = *(_QWORD *)v329[0];
            *(_QWORD *)(v130 + 8) = *(_QWORD *)(v131 + 8);
            v132 = *(_QWORD *)(v131 + 16);
            *(_QWORD *)(v130 + 16) = v132;
            if (v132)
            {
              v133 = (unsigned int *)(v132 + 8);
              do
                v134 = __ldxr(v133);
              while (__stxr(v134 + 1, v133));
            }
            v135 = *(_OWORD *)(v131 + 24);
            v136 = *(_OWORD *)(v131 + 40);
            *(_OWORD *)(v130 + 56) = *(_OWORD *)(v131 + 56);
            *(_OWORD *)(v130 + 40) = v136;
            *(_OWORD *)(v130 + 24) = v135;
            v329[0] = v130;
            *(_QWORD *)v130 = 1;
            do
            {
              v137 = __ldaxr((unint64_t *)v6);
              v138 = --v137 == 0;
            }
            while (__stlxr(v137, (unint64_t *)v6));
            goto LABEL_419;
          case 9:
            if (*(_QWORD *)v6 != 1)
            {
              v54 = (_QWORD *)operator new();
              v55 = v329[0] + 8;
              *v54 = *(_QWORD *)v329[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v54 + 1, v55);
              v329[0] = (uint64_t)v54;
              *v54 = 1;
              do
              {
                v56 = __ldaxr((unint64_t *)v6);
                v57 = v56 - 1;
              }
              while (__stlxr(v57, (unint64_t *)v6));
              if (!v57)
              {
                v58 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v6);
                MEMORY[0x219A19A08](v58, 0x1030C407B73B9F7);
              }
            }
            v59 = (_QWORD *)v329[0];
            v328 = 0;
            v327 = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v327, *(uint64_t **)(*(_QWORD *)&v9 + 8), *(uint64_t **)(*(_QWORD *)&v9 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v9 + 16) - *(_QWORD *)(*(_QWORD *)&v9 + 8)) >> 4);
            turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v327, &v317);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v59 + 1), &v317);
            v60 = (void *)v59[3];
            if (v60)
            {
              v59[4] = v60;
              operator delete(v60);
              v59[3] = 0;
              v59[4] = 0;
              v59[5] = 0;
            }
            v61 = (void *)v59[6];
            *(_OWORD *)(v59 + 3) = v318;
            v59[5] = *(_QWORD *)v319;
            v318 = 0uLL;
            *(_QWORD *)v319 = 0;
            if (v61)
            {
              v59[7] = v61;
              operator delete(v61);
              v59[6] = 0;
              v59[7] = 0;
              v59[8] = 0;
            }
            *((_OWORD *)v59 + 3) = *(_OWORD *)&v319[8];
            v59[8] = *(_QWORD *)&v319[24];
            memset(&v319[8], 0, 24);
            v59[9] = v320;
            turi::flexible_type_impl::ndarray<double>::~ndarray(&v317);
            v324 = (void **)&v327;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v324);
            goto LABEL_424;
          default:
            goto LABEL_487;
        }
      case 5:
        v30 = *(double *)a2;
        switch(BYTE4(v329[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_423;
          case 2:
            if (*(_QWORD *)v6 != 1)
            {
              v31 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v31, v329[0]);
              v329[0] = (uint64_t)v31;
              *v31 = 1;
              do
              {
                v32 = __ldaxr((unint64_t *)v6);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, (unint64_t *)v6));
              if (!v33)
              {
                if (*(char *)(v6 + 31) < 0)
                  operator delete(*(void **)(v6 + 8));
                MEMORY[0x219A19A08](v6, 0x1012C404EF22A49);
              }
            }
            v14 = v329[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v327, (_QWORD *)(*(_QWORD *)&v30 + 8));
            goto LABEL_426;
          case 3:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v84 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v84, v329[0]);
            v329[0] = (uint64_t)v84;
            *v84 = 1;
            do
            {
              v85 = __ldaxr((unint64_t *)v6);
              v53 = --v85 == 0;
            }
            while (__stlxr(v85, (unint64_t *)v6));
            goto LABEL_301;
          case 4:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v246 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v246, v329[0]);
            v329[0] = (uint64_t)v246;
            *v246 = 1;
            do
            {
              v247 = __ldaxr((unint64_t *)v6);
              v148 = --v247 == 0;
            }
            while (__stlxr(v247, (unint64_t *)v6));
            goto LABEL_410;
          case 5:
            if (*(_QWORD *)v6 != 1)
            {
              v191 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v191, v329[0]);
              v329[0] = (uint64_t)v191;
              *v191 = 1;
              do
              {
                v192 = __ldaxr((unint64_t *)v6);
                v193 = v192 - 1;
              }
              while (__stlxr(v193, (unint64_t *)v6));
              if (!v193)
              {
                *(_QWORD *)&v317 = v6 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v317);
                MEMORY[0x219A19A08](v6, 0x1020C405E66F15BLL);
              }
            }
            if (v329[0] != *(_QWORD *)&v30)
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(v329[0] + 8), *(uint64_t **)(*(_QWORD *)&v30 + 8), *(uint64_t **)(*(_QWORD *)&v30 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v30 + 16) - *(_QWORD *)(*(_QWORD *)&v30 + 8)) >> 5);
            goto LABEL_424;
          case 8:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v250 = operator new();
            v251 = v329[0];
            *(_QWORD *)v250 = *(_QWORD *)v329[0];
            *(_QWORD *)(v250 + 8) = *(_QWORD *)(v251 + 8);
            v252 = *(_QWORD *)(v251 + 16);
            *(_QWORD *)(v250 + 16) = v252;
            if (v252)
            {
              v253 = (unsigned int *)(v252 + 8);
              do
                v254 = __ldxr(v253);
              while (__stxr(v254 + 1, v253));
            }
            v255 = *(_OWORD *)(v251 + 24);
            v256 = *(_OWORD *)(v251 + 40);
            *(_OWORD *)(v250 + 56) = *(_OWORD *)(v251 + 56);
            *(_OWORD *)(v250 + 40) = v256;
            *(_OWORD *)(v250 + 24) = v255;
            v329[0] = v250;
            *(_QWORD *)v250 = 1;
            do
            {
              v257 = __ldaxr((unint64_t *)v6);
              v138 = --v257 == 0;
            }
            while (__stlxr(v257, (unint64_t *)v6));
            goto LABEL_419;
          case 9:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v139 = (_QWORD *)operator new();
            v140 = v329[0] + 8;
            *v139 = *(_QWORD *)v329[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v139 + 1, v140);
            v329[0] = (uint64_t)v139;
            *v139 = 1;
            do
            {
              v141 = __ldaxr((unint64_t *)v6);
              v76 = --v141 == 0;
            }
            while (__stlxr(v141, (unint64_t *)v6));
            goto LABEL_248;
          default:
            goto LABEL_487;
        }
      case 6:
        switch(BYTE4(v329[1]))
        {
          case 0:
            *(_QWORD *)&v8 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
            goto LABEL_63;
          case 1:
            v124 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
LABEL_290:
            *(double *)v329 = v124;
            goto LABEL_424;
          case 2:
            if (*(_QWORD *)v6 != 1)
            {
              v197 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v197, v329[0]);
              v329[0] = (uint64_t)v197;
              *v197 = 1;
              do
              {
                v198 = __ldaxr((unint64_t *)v6);
                v199 = v198 - 1;
              }
              while (__stlxr(v199, (unint64_t *)v6));
              if (!v199)
              {
                if (*(char *)(v6 + 31) < 0)
                  operator delete(*(void **)(v6 + 8));
                MEMORY[0x219A19A08](v6, 0x1012C404EF22A49);
              }
            }
            v14 = v329[0];
            v200 = *(_DWORD *)(a2 + 8);
            *(_QWORD *)&v327 = *(_QWORD *)a2;
            DWORD2(v327) = v200;
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v327, (std::string *)&v317);
            goto LABEL_426;
          case 3:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v128 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v128, v329[0]);
            v329[0] = (uint64_t)v128;
            *v128 = 1;
            do
            {
              v129 = __ldaxr((unint64_t *)v6);
              v53 = --v129 == 0;
            }
            while (__stlxr(v129, (unint64_t *)v6));
            goto LABEL_301;
          case 4:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v248 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v248, v329[0]);
            v329[0] = (uint64_t)v248;
            *v248 = 1;
            do
            {
              v249 = __ldaxr((unint64_t *)v6);
              v148 = --v249 == 0;
            }
            while (__stlxr(v249, (unint64_t *)v6));
            goto LABEL_410;
          case 5:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v258 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v258, v329[0]);
            v329[0] = (uint64_t)v258;
            *v258 = 1;
            do
            {
              v259 = __ldaxr((unint64_t *)v6);
              v79 = --v259 == 0;
            }
            while (__stlxr(v259, (unint64_t *)v6));
            goto LABEL_397;
          case 6:
            v207 = *(_DWORD *)(a2 + 8);
            v329[0] = *(_QWORD *)a2;
            LODWORD(v329[1]) = v207;
            goto LABEL_424;
          case 7:
            goto LABEL_423;
          case 8:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v260 = operator new();
            v261 = v329[0];
            *(_QWORD *)v260 = *(_QWORD *)v329[0];
            *(_QWORD *)(v260 + 8) = *(_QWORD *)(v261 + 8);
            v262 = *(_QWORD *)(v261 + 16);
            *(_QWORD *)(v260 + 16) = v262;
            if (v262)
            {
              v263 = (unsigned int *)(v262 + 8);
              do
                v264 = __ldxr(v263);
              while (__stxr(v264 + 1, v263));
            }
            v265 = *(_OWORD *)(v261 + 24);
            v266 = *(_OWORD *)(v261 + 40);
            *(_OWORD *)(v260 + 56) = *(_OWORD *)(v261 + 56);
            *(_OWORD *)(v260 + 40) = v266;
            *(_OWORD *)(v260 + 24) = v265;
            v329[0] = v260;
            *(_QWORD *)v260 = 1;
            do
            {
              v267 = __ldaxr((unint64_t *)v6);
              v138 = --v267 == 0;
            }
            while (__stlxr(v267, (unint64_t *)v6));
            goto LABEL_419;
          case 9:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v149 = (_QWORD *)operator new();
            v150 = v329[0] + 8;
            *v149 = *(_QWORD *)v329[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v149 + 1, v150);
            v329[0] = (uint64_t)v149;
            *v149 = 1;
            do
            {
              v151 = __ldaxr((unint64_t *)v6);
              v76 = --v151 == 0;
            }
            while (__stlxr(v151, (unint64_t *)v6));
            goto LABEL_248;
          default:
            goto LABEL_487;
        }
      case 7:
        switch(BYTE4(v329[1]))
        {
          case 0:
          case 6:
            goto LABEL_423;
          case 1:
            v8 = NAN;
LABEL_63:
            *(double *)v329 = v8;
            goto LABEL_424;
          case 2:
            if (*(_QWORD *)v6 != 1)
            {
              v80 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v80, v329[0]);
              v329[0] = (uint64_t)v80;
              *v80 = 1;
              do
              {
                v81 = __ldaxr((unint64_t *)v6);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, (unint64_t *)v6));
              if (!v82)
              {
                if (*(char *)(v6 + 31) < 0)
                  operator delete(*(void **)(v6 + 8));
                MEMORY[0x219A19A08](v6, 0x1012C404EF22A49);
              }
            }
            v83 = v329[0] + 8;
            if (*(char *)(v329[0] + 31) < 0)
              operator delete(*(void **)v83);
            *(_QWORD *)v83 = 0;
            *(_QWORD *)(v83 + 8) = 0;
            *(_QWORD *)(v83 + 16) = 0;
            goto LABEL_424;
          case 3:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v188 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v188, v329[0]);
            v329[0] = (uint64_t)v188;
            *v188 = 1;
            do
            {
              v189 = __ldaxr((unint64_t *)v6);
              v53 = --v189 == 0;
            }
            while (__stlxr(v189, (unint64_t *)v6));
LABEL_301:
            if (!v53)
              goto LABEL_423;
            v152 = 0x1080C409938AC02;
            v190 = *(void **)(v6 + 8);
            if (v190)
            {
              *(_QWORD *)(v6 + 16) = v190;
              operator delete(v190);
            }
            goto LABEL_422;
          case 4:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v205 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v205, v329[0]);
            v329[0] = (uint64_t)v205;
            *v205 = 1;
            do
            {
              v206 = __ldaxr((unint64_t *)v6);
              v148 = --v206 == 0;
            }
            while (__stlxr(v206, (unint64_t *)v6));
            goto LABEL_410;
          case 5:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v144 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v144, v329[0]);
            v329[0] = (uint64_t)v144;
            *v144 = 1;
            do
            {
              v145 = __ldaxr((unint64_t *)v6);
              v79 = --v145 == 0;
            }
            while (__stlxr(v145, (unint64_t *)v6));
            goto LABEL_397;
          case 7:
            goto LABEL_424;
          case 8:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v216 = operator new();
            v217 = v329[0];
            *(_QWORD *)v216 = *(_QWORD *)v329[0];
            *(_QWORD *)(v216 + 8) = *(_QWORD *)(v217 + 8);
            v218 = *(_QWORD *)(v217 + 16);
            *(_QWORD *)(v216 + 16) = v218;
            if (v218)
            {
              v219 = (unsigned int *)(v218 + 8);
              do
                v220 = __ldxr(v219);
              while (__stxr(v220 + 1, v219));
            }
            v221 = *(_OWORD *)(v217 + 24);
            v222 = *(_OWORD *)(v217 + 40);
            *(_OWORD *)(v216 + 56) = *(_OWORD *)(v217 + 56);
            *(_OWORD *)(v216 + 40) = v222;
            *(_OWORD *)(v216 + 24) = v221;
            v329[0] = v216;
            *(_QWORD *)v216 = 1;
            do
            {
              v223 = __ldaxr((unint64_t *)v6);
              v138 = --v223 == 0;
            }
            while (__stlxr(v223, (unint64_t *)v6));
            goto LABEL_419;
          case 9:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v106 = (_QWORD *)operator new();
            v107 = v329[0] + 8;
            *v106 = *(_QWORD *)v329[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v106 + 1, v107);
            v329[0] = (uint64_t)v106;
            *v106 = 1;
            do
            {
              v108 = __ldaxr((unint64_t *)v6);
              v76 = --v108 == 0;
            }
            while (__stlxr(v108, (unint64_t *)v6));
LABEL_248:
            if (!v76)
              goto LABEL_423;
            v152 = 0x1030C407B73B9F7;
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v6);
            goto LABEL_422;
          default:
            goto LABEL_487;
        }
      case 8:
        v34 = (uint64_t *)(*(_QWORD *)a2 + 8);
        switch(BYTE4(v329[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_423;
          case 2:
            if (*(_QWORD *)v6 != 1)
            {
              v35 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v35, v329[0]);
              v329[0] = (uint64_t)v35;
              *v35 = 1;
              do
              {
                v36 = __ldaxr((unint64_t *)v6);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, (unint64_t *)v6));
              if (!v37)
              {
                if (*(char *)(v6 + 31) < 0)
                  operator delete(*(void **)(v6 + 8));
                MEMORY[0x219A19A08](v6, 0x1012C404EF22A49);
              }
            }
            v14 = v329[0];
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_426;
          case 3:
            if (*(_QWORD *)v6 != 1)
            {
              v98 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v98, v329[0]);
              v329[0] = (uint64_t)v98;
              *v98 = 1;
              do
              {
                v99 = __ldaxr((unint64_t *)v6);
                v100 = v99 - 1;
              }
              while (__stlxr(v100, (unint64_t *)v6));
              if (!v100)
              {
                v101 = *(void **)(v6 + 8);
                if (v101)
                {
                  *(_QWORD *)(v6 + 16) = v101;
                  operator delete(v101);
                }
                a4 = MEMORY[0x219A19A08](v6, 0x1080C409938AC02);
              }
            }
            v102 = (_QWORD *)v329[0];
            turi::flexible_type_impl::get_vec_visitor::operator()(v34, (double **)&v317, *(unint64_t *)&a4);
            v103 = (void *)v102[1];
            if (v103)
            {
              v102[2] = v103;
              operator delete(v103);
              v102[1] = 0;
              v102[2] = 0;
              v102[3] = 0;
            }
            *(_OWORD *)(v102 + 1) = v317;
            v102[3] = v318;
            goto LABEL_424;
          case 4:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v268 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v268, v329[0]);
            v329[0] = (uint64_t)v268;
            *v268 = 1;
            do
            {
              v269 = __ldaxr((unint64_t *)v6);
              v148 = --v269 == 0;
            }
            while (__stlxr(v269, (unint64_t *)v6));
            goto LABEL_410;
          case 5:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v224 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v224, v329[0]);
            v329[0] = (uint64_t)v224;
            *v224 = 1;
            do
            {
              v225 = __ldaxr((unint64_t *)v6);
              v79 = --v225 == 0;
            }
            while (__stlxr(v225, (unint64_t *)v6));
            goto LABEL_397;
          case 8:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v270 = operator new();
            v271 = v329[0];
            *(_QWORD *)v270 = *(_QWORD *)v329[0];
            *(_QWORD *)(v270 + 8) = *(_QWORD *)(v271 + 8);
            v272 = *(_QWORD *)(v271 + 16);
            *(_QWORD *)(v270 + 16) = v272;
            if (v272)
            {
              v273 = (unsigned int *)(v272 + 8);
              do
                v274 = __ldxr(v273);
              while (__stxr(v274 + 1, v273));
            }
            v275 = *(_OWORD *)(v271 + 24);
            v276 = *(_OWORD *)(v271 + 40);
            *(_OWORD *)(v270 + 56) = *(_OWORD *)(v271 + 56);
            *(_OWORD *)(v270 + 40) = v276;
            *(_OWORD *)(v270 + 24) = v275;
            v329[0] = v270;
            *(_QWORD *)v270 = 1;
            do
            {
              v277 = __ldaxr((unint64_t *)v6);
              v138 = --v277 == 0;
            }
            while (__stlxr(v277, (unint64_t *)v6));
LABEL_419:
            if (!v138)
              goto LABEL_423;
            v152 = 0x1030C40F1F0227BLL;
            boost::detail::shared_count::~shared_count((unsigned int **)(v6 + 16));
            goto LABEL_422;
          case 9:
            if (*(_QWORD *)v6 != 1)
            {
              v172 = (_QWORD *)operator new();
              v173 = v329[0] + 8;
              *v172 = *(_QWORD *)v329[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v172 + 1, v173);
              v329[0] = (uint64_t)v172;
              *v172 = 1;
              do
              {
                v174 = __ldaxr((unint64_t *)v6);
                v175 = v174 - 1;
              }
              while (__stlxr(v175, (unint64_t *)v6));
              if (!v175)
              {
                v176 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v6);
                a4 = MEMORY[0x219A19A08](v176, 0x1030C407B73B9F7);
              }
            }
            v95 = (_QWORD *)v329[0];
            turi::flexible_type_impl::get_ndvec_visitor::operator()(v34, &v317, *(unint64_t *)&a4);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v95 + 1), &v317);
            v177 = (void *)v95[3];
            if (v177)
            {
              v95[4] = v177;
              operator delete(v177);
              v95[3] = 0;
              v95[4] = 0;
              v95[5] = 0;
            }
            v97 = (void *)v95[6];
            *(_OWORD *)(v95 + 3) = v318;
            v95[5] = *(_QWORD *)v319;
            v318 = 0uLL;
            *(_QWORD *)v319 = 0;
            if (v97)
            {
LABEL_282:
              v95[7] = v97;
              operator delete(v97);
              v95[6] = 0;
              v95[7] = 0;
              v95[8] = 0;
            }
LABEL_283:
            *((_OWORD *)v95 + 3) = *(_OWORD *)&v319[8];
            v95[8] = *(_QWORD *)&v319[24];
            memset(&v319[8], 0, 24);
            v95[9] = v320;
            goto LABEL_483;
          default:
            goto LABEL_487;
        }
      case 9:
        v15 = *(double *)a2;
        v16 = (uint64_t *)(*(_QWORD *)a2 + 8);
        switch(BYTE4(v329[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_423;
          case 2:
            if (*(_QWORD *)v6 != 1)
            {
              v17 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v17, v329[0]);
              v329[0] = (uint64_t)v17;
              *v17 = 1;
              do
              {
                v18 = __ldaxr((unint64_t *)v6);
                v19 = v18 - 1;
              }
              while (__stlxr(v19, (unint64_t *)v6));
              if (!v19)
              {
                if (*(char *)(v6 + 31) < 0)
                  operator delete(*(void **)(v6 + 8));
                MEMORY[0x219A19A08](v6, 0x1012C404EF22A49);
              }
            }
            v14 = v329[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v327, v16);
LABEL_426:
            v121 = v14 + 8;
            if (*(char *)(v14 + 31) < 0)
              operator delete(*(void **)v121);
            v122 = v317;
            v123 = v318;
LABEL_429:
            *(_QWORD *)(v121 + 16) = v123;
            *(_OWORD *)v121 = v122;
            goto LABEL_424;
          case 3:
            if (*(_QWORD *)v6 != 1)
            {
              v42 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v42, v329[0]);
              v329[0] = (uint64_t)v42;
              *v42 = 1;
              do
              {
                v43 = __ldaxr((unint64_t *)v6);
                v44 = v43 - 1;
              }
              while (__stlxr(v44, (unint64_t *)v6));
              if (!v44)
              {
                v45 = *(void **)(v6 + 8);
                if (v45)
                {
                  *(_QWORD *)(v6 + 16) = v45;
                  operator delete(v45);
                }
                MEMORY[0x219A19A08](v6, 0x1080C409938AC02);
              }
            }
            v46 = (char *)(v329[0] + 8);
            if (*(_QWORD *)(*(_QWORD *)&v15 + 72))
              goto LABEL_436;
            v48 = *(uint64_t **)(*(_QWORD *)&v15 + 24);
            v47 = *(uint64_t **)(*(_QWORD *)&v15 + 32);
            v49 = *(_QWORD **)(*(_QWORD *)&v15 + 8);
            if (v47 == v48 || v49 == 0)
            {
              v278 = 0;
            }
            else
            {
              v278 = 1;
              do
              {
                v279 = *v48++;
                v278 *= v279;
              }
              while (v48 != v47);
            }
            if (v278 == (uint64_t)(v49[1] - *v49) >> 3
              && turi::flexible_type_impl::ndarray<double>::last_index(v16) == (uint64_t)(*(_QWORD *)(*v16 + 8)
                                                                                       - *(_QWORD *)*v16) >> 3)
            {
              if (!turi::flexible_type_impl::ndarray<double>::is_full(v16))
                turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
              v26 = (char *)*v16;
              if (v46 != v26)
              {
                v66 = (uint64_t *)(v26 + 8);
LABEL_118:
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v46, *(char **)v26, *v66, (*v66 - *(_QWORD *)v26) >> 3);
              }
            }
            else
            {
LABEL_436:
              if (!turi::flexible_type_impl::ndarray<double>::is_valid(v16))
                turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
              if (turi::flexible_type_impl::ndarray<double>::is_full(v16))
              {
                turi::flexible_type_impl::ndarray<double>::ndarray(&v317, (uint64_t)v16);
              }
              else
              {
                v327 = 0uLL;
                v328 = 0;
                v324 = 0;
                v325 = 0;
                v326 = 0;
                v321 = 0;
                v322 = 0;
                v323 = 0;
                turi::flexible_type_impl::ndarray<double>::ndarray(&v317, (uint64_t)&v327, (uint64_t)&v324, (uint64_t)&v321, 0);
                if (v321)
                {
                  v322 = v321;
                  operator delete(v321);
                }
                if (v324)
                {
                  v325 = v324;
                  operator delete(v324);
                }
                if ((_QWORD)v327)
                {
                  *((_QWORD *)&v327 + 1) = v327;
                  operator delete((void *)v327);
                }
                v320 = 0;
                if (&v317 != (__int128 *)(*(_QWORD *)&v15 + 8))
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v318, *(char **)(*(_QWORD *)&v15 + 24), *(_QWORD *)(*(_QWORD *)&v15 + 32), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v15 + 32) - *(_QWORD *)(*(_QWORD *)&v15 + 24)) >> 3);
                v281 = *(uint64_t **)(*(_QWORD *)&v15 + 24);
                v280 = *(uint64_t **)(*(_QWORD *)&v15 + 32);
                if (v280 == v281 || !*v16)
                {
                  v282 = 0;
                }
                else
                {
                  v282 = 1;
                  do
                  {
                    v283 = *v281++;
                    v282 *= v283;
                  }
                  while (v281 != v280);
                }
                std::vector<double>::resize(v317, v282);
                std::vector<unsigned long>::resize((uint64_t)&v319[8], (uint64_t)(*(_QWORD *)(*(_QWORD *)&v15 + 32) - *(_QWORD *)(*(_QWORD *)&v15 + 24)) >> 3);
                if (*((_QWORD *)&v318 + 1) != (_QWORD)v318 && *(_QWORD *)(v317 + 8) != *(_QWORD *)v317)
                {
                  std::vector<std::pair<unsigned long,unsigned long>>::vector(&v327, (uint64_t)(*(_QWORD *)(*(_QWORD *)&v15 + 56) - *(_QWORD *)(*(_QWORD *)&v15 + 48)) >> 3);
                  v284 = *(_QWORD *)(*(_QWORD *)&v15 + 48);
                  v285 = *(_QWORD *)(*(_QWORD *)&v15 + 56);
                  v286 = (unint64_t *)v327;
                  v287 = v285 - v284;
                  if (v285 != v284)
                  {
                    v288 = 0;
                    v289 = v287 >> 3;
                    if (v289 <= 1)
                      v289 = 1;
                    v290 = (_QWORD *)(v327 + 8);
                    do
                    {
                      *(v290 - 1) = *(_QWORD *)(v284 + 8 * v288);
                      *v290 = v288++;
                      v290 += 2;
                    }
                    while (v289 != v288);
                  }
                  std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v327 + 1), *((unint64_t **)&v327 + 1), (uint64_t)v286, v286);
                  v291 = v327;
                  v292 = *(_QWORD *)&v319[8];
                  *(_QWORD *)(*(_QWORD *)&v319[8] + 8 * *(_QWORD *)(v327 + 8)) = 1;
                  v293 = *(_QWORD *)(*(_QWORD *)&v15 + 56) - *(_QWORD *)(*(_QWORD *)&v15 + 48);
                  if ((unint64_t)v293 >= 9)
                  {
                    v294 = v293 >> 3;
                    v295 = v318;
                    if (v294 <= 2)
                      v294 = 2;
                    v296 = (uint64_t *)(v291 + 24);
                    v297 = v294 - 1;
                    do
                    {
                      v298 = *(_QWORD *)(v295 + 8 * *(v296 - 2)) * *(_QWORD *)(v292 + 8 * *(v296 - 2));
                      v299 = *v296;
                      v296 += 2;
                      *(_QWORD *)(v292 + 8 * v299) = v298;
                      --v297;
                    }
                    while (v297);
                  }
                  v300 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v15 + 32) - *(_QWORD *)(*(_QWORD *)&v15 + 24)) >> 3;
                  v321 = 0;
                  std::vector<unsigned long>::vector(&v324, v300, &v321);
                  do
                  {
                    v301 = v324;
                    if (v325 == v324)
                    {
                      v310 = 0;
                      v311 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)&v15 + 8) + 8
                                                                              * *(_QWORD *)(*(_QWORD *)&v15 + 72));
                      v312 = (_QWORD *)v317;
                    }
                    else
                    {
                      v302 = 0;
                      v303 = v325 - v324;
                      v304 = *(uint64_t **)(*(_QWORD *)&v15 + 48);
                      if (v303 <= 1)
                        v303 = 1;
                      v305 = v324;
                      v306 = v303;
                      do
                      {
                        v308 = (uint64_t)*v305++;
                        v307 = v308;
                        v309 = *v304++;
                        v302 += v309 * v307;
                        --v306;
                      }
                      while (v306);
                      v310 = 0;
                      v311 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)&v15 + 8)
                                       + 8 * (*(_QWORD *)(*(_QWORD *)&v15 + 72) + v302));
                      v312 = (_QWORD *)v317;
                      v313 = *(uint64_t **)&v319[8];
                      do
                      {
                        v315 = (uint64_t)*v301++;
                        v314 = v315;
                        v316 = *v313++;
                        v310 += v316 * v314;
                        --v303;
                      }
                      while (v303);
                    }
                    *(_QWORD *)(*v312 + 8 * v310) = v311;
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v16, (uint64_t *)&v324));
                  if (v324)
                  {
                    v325 = v324;
                    operator delete(v324);
                  }
                  if ((_QWORD)v327)
                  {
                    *((_QWORD *)&v327 + 1) = v327;
                    operator delete((void *)v327);
                  }
                }
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)&v317);
              if (!turi::flexible_type_impl::ndarray<double>::is_full(&v317))
                turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
              if (v46 != (char *)v317)
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v46, *(char **)v317, *(_QWORD *)(v317 + 8), (uint64_t)(*(_QWORD *)(v317 + 8) - *(_QWORD *)v317) >> 3);
LABEL_483:
              turi::flexible_type_impl::ndarray<double>::~ndarray(&v317);
            }
            goto LABEL_424;
          case 4:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v146 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v146, v329[0]);
            v329[0] = (uint64_t)v146;
            *v146 = 1;
            do
            {
              v147 = __ldaxr((unint64_t *)v6);
              v148 = --v147 == 0;
            }
            while (__stlxr(v147, (unint64_t *)v6));
LABEL_410:
            if (!v148)
              goto LABEL_423;
            v152 = 0x1020C405E66F15BLL;
            *(_QWORD *)&v317 = v6 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v317);
            break;
          case 5:
            if (*(_QWORD *)v6 == 1)
              goto LABEL_423;
            v104 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v104, v329[0]);
            v329[0] = (uint64_t)v104;
            *v104 = 1;
            do
            {
              v105 = __ldaxr((unint64_t *)v6);
              v79 = --v105 == 0;
            }
            while (__stlxr(v105, (unint64_t *)v6));
LABEL_397:
            if (!v79)
              goto LABEL_423;
            v152 = 0x1020C405E66F15BLL;
            *(_QWORD *)&v317 = v6 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v317);
            break;
          case 8:
            if (*(_QWORD *)v6 != 1)
            {
              v158 = operator new();
              v159 = v329[0];
              *(_QWORD *)v158 = *(_QWORD *)v329[0];
              *(_QWORD *)(v158 + 8) = *(_QWORD *)(v159 + 8);
              v160 = *(_QWORD *)(v159 + 16);
              *(_QWORD *)(v158 + 16) = v160;
              if (v160)
              {
                v161 = (unsigned int *)(v160 + 8);
                do
                  v162 = __ldxr(v161);
                while (__stxr(v162 + 1, v161));
              }
              v163 = *(_OWORD *)(v159 + 24);
              v164 = *(_OWORD *)(v159 + 40);
              *(_OWORD *)(v158 + 56) = *(_OWORD *)(v159 + 56);
              *(_OWORD *)(v158 + 40) = v164;
              *(_OWORD *)(v158 + 24) = v163;
              v329[0] = v158;
              *(_QWORD *)v158 = 1;
              do
              {
                v165 = __ldaxr((unint64_t *)v6);
                v166 = v165 - 1;
              }
              while (__stlxr(v166, (unint64_t *)v6));
              if (!v166)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v6 + 16));
                MEMORY[0x219A19A08](v6, 0x1030C40F1F0227BLL);
              }
            }
            v167 = v329[0];
            turi::flexible_type_impl::get_img_visitor::operator()((uint64_t)v16, (turi::image_type *)&v317);
            v168 = v317;
            v317 = 0uLL;
            v169 = *(_OWORD *)(v167 + 8);
            *(_OWORD *)(v167 + 8) = v168;
            v327 = v169;
            boost::detail::shared_count::~shared_count((unsigned int **)&v327 + 1);
            v170 = v318;
            v171 = *(_OWORD *)v319;
            *(_OWORD *)(v167 + 56) = *(_OWORD *)&v319[16];
            *(_OWORD *)(v167 + 40) = v171;
            *(_OWORD *)(v167 + 24) = v170;
            boost::detail::shared_count::~shared_count((unsigned int **)&v317 + 1);
            goto LABEL_424;
          case 9:
            if (*(_QWORD *)v6 != 1)
            {
              v67 = (_QWORD *)operator new();
              v68 = v329[0] + 8;
              *v67 = *(_QWORD *)v329[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v67 + 1, v68);
              v329[0] = (uint64_t)v67;
              *v67 = 1;
              do
              {
                v69 = __ldaxr((unint64_t *)v6);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, (unint64_t *)v6));
              if (!v70)
              {
                v71 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v6);
                MEMORY[0x219A19A08](v71, 0x1030C407B73B9F7);
              }
            }
            v72 = v329[0];
            std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v329[0] + 8), v16);
            if (v72 != *(_QWORD *)&v15)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v72 + 24), *(char **)(*(_QWORD *)&v15 + 24), *(_QWORD *)(*(_QWORD *)&v15 + 32), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v15 + 32) - *(_QWORD *)(*(_QWORD *)&v15 + 24)) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v72 + 48), *(char **)(*(_QWORD *)&v15 + 48), *(_QWORD *)(*(_QWORD *)&v15 + 56), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v15 + 56) - *(_QWORD *)(*(_QWORD *)&v15 + 48)) >> 3);
            }
            *(_QWORD *)(v72 + 72) = *(_QWORD *)(*(_QWORD *)&v15 + 72);
            goto LABEL_424;
          default:
            goto LABEL_487;
        }
LABEL_422:
        MEMORY[0x219A19A08](v6, v152);
LABEL_423:
        turi::flexible_type_fail(0);
        break;
      default:
LABEL_487:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
  }
LABEL_424:
  *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)v329 + 5);
  *(_QWORD *)a3 = v329[0];
  *(_BYTE *)(a3 + 12) = BYTE4(v329[1]);
}

void sub_2182259CC()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;

  __cxa_end_catch();
  switch(*(_BYTE *)(v0 - 92))
  {
    case 2:
      v1 = *(unint64_t **)(v0 - 104);
      do
      {
        v2 = __ldaxr(v1);
        v3 = v2 - 1;
      }
      while (__stlxr(v3, v1));
      if (v3)
        goto LABEL_39;
      v4 = *(_QWORD *)(v0 - 104);
      if (!v4)
        goto LABEL_39;
      if (*(char *)(v4 + 31) < 0)
        operator delete(*(void **)(v4 + 8));
      v5 = (_QWORD *)v4;
      v6 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v7 = *(unint64_t **)(v0 - 104);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (v9)
        goto LABEL_39;
      v10 = *(_QWORD **)(v0 - 104);
      if (!v10)
        goto LABEL_39;
      v11 = (void *)v10[1];
      if (v11)
      {
        v10[2] = v11;
        operator delete(v11);
      }
      v5 = v10;
      v6 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v12 = *(unint64_t **)(v0 - 104);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (v14)
        goto LABEL_39;
      v15 = *(_QWORD **)(v0 - 104);
      if (!v15)
        goto LABEL_39;
      *(_QWORD *)(v0 - 112) = v15 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 112));
      goto LABEL_26;
    case 5:
      v16 = *(unint64_t **)(v0 - 104);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (v18)
        goto LABEL_39;
      v15 = *(_QWORD **)(v0 - 104);
      if (!v15)
        goto LABEL_39;
      *(_QWORD *)(v0 - 112) = v15 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 112));
LABEL_26:
      v5 = v15;
      v6 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v19 = *(unint64_t **)(v0 - 104);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
        goto LABEL_39;
      v22 = *(_QWORD *)(v0 - 104);
      if (!v22)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v22 + 16));
      v5 = (_QWORD *)v22;
      v23 = -235920773;
      goto LABEL_37;
    case 9:
      v24 = *(unint64_t **)(v0 - 104);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (v26)
        goto LABEL_39;
      v27 = *(_QWORD **)(v0 - 104);
      if (!v27)
        goto LABEL_39;
      v5 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v27);
      v23 = 2071181815;
LABEL_37:
      v6 = v23 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v5, v6);
LABEL_39:
      JUMPOUT(0x218225750);
    default:
      goto LABEL_39;
  }
}

_QWORD *std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D932770;
  turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::~$_2((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D932770;
  turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::~$_2((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = &off_24D932770;
  std::__compressed_pair_elem<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D932770;
  return std::__compressed_pair_elem<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::~$_2(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::~$_2((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, __n128 a4@<Q0>)
{
  turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::operator()(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,std::allocator<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2 const&,0ul>(uint64_t result, uint64_t a2)
{
  unint64_t **v2;
  unint64_t *v3;
  unsigned int v4;
  unint64_t *v5;
  unint64_t v6;
  char v7;
  unint64_t **v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  *(_BYTE *)result = *(_BYTE *)a2;
  *(_QWORD *)(result + 8) = 0;
  v2 = (unint64_t **)(result + 8);
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  if (a2 == result)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_BYTE *)(result + 44) = 0;
  }
  else
  {
    v3 = *(unint64_t **)(a2 + 8);
    *(_QWORD *)(result + 13) = *(_QWORD *)(a2 + 13);
    *v2 = v3;
    v4 = *(unsigned __int8 *)(a2 + 20);
    *(_BYTE *)(result + 20) = v4;
    if (v4 <= 9 && ((1 << v4) & 0x33C) != 0)
    {
      v5 = *v2;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    v7 = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(result + 32) = 0;
    v8 = (unint64_t **)(result + 32);
    *(_BYTE *)(result + 24) = v7;
    *(_DWORD *)(result + 40) = 0;
    *(_BYTE *)(result + 44) = 0;
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(result + 37) = *(_QWORD *)(a2 + 37);
    *(_QWORD *)(result + 32) = v9;
    LODWORD(v9) = *(unsigned __int8 *)(a2 + 44);
    *(_BYTE *)(result + 44) = v9;
    switch((int)v9)
    {
      case 2:
        v10 = *v8;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        break;
      case 3:
        v12 = *v8;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        break;
      case 4:
        v14 = *v8;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        break;
      case 5:
        v16 = *v8;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
        break;
      case 8:
        v18 = *v8;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
        break;
      case 9:
        v20 = *v8;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        break;
      default:
        return result;
    }
  }
  return result;
}

void turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, __n128 a4@<Q0>)
{
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  __n128 v65;
  _BOOL4 v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::string::size_type v70;
  std::string::size_type v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  std::string::size_type v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  std::string::size_type v80;
  void *v81;
  void *v82;
  unsigned int v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  std::string::size_type v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  std::string::size_type v95;
  double v96;
  int v97;
  unint64_t *v98;
  _QWORD *v99;
  _QWORD *v100;
  std::string *v101;
  __int128 v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  const void *v107;
  const void *v108;
  int v109;
  int v110;
  size_t v111;
  const void *v112;
  size_t v113;
  const void *v114;
  size_t v115;
  int v116;
  unsigned int v117;
  double *v118;
  double *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  BOOL v125;
  unint64_t *v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  void *v136;
  void *v137;
  unint64_t *v138;
  unsigned int v139;
  unint64_t *v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int v156;
  __int128 v157;
  __int128 v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  std::__shared_weak_count *size;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int *v173;
  unsigned int v174;
  __int128 v175;
  __int128 v176;
  unint64_t v177;
  unint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t *v182;
  __n128 v183;
  _BOOL4 v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  std::string::size_type v188;
  std::string::size_type v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  std::string::size_type v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  std::string::size_type v198;
  void *v199;
  void *v200;
  unsigned int v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  std::string::size_type v205;
  void *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  std::string::size_type v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  const void *v217;
  size_t v218;
  unsigned int v219;
  double *v220;
  double *v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  BOOL v226;
  BOOL v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  char *v233;
  double v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int *v239;
  unsigned int *v240;
  unsigned int v241;
  __int128 v242;
  __int128 v243;
  float v244;
  int v245;
  unint64_t *v246;
  _QWORD *v247;
  _QWORD *v248;
  std::string *v249;
  __int128 v250;
  unint64_t *v251;
  _QWORD *v252;
  _QWORD *v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t *v256;
  _QWORD *v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  void *v261;
  void *v262;
  unint64_t *v263;
  unsigned int v264;
  unint64_t *v265;
  _QWORD *v266;
  _QWORD *v267;
  unint64_t v268;
  unint64_t v269;
  void *v270;
  uint64_t v271;
  _QWORD *v272;
  _QWORD *v273;
  unint64_t v274;
  unint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  unsigned int *v280;
  unsigned int v281;
  __int128 v282;
  __int128 v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  float v288;
  unint64_t *v289;
  _QWORD *v290;
  _QWORD *v291;
  std::string *v292;
  __int128 v293;
  unint64_t *v294;
  _QWORD *v295;
  _QWORD *v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t *v299;
  _QWORD *v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  void *v304;
  void *v305;
  unint64_t *v306;
  unsigned int v307;
  unint64_t *v308;
  _QWORD *v309;
  _QWORD *v310;
  unint64_t v311;
  unint64_t v312;
  void *v313;
  uint64_t v314;
  _QWORD *v315;
  _QWORD *v316;
  unint64_t v317;
  unint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  unsigned int *v323;
  unsigned int v324;
  __int128 v325;
  __int128 v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  _QWORD *v331;
  unint64_t v332;
  double *v333;
  _QWORD *v334;
  double v335;
  double data;
  uint64_t v337;
  double v338;
  double v339;
  BOOL v340;
  uint64_t v341;
  int v342;
  size_t v343;
  const void *v344;
  size_t v345;
  int v346;
  double *v347;
  double *v348;
  unsigned int v349;
  BOOL v350;
  unsigned int v351;
  unsigned int v352;
  double *v353;
  double *v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t *v364;
  unint64_t v365;
  unint64_t *v366;
  unint64_t v367;
  unint64_t *v368;
  unint64_t v369;
  unint64_t *v370;
  unint64_t v371;
  double v372;
  uint64_t v373;
  int v374;
  unint64_t *v375;
  unint64_t v376;
  double v377;
  double v378;
  uint64_t v379;
  int v380;
  unint64_t *v381;
  unint64_t v382;
  unint64_t *v383;
  unint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  unint64_t *v387;
  unint64_t v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t *v395;
  unint64_t v396;
  unint64_t *v397;
  unint64_t v398;
  unint64_t *v399;
  unint64_t v400;
  unint64_t *v401;
  unint64_t v402;
  std::runtime_error *exception;
  std::string *v404;
  __int128 v405;
  std::runtime_error *v406;
  std::string *v407;
  __int128 v408;
  void **v409;
  unsigned int *v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  std::string v414;
  size_t __idx;
  std::string __p;
  std::string::size_type v417;
  void *v418;
  void *v419;
  uint64_t v420;

  v420 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned __int8 *)(a2 + 12);
  if (v7 == 3)
  {
    *a3 = 0;
    *((_DWORD *)a3 + 2) = 0;
    *((_BYTE *)a3 + 12) = 0;
    if ((uint64_t *)a2 != a3)
    {
      *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a2 + 5);
      *a3 = *(_QWORD *)a2;
      *((_BYTE *)a3 + 12) = 3;
      v8 = (unint64_t *)*a3;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    for (i = 0; ; ++i)
    {
      v11 = 1;
      switch(*((_BYTE *)a3 + 12))
      {
        case 3:
          v12 = (_QWORD *)(*a3 + 8);
          v13 = (_QWORD *)(*a3 + 16);
          v14 = 3;
          goto LABEL_13;
        case 4:
          v12 = (_QWORD *)(*a3 + 8);
          v13 = (_QWORD *)(*a3 + 16);
          v14 = 4;
          goto LABEL_13;
        case 5:
          v12 = (_QWORD *)(*a3 + 8);
          v13 = (_QWORD *)(*a3 + 16);
          v14 = 5;
LABEL_13:
          v11 = (uint64_t)(*v13 - *v12) >> v14;
          break;
        case 9:
          v21 = *(uint64_t **)(*a3 + 24);
          v20 = *(uint64_t **)(*a3 + 32);
          if (v20 == v21)
          {
            v11 = 0;
          }
          else
          {
            v11 = *(_QWORD *)(*a3 + 8);
            if (v11)
            {
              v11 = 1;
              do
              {
                v22 = *v21++;
                v11 *= v22;
              }
              while (v21 != v20);
            }
          }
          break;
        default:
          break;
      }
      if (i >= v11)
        break;
      if (*(_BYTE *)a1)
      {
        switch(*((_BYTE *)a3 + 12))
        {
          case 2:
            v15 = *a3;
            if (*(_QWORD *)*a3 != 1)
            {
              v16 = (_QWORD *)operator new();
              v17 = *a3;
              *v16 = *(_QWORD *)*a3;
              v18 = (std::string *)(v16 + 1);
              if (*(char *)(v17 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)(v17 + 8), *(_QWORD *)(v17 + 16));
              }
              else
              {
                v19 = *(_OWORD *)(v17 + 8);
                v16[3] = *(_QWORD *)(v17 + 24);
                *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
              }
              *a3 = (uint64_t)v16;
              *v16 = 1;
              do
              {
                v58 = __ldaxr((unint64_t *)v15);
                v59 = v58 - 1;
              }
              while (__stlxr(v59, (unint64_t *)v15));
              if (!v59)
              {
                if (*(char *)(v15 + 31) < 0)
                  operator delete(*(void **)(v15 + 8));
                v35 = (unint64_t *)v15;
                v43 = 0x1012C404EF22A49;
                goto LABEL_69;
              }
            }
            break;
          case 3:
            v37 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 != 1)
            {
              v38 = (_QWORD *)operator new();
              v39 = (_QWORD *)*a3;
              *v38 = *(_QWORD *)*a3;
              v38[2] = 0;
              v38[3] = 0;
              v38[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v38 + 1, (const void *)v39[1], v39[2], (uint64_t)(v39[2] - v39[1]) >> 3);
              *a3 = (uint64_t)v38;
              *v38 = 1;
              do
              {
                v40 = __ldaxr(v37);
                v41 = v40 - 1;
              }
              while (__stlxr(v41, v37));
              if (!v41)
              {
                v42 = (void *)v37[1];
                if (v42)
                {
                  v37[2] = (unint64_t)v42;
                  operator delete(v42);
                }
                v35 = v37;
                v43 = 0x1080C409938AC02;
                goto LABEL_69;
              }
            }
            break;
          case 4:
            v23 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 != 1)
            {
              v24 = (_QWORD *)operator new();
              v25 = (_QWORD *)*a3;
              *v24 = *(_QWORD *)*a3;
              v24[2] = 0;
              v24[3] = 0;
              v24[1] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v24 + 1, (uint64_t *)v25[1], (uint64_t *)v25[2], (uint64_t)(v25[2] - v25[1]) >> 4);
              *a3 = (uint64_t)v24;
              *v24 = 1;
              do
              {
                v26 = __ldaxr(v23);
                v27 = v26 - 1;
              }
              while (__stlxr(v27, v23));
              if (!v27)
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v23 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                goto LABEL_51;
              }
            }
            break;
          case 5:
            v23 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 != 1)
            {
              v44 = (_QWORD *)operator new();
              v45 = (_QWORD *)*a3;
              *v44 = *(_QWORD *)*a3;
              v44[2] = 0;
              v44[3] = 0;
              v44[1] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v44 + 1, (uint64_t *)v45[1], (uint64_t *)v45[2], (uint64_t)(v45[2] - v45[1]) >> 5);
              *a3 = (uint64_t)v44;
              *v44 = 1;
              do
              {
                v46 = __ldaxr(v23);
                v47 = v46 - 1;
              }
              while (__stlxr(v47, v23));
              if (!v47)
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v23 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_51:
                v35 = v23;
                v43 = 0x1020C405E66F15BLL;
                goto LABEL_69;
              }
            }
            break;
          case 8:
            v48 = (_QWORD *)*a3;
            if (*(_QWORD *)*a3 != 1)
            {
              v49 = operator new();
              v50 = (_QWORD *)*a3;
              *(_QWORD *)v49 = *(_QWORD *)*a3;
              *(_QWORD *)(v49 + 8) = v50[1];
              v51 = v50[2];
              *(_QWORD *)(v49 + 16) = v51;
              if (v51)
              {
                v52 = (unsigned int *)(v51 + 8);
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }
              v54 = *(_OWORD *)(v50 + 3);
              v55 = *(_OWORD *)(v50 + 5);
              *(_OWORD *)(v49 + 56) = *(_OWORD *)(v50 + 7);
              *(_OWORD *)(v49 + 40) = v55;
              *(_OWORD *)(v49 + 24) = v54;
              *a3 = v49;
              *(_QWORD *)v49 = 1;
              do
              {
                v56 = __ldaxr(v48);
                v57 = v56 - 1;
              }
              while (__stlxr(v57, v48));
              if (!v57)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)v48 + 2);
                v35 = v48;
                v36 = -235920773;
                goto LABEL_60;
              }
            }
            break;
          case 9:
            v28 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 != 1)
            {
              v29 = (_QWORD *)operator new();
              v30 = *a3 + 8;
              *v29 = *(_QWORD *)*a3;
              turi::flexible_type_impl::ndarray<double>::ndarray(v29 + 1, v30);
              *a3 = (uint64_t)v29;
              *v29 = 1;
              do
              {
                v31 = __ldaxr(v28);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v28));
              if (!v32)
              {
                v33 = (void *)v28[6];
                if (v33)
                {
                  v28[7] = (unint64_t)v33;
                  operator delete(v33);
                }
                v34 = (void *)v28[3];
                if (v34)
                {
                  v28[4] = (unint64_t)v34;
                  operator delete(v34);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
                v35 = v28;
                v36 = 2071181815;
LABEL_60:
                v43 = v36 | 0x1030C4000000000;
LABEL_69:
                MEMORY[0x219A19A08](v35, v43);
              }
            }
            break;
          default:
            break;
        }
        v60 = *((unsigned __int8 *)a3 + 12);
        if (v60 == 1)
        {
          v64 = a3;
          if (i)
            goto LABEL_679;
        }
        else
        {
          if (v60 == 9)
          {
            v63 = (_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*a3 + 8));
            v61 = (_QWORD *)v63[1];
            v62 = v63[9] + i;
          }
          else
          {
            if (v60 != 3)
              goto LABEL_679;
            v61 = (_QWORD *)(*a3 + 8);
            v62 = i;
          }
          v64 = (uint64_t *)(*v61 + 8 * v62);
        }
        __p.__r_.__value_.__r.__words[0] = 0;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
        __p.__r_.__value_.__s.__data_[12] = 0;
        turi::flexible_type::operator=<double>((uint64_t)&__p, v64);
        switch(__p.__r_.__value_.__s.__data_[12])
        {
          case 0:
            switch(*(_BYTE *)(a1 + 20))
            {
              case 0:
                v124 = *(_QWORD *)(a1 + 8) <= (int64_t)__p.__r_.__value_.__r.__words[0];
                goto LABEL_475;
              case 1:
                v335 = *(double *)(a1 + 8);
                data = (double)(uint64_t)__p.__r_.__value_.__l.__data_;
                goto LABEL_474;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_79;
              case 6:
                v66 = (int64_t)__p.__r_.__value_.__r.__words[0] < (uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8;
                goto LABEL_80;
              default:
                goto LABEL_679;
            }
          case 1:
            switch(*(_BYTE *)(a1 + 20))
            {
              case 0:
                v125 = *(double *)&__p.__r_.__value_.__l.__data_ < (double)*(uint64_t *)(a1 + 8);
                goto LABEL_479;
              case 1:
                v335 = *(double *)(a1 + 8);
                data = *(double *)&__p.__r_.__value_.__l.__data_;
LABEL_474:
                v124 = v335 <= data;
                goto LABEL_475;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_79;
              case 6:
                v124 = (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8) <= *(double *)&__p.__r_.__value_.__l.__data_;
                goto LABEL_475;
              default:
                goto LABEL_679;
            }
          case 2:
            v104 = *(unsigned __int8 *)(a1 + 20);
            if (v104 - 3 < 7 || v104 < 2)
              goto LABEL_79;
            if (v104 != 2)
              goto LABEL_679;
            v105 = *(_QWORD *)(a1 + 8);
            v108 = *(const void **)(v105 + 8);
            v106 = v105 + 8;
            v107 = v108;
            v109 = *(char *)(v106 + 23);
            v110 = *(char *)(__p.__r_.__value_.__r.__words[0] + 31);
            if (v110 >= 0)
              v111 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 31);
            else
              v111 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16);
            if (v110 >= 0)
              v112 = (const void *)(__p.__r_.__value_.__r.__words[0] + 8);
            else
              v112 = *(const void **)(__p.__r_.__value_.__r.__words[0] + 8);
            if (v109 >= 0)
              v113 = *(unsigned __int8 *)(v106 + 23);
            else
              v113 = *(_QWORD *)(v106 + 8);
            if (v109 >= 0)
              v114 = (const void *)v106;
            else
              v114 = v107;
            if (v113 >= v111)
              v115 = v111;
            else
              v115 = v113;
            v116 = memcmp(v112, v114, v115);
            if (v116)
              v66 = v116 < 0;
            else
              v66 = v111 < v113;
            goto LABEL_80;
          case 3:
            v117 = *(unsigned __int8 *)(a1 + 20);
            if (v117 > 9)
              goto LABEL_679;
            if (v117 != 3)
              goto LABEL_79;
            v118 = *(double **)(*(_QWORD *)(a1 + 8) + 8);
            v119 = *(double **)(__p.__r_.__value_.__r.__words[0] + 8);
            v120 = (uint64_t)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v119) >> 3;
            v121 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) - (_QWORD)v118) >> 3;
            if (*(double **)(*(_QWORD *)(a1 + 8) + 16) == v118)
              goto LABEL_165;
            if (v121 <= 1)
              v122 = 1;
            else
              v122 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) - (_QWORD)v118) >> 3;
            v123 = (uint64_t)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v119) >> 3;
            break;
          case 4:
            v103 = *(unsigned __int8 *)(a1 + 20);
            if (v103 > 9)
              goto LABEL_679;
            if (v103 == 4)
            {
              v66 = turi::flexible_type_impl::gt_operator::operator()(v65, (uint64_t)&__idx, (uint64_t *)(*(_QWORD *)(a1 + 8) + 8), (_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8));
            }
            else
            {
LABEL_79:
              turi::flexible_type_fail(0);
              v66 = 0;
            }
            goto LABEL_80;
          case 5:
          case 7:
          case 8:
          case 9:
            if (*(unsigned __int8 *)(a1 + 20) < 0xAu)
              goto LABEL_79;
            goto LABEL_679;
          case 6:
            switch(*(_BYTE *)(a1 + 20))
            {
              case 0:
                v124 = *(_QWORD *)(a1 + 8) <= (uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8;
                goto LABEL_475;
              case 1:
                v125 = (double)SLODWORD(__p.__r_.__value_.__r.__words[1]) / 1000000.0
                     + (double)((uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8) < *(double *)(a1 + 8);
LABEL_479:
                v66 = v125;
                goto LABEL_80;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_79;
              case 6:
                v337 = (uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8;
                if (v337 > (uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8)
                  goto LABEL_472;
                if (v337 != (uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8)
                  goto LABEL_498;
                v124 = *(_DWORD *)(a1 + 16) <= SLODWORD(__p.__r_.__value_.__r.__words[1]);
LABEL_475:
                v66 = !v124;
                break;
              default:
                goto LABEL_679;
            }
            goto LABEL_80;
          default:
            goto LABEL_679;
        }
        while (1)
        {
          if (!v123 || *v118 > *v119)
          {
LABEL_472:
            v66 = 1;
            goto LABEL_80;
          }
          if (*v118 < *v119)
            break;
          --v123;
          ++v118;
          ++v119;
          if (!--v122)
          {
LABEL_165:
            v66 = v121 > v120;
            goto LABEL_80;
          }
        }
LABEL_498:
        v66 = 0;
LABEL_80:
        switch(__p.__r_.__value_.__s.__data_[12])
        {
          case 2:
            v67 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
            do
            {
              v68 = __ldaxr(v67);
              v69 = v68 - 1;
            }
            while (__stlxr(v69, v67));
            if (!v69)
            {
              v70 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                if (*(char *)(__p.__r_.__value_.__r.__words[0] + 31) < 0)
                  operator delete(*(void **)(__p.__r_.__value_.__r.__words[0] + 8));
                v71 = v70;
                v72 = 0x1012C404EF22A49;
                goto LABEL_121;
              }
            }
            break;
          case 3:
            v84 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
            do
            {
              v85 = __ldaxr(v84);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, v84));
            if (!v86)
            {
              v87 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                v88 = *(void **)(__p.__r_.__value_.__r.__words[0] + 8);
                if (v88)
                {
                  *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16) = v88;
                  operator delete(v88);
                }
                v71 = v87;
                v72 = 0x1080C409938AC02;
                goto LABEL_121;
              }
            }
            break;
          case 4:
            v73 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
            do
            {
              v74 = __ldaxr(v73);
              v75 = v74 - 1;
            }
            while (__stlxr(v75, v73));
            if (!v75)
            {
              v76 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                v409 = (void **)(__p.__r_.__value_.__r.__words[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v409);
                goto LABEL_114;
              }
            }
            break;
          case 5:
            v89 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
            do
            {
              v90 = __ldaxr(v89);
              v91 = v90 - 1;
            }
            while (__stlxr(v91, v89));
            if (!v91)
            {
              v76 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                v409 = (void **)(__p.__r_.__value_.__r.__words[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v409);
LABEL_114:
                v71 = v76;
                v72 = 0x1020C405E66F15BLL;
                goto LABEL_121;
              }
            }
            break;
          case 8:
            v92 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
            do
            {
              v93 = __ldaxr(v92);
              v94 = v93 - 1;
            }
            while (__stlxr(v94, v92));
            if (!v94)
            {
              v95 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(__p.__r_.__value_.__r.__words[0] + 16));
                v71 = v95;
                v83 = -235920773;
                goto LABEL_120;
              }
            }
            break;
          case 9:
            v77 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
            {
              v80 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                v81 = *(void **)(__p.__r_.__value_.__r.__words[0] + 48);
                if (v81)
                {
                  *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 56) = v81;
                  operator delete(v81);
                }
                v82 = *(void **)(v80 + 24);
                if (v82)
                {
                  *(_QWORD *)(v80 + 32) = v82;
                  operator delete(v82);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v80 + 8);
                v71 = v80;
                v83 = 2071181815;
LABEL_120:
                v72 = v83 | 0x1030C4000000000;
LABEL_121:
                MEMORY[0x219A19A08](v71, v72);
              }
            }
            break;
          default:
            break;
        }
        if (v66)
        {
          v96 = 0.0;
          switch(*(_BYTE *)(a1 + 20))
          {
            case 0:
              v96 = (double)*(uint64_t *)(a1 + 8);
              goto LABEL_354;
            case 1:
              v96 = *(double *)(a1 + 8);
              goto LABEL_354;
            case 2:
              v165 = *(_QWORD *)(a1 + 8);
              __idx = 0;
              v166 = (char *)(v165 + 8);
              if (*(char *)(v165 + 31) < 0)
                v166 = *(char **)(v165 + 8);
              std::string::basic_string[abi:ne180100]<0>(&__p, v166);
              v167 = std::stod(&__p, &__idx);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (*(char *)(v165 + 31) < 0)
                v168 = *(_QWORD *)(v165 + 16);
              else
                v168 = *(unsigned __int8 *)(v165 + 31);
              if (__idx != v168)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v404 = std::string::append(&v414, " cannot be interpreted as a float");
                v405 = *(_OWORD *)&v404->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v404->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v405;
                v404->__r_.__value_.__l.__size_ = 0;
                v404->__r_.__value_.__r.__words[2] = 0;
                v404->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, &__p);
                __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              v244 = v167;
              v96 = v244;
              goto LABEL_354;
            case 3:
              v161 = *(_QWORD *)(a1 + 8);
              memset(&__p, 0, sizeof(__p));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v161 + 8), *(_QWORD *)(v161 + 16), (uint64_t)(*(_QWORD *)(v161 + 16) - *(_QWORD *)(v161 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_354;
            case 4:
              v169 = *(_QWORD *)(a1 + 8);
              memset(&__p, 0, sizeof(__p));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v169 + 8), *(uint64_t **)(v169 + 16), (uint64_t)(*(_QWORD *)(v169 + 16) - *(_QWORD *)(v169 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v414.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v414);
              goto LABEL_354;
            case 5:
              v170 = *(_QWORD *)(a1 + 8);
              memset(&__p, 0, sizeof(__p));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v170 + 8), *(uint64_t **)(v170 + 16), (uint64_t)(*(_QWORD *)(v170 + 16) - *(_QWORD *)(v170 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v414.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v414);
              goto LABEL_354;
            case 6:
              v96 = (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8);
              goto LABEL_354;
            case 7:
              goto LABEL_354;
            case 8:
              v171 = *(_QWORD *)(a1 + 8);
              v172 = *(unsigned int **)(v171 + 16);
              v409 = *(void ***)(v171 + 8);
              v410 = v172;
              if (v172)
              {
                v173 = v172 + 2;
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
              }
              v175 = *(_OWORD *)(v171 + 24);
              v176 = *(_OWORD *)(v171 + 56);
              v412 = *(_OWORD *)(v171 + 40);
              v413 = v176;
              v411 = v175;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v410);
              goto LABEL_354;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)(a1 + 8) + 8);
              turi::flexible_type_fail(0);
              if (v418)
              {
                v419 = v418;
                operator delete(v418);
              }
              if (__p.__r_.__value_.__r.__words[2])
              {
                v417 = __p.__r_.__value_.__r.__words[2];
                operator delete((void *)__p.__r_.__value_.__r.__words[2]);
              }
              size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_)
              {
                v163 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v164 = __ldaxr(v163);
                while (__stlxr(v164 - 1, v163));
                if (!v164)
                {
                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                  std::__shared_weak_count::__release_weak(size);
                }
              }
LABEL_354:
              v245 = *((unsigned __int8 *)a3 + 12);
              switch(*((_BYTE *)a3 + 12))
              {
                case 2:
                  v246 = (unint64_t *)*a3;
                  if (*(_QWORD *)*a3 == 1)
                    goto LABEL_679;
                  v247 = (_QWORD *)operator new();
                  v248 = (_QWORD *)*a3;
                  *v247 = *(_QWORD *)*a3;
                  v249 = (std::string *)(v247 + 1);
                  if (*((char *)v248 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(v249, (const std::string::value_type *)v248[1], v248[2]);
                  }
                  else
                  {
                    v250 = *(_OWORD *)(v248 + 1);
                    v247[3] = v248[3];
                    *(_OWORD *)&v249->__r_.__value_.__l.__data_ = v250;
                  }
                  *a3 = (uint64_t)v247;
                  *v247 = 1;
                  do
                  {
                    v286 = __ldaxr(v246);
                    v287 = v286 - 1;
                  }
                  while (__stlxr(v287, v246));
                  if (v287)
                    goto LABEL_402;
                  if (*((char *)v246 + 31) < 0)
                    operator delete((void *)v246[1]);
                  v263 = v246;
                  v271 = 0x1012C404EF22A49;
                  goto LABEL_401;
                case 3:
                  v265 = (unint64_t *)*a3;
                  if (*(_QWORD *)*a3 == 1)
                    goto LABEL_461;
                  v266 = (_QWORD *)operator new();
                  v267 = (_QWORD *)*a3;
                  *v266 = *(_QWORD *)*a3;
                  v266[2] = 0;
                  v266[3] = 0;
                  v266[1] = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v266 + 1, (const void *)v267[1], v267[2], (uint64_t)(v267[2] - v267[1]) >> 3);
                  *a3 = (uint64_t)v266;
                  *v266 = 1;
                  do
                  {
                    v268 = __ldaxr(v265);
                    v269 = v268 - 1;
                  }
                  while (__stlxr(v269, v265));
                  if (v269)
                    goto LABEL_402;
                  v270 = (void *)v265[1];
                  if (v270)
                  {
                    v265[2] = (unint64_t)v270;
                    operator delete(v270);
                  }
                  v263 = v265;
                  v271 = 0x1080C409938AC02;
                  goto LABEL_401;
                case 4:
                  v251 = (unint64_t *)*a3;
                  if (*(_QWORD *)*a3 == 1)
                    goto LABEL_679;
                  v252 = (_QWORD *)operator new();
                  v253 = (_QWORD *)*a3;
                  *v252 = *(_QWORD *)*a3;
                  v252[2] = 0;
                  v252[3] = 0;
                  v252[1] = 0;
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v252 + 1, (uint64_t *)v253[1], (uint64_t *)v253[2], (uint64_t)(v253[2] - v253[1]) >> 4);
                  *a3 = (uint64_t)v252;
                  *v252 = 1;
                  do
                  {
                    v254 = __ldaxr(v251);
                    v255 = v254 - 1;
                  }
                  while (__stlxr(v255, v251));
                  if (v255)
                    goto LABEL_402;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v251 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  goto LABEL_384;
                case 5:
                  v251 = (unint64_t *)*a3;
                  if (*(_QWORD *)*a3 == 1)
                    goto LABEL_679;
                  v272 = (_QWORD *)operator new();
                  v273 = (_QWORD *)*a3;
                  *v272 = *(_QWORD *)*a3;
                  v272[2] = 0;
                  v272[3] = 0;
                  v272[1] = 0;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v272 + 1, (uint64_t *)v273[1], (uint64_t *)v273[2], (uint64_t)(v273[2] - v273[1]) >> 5);
                  *a3 = (uint64_t)v272;
                  *v272 = 1;
                  do
                  {
                    v274 = __ldaxr(v251);
                    v275 = v274 - 1;
                  }
                  while (__stlxr(v275, v251));
                  if (v275)
                    goto LABEL_402;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v251 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_384:
                  v263 = v251;
                  v271 = 0x1020C405E66F15BLL;
                  goto LABEL_401;
                case 8:
                  v276 = (_QWORD *)*a3;
                  if (*(_QWORD *)*a3 == 1)
                    goto LABEL_679;
                  v277 = operator new();
                  v278 = (_QWORD *)*a3;
                  *(_QWORD *)v277 = *(_QWORD *)*a3;
                  *(_QWORD *)(v277 + 8) = v278[1];
                  v279 = v278[2];
                  *(_QWORD *)(v277 + 16) = v279;
                  if (v279)
                  {
                    v280 = (unsigned int *)(v279 + 8);
                    do
                      v281 = __ldxr(v280);
                    while (__stxr(v281 + 1, v280));
                  }
                  v282 = *(_OWORD *)(v278 + 3);
                  v283 = *(_OWORD *)(v278 + 5);
                  *(_OWORD *)(v277 + 56) = *(_OWORD *)(v278 + 7);
                  *(_OWORD *)(v277 + 40) = v283;
                  *(_OWORD *)(v277 + 24) = v282;
                  *a3 = v277;
                  *(_QWORD *)v277 = 1;
                  do
                  {
                    v284 = __ldaxr(v276);
                    v285 = v284 - 1;
                  }
                  while (__stlxr(v285, v276));
                  if (v285)
                    goto LABEL_402;
                  boost::detail::shared_count::~shared_count((unsigned int **)v276 + 2);
                  v263 = v276;
                  v264 = -235920773;
                  goto LABEL_393;
                case 9:
                  v256 = (unint64_t *)*a3;
                  if (*(_QWORD *)*a3 == 1)
                    goto LABEL_464;
                  v257 = (_QWORD *)operator new();
                  v258 = *a3 + 8;
                  *v257 = *(_QWORD *)*a3;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v257 + 1, v258);
                  *a3 = (uint64_t)v257;
                  *v257 = 1;
                  do
                  {
                    v259 = __ldaxr(v256);
                    v260 = v259 - 1;
                  }
                  while (__stlxr(v260, v256));
                  if (v260)
                    goto LABEL_402;
                  v261 = (void *)v256[6];
                  if (v261)
                  {
                    v256[7] = (unint64_t)v261;
                    operator delete(v261);
                  }
                  v262 = (void *)v256[3];
                  if (v262)
                  {
                    v256[4] = (unint64_t)v262;
                    operator delete(v262);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v256 + 1));
                  v263 = v256;
                  v264 = 2071181815;
LABEL_393:
                  v271 = v264 | 0x1030C4000000000;
LABEL_401:
                  MEMORY[0x219A19A08](v263, v271);
LABEL_402:
                  v245 = *((unsigned __int8 *)a3 + 12);
LABEL_403:
                  if (v245 == 1)
                    goto LABEL_462;
                  if (v245 == 9)
                    goto LABEL_464;
                  goto LABEL_460;
                default:
                  goto LABEL_403;
              }
            default:
              break;
          }
LABEL_679:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
        }
      }
      if (*(_BYTE *)(a1 + 24))
      {
        v97 = *((unsigned __int8 *)a3 + 12);
        switch(*((_BYTE *)a3 + 12))
        {
          case 2:
            v98 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 == 1)
              goto LABEL_679;
            v99 = (_QWORD *)operator new();
            v100 = (_QWORD *)*a3;
            *v99 = *(_QWORD *)*a3;
            v101 = (std::string *)(v99 + 1);
            if (*((char *)v100 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v101, (const std::string::value_type *)v100[1], v100[2]);
            }
            else
            {
              v102 = *(_OWORD *)(v100 + 1);
              v99[3] = v100[3];
              *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v102;
            }
            *a3 = (uint64_t)v99;
            *v99 = 1;
            do
            {
              v177 = __ldaxr(v98);
              v178 = v177 - 1;
            }
            while (__stlxr(v178, v98));
            if (v178)
              goto LABEL_241;
            if (*((char *)v98 + 31) < 0)
              operator delete((void *)v98[1]);
            v138 = v98;
            v146 = 0x1012C404EF22A49;
            goto LABEL_240;
          case 3:
            v140 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 == 1)
              goto LABEL_245;
            v141 = (_QWORD *)operator new();
            v142 = (_QWORD *)*a3;
            *v141 = *(_QWORD *)*a3;
            v141[2] = 0;
            v141[3] = 0;
            v141[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v141 + 1, (const void *)v142[1], v142[2], (uint64_t)(v142[2] - v142[1]) >> 3);
            *a3 = (uint64_t)v141;
            *v141 = 1;
            do
            {
              v143 = __ldaxr(v140);
              v144 = v143 - 1;
            }
            while (__stlxr(v144, v140));
            if (v144)
              goto LABEL_241;
            v145 = (void *)v140[1];
            if (v145)
            {
              v140[2] = (unint64_t)v145;
              operator delete(v145);
            }
            v138 = v140;
            v146 = 0x1080C409938AC02;
            goto LABEL_240;
          case 4:
            v126 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 == 1)
              goto LABEL_679;
            v127 = (_QWORD *)operator new();
            v128 = (_QWORD *)*a3;
            *v127 = *(_QWORD *)*a3;
            v127[2] = 0;
            v127[3] = 0;
            v127[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v127 + 1, (uint64_t *)v128[1], (uint64_t *)v128[2], (uint64_t)(v128[2] - v128[1]) >> 4);
            *a3 = (uint64_t)v127;
            *v127 = 1;
            do
            {
              v129 = __ldaxr(v126);
              v130 = v129 - 1;
            }
            while (__stlxr(v130, v126));
            if (v130)
              goto LABEL_241;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v126 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_198;
          case 5:
            v126 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 == 1)
              goto LABEL_679;
            v147 = (_QWORD *)operator new();
            v148 = (_QWORD *)*a3;
            *v147 = *(_QWORD *)*a3;
            v147[2] = 0;
            v147[3] = 0;
            v147[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v147 + 1, (uint64_t *)v148[1], (uint64_t *)v148[2], (uint64_t)(v148[2] - v148[1]) >> 5);
            *a3 = (uint64_t)v147;
            *v147 = 1;
            do
            {
              v149 = __ldaxr(v126);
              v150 = v149 - 1;
            }
            while (__stlxr(v150, v126));
            if (v150)
              goto LABEL_241;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v126 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_198:
            v138 = v126;
            v146 = 0x1020C405E66F15BLL;
            goto LABEL_240;
          case 8:
            v151 = (_QWORD *)*a3;
            if (*(_QWORD *)*a3 == 1)
              goto LABEL_679;
            v152 = operator new();
            v153 = (_QWORD *)*a3;
            *(_QWORD *)v152 = *(_QWORD *)*a3;
            *(_QWORD *)(v152 + 8) = v153[1];
            v154 = v153[2];
            *(_QWORD *)(v152 + 16) = v154;
            if (v154)
            {
              v155 = (unsigned int *)(v154 + 8);
              do
                v156 = __ldxr(v155);
              while (__stxr(v156 + 1, v155));
            }
            v157 = *(_OWORD *)(v153 + 3);
            v158 = *(_OWORD *)(v153 + 5);
            *(_OWORD *)(v152 + 56) = *(_OWORD *)(v153 + 7);
            *(_OWORD *)(v152 + 40) = v158;
            *(_OWORD *)(v152 + 24) = v157;
            *a3 = v152;
            *(_QWORD *)v152 = 1;
            do
            {
              v159 = __ldaxr(v151);
              v160 = v159 - 1;
            }
            while (__stlxr(v160, v151));
            if (v160)
              goto LABEL_241;
            boost::detail::shared_count::~shared_count((unsigned int **)v151 + 2);
            v138 = v151;
            v139 = -235920773;
            goto LABEL_207;
          case 9:
            v131 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 == 1)
              goto LABEL_246;
            v132 = (_QWORD *)operator new();
            v133 = *a3 + 8;
            *v132 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v132 + 1, v133);
            *a3 = (uint64_t)v132;
            *v132 = 1;
            do
            {
              v134 = __ldaxr(v131);
              v135 = v134 - 1;
            }
            while (__stlxr(v135, v131));
            if (v135)
              goto LABEL_241;
            v136 = (void *)v131[6];
            if (v136)
            {
              v131[7] = (unint64_t)v136;
              operator delete(v136);
            }
            v137 = (void *)v131[3];
            if (v137)
            {
              v131[4] = (unint64_t)v137;
              operator delete(v137);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v131 + 1));
            v138 = v131;
            v139 = 2071181815;
LABEL_207:
            v146 = v139 | 0x1030C4000000000;
LABEL_240:
            MEMORY[0x219A19A08](v138, v146);
LABEL_241:
            v97 = *((unsigned __int8 *)a3 + 12);
LABEL_242:
            if (v97 == 1)
            {
              v182 = a3;
              if (i)
                goto LABEL_679;
            }
            else
            {
              if (v97 == 9)
              {
LABEL_246:
                v181 = (_QWORD *)*a3;
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*a3 + 8));
                v179 = (_QWORD *)v181[1];
                v180 = v181[9] + i;
              }
              else
              {
                if (v97 != 3)
                  goto LABEL_679;
LABEL_245:
                v179 = (_QWORD *)(*a3 + 8);
                v180 = i;
              }
              v182 = (uint64_t *)(*v179 + 8 * v180);
            }
            __p.__r_.__value_.__r.__words[0] = 0;
            LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
            __p.__r_.__value_.__s.__data_[12] = 0;
            turi::flexible_type::operator=<double>((uint64_t)&__p, v182);
            switch(__p.__r_.__value_.__s.__data_[12])
            {
              case 0:
                switch(*(_BYTE *)(a1 + 44))
                {
                  case 0:
                    v226 = *(_QWORD *)(a1 + 32) < (int64_t)__p.__r_.__value_.__r.__words[0];
                    goto LABEL_323;
                  case 1:
                    v338 = *(double *)(a1 + 32);
                    v339 = (double)(uint64_t)__p.__r_.__value_.__l.__data_;
                    goto LABEL_488;
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                    goto LABEL_251;
                  case 6:
                    v227 = (int64_t)__p.__r_.__value_.__r.__words[0] <= (uint64_t)(*(_QWORD *)(a1 + 32) << 8) >> 8;
                    goto LABEL_493;
                  default:
                    goto LABEL_679;
                }
              case 1:
                switch(*(_BYTE *)(a1 + 44))
                {
                  case 0:
                    v227 = *(double *)&__p.__r_.__value_.__l.__data_ <= (double)*(uint64_t *)(a1 + 32);
                    goto LABEL_493;
                  case 1:
                    v338 = *(double *)(a1 + 32);
                    v339 = *(double *)&__p.__r_.__value_.__l.__data_;
LABEL_488:
                    v340 = v338 < v339;
                    goto LABEL_489;
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                    goto LABEL_251;
                  case 6:
                    v340 = (double)*(int *)(a1 + 40) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 32) << 8) >> 8) < *(double *)&__p.__r_.__value_.__l.__data_;
LABEL_489:
                    v184 = v340;
                    goto LABEL_252;
                  default:
                    goto LABEL_679;
                }
              case 2:
                v215 = *(unsigned __int8 *)(a1 + 44);
                if (v215 - 3 < 7 || v215 < 2)
                  goto LABEL_251;
                if (v215 != 2)
                  goto LABEL_679;
                v216 = *(_QWORD *)(a1 + 32);
                if (*(char *)(v216 + 31) < 0)
                {
                  v217 = *(const void **)(v216 + 8);
                  v218 = *(_QWORD *)(v216 + 16);
                }
                else
                {
                  v217 = (const void *)(v216 + 8);
                  v218 = *(unsigned __int8 *)(v216 + 31);
                }
                v342 = *(char *)(__p.__r_.__value_.__r.__words[0] + 31);
                if (v342 >= 0)
                  v343 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 31);
                else
                  v343 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16);
                if (v342 >= 0)
                  v344 = (const void *)(__p.__r_.__value_.__r.__words[0] + 8);
                else
                  v344 = *(const void **)(__p.__r_.__value_.__r.__words[0] + 8);
                if (v343 >= v218)
                  v345 = v218;
                else
                  v345 = v343;
                v346 = memcmp(v217, v344, v345);
                if (v346)
                  v184 = v346 < 0;
                else
                  v184 = v218 < v343;
                goto LABEL_252;
              case 3:
                v219 = *(unsigned __int8 *)(a1 + 44);
                if (v219 > 9)
                  goto LABEL_679;
                if (v219 != 3)
                  goto LABEL_251;
                v220 = *(double **)(*(_QWORD *)(a1 + 32) + 8);
                v221 = *(double **)(__p.__r_.__value_.__r.__words[0] + 8);
                v222 = (uint64_t)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v221) >> 3;
                v223 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) - (_QWORD)v220) >> 3;
                if (*(double **)(*(_QWORD *)(a1 + 32) + 16) == v220)
                  goto LABEL_316;
                if (v223 <= 1)
                  v224 = 1;
                else
                  v224 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) - (_QWORD)v220) >> 3;
                v225 = (uint64_t)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v221) >> 3;
                break;
              case 4:
                v214 = *(unsigned __int8 *)(a1 + 44);
                if (v214 > 9)
                  goto LABEL_679;
                if (v214 == 4)
                {
                  v184 = turi::flexible_type_impl::lt_operator::operator()(v183, (uint64_t)&__idx, (uint64_t *)(*(_QWORD *)(a1 + 32) + 8), (_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8));
                }
                else
                {
LABEL_251:
                  turi::flexible_type_fail(0);
                  v184 = 0;
                }
                goto LABEL_252;
              case 5:
              case 7:
              case 8:
              case 9:
                if (*(unsigned __int8 *)(a1 + 44) < 0xAu)
                  goto LABEL_251;
                goto LABEL_679;
              case 6:
                switch(*(_BYTE *)(a1 + 44))
                {
                  case 0:
                    v226 = *(_QWORD *)(a1 + 32) < (uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8;
                    goto LABEL_323;
                  case 1:
                    v227 = (double)SLODWORD(__p.__r_.__value_.__r.__words[1]) / 1000000.0
                         + (double)((uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8) <= *(double *)(a1 + 32);
LABEL_493:
                    v184 = !v227;
                    goto LABEL_252;
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                    goto LABEL_251;
                  case 6:
                    v341 = (uint64_t)(*(_QWORD *)(a1 + 32) << 8) >> 8;
                    if (v341 < (uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8)
                      goto LABEL_486;
                    if (v341 != (uint64_t)(__p.__r_.__value_.__r.__words[0] << 8) >> 8)
                      goto LABEL_501;
                    v226 = *(_DWORD *)(a1 + 40) < SLODWORD(__p.__r_.__value_.__r.__words[1]);
LABEL_323:
                    v184 = v226;
                    break;
                  default:
                    goto LABEL_679;
                }
                goto LABEL_252;
              default:
                goto LABEL_679;
            }
            while (v225 && *v220 <= *v221)
            {
              if (*v220 < *v221)
              {
LABEL_486:
                v184 = 1;
                goto LABEL_252;
              }
              --v225;
              ++v220;
              ++v221;
              if (!--v224)
              {
LABEL_316:
                v184 = v223 < v222;
                goto LABEL_252;
              }
            }
LABEL_501:
            v184 = 0;
LABEL_252:
            switch(__p.__r_.__value_.__s.__data_[12])
            {
              case 2:
                v185 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
                do
                {
                  v186 = __ldaxr(v185);
                  v187 = v186 - 1;
                }
                while (__stlxr(v187, v185));
                if (!v187)
                {
                  v188 = __p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    if (*(char *)(__p.__r_.__value_.__r.__words[0] + 31) < 0)
                      operator delete(*(void **)(__p.__r_.__value_.__r.__words[0] + 8));
                    v189 = v188;
                    v190 = 0x1012C404EF22A49;
                    goto LABEL_293;
                  }
                }
                break;
              case 3:
                v202 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
                do
                {
                  v203 = __ldaxr(v202);
                  v204 = v203 - 1;
                }
                while (__stlxr(v204, v202));
                if (!v204)
                {
                  v205 = __p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    v206 = *(void **)(__p.__r_.__value_.__r.__words[0] + 8);
                    if (v206)
                    {
                      *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16) = v206;
                      operator delete(v206);
                    }
                    v189 = v205;
                    v190 = 0x1080C409938AC02;
                    goto LABEL_293;
                  }
                }
                break;
              case 4:
                v191 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
                do
                {
                  v192 = __ldaxr(v191);
                  v193 = v192 - 1;
                }
                while (__stlxr(v193, v191));
                if (!v193)
                {
                  v194 = __p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    v409 = (void **)(__p.__r_.__value_.__r.__words[0] + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v409);
                    goto LABEL_286;
                  }
                }
                break;
              case 5:
                v207 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
                do
                {
                  v208 = __ldaxr(v207);
                  v209 = v208 - 1;
                }
                while (__stlxr(v209, v207));
                if (!v209)
                {
                  v194 = __p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    v409 = (void **)(__p.__r_.__value_.__r.__words[0] + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v409);
LABEL_286:
                    v189 = v194;
                    v190 = 0x1020C405E66F15BLL;
                    goto LABEL_293;
                  }
                }
                break;
              case 8:
                v210 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
                do
                {
                  v211 = __ldaxr(v210);
                  v212 = v211 - 1;
                }
                while (__stlxr(v212, v210));
                if (!v212)
                {
                  v213 = __p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(__p.__r_.__value_.__r.__words[0] + 16));
                    v189 = v213;
                    v201 = -235920773;
                    goto LABEL_292;
                  }
                }
                break;
              case 9:
                v195 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
                do
                {
                  v196 = __ldaxr(v195);
                  v197 = v196 - 1;
                }
                while (__stlxr(v197, v195));
                if (!v197)
                {
                  v198 = __p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    v199 = *(void **)(__p.__r_.__value_.__r.__words[0] + 48);
                    if (v199)
                    {
                      *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 56) = v199;
                      operator delete(v199);
                    }
                    v200 = *(void **)(v198 + 24);
                    if (v200)
                    {
                      *(_QWORD *)(v198 + 32) = v200;
                      operator delete(v200);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v198 + 8);
                    v189 = v198;
                    v201 = 2071181815;
LABEL_292:
                    v190 = v201 | 0x1030C4000000000;
LABEL_293:
                    MEMORY[0x219A19A08](v189, v190);
                  }
                }
                break;
              default:
                break;
            }
            if (!v184)
              continue;
            v96 = 0.0;
            switch(*(_BYTE *)(a1 + 44))
            {
              case 0:
                v96 = (double)*(uint64_t *)(a1 + 32);
                goto LABEL_409;
              case 1:
                v96 = *(double *)(a1 + 32);
                goto LABEL_409;
              case 2:
                v232 = *(_QWORD *)(a1 + 32);
                __idx = 0;
                v233 = (char *)(v232 + 8);
                if (*(char *)(v232 + 31) < 0)
                  v233 = *(char **)(v232 + 8);
                std::string::basic_string[abi:ne180100]<0>(&__p, v233);
                v234 = std::stod(&__p, &__idx);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (*(char *)(v232 + 31) < 0)
                  v235 = *(_QWORD *)(v232 + 16);
                else
                  v235 = *(unsigned __int8 *)(v232 + 31);
                if (__idx != v235)
                {
                  v406 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v407 = std::string::append(&v414, " cannot be interpreted as a float");
                  v408 = *(_OWORD *)&v407->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v407->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v408;
                  v407->__r_.__value_.__l.__size_ = 0;
                  v407->__r_.__value_.__r.__words[2] = 0;
                  v407->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v406, &__p);
                  __cxa_throw(v406, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                v288 = v234;
                v96 = v288;
                goto LABEL_409;
              case 3:
                v228 = *(_QWORD *)(a1 + 32);
                memset(&__p, 0, sizeof(__p));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v228 + 8), *(_QWORD *)(v228 + 16), (uint64_t)(*(_QWORD *)(v228 + 16) - *(_QWORD *)(v228 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                goto LABEL_409;
              case 4:
                v236 = *(_QWORD *)(a1 + 32);
                memset(&__p, 0, sizeof(__p));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v236 + 8), *(uint64_t **)(v236 + 16), (uint64_t)(*(_QWORD *)(v236 + 16) - *(_QWORD *)(v236 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v414.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v414);
                goto LABEL_409;
              case 5:
                v237 = *(_QWORD *)(a1 + 32);
                memset(&__p, 0, sizeof(__p));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v237 + 8), *(uint64_t **)(v237 + 16), (uint64_t)(*(_QWORD *)(v237 + 16) - *(_QWORD *)(v237 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v414.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v414);
                goto LABEL_409;
              case 6:
                v96 = (double)*(int *)(a1 + 40) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 32) << 8) >> 8);
                goto LABEL_409;
              case 7:
                goto LABEL_409;
              case 8:
                v238 = *(_QWORD *)(a1 + 32);
                v239 = *(unsigned int **)(v238 + 16);
                v409 = *(void ***)(v238 + 8);
                v410 = v239;
                if (v239)
                {
                  v240 = v239 + 2;
                  do
                    v241 = __ldxr(v240);
                  while (__stxr(v241 + 1, v240));
                }
                v242 = *(_OWORD *)(v238 + 24);
                v243 = *(_OWORD *)(v238 + 56);
                v412 = *(_OWORD *)(v238 + 40);
                v413 = v243;
                v411 = v242;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count(&v410);
                goto LABEL_409;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)(a1 + 32) + 8);
                turi::flexible_type_fail(0);
                if (v418)
                {
                  v419 = v418;
                  operator delete(v418);
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v417 = __p.__r_.__value_.__r.__words[2];
                  operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                }
                v229 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                if (__p.__r_.__value_.__l.__size_)
                {
                  v230 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                  do
                    v231 = __ldaxr(v230);
                  while (__stlxr(v231 - 1, v230));
                  if (!v231)
                  {
                    ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                    std::__shared_weak_count::__release_weak(v229);
                  }
                }
                break;
              default:
                goto LABEL_679;
            }
            break;
          default:
            goto LABEL_242;
        }
LABEL_409:
        v245 = *((unsigned __int8 *)a3 + 12);
        switch(*((_BYTE *)a3 + 12))
        {
          case 2:
            v289 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 == 1)
              goto LABEL_679;
            v290 = (_QWORD *)operator new();
            v291 = (_QWORD *)*a3;
            *v290 = *(_QWORD *)*a3;
            v292 = (std::string *)(v290 + 1);
            if (*((char *)v291 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v292, (const std::string::value_type *)v291[1], v291[2]);
            }
            else
            {
              v293 = *(_OWORD *)(v291 + 1);
              v290[3] = v291[3];
              *(_OWORD *)&v292->__r_.__value_.__l.__data_ = v293;
            }
            *a3 = (uint64_t)v290;
            *v290 = 1;
            do
            {
              v329 = __ldaxr(v289);
              v330 = v329 - 1;
            }
            while (__stlxr(v330, v289));
            if (v330)
              goto LABEL_457;
            if (*((char *)v289 + 31) < 0)
              operator delete((void *)v289[1]);
            v306 = v289;
            v314 = 0x1012C404EF22A49;
            goto LABEL_456;
          case 3:
            v308 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 == 1)
              goto LABEL_461;
            v309 = (_QWORD *)operator new();
            v310 = (_QWORD *)*a3;
            *v309 = *(_QWORD *)*a3;
            v309[2] = 0;
            v309[3] = 0;
            v309[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v309 + 1, (const void *)v310[1], v310[2], (uint64_t)(v310[2] - v310[1]) >> 3);
            *a3 = (uint64_t)v309;
            *v309 = 1;
            do
            {
              v311 = __ldaxr(v308);
              v312 = v311 - 1;
            }
            while (__stlxr(v312, v308));
            if (v312)
              goto LABEL_457;
            v313 = (void *)v308[1];
            if (v313)
            {
              v308[2] = (unint64_t)v313;
              operator delete(v313);
            }
            v306 = v308;
            v314 = 0x1080C409938AC02;
            goto LABEL_456;
          case 4:
            v294 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 == 1)
              goto LABEL_679;
            v295 = (_QWORD *)operator new();
            v296 = (_QWORD *)*a3;
            *v295 = *(_QWORD *)*a3;
            v295[2] = 0;
            v295[3] = 0;
            v295[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v295 + 1, (uint64_t *)v296[1], (uint64_t *)v296[2], (uint64_t)(v296[2] - v296[1]) >> 4);
            *a3 = (uint64_t)v295;
            *v295 = 1;
            do
            {
              v297 = __ldaxr(v294);
              v298 = v297 - 1;
            }
            while (__stlxr(v298, v294));
            if (v298)
              goto LABEL_457;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v294 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_439;
          case 5:
            v294 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 == 1)
              goto LABEL_679;
            v315 = (_QWORD *)operator new();
            v316 = (_QWORD *)*a3;
            *v315 = *(_QWORD *)*a3;
            v315[2] = 0;
            v315[3] = 0;
            v315[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v315 + 1, (uint64_t *)v316[1], (uint64_t *)v316[2], (uint64_t)(v316[2] - v316[1]) >> 5);
            *a3 = (uint64_t)v315;
            *v315 = 1;
            do
            {
              v317 = __ldaxr(v294);
              v318 = v317 - 1;
            }
            while (__stlxr(v318, v294));
            if (v318)
              goto LABEL_457;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v294 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_439:
            v306 = v294;
            v314 = 0x1020C405E66F15BLL;
            goto LABEL_456;
          case 8:
            v319 = (_QWORD *)*a3;
            if (*(_QWORD *)*a3 == 1)
              goto LABEL_679;
            v320 = operator new();
            v321 = (_QWORD *)*a3;
            *(_QWORD *)v320 = *(_QWORD *)*a3;
            *(_QWORD *)(v320 + 8) = v321[1];
            v322 = v321[2];
            *(_QWORD *)(v320 + 16) = v322;
            if (v322)
            {
              v323 = (unsigned int *)(v322 + 8);
              do
                v324 = __ldxr(v323);
              while (__stxr(v324 + 1, v323));
            }
            v325 = *(_OWORD *)(v321 + 3);
            v326 = *(_OWORD *)(v321 + 5);
            *(_OWORD *)(v320 + 56) = *(_OWORD *)(v321 + 7);
            *(_OWORD *)(v320 + 40) = v326;
            *(_OWORD *)(v320 + 24) = v325;
            *a3 = v320;
            *(_QWORD *)v320 = 1;
            do
            {
              v327 = __ldaxr(v319);
              v328 = v327 - 1;
            }
            while (__stlxr(v328, v319));
            if (v328)
              goto LABEL_457;
            boost::detail::shared_count::~shared_count((unsigned int **)v319 + 2);
            v306 = v319;
            v307 = -235920773;
            goto LABEL_448;
          case 9:
            v299 = (unint64_t *)*a3;
            if (*(_QWORD *)*a3 == 1)
              goto LABEL_464;
            v300 = (_QWORD *)operator new();
            v301 = *a3 + 8;
            *v300 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v300 + 1, v301);
            *a3 = (uint64_t)v300;
            *v300 = 1;
            do
            {
              v302 = __ldaxr(v299);
              v303 = v302 - 1;
            }
            while (__stlxr(v303, v299));
            if (v303)
              goto LABEL_457;
            v304 = (void *)v299[6];
            if (v304)
            {
              v299[7] = (unint64_t)v304;
              operator delete(v304);
            }
            v305 = (void *)v299[3];
            if (v305)
            {
              v299[4] = (unint64_t)v305;
              operator delete(v305);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v299 + 1));
            v306 = v299;
            v307 = 2071181815;
LABEL_448:
            v314 = v307 | 0x1030C4000000000;
LABEL_456:
            MEMORY[0x219A19A08](v306, v314);
LABEL_457:
            v245 = *((unsigned __int8 *)a3 + 12);
LABEL_458:
            if (v245 == 1)
            {
LABEL_462:
              v333 = (double *)a3;
              if (i)
                goto LABEL_679;
            }
            else
            {
              if (v245 == 9)
              {
LABEL_464:
                v334 = (_QWORD *)*a3;
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*a3 + 8));
                v331 = (_QWORD *)v334[1];
                v332 = v334[9] + i;
              }
              else
              {
LABEL_460:
                if (v245 != 3)
                  goto LABEL_679;
LABEL_461:
                v331 = (_QWORD *)(*a3 + 8);
                v332 = i;
              }
              v333 = (double *)(*v331 + 8 * v332);
            }
            *v333 = v96;
            break;
          default:
            goto LABEL_458;
        }
      }
    }
  }
  else if (v7 == 7)
  {
    *a3 = 0;
    *((_DWORD *)a3 + 2) = 0;
    *((_BYTE *)a3 + 12) = 0;
    if ((uint64_t *)a2 != a3)
    {
      *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a2 + 5);
      *a3 = *(_QWORD *)a2;
      *((_BYTE *)a3 + 12) = 7;
    }
  }
  else if (*(_BYTE *)a1)
  {
    v347 = (double *)(a1 + 8);
    switch(*(_BYTE *)(a1 + 20))
    {
      case 0:
        switch(*(_BYTE *)(a2 + 12))
        {
          case 0:
            if (*(_QWORD *)a2 < *(_QWORD *)v347)
              goto LABEL_626;
            goto LABEL_551;
          case 1:
            a4.n128_u64[0] = *(_QWORD *)a2;
            v372 = (double)*(uint64_t *)v347;
            goto LABEL_623;
          case 2:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_550;
          case 6:
            if (*(_QWORD *)v347 > (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
              goto LABEL_626;
            goto LABEL_551;
          default:
            turi::apply_binary_op_ff();
        }
      case 1:
        switch(*(_BYTE *)(a2 + 12))
        {
          case 0:
            a4.n128_f64[0] = *v347;
            if (*v347 > (double)*(uint64_t *)a2)
              goto LABEL_626;
            goto LABEL_551;
          case 1:
            a4.n128_u64[0] = *(_QWORD *)a2;
            v372 = *v347;
LABEL_623:
            if (a4.n128_f64[0] < v372)
              goto LABEL_626;
            goto LABEL_551;
          case 2:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_550;
          case 6:
            a4.n128_f64[0] = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
            if (a4.n128_f64[0] < *v347)
              goto LABEL_626;
            goto LABEL_551;
          default:
            turi::apply_binary_op_ff();
        }
      case 2:
        if (v7 > 9)
          goto LABEL_690;
        if (((1 << v7) & 0x373) != 0)
          goto LABEL_550;
        if (v7 != 2)
LABEL_690:
          turi::apply_binary_op_ff();
        if ((std::string::compare[abi:ne180100]((const void **)(*(_QWORD *)a2 + 8), (_BYTE *)(*(_QWORD *)v347 + 8)) & 0x80000000) != 0)
          goto LABEL_626;
        goto LABEL_551;
      case 3:
        if (v7 > 9 || ((1 << v7) & 0x377) == 0)
          turi::apply_binary_op_ff();
        goto LABEL_550;
      case 4:
        if (v7 > 9)
          goto LABEL_689;
        if (((1 << v7) & 0x367) != 0)
        {
LABEL_550:
          turi::flexible_type_fail(0);
          goto LABEL_551;
        }
        if (v7 != 4)
LABEL_689:
          turi::apply_binary_op_ff();
        if (!turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&__p, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(*(_QWORD *)v347 + 8)))goto LABEL_551;
LABEL_626:
        *a3 = 0;
        *((_DWORD *)a3 + 2) = 0;
        *((_BYTE *)a3 + 12) = 0;
        if (v347 != (double *)a3)
        {
          *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a1 + 13);
          *a3 = *(_QWORD *)v347;
          v374 = *(unsigned __int8 *)(a1 + 20);
          *((_BYTE *)a3 + 12) = v374;
          switch(v374)
          {
            case 2:
              v375 = (unint64_t *)*a3;
              do
                v376 = __ldaxr(v375);
              while (__stlxr(v376 + 1, v375));
              break;
            case 3:
              v387 = (unint64_t *)*a3;
              do
                v388 = __ldaxr(v387);
              while (__stlxr(v388 + 1, v387));
              break;
            case 4:
              v383 = (unint64_t *)*a3;
              do
                v384 = __ldaxr(v383);
              while (__stlxr(v384 + 1, v383));
              break;
            case 5:
              v389 = (unint64_t *)*a3;
              do
                v390 = __ldaxr(v389);
              while (__stlxr(v390 + 1, v389));
              break;
            case 8:
              v391 = (unint64_t *)*a3;
              do
                v392 = __ldaxr(v391);
              while (__stlxr(v392 + 1, v391));
              break;
            case 9:
              v385 = (unint64_t *)*a3;
              do
                v386 = __ldaxr(v385);
              while (__stlxr(v386 + 1, v385));
              break;
            default:
              return;
          }
        }
        break;
      case 5:
        if (v7 > 9 || ((1 << v7) & 0x377) == 0)
          turi::apply_binary_op_ff();
        goto LABEL_550;
      case 6:
        switch(*(_BYTE *)(a2 + 12))
        {
          case 0:
            if (*(_QWORD *)a2 < (uint64_t)(*(_QWORD *)v347 << 8) >> 8)
              goto LABEL_626;
            goto LABEL_551;
          case 1:
            a4.n128_f64[0] = (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8);
            if (a4.n128_f64[0] > *(double *)a2)
              goto LABEL_626;
            goto LABEL_551;
          case 2:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_550;
          case 6:
            v373 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
            if (v373 < (uint64_t)(*(_QWORD *)v347 << 8) >> 8
              || v373 == (uint64_t)(*(_QWORD *)v347 << 8) >> 8 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 16))
            {
              goto LABEL_626;
            }
            goto LABEL_551;
          default:
            turi::apply_binary_op_ff();
        }
      case 7:
        if (v7 > 9 || ((1 << v7) & 0x377) == 0)
          turi::apply_binary_op_ff();
        goto LABEL_550;
      case 8:
        if (v7 > 9 || ((1 << v7) & 0x377) == 0)
          turi::apply_binary_op_ff();
        goto LABEL_550;
      case 9:
        if (v7 > 9 || ((1 << v7) & 0x377) == 0)
          turi::apply_binary_op_ff();
        goto LABEL_550;
      default:
        turi::apply_binary_op_ff();
    }
  }
  else
  {
LABEL_551:
    if (*(_BYTE *)(a1 + 24))
    {
      v348 = (double *)(a1 + 32);
      switch(*(_BYTE *)(a1 + 44))
      {
        case 0:
          switch(*(_BYTE *)(a2 + 12))
          {
            case 0:
              if (*(_QWORD *)a2 > *(_QWORD *)v348)
                goto LABEL_644;
              goto LABEL_593;
            case 1:
              v377 = *(double *)a2;
              v378 = (double)*(uint64_t *)v348;
              goto LABEL_641;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_592;
            case 6:
              if (*(_QWORD *)v348 < (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
                goto LABEL_644;
              goto LABEL_593;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*(_BYTE *)(a2 + 12))
          {
            case 0:
              if (*v348 < (double)*(uint64_t *)a2)
                goto LABEL_644;
              goto LABEL_593;
            case 1:
              v377 = *(double *)a2;
              v378 = *v348;
LABEL_641:
              if (v377 > v378)
                goto LABEL_644;
              goto LABEL_593;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_592;
            case 6:
              if ((double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8) > *v348)
                goto LABEL_644;
              goto LABEL_593;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v351 = *(unsigned __int8 *)(a2 + 12);
          if (v351 - 3 < 7 || v351 < 2)
            goto LABEL_592;
          if (v351 != 2)
            turi::apply_binary_op_ff();
          v350 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)v348 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
          goto LABEL_566;
        case 3:
          v352 = *(unsigned __int8 *)(a2 + 12);
          if (v352 > 9)
            turi::apply_binary_op_ff();
          if (v352 != 3)
            goto LABEL_592;
          v353 = *(double **)(*(_QWORD *)a2 + 8);
          v354 = *(double **)(*(_QWORD *)v348 + 8);
          v355 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v348 + 16) - (_QWORD)v354) >> 3;
          v356 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v353) >> 3;
          if (*(double **)(*(_QWORD *)a2 + 16) == v353)
            goto LABEL_579;
          if (v356 <= 1)
            v357 = 1;
          else
            v357 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v353) >> 3;
          v358 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v348 + 16) - (_QWORD)v354) >> 3;
          break;
        case 4:
          v349 = *(unsigned __int8 *)(a2 + 12);
          if (v349 > 9)
            turi::apply_binary_op_ff();
          if (v349 != 4)
            goto LABEL_592;
          v350 = turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&__p, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(*(_QWORD *)v348 + 8));
LABEL_566:
          if (v350)
            goto LABEL_644;
          goto LABEL_593;
        case 5:
          if (*(unsigned __int8 *)(a2 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_592;
        case 6:
          switch(*(_BYTE *)(a2 + 12))
          {
            case 0:
              if (*(_QWORD *)a2 > (uint64_t)(*(_QWORD *)v348 << 8) >> 8)
                goto LABEL_644;
              goto LABEL_593;
            case 1:
              if ((double)*(int *)(a1 + 40) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 32) << 8) >> 8) < *(double *)a2)
                goto LABEL_644;
              goto LABEL_593;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_592;
            case 6:
              v379 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
              if (v379 > (uint64_t)(*(_QWORD *)v348 << 8) >> 8
                || v379 == (uint64_t)(*(_QWORD *)v348 << 8) >> 8 && *(_DWORD *)(a2 + 8) > *(_DWORD *)(a1 + 40))
              {
                goto LABEL_644;
              }
              goto LABEL_593;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          if (*(unsigned __int8 *)(a2 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_592;
        case 8:
          if (*(unsigned __int8 *)(a2 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_592;
        case 9:
          if (*(unsigned __int8 *)(a2 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
LABEL_592:
          turi::flexible_type_fail(0);
          goto LABEL_593;
        default:
          turi::apply_binary_op_ff();
      }
      while (v358 && *v353 <= *v354)
      {
        if (*v353 < *v354)
          goto LABEL_593;
        --v358;
        ++v354;
        ++v353;
        if (!--v357)
        {
LABEL_579:
          if (v356 <= v355)
            goto LABEL_593;
          break;
        }
      }
LABEL_644:
      *a3 = 0;
      *((_DWORD *)a3 + 2) = 0;
      *((_BYTE *)a3 + 12) = 0;
      if (v348 != (double *)a3)
      {
        *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a1 + 37);
        *a3 = *(_QWORD *)v348;
        v380 = *(unsigned __int8 *)(a1 + 44);
        *((_BYTE *)a3 + 12) = v380;
        switch(v380)
        {
          case 2:
            v381 = (unint64_t *)*a3;
            do
              v382 = __ldaxr(v381);
            while (__stlxr(v382 + 1, v381));
            break;
          case 3:
            v397 = (unint64_t *)*a3;
            do
              v398 = __ldaxr(v397);
            while (__stlxr(v398 + 1, v397));
            break;
          case 4:
            v393 = (unint64_t *)*a3;
            do
              v394 = __ldaxr(v393);
            while (__stlxr(v394 + 1, v393));
            break;
          case 5:
            v399 = (unint64_t *)*a3;
            do
              v400 = __ldaxr(v399);
            while (__stlxr(v400 + 1, v399));
            break;
          case 8:
            v401 = (unint64_t *)*a3;
            do
              v402 = __ldaxr(v401);
            while (__stlxr(v402 + 1, v401));
            break;
          case 9:
            v395 = (unint64_t *)*a3;
            do
              v396 = __ldaxr(v395);
            while (__stlxr(v396 + 1, v395));
            break;
          default:
            return;
        }
      }
    }
    else
    {
LABEL_593:
      *a3 = 0;
      *((_DWORD *)a3 + 2) = 0;
      *((_BYTE *)a3 + 12) = 0;
      if ((uint64_t *)a2 != a3)
      {
        *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a2 + 5);
        *a3 = *(_QWORD *)a2;
        v359 = *(unsigned __int8 *)(a2 + 12);
        *((_BYTE *)a3 + 12) = v359;
        switch(v359)
        {
          case 2:
            v360 = (unint64_t *)*a3;
            do
              v361 = __ldaxr(v360);
            while (__stlxr(v361 + 1, v360));
            break;
          case 3:
            v366 = (unint64_t *)*a3;
            do
              v367 = __ldaxr(v366);
            while (__stlxr(v367 + 1, v366));
            break;
          case 4:
            v362 = (unint64_t *)*a3;
            do
              v363 = __ldaxr(v362);
            while (__stlxr(v363 + 1, v362));
            break;
          case 5:
            v368 = (unint64_t *)*a3;
            do
              v369 = __ldaxr(v368);
            while (__stlxr(v369 + 1, v368));
            break;
          case 8:
            v370 = (unint64_t *)*a3;
            do
              v371 = __ldaxr(v370);
            while (__stlxr(v371 + 1, v370));
            break;
          case 9:
            v364 = (unint64_t *)*a3;
            do
              v365 = __ldaxr(v364);
            while (__stlxr(v365 + 1, v364));
            break;
          default:
            return;
        }
      }
    }
  }
}

void sub_218228810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  unint64_t **v31;
  void *v32;
  int v33;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;

  if (a31 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v33 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v33)
  {
LABEL_8:
    switch(*((_BYTE *)v31 + 12))
    {
      case 2:
        v35 = *v31;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (v37)
          goto LABEL_47;
        v38 = *v31;
        if (!*v31)
          goto LABEL_46;
        if (*((char *)v38 + 31) < 0)
          operator delete((void *)v38[1]);
        v39 = v38;
        v40 = 0x1012C404EF22A49;
        goto LABEL_45;
      case 3:
        v49 = *v31;
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (v51)
          goto LABEL_47;
        v52 = *v31;
        if (!*v31)
          goto LABEL_46;
        v53 = (void *)v52[1];
        if (v53)
        {
          v52[2] = (unint64_t)v53;
          operator delete(v53);
        }
        v39 = v52;
        v40 = 0x1080C409938AC02;
        goto LABEL_45;
      case 4:
        v41 = *v31;
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (v43)
          goto LABEL_47;
        v44 = *v31;
        if (!*v31)
          goto LABEL_46;
        a19 = v44 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
        goto LABEL_38;
      case 5:
        v54 = *v31;
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (v56)
          goto LABEL_47;
        v44 = *v31;
        if (!*v31)
          goto LABEL_46;
        a19 = v44 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
LABEL_38:
        v39 = v44;
        v40 = 0x1020C405E66F15BLL;
        goto LABEL_45;
      case 8:
        v57 = *v31;
        do
        {
          v58 = __ldaxr(v57);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, v57));
        if (v59)
          goto LABEL_47;
        v60 = *v31;
        if (!*v31)
          goto LABEL_46;
        boost::detail::shared_count::~shared_count((unsigned int **)v60 + 2);
        v39 = v60;
        v48 = -235920773;
        goto LABEL_44;
      case 9:
        v45 = *v31;
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (v47)
          goto LABEL_47;
        if (!*v31)
          goto LABEL_46;
        v39 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v31);
        v48 = 2071181815;
LABEL_44:
        v40 = v48 | 0x1030C4000000000;
LABEL_45:
        MEMORY[0x219A19A08](v39, v40);
LABEL_46:
        *v31 = 0;
LABEL_47:
        *v31 = 0;
        *((_DWORD *)v31 + 2) = 0;
        *((_BYTE *)v31 + 12) = 0;
        _Unwind_Resume(a1);
        return;
      default:
        goto LABEL_47;
    }
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

_QWORD *turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::new_instance(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  *result = off_24D9327F0;
  v3 = *(_QWORD *)(a1 + 16);
  result[2] = v3;
  result[3] = v3;
  return result;
}

uint64_t turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::add_element_simple(uint64_t result, _BYTE *a2)
{
  double v2;

  switch(a2[12])
  {
    case 0:
      v2 = *(double *)a2;
      goto LABEL_13;
    case 1:
      if (*(double *)a2 != 0.0)
        goto LABEL_3;
      return result;
    case 2:
      if (*(char *)(*(_QWORD *)a2 + 31) < 0)
        v2 = *(double *)(*(_QWORD *)a2 + 16);
      else
        *(_QWORD *)&v2 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
LABEL_13:
      if (v2 == 0.0)
        return result;
      goto LABEL_3;
    case 3:
    case 4:
    case 5:
      if (*(_QWORD *)(*(_QWORD *)a2 + 8) != *(_QWORD *)(*(_QWORD *)a2 + 16))
        goto LABEL_3;
      return result;
    case 7:
      return result;
    case 8:
      if (*(_QWORD *)(*(_QWORD *)a2 + 64) == 3)
        return result;
LABEL_3:
      ++*(_QWORD *)(result + 24);
      return result;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::combine()
{
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()();
}

uint64_t turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::emit@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 __p;
  char v5;
  _QWORD v6[13];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  std::ostream::write();
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a1, &__p);
  if (v5 < 0)
    operator delete((void *)__p);
  v6[0] = *MEMORY[0x24BEDB7F0];
  v2 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[2] = v2;
  v6[3] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v8);
}

void sub_218229088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::support_type()
{
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::name()
{
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::name(void)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::save()
{
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::load()
{
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::~generic_aggregator()
{
  JUMPOUT(0x219A19A08);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182291F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218229374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182294F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218229674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::nnz(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182297F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D932890;
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0::~$_0((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D932890;
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0::~$_0((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_24D932890;
  std::__compressed_pair_elem<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21822992C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D932890;
  return std::__compressed_pair_elem<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0::~$_0(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0::~$_0((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 40);
  if (!v3)
  {
    if (v4)
    {
      v5 = a1 + 48;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2, v5);
    }
LABEL_7:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (!v4)
    goto LABEL_7;
  v5 = a2;
  a2 = a1 + 48;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2, v5);
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__compressed_pair_elem<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  unint64_t **v4;
  unint64_t *v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (unint64_t **)(a1 + 40);
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (a2 != a1)
  {
    v5 = *(unint64_t **)(a2 + 40);
    *(_QWORD *)(a1 + 45) = *(_QWORD *)(a2 + 45);
    *v4 = v5;
    v6 = *(unsigned __int8 *)(a2 + 52);
    *(_BYTE *)(a1 + 52) = v6;
    if (v6 <= 9 && ((1 << v6) & 0x33C) != 0)
    {
      v7 = *v4;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  return a1;
}

_QWORD *std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D932910;
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1::~$_1((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D932910;
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1::~$_1((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_24D932910;
  std::__compressed_pair_elem<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_218229BBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D932910;
  return std::__compressed_pair_elem<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1::~$_1(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1::~$_1((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  if (*(_BYTE *)(a2 + 12) != 7)
  {
    v3 = *(unsigned __int8 *)(result + 8);
    v4 = *(_QWORD *)(result + 40);
    if (v3)
    {
      if (v4)
      {
        v5 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 48);
        return v5();
      }
    }
    else if (v4)
    {
      v5 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 48);
      return v5();
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  if (a2 != a3)
  {
    *(_QWORD *)(a3 + 5) = *(_QWORD *)(a2 + 5);
    *(_QWORD *)a3 = *(_QWORD *)a2;
    *(_BYTE *)(a3 + 12) = 7;
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1,std::allocator<turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

_QWORD *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D932990;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D932990;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_24D932990;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_218229E00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D932990;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;

  v4 = *(unsigned __int8 *)(****(_QWORD ****)a2 + 16 * *(_QWORD *)(a2 + 8) + 12);
  v5 = *(unsigned __int8 *)(****(_QWORD ****)a3 + 16 * *(_QWORD *)(a3 + 8) + 12);
  if (v4 == 7 || v5 == 7)
  {
    *(_BYTE *)(a4 + 12) = 0;
    *(_DWORD *)(a4 + 8) = 0;
    *(_QWORD *)a4 = v4 == v5;
  }
  else
  {
    v6 = *(_QWORD *)(result + 32);
    if (!v6)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target_type()
{
}

_QWORD *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D932A20;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D932A20;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_24D932A20;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21822A084(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D932A20;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;

  v4 = *(unsigned __int8 *)(****(_QWORD ****)a2 + 16 * *(_QWORD *)(a2 + 8) + 12);
  v5 = *(unsigned __int8 *)(****(_QWORD ****)a3 + 16 * *(_QWORD *)(a3 + 8) + 12);
  if (v4 == 7 || v5 == 7)
  {
    *(_BYTE *)(a4 + 12) = 0;
    *(_DWORD *)(a4 + 8) = 0;
    *(_QWORD *)a4 = v4 != v5;
  }
  else
  {
    v6 = *(_QWORD *)(result + 32);
    if (!v6)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target_type()
{
}

_QWORD *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D932AA0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D932AA0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_24D932AA0;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21822A308(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D932AA0;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, ****(_QWORD ****)a2 + 16 * *(_QWORD *)(a2 + 8), ****(_QWORD ****)a3 + 16 * *(_QWORD *)(a3 + 8));
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target_type()
{
}

_QWORD *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D932B20;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D932B20;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_24D932B20;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21822A558(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D932B20;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (*(_BYTE *)(****(_QWORD ****)a2 + 16 * *(_QWORD *)(a2 + 8) + 12) == 7
    || *(_BYTE *)(****(_QWORD ****)a3 + 16 * *(_QWORD *)(a3 + 8) + 12) == 7)
  {
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 12) = 0;
    if ((uint64_t *)a4 != &turi::FLEX_UNDEFINED)
    {
      *(_QWORD *)(a4 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(_QWORD *)a4 = turi::FLEX_UNDEFINED;
      v4 = byte_254FF281C;
      *(_BYTE *)(a4 + 12) = byte_254FF281C;
      switch(v4)
      {
        case 2:
          v5 = *(unint64_t **)a4;
          do
            v6 = __ldaxr(v5);
          while (__stlxr(v6 + 1, v5));
          break;
        case 3:
          v8 = *(unint64_t **)a4;
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
          break;
        case 4:
          v10 = *(unint64_t **)a4;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
          break;
        case 5:
          v12 = *(unint64_t **)a4;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 + 1, v12));
          break;
        case 8:
          v14 = *(unint64_t **)a4;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
          break;
        case 9:
          v16 = *(unint64_t **)a4;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 + 1, v16));
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(result + 32);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4,std::allocator<turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D932BA0;
  return result;
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D932BA0;
}

uint64_t std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(turi::flexible_type *this@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = turi::flexible_type::contains_na(this);
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  *(_QWORD *)a2 = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

_QWORD *std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_21822A9DC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D932C20;
  return result;
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D932C20;
}

uint64_t std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(turi::flexible_type *this@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = turi::flexible_type::contains_na(this);
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  *(_QWORD *)a2 = result ^ 1;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D932CA0;
  return result;
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D932CA0;
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v2;

  v2 = *(unsigned __int8 *)(a1 + 12) == 7;
  *(_BYTE *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = v2;
}

uint64_t std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D932D20;
  return result;
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D932D20;
}

void std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v2;

  v2 = *(unsigned __int8 *)(a1 + 12) != 7;
  *(_BYTE *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = v2;
}

uint64_t std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3,std::allocator<turi::unity_sarray::missing_mask(BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

_QWORD *std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D932DA0;
  turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1::~$_1((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D932DA0;
  turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1::~$_1((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unint64_t **v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x18uLL);
  *result = &off_24D932DA0;
  result[1] = 0;
  v3 = (unint64_t **)(result + 1);
  *((_DWORD *)result + 4) = 0;
  *((_BYTE *)result + 20) = 0;
  if (result != (_QWORD *)a1)
  {
    *(_QWORD *)((char *)result + 13) = *(_QWORD *)(a1 + 13);
    *v3 = *(unint64_t **)(a1 + 8);
    v4 = *(unsigned __int8 *)(a1 + 20);
    *((_BYTE *)result + 20) = v4;
    v5 = v4 > 9;
    v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0)
    {
      v8 = *v3;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, uint64_t a2)
{
  unint64_t **v2;
  unint64_t *v3;
  BOOL v4;
  int v5;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a2 = &off_24D932DA0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = (unint64_t **)(a2 + 8);
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  if (a2 != result)
  {
    v3 = *(unint64_t **)(result + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(result + 13);
    *v2 = v3;
    LODWORD(v3) = *(unsigned __int8 *)(result + 20);
    *(_BYTE *)(a2 + 20) = (_BYTE)v3;
    v4 = v3 > 9;
    v5 = (1 << (char)v3) & 0x33C;
    if (!v4 && v5 != 0)
    {
      v7 = *v2;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1::~$_1(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1::~$_1((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(unsigned __int8 *)(a2 + 12);
  if (v3 == 7)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    if (result + 8 == a3)
      return result;
    *(_QWORD *)(a3 + 5) = *(_QWORD *)(result + 13);
    *(_QWORD *)a3 = *(_QWORD *)(result + 8);
    v3 = *(unsigned __int8 *)(result + 20);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    if (a2 == a3)
      return result;
    *(_QWORD *)(a3 + 5) = *(_QWORD *)(a2 + 5);
    *(_QWORD *)a3 = *(_QWORD *)a2;
  }
  *(_BYTE *)(a3 + 12) = v3;
  v4 = v3 > 9;
  v5 = (1 << v3) & 0x33C;
  if (!v4 && v5 != 0)
  {
    v7 = *(unint64_t **)a3;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1,std::allocator<turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0,std::allocator<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0,std::allocator<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D932E20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0,std::allocator<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D932E20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0,std::allocator<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(result + 8);
  v4 = 0xC6A4A7935BD1E995 * (*a2 ^ *(_QWORD *)(result + 16) ^ 0xC3A5C85C97CB3127);
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  *(_QWORD *)a3 = 0xC6A4A7935BD1E995 * (v4 ^ (v4 >> 47)) <= v3;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0,std::allocator<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0,std::allocator<turi::unity_sarray::make_uniform_BOOLean_array(unsigned long,float,unsigned long long,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n, const std::vector<std::string>::value_type *__x)
{
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v7;
  std::string *v8;
  uint64_t v9;
  __int128 v10;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = 3 * __n;
    v8 = &end[__n];
    v9 = 8 * v7;
    do
    {
      if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(end, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
      }
      else
      {
        v10 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
      }
      ++end;
      v9 -= 24;
    }
    while (v9);
    this->__end_ = v8;
  }
  return this;
}

void sub_21822B0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0,std::allocator<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0,std::allocator<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D932EA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0,std::allocator<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D932EA0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0,std::allocator<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v3;

  v3 = *a2 < *(_QWORD *)(result + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  *(_QWORD *)a3 = v3;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0,std::allocator<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0,std::allocator<turi::unity_sarray::make_exact_uniform_BOOLean_array(unsigned long,unsigned long,unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray::hash(unsigned long long)::$_0,std::allocator<turi::unity_sarray::hash(unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::hash(unsigned long long)::$_0,std::allocator<turi::unity_sarray::hash(unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D932F20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::hash(unsigned long long)::$_0,std::allocator<turi::unity_sarray::hash(unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D932F20;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::hash(unsigned long long)::$_0,std::allocator<turi::unity_sarray::hash(unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unint64_t v6;

  result = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v6 = 0xC6A4A7935BD1E995 * (result ^ 0xC3A5C85C97CB3127 ^ *(_QWORD *)(a1 + 8));
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  *(_QWORD *)a3 = 0xC6A4A7935BD1E995 * (v6 ^ (v6 >> 47));
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::hash(unsigned long long)::$_0,std::allocator<turi::unity_sarray::hash(unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::hash(unsigned long long)::$_0,std::allocator<turi::unity_sarray::hash(unsigned long long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t *std::set<char>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<char>::insert[abi:ne180100]<std::__tree_const_iterator<char,std::__tree_node<char,void *> *,long>>(a1, *(char **)a2, (char *)(a2 + 8));
  return a1;
}

void sub_21822B2FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<char>::insert[abi:ne180100]<std::__tree_const_iterator<char,std::__tree_node<char,void *> *,long>>(uint64_t *result, char *a2, char *a3)
{
  char *v4;
  uint64_t **v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<turi::flex_type_enum>::__emplace_hint_unique_key_args<turi::flex_type_enum,turi::flex_type_enum const&>(v5, v6, v4 + 25, v4 + 25);
      v7 = (char *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D932FA0;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D932FA0;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
  JUMPOUT(0x219A19A08);
}

void *std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  void *v2;

  v2 = operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D932FA0;
  *((_BYTE *)v2 + 8) = *(_BYTE *)(a1 + 8);
  std::set<char>::set[abi:ne180100]((uint64_t *)v2 + 2, a1 + 16);
  return v2;
}

void sub_21822B45C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D932FA0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
  return std::set<char>::set[abi:ne180100]((uint64_t *)(a2 + 16), a1 + 16);
}

void std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
}

void std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(_QWORD **a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)(a1 + 2), a1[3]);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  std::string::size_type v4;
  uint64_t v5;
  const std::string *v6;
  int v7;
  std::string::size_type v8;
  uint64_t v9;
  _QWORD *v10;
  std::string::size_type v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  std::string::size_type i;
  std::string::size_type v20;
  const std::string *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t *v27;
  void **v28;
  void **v29;
  unsigned __int8 *v30;
  int v31;
  std::string::size_type v32;
  const std::string *v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  void **v40;
  void **v41;
  unsigned __int8 *v42;
  uint64_t *j;
  uint64_t v44;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  __int128 v88;
  __int128 v89;
  int v90;
  void *__p[2];
  uint64_t v92;
  __int128 v93;
  unint64_t v94;
  char v95;
  __int128 v96;
  _BYTE v97[13];
  uint64_t v98;
  int v99;
  char v100;
  uint64_t v101;

  v4 = 0;
  v101 = *MEMORY[0x24BDAC8D0];
  v93 = 0uLL;
  v94 = 0;
  v5 = *a2;
  v6 = (const std::string *)(*a2 + 8);
  v7 = *(char *)(*a2 + 31);
  v8 = *(unsigned __int8 *)(*a2 + 31);
  v10 = (_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  while (1)
  {
    v11 = *(unsigned __int8 *)(*a2 + 31);
    if (v7 < 0)
      v11 = *(_QWORD *)(v5 + 16);
    if (v4 >= v11)
      break;
    v12 = *a2 + 8;
    if (v7 < 0)
      v12 = v6->__r_.__value_.__r.__words[0];
    if (!v9)
    {
      v4 = 0;
      break;
    }
    v13 = *(char *)(v12 + v4);
    v14 = a1 + 24;
    v15 = *(_QWORD *)(a1 + 24);
    do
    {
      v16 = *(char *)(v15 + 25);
      v17 = v16 < v13;
      if (v16 >= v13)
        v18 = (uint64_t *)v15;
      else
        v18 = (uint64_t *)(v15 + 8);
      if (!v17)
        v14 = v15;
      v15 = *v18;
    }
    while (*v18);
    if ((_QWORD *)v14 == v10 || *(char *)(v14 + 25) > v13)
      break;
    ++v4;
  }
  __p[0] = 0;
  __p[1] = 0;
  v92 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v90 = 1065353216;
  i = v4;
  v88 = 0u;
  v89 = 0u;
  if ((v8 & 0x80) != 0)
    goto LABEL_22;
LABEL_20:
  if (v4 >= v8)
  {
    if (i < v8)
      goto LABEL_72;
    goto LABEL_84;
  }
  do
  {
    v21 = v6;
    if ((char)v8 < 0)
    {
      v21 = (const std::string *)v6->__r_.__value_.__r.__words[0];
      if (!v9)
        goto LABEL_66;
    }
    else if (!v9)
    {
      goto LABEL_66;
    }
    v22 = v21->__r_.__value_.__s.__data_[v4];
    v23 = v10;
    v24 = v9;
    do
    {
      v25 = *(char *)(v24 + 25);
      v26 = v25 < v22;
      if (v25 >= v22)
        v27 = (uint64_t *)v24;
      else
        v27 = (uint64_t *)(v24 + 8);
      if (!v26)
        v23 = (_QWORD *)v24;
      v24 = *v27;
    }
    while (*v27);
    if (v23 != v10 && *((char *)v23 + 25) <= v22)
    {
      std::string::basic_string((std::string *)&v96, v6, i, v4 - i, (std::allocator<char> *)&v95);
      if (SHIBYTE(v92) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v96;
      v92 = *(_QWORD *)v97;
      if (*(_BYTE *)(a1 + 8))
      {
        if (v92 >= 0)
          v28 = (void **)((char *)__p + HIBYTE(v92));
        else
          v28 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
        if (v92 >= 0)
          v29 = __p;
        else
          v29 = (void **)__p[0];
        while (v29 != v28)
        {
          *(_BYTE *)v29 = __tolower(*(char *)v29);
          v29 = (void **)((char *)v29 + 1);
        }
      }
      turi::flexible_type::operator=<std::string>(&v98, (__int128 *)__p);
      *(_QWORD *)&v96 = &v98;
      v30 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)&v88, (unsigned __int8 *)&v98, (uint64_t)&std::piecewise_construct, (void **)&v96);
      ++*((_QWORD *)v30 + 4);
      v31 = *(char *)(v5 + 31);
      v8 = *(unsigned __int8 *)(v5 + 31);
      v9 = *v10;
      for (i = v4; ; ++i)
      {
        v32 = *(unsigned __int8 *)(v5 + 31);
        if (v31 < 0)
          v32 = *(_QWORD *)(v5 + 16);
        if (i >= v32)
        {
LABEL_64:
          v4 = i;
          goto LABEL_66;
        }
        v33 = v6;
        if (v31 < 0)
          v33 = (const std::string *)v6->__r_.__value_.__r.__words[0];
        if (!v9)
          break;
        v34 = v33->__r_.__value_.__s.__data_[i];
        v35 = v10;
        v36 = *v10;
        do
        {
          v37 = *(char *)(v36 + 25);
          v38 = v37 < v34;
          if (v37 >= v34)
            v39 = (uint64_t *)v36;
          else
            v39 = (uint64_t *)(v36 + 8);
          if (!v38)
            v35 = (_QWORD *)v36;
          v36 = *v39;
        }
        while (*v39);
        if (v35 == v10 || *((char *)v35 + 25) > v34)
          goto LABEL_64;
      }
      i = v4;
    }
LABEL_66:
    ++v4;
    if ((v8 & 0x80) == 0)
      goto LABEL_20;
LABEL_22:
    v20 = *(_QWORD *)(v5 + 16);
  }
  while (v4 < v20);
  if (i < v20)
  {
    v8 = *(_QWORD *)(v5 + 16);
LABEL_72:
    std::string::basic_string((std::string *)&v96, v6, i, v8 - i, (std::allocator<char> *)&v95);
    if (SHIBYTE(v92) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v96;
    v92 = *(_QWORD *)v97;
    if (*(_BYTE *)(a1 + 8))
    {
      if (v92 >= 0)
        v40 = (void **)((char *)__p + HIBYTE(v92));
      else
        v40 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
      if (v92 >= 0)
        v41 = __p;
      else
        v41 = (void **)__p[0];
      while (v41 != v40)
      {
        *(_BYTE *)v41 = __tolower(*(char *)v41);
        v41 = (void **)((char *)v41 + 1);
      }
    }
    turi::flexible_type::operator=<std::string>(&v98, (__int128 *)__p);
    *(_QWORD *)&v96 = &v98;
    v42 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)&v88, (unsigned __int8 *)&v98, (uint64_t)&std::piecewise_construct, (void **)&v96);
    ++*((_QWORD *)v42 + 4);
  }
LABEL_84:
  for (j = (uint64_t *)v89; j; j = (uint64_t *)*j)
  {
    v44 = j[4];
    *(_QWORD *)&v96 = 0;
    DWORD2(v96) = 0;
    BYTE12(v96) = 0;
    if (j + 2 != (uint64_t *)&v96)
    {
      *(_QWORD *)((char *)&v96 + 5) = *(uint64_t *)((char *)j + 21);
      *(_QWORD *)&v96 = j[2];
      BYTE12(v96) = *((_BYTE *)j + 28);
      if (BYTE12(v96) <= 9u && ((1 << SBYTE12(v96)) & 0x33C) != 0)
      {
        v46 = (unint64_t *)v96;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 + 1, v46));
      }
    }
    *(_QWORD *)v97 = v44;
    *(_DWORD *)&v97[8] = 0;
    v97[12] = 0;
    v48 = *((_QWORD *)&v93 + 1);
    if (*((_QWORD *)&v93 + 1) >= v94)
    {
      v51 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v93, (uint64_t *)&v96);
    }
    else
    {
      **((_QWORD **)&v93 + 1) = 0;
      *(_DWORD *)(v48 + 8) = 0;
      *(_BYTE *)(v48 + 12) = 0;
      v49 = v96;
      *(_QWORD *)(v48 + 5) = *(_QWORD *)((char *)&v96 + 5);
      *(_QWORD *)v48 = v49;
      *(_BYTE *)(v48 + 12) = BYTE12(v96);
      BYTE12(v96) = 0;
      *(_QWORD *)(v48 + 16) = 0;
      *(_DWORD *)(v48 + 24) = 0;
      *(_BYTE *)(v48 + 28) = 0;
      v50 = *(_QWORD *)v97;
      *(_QWORD *)(v48 + 21) = *(_QWORD *)&v97[5];
      *(_QWORD *)(v48 + 16) = v50;
      *(_BYTE *)(v48 + 28) = v97[12];
      v97[12] = 0;
      v51 = v48 + 32;
    }
    *((_QWORD *)&v93 + 1) = v51;
    std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v96);
  }
  *(uint64_t *)((char *)a3 + 5) = 0;
  *a3 = 0;
  *((_BYTE *)a3 + 12) = 5;
  v52 = operator new();
  *(_QWORD *)v52 = 0;
  *(_QWORD *)(v52 + 8) = 0;
  *(_QWORD *)(v52 + 16) = 0;
  *(_QWORD *)(v52 + 24) = 0;
  *a3 = v52;
  *(_QWORD *)v52 = 1;
  if (*(_QWORD *)v52 != 1)
  {
    v53 = (_QWORD *)operator new();
    v54 = *(uint64_t **)(v52 + 8);
    *v53 = *(_QWORD *)v52;
    v53[2] = 0;
    v53[3] = 0;
    v53[1] = 0;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v53 + 1, v54, *(uint64_t **)(v52 + 16), (uint64_t)(*(_QWORD *)(v52 + 16) - (_QWORD)v54) >> 5);
    *a3 = (uint64_t)v53;
    *v53 = 1;
    do
    {
      v55 = __ldaxr((unint64_t *)v52);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, (unint64_t *)v52));
    if (!v56)
    {
      *(_QWORD *)&v96 = v52 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
      MEMORY[0x219A19A08](v52, 0x1020C405E66F15BLL);
    }
  }
  v57 = *a3;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(*a3 + 8));
  *(_OWORD *)(v57 + 8) = v93;
  *(_QWORD *)(v57 + 24) = v94;
  v93 = 0uLL;
  v94 = 0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)&v88);
  switch(v100)
  {
    case 2:
      v58 = (unint64_t *)v98;
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        v61 = v98;
        if (v98)
        {
          if (*(char *)(v98 + 31) < 0)
            operator delete(*(void **)(v98 + 8));
          v62 = v61;
          v63 = 0x1012C404EF22A49;
          goto LABEL_142;
        }
      }
      break;
    case 3:
      v64 = (unint64_t *)v98;
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        v67 = v98;
        if (v98)
        {
          v68 = *(void **)(v98 + 8);
          if (v68)
          {
            *(_QWORD *)(v98 + 16) = v68;
            operator delete(v68);
          }
          v62 = v67;
          v63 = 0x1080C409938AC02;
          goto LABEL_142;
        }
      }
      break;
    case 4:
      v69 = (unint64_t *)v98;
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        v72 = v98;
        if (v98)
        {
          *(_QWORD *)&v88 = v98 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
          goto LABEL_126;
        }
      }
      break;
    case 5:
      v73 = (unint64_t *)v98;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        v72 = v98;
        if (v98)
        {
          *(_QWORD *)&v88 = v98 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
LABEL_126:
          v62 = v72;
          v63 = 0x1020C405E66F15BLL;
          goto LABEL_142;
        }
      }
      break;
    case 8:
      v76 = (unint64_t *)v98;
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        v79 = v98;
        if (v98)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v98 + 16));
          v62 = v79;
          v80 = -235920773;
          goto LABEL_141;
        }
      }
      break;
    case 9:
      v81 = (unint64_t *)v98;
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (!v83)
      {
        v84 = v98;
        if (v98)
        {
          v85 = *(void **)(v98 + 48);
          if (v85)
          {
            *(_QWORD *)(v98 + 56) = v85;
            operator delete(v85);
          }
          v86 = *(void **)(v84 + 24);
          if (v86)
          {
            *(_QWORD *)(v84 + 32) = v86;
            operator delete(v86);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v84 + 8);
          v62 = v84;
          v80 = 2071181815;
LABEL_141:
          v63 = v80 | 0x1030C4000000000;
LABEL_142:
          MEMORY[0x219A19A08](v62, v63);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(v92) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v88 = &v93;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
}

void sub_21822BC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;

  MEMORY[0x219A19A08](v29, 0x1020C405E66F15BLL);
  do
  {
    v32 = __ldaxr(v28);
    v33 = v32 - 1;
  }
  while (__stlxr(v33, v28));
  if (!v33)
  {
    v34 = *a10;
    if (*a10)
    {
      a28 = v34 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
      MEMORY[0x219A19A08](v34, 0x1020C405E66F15BLL);
    }
    *a10 = 0;
  }
  *a10 = 0;
  *((_DWORD *)a10 + 2) = 0;
  *((_BYTE *)a10 + 12) = 0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)&a11);
  switch(*(_BYTE *)(v30 - 100))
  {
    case 2:
      turi::gl_sarray::clip((unint64_t **)(v30 - 112));
      goto LABEL_28;
    case 3:
      turi::gl_sarray::clip((unint64_t **)(v30 - 112));
      goto LABEL_28;
    case 4:
      v35 = *(unint64_t **)(v30 - 112);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_28;
      v38 = *(_QWORD *)(v30 - 112);
      if (!v38)
        goto LABEL_28;
      a11 = (char *)(v38 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
      goto LABEL_20;
    case 5:
      v39 = *(unint64_t **)(v30 - 112);
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_28;
      v38 = *(_QWORD *)(v30 - 112);
      if (!v38)
        goto LABEL_28;
      a11 = (char *)(v38 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
LABEL_20:
      v42 = v38;
      v43 = 0x1020C405E66F15BLL;
      break;
    case 8:
      v44 = *(unint64_t **)(v30 - 112);
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (v46)
        goto LABEL_28;
      v47 = *(_QWORD *)(v30 - 112);
      if (!v47)
        goto LABEL_28;
      boost::detail::shared_count::~shared_count((unsigned int **)(v47 + 16));
      v42 = v47;
      v43 = 0x1030C40F1F0227BLL;
      break;
    case 9:
      std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()((unint64_t **)(v30 - 112));
      goto LABEL_28;
    default:
      goto LABEL_28;
  }
  MEMORY[0x219A19A08](v42, v43);
LABEL_28:
  if (a22 < 0)
    operator delete(__p);
  a11 = &a24;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D933020;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D933020;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  std::string *p_p;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::string::size_type v16;
  int v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  unsigned int v21;
  int v22;
  std::string *v23;
  unsigned int v24;
  int v25;
  std::string::size_type size;
  std::string *v27;
  unsigned int v28;
  int v29;
  std::string *v30;
  unsigned int v31;
  std::string::size_type v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::string *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *i;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  std::string *v57;
  uint64_t v58;
  std::string *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  std::string v77;
  std::string v78;
  uint64_t v79;
  _QWORD v80[6];
  uint64_t v81;
  unint64_t v82;
  _QWORD v83[4];
  int64x2_t v84;
  __int128 v85;
  __int128 v86;
  int64x2_t v87;
  __int128 v88;
  unint64_t v89;
  std::string::size_type v90;
  std::string::size_type v91;
  std::string __p;
  __int128 v93;
  __int128 v94;
  int v95;
  _QWORD v96[4];
  int v97;
  _BYTE v98[13];
  _BYTE v99[13];
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 12) == 7)
  {
    *a3 = 0;
    *((_DWORD *)a3 + 2) = 0;
    *((_BYTE *)a3 + 12) = 0;
    if (a2 != a3)
    {
      *(uint64_t *)((char *)a3 + 5) = *(uint64_t *)((char *)a2 + 5);
      *a3 = *a2;
      *((_BYTE *)a3 + 12) = 7;
    }
    return result;
  }
  v4 = result;
  memset(v96, 0, sizeof(v96));
  v97 = 1065353216;
  v93 = 0u;
  v94 = 0u;
  v95 = 1065353216;
  memset(&__p, 0, sizeof(__p));
  if (!*(_BYTE *)(result + 8))
    goto LABEL_14;
  v5 = *a2;
  MEMORY[0x219A19828](&v85);
  v8 = *(char **)(v5 + 8);
  v7 = v5 + 8;
  v6 = v8;
  v9 = *(char *)(v7 + 23);
  if (v9 >= 0)
    v10 = (char *)v7;
  else
    v10 = v6;
  v11 = *(_QWORD *)(v7 + 8);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(v7 + 23);
  std::string::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>>(&v78, v10, (std::locale *)&v85, &v10[v11]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v78;
  *((_BYTE *)&v78.__r_.__value_.__s + 23) = 0;
  v78.__r_.__value_.__s.__data_[0] = 0;
  std::locale::~locale((std::locale *)&v85);
  if (*(_BYTE *)(v4 + 8))
    p_p = &__p;
  else
LABEL_14:
    p_p = (std::string *)(*a2 + 8);
  v13 = 0;
  v90 = 0;
  v91 = 0;
  v88 = 0uLL;
  v89 = 0;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  memset(v83, 0, sizeof(v83));
  v81 = 0;
  v82 = 0;
  v14 = MEMORY[0x24BDAC740];
  while (1)
  {
    v15 = *(_QWORD *)(v4 + 16);
    if (v13 < v15)
      break;
LABEL_55:
    v81 = 0;
    v82 = 0xD0421383A5FBCD94;
    if (v15)
    {
      v34 = 0;
      v35 = v84.i64[0];
      v36 = v83[1];
      v37 = 0xD0421383A5FBCD94;
      v38 = v87.i64[0];
      v39 = *((_QWORD *)&v85 + 1);
      do
      {
        v40 = p_p;
        if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0)
          v40 = (std::string *)p_p->__r_.__value_.__r.__words[0];
        v41 = *(_QWORD *)(*(_QWORD *)(v39 + ((v38 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v38 & 0x1FF));
        v42 = *(_QWORD *)(*(_QWORD *)(v36 + ((v35 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v35 & 0x1FF)) - v41;
        v43 = (uint64_t *)((char *)v40 + v41);
        if (v42 < 0x10)
        {
          v44 = 0xC3A5C85C97CB3127;
          v45 = 0xB492B66FBE98F273;
        }
        else
        {
          v44 = *v43;
          v45 = v43[1] - 0x3C5A37A36834CED9;
          v43 += 2;
          v42 -= 16;
        }
        v46 = turi::cityhash_local::CityHash128WithSeed(v43, v42, v44, v45);
        v47 = 5
            * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v37) | ((0x87C37B91114253D5 * v37) >> 31))) ^ 0x5B73FF027F14F66ALL, 27)- 0x36BC04F331BA48C5;
        v48 = 5
            * (v47
             + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v34) | ((unint64_t)(0x4CF5AD432745937FLL * v34) >> 33))) ^ 0x5B73FF027F14F66ALL, 31))+ 944331445;
        v34 = 5
            * (__ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v49) | ((0x87C37B91114253D5 * v49) >> 31))) ^ v47, 27)+ v48)+ 1390208809;
        v37 = 5 * (v34 + __ROR8__((0xCF853D45B173E5ABLL * v46) ^ v48, 31)) + 944331445;
        v81 = v34;
        v82 = v37;
        ++v38;
        ++v35;
        --v15;
      }
      while (v15);
    }
    if (!std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::find<turi::hash_value>(v96, (unint64_t *)&v81))
    {
      std::pair<std::deque<unsigned long>,std::deque<unsigned long>>::pair[abi:ne180100]<std::deque<unsigned long>&,std::deque<unsigned long>&,0>((uint64_t)&v78, &v85, v83);
      v74 = (unint64_t *)&v81;
      v50 = std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>((uint64_t)v96, (unint64_t *)&v81, (uint64_t)&std::piecewise_construct, &v74);
      std::deque<unsigned long>::__move_assign(v50 + 4, (uint64_t)&v78);
      std::deque<unsigned long>::__move_assign(v50 + 10, (uint64_t)v80);
      std::deque<unsigned long>::~deque[abi:ne180100](v80);
      std::deque<unsigned long>::~deque[abi:ne180100](&v78);
    }
    v74 = (unint64_t *)&v81;
    v51 = std::__hash_table<std::__hash_value_type<turi::hash_value,unsigned long>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,unsigned long>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,unsigned long>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,unsigned long>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>((uint64_t)&v93, (unint64_t *)&v81, (uint64_t)&std::piecewise_construct, &v74);
    ++v51[4];
    v87 = vaddq_s64(v87, (int64x2_t)xmmword_2186CA040);
    if (v87.i64[0] >= 0x400uLL)
    {
      operator delete(**((void ***)&v85 + 1));
      *((_QWORD *)&v85 + 1) += 8;
      v87.i64[0] -= 512;
    }
    v84 = vaddq_s64(v84, (int64x2_t)xmmword_2186CA040);
    if (v84.i64[0] >= 0x400uLL)
    {
      operator delete(*(void **)v83[1]);
      v83[1] += 8;
      v84.i64[0] -= 512;
    }
    v13 = v87.u64[1];
  }
  v16 = v91;
  while (1)
  {
    while (1)
    {
      v17 = SHIBYTE(p_p->__r_.__value_.__r.__words[2]);
      v18 = HIBYTE(p_p->__r_.__value_.__r.__words[2]);
      v19 = v17 < 0 ? p_p->__r_.__value_.__l.__size_ : HIBYTE(p_p->__r_.__value_.__r.__words[2]);
      if (v16 >= v19)
        break;
      v20 = p_p;
      if (v17 < 0)
        v20 = (std::string *)p_p->__r_.__value_.__r.__words[0];
      v21 = v20->__r_.__value_.__s.__data_[v16];
      if ((v21 & 0x80000000) != 0)
      {
        v22 = __maskrune(v21, 0x2000uLL);
        v16 = v91;
        if (v22)
          goto LABEL_32;
      }
      else if ((*(_DWORD *)(v14 + 4 * v21 + 60) & 0x2000) != 0)
      {
        goto LABEL_32;
      }
      v23 = p_p;
      if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0)
        v23 = (std::string *)p_p->__r_.__value_.__r.__words[0];
      v24 = v23->__r_.__value_.__s.__data_[v16];
      if ((v24 & 0x80000000) == 0)
      {
        if ((*(_DWORD *)(v14 + 4 * v24 + 60) & 0x4000) != 0)
          goto LABEL_32;
LABEL_34:
        v18 = HIBYTE(p_p->__r_.__value_.__r.__words[2]);
        break;
      }
      v25 = __maskrune(v24, 0x4000uLL);
      v16 = v91;
      if (!v25)
        goto LABEL_34;
LABEL_32:
      v91 = ++v16;
    }
    size = v18;
    if ((v18 & 0x80) != 0)
      size = p_p->__r_.__value_.__l.__size_;
    if (v16 >= size)
      break;
    do
    {
      v90 = v16;
      v27 = p_p;
      if ((v18 & 0x80) != 0)
        v27 = (std::string *)p_p->__r_.__value_.__r.__words[0];
      v28 = v27->__r_.__value_.__s.__data_[v16];
      if ((v28 & 0x80000000) != 0)
        v29 = __maskrune(v28, 0x2000uLL);
      else
        v29 = *(_DWORD *)(v14 + 4 * v28 + 60) & 0x2000;
      if (v29)
        break;
      v30 = p_p;
      if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0)
        v30 = (std::string *)p_p->__r_.__value_.__r.__words[0];
      v31 = v30->__r_.__value_.__s.__data_[v90];
      if ((v31 & 0x80000000) != 0 ? __maskrune(v31, 0x4000uLL) : *(_DWORD *)(v14 + 4 * v31 + 60) & 0x4000)
        break;
      LOBYTE(v18) = *((_BYTE *)&p_p->__r_.__value_.__s + 23);
      v33 = (char)v18 < 0 ? p_p->__r_.__value_.__l.__size_ : HIBYTE(p_p->__r_.__value_.__r.__words[2]);
      v16 = v90 + 1;
    }
    while (v90 < v33);
    std::deque<unsigned long>::push_back(&v85, &v91);
    std::deque<unsigned long>::push_back(v83, &v90);
    v16 = v90 + 1;
    v91 = v90 + 1;
    v15 = *(_QWORD *)(v4 + 16);
    if (v87.i64[1] >= v15)
      goto LABEL_55;
  }
  memset(&v77, 0, sizeof(v77));
  for (i = (_QWORD *)v94; i; i = (_QWORD *)*i)
  {
    v74 = i + 2;
    v53 = std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>((uint64_t)v96, i + 2, (uint64_t)&std::piecewise_construct, &v74);
    std::deque<unsigned long>::deque((uint64_t)&v78, v53 + 4);
    *(_QWORD *)v98 = i + 2;
    v54 = std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>((uint64_t)v96, i + 2, (uint64_t)&std::piecewise_construct, (_QWORD **)v98);
    std::deque<unsigned long>::deque((uint64_t)&v74, v54 + 10);
    std::string::resize(&v77, 0, 32);
    if (*(_QWORD *)(v4 + 16) == 1)
    {
      v55 = 0;
    }
    else
    {
      v56 = 0;
      do
      {
        v57 = p_p;
        if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0)
          v57 = (std::string *)p_p->__r_.__value_.__r.__words[0];
        v58 = *(_QWORD *)(*(_QWORD *)(v78.__r_.__value_.__l.__size_ + (((v56 + v79) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v56 + v79) & 0x1FF));
        std::string::append(&v77, (const std::string::value_type *)v57 + v58, *(_QWORD *)(*(_QWORD *)(v75 + (((v56 + v76) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v56 + v76) & 0x1FF)) - v58);
        std::string::append(&v77, " ", 1uLL);
        ++v56;
        v55 = *(_QWORD *)(v4 + 16) - 1;
      }
      while (v56 < v55);
    }
    v59 = p_p;
    if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0)
      v59 = (std::string *)p_p->__r_.__value_.__r.__words[0];
    v60 = *(_QWORD *)(*(_QWORD *)(v75 + (((v76 + v55) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v76 + v55) & 0x1FF));
    v61 = *(_QWORD *)(*(_QWORD *)(v78.__r_.__value_.__l.__size_ + (((v79 + v55) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((v79 + v55) & 0x1FF));
    std::string::append(&v77, (const std::string::value_type *)v59 + v61, v60 - v61);
    v62 = i[4];
    turi::flexible_type::flexible_type<std::string>((uint64_t)v98, (__int128 *)&v77);
    *(_QWORD *)v99 = v62;
    *(_DWORD *)&v99[8] = 0;
    v99[12] = 0;
    v63 = *((_QWORD *)&v88 + 1);
    if (*((_QWORD *)&v88 + 1) >= v89)
    {
      v66 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v88, (uint64_t *)v98);
    }
    else
    {
      **((_QWORD **)&v88 + 1) = 0;
      *(_DWORD *)(v63 + 8) = 0;
      *(_BYTE *)(v63 + 12) = 0;
      v64 = *(_QWORD *)v98;
      *(_QWORD *)(v63 + 5) = *(_QWORD *)&v98[5];
      *(_QWORD *)v63 = v64;
      *(_BYTE *)(v63 + 12) = v98[12];
      v98[12] = 0;
      *(_QWORD *)(v63 + 16) = 0;
      *(_DWORD *)(v63 + 24) = 0;
      *(_BYTE *)(v63 + 28) = 0;
      v65 = *(_QWORD *)v99;
      *(_QWORD *)(v63 + 21) = *(_QWORD *)&v99[5];
      *(_QWORD *)(v63 + 16) = v65;
      *(_BYTE *)(v63 + 28) = v99[12];
      v99[12] = 0;
      v66 = v63 + 32;
    }
    *((_QWORD *)&v88 + 1) = v66;
    std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v98);
    std::deque<unsigned long>::~deque[abi:ne180100](&v74);
    std::deque<unsigned long>::~deque[abi:ne180100](&v78);
  }
  *(uint64_t *)((char *)a3 + 5) = 0;
  *a3 = 0;
  *((_BYTE *)a3 + 12) = 5;
  v67 = operator new();
  *(_QWORD *)v67 = 0;
  *(_QWORD *)(v67 + 8) = 0;
  *(_QWORD *)(v67 + 16) = 0;
  *(_QWORD *)(v67 + 24) = 0;
  *a3 = v67;
  *(_QWORD *)v67 = 1;
  if (*(_QWORD *)v67 != 1)
  {
    v68 = (_QWORD *)operator new();
    v69 = *(uint64_t **)(v67 + 8);
    *v68 = *(_QWORD *)v67;
    v68[2] = 0;
    v68[3] = 0;
    v68[1] = 0;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v68 + 1, v69, *(uint64_t **)(v67 + 16), (uint64_t)(*(_QWORD *)(v67 + 16) - (_QWORD)v69) >> 5);
    *a3 = (uint64_t)v68;
    *v68 = 1;
    do
    {
      v70 = __ldaxr((unint64_t *)v67);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, (unint64_t *)v67));
    if (!v71)
    {
      v78.__r_.__value_.__r.__words[0] = v67 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      MEMORY[0x219A19A08](v67, 0x1020C405E66F15BLL);
    }
  }
  v72 = *a3;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(*a3 + 8));
  *(_OWORD *)(v72 + 8) = v88;
  *(_QWORD *)(v72 + 24) = v89;
  v88 = 0uLL;
  v89 = 0;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  std::deque<unsigned long>::~deque[abi:ne180100](v83);
  std::deque<unsigned long>::~deque[abi:ne180100](&v85);
  v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)&v93);
  return std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::~__hash_table((uint64_t)v96);
}

void sub_21822C8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t *v63;
  unint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;

  v67 = v63;
  MEMORY[0x219A19A08](v65, 0x1020C405E66F15BLL);
  do
  {
    v69 = __ldaxr(v64);
    v70 = v69 - 1;
  }
  while (__stlxr(v70, v64));
  if (!v70)
  {
    v71 = *v67;
    if (*v67)
    {
      a26 = (char *)(v71 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
      MEMORY[0x219A19A08](v71, 0x1020C405E66F15BLL);
    }
    *v67 = 0;
  }
  *v67 = 0;
  *((_DWORD *)v67 + 2) = 0;
  *((_BYTE *)v67 + 12) = 0;
  if (a25 < 0)
    operator delete(__p);
  std::deque<unsigned long>::~deque[abi:ne180100](&a40);
  std::deque<unsigned long>::~deque[abi:ne180100](&a46);
  a26 = &a52;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (a63 < 0)
    operator delete(a58);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(v66 - 240);
  std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::~__hash_table(v66 - 192);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::deque<unsigned long>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<unsigned long>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21822CDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::find<turi::hash_value>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (a2[1] == result[3] && v3 == result[2])
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::pair<std::deque<unsigned long>,std::deque<unsigned long>>::pair[abi:ne180100]<std::deque<unsigned long>&,std::deque<unsigned long>&,0>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;

  v5 = std::deque<unsigned long>::deque(a1, a2);
  std::deque<unsigned long>::deque(v5 + 48, a3);
  return a1;
}

void sub_21822CF2C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::deque<unsigned long>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (a2[1] == v11[3] && v7 == v11[2])
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x80uLL);
  *v11 = 0;
  v11[1] = v7;
  v15 = (*a4)[1];
  v11[2] = **a4;
  v11[3] = v15;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 5) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v11 = *v23;
LABEL_42:
    *v23 = v11;
    goto LABEL_43;
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v22 + 8 * v4) = v14;
  if (*v11)
  {
    v24 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8)
        v24 %= v8;
    }
    else
    {
      v24 &= v8 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_21822D184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::deque<unsigned long>::~deque[abi:ne180100](__p + 10);
    std::deque<unsigned long>::~deque[abi:ne180100](__p + 4);
  }
  if (__p)
    operator delete(__p);
}

uint64_t std::deque<unsigned long>::__move_assign(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 256;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 512;
LABEL_7:
    a1[4] = v8;
  }
  std::deque<unsigned long>::shrink_to_fit(a1);
  result = std::__split_buffer<unsigned long *>::operator=((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void std::deque<unsigned long>::shrink_to_fit(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    std::deque<std::exception_ptr>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 0);
    std::deque<std::exception_ptr>::__maybe_remove_back_spare[abi:ne180100](a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  std::__split_buffer<unsigned long *>::shrink_to_fit((uint64_t)a1);
}

void std::__split_buffer<unsigned long *>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t std::__split_buffer<unsigned long *>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  std::__split_buffer<unsigned long *>::shrink_to_fit(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<turi::hash_value,unsigned long>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,unsigned long>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,unsigned long>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,unsigned long>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (a2[1] == i[3] && v7 == i[2])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = (*a4)[1];
  i[2] = **a4;
  i[3] = v14;
  i[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_42:
    *v22 = i;
    goto LABEL_43;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_21822D63C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned long>::deque(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char **)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    v8 = &(*v7)[8 * (v4 & 0x1FF)];
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 9));
    v11 = (char *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
  }
  std::deque<unsigned long>::__append<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,0>((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_21822D6E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<unsigned long>::__append<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,0>(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  return std::deque<unsigned long>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>>(a1, a2, a3, v5);
}

_QWORD *std::deque<unsigned long>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>>(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD v23[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 6) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<unsigned long>::__add_back_capacity(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 8 * (v11 & 0x1FF);
  v23[0] = v8 + 8 * (v11 >> 9);
  v23[1] = v14;
  result = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100]((uint64_t)v23, a4);
  while (v14 != v16)
  {
    v17 = (_QWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_QWORD *)v14 == v17)
    {
      v17 = (_QWORD *)v14;
    }
    else
    {
      v18 = *a2;
      v19 = (_QWORD *)v14;
      do
      {
        v20 = *(_QWORD *)a3;
        a3 += 8;
        *v19++ = v20;
        if (a3 - v18 == 4096)
        {
          v21 = a2[1];
          ++a2;
          v18 = v21;
          a3 = v21;
        }
      }
      while (v19 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 3;
    if (v13 == result)
      break;
    v22 = v13[1];
    ++v13;
    v14 = v22;
  }
  return result;
}

void std::deque<unsigned long>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<char *>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<char *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<char *>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_21822DD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3);
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

uint64_t std::deque<unsigned long>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::deque<unsigned long>::~deque[abi:ne180100](v2 + 10);
      std::deque<unsigned long>::~deque[abi:ne180100](v2 + 4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__function::__func<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D9330A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D9330A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  std::string *p_p;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string *v18;
  unsigned int v19;
  int v20;
  std::string *v21;
  unsigned int v22;
  int v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::string *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *i;
  unint64_t v43;
  std::string *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  std::string v57;
  std::string v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  std::locale v63[2];
  __int128 v64;
  unsigned __int128 v65;
  __int128 v66;
  unint64_t v67;
  std::string::size_type v68;
  std::string __p;
  __int128 v70;
  __int128 v71;
  int v72;
  _BYTE v73[13];
  _BYTE v74[13];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 12) == 7)
  {
    *a3 = 0;
    *((_DWORD *)a3 + 2) = 0;
    *((_BYTE *)a3 + 12) = 0;
    if (a2 != a3)
    {
      *(uint64_t *)((char *)a3 + 5) = *(uint64_t *)((char *)a2 + 5);
      *a3 = *a2;
      *((_BYTE *)a3 + 12) = 7;
    }
    return result;
  }
  v4 = result;
  v70 = 0u;
  v71 = 0u;
  v72 = 1065353216;
  memset(&__p, 0, sizeof(__p));
  if (!*(_BYTE *)(result + 8))
    goto LABEL_14;
  v5 = *a2;
  MEMORY[0x219A19828](v63);
  v8 = *(char **)(v5 + 8);
  v7 = v5 + 8;
  v6 = v8;
  v9 = *(char *)(v7 + 23);
  if (v9 >= 0)
    v10 = (char *)v7;
  else
    v10 = v6;
  v11 = *(_QWORD *)(v7 + 8);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(v7 + 23);
  std::string::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>>(&v58, v10, v63, &v10[v11]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v58;
  *((_BYTE *)&v58.__r_.__value_.__s + 23) = 0;
  v58.__r_.__value_.__s.__data_[0] = 0;
  std::locale::~locale(v63);
  if (*(_BYTE *)(v4 + 8))
    p_p = &__p;
  else
LABEL_14:
    p_p = (std::string *)(*a2 + 8);
  v13 = 0;
  v68 = 0;
  v66 = 0uLL;
  v14 = MEMORY[0x24BDAC740];
  v67 = 0;
  v64 = 0u;
  v65 = 0u;
  *(_OWORD *)&v63[0].__locale_ = 0u;
  v61 = 0;
  v62 = 0;
  while (1)
  {
    v15 = *(_QWORD *)(v4 + 16);
    if (v13 < v15)
      break;
LABEL_42:
    v61 = 0;
    v62 = 0xD0421383A5FBCD94;
    if (v15)
    {
      v25 = 0;
      v26 = 0xD0421383A5FBCD94;
      v27 = v65;
      do
      {
        v28 = p_p;
        if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0)
          v28 = (std::string *)p_p->__r_.__value_.__r.__words[0];
        v29 = v28->__r_.__value_.__s.__data_[*(_QWORD *)(*(_QWORD *)((char *)v63[1].__locale_
                                                                                    + ((v27 >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                        + 8 * (v27 & 0x1FF))];
        v30 = (0x9AE16A3B2F90404FLL * (v29 | (v29 << 8))) ^ (0xE9721725F2CC49CLL * v29 - 0x3C5A37A36834CED9);
        v31 = 0x9AE16A3B2F90404FLL * (v30 ^ (v30 >> 47));
        v32 = 0x9DDFEA08EB382D69
            * ((v31 - 0x6D8ED9027DD26057) ^ ((0x9DDFEA08EB382D69
                                              * ((v31 - 0x6D8ED9027DD26057) ^ 0xFBF3895D8B822A7ALL)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v31 - 0x6D8ED9027DD26057) ^ 0xFBF3895D8B822A7ALL)));
        v33 = 0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47));
        v34 = 0x9DDFEA08EB382D69
            * ((v31 - 0x719B4FA4F25035DDLL) ^ ((v31 - 0x719B4FA4F25035DDLL) >> 47) ^ 0xB492B66FBE98F273);
        v35 = (0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69 * (v34 ^ (v34 >> 47) ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                                      * (v34 ^ (v34 >> 47) ^ 0xB492B66FBE98F273)) >> 47))) ^ v33;
        v36 = 0x9DDFEA08EB382D69 * (v33 ^ ((0x9DDFEA08EB382D69 * v35) >> 47) ^ (0x9DDFEA08EB382D69 * v35));
        v37 = 5
            * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v26) | ((0x87C37B91114253D5 * v26) >> 31))) ^ 0x5B73FF027F14F66ALL, 27)- 0x36BC04F331BA48C5;
        v38 = 5
            * (v37
             + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v25) | ((unint64_t)(0x4CF5AD432745937FLL * v25) >> 33))) ^ 0x5B73FF027F14F66ALL, 31))+ 944331445;
        v25 = 5
            * (__ROR8__((0x4CF5AD432745937FLL* ((0x3511A6BA00000000 * (v36 ^ (v36 >> 47))) | ((0x10B828A79A88D35DLL * (v36 ^ (v36 >> 47))) >> 31))) ^ v37, 27)+ v38)+ 1390208809;
        v26 = 5 * (v25 + __ROR8__((0xCF853D45B173E5ABLL * v35) ^ v38, 31)) + 944331445;
        v61 = v25;
        v62 = v26;
        ++v27;
        --v15;
      }
      while (v15);
    }
    if (std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,std::deque<unsigned long>>>>>::find<turi::hash_value>(&v70, (unint64_t *)&v61))
    {
      *(_QWORD *)v73 = &v61;
      v39 = std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>((uint64_t)&v70, (unint64_t *)&v61, (uint64_t)&std::piecewise_construct, (_QWORD **)v73);
      ++v39[10];
    }
    else
    {
      std::deque<unsigned long>::deque((uint64_t)&v58, v63);
      v60 = 1;
      *(_QWORD *)v73 = &v61;
      v40 = std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>((uint64_t)&v70, (unint64_t *)&v61, (uint64_t)&std::piecewise_construct, (_QWORD **)v73);
      std::deque<unsigned long>::__move_assign(v40 + 4, (uint64_t)&v58);
      v40[10] = v60;
      std::deque<unsigned long>::~deque[abi:ne180100](&v58);
      v14 = MEMORY[0x24BDAC740];
    }
    v13 = *((_QWORD *)&v65 + 1) - 1;
    v41 = v65 + 1;
    v65 = __PAIR128__(*((unint64_t *)&v65 + 1), (uint64_t)v65 + 1) + __PAIR128__(-1, 0);
    if (v41 >= 0x400)
    {
      operator delete(*(void **)v63[1].__locale_);
      v63[1].__locale_ = (std::locale::__imp *)((char *)v63[1].__locale_ + 8);
      *(_QWORD *)&v65 = v65 - 512;
      v13 = *((_QWORD *)&v65 + 1);
    }
  }
  v16 = v68;
  while (1)
  {
    while (1)
    {
      v17 = SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0
          ? p_p->__r_.__value_.__l.__size_
          : HIBYTE(p_p->__r_.__value_.__r.__words[2]);
      if (v16 >= v17)
        break;
      v18 = p_p;
      if ((*((_BYTE *)&p_p->__r_.__value_.__s + 23) & 0x80) != 0)
        v18 = (std::string *)p_p->__r_.__value_.__r.__words[0];
      v19 = v18->__r_.__value_.__s.__data_[v16];
      if ((v19 & 0x80000000) != 0)
      {
        v20 = __maskrune(v19, 0x2000uLL);
        v16 = v68;
        if (v20)
          goto LABEL_35;
      }
      else if ((*(_DWORD *)(v14 + 4 * v19 + 60) & 0x2000) != 0)
      {
        goto LABEL_35;
      }
      v21 = p_p;
      if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0)
        v21 = (std::string *)p_p->__r_.__value_.__r.__words[0];
      v22 = v21->__r_.__value_.__s.__data_[v16];
      if ((v22 & 0x80000000) != 0)
        v23 = __maskrune(v22, 0x4000uLL);
      else
        v23 = *(_DWORD *)(v14 + 4 * v22 + 60) & 0x4000;
      if (!v23)
      {
        v16 = v68;
        break;
      }
      v16 = v68;
      if (!*(_BYTE *)(v4 + 9))
        break;
LABEL_35:
      v68 = ++v16;
    }
    v24 = SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0
        ? p_p->__r_.__value_.__l.__size_
        : HIBYTE(p_p->__r_.__value_.__r.__words[2]);
    if (v16 >= v24)
      break;
    std::deque<unsigned long>::push_back(v63, &v68);
    v16 = ++v68;
    v15 = *(_QWORD *)(v4 + 16);
    if (*((_QWORD *)&v65 + 1) >= v15)
      goto LABEL_42;
  }
  memset(&v57, 0, sizeof(v57));
  for (i = (_QWORD *)v71; i; i = (_QWORD *)*i)
  {
    std::deque<unsigned long>::deque((uint64_t)&v58, i + 4);
    std::string::resize(&v57, 0, 32);
    if (*(_QWORD *)(v4 + 16))
    {
      v43 = 0;
      do
      {
        v44 = p_p;
        if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0)
          v44 = (std::string *)p_p->__r_.__value_.__r.__words[0];
        std::string::append(&v57, (const std::string::value_type *)v44+ *(_QWORD *)(*(_QWORD *)(v58.__r_.__value_.__l.__size_ + (((v43 + v59) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v43 + v59) & 0x1FF)), 1uLL);
        ++v43;
      }
      while (v43 < *(_QWORD *)(v4 + 16));
    }
    v45 = i[10];
    turi::flexible_type::flexible_type<std::string>((uint64_t)v73, (__int128 *)&v57);
    *(_QWORD *)v74 = v45;
    *(_DWORD *)&v74[8] = 0;
    v74[12] = 0;
    v46 = *((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1) >= v67)
    {
      v49 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v66, (uint64_t *)v73);
    }
    else
    {
      **((_QWORD **)&v66 + 1) = 0;
      *(_DWORD *)(v46 + 8) = 0;
      *(_BYTE *)(v46 + 12) = 0;
      v47 = *(_QWORD *)v73;
      *(_QWORD *)(v46 + 5) = *(_QWORD *)&v73[5];
      *(_QWORD *)v46 = v47;
      *(_BYTE *)(v46 + 12) = v73[12];
      v73[12] = 0;
      *(_QWORD *)(v46 + 16) = 0;
      *(_DWORD *)(v46 + 24) = 0;
      *(_BYTE *)(v46 + 28) = 0;
      v48 = *(_QWORD *)v74;
      *(_QWORD *)(v46 + 21) = *(_QWORD *)&v74[5];
      *(_QWORD *)(v46 + 16) = v48;
      *(_BYTE *)(v46 + 28) = v74[12];
      v74[12] = 0;
      v49 = v46 + 32;
    }
    *((_QWORD *)&v66 + 1) = v49;
    std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v73);
    std::deque<unsigned long>::~deque[abi:ne180100](&v58);
  }
  *(uint64_t *)((char *)a3 + 5) = 0;
  *a3 = 0;
  *((_BYTE *)a3 + 12) = 5;
  v50 = operator new();
  *(_QWORD *)v50 = 0;
  *(_QWORD *)(v50 + 8) = 0;
  *(_QWORD *)(v50 + 16) = 0;
  *(_QWORD *)(v50 + 24) = 0;
  *a3 = v50;
  *(_QWORD *)v50 = 1;
  if (*(_QWORD *)v50 != 1)
  {
    v51 = (_QWORD *)operator new();
    v52 = *(uint64_t **)(v50 + 8);
    *v51 = *(_QWORD *)v50;
    v51[2] = 0;
    v51[3] = 0;
    v51[1] = 0;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v51 + 1, v52, *(uint64_t **)(v50 + 16), (uint64_t)(*(_QWORD *)(v50 + 16) - (_QWORD)v52) >> 5);
    *a3 = (uint64_t)v51;
    *v51 = 1;
    do
    {
      v53 = __ldaxr((unint64_t *)v50);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, (unint64_t *)v50));
    if (!v54)
    {
      v58.__r_.__value_.__r.__words[0] = v50 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      MEMORY[0x219A19A08](v50, 0x1020C405E66F15BLL);
    }
  }
  v55 = *a3;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(*a3 + 8));
  *(_OWORD *)(v55 + 8) = v66;
  *(_QWORD *)(v55 + 24) = v67;
  v66 = 0uLL;
  v67 = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  std::deque<unsigned long>::~deque[abi:ne180100](v63);
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::~__hash_table((uint64_t)&v70);
}

void sub_21822E828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::locale a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v45 = v41;
  MEMORY[0x219A19A08](v45, 0x1020C405E66F15BLL);
  do
  {
    v47 = __ldaxr(v42);
    v48 = v47 - 1;
  }
  while (__stlxr(v48, v42));
  if (!v48)
  {
    v49 = *v43;
    if (*v43)
    {
      a17 = (char *)(v49 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
      MEMORY[0x219A19A08](v49, 0x1020C405E66F15BLL);
    }
    *v43 = 0;
  }
  *v43 = 0;
  *((_DWORD *)v43 + 2) = 0;
  *((_BYTE *)v43 + 12) = 0;
  if (a16 < 0)
    operator delete(__p);
  std::deque<unsigned long>::~deque[abi:ne180100](&a26);
  a17 = &a32;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a41 < 0)
    operator delete(a36);
  std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::~__hash_table(v44 - 176);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1,std::allocator<turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

_QWORD *std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::__emplace_unique_key_args<turi::hash_value,std::piecewise_construct_t const&,std::tuple<turi::hash_value const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (a2[1] == v11[3] && v7 == v11[2])
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0x60uLL);
  v26[0] = v15;
  v26[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v7;
  v16 = (*a4)[1];
  v15[2] = **a4;
  v15[3] = v16;
  v15[10] = 0;
  *((_OWORD *)v15 + 3) = 0u;
  *((_OWORD *)v15 + 4) = 0u;
  *((_OWORD *)v15 + 2) = 0u;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v14;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v24 >= v8)
          v24 %= v8;
      }
      else
      {
        v24 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v11 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v11;
}

void sub_21822EBF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::deque<unsigned long>::~deque[abi:ne180100](v2 + 4);
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::__unordered_map_hasher<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,true>,std::__unordered_map_equal<turi::hash_value,std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>,std::equal_to<turi::hash_value>,std::hash<turi::hash_value>,true>,std::allocator<std::__hash_value_type<turi::hash_value,std::pair<std::deque<unsigned long>,unsigned long>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::deque<unsigned long>::~deque[abi:ne180100](v2 + 4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::set<turi::flexible_type>::set[abi:ne180100](uint64_t *a1, uint64_t a2, __n128 a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<turi::flexible_type>::insert[abi:ne180100]<std::__tree_const_iterator<turi::flexible_type,std::__tree_node<turi::flexible_type,void *> *,long>>(a1, *(char **)a2, (char *)(a2 + 8), a3);
  return a1;
}

void sub_21822ED00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<turi::flexible_type>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<turi::flexible_type>::insert[abi:ne180100]<std::__tree_const_iterator<turi::flexible_type,std::__tree_node<turi::flexible_type,void *> *,long>>(uint64_t *result, char *a2, char *a3, __n128 a4)
{
  char *v5;
  uint64_t **v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  BOOL v10;

  if (a2 != a3)
  {
    v5 = a2;
    v6 = (uint64_t **)result;
    v7 = result + 1;
    do
    {
      result = std::__tree<turi::flexible_type>::__emplace_hint_unique_key_args<turi::flexible_type,turi::flexible_type const&>(v6, v7, (uint64_t)(v5 + 32), v5 + 32, a4);
      v8 = (char *)*((_QWORD *)v5 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v5 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != a3);
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D933120;
  std::__tree<turi::flexible_type>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D933120;
  std::__tree<turi::flexible_type>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
  JUMPOUT(0x219A19A08);
}

void *std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  void *v2;
  __n128 v3;

  v2 = operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D933120;
  *((_BYTE *)v2 + 8) = *(_BYTE *)(a1 + 8);
  std::set<turi::flexible_type>::set[abi:ne180100]((uint64_t *)v2 + 2, a1 + 16, v3);
  return v2;
}

void sub_21822EE60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2, __n128 a3)
{
  *(_QWORD *)a2 = &off_24D933120;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
  return std::set<turi::flexible_type>::set[abi:ne180100]((uint64_t *)(a2 + 16), a1 + 16, a3);
}

void std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  std::__tree<turi::flexible_type>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
}

void std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(_QWORD **a1)
{
  std::__tree<turi::flexible_type>::destroy((uint64_t)(a1 + 2), a1[3]);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  int v11;
  unsigned int v12;
  unint64_t v14;
  unint64_t *v15;
  int v16;
  unsigned int v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  _BYTE v32[13];
  _BYTE v33[13];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 12) == 7)
  {
    *a3 = 0;
    *((_DWORD *)a3 + 2) = 0;
    *((_BYTE *)a3 + 12) = 0;
    if (a2 != a3)
    {
      *(uint64_t *)((char *)a3 + 5) = *(uint64_t *)((char *)a2 + 5);
      *a3 = *a2;
      *((_BYTE *)a3 + 12) = 7;
    }
  }
  else
  {
    v31 = 0;
    v30 = 0uLL;
    v5 = *(_QWORD *)(*a2 + 8);
    v6 = *(_QWORD *)(*a2 + 16);
    if (v5 != v6)
    {
      v8 = a1 + 16;
      do
      {
        if (*(_BYTE *)(v5 + 12) == 7)
          v9 = 0;
        else
          v9 = std::__tree<turi::flexible_type>::__count_unique<turi::flexible_type>(v8, v5, a4);
        if (*(_BYTE *)(a1 + 8) != (v9 != 0))
        {
          v10 = *(unint64_t **)v5;
          v11 = *(_DWORD *)(v5 + 8);
          v12 = *(unsigned __int8 *)(v5 + 12);
          if (v12 <= 9 && ((1 << v12) & 0x33C) != 0)
          {
            do
              v14 = __ldaxr(v10);
            while (__stlxr(v14 + 1, v10));
          }
          v15 = *(unint64_t **)(v5 + 16);
          v16 = *(_DWORD *)(v5 + 24);
          v17 = *(unsigned __int8 *)(v5 + 28);
          if (v17 <= 9 && ((1 << v17) & 0x33C) != 0)
          {
            do
              v19 = __ldaxr(v15);
            while (__stlxr(v19 + 1, v15));
          }
          *(_QWORD *)v32 = v10;
          *(_DWORD *)&v32[8] = v11;
          v32[12] = v12;
          *(_QWORD *)v33 = v15;
          *(_DWORD *)&v33[8] = v16;
          v33[12] = v17;
          v20 = *((_QWORD *)&v30 + 1);
          if (*((_QWORD *)&v30 + 1) >= v31)
          {
            v23 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v30, (uint64_t *)v32);
          }
          else
          {
            **((_QWORD **)&v30 + 1) = 0;
            *(_DWORD *)(v20 + 8) = 0;
            *(_BYTE *)(v20 + 12) = 0;
            v21 = *(_QWORD *)v32;
            *(_QWORD *)(v20 + 5) = *(_QWORD *)&v32[5];
            *(_QWORD *)v20 = v21;
            *(_BYTE *)(v20 + 12) = v32[12];
            v32[12] = 0;
            *(_QWORD *)(v20 + 16) = 0;
            *(_DWORD *)(v20 + 24) = 0;
            *(_BYTE *)(v20 + 28) = 0;
            v22 = *(_QWORD *)v33;
            *(_QWORD *)(v20 + 21) = *(_QWORD *)&v33[5];
            *(_QWORD *)(v20 + 16) = v22;
            *(_BYTE *)(v20 + 28) = v33[12];
            v33[12] = 0;
            v23 = v20 + 32;
          }
          *((_QWORD *)&v30 + 1) = v23;
          std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v32);
        }
        v5 += 32;
      }
      while (v5 != v6);
    }
    *(uint64_t *)((char *)a3 + 5) = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 12) = 5;
    v24 = operator new();
    *(_QWORD *)v24 = 0;
    *(_QWORD *)(v24 + 8) = 0;
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 24) = 0;
    *a3 = v24;
    *(_QWORD *)v24 = 1;
    if (*(_QWORD *)v24 != 1)
    {
      v25 = (_QWORD *)operator new();
      v26 = *(uint64_t **)(v24 + 8);
      *v25 = *(_QWORD *)v24;
      v25[2] = 0;
      v25[3] = 0;
      v25[1] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, v26, *(uint64_t **)(v24 + 16), (uint64_t)(*(_QWORD *)(v24 + 16) - (_QWORD)v26) >> 5);
      *a3 = (uint64_t)v25;
      *v25 = 1;
      do
      {
        v27 = __ldaxr((unint64_t *)v24);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unint64_t *)v24));
      if (!v28)
      {
        *(_QWORD *)v32 = v24 + 8;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
        MEMORY[0x219A19A08](v24, 0x1020C405E66F15BLL);
      }
    }
    v29 = *a3;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(v29 + 8));
    *(_OWORD *)(v29 + 8) = v30;
    *(_QWORD *)(v29 + 24) = v31;
    v30 = 0uLL;
    v31 = 0;
    *(_QWORD *)v32 = &v30;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  }
}

void sub_21822F1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  MEMORY[0x219A19A08](v14, 0x1020C405E66F15BLL);
  do
  {
    v16 = __ldaxr(v13);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v13));
  if (!v17)
  {
    v18 = *v12;
    if (*v12)
    {
      a12 = (void **)(v18 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a12);
      MEMORY[0x219A19A08](v18, 0x1020C405E66F15BLL);
    }
    *v12 = 0;
  }
  *v12 = 0;
  *((_DWORD *)v12 + 2) = 0;
  *((_BYTE *)v12 + 12) = 0;
  a12 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1,std::allocator<turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__tree<turi::flexible_type>::__count_unique<turi::flexible_type>(uint64_t a1, uint64_t a2, __n128 a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    v5 = a1 + 16;
    v6 = 1;
    do
    {
      if ((std::less<turi::flexible_type>::operator()[abi:ne180100](a3, v5, a2, (uint64_t)(v3 + 4)) & 1) == 0)
      {
        if (!std::less<turi::flexible_type>::operator()[abi:ne180100](a3, v5, (uint64_t)(v3 + 4), a2))
          return v6;
        ++v3;
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  return 0;
}

_QWORD *std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D9331A0;
  turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2::~$_2((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D9331A0;
  turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2::~$_2((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = &off_24D9331A0;
  std::__compressed_pair_elem<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D9331A0;
  return std::__compressed_pair_elem<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2::~$_2(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2::~$_2((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  _BOOL4 v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  int v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  BOOL v28;
  unint64_t *v29;
  double *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  size_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t *v83;
  unint64_t v84;
  double *v85;
  uint64_t v86;
  unint64_t v87;
  double *v88;
  unint64_t *v89;
  double v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  _BOOL4 v99;
  BOOL v100;
  uint64_t v101;
  const void *v102;
  size_t v103;
  unint64_t *v104;
  double *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  _QWORD *v113;
  _QWORD *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unsigned int v152;
  uint64_t v154;
  size_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t *v160;
  unint64_t v161;
  double *v162;
  uint64_t v163;
  unint64_t v164;
  double *v165;
  unint64_t *v166;
  double v167;
  unsigned int v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  double v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  const void *v177;
  size_t v178;
  size_t v179;
  const void *v180;
  size_t v181;
  const void *v182;
  size_t v183;
  int v184;
  BOOL v185;
  unint64_t *v186;
  int v187;
  unsigned int v188;
  unint64_t v190;
  unint64_t *v191;
  int v192;
  unsigned int v193;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  size_t v204;
  int v205;
  int v206;
  int v207;
  int v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  size_t v214;
  int v215;
  int v216;
  int v217;
  int v218;
  char v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  __int128 v228;
  unint64_t v229;
  _QWORD v230[2];
  __int128 v231;
  _BYTE v232[13];
  uint64_t v233;

  v233 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 12) == 7)
  {
    *a3 = 0;
    *((_DWORD *)a3 + 2) = 0;
    *((_BYTE *)a3 + 12) = 0;
    if (a2 != a3)
    {
      *(uint64_t *)((char *)a3 + 5) = *(uint64_t *)((char *)a2 + 5);
      *a3 = *a2;
      *((_BYTE *)a3 + 12) = 7;
    }
    return;
  }
  v229 = 0;
  v228 = 0uLL;
  v5 = *(_QWORD *)(*a2 + 8);
  v6 = *(_QWORD *)(*a2 + 16);
  if (v5 == v6)
    goto LABEL_379;
  do
  {
    if (!*(_BYTE *)(a1 + 8)
      || !turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::comparison_operators[10 * *(char *)(v5 + 28) + *(char *)(a1 + 28)])
    {
      goto LABEL_145;
    }
    v8 = *(unsigned __int8 *)(v5 + 28);
    switch(*(_BYTE *)(a1 + 28))
    {
      case 0:
        switch(*(_BYTE *)(v5 + 28))
        {
          case 0:
            if (*(_QWORD *)(v5 + 16) > *(_QWORD *)(a1 + 16))
              goto LABEL_145;
            goto LABEL_10;
          case 1:
            a4.n128_u64[0] = *(_QWORD *)(v5 + 16);
            v95 = (double)*(uint64_t *)(a1 + 16);
            goto LABEL_142;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_9;
          case 6:
            if (*(_QWORD *)(a1 + 16) < (uint64_t)(*(_QWORD *)(v5 + 16) << 8) >> 8)
              goto LABEL_145;
            goto LABEL_10;
          default:
            goto LABEL_386;
        }
      case 1:
        switch(*(_BYTE *)(v5 + 28))
        {
          case 0:
            a4.n128_u64[0] = *(_QWORD *)(a1 + 16);
            if (a4.n128_f64[0] < (double)*(uint64_t *)(v5 + 16))
              goto LABEL_145;
            goto LABEL_10;
          case 1:
            a4.n128_u64[0] = *(_QWORD *)(v5 + 16);
            v95 = *(double *)(a1 + 16);
            goto LABEL_142;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_9;
          case 6:
            v95 = *(double *)(a1 + 16);
            a4.n128_f64[0] = (double)*(int *)(v5 + 24) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(v5 + 16) << 8) >> 8);
LABEL_142:
            if (a4.n128_f64[0] > v95)
              goto LABEL_145;
            goto LABEL_10;
          default:
            goto LABEL_386;
        }
      case 2:
        v11 = v8 - 3 >= 7 && v8 >= 2;
        if (!v11)
          goto LABEL_9;
        if (v8 != 2)
        {
LABEL_386:
          turi::flexible_type_fail(0);
          __break(1u);
        }
        v12 = *(_QWORD *)(a1 + 16);
        v13 = *(_QWORD *)(v5 + 16);
        v16 = *(const void **)(v13 + 8);
        v14 = v13 + 8;
        v15 = v16;
        v17 = *(char *)(v14 + 23);
        v20 = *(const void **)(v12 + 8);
        v18 = v12 + 8;
        v19 = v20;
        v21 = *(char *)(v18 + 23);
        if (v21 >= 0)
          v22 = *(unsigned __int8 *)(v18 + 23);
        else
          v22 = *(_QWORD *)(v18 + 8);
        if (v21 >= 0)
          v23 = (const void *)v18;
        else
          v23 = v19;
        if (v17 >= 0)
          v24 = *(unsigned __int8 *)(v14 + 23);
        else
          v24 = *(_QWORD *)(v14 + 8);
        if (v17 >= 0)
          v25 = (const void *)v14;
        else
          v25 = v15;
        if (v24 >= v22)
          v26 = v22;
        else
          v26 = v24;
        v27 = memcmp(v23, v25, v26);
        v28 = v22 < v24;
        if (v27)
          v28 = v27 < 0;
        if (v28)
          goto LABEL_145;
        goto LABEL_10;
      case 3:
        if (v8 > 9)
          goto LABEL_386;
        if (v8 != 3)
          goto LABEL_9;
        v29 = *(unint64_t **)(*(_QWORD *)(v5 + 16) + 8);
        v30 = *(double **)(*(_QWORD *)(a1 + 16) + 8);
        v31 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) - (_QWORD)v30) >> 3;
        v32 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 16) - (_QWORD)v29) >> 3;
        if (*(unint64_t **)(*(_QWORD *)(v5 + 16) + 16) == v29)
          goto LABEL_53;
        if (v32 <= 1)
          v33 = 1;
        else
          v33 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 16) - (_QWORD)v29) >> 3;
        v34 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) - (_QWORD)v30) >> 3;
        break;
      case 4:
        if (v8 > 9)
          goto LABEL_386;
        if (v8 != 4)
        {
LABEL_9:
          turi::flexible_type_fail(0);
          goto LABEL_10;
        }
        if (turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&v231, (uint64_t *)(*(_QWORD *)(v5 + 16) + 8), (_QWORD *)(*(_QWORD *)(a1 + 16) + 8)))
        {
          goto LABEL_145;
        }
        goto LABEL_10;
      case 5:
      case 7:
      case 8:
      case 9:
        if (v8 < 0xA)
          goto LABEL_9;
        goto LABEL_386;
      case 6:
        switch(*(_BYTE *)(v5 + 28))
        {
          case 0:
            if (*(_QWORD *)(v5 + 16) > (uint64_t)(*(_QWORD *)(a1 + 16) << 8) >> 8)
              goto LABEL_145;
            goto LABEL_10;
          case 1:
            a4.n128_u64[0] = *(_QWORD *)(v5 + 16);
            if ((double)*(int *)(a1 + 24) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 16) << 8) >> 8) < a4.n128_f64[0])
              goto LABEL_145;
            goto LABEL_10;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_9;
          case 6:
            v96 = (uint64_t)(*(_QWORD *)(v5 + 16) << 8) >> 8;
            v97 = *(_QWORD *)(a1 + 16);
            if (v96 > v97 << 8 >> 8 || v96 == v97 << 8 >> 8 && *(_DWORD *)(v5 + 24) > *(_DWORD *)(a1 + 24))
              goto LABEL_145;
            goto LABEL_10;
          default:
            goto LABEL_386;
        }
      default:
        goto LABEL_386;
    }
    do
    {
      if (!v34)
        goto LABEL_145;
      a4.n128_u64[0] = *v29;
      if (*(double *)v29 > *v30)
        goto LABEL_145;
      if (*(double *)v29 < *v30)
        goto LABEL_10;
      ++v30;
      ++v29;
      --v34;
      --v33;
    }
    while (v33);
LABEL_53:
    if (v32 > v31)
    {
LABEL_145:
      v9 = 1;
      goto LABEL_146;
    }
LABEL_10:
    switch(*(_BYTE *)(a1 + 28))
    {
      case 0:
        v9 = 0;
        switch(*(_BYTE *)(v5 + 28))
        {
          case 0:
            v10 = *(_QWORD *)(v5 + 16) == *(_QWORD *)(a1 + 16);
            goto LABEL_117;
          case 1:
            a4.n128_u64[0] = *(_QWORD *)(v5 + 16);
            v92 = *(_QWORD *)(a1 + 16);
            goto LABEL_298;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_146;
          case 6:
            v10 = *(_QWORD *)(a1 + 16) == (uint64_t)(*(_QWORD *)(v5 + 16) << 8) >> 8 && *(_DWORD *)(v5 + 24) == 0;
            goto LABEL_117;
          default:
            goto LABEL_386;
        }
      case 1:
        v9 = 0;
        switch(*(_BYTE *)(v5 + 28))
        {
          case 0:
            a4.n128_u64[0] = *(_QWORD *)(a1 + 16);
            v92 = *(_QWORD *)(v5 + 16);
LABEL_298:
            v10 = a4.n128_f64[0] == (double)v92;
            goto LABEL_117;
          case 1:
            a4.n128_u64[0] = *(_QWORD *)(v5 + 16);
            v9 = a4.n128_f64[0] == *(double *)(a1 + 16);
            goto LABEL_146;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_146;
          case 6:
            a4.n128_f64[0] = vabdd_f64((double)*(int *)(v5 + 24) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)(v5 + 16) << 8) >> 8), *(double *)(a1 + 16));
            goto LABEL_301;
          default:
            goto LABEL_386;
        }
      case 2:
        v9 = 0;
        v76 = *(unsigned __int8 *)(v5 + 28);
        if (v76 - 3 < 7 || v76 < 2)
          goto LABEL_146;
        if (v76 != 2)
          goto LABEL_386;
        v77 = *(_QWORD *)(v5 + 16);
        if (*(char *)(v77 + 31) < 0)
          v78 = *(_QWORD *)(v77 + 16);
        else
          v78 = *(unsigned __int8 *)(v77 + 31);
        v210 = *(_QWORD *)(a1 + 16);
        if (*(char *)(v210 + 31) < 0)
          v211 = *(_QWORD *)(v210 + 16);
        else
          v211 = *(unsigned __int8 *)(v210 + 31);
        if (v78 != v211)
          goto LABEL_124;
        v212 = (_QWORD *)(v77 + 8);
        if ((*(_BYTE *)(v77 + 31) & 0x80) != 0)
          v212 = (_QWORD *)*v212;
        v213 = (_QWORD *)(v210 + 8);
        if ((*(_BYTE *)(v210 + 31) & 0x80) != 0)
          v213 = (_QWORD *)*v213;
        if ((*(_BYTE *)(v77 + 31) & 0x80) != 0)
        {
          v10 = memcmp(v212, v213, v78) == 0;
LABEL_117:
          v9 = v10;
        }
        else
        {
          if (!v78)
            goto LABEL_145;
          v214 = v78 - 1;
          do
          {
            v216 = *(unsigned __int8 *)v212;
            v212 = (_QWORD *)((char *)v212 + 1);
            v215 = v216;
            v218 = *(unsigned __int8 *)v213;
            v213 = (_QWORD *)((char *)v213 + 1);
            v217 = v218;
            v11 = v214-- != 0;
            v219 = v11;
            v9 = v215 == v217;
          }
          while (v215 == v217 && (v219 & 1) != 0);
        }
        goto LABEL_146;
      case 3:
        v79 = *(unsigned __int8 *)(v5 + 28);
        if (v79 > 9)
          goto LABEL_386;
        if (v79 != 3)
          goto LABEL_124;
        v80 = *(_QWORD *)(a1 + 16);
        v81 = *(_QWORD *)(v5 + 16);
        v83 = *(unint64_t **)(v81 + 8);
        v82 = *(unint64_t **)(v81 + 16);
        v84 = v82 - v83;
        v85 = *(double **)(v80 + 8);
        if (v84 != (uint64_t)(*(_QWORD *)(v80 + 16) - (_QWORD)v85) >> 3)
          goto LABEL_124;
        if (v82 == v83)
          goto LABEL_145;
        if (v84 <= 1)
          v86 = 1;
        else
          v86 = v82 - v83;
        a4.n128_u64[0] = *v83;
        if (*(double *)v83 != *v85)
          goto LABEL_124;
        v87 = 0;
        v88 = v85 + 1;
        v89 = v83 + 1;
        while (v86 - 1 != v87)
        {
          a4.n128_u64[0] = v89[v87];
          v90 = v88[v87++];
          if (a4.n128_f64[0] != v90)
            goto LABEL_374;
        }
        v87 = v86;
LABEL_374:
        v9 = v87 >= v84;
        goto LABEL_146;
      case 4:
        v35 = *(unsigned __int8 *)(v5 + 28);
        if (v35 > 9)
          goto LABEL_386;
        if (v35 != 4)
          goto LABEL_124;
        v36 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v231, (uint64_t *)(*(_QWORD *)(v5 + 16) + 8), (_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
        goto LABEL_293;
      case 5:
        v93 = *(unsigned __int8 *)(v5 + 28);
        if (v93 > 9)
          goto LABEL_386;
        if (v93 != 5)
          goto LABEL_124;
        v36 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v231, (uint64_t **)(*(_QWORD *)(v5 + 16) + 8), (uint64_t **)(*(_QWORD *)(a1 + 16) + 8));
        goto LABEL_293;
      case 6:
        v9 = 0;
        switch(*(_BYTE *)(v5 + 28))
        {
          case 0:
            v10 = *(_QWORD *)(v5 + 16) == (uint64_t)(*(_QWORD *)(a1 + 16) << 8) >> 8 && *(_DWORD *)(a1 + 24) == 0;
            goto LABEL_117;
          case 1:
            a4.n128_f64[0] = vabdd_f64(*(double *)(v5 + 16), (double)*(int *)(a1 + 24) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)(a1 + 16) << 8) >> 8));
LABEL_301:
            v9 = a4.n128_f64[0] < 0.0000005;
            goto LABEL_146;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_146;
          case 6:
            v10 = ((*(_QWORD *)(a1 + 16) ^ *(_QWORD *)(v5 + 16)) & 0xFFFFFFFFFFFFFFLL) == 0
               && *(_DWORD *)(v5 + 24) == *(_DWORD *)(a1 + 24);
            goto LABEL_117;
          default:
            goto LABEL_386;
        }
      case 7:
        v91 = *(unsigned __int8 *)(v5 + 28);
        if (v91 >= 0xA)
          goto LABEL_386;
        v10 = v91 == 7;
        goto LABEL_117;
      case 8:
        v9 = 0;
        v94 = *(unsigned __int8 *)(v5 + 28);
        if (v94 < 8 || v94 == 9)
          goto LABEL_146;
        if (v94 != 8)
          goto LABEL_386;
        v36 = turi::image_type::operator==(*(_QWORD *)(v5 + 16) + 8, *(_QWORD *)(a1 + 16) + 8);
LABEL_293:
        v9 = v36;
        goto LABEL_146;
      case 9:
        v37 = *(unsigned __int8 *)(v5 + 28);
        if (v37 < 9)
          goto LABEL_124;
        if (v37 != 9)
          goto LABEL_386;
        v38 = *(_QWORD **)(a1 + 16);
        v39 = *(_QWORD **)(v5 + 16);
        if (v38 == v39)
          goto LABEL_145;
        v227 = *(_QWORD *)(a1 + 16);
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v39 + 1), (uint64_t)(v38 + 1)))
        {
LABEL_124:
          v9 = 0;
          goto LABEL_146;
        }
        v41 = (char *)v39[3];
        v40 = (char *)v39[4];
        v42 = v40 - v41;
        if (v40 == v41)
          goto LABEL_145;
        if (!v39[1])
          goto LABEL_145;
        v43 = 1;
        do
        {
          v44 = *(_QWORD *)v41;
          v41 += 8;
          v43 *= v44;
        }
        while (v41 != v40);
        if (!v43)
          goto LABEL_145;
        v230[0] = 0;
        std::vector<unsigned long>::vector(&v231, v42 >> 3, v230);
        v45 = v231;
        v46 = **(_QWORD **)(v227 + 8);
        v47 = *((_QWORD *)&v231 + 1) - v231;
        v48 = (uint64_t)(*((_QWORD *)&v231 + 1) - v231) >> 3;
        v49 = v48 - 1;
        if (v48 <= 1)
          v50 = 1;
        else
          v50 = (uint64_t)(*((_QWORD *)&v231 + 1) - v231) >> 3;
        break;
      default:
        goto LABEL_386;
    }
    while (1)
    {
      if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
      {
        v58 = 0;
        a4.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v39[1] + 8 * v39[9]);
      }
      else
      {
        v51 = 0;
        v52 = (uint64_t *)v39[6];
        v53 = (uint64_t *)v45;
        v54 = v50;
        do
        {
          v56 = *v53++;
          v55 = v56;
          v57 = *v52++;
          v51 += v57 * v55;
          --v54;
        }
        while (v54);
        v58 = 0;
        a4.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v39[1] + 8 * (v39[9] + v51));
        v59 = *(uint64_t **)(v227 + 48);
        v60 = (uint64_t *)v45;
        v61 = v50;
        do
        {
          v63 = *v60++;
          v62 = v63;
          v64 = *v59++;
          v58 += v64 * v62;
          --v61;
        }
        while (v61);
      }
      v65 = *(double *)(v46 + 8 * (*(_QWORD *)(v227 + 72) + v58));
      v9 = a4.n128_f64[0] == v65;
      if (a4.n128_f64[0] != v65)
      {
LABEL_96:
        if (!(_QWORD)v45)
          goto LABEL_146;
        goto LABEL_378;
      }
      v66 = v48;
      v67 = v48 - 1;
      if (v47 >= 1)
        break;
LABEL_94:
      if (!v66 || (v67 & 0x8000000000000000) != 0)
        goto LABEL_96;
    }
    v68 = v39[3];
    v69 = *(_QWORD *)(v45 + 8 * v49) + 1;
    *(_QWORD *)(v45 + 8 * v49) = v69;
    if (v69 < *(_QWORD *)(v68 + 8 * v49))
    {
      v66 = 1;
      v67 = v48 - 1;
      goto LABEL_94;
    }
    v70 = v68 - 16;
    v71 = v48;
    v72 = (unint64_t *)(v45 + (v47 & 0xFFFFFFFFFFFFFFF8) - 16);
    while (1)
    {
      v73 = v71 - 1;
      v72[1] = 0;
      if ((uint64_t)(v71 - 1) <= 0)
        break;
      v74 = *v72 + 1;
      *v72-- = v74;
      v75 = *(_QWORD *)(v70 + 8 * v71--);
      if (v74 < v75)
      {
        v67 = v73 - 1;
        v66 = 1;
        goto LABEL_94;
      }
    }
    v9 = 1;
LABEL_378:
    *((_QWORD *)&v231 + 1) = v45;
    operator delete((void *)v45);
LABEL_146:
    if (!*(_BYTE *)(a1 + 32)
      || !turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::comparison_operators[10 * *(char *)(v5 + 28) + *(char *)(a1 + 52)])
    {
      goto LABEL_315;
    }
    v98 = *(unsigned __int8 *)(v5 + 28);
    switch(*(_BYTE *)(a1 + 52))
    {
      case 0:
        switch(*(_BYTE *)(v5 + 28))
        {
          case 0:
            if (*(_QWORD *)(v5 + 16) < *(_QWORD *)(a1 + 40))
              goto LABEL_315;
            goto LABEL_151;
          case 1:
            a4.n128_u64[0] = *(_QWORD *)(v5 + 16);
            v173 = (double)*(uint64_t *)(a1 + 40);
            goto LABEL_269;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_150;
          case 6:
            if (*(_QWORD *)(a1 + 40) > (uint64_t)(*(_QWORD *)(v5 + 16) << 8) >> 8)
              goto LABEL_315;
            goto LABEL_151;
          default:
            goto LABEL_386;
        }
      case 1:
        switch(*(_BYTE *)(v5 + 28))
        {
          case 0:
            a4.n128_u64[0] = *(_QWORD *)(a1 + 40);
            if (a4.n128_f64[0] > (double)*(uint64_t *)(v5 + 16))
              goto LABEL_315;
            goto LABEL_151;
          case 1:
            a4.n128_u64[0] = *(_QWORD *)(v5 + 16);
            v173 = *(double *)(a1 + 40);
            goto LABEL_269;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_150;
          case 6:
            v173 = *(double *)(a1 + 40);
            a4.n128_f64[0] = (double)*(int *)(v5 + 24) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(v5 + 16) << 8) >> 8);
LABEL_269:
            if (a4.n128_f64[0] < v173)
              goto LABEL_315;
            goto LABEL_151;
          default:
            goto LABEL_386;
        }
      case 2:
        if (v98 - 3 < 7 || v98 < 2)
          goto LABEL_150;
        if (v98 != 2)
          goto LABEL_386;
        v101 = *(_QWORD *)(v5 + 16);
        if (*(char *)(v101 + 31) < 0)
        {
          v102 = *(const void **)(v101 + 8);
          v103 = *(_QWORD *)(v101 + 16);
        }
        else
        {
          v102 = (const void *)(v101 + 8);
          v103 = *(unsigned __int8 *)(v101 + 31);
        }
        v176 = *(_QWORD *)(a1 + 40);
        v177 = (const void *)(v176 + 8);
        v178 = *(unsigned __int8 *)(v176 + 31);
        v180 = *(const void **)(v176 + 8);
        v179 = *(_QWORD *)(v176 + 16);
        if ((v178 & 0x80u) == 0)
          v181 = v178;
        else
          v181 = v179;
        if ((v178 & 0x80u) == 0)
          v182 = v177;
        else
          v182 = v180;
        if (v181 >= v103)
          v183 = v103;
        else
          v183 = v181;
        v184 = memcmp(v102, v182, v183);
        v185 = v103 < v181;
        if (v184)
          v185 = v184 < 0;
        if (v185)
          goto LABEL_315;
        goto LABEL_151;
      case 3:
        if (v98 > 9)
          goto LABEL_386;
        if (v98 != 3)
          goto LABEL_150;
        v104 = *(unint64_t **)(*(_QWORD *)(v5 + 16) + 8);
        v105 = *(double **)(*(_QWORD *)(a1 + 40) + 8);
        v106 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) - (_QWORD)v105) >> 3;
        v107 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 16) - (_QWORD)v104) >> 3;
        if (*(unint64_t **)(*(_QWORD *)(v5 + 16) + 16) == v104)
          goto LABEL_174;
        if (v107 <= 1)
          v108 = 1;
        else
          v108 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 16) - (_QWORD)v104) >> 3;
        v109 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) - (_QWORD)v105) >> 3;
        break;
      case 4:
        if (v98 > 9)
          goto LABEL_386;
        if (v98 != 4)
        {
LABEL_150:
          turi::flexible_type_fail(0);
          goto LABEL_151;
        }
        if (turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&v231, (uint64_t *)(*(_QWORD *)(v5 + 16) + 8), (_QWORD *)(*(_QWORD *)(a1 + 40) + 8)))
        {
          goto LABEL_315;
        }
        goto LABEL_151;
      case 5:
      case 7:
      case 8:
      case 9:
        if (v98 < 0xA)
          goto LABEL_150;
        goto LABEL_386;
      case 6:
        switch(*(_BYTE *)(v5 + 28))
        {
          case 0:
            if (*(_QWORD *)(v5 + 16) < (uint64_t)(*(_QWORD *)(a1 + 40) << 8) >> 8)
              goto LABEL_315;
            goto LABEL_151;
          case 1:
            a4.n128_u64[0] = *(_QWORD *)(v5 + 16);
            if ((double)*(int *)(a1 + 48) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 40) << 8) >> 8) > a4.n128_f64[0])
              goto LABEL_315;
            goto LABEL_151;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_150;
          case 6:
            v174 = (uint64_t)(*(_QWORD *)(v5 + 16) << 8) >> 8;
            v175 = *(_QWORD *)(a1 + 40);
            if (v174 < v175 << 8 >> 8 || v174 == v175 << 8 >> 8 && *(_DWORD *)(v5 + 24) < *(_DWORD *)(a1 + 48))
              goto LABEL_315;
            goto LABEL_151;
          default:
            goto LABEL_386;
        }
      default:
        goto LABEL_386;
    }
    do
    {
      if (!v109)
        goto LABEL_151;
      a4.n128_u64[0] = *v104;
      if (*(double *)v104 > *v105)
        goto LABEL_151;
      if (*(double *)v104 < *v105)
        goto LABEL_315;
      ++v105;
      ++v104;
      --v109;
      --v108;
    }
    while (v108);
LABEL_174:
    if (v107 < v106)
    {
LABEL_315:
      v99 = 1;
      goto LABEL_316;
    }
LABEL_151:
    switch(*(_BYTE *)(a1 + 52))
    {
      case 0:
        v99 = 0;
        switch(*(_BYTE *)(v5 + 28))
        {
          case 0:
            v100 = *(_QWORD *)(v5 + 16) == *(_QWORD *)(a1 + 40);
            goto LABEL_242;
          case 1:
            a4.n128_u64[0] = *(_QWORD *)(v5 + 16);
            v169 = *(_QWORD *)(a1 + 40);
            goto LABEL_284;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_316;
          case 6:
            v100 = *(_QWORD *)(a1 + 40) == (uint64_t)(*(_QWORD *)(v5 + 16) << 8) >> 8 && *(_DWORD *)(v5 + 24) == 0;
            goto LABEL_242;
          default:
            goto LABEL_386;
        }
      case 1:
        v99 = 0;
        switch(*(_BYTE *)(v5 + 28))
        {
          case 0:
            a4.n128_u64[0] = *(_QWORD *)(a1 + 40);
            v169 = *(_QWORD *)(v5 + 16);
LABEL_284:
            v100 = a4.n128_f64[0] == (double)v169;
            goto LABEL_242;
          case 1:
            a4.n128_u64[0] = *(_QWORD *)(v5 + 16);
            v99 = a4.n128_f64[0] == *(double *)(a1 + 40);
            goto LABEL_316;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_316;
          case 6:
            a4.n128_f64[0] = vabdd_f64((double)*(int *)(v5 + 24) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)(v5 + 16) << 8) >> 8), *(double *)(a1 + 40));
            goto LABEL_287;
          default:
            goto LABEL_386;
        }
      case 2:
        v152 = *(unsigned __int8 *)(v5 + 28);
        if (v152 - 3 < 7 || v152 < 2)
          goto LABEL_259;
        if (v152 != 2)
          goto LABEL_386;
        v154 = *(_QWORD *)(v5 + 16);
        if (*(char *)(v154 + 31) < 0)
          v155 = *(_QWORD *)(v154 + 16);
        else
          v155 = *(unsigned __int8 *)(v154 + 31);
        v200 = *(_QWORD *)(a1 + 40);
        if (*(char *)(v200 + 31) < 0)
          v201 = *(_QWORD *)(v200 + 16);
        else
          v201 = *(unsigned __int8 *)(v200 + 31);
        if (v155 != v201)
          goto LABEL_259;
        v202 = (_QWORD *)(v154 + 8);
        if ((*(_BYTE *)(v154 + 31) & 0x80) != 0)
          v202 = (_QWORD *)*v202;
        v203 = (_QWORD *)(v200 + 8);
        if ((*(_BYTE *)(v200 + 31) & 0x80) != 0)
          v203 = (_QWORD *)*v203;
        if ((*(_BYTE *)(v154 + 31) & 0x80) != 0)
        {
          v100 = memcmp(v202, v203, v155) == 0;
LABEL_242:
          v99 = v100;
        }
        else
        {
          if (!v155)
            goto LABEL_315;
          v204 = v155 - 1;
          do
          {
            v206 = *(unsigned __int8 *)v202;
            v202 = (_QWORD *)((char *)v202 + 1);
            v205 = v206;
            v208 = *(unsigned __int8 *)v203;
            v203 = (_QWORD *)((char *)v203 + 1);
            v207 = v208;
            v11 = v204-- != 0;
            v209 = v11;
            v99 = v205 == v207;
          }
          while (v205 == v207 && (v209 & 1) != 0);
        }
        goto LABEL_316;
      case 3:
        v156 = *(unsigned __int8 *)(v5 + 28);
        if (v156 > 9)
          goto LABEL_386;
        if (v156 != 3)
          goto LABEL_259;
        v157 = *(_QWORD *)(a1 + 40);
        v158 = *(_QWORD *)(v5 + 16);
        v160 = *(unint64_t **)(v158 + 8);
        v159 = *(unint64_t **)(v158 + 16);
        v161 = v159 - v160;
        v162 = *(double **)(v157 + 8);
        if (v161 != (uint64_t)(*(_QWORD *)(v157 + 16) - (_QWORD)v162) >> 3)
          goto LABEL_259;
        if (v159 == v160)
          goto LABEL_315;
        if (v161 <= 1)
          v163 = 1;
        else
          v163 = v159 - v160;
        a4.n128_u64[0] = *v160;
        if (*(double *)v160 != *v162)
          goto LABEL_259;
        v164 = 0;
        v165 = v162 + 1;
        v166 = v160 + 1;
        while (v163 - 1 != v164)
        {
          a4.n128_u64[0] = v166[v164];
          v167 = v165[v164++];
          if (a4.n128_f64[0] != v167)
            goto LABEL_372;
        }
        v164 = v163;
LABEL_372:
        v99 = v164 >= v161;
        goto LABEL_316;
      case 4:
        v110 = *(unsigned __int8 *)(v5 + 28);
        if (v110 > 9)
          goto LABEL_386;
        if (v110 != 4)
          goto LABEL_259;
        v111 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v231, (uint64_t *)(*(_QWORD *)(v5 + 16) + 8), (_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
        goto LABEL_275;
      case 5:
        v170 = *(unsigned __int8 *)(v5 + 28);
        if (v170 > 9)
          goto LABEL_386;
        if (v170 != 5)
          goto LABEL_259;
        v111 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v231, (uint64_t **)(*(_QWORD *)(v5 + 16) + 8), (uint64_t **)(*(_QWORD *)(a1 + 40) + 8));
        goto LABEL_275;
      case 6:
        v99 = 0;
        switch(*(_BYTE *)(v5 + 28))
        {
          case 0:
            v100 = *(_QWORD *)(v5 + 16) == (uint64_t)(*(_QWORD *)(a1 + 40) << 8) >> 8 && *(_DWORD *)(a1 + 48) == 0;
            goto LABEL_242;
          case 1:
            a4.n128_f64[0] = vabdd_f64(*(double *)(v5 + 16), (double)*(int *)(a1 + 48) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)(a1 + 40) << 8) >> 8));
LABEL_287:
            v99 = a4.n128_f64[0] < 0.0000005;
            goto LABEL_316;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_316;
          case 6:
            v100 = ((*(_QWORD *)(a1 + 40) ^ *(_QWORD *)(v5 + 16)) & 0xFFFFFFFFFFFFFFLL) == 0
                && *(_DWORD *)(v5 + 24) == *(_DWORD *)(a1 + 48);
            goto LABEL_242;
          default:
            goto LABEL_386;
        }
      case 7:
        v168 = *(unsigned __int8 *)(v5 + 28);
        if (v168 >= 0xA)
          goto LABEL_386;
        v100 = v168 == 7;
        goto LABEL_242;
      case 8:
        v171 = *(unsigned __int8 *)(v5 + 28);
        if (v171 < 8 || v171 == 9)
          goto LABEL_259;
        if (v171 != 8)
          goto LABEL_386;
        v111 = turi::image_type::operator==(*(_QWORD *)(v5 + 16) + 8, *(_QWORD *)(a1 + 40) + 8);
LABEL_275:
        v99 = v111;
        goto LABEL_316;
      case 9:
        v112 = *(unsigned __int8 *)(v5 + 28);
        if (v112 < 9)
          goto LABEL_259;
        if (v112 != 9)
          goto LABEL_386;
        v113 = *(_QWORD **)(a1 + 40);
        v114 = *(_QWORD **)(v5 + 16);
        if (v113 == v114)
          goto LABEL_315;
        v226 = *(_QWORD *)(a1 + 40);
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v114 + 1), (uint64_t)(v113 + 1)))
        {
LABEL_259:
          v99 = 0;
          goto LABEL_316;
        }
        v116 = (char *)v114[3];
        v115 = (char *)v114[4];
        v117 = v115 - v116;
        if (v115 == v116)
          goto LABEL_315;
        if (!v114[1])
          goto LABEL_315;
        v118 = 1;
        do
        {
          v119 = *(_QWORD *)v116;
          v116 += 8;
          v118 *= v119;
        }
        while (v116 != v115);
        if (!v118)
          goto LABEL_315;
        v230[0] = 0;
        std::vector<unsigned long>::vector(&v231, v117 >> 3, v230);
        v120 = v231;
        v121 = **(_QWORD **)(v226 + 8);
        v122 = *((_QWORD *)&v231 + 1) - v231;
        v123 = (uint64_t)(*((_QWORD *)&v231 + 1) - v231) >> 3;
        v124 = v123 - 1;
        if (v123 <= 1)
          v125 = 1;
        else
          v125 = (uint64_t)(*((_QWORD *)&v231 + 1) - v231) >> 3;
        v126 = v114;
        break;
      default:
        goto LABEL_386;
    }
    while (2)
    {
      if (*((_QWORD *)&v120 + 1) == (_QWORD)v120)
      {
        v134 = 0;
        a4.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v126[1] + 8 * v126[9]);
      }
      else
      {
        v127 = 0;
        v128 = (uint64_t *)v126[6];
        v129 = (uint64_t *)v120;
        v130 = v125;
        do
        {
          v132 = *v129++;
          v131 = v132;
          v133 = *v128++;
          v127 += v133 * v131;
          --v130;
        }
        while (v130);
        v134 = 0;
        a4.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v126[1] + 8 * (v126[9] + v127));
        v135 = *(uint64_t **)(v226 + 48);
        v136 = (uint64_t *)v120;
        v137 = v125;
        do
        {
          v139 = *v136++;
          v138 = v139;
          v140 = *v135++;
          v134 += v140 * v138;
          --v137;
        }
        while (v137);
      }
      v141 = *(double *)(v121 + 8 * (*(_QWORD *)(v226 + 72) + v134));
      v99 = a4.n128_f64[0] == v141;
      if (a4.n128_f64[0] != v141)
      {
LABEL_218:
        if (!(_QWORD)v120)
          goto LABEL_316;
        goto LABEL_376;
      }
      v142 = v123;
      v143 = v123 - 1;
      if (v122 < 1)
      {
LABEL_216:
        if (!v142 || (v143 & 0x8000000000000000) != 0)
          goto LABEL_218;
        continue;
      }
      break;
    }
    v144 = v126[3];
    v145 = *(_QWORD *)(v120 + 8 * v124) + 1;
    *(_QWORD *)(v120 + 8 * v124) = v145;
    if (v145 < *(_QWORD *)(v144 + 8 * v124))
    {
      v142 = 1;
      v143 = v123 - 1;
      goto LABEL_216;
    }
    v146 = v144 - 16;
    v147 = v123;
    v148 = (unint64_t *)(v120 + (v122 & 0xFFFFFFFFFFFFFFF8) - 16);
    while (1)
    {
      v149 = v147 - 1;
      v148[1] = 0;
      if ((uint64_t)(v147 - 1) <= 0)
        break;
      v150 = *v148 + 1;
      *v148-- = v150;
      v151 = *(_QWORD *)(v146 + 8 * v147--);
      if (v150 < v151)
      {
        v143 = v149 - 1;
        v142 = 1;
        goto LABEL_216;
      }
    }
    v99 = 1;
LABEL_376:
    *((_QWORD *)&v231 + 1) = v120;
    operator delete((void *)v120);
LABEL_316:
    if (v9 && v99)
    {
      v186 = *(unint64_t **)v5;
      v187 = *(_DWORD *)(v5 + 8);
      v188 = *(unsigned __int8 *)(v5 + 12);
      if (v188 <= 9 && ((1 << v188) & 0x33C) != 0)
      {
        do
          v190 = __ldaxr(v186);
        while (__stlxr(v190 + 1, v186));
      }
      v191 = *(unint64_t **)(v5 + 16);
      v192 = *(_DWORD *)(v5 + 24);
      v193 = *(unsigned __int8 *)(v5 + 28);
      if (v193 <= 9 && ((1 << v193) & 0x33C) != 0)
      {
        do
          v195 = __ldaxr(v191);
        while (__stlxr(v195 + 1, v191));
      }
      *(_QWORD *)&v231 = v186;
      DWORD2(v231) = v187;
      BYTE12(v231) = v188;
      *(_QWORD *)v232 = v191;
      *(_DWORD *)&v232[8] = v192;
      v232[12] = v193;
      v196 = *((_QWORD *)&v228 + 1);
      if (*((_QWORD *)&v228 + 1) >= v229)
      {
        v199 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v228, (uint64_t *)&v231);
      }
      else
      {
        **((_QWORD **)&v228 + 1) = 0;
        *(_DWORD *)(v196 + 8) = 0;
        *(_BYTE *)(v196 + 12) = 0;
        v197 = v231;
        *(_QWORD *)(v196 + 5) = *(_QWORD *)((char *)&v231 + 5);
        *(_QWORD *)v196 = v197;
        *(_BYTE *)(v196 + 12) = BYTE12(v231);
        BYTE12(v231) = 0;
        *(_QWORD *)(v196 + 16) = 0;
        *(_DWORD *)(v196 + 24) = 0;
        *(_BYTE *)(v196 + 28) = 0;
        v198 = *(_QWORD *)v232;
        *(_QWORD *)(v196 + 21) = *(_QWORD *)&v232[5];
        *(_QWORD *)(v196 + 16) = v198;
        *(_BYTE *)(v196 + 28) = v232[12];
        v232[12] = 0;
        v199 = v196 + 32;
      }
      *((_QWORD *)&v228 + 1) = v199;
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v231);
    }
    v5 += 32;
  }
  while (v5 != v6);
LABEL_379:
  *(uint64_t *)((char *)a3 + 5) = 0;
  *a3 = 0;
  *((_BYTE *)a3 + 12) = 5;
  v220 = operator new();
  *(_QWORD *)v220 = 0;
  *(_QWORD *)(v220 + 8) = 0;
  *(_QWORD *)(v220 + 16) = 0;
  *(_QWORD *)(v220 + 24) = 0;
  *a3 = v220;
  *(_QWORD *)v220 = 1;
  if (*(_QWORD *)v220 != 1)
  {
    v221 = (_QWORD *)operator new();
    v222 = *(uint64_t **)(v220 + 8);
    *v221 = *(_QWORD *)v220;
    v221[2] = 0;
    v221[3] = 0;
    v221[1] = 0;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v221 + 1, v222, *(uint64_t **)(v220 + 16), (uint64_t)(*(_QWORD *)(v220 + 16) - (_QWORD)v222) >> 5);
    *a3 = (uint64_t)v221;
    *v221 = 1;
    do
    {
      v223 = __ldaxr((unint64_t *)v220);
      v224 = v223 - 1;
    }
    while (__stlxr(v224, (unint64_t *)v220));
    if (!v224)
    {
      *(_QWORD *)&v231 = v220 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v231);
      MEMORY[0x219A19A08](v220, 0x1020C405E66F15BLL);
    }
  }
  v225 = *a3;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(v225 + 8));
  *(_OWORD *)(v225 + 8) = v228;
  *(_QWORD *)(v225 + 24) = v229;
  v228 = 0uLL;
  v229 = 0;
  *(_QWORD *)&v231 = &v228;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v231);
}

void sub_21823083C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16)
{
  uint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  MEMORY[0x219A19A08](v18, 0x1020C405E66F15BLL);
  do
  {
    v20 = __ldaxr(v17);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v17));
  if (!v21)
  {
    v22 = *v16;
    if (*v16)
    {
      a16 = (void **)(v22 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a16);
      MEMORY[0x219A19A08](v22, 0x1020C405E66F15BLL);
    }
    *v16 = 0;
  }
  *v16 = 0;
  *((_DWORD *)v16 + 2) = 0;
  *((_BYTE *)v16 + 12) = 0;
  a15 = (void **)&a11;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2 const&,0ul>(uint64_t result, uint64_t a2)
{
  unint64_t **v2;
  unint64_t *v3;
  unsigned int v4;
  unint64_t *v5;
  unint64_t v6;
  char v7;
  unint64_t **v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  *(_BYTE *)result = *(_BYTE *)a2;
  *(_QWORD *)(result + 8) = 0;
  v2 = (unint64_t **)(result + 8);
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  if (a2 == result)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_BYTE *)(result + 44) = 0;
  }
  else
  {
    v3 = *(unint64_t **)(a2 + 8);
    *(_QWORD *)(result + 13) = *(_QWORD *)(a2 + 13);
    *v2 = v3;
    v4 = *(unsigned __int8 *)(a2 + 20);
    *(_BYTE *)(result + 20) = v4;
    if (v4 <= 9 && ((1 << v4) & 0x33C) != 0)
    {
      v5 = *v2;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    v7 = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(result + 32) = 0;
    v8 = (unint64_t **)(result + 32);
    *(_BYTE *)(result + 24) = v7;
    *(_DWORD *)(result + 40) = 0;
    *(_BYTE *)(result + 44) = 0;
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(result + 37) = *(_QWORD *)(a2 + 37);
    *(_QWORD *)(result + 32) = v9;
    LODWORD(v9) = *(unsigned __int8 *)(a2 + 44);
    *(_BYTE *)(result + 44) = v9;
    switch((int)v9)
    {
      case 2:
        v10 = *v8;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        break;
      case 3:
        v12 = *v8;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        break;
      case 4:
        v14 = *v8;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        break;
      case 5:
        v16 = *v8;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
        break;
      case 8:
        v18 = *v8;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
        break;
      case 9:
        v20 = *v8;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        break;
      default:
        return result;
    }
  }
  return result;
}

void std::__function::__func<turi::unity_sarray::dict_keys(void)::$_1,std::allocator<turi::unity_sarray::dict_keys(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::dict_keys(void)::$_1,std::allocator<turi::unity_sarray::dict_keys(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933220;
  return result;
}

void std::__function::__func<turi::unity_sarray::dict_keys(void)::$_1,std::allocator<turi::unity_sarray::dict_keys(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933220;
}

void std::__function::__func<turi::unity_sarray::dict_keys(void)::$_1,std::allocator<turi::unity_sarray::dict_keys(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t **v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  void **v13[2];

  if (*(_BYTE *)(a1 + 12) == 7)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    if (a1 != a2)
    {
      *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 5);
      *(_QWORD *)a2 = *(_QWORD *)a1;
      *(_BYTE *)(a2 + 12) = 7;
    }
  }
  else
  {
    turi::flex_dict_view::flex_dict_view((turi::flex_dict_view *)v10, (const turi::flexible_type *)a1);
    v3 = (uint64_t **)turi::flex_dict_view::keys((turi::flex_dict_view *)v10);
    *(_QWORD *)(a2 + 5) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 12) = 4;
    v4 = operator new();
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)a2 = v4;
    *(_QWORD *)v4 = 1;
    if (*(_QWORD *)v4 != 1)
    {
      v5 = (_QWORD *)operator new();
      v6 = *(uint64_t **)(v4 + 8);
      *v5 = *(_QWORD *)v4;
      v5[2] = 0;
      v5[3] = 0;
      v5[1] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v5 + 1, v6, *(uint64_t **)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - (_QWORD)v6) >> 4);
      *(_QWORD *)a2 = v5;
      *v5 = 1;
      do
      {
        v7 = __ldaxr((unint64_t *)v4);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unint64_t *)v4));
      if (!v8)
      {
        v13[0] = (void **)(v4 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v13);
        MEMORY[0x219A19A08](v4, 0x1020C405E66F15BLL);
      }
    }
    v9 = *(_QWORD *)a2 + 8;
    if ((uint64_t **)v9 != v3)
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v9, *v3, v3[1], ((char *)v3[1] - (char *)*v3) >> 4);
    v13[0] = (void **)&v12;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v13);
    v13[0] = (void **)&v11;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v13);
  }
}

void sub_218230C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  uint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  MEMORY[0x219A19A08](v19, 0x1020C405E66F15BLL);
  do
  {
    v21 = __ldaxr(v18);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v18));
  if (!v22)
  {
    v23 = *v17;
    if (*v17)
    {
      a17 = (void **)(v23 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
      MEMORY[0x219A19A08](v23, 0x1020C405E66F15BLL);
    }
    *v17 = 0;
  }
  *v17 = 0;
  *((_DWORD *)v17 + 2) = 0;
  *((_BYTE *)v17 + 12) = 0;
  a17 = (void **)&a14;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_keys(void)::$_1,std::allocator<turi::unity_sarray::dict_keys(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<turi::unity_sarray::dict_keys(void)::$_1,std::allocator<turi::unity_sarray::dict_keys(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void turi::flex_dict_view::~flex_dict_view(turi::flex_dict_view *this)
{
  void **v2;

  v2 = (void **)((char *)this + 32);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__function::__func<turi::unity_sarray::dict_values(void)::$_1,std::allocator<turi::unity_sarray::dict_values(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::dict_values(void)::$_1,std::allocator<turi::unity_sarray::dict_values(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D9332A0;
  return result;
}

void std::__function::__func<turi::unity_sarray::dict_values(void)::$_1,std::allocator<turi::unity_sarray::dict_values(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D9332A0;
}

void std::__function::__func<turi::unity_sarray::dict_values(void)::$_1,std::allocator<turi::unity_sarray::dict_values(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t **v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13[2];

  if (*(_BYTE *)(a1 + 12) == 7)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    if (a1 != a2)
    {
      *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 5);
      *(_QWORD *)a2 = *(_QWORD *)a1;
      *(_BYTE *)(a2 + 12) = 7;
    }
  }
  else
  {
    turi::flex_dict_view::flex_dict_view((turi::flex_dict_view *)&v10, (const turi::flexible_type *)a1);
    v3 = (uint64_t **)turi::flex_dict_view::values(&v10);
    *(_QWORD *)(a2 + 5) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 12) = 4;
    v4 = operator new();
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)a2 = v4;
    *(_QWORD *)v4 = 1;
    if (*(_QWORD *)v4 != 1)
    {
      v5 = (_QWORD *)operator new();
      v6 = *(uint64_t **)(v4 + 8);
      *v5 = *(_QWORD *)v4;
      v5[2] = 0;
      v5[3] = 0;
      v5[1] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v5 + 1, v6, *(uint64_t **)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - (_QWORD)v6) >> 4);
      *(_QWORD *)a2 = v5;
      *v5 = 1;
      do
      {
        v7 = __ldaxr((unint64_t *)v4);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unint64_t *)v4));
      if (!v8)
      {
        v13[0] = (void **)(v4 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v13);
        MEMORY[0x219A19A08](v4, 0x1020C405E66F15BLL);
      }
    }
    v9 = *(_QWORD *)a2 + 8;
    if ((uint64_t **)v9 != v3)
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v9, *v3, v3[1], ((char *)v3[1] - (char *)*v3) >> 4);
    v13[0] = (void **)&v12;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v13);
    v13[0] = (void **)&v11;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v13);
  }
}

void sub_21823110C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  uint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  MEMORY[0x219A19A08](v19, 0x1020C405E66F15BLL);
  do
  {
    v21 = __ldaxr(v18);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v18));
  if (!v22)
  {
    v23 = *v17;
    if (*v17)
    {
      a17 = (void **)(v23 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
      MEMORY[0x219A19A08](v23, 0x1020C405E66F15BLL);
    }
    *v17 = 0;
  }
  *v17 = 0;
  *((_DWORD *)v17 + 2) = 0;
  *((_BYTE *)v17 + 12) = 0;
  a17 = (void **)&a14;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_values(void)::$_1,std::allocator<turi::unity_sarray::dict_values(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<turi::unity_sarray::dict_values(void)::$_1,std::allocator<turi::unity_sarray::dict_values(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D933320;
  std::__tree<turi::flexible_type>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D933320;
  std::__tree<turi::flexible_type>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  __n128 v3;

  v1 = a1 + 8;
  v2 = operator new(0x20uLL);
  *v2 = &off_24D933320;
  std::set<turi::flexible_type>::set[abi:ne180100](v2 + 1, v1, v3);
  return v2;
}

void sub_218231400(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2, __n128 a3)
{
  *a2 = &off_24D933320;
  return std::set<turi::flexible_type>::set[abi:ne180100](a2 + 1, a1 + 8, a3);
}

void std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  std::__tree<turi::flexible_type>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
}

void std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(_QWORD **a1)
{
  std::__tree<turi::flexible_type>::destroy((uint64_t)(a1 + 1), a1[2]);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2[12] == 7 || (v5 = *(_QWORD *)(*(_QWORD *)a2 + 8), v6 = *(_QWORD *)(*(_QWORD *)a2 + 16), v5 == v6))
  {
LABEL_7:
    v8 = 0;
  }
  else
  {
    v7 = result + 8;
    v8 = 1;
    while (1)
    {
      if (*(_BYTE *)(v5 + 12) != 7)
      {
        result = std::__tree<turi::flexible_type>::__count_unique<turi::flexible_type>(v7, v5, a4);
        if (result)
          break;
      }
      v5 += 32;
      if (v5 == v6)
        goto LABEL_7;
    }
  }
  *(_BYTE *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = v8;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24D9333A0;
  v3 = (void **)(a1 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = off_24D9333A0;
  v3 = (void **)(a1 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C4030951706);
}

_QWORD *std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  *v2 = off_24D9333A0;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v2 + 1, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4);
  return v2;
}

void sub_218231628(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24D9333A0;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a2 + 1, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4);
}

void std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, const turi::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const turi::flexible_type *v6;
  const turi::flexible_type *v7;
  unsigned int has_key;
  char v9;
  unsigned __int8 **v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if (*((_BYTE *)a2 + 12) == 7)
  {
    v4 = 0;
  }
  else
  {
    turi::flex_dict_view::flex_dict_view((turi::flex_dict_view *)&v10, a2);
    v6 = *(const turi::flexible_type **)(a1 + 8);
    v7 = *(const turi::flexible_type **)(a1 + 16);
    if (v6 == v7)
    {
      v4 = 1;
    }
    else
    {
      do
      {
        has_key = turi::flex_dict_view::has_key(&v10, v6);
        v6 = (const turi::flexible_type *)((char *)v6 + 16);
        if (v6 == v7)
          v9 = 0;
        else
          v9 = has_key;
      }
      while ((v9 & 1) != 0);
      v4 = has_key;
    }
    v13 = (void **)&v12;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v13);
    v13 = (void **)&v11;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v13);
  }
  *(_BYTE *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = v4;
}

void sub_21823177C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 40) = &a13;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 40));
  *(_QWORD *)(v13 - 40) = &a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1,std::allocator<turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::set<turi::flex_type_enum>::set[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v5 = a3;
    do
    {
      std::__tree<turi::flex_type_enum>::__emplace_hint_unique_key_args<turi::flex_type_enum,turi::flex_type_enum const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      --v5;
    }
    while (v5);
  }
  return a1;
}

void sub_218231858(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::unity_sarray::item_length(void)::$_1,std::allocator<turi::unity_sarray::item_length(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::item_length(void)::$_1,std::allocator<turi::unity_sarray::item_length(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933420;
  return result;
}

void std::__function::__func<turi::unity_sarray::item_length(void)::$_1,std::allocator<turi::unity_sarray::item_length(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933420;
}

void std::__function::__func<turi::unity_sarray::item_length(void)::$_1,std::allocator<turi::unity_sarray::item_length(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = 1;
  switch(a1[12])
  {
    case 3:
      v3 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v4 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v5 = 3;
      goto LABEL_5;
    case 4:
      v3 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v4 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v5 = 4;
      goto LABEL_5;
    case 5:
      v3 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v4 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v5 = 5;
LABEL_5:
      v2 = (uint64_t)(*v4 - *v3) >> v5;
      goto LABEL_6;
    case 7:
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 12) = 0;
      if (a1 != (_BYTE *)a2)
      {
        *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 5);
        *(_QWORD *)a2 = *(_QWORD *)a1;
        *(_BYTE *)(a2 + 12) = 7;
      }
      return;
    case 9:
      v7 = *(uint64_t **)(*(_QWORD *)a1 + 24);
      v6 = *(uint64_t **)(*(_QWORD *)a1 + 32);
      if (v6 == v7)
      {
        v2 = 0;
      }
      else
      {
        v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
        if (v2)
        {
          v2 = 1;
          do
          {
            v8 = *v7++;
            v2 *= v8;
          }
          while (v7 != v6);
        }
      }
      goto LABEL_6;
    default:
LABEL_6:
      *(_BYTE *)(a2 + 12) = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(_QWORD *)a2 = v2;
      return;
  }
}

uint64_t std::__function::__func<turi::unity_sarray::item_length(void)::$_1,std::allocator<turi::unity_sarray::item_length(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<turi::unity_sarray::item_length(void)::$_1,std::allocator<turi::unity_sarray::item_length(void)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(a1, a2[1]);
    std::pair<turi::flexible_type const,turi::flex_type_enum>::~pair((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, __n128 a3, uint64_t a4, void **a5)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;

  v7 = (uint64_t **)std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>((uint64_t)a1, &v12, a2, a3);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)a1, a5, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, void **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  unint64_t **v7;
  _QWORD *v8;
  unint64_t *v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  unint64_t *v14;
  unint64_t v15;

  v5 = a1 + 8;
  result = operator new(0x38uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result[4] = 0;
  v7 = (unint64_t **)(result + 4);
  v8 = *a2;
  *((_DWORD *)result + 10) = 0;
  *((_BYTE *)result + 44) = 0;
  if (v8 != result + 4)
  {
    v9 = (unint64_t *)*v8;
    *(_QWORD *)((char *)result + 37) = *(_QWORD *)((char *)v8 + 5);
    *v7 = v9;
    v10 = *((unsigned __int8 *)v8 + 12);
    *((_BYTE *)result + 44) = v10;
    v11 = v10 > 9;
    v12 = (1 << v10) & 0x33C;
    if (!v11 && v12 != 0)
    {
      v14 = *v7;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
  *((_BYTE *)result + 48) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<turi::flexible_type const,turi::flex_type_enum>::~pair((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::generic_aggregator(uint64_t a1, __int16 a2, uint64_t a3, __n128 a4)
{
  __n128 v6;

  *(_QWORD *)a1 = off_24D9334A0;
  *(_WORD *)(a1 + 8) = a2;
  std::map<turi::flexible_type,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)(a1 + 16), a3, a4);
  std::map<turi::flexible_type,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)(a1 + 40), a3, v6);
  return a1;
}

void sub_218231C30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(v2, *(_QWORD **)(v1 + 24));
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::~generic_aggregator(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D9334A0;
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

uint64_t turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::new_instance(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;

  v2 = operator new();
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::generic_aggregator(v2, *(_WORD *)(a1 + 8), a1 + 16, v3);
  return v2;
}

void sub_218231CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C408284B88BLL);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::add_element_simple(uint64_t a1, unsigned __int8 *a2, __n128 a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  char v9;
  size_t v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v25;
  double v26;
  char *v27;
  char *i;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  double v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  char v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;

  switch(byte_254FF281C)
  {
    case 0:
      switch(a2[12])
      {
        case 0u:
          if (*(_QWORD *)a2 == turi::FLEX_UNDEFINED)
            return;
          goto LABEL_52;
        case 1u:
          a3.n128_u64[0] = *(_QWORD *)a2;
          v5 = turi::FLEX_UNDEFINED;
          goto LABEL_102;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_52;
        case 6u:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2))
            return;
          goto LABEL_52;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(a2[12])
      {
        case 0u:
          a3.n128_u64[0] = turi::FLEX_UNDEFINED;
          v5 = *(_QWORD *)a2;
LABEL_102:
          v68 = (double)v5;
          goto LABEL_103;
        case 1u:
          a3.n128_u64[0] = *(_QWORD *)a2;
          v68 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_103:
          if (a3.n128_f64[0] != v68)
            goto LABEL_52;
          return;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_52;
        case 6u:
          a3.n128_f64[0] = vabdd_f64((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_111;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v6 = a2[12];
      if (v6 - 3 < 7 || v6 < 2)
        goto LABEL_52;
      if (v6 != 2)
        turi::apply_binary_op_ff();
      v8 = *(_QWORD *)a2;
      v9 = *(_BYTE *)(*(_QWORD *)a2 + 31);
      v10 = v9 < 0 ? *(_QWORD *)(v8 + 16) : *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
      v69 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
          ? *(_QWORD *)(turi::FLEX_UNDEFINED + 16)
          : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v10 != v69)
        goto LABEL_52;
      v70 = (unsigned __int8 *)(v8 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
        v70 = *(unsigned __int8 **)v70;
      v71 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v71 = *(unsigned __int8 **)v71;
      if (v9 < 0)
      {
        if (memcmp(v70, v71, v10))
          goto LABEL_52;
      }
      else
      {
        if (!v10)
          return;
        do
        {
          if (*v70 != *v71)
            goto LABEL_52;
          ++v70;
          ++v71;
          --v10;
        }
        while (v10);
      }
      return;
    case 3:
      v11 = a2[12];
      if (v11 > 9)
        turi::apply_binary_op_ff();
      if (v11 == 3)
      {
        v12 = *(unint64_t **)(*(_QWORD *)a2 + 8);
        v13 = *(unint64_t **)(*(_QWORD *)a2 + 16);
        v14 = v13 - v12;
        v15 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v14 == (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v15) >> 3)
        {
          if (v13 == v12)
            return;
          v16 = v14 <= 1 ? 1 : v13 - v12;
          a3.n128_u64[0] = *v12;
          if (*(double *)v12 == *v15)
          {
            v17 = 1;
            do
            {
              v18 = v17;
              if (v16 == v17)
                break;
              a3.n128_u64[0] = v12[v17];
              v19 = v15[v17++];
            }
            while (a3.n128_f64[0] == v19);
            if (v18 >= v14)
              return;
          }
        }
      }
      goto LABEL_52;
    case 4:
      v20 = a2[12];
      if (v20 > 9)
        turi::apply_binary_op_ff();
      if (v20 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v72, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        return;
      }
      goto LABEL_52;
    case 5:
      v21 = a2[12];
      if (v21 > 9)
        turi::apply_binary_op_ff();
      if (v21 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v72, (uint64_t **)(*(_QWORD *)a2 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        return;
      }
      goto LABEL_52;
    case 6:
      switch(a2[12])
      {
        case 0u:
          if (*(_QWORD *)a2 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF2818)
            return;
          goto LABEL_52;
        case 1u:
          a3.n128_f64[0] = vabdd_f64(*(double *)a2, (double)dword_254FF2818 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_111:
          if (a3.n128_f64[0] < 0.0000005)
            return;
          goto LABEL_52;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_52;
        case 6u:
          if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)a2 + 2) == dword_254FF2818)
          {
            return;
          }
          goto LABEL_52;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v22 = a2[12];
      if (v22 < 7 || v22 - 8 < 2)
        goto LABEL_52;
      if (v22 != 7)
        turi::apply_binary_op_ff();
      return;
    case 8:
      v23 = a2[12];
      if (v23 >= 8 && v23 != 9)
      {
        if (v23 != 8)
          turi::apply_binary_op_ff();
        if (turi::image_type::operator==(*(_QWORD *)a2 + 8, turi::FLEX_UNDEFINED + 8))
          return;
      }
      goto LABEL_52;
    case 9:
      v25 = a2[12];
      if (v25 < 9)
        goto LABEL_52;
      if (v25 != 9)
        turi::apply_binary_op_ff();
      v33 = turi::FLEX_UNDEFINED;
      v34 = *(_QWORD **)a2;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)a2)
        return;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v34 + 1), turi::FLEX_UNDEFINED + 8))
        goto LABEL_52;
      v36 = (char *)v34[3];
      v35 = (char *)v34[4];
      v37 = v35 - v36;
      if (v35 == v36)
        return;
      if (!v34[1])
        return;
      v38 = 1;
      do
      {
        v39 = *(_QWORD *)v36;
        v36 += 8;
        v38 *= v39;
      }
      while (v36 != v35);
      if (!v38)
        return;
      v73 = 0;
      std::vector<unsigned long>::vector(&v74, v37 >> 3, &v73);
      v40 = (uint64_t *)v74;
      v41 = v75;
      v42 = **(_QWORD **)(v33 + 8);
      v43 = (char *)v75 - v74;
      v44 = ((char *)v75 - v74) >> 3;
      v45 = v44 - 1;
      if (v44 <= 1)
        v46 = 1;
      else
        v46 = ((char *)v75 - v74) >> 3;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    if (v41 == v40)
    {
      v54 = 0;
      a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v34[1] + 8 * v34[9]);
    }
    else
    {
      v47 = 0;
      v48 = (uint64_t *)v34[6];
      v49 = v40;
      v50 = v46;
      do
      {
        v52 = *v49++;
        v51 = v52;
        v53 = *v48++;
        v47 += v53 * v51;
        --v50;
      }
      while (v50);
      v54 = 0;
      a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v34[1] + 8 * (v34[9] + v47));
      v55 = *(uint64_t **)(v33 + 48);
      v56 = v40;
      v57 = v46;
      do
      {
        v59 = *v56++;
        v58 = v59;
        v60 = *v55++;
        v54 += v60 * v58;
        --v57;
      }
      while (v57);
    }
    if (a3.n128_f64[0] != *(double *)(v42 + 8 * (*(_QWORD *)(v33 + 72) + v54)))
      break;
    v61 = v44;
    v62 = v44 - 1;
    if (v43 >= 1)
    {
      v63 = v34[3];
      v64 = v40[v45] + 1;
      v40[v45] = v64;
      v65 = (v43 & 0xFFFFFFFFFFFFFFF8) - 16;
      v62 = v44 - 1;
      if (v64 >= *(_QWORD *)(v63 + 8 * v45))
      {
        while (1)
        {
          *(uint64_t *)((char *)v40 + v65 + 8) = 0;
          if (v62 <= 0)
            break;
          --v62;
          v66 = *(uint64_t *)((char *)v40 + v65) + 1;
          *(uint64_t *)((char *)v40 + v65) = v66;
          v67 = *(_QWORD *)(v63 + v65);
          v65 -= 8;
          if (v66 < v67)
          {
            v61 = 1;
            goto LABEL_97;
          }
        }
LABEL_100:
        v75 = v40;
        operator delete(v40);
        return;
      }
      v61 = 1;
      v62 = v44 - 1;
    }
LABEL_97:
    if (!v61 || v62 < 0)
    {
      if (!v40)
        return;
      goto LABEL_100;
    }
  }
  if (v40)
  {
    v75 = v40;
    operator delete(v40);
  }
LABEL_52:
  v26 = *(double *)a2;
  v27 = *(char **)(*(_QWORD *)a2 + 8);
  for (i = *(char **)(*(_QWORD *)&v26 + 16); v27 != i; v27 += 32)
  {
    v29 = v27[28];
    v30 = v27[28];
    v31 = std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::find<turi::flexible_type>(a1 + 40, (uint64_t)v27, a3);
    if ((_QWORD *)(a1 + 48) == v31)
    {
      if (!*(_BYTE *)(a1 + 8))
      {
        v74 = v27;
        *((_BYTE *)std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t **)(a1 + 40), (uint64_t)v27, a3, (uint64_t)&std::piecewise_construct, (void **)&v74)+ 48) = v30;
      }
    }
    else
    {
      v32 = *((unsigned __int8 *)v31 + 48);
      if (v30 != 7)
      {
        if (v32 == 7)
        {
          LOBYTE(v32) = v30;
        }
        else if (v30 || v32 != 1)
        {
          if (v30 != 1 || *((_BYTE *)v31 + 48))
          {
            if (!turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * (int)v29 + *((char *)v31 + 48)])
            {
              if (turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * *((char *)v31 + 48) + v29])
                LOBYTE(v32) = v30;
              else
                LOBYTE(v32) = 2;
            }
          }
          else
          {
            LOBYTE(v32) = 1;
          }
        }
      }
      v74 = v27;
      *((_BYTE *)std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t **)(a1 + 40), (uint64_t)v27, a3, (uint64_t)&std::piecewise_construct, (void **)&v74)+ 48) = v32;
    }
  }
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::combine()
{
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()();
}

uint64_t turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::emit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 __p;
  char v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v8 = v13;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *> *,long>>>((uint64_t)&v8, *(_QWORD **)(a1 + 40), (_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2, &__p);
  if (v7 < 0)
    operator delete((void *)__p);
  v12[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v4;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v15);
}

void sub_218232520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::support_type()
{
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::name()
{
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::name(void)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::save()
{
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::load()
{
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::~generic_aggregator(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D9334A0;
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::find<turi::flexible_type>(uint64_t a1, uint64_t a2, __n128 a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;

  v3 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (!v4)
    return v3;
  v6 = a1 + 16;
  v7 = (_QWORD *)(a1 + 8);
  do
  {
    v8 = std::less<turi::flexible_type>::operator()[abi:ne180100](a3, v6, (uint64_t)(v4 + 4), a2);
    v9 = v4 + 1;
    if (!v8)
    {
      v9 = v4;
      v7 = v4;
    }
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v7 == v3 || std::less<turi::flexible_type>::operator()[abi:ne180100](a3, v6, a2, (uint64_t)(v7 + 4)))
    return v3;
  return v7;
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218232754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *> *,long>>>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  size_t v14;
  uint64_t *v15;
  size_t v16;
  BOOL v17;
  std::vector<char>::size_type v18;

  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v9)
    {
      v14 = 2 * v9 + 16;
      *(_QWORD *)(a1 + 40) = v14;
      v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        result = *v15;
        v16 = v15[1] - *v15;
        v17 = v14 >= v16;
        v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = result + v14;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = a4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive,std::pair<turi::flexible_type const,turi::flex_type_enum>,false,void>::exec(a1, a2 + 4);
      v11 = (_QWORD *)a2[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)a2[2];
          v13 = *v12 == (_QWORD)a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4)
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  return result;
}

_BYTE *turi::archive_detail::serialize_impl<turi::oarchive,std::pair<turi::flexible_type const,turi::flex_type_enum>,false,void>::exec(uint64_t a1, uint64_t *a2)
{
  _BYTE *v4;
  _BYTE *result;
  unint64_t v6;
  size_t v7;
  _QWORD *v8;
  size_t v9;
  BOOL v10;
  std::vector<char>::size_type v11;

  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, a2);
  v4 = a2 + 2;
  if (*(_QWORD *)a1)
    return (_BYTE *)std::ostream::write();
  v6 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + 1 > v6)
  {
    v7 = 2 * v6 + 2;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *(_QWORD **)(a1 + 16);
    if (v8)
    {
      result = (_BYTE *)*v8;
      v9 = v8[1] - *v8;
      v10 = v7 >= v9;
      v11 = v7 - v9;
      if (v11 != 0 && v10)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v11);
        result = **(_BYTE ***)(a1 + 16);
      }
      else if (!v10)
      {
        v8[1] = &result[v7];
      }
    }
    else
    {
      result = malloc_type_realloc(*(void **)(a1 + 24), v7, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = result;
  }
  else
  {
    result = *(_BYTE **)(a1 + 24);
  }
  result[(*(_QWORD *)(a1 + 32))++] = *v4;
  return result;
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218232B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::name(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218232C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218232E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218232F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::deserialize_iterator<turi::iarchive,std::pair<turi::flexible_type,turi::flex_type_enum>,std::insert_iterator<std::map<turi::flexible_type,turi::flex_type_enum>>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  turi::iarchive *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  __n128 v7;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v12[2];
  _BYTE v13[13];
  char v14;
  _QWORD v15[2];
  char v16;
  uint64_t v17;

  v3 = (turi::iarchive *)result;
  v17 = *MEMORY[0x24BDAC8D0];
  v12[0] = a2;
  v12[1] = a3;
  v4 = *(_QWORD *)(result + 16);
  if (!v4)
    return std::istream::read();
  v5 = *(_QWORD *)(result + 24);
  v11 = *(_QWORD *)(v4 + v5);
  *(_QWORD *)(result + 24) = v5 + 8;
  if (v11)
  {
    for (i = 0; i < v11; ++i)
    {
      memset(v15, 0, 13);
      v16 = 0;
      turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,turi::flex_type_enum>,false,void>::exec(v3, (uint64_t)v15);
      *(_QWORD *)&v13[5] = *(_QWORD *)((char *)v15 + 5);
      *(_QWORD *)v13 = v15[0];
      v13[12] = BYTE4(v15[1]);
      if (BYTE4(v15[1]) <= 9u && ((1 << SBYTE4(v15[1])) & 0x33C) != 0)
      {
        v9 = *(unint64_t **)v13;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
      }
      v14 = v16;
      std::insert_iterator<std::map<turi::flexible_type,turi::flex_type_enum>>::operator=[abi:ne180100]((uint64_t)v12, (uint64_t)v13, v7);
      std::pair<turi::flexible_type const,turi::flex_type_enum>::~pair((uint64_t)v13);
      result = std::pair<turi::flexible_type,turi::flex_type_enum>::~pair((uint64_t)v15);
    }
  }
  return result;
}

void sub_21823314C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::insert_iterator<std::map<turi::flexible_type,turi::flex_type_enum>>::operator=[abi:ne180100](uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;

  v4 = std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flex_type_enum>>(*(uint64_t ***)a1, *(_QWORD **)(a1 + 8), a2, a2, a3);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (uint64_t *)v4[1];
  if (v5)
  {
    do
    {
      v6 = v5;
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  else
  {
    do
    {
      v6 = (uint64_t *)v4[2];
      v7 = *v6 == (_QWORD)v4;
      v4 = v6;
    }
    while (!v7);
  }
  *(_QWORD *)(a1 + 8) = v6;
  return a1;
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,turi::flex_type_enum>,false,void>::exec(turi::iarchive *a1, uint64_t a2)
{
  uint64_t v4;

  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1, (_QWORD **)a2);
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
    *(_BYTE *)(a2 + 16) = *(_BYTE *)(v4 + (*((_QWORD *)a1 + 3))++);
  else
    std::istream::read();
}

uint64_t *std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flex_type_enum>>(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  char *v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v18[2];
  char v19;
  uint64_t v20;
  uint64_t v21;

  v7 = std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>(a1, a2, &v21, &v20, a3, a5);
  v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v10 = (char *)operator new(0x38uLL);
    v18[0] = v10;
    v18[1] = a1 + 1;
    *((_QWORD *)v10 + 4) = *(_QWORD *)a4;
    v19 = 0;
    *(_QWORD *)(v10 + 37) = *(_QWORD *)(a4 + 5);
    v11 = *(unsigned __int8 *)(a4 + 12);
    v10[44] = v11;
    v12 = v11 > 9;
    v13 = (1 << v11) & 0x33C;
    v14 = v12 || v13 == 0;
    v8 = (uint64_t *)v10;
    if (!v14)
    {
      v15 = (unint64_t *)*((_QWORD *)v10 + 4);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      v8 = (uint64_t *)v18[0];
    }
    v10[48] = *(_BYTE *)(a4 + 16);
    v19 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v21, v9, v8);
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>>>>::reset[abi:ne180100]((uint64_t)v18, 0);
  }
  return v8;
}

uint64_t std::pair<turi::flexible_type,turi::flex_type_enum>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

uint64_t *std::map<turi::flexible_type,turi::flex_type_enum>::map[abi:ne180100](uint64_t *a1, uint64_t a2, __n128 a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<turi::flexible_type,turi::flex_type_enum>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_218233574(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<turi::flexible_type,turi::flex_type_enum>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  _QWORD *v5;
  uint64_t **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  if (a2 != a3)
  {
    v5 = a2;
    v6 = (uint64_t **)result;
    v7 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flex_type_enum> const&>(v6, v7, (uint64_t)(v5 + 4), (_BYTE *)v5 + 32, a4);
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flex_type_enum> const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, _BYTE *a4, __n128 a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;
  uint64_t v13;

  v7 = std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>(a1, a2, &v13, &v12, a3, a5);
  v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__construct_node<std::pair<turi::flexible_type const,turi::flex_type_enum> const&>((uint64_t)a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v13, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flex_type_enum>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__construct_node<std::pair<turi::flexible_type const,turi::flex_type_enum> const&>@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  unint64_t **v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;

  v5 = a1 + 8;
  result = operator new(0x38uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result[4] = 0;
  v7 = (unint64_t **)(result + 4);
  *((_DWORD *)result + 10) = 0;
  *((_BYTE *)result + 44) = 0;
  if (result + 4 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)result + 37) = *(_QWORD *)(a2 + 5);
    *v7 = *(unint64_t **)a2;
    v8 = a2[12];
    *((_BYTE *)result + 44) = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0)
    {
      v9 = *v7;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  *((_BYTE *)result + 48) = a2[16];
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

char *std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(4 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

_QWORD *std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D933540;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D933540;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x20uLL);
  *v2 = &off_24D933540;
  std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::vector(v2 + 1, v1);
  return v2;
}

void sub_218233858(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933540;
  return std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::vector(a2 + 1, a1 + 8);
}

void std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::operator()(uint64_t result, uint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  _OWORD v44[2];
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (*(_BYTE *)(****(_QWORD ****)a2 + 16 * *(_QWORD *)(a2 + 8) + 12) == 7)
  {
    v4 = **a3;
    if ((*a3)[1] != v4)
    {
      v5 = 0;
      do
      {
        v6 = **(_QWORD **)(v4 + 16 * v5) + 16 * (_QWORD)a3[1];
        switch(*(_BYTE *)(v6 + 12))
        {
          case 2:
            v7 = *(unint64_t **)v6;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              v10 = *(unint64_t **)v6;
              if (*(_QWORD *)v6)
              {
                if (*((char *)v10 + 31) < 0)
                  operator delete((void *)v10[1]);
                v11 = v10;
                v12 = 0x1012C404EF22A49;
                goto LABEL_45;
              }
            }
            break;
          case 3:
            v13 = *(unint64_t **)v6;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v16 = *(unint64_t **)v6;
              if (*(_QWORD *)v6)
              {
                v17 = (void *)v16[1];
                if (v17)
                {
                  v16[2] = (unint64_t)v17;
                  operator delete(v17);
                }
                v11 = v16;
                v12 = 0x1080C409938AC02;
                goto LABEL_45;
              }
            }
            break;
          case 4:
            v18 = *(unint64_t **)v6;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v21 = *(unint64_t **)v6;
              if (*(_QWORD *)v6)
              {
                *(_QWORD *)&v44[0] = v21 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
                goto LABEL_29;
              }
            }
            break;
          case 5:
            v22 = *(unint64_t **)v6;
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              v21 = *(unint64_t **)v6;
              if (*(_QWORD *)v6)
              {
                *(_QWORD *)&v44[0] = v21 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
LABEL_29:
                v11 = v21;
                v12 = 0x1020C405E66F15BLL;
                goto LABEL_45;
              }
            }
            break;
          case 8:
            v25 = *(unint64_t **)v6;
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v28 = *(unint64_t **)v6;
              if (*(_QWORD *)v6)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)v28 + 2);
                v11 = v28;
                v29 = -235920773;
                goto LABEL_44;
              }
            }
            break;
          case 9:
            v30 = *(unint64_t **)v6;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = *(unint64_t **)v6;
              if (*(_QWORD *)v6)
              {
                v34 = (void *)v33[6];
                if (v34)
                {
                  v33[7] = (unint64_t)v34;
                  operator delete(v34);
                }
                v35 = (void *)v33[3];
                if (v35)
                {
                  v33[4] = (unint64_t)v35;
                  operator delete(v35);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
                v11 = v33;
                v29 = 2071181815;
LABEL_44:
                v12 = v29 | 0x1030C4000000000;
LABEL_45:
                result = MEMORY[0x219A19A08](v11, v12);
              }
            }
            break;
          default:
            break;
        }
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
        *(_BYTE *)(v6 + 12) = 7;
        ++v5;
        v4 = **a3;
      }
      while (v5 < ((*a3)[1] - v4) >> 4);
    }
  }
  else
  {
    v36 = result;
    if (*(_QWORD *)(result + 16) != *(_QWORD *)(result + 8))
    {
      v37 = (uint64_t *)(****(_QWORD ****)a2 + 16 * *(_QWORD *)(a2 + 8));
      v38 = *v37 >> 56;
      if ((int)v38 < 0)
        v39 = 25;
      else
        v39 = -25;
      v40 = v39 + v38;
      if (v40 == 64)
        v41 = 0;
      else
        v41 = 900 * v40;
      v47 = turi::flexible_type_impl::ptime_from_time_t((*v37 << 8 >> 8) + v41, 0);
      v46 = 0;
      v45 = 0u;
      memset(v44, 0, sizeof(v44));
      LODWORD(v48) = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v47);
      boost::gregorian::to_tm((boost::gregorian *)&v48, (uint64_t)v44);
      v42 = v47;
      v43 = 0x7FFFFFFFFFFFFFFELL;
      if (v47 == 0x8000000000000000)
        v43 = 0x8000000000000000;
      if (v47 != 0x7FFFFFFFFFFFFFFFLL)
        v42 = v43;
      if ((unint64_t)(v47 - 0x7FFFFFFFFFFFFFFELL) > 2)
        v42 = v47 % 86400000000;
      LODWORD(v44[0]) = (int)(v42 / 1000000) % 60;
      DWORD1(v44[0]) = (int)(v42 / 60000000) % 60;
      DWORD2(v44[0]) = (int)v42 / -694967296;
      LODWORD(v45) = -1;
      __asm { BR              X9 }
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::target_type()
{
}

_QWORD *std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D9335D0;
  turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::~$_0((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D9335D0;
  turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::~$_0((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = &off_24D9335D0;
  std::__compressed_pair_elem<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2182354EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D9335D0;
  return std::__compressed_pair_elem<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::~$_0(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::~$_0((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::operator()(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::operator()((unsigned __int8 *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,std::allocator<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0>,void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  unint64_t **v4;
  unint64_t *v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((_QWORD *)(a1 + 8), *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4);
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (unint64_t **)(a1 + 32);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  if (a2 != a1)
  {
    v5 = *(unint64_t **)(a2 + 32);
    *(_QWORD *)(a1 + 37) = *(_QWORD *)(a2 + 37);
    *v4 = v5;
    v6 = *(unsigned __int8 *)(a2 + 44);
    *(_BYTE *)(a1 + 44) = v6;
    if (v6 <= 9 && ((1 << v6) & 0x33C) != 0)
    {
      v7 = *v4;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  return a1;
}

void turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::operator()(unsigned __int8 *a1, uint64_t a2, uint64_t **a3)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  void *v22;
  void *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  unint64_t *v41;
  unint64_t v42;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char v50;
  unsigned __int8 *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t *v81;
  void **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int v95;
  BOOL v96;
  double v97;
  int v98;
  uint64_t v99;
  size_t v100;
  unsigned int v101;
  double *v102;
  double *v103;
  uint64_t v104;
  unint64_t v105;
  double *v106;
  unsigned int v107;
  double v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t *v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  void *v128;
  void *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  void *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t *v141;
  uint64_t v142;
  unsigned int v143;
  double v144;
  double v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t *v159;
  void *v160;
  void *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  void *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  uint64_t v183;
  unsigned __int8 *v184;
  unsigned int v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  _QWORD *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void **v195;
  void **v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  void **v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  double v210;
  uint64_t *v211;
  void **v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  double v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unsigned int v225;
  double v227;
  char v228;
  size_t v229;
  unsigned int v230;
  double *v231;
  double *v232;
  unint64_t v233;
  double *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  double v238;
  double v239;
  unsigned int v240;
  double v241;
  uint64_t v242;
  unsigned int v243;
  unsigned int v244;
  unsigned __int8 *v246;
  uint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t *v261;
  void *v262;
  void *v263;
  unsigned int v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  void *v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  double v279;
  double v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t *v284;
  unint64_t *v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t *v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t *v294;
  void *v295;
  void *v296;
  unsigned int v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t *v301;
  void *v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t *v309;
  uint64_t v310;
  int v311;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned __int8 *v317;
  unsigned __int8 *v318;
  uint64_t v319;
  unint64_t v320;
  int v321;
  unint64_t v322;
  _QWORD *v323;
  _QWORD *v324;
  char v325;
  _QWORD *v326;
  unint64_t v327;
  uint64_t *v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  unsigned __int8 *v333;
  BOOL v334;
  unsigned int v335;
  BOOL v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t v339;
  double v340;
  unsigned int v341;
  unint64_t *v342;
  unint64_t v343;
  unint64_t v344;
  double v345;
  void *v346;
  void *v347;
  double v348;
  unsigned int v349;
  unsigned int v350;
  unint64_t *v351;
  unint64_t v352;
  unint64_t v353;
  double v354;
  uint64_t v355;
  unsigned int v356;
  unint64_t *v357;
  unint64_t v358;
  unint64_t v359;
  double v360;
  void *v361;
  unsigned int v362;
  double v363;
  uint64_t v364;
  unsigned int v365;
  unint64_t *v366;
  unint64_t v367;
  unint64_t v368;
  unsigned int v369;
  unint64_t *v370;
  unint64_t v371;
  unint64_t v372;
  double v373;
  uint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t *v378;
  unint64_t *v379;
  uint64_t v380;
  int v381;
  unint64_t *v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t *v385;
  unint64_t *v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t *v389;
  void *v390;
  void *v391;
  unsigned int v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t *v396;
  void *v397;
  unint64_t *v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t *v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t *v404;
  uint64_t v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t *v408;
  unint64_t v409;
  unint64_t *v410;
  unint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  unint64_t *v414;
  unint64_t v415;
  unint64_t *v416;
  unint64_t v417;
  int v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t *v421;
  unsigned __int8 *v422;
  char v423;
  uint64_t v424;
  char *v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  void **v430;
  void **v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  void **v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  double v445;
  uint64_t *v446;
  void **v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  double v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t *v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  size_t v464;
  double *v465;
  double *v466;
  unint64_t v467;
  double *v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  double v472;
  double v473;
  double v474;
  void *v475;
  _QWORD *v476;
  void **v477;
  size_t v478;
  int v479;
  int v480;
  int v481;
  int v482;
  char v483;
  uint64_t v484;
  double v485;
  void **v486;
  void **v487;
  uint64_t v488;
  char v489;
  uint64_t v490;
  uint64_t v491;
  double v492;
  void **v493;
  uint64_t v494;

  v494 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 *)(****(_QWORD ****)a2 + 16 * *(_QWORD *)(a2 + 8));
  if (v4[12] == 7)
  {
    v5 = **a3;
    if ((*a3)[1] != v5)
    {
      v6 = 0;
      do
      {
        v7 = **(_QWORD **)(v5 + 16 * v6) + 16 * (_QWORD)a3[1];
        if ((uint64_t *)v7 != &turi::FLEX_UNDEFINED)
        {
          switch(*(_BYTE *)(v7 + 12))
          {
            case 2:
              v8 = *(unint64_t **)v7;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
              {
                v11 = *(unint64_t **)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_47;
                if (*((char *)v11 + 31) < 0)
                  operator delete((void *)v11[1]);
                v12 = v11;
                v13 = 0x1012C404EF22A49;
                goto LABEL_46;
              }
              break;
            case 3:
              v25 = *(unint64_t **)v7;
              do
              {
                v26 = __ldaxr(v25);
                v27 = v26 - 1;
              }
              while (__stlxr(v27, v25));
              if (!v27)
              {
                v28 = *(unint64_t **)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_47;
                v29 = (void *)v28[1];
                if (v29)
                {
                  v28[2] = (unint64_t)v29;
                  operator delete(v29);
                }
                v12 = v28;
                v13 = 0x1080C409938AC02;
                goto LABEL_46;
              }
              break;
            case 4:
              v14 = *(unint64_t **)v7;
              do
              {
                v15 = __ldaxr(v14);
                v16 = v15 - 1;
              }
              while (__stlxr(v16, v14));
              if (!v16)
              {
                v17 = *(unint64_t **)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_47;
                v486 = (void **)(v17 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v486);
                goto LABEL_39;
              }
              break;
            case 5:
              v30 = *(unint64_t **)v7;
              do
              {
                v31 = __ldaxr(v30);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v30));
              if (!v32)
              {
                v17 = *(unint64_t **)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_47;
                v486 = (void **)(v17 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v486);
LABEL_39:
                v12 = v17;
                v13 = 0x1020C405E66F15BLL;
                goto LABEL_46;
              }
              break;
            case 8:
              v33 = *(unint64_t **)v7;
              do
              {
                v34 = __ldaxr(v33);
                v35 = v34 - 1;
              }
              while (__stlxr(v35, v33));
              if (!v35)
              {
                v36 = *(unint64_t **)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_47;
                boost::detail::shared_count::~shared_count((unsigned int **)v36 + 2);
                v12 = v36;
                v24 = -235920773;
                goto LABEL_45;
              }
              break;
            case 9:
              v18 = *(unint64_t **)v7;
              do
              {
                v19 = __ldaxr(v18);
                v20 = v19 - 1;
              }
              while (__stlxr(v20, v18));
              if (!v20)
              {
                v21 = *(unint64_t **)v7;
                if (*(_QWORD *)v7)
                {
                  v22 = (void *)v21[6];
                  if (v22)
                  {
                    v21[7] = (unint64_t)v22;
                    operator delete(v22);
                  }
                  v23 = (void *)v21[3];
                  if (v23)
                  {
                    v21[4] = (unint64_t)v23;
                    operator delete(v23);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v21 + 1));
                  v12 = v21;
                  v24 = 2071181815;
LABEL_45:
                  v13 = v24 | 0x1030C4000000000;
LABEL_46:
                  MEMORY[0x219A19A08](v12, v13);
                }
LABEL_47:
                *(_QWORD *)v7 = 0;
              }
              break;
            default:
              break;
          }
          v37 = turi::FLEX_UNDEFINED;
          *(_QWORD *)(v7 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
          *(_QWORD *)v7 = v37;
          LODWORD(v37) = byte_254FF281C;
          *(_BYTE *)(v7 + 12) = byte_254FF281C;
          v38 = v37 > 9;
          v39 = (1 << v37) & 0x33C;
          if (!v38 && v39 != 0)
          {
            v41 = *(unint64_t **)v7;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 + 1, v41));
          }
        }
        ++v6;
        v5 = **a3;
      }
      while (v6 < ((*a3)[1] - v5) >> 4);
    }
    return;
  }
  v44 = *a1;
  if (v44 == 5)
  {
    turi::flex_dict_view::flex_dict_view((turi::flex_dict_view *)&v486, (const turi::flexible_type *)(****(_QWORD ****)a2 + 16 * *(_QWORD *)(a2 + 8)));
    if ((*a3)[1] == **a3)
    {
LABEL_747:
      v492 = COERCE_DOUBLE(&v488);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v492);
      v492 = COERCE_DOUBLE(&v487);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v492);
      return;
    }
    v183 = 0;
    while (!turi::flex_dict_view::has_key((unsigned __int8 ***)&v486, (const turi::flexible_type *)(*((_QWORD *)a1 + 1) + 16 * v183)))
    {
LABEL_419:
      v247 = **(_QWORD **)(**a3 + 16 * v183) + 16 * (_QWORD)a3[1];
      if ((uint64_t *)v247 != &turi::FLEX_UNDEFINED)
      {
        switch(*(_BYTE *)(v247 + 12))
        {
          case 2:
            v281 = *(unint64_t **)v247;
            do
            {
              v282 = __ldaxr(v281);
              v283 = v282 - 1;
            }
            while (__stlxr(v283, v281));
            if (!v283)
            {
              v284 = *(unint64_t **)v247;
              if (!*(_QWORD *)v247)
                goto LABEL_462;
              if (*((char *)v284 + 31) < 0)
                operator delete((void *)v284[1]);
              v285 = v284;
              v286 = 0x1012C404EF22A49;
              goto LABEL_461;
            }
            break;
          case 3:
            v298 = *(unint64_t **)v247;
            do
            {
              v299 = __ldaxr(v298);
              v300 = v299 - 1;
            }
            while (__stlxr(v300, v298));
            if (!v300)
            {
              v301 = *(unint64_t **)v247;
              if (!*(_QWORD *)v247)
                goto LABEL_462;
              v302 = (void *)v301[1];
              if (v302)
              {
                v301[2] = (unint64_t)v302;
                operator delete(v302);
              }
              v285 = v301;
              v286 = 0x1080C409938AC02;
              goto LABEL_461;
            }
            break;
          case 4:
            v287 = *(unint64_t **)v247;
            do
            {
              v288 = __ldaxr(v287);
              v289 = v288 - 1;
            }
            while (__stlxr(v289, v287));
            if (!v289)
            {
              v290 = *(unint64_t **)v247;
              if (!*(_QWORD *)v247)
                goto LABEL_462;
              *(_QWORD *)&v492 = v290 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v492);
              goto LABEL_454;
            }
            break;
          case 5:
            v303 = *(unint64_t **)v247;
            do
            {
              v304 = __ldaxr(v303);
              v305 = v304 - 1;
            }
            while (__stlxr(v305, v303));
            if (!v305)
            {
              v290 = *(unint64_t **)v247;
              if (!*(_QWORD *)v247)
                goto LABEL_462;
              *(_QWORD *)&v492 = v290 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v492);
LABEL_454:
              v285 = v290;
              v286 = 0x1020C405E66F15BLL;
              goto LABEL_461;
            }
            break;
          case 8:
            v306 = *(unint64_t **)v247;
            do
            {
              v307 = __ldaxr(v306);
              v308 = v307 - 1;
            }
            while (__stlxr(v308, v306));
            if (!v308)
            {
              v309 = *(unint64_t **)v247;
              if (!*(_QWORD *)v247)
                goto LABEL_462;
              boost::detail::shared_count::~shared_count((unsigned int **)v309 + 2);
              v285 = v309;
              v297 = -235920773;
              goto LABEL_460;
            }
            break;
          case 9:
            v291 = *(unint64_t **)v247;
            do
            {
              v292 = __ldaxr(v291);
              v293 = v292 - 1;
            }
            while (__stlxr(v293, v291));
            if (!v293)
            {
              v294 = *(unint64_t **)v247;
              if (*(_QWORD *)v247)
              {
                v295 = (void *)v294[6];
                if (v295)
                {
                  v294[7] = (unint64_t)v295;
                  operator delete(v295);
                }
                v296 = (void *)v294[3];
                if (v296)
                {
                  v294[4] = (unint64_t)v296;
                  operator delete(v296);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v294 + 1));
                v285 = v294;
                v297 = 2071181815;
LABEL_460:
                v286 = v297 | 0x1030C4000000000;
LABEL_461:
                MEMORY[0x219A19A08](v285, v286);
              }
LABEL_462:
              *(_QWORD *)v247 = 0;
            }
            break;
          default:
            break;
        }
        v310 = turi::FLEX_UNDEFINED;
        *(_QWORD *)(v247 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
        *(_QWORD *)v247 = v310;
        v278 = byte_254FF281C;
LABEL_464:
        *(_BYTE *)(v247 + 12) = v278;
        v38 = v278 > 9;
        v311 = (1 << v278) & 0x33C;
        if (!v38 && v311 != 0)
        {
          v313 = *(unint64_t **)v247;
          do
            v314 = __ldaxr(v313);
          while (__stlxr(v314 + 1, v313));
        }
      }
LABEL_470:
      if (++v183 >= (unint64_t)(((*a3)[1] - **a3) >> 4))
        goto LABEL_747;
    }
    v184 = turi::flex_dict_view::operator[]((unsigned __int8 ***)&v486, (turi::flexible_type_impl *)(*((_QWORD *)a1 + 1) + 16 * v183));
    switch(a1[44])
    {
      case 0u:
        switch(v184[12])
        {
          case 0u:
            if (*(_QWORD *)v184 == *((_QWORD *)a1 + 4))
              goto LABEL_419;
            goto LABEL_356;
          case 1u:
            v241 = *(double *)v184;
            v242 = *((_QWORD *)a1 + 4);
            goto LABEL_413;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_356;
          case 6u:
            if (*((_QWORD *)a1 + 4) == (uint64_t)(*(_QWORD *)v184 << 8) >> 8 && !*((_DWORD *)v184 + 2))
              goto LABEL_419;
            goto LABEL_356;
          default:
            goto LABEL_752;
        }
      case 1u:
        switch(v184[12])
        {
          case 0u:
            v241 = *((double *)a1 + 4);
            v242 = *(_QWORD *)v184;
LABEL_413:
            v280 = (double)v242;
            goto LABEL_414;
          case 1u:
            v241 = *(double *)v184;
            v280 = *((double *)a1 + 4);
LABEL_414:
            if (v241 != v280)
              goto LABEL_356;
            goto LABEL_419;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_356;
          case 6u:
            v279 = vabdd_f64((double)*((int *)v184 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v184 << 8) >> 8), *((double *)a1 + 4));
            goto LABEL_418;
          default:
            goto LABEL_752;
        }
      case 2u:
        v225 = v184[12];
        if (v225 - 3 < 7 || v225 < 2)
          goto LABEL_356;
        if (v225 != 2)
          goto LABEL_752;
        v227 = *(double *)v184;
        v228 = *(_BYTE *)(*(_QWORD *)v184 + 31);
        if (v228 < 0)
          v229 = *(_QWORD *)(*(_QWORD *)&v227 + 16);
        else
          v229 = *(unsigned __int8 *)(*(_QWORD *)v184 + 31);
        v315 = *((_QWORD *)a1 + 4);
        if (*(char *)(v315 + 31) < 0)
          v316 = *(_QWORD *)(v315 + 16);
        else
          v316 = *(unsigned __int8 *)(v315 + 31);
        if (v229 != v316)
          goto LABEL_356;
        v317 = (unsigned __int8 *)(*(_QWORD *)&v227 + 8);
        if (v228 < 0)
          v317 = *(unsigned __int8 **)v317;
        v318 = (unsigned __int8 *)(v315 + 8);
        if ((*(_BYTE *)(v315 + 31) & 0x80) != 0)
          v318 = *(unsigned __int8 **)v318;
        if (v228 < 0)
        {
          if (memcmp(v317, v318, v229))
            goto LABEL_356;
        }
        else
        {
          if (!v229)
            goto LABEL_419;
          do
          {
            if (*v317 != *v318)
              goto LABEL_356;
            ++v317;
            ++v318;
            --v229;
          }
          while (v229);
        }
        goto LABEL_419;
      case 3u:
        v230 = v184[12];
        if (v230 > 9)
          goto LABEL_752;
        if (v230 != 3)
          goto LABEL_356;
        v231 = *(double **)(*(_QWORD *)v184 + 8);
        v232 = *(double **)(*(_QWORD *)v184 + 16);
        v233 = v232 - v231;
        v234 = *(double **)(*((_QWORD *)a1 + 4) + 8);
        if (v233 != (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 16) - (_QWORD)v234) >> 3)
          goto LABEL_356;
        if (v232 == v231)
          goto LABEL_419;
        if (v233 <= 1)
          v235 = 1;
        else
          v235 = v232 - v231;
        if (*v231 == *v234)
        {
          v236 = 1;
          do
          {
            v237 = v236;
            if (v235 == v236)
              break;
            v238 = v231[v236];
            v239 = v234[v236++];
          }
          while (v238 == v239);
          v186 = v237 >= v233;
LABEL_403:
          if ((v186 & 1) != 0)
            goto LABEL_419;
        }
        goto LABEL_356;
      case 4u:
        v185 = v184[12];
        if (v185 > 9)
          goto LABEL_752;
        if (v185 != 4)
          goto LABEL_356;
        v186 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v490, (uint64_t *)(*(_QWORD *)v184 + 8), (_QWORD *)(*((_QWORD *)a1 + 4) + 8));
        goto LABEL_403;
      case 5u:
        v243 = v184[12];
        if (v243 > 9)
          goto LABEL_752;
        if (v243 != 5)
          goto LABEL_356;
        v186 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v490, (uint64_t **)(*(_QWORD *)v184 + 8), (uint64_t **)(*((_QWORD *)a1 + 4) + 8));
        goto LABEL_403;
      case 6u:
        switch(v184[12])
        {
          case 0u:
            if (*(_QWORD *)v184 == (uint64_t)(*((_QWORD *)a1 + 4) << 8) >> 8 && !*((_DWORD *)a1 + 10))
              goto LABEL_419;
            goto LABEL_356;
          case 1u:
            v279 = vabdd_f64(*(double *)v184, (double)*((int *)a1 + 10) / 1000000.0 + (double)((uint64_t)(*((_QWORD *)a1 + 4) << 8) >> 8));
LABEL_418:
            if (v279 < 0.0000005)
              goto LABEL_419;
            goto LABEL_356;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_356;
          case 6u:
            if (((*((_QWORD *)a1 + 4) ^ *(_QWORD *)v184) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)v184 + 2) == *((_DWORD *)a1 + 10))
            {
              goto LABEL_419;
            }
            goto LABEL_356;
          default:
            goto LABEL_752;
        }
      case 7u:
        v240 = v184[12];
        if (v240 < 7 || v240 - 8 < 2)
          goto LABEL_356;
        if (v240 != 7)
          goto LABEL_752;
        goto LABEL_419;
      case 8u:
        v244 = v184[12];
        if (v244 < 8 || v244 == 9)
          goto LABEL_356;
        if (v244 != 8)
          goto LABEL_752;
        v186 = turi::image_type::operator==(*(_QWORD *)v184 + 8, *((_QWORD *)a1 + 4) + 8);
        goto LABEL_403;
      case 9u:
        v187 = v184[12];
        if (v187 < 9)
          goto LABEL_356;
        if (v187 != 9)
          goto LABEL_752;
        v188 = *((_QWORD *)a1 + 4);
        v189 = *(_QWORD **)v184;
        if (v188 == *(_QWORD *)v184)
          goto LABEL_419;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v189 + 1), v188 + 8))
          goto LABEL_356;
        v191 = (char *)v189[3];
        v190 = (char *)v189[4];
        v192 = v190 - v191;
        if (v190 == v191)
          goto LABEL_419;
        if (!v189[1])
          goto LABEL_419;
        v193 = 1;
        do
        {
          v194 = *(_QWORD *)v191;
          v191 += 8;
          v193 *= v194;
        }
        while (v191 != v190);
        if (!v193)
          goto LABEL_419;
        v491 = 0;
        std::vector<unsigned long>::vector(&v492, v192 >> 3, &v491);
        v195 = *(void ***)&v492;
        v196 = v493;
        v197 = **(_QWORD **)(v188 + 8);
        v198 = (uint64_t)v493 - *(_QWORD *)&v492;
        v199 = ((uint64_t)v493 - *(_QWORD *)&v492) >> 3;
        v200 = v199 - 1;
        if (v199 <= 1)
          v201 = 1;
        else
          v201 = ((uint64_t)v493 - *(_QWORD *)&v492) >> 3;
        break;
      default:
        goto LABEL_752;
    }
    do
    {
      if (v196 == v195)
      {
        v209 = 0;
        v210 = *(double *)(*(_QWORD *)v189[1] + 8 * v189[9]);
      }
      else
      {
        v202 = 0;
        v203 = (uint64_t *)v189[6];
        v204 = v195;
        v205 = v201;
        do
        {
          v207 = (uint64_t)*v204++;
          v206 = v207;
          v208 = *v203++;
          v202 += v208 * v206;
          --v205;
        }
        while (v205);
        v209 = 0;
        v210 = *(double *)(*(_QWORD *)v189[1] + 8 * (v189[9] + v202));
        v211 = *(uint64_t **)(v188 + 48);
        v212 = v195;
        v213 = v201;
        do
        {
          v215 = (uint64_t)*v212++;
          v214 = v215;
          v216 = *v211++;
          v209 += v216 * v214;
          --v213;
        }
        while (v213);
      }
      v217 = *(double *)(v197 + 8 * (*(_QWORD *)(v188 + 72) + v209));
      if (v210 != v217)
        break;
      v218 = v199;
      v219 = v199 - 1;
      if (v198 >= 1)
      {
        v220 = v189[3];
        v221 = (unint64_t)v195[v200] + 1;
        v195[v200] = (void *)v221;
        v222 = (v198 & 0xFFFFFFFFFFFFFFF8) - 16;
        v219 = v199 - 1;
        if (v221 >= *(_QWORD *)(v220 + 8 * v200))
        {
          while (1)
          {
            *(void **)((char *)v195 + v222 + 8) = 0;
            if (v219 <= 0)
              break;
            --v219;
            v223 = *(unint64_t *)((char *)v195 + v222) + 1;
            *(void **)((char *)v195 + v222) = (void *)v223;
            v224 = *(_QWORD *)(v220 + v222);
            v222 -= 8;
            if (v223 < v224)
            {
              v218 = 1;
              goto LABEL_312;
            }
          }
          v493 = v195;
          operator delete(v195);
          goto LABEL_419;
        }
        v218 = 1;
        v219 = v199 - 1;
      }
LABEL_312:
      ;
    }
    while ((v219 & 0x8000000000000000) == 0 && v218);
    if (v195)
    {
      v493 = v195;
      operator delete(v195);
    }
    if (v210 == v217)
      goto LABEL_419;
LABEL_356:
    v246 = turi::flex_dict_view::operator[]((unsigned __int8 ***)&v486, (turi::flexible_type_impl *)(*((_QWORD *)a1 + 1) + 16 * v183));
    v247 = **(_QWORD **)(**a3 + 16 * v183) + 16 * (_QWORD)a3[1];
    if (v246 == (unsigned __int8 *)v247)
      goto LABEL_470;
    switch(*(_BYTE *)(v247 + 12))
    {
      case 2:
        v248 = *(unint64_t **)v247;
        do
        {
          v249 = __ldaxr(v248);
          v250 = v249 - 1;
        }
        while (__stlxr(v250, v248));
        if (!v250)
        {
          v251 = *(_QWORD *)v247;
          if (!*(_QWORD *)v247)
            goto LABEL_399;
          if (*(char *)(v251 + 31) < 0)
            operator delete(*(void **)(v251 + 8));
          v252 = (_QWORD *)v251;
          v253 = 0x1012C404EF22A49;
          goto LABEL_398;
        }
        break;
      case 3:
        v265 = *(unint64_t **)v247;
        do
        {
          v266 = __ldaxr(v265);
          v267 = v266 - 1;
        }
        while (__stlxr(v267, v265));
        if (!v267)
        {
          v268 = *(_QWORD *)v247;
          if (!*(_QWORD *)v247)
            goto LABEL_399;
          v269 = *(void **)(v268 + 8);
          if (v269)
          {
            *(_QWORD *)(v268 + 16) = v269;
            operator delete(v269);
          }
          v252 = (_QWORD *)v268;
          v253 = 0x1080C409938AC02;
          goto LABEL_398;
        }
        break;
      case 4:
        v254 = *(unint64_t **)v247;
        do
        {
          v255 = __ldaxr(v254);
          v256 = v255 - 1;
        }
        while (__stlxr(v256, v254));
        if (!v256)
        {
          v257 = *(_QWORD *)v247;
          if (!*(_QWORD *)v247)
            goto LABEL_399;
          *(_QWORD *)&v492 = v257 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v492);
          goto LABEL_391;
        }
        break;
      case 5:
        v270 = *(unint64_t **)v247;
        do
        {
          v271 = __ldaxr(v270);
          v272 = v271 - 1;
        }
        while (__stlxr(v272, v270));
        if (!v272)
        {
          v257 = *(_QWORD *)v247;
          if (!*(_QWORD *)v247)
            goto LABEL_399;
          *(_QWORD *)&v492 = v257 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v492);
LABEL_391:
          v252 = (_QWORD *)v257;
          v253 = 0x1020C405E66F15BLL;
          goto LABEL_398;
        }
        break;
      case 8:
        v273 = *(unint64_t **)v247;
        do
        {
          v274 = __ldaxr(v273);
          v275 = v274 - 1;
        }
        while (__stlxr(v275, v273));
        if (!v275)
        {
          v276 = *(_QWORD *)v247;
          if (!*(_QWORD *)v247)
            goto LABEL_399;
          boost::detail::shared_count::~shared_count((unsigned int **)(v276 + 16));
          v252 = (_QWORD *)v276;
          v264 = -235920773;
          goto LABEL_397;
        }
        break;
      case 9:
        v258 = *(unint64_t **)v247;
        do
        {
          v259 = __ldaxr(v258);
          v260 = v259 - 1;
        }
        while (__stlxr(v260, v258));
        if (!v260)
        {
          v261 = *(unint64_t **)v247;
          if (*(_QWORD *)v247)
          {
            v262 = (void *)v261[6];
            if (v262)
            {
              v261[7] = (unint64_t)v262;
              operator delete(v262);
            }
            v263 = (void *)v261[3];
            if (v263)
            {
              v261[4] = (unint64_t)v263;
              operator delete(v263);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v261 + 1));
            v252 = v261;
            v264 = 2071181815;
LABEL_397:
            v253 = v264 | 0x1030C4000000000;
LABEL_398:
            MEMORY[0x219A19A08](v252, v253);
          }
LABEL_399:
          *(_QWORD *)v247 = 0;
        }
        break;
      default:
        break;
    }
    v277 = *(_QWORD *)v246;
    *(_QWORD *)(v247 + 5) = *(_QWORD *)(v246 + 5);
    *(_QWORD *)v247 = v277;
    v278 = v246[12];
    goto LABEL_464;
  }
  if (v44 == 4)
  {
    if ((*a3)[1] != **a3)
    {
      v45 = 0;
      do
      {
        v46 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v45);
        v47 = 1;
        switch(v4[12])
        {
          case 3u:
            v48 = (_QWORD *)(*(_QWORD *)v4 + 8);
            v49 = (_QWORD *)(*(_QWORD *)v4 + 16);
            v50 = 3;
            goto LABEL_64;
          case 4u:
            v48 = (_QWORD *)(*(_QWORD *)v4 + 8);
            v49 = (_QWORD *)(*(_QWORD *)v4 + 16);
            v50 = 4;
            goto LABEL_64;
          case 5u:
            v48 = (_QWORD *)(*(_QWORD *)v4 + 8);
            v49 = (_QWORD *)(*(_QWORD *)v4 + 16);
            v50 = 5;
LABEL_64:
            v47 = (uint64_t)(*v49 - *v48) >> v50;
            goto LABEL_65;
          case 9u:
            v53 = *(uint64_t **)(*(_QWORD *)v4 + 24);
            v52 = *(uint64_t **)(*(_QWORD *)v4 + 32);
            if (v52 == v53 || !*(_QWORD *)(*(_QWORD *)v4 + 8))
              goto LABEL_207;
            v47 = 1;
            do
            {
              v54 = *v53++;
              v47 *= v54;
            }
            while (v53 != v52);
LABEL_65:
            if (v47 <= v46)
              goto LABEL_207;
            break;
          default:
            goto LABEL_65;
        }
        v51 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v4 + 8) + 16 * v46);
        switch(a1[44])
        {
          case 0u:
            switch(v51[12])
            {
              case 0u:
                if (*(_QWORD *)v51 == *((_QWORD *)a1 + 4))
                  goto LABEL_207;
                goto LABEL_144;
              case 1u:
                v108 = *(double *)v51;
                v109 = *((_QWORD *)a1 + 4);
                goto LABEL_201;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_144;
              case 6u:
                if (*((_QWORD *)a1 + 4) == (uint64_t)(*(_QWORD *)v51 << 8) >> 8 && !*((_DWORD *)v51 + 2))
                  goto LABEL_207;
                goto LABEL_144;
              default:
                turi::apply_binary_op_ff();
            }
          case 1u:
            switch(v51[12])
            {
              case 0u:
                v108 = *((double *)a1 + 4);
                v109 = *(_QWORD *)v51;
LABEL_201:
                v145 = (double)v109;
                goto LABEL_202;
              case 1u:
                v108 = *(double *)v51;
                v145 = *((double *)a1 + 4);
LABEL_202:
                if (v108 != v145)
                  goto LABEL_144;
                goto LABEL_207;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_144;
              case 6u:
                v144 = vabdd_f64((double)*((int *)v51 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v51 << 8) >> 8), *((double *)a1 + 4));
                goto LABEL_206;
              default:
                turi::apply_binary_op_ff();
            }
          case 2u:
            v95 = v51[12];
            v96 = v95 - 3 >= 7 && v95 >= 2;
            if (!v96)
              goto LABEL_144;
            if (v95 != 2)
              turi::apply_binary_op_ff();
            v97 = *(double *)v51;
            v98 = *(char *)(*(_QWORD *)v51 + 31);
            v99 = *(unsigned __int8 *)(*(_QWORD *)v51 + 31);
            v100 = v98 < 0 ? *(_QWORD *)(*(_QWORD *)&v97 + 16) : v99;
            v179 = *((_QWORD *)a1 + 4);
            v180 = *(char *)(v179 + 31) < 0 ? *(_QWORD *)(v179 + 16) : *(unsigned __int8 *)(v179 + 31);
            if (v100 != v180)
              goto LABEL_144;
            v181 = (unsigned __int8 *)(*(_QWORD *)&v97 + 8);
            if ((v99 & 0x80) != 0)
              v181 = *(unsigned __int8 **)v181;
            v182 = (unsigned __int8 *)(v179 + 8);
            if ((*(_BYTE *)(v179 + 31) & 0x80) != 0)
              v182 = *(unsigned __int8 **)v182;
            if ((v99 & 0x80) != 0)
            {
              if (memcmp(v181, v182, v100))
                goto LABEL_144;
            }
            else
            {
              if (!v100)
                goto LABEL_207;
              do
              {
                if (*v181 != *v182)
                  goto LABEL_144;
                ++v181;
                ++v182;
                --v100;
              }
              while (v100);
            }
            goto LABEL_207;
          case 3u:
            v101 = v51[12];
            if (v101 > 9)
              turi::apply_binary_op_ff();
            if (v101 != 3)
              goto LABEL_144;
            v104 = *(_QWORD *)v51 + 8;
            v102 = *(double **)v104;
            v103 = *(double **)(v104 + 8);
            v105 = ((uint64_t)v103 - *(_QWORD *)v104) >> 3;
            v106 = *(double **)(*((_QWORD *)a1 + 4) + 8);
            if (v105 != (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 16) - (_QWORD)v106) >> 3)
              goto LABEL_144;
            if (v103 == v102)
              goto LABEL_207;
            if (v105 <= 1)
              v105 = 1;
            while (*v102 == *v106)
            {
              ++v102;
              ++v106;
              if (!--v105)
                goto LABEL_207;
            }
            goto LABEL_144;
          case 4u:
            v55 = v51[12];
            if (v55 > 9)
              turi::apply_binary_op_ff();
            if (v55 != 4)
              goto LABEL_144;
            v56 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v491, (uint64_t *)(*(_QWORD *)v51 + 8), (_QWORD *)(*((_QWORD *)a1 + 4) + 8));
            goto LABEL_137;
          case 5u:
            v110 = v51[12];
            if (v110 > 9)
              turi::apply_binary_op_ff();
            if (v110 != 5)
              goto LABEL_144;
            v56 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v491, (uint64_t **)(*(_QWORD *)v51 + 8), (uint64_t **)(*((_QWORD *)a1 + 4) + 8));
LABEL_137:
            if ((v56 & 1) != 0)
              goto LABEL_207;
            goto LABEL_144;
          case 6u:
            switch(v51[12])
            {
              case 0u:
                if (*(_QWORD *)v51 == (uint64_t)(*((_QWORD *)a1 + 4) << 8) >> 8 && !*((_DWORD *)a1 + 10))
                  goto LABEL_207;
                goto LABEL_144;
              case 1u:
                v144 = vabdd_f64(*(double *)v51, (double)*((int *)a1 + 10) / 1000000.0 + (double)((uint64_t)(*((_QWORD *)a1 + 4) << 8) >> 8));
LABEL_206:
                if (v144 < 0.0000005)
                  goto LABEL_207;
                goto LABEL_144;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_144;
              case 6u:
                if (((*((_QWORD *)a1 + 4) ^ *(_QWORD *)v51) & 0xFFFFFFFFFFFFFFLL) == 0
                  && *((_DWORD *)v51 + 2) == *((_DWORD *)a1 + 10))
                {
                  goto LABEL_207;
                }
                goto LABEL_144;
              default:
                turi::apply_binary_op_ff();
            }
          case 7u:
            v107 = v51[12];
            if (v107 < 7 || v107 - 8 < 2)
              goto LABEL_144;
            if (v107 != 7)
              turi::apply_binary_op_ff();
            goto LABEL_207;
          case 8u:
            v111 = v51[12];
            if (v111 < 8)
              goto LABEL_144;
            if (v111 != 8)
            {
              if (v111 != 9)
                turi::apply_binary_op_ff();
              goto LABEL_144;
            }
            if (!turi::image_type::operator==(*(_QWORD *)v51 + 8, *((_QWORD *)a1 + 4) + 8))
              goto LABEL_144;
            goto LABEL_207;
          case 9u:
            v57 = v51[12];
            if (v57 < 9)
              goto LABEL_144;
            if (v57 != 9)
              turi::apply_binary_op_ff();
            v58 = *((_QWORD *)a1 + 4);
            v59 = *(_QWORD **)v51;
            if (v58 == *(_QWORD *)v51)
              goto LABEL_207;
            v484 = *((_QWORD *)a1 + 4);
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v59 + 1), v58 + 8))
              goto LABEL_144;
            v61 = (char *)v59[3];
            v60 = (char *)v59[4];
            v62 = v60 - v61;
            if (v60 == v61)
              goto LABEL_207;
            if (!v59[1])
              goto LABEL_207;
            v63 = 1;
            do
            {
              v64 = *(_QWORD *)v61;
              v61 += 8;
              v63 *= v64;
            }
            while (v61 != v60);
            if (!v63)
              goto LABEL_207;
            v492 = 0.0;
            std::vector<unsigned long>::vector(&v486, v62 >> 3, &v492);
            v65 = v486;
            v66 = v487;
            v67 = **(_QWORD **)(v484 + 8);
            v68 = (char *)v487 - (char *)v486;
            v69 = v487 - v486;
            v70 = v69 - 1;
            if (v69 <= 1)
              v71 = 1;
            else
              v71 = v487 - v486;
            break;
          default:
            turi::apply_binary_op_ff();
        }
        do
        {
          if (v66 == v65)
          {
            v79 = 0;
            v80 = *(double *)(*(_QWORD *)v59[1] + 8 * v59[9]);
          }
          else
          {
            v72 = 0;
            v73 = (uint64_t *)v59[6];
            v74 = v65;
            v75 = v71;
            do
            {
              v77 = (uint64_t)*v74++;
              v76 = v77;
              v78 = *v73++;
              v72 += v78 * v76;
              --v75;
            }
            while (v75);
            v79 = 0;
            v80 = *(double *)(*(_QWORD *)v59[1] + 8 * (v59[9] + v72));
            v81 = *(uint64_t **)(v484 + 48);
            v82 = v65;
            v83 = v71;
            do
            {
              v85 = (uint64_t)*v82++;
              v84 = v85;
              v86 = *v81++;
              v79 += v86 * v84;
              --v83;
            }
            while (v83);
          }
          v87 = *(double *)(v67 + 8 * (*(_QWORD *)(v484 + 72) + v79));
          if (v80 != v87)
            break;
          v88 = v69;
          v89 = v69 - 1;
          if (v68 >= 1)
          {
            v90 = v59[3];
            v91 = (unint64_t)v65[v70] + 1;
            v65[v70] = (void *)v91;
            v92 = (v68 & 0xFFFFFFFFFFFFFFF8) - 16;
            v89 = v69 - 1;
            if (v91 >= *(_QWORD *)(v90 + 8 * v70))
            {
              while (1)
              {
                *(void **)((char *)v65 + v92 + 8) = 0;
                if (v89 <= 0)
                  break;
                --v89;
                v93 = *(unint64_t *)((char *)v65 + v92) + 1;
                *(void **)((char *)v65 + v92) = (void *)v93;
                v94 = *(_QWORD *)(v90 + v92);
                v92 -= 8;
                if (v93 < v94)
                {
                  v88 = 1;
                  goto LABEL_105;
                }
              }
              v487 = v65;
              operator delete(v65);
              goto LABEL_207;
            }
            v88 = 1;
            v89 = v69 - 1;
          }
LABEL_105:
          ;
        }
        while ((v89 & 0x8000000000000000) == 0 && v88);
        if (v65)
        {
          v487 = v65;
          operator delete(v65);
        }
        if (v80 != v87)
        {
LABEL_144:
          v112 = *(_QWORD *)(*(_QWORD *)v4 + 8) + 16 * v46;
          v113 = **(_QWORD **)(**a3 + 16 * v45) + 16 * (_QWORD)a3[1];
          if (v112 == v113)
            goto LABEL_257;
          switch(*(_BYTE *)(v113 + 12))
          {
            case 2:
              v114 = *(unint64_t **)v113;
              do
              {
                v115 = __ldaxr(v114);
                v116 = v115 - 1;
              }
              while (__stlxr(v116, v114));
              if (!v116)
              {
                v117 = *(unint64_t **)v113;
                if (!*(_QWORD *)v113)
                  goto LABEL_186;
                if (*((char *)v117 + 31) < 0)
                  operator delete((void *)v117[1]);
                v118 = v117;
                v119 = 0x1012C404EF22A49;
                goto LABEL_185;
              }
              break;
            case 3:
              v130 = *(unint64_t **)v113;
              do
              {
                v131 = __ldaxr(v130);
                v132 = v131 - 1;
              }
              while (__stlxr(v132, v130));
              if (!v132)
              {
                v133 = *(unint64_t **)v113;
                if (!*(_QWORD *)v113)
                  goto LABEL_186;
                v134 = (void *)v133[1];
                if (v134)
                {
                  v133[2] = (unint64_t)v134;
                  operator delete(v134);
                }
                v118 = v133;
                v119 = 0x1080C409938AC02;
                goto LABEL_185;
              }
              break;
            case 4:
              v120 = *(unint64_t **)v113;
              do
              {
                v121 = __ldaxr(v120);
                v122 = v121 - 1;
              }
              while (__stlxr(v122, v120));
              if (!v122)
              {
                v123 = *(unint64_t **)v113;
                if (!*(_QWORD *)v113)
                  goto LABEL_186;
                v486 = (void **)(v123 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v486);
                goto LABEL_179;
              }
              break;
            case 5:
              v135 = *(unint64_t **)v113;
              do
              {
                v136 = __ldaxr(v135);
                v137 = v136 - 1;
              }
              while (__stlxr(v137, v135));
              if (!v137)
              {
                v123 = *(unint64_t **)v113;
                if (!*(_QWORD *)v113)
                  goto LABEL_186;
                v486 = (void **)(v123 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v486);
LABEL_179:
                v118 = v123;
                v119 = 0x1020C405E66F15BLL;
                goto LABEL_185;
              }
              break;
            case 8:
              v138 = *(unint64_t **)v113;
              do
              {
                v139 = __ldaxr(v138);
                v140 = v139 - 1;
              }
              while (__stlxr(v140, v138));
              if (!v140)
              {
                v141 = *(unint64_t **)v113;
                if (!*(_QWORD *)v113)
                  goto LABEL_186;
                boost::detail::shared_count::~shared_count((unsigned int **)v141 + 2);
                v118 = v141;
                v119 = 0x1030C40F1F0227BLL;
                goto LABEL_185;
              }
              break;
            case 9:
              v124 = *(unint64_t **)v113;
              do
              {
                v125 = __ldaxr(v124);
                v126 = v125 - 1;
              }
              while (__stlxr(v126, v124));
              if (!v126)
              {
                v127 = *(unint64_t **)v113;
                if (*(_QWORD *)v113)
                {
                  v128 = (void *)v127[6];
                  if (v128)
                  {
                    v127[7] = (unint64_t)v128;
                    operator delete(v128);
                  }
                  v129 = (void *)v127[3];
                  if (v129)
                  {
                    v127[4] = (unint64_t)v129;
                    operator delete(v129);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v127 + 1));
                  v118 = v127;
                  v119 = 0x1030C407B73B9F7;
LABEL_185:
                  MEMORY[0x219A19A08](v118, v119);
                }
LABEL_186:
                *(_QWORD *)v113 = 0;
              }
              break;
            default:
              break;
          }
          v142 = *(_QWORD *)v112;
          *(_QWORD *)(v113 + 5) = *(_QWORD *)(v112 + 5);
          *(_QWORD *)v113 = v142;
          v143 = *(unsigned __int8 *)(v112 + 12);
          goto LABEL_251;
        }
LABEL_207:
        v113 = **(_QWORD **)(**a3 + 16 * v45) + 16 * (_QWORD)a3[1];
        if ((uint64_t *)v113 == &turi::FLEX_UNDEFINED)
          goto LABEL_257;
        switch(*(_BYTE *)(v113 + 12))
        {
          case 2:
            v146 = *(unint64_t **)v113;
            do
            {
              v147 = __ldaxr(v146);
              v148 = v147 - 1;
            }
            while (__stlxr(v148, v146));
            if (!v148)
            {
              v149 = *(_QWORD *)v113;
              if (!*(_QWORD *)v113)
                goto LABEL_249;
              if (*(char *)(v149 + 31) < 0)
                operator delete(*(void **)(v149 + 8));
              v150 = (_QWORD *)v149;
              v151 = 0x1012C404EF22A49;
              goto LABEL_248;
            }
            break;
          case 3:
            v162 = *(unint64_t **)v113;
            do
            {
              v163 = __ldaxr(v162);
              v164 = v163 - 1;
            }
            while (__stlxr(v164, v162));
            if (!v164)
            {
              v165 = *(_QWORD *)v113;
              if (!*(_QWORD *)v113)
                goto LABEL_249;
              v166 = *(void **)(v165 + 8);
              if (v166)
              {
                *(_QWORD *)(v165 + 16) = v166;
                operator delete(v166);
              }
              v150 = (_QWORD *)v165;
              v151 = 0x1080C409938AC02;
              goto LABEL_248;
            }
            break;
          case 4:
            v152 = *(unint64_t **)v113;
            do
            {
              v153 = __ldaxr(v152);
              v154 = v153 - 1;
            }
            while (__stlxr(v154, v152));
            if (!v154)
            {
              v155 = *(_QWORD *)v113;
              if (!*(_QWORD *)v113)
                goto LABEL_249;
              v486 = (void **)(v155 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v486);
              goto LABEL_242;
            }
            break;
          case 5:
            v167 = *(unint64_t **)v113;
            do
            {
              v168 = __ldaxr(v167);
              v169 = v168 - 1;
            }
            while (__stlxr(v169, v167));
            if (!v169)
            {
              v155 = *(_QWORD *)v113;
              if (!*(_QWORD *)v113)
                goto LABEL_249;
              v486 = (void **)(v155 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v486);
LABEL_242:
              v150 = (_QWORD *)v155;
              v151 = 0x1020C405E66F15BLL;
              goto LABEL_248;
            }
            break;
          case 8:
            v170 = *(unint64_t **)v113;
            do
            {
              v171 = __ldaxr(v170);
              v172 = v171 - 1;
            }
            while (__stlxr(v172, v170));
            if (!v172)
            {
              v173 = *(_QWORD *)v113;
              if (!*(_QWORD *)v113)
                goto LABEL_249;
              boost::detail::shared_count::~shared_count((unsigned int **)(v173 + 16));
              v150 = (_QWORD *)v173;
              v151 = 0x1030C40F1F0227BLL;
              goto LABEL_248;
            }
            break;
          case 9:
            v156 = *(unint64_t **)v113;
            do
            {
              v157 = __ldaxr(v156);
              v158 = v157 - 1;
            }
            while (__stlxr(v158, v156));
            if (!v158)
            {
              v159 = *(unint64_t **)v113;
              if (*(_QWORD *)v113)
              {
                v160 = (void *)v159[6];
                if (v160)
                {
                  v159[7] = (unint64_t)v160;
                  operator delete(v160);
                }
                v161 = (void *)v159[3];
                if (v161)
                {
                  v159[4] = (unint64_t)v161;
                  operator delete(v161);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v159 + 1));
                v150 = v159;
                v151 = 0x1030C407B73B9F7;
LABEL_248:
                MEMORY[0x219A19A08](v150, v151);
              }
LABEL_249:
              *(_QWORD *)v113 = 0;
            }
            break;
          default:
            break;
        }
        v174 = turi::FLEX_UNDEFINED;
        *(_QWORD *)(v113 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
        *(_QWORD *)v113 = v174;
        v143 = byte_254FF281C;
LABEL_251:
        *(_BYTE *)(v113 + 12) = v143;
        v38 = v143 > 9;
        v175 = (1 << v143) & 0x33C;
        if (!v38 && v175 != 0)
        {
          v177 = *(unint64_t **)v113;
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 + 1, v177));
        }
LABEL_257:
        ++v45;
      }
      while (v45 < ((*a3)[1] - **a3) >> 4);
    }
  }
  else if ((*a3)[1] != **a3)
  {
    v319 = 0;
    while (1)
    {
      v320 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v319);
      v321 = v4[12];
      v322 = 1;
      switch(v4[12])
      {
        case 3u:
          v323 = (_QWORD *)(*(_QWORD *)v4 + 8);
          v324 = (_QWORD *)(*(_QWORD *)v4 + 16);
          v325 = 3;
          goto LABEL_495;
        case 4u:
          v323 = (_QWORD *)(*(_QWORD *)v4 + 8);
          v324 = (_QWORD *)(*(_QWORD *)v4 + 16);
          v325 = 4;
          goto LABEL_495;
        case 5u:
          v323 = (_QWORD *)(*(_QWORD *)v4 + 8);
          v324 = (_QWORD *)(*(_QWORD *)v4 + 16);
          v325 = 5;
LABEL_495:
          v322 = (uint64_t)(*v324 - *v323) >> v325;
          goto LABEL_496;
        case 9u:
          v329 = *(uint64_t **)(*(_QWORD *)v4 + 24);
          v328 = *(uint64_t **)(*(_QWORD *)v4 + 32);
          if (v328 == v329 || !*(_QWORD *)(*(_QWORD *)v4 + 8))
            goto LABEL_580;
          v322 = 1;
          do
          {
            v330 = *v329++;
            v322 *= v330;
          }
          while (v329 != v328);
LABEL_496:
          if (v322 <= v320)
            goto LABEL_580;
          if (v321 == 1)
          {
            v333 = v4;
            if (v320)
LABEL_749:
              turi::apply_binary_op_ff();
          }
          else
          {
            if (v321 == 9)
            {
              v331 = *(_QWORD *)v4;
              v332 = (uint64_t *)(*(_QWORD *)v4 + 8);
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v332);
              v326 = (_QWORD *)*v332;
              v327 = *(_QWORD *)(v331 + 72) + v320;
            }
            else
            {
              if (v321 != 3)
                goto LABEL_749;
              v326 = (_QWORD *)(*(_QWORD *)v4 + 8);
              v327 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v319);
            }
            v333 = (unsigned __int8 *)(*v326 + 8 * v327);
          }
          break;
        default:
          goto LABEL_496;
      }
      v492 = 0.0;
      LODWORD(v493) = 0;
      BYTE4(v493) = 0;
      turi::flexible_type::operator=<double>((uint64_t)&v492, v333);
      switch(BYTE4(v493))
      {
        case 0:
          switch(a1[44])
          {
            case 0u:
              v334 = *((_QWORD *)a1 + 4) == *(_QWORD *)&v492;
              goto LABEL_717;
            case 1u:
              v363 = *((double *)a1 + 4);
              v364 = *(_QWORD *)&v492;
              goto LABEL_716;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_589;
            case 6u:
              v334 = *(_QWORD *)&v492 == (uint64_t)(*((_QWORD *)a1 + 4) << 8) >> 8 && *((_DWORD *)a1 + 10) == 0;
              goto LABEL_717;
            default:
              goto LABEL_752;
          }
        case 1:
          switch(a1[44])
          {
            case 0u:
              v363 = v492;
              v364 = *((_QWORD *)a1 + 4);
LABEL_716:
              v334 = v363 == (double)v364;
              goto LABEL_717;
            case 1u:
              v336 = *((double *)a1 + 4) == v492;
              goto LABEL_743;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_589;
            case 6u:
              v474 = vabdd_f64((double)*((int *)a1 + 10) / 1000000.0 + (double)((uint64_t)(*((_QWORD *)a1 + 4) << 8) >> 8), v492);
              goto LABEL_722;
            default:
              goto LABEL_752;
          }
        case 2:
          v350 = a1[44];
          if (v350 - 3 >= 7 && v350 >= 2)
          {
            if (v350 != 2)
            {
LABEL_752:
              turi::flexible_type_fail(0);
              __break(1u);
              return;
            }
            v463 = *((_QWORD *)a1 + 4);
            if (*(char *)(v463 + 31) < 0)
              v464 = *(_QWORD *)(v463 + 16);
            else
              v464 = *(unsigned __int8 *)(v463 + 31);
            if (*(char *)(*(_QWORD *)&v492 + 31) < 0)
              v475 = *(void **)(*(_QWORD *)&v492 + 16);
            else
              v475 = (void *)*(unsigned __int8 *)(*(_QWORD *)&v492 + 31);
            if ((void *)v464 == v475)
            {
              v476 = (_QWORD *)(v463 + 8);
              if ((*(_BYTE *)(v463 + 31) & 0x80) != 0)
                v476 = (_QWORD *)*v476;
              v477 = (void **)(*(_QWORD *)&v492 + 8);
              if ((*(_BYTE *)(*(_QWORD *)&v492 + 31) & 0x80) != 0)
                v477 = (void **)*v477;
              if ((*(_BYTE *)(v463 + 31) & 0x80) != 0)
              {
                v334 = memcmp(v476, v477, v464) == 0;
LABEL_717:
                v336 = v334;
              }
              else if (v464)
              {
                v478 = v464 - 1;
                do
                {
                  v480 = *(unsigned __int8 *)v476;
                  v476 = (_QWORD *)((char *)v476 + 1);
                  v479 = v480;
                  v482 = *(unsigned __int8 *)v477;
                  v477 = (void **)((char *)v477 + 1);
                  v481 = v482;
                  v96 = v478-- != 0;
                  v483 = v96;
                  v336 = v479 == v481;
                }
                while (v479 == v481 && (v483 & 1) != 0);
              }
              else
              {
LABEL_742:
                v336 = 1;
              }
            }
            else
            {
LABEL_741:
              v336 = 0;
            }
LABEL_743:
            switch(BYTE4(v493))
            {
              case 2:
                goto LABEL_534;
              case 3:
                goto LABEL_544;
              case 4:
                goto LABEL_515;
              case 5:
                goto LABEL_560;
              case 8:
                goto LABEL_572;
              case 9:
                goto LABEL_522;
              default:
                break;
            }
          }
          else
          {
            v336 = 0;
LABEL_534:
            v351 = *(unint64_t **)&v492;
            do
            {
              v352 = __ldaxr(v351);
              v353 = v352 - 1;
            }
            while (__stlxr(v353, v351));
            if (!v353)
            {
              v354 = v492;
              if (v492 != 0.0)
              {
                if (*(char *)(*(_QWORD *)&v492 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)&v492 + 8));
                v348 = v354;
                v355 = 0x1012C404EF22A49;
LABEL_578:
                MEMORY[0x219A19A08](*(_QWORD *)&v348, v355);
              }
            }
          }
LABEL_579:
          if (v336)
          {
LABEL_580:
            v374 = **(_QWORD **)(**a3 + 16 * v319) + 16 * (_QWORD)a3[1];
            if ((uint64_t *)v374 != &turi::FLEX_UNDEFINED)
            {
              switch(*(_BYTE *)(v374 + 12))
              {
                case 2:
                  v375 = *(unint64_t **)v374;
                  do
                  {
                    v376 = __ldaxr(v375);
                    v377 = v376 - 1;
                  }
                  while (__stlxr(v377, v375));
                  if (!v377)
                  {
                    v378 = *(unint64_t **)v374;
                    if (!*(_QWORD *)v374)
                      goto LABEL_627;
                    if (*((char *)v378 + 31) < 0)
                      operator delete((void *)v378[1]);
                    v379 = v378;
                    v380 = 0x1012C404EF22A49;
                    goto LABEL_626;
                  }
                  break;
                case 3:
                  v393 = *(unint64_t **)v374;
                  do
                  {
                    v394 = __ldaxr(v393);
                    v395 = v394 - 1;
                  }
                  while (__stlxr(v395, v393));
                  if (!v395)
                  {
                    v396 = *(unint64_t **)v374;
                    if (!*(_QWORD *)v374)
                      goto LABEL_627;
                    v397 = (void *)v396[1];
                    if (v397)
                    {
                      v396[2] = (unint64_t)v397;
                      operator delete(v397);
                    }
                    v379 = v396;
                    v380 = 0x1080C409938AC02;
                    goto LABEL_626;
                  }
                  break;
                case 4:
                  v382 = *(unint64_t **)v374;
                  do
                  {
                    v383 = __ldaxr(v382);
                    v384 = v383 - 1;
                  }
                  while (__stlxr(v384, v382));
                  if (!v384)
                  {
                    v385 = *(unint64_t **)v374;
                    if (!*(_QWORD *)v374)
                      goto LABEL_627;
                    v486 = (void **)(v385 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v486);
                    goto LABEL_619;
                  }
                  break;
                case 5:
                  v398 = *(unint64_t **)v374;
                  do
                  {
                    v399 = __ldaxr(v398);
                    v400 = v399 - 1;
                  }
                  while (__stlxr(v400, v398));
                  if (!v400)
                  {
                    v385 = *(unint64_t **)v374;
                    if (!*(_QWORD *)v374)
                      goto LABEL_627;
                    v486 = (void **)(v385 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v486);
LABEL_619:
                    v379 = v385;
                    v380 = 0x1020C405E66F15BLL;
                    goto LABEL_626;
                  }
                  break;
                case 8:
                  v401 = *(unint64_t **)v374;
                  do
                  {
                    v402 = __ldaxr(v401);
                    v403 = v402 - 1;
                  }
                  while (__stlxr(v403, v401));
                  if (!v403)
                  {
                    v404 = *(unint64_t **)v374;
                    if (!*(_QWORD *)v374)
                      goto LABEL_627;
                    boost::detail::shared_count::~shared_count((unsigned int **)v404 + 2);
                    v379 = v404;
                    v392 = -235920773;
                    goto LABEL_625;
                  }
                  break;
                case 9:
                  v386 = *(unint64_t **)v374;
                  do
                  {
                    v387 = __ldaxr(v386);
                    v388 = v387 - 1;
                  }
                  while (__stlxr(v388, v386));
                  if (!v388)
                  {
                    v389 = *(unint64_t **)v374;
                    if (*(_QWORD *)v374)
                    {
                      v390 = (void *)v389[6];
                      if (v390)
                      {
                        v389[7] = (unint64_t)v390;
                        operator delete(v390);
                      }
                      v391 = (void *)v389[3];
                      if (v391)
                      {
                        v389[4] = (unint64_t)v391;
                        operator delete(v391);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v389 + 1));
                      v379 = v389;
                      v392 = 2071181815;
LABEL_625:
                      v380 = v392 | 0x1030C4000000000;
LABEL_626:
                      MEMORY[0x219A19A08](v379, v380);
                    }
LABEL_627:
                    *(_QWORD *)v374 = 0;
                  }
                  break;
                default:
                  break;
              }
              v405 = turi::FLEX_UNDEFINED;
              *(_QWORD *)(v374 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
              *(_QWORD *)v374 = v405;
              LODWORD(v405) = byte_254FF281C;
              *(_BYTE *)(v374 + 12) = byte_254FF281C;
              switch((int)v405)
              {
                case 2:
                  v406 = *(unint64_t **)v374;
                  do
                    v407 = __ldaxr(v406);
                  while (__stlxr(v407 + 1, v406));
                  break;
                case 3:
                  v412 = *(unint64_t **)v374;
                  do
                    v413 = __ldaxr(v412);
                  while (__stlxr(v413 + 1, v412));
                  break;
                case 4:
                  v408 = *(unint64_t **)v374;
                  do
                    v409 = __ldaxr(v408);
                  while (__stlxr(v409 + 1, v408));
                  break;
                case 5:
                  v414 = *(unint64_t **)v374;
                  do
                    v415 = __ldaxr(v414);
                  while (__stlxr(v415 + 1, v414));
                  break;
                case 8:
                  v416 = *(unint64_t **)v374;
                  do
                    v417 = __ldaxr(v416);
                  while (__stlxr(v417 + 1, v416));
                  break;
                case 9:
                  v410 = *(unint64_t **)v374;
                  do
                    v411 = __ldaxr(v410);
                  while (__stlxr(v411 + 1, v410));
                  break;
                default:
                  break;
              }
            }
          }
          else
          {
LABEL_589:
            v381 = v4[12];
            switch(v381)
            {
              case 1:
                if (v320)
LABEL_750:
                  turi::apply_binary_op_ff();
                break;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)v4 + 8));
                break;
              case 3:
                break;
              default:
                goto LABEL_750;
            }
            v418 = v4[12];
            if (v418 == 1)
            {
              v422 = v4;
              if (v320)
LABEL_751:
                turi::apply_binary_op_ff();
            }
            else
            {
              if (v418 == 9)
              {
                v420 = *(_QWORD *)v4;
                v421 = (uint64_t *)(*(_QWORD *)v4 + 8);
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v421);
                v419 = (_QWORD *)*v421;
                v320 += *(_QWORD *)(v420 + 72);
              }
              else
              {
                if (v418 != 3)
                  goto LABEL_751;
                v419 = (_QWORD *)(*(_QWORD *)v4 + 8);
              }
              v422 = (unsigned __int8 *)(*v419 + 8 * v320);
            }
            turi::flexible_type::operator=<double>(**(_QWORD **)(**a3 + 16 * v319) + 16 * (_QWORD)a3[1], v422);
          }
          if (++v319 >= (unint64_t)(((*a3)[1] - **a3) >> 4))
            return;
          break;
        case 3:
          v356 = a1[44];
          if (v356 > 9)
            goto LABEL_752;
          if (v356 != 3)
          {
            v336 = 0;
LABEL_544:
            v357 = *(unint64_t **)&v492;
            do
            {
              v358 = __ldaxr(v357);
              v359 = v358 - 1;
            }
            while (__stlxr(v359, v357));
            if (!v359)
            {
              v360 = v492;
              if (v492 != 0.0)
              {
                v361 = *(void **)(*(_QWORD *)&v492 + 8);
                if (v361)
                {
                  *(_QWORD *)(*(_QWORD *)&v492 + 16) = v361;
                  operator delete(v361);
                }
                v348 = v360;
                v355 = 0x1080C409938AC02;
                goto LABEL_578;
              }
            }
            goto LABEL_579;
          }
          v465 = *(double **)(*((_QWORD *)a1 + 4) + 8);
          v466 = *(double **)(*((_QWORD *)a1 + 4) + 16);
          v467 = v466 - v465;
          v468 = *(double **)(*(_QWORD *)&v492 + 8);
          if (v467 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v492 + 16) - (_QWORD)v468) >> 3)
            goto LABEL_741;
          if (v466 == v465)
            goto LABEL_742;
          if (v467 <= 1)
            v469 = 1;
          else
            v469 = v466 - v465;
          if (*v465 == *v468)
          {
            v470 = 1;
            do
            {
              v471 = v470;
              if (v469 == v470)
                break;
              v472 = v465[v470];
              v473 = v468[v470++];
            }
            while (v472 == v473);
            v336 = v471 >= v467;
            goto LABEL_743;
          }
          goto LABEL_741;
        case 4:
          v335 = a1[44];
          if (v335 > 9)
            goto LABEL_752;
          if (v335 == 4)
          {
            v423 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v489, (uint64_t *)(*((_QWORD *)a1 + 4) + 8), (_QWORD *)(*(_QWORD *)&v492 + 8));
            goto LABEL_711;
          }
          v336 = 0;
LABEL_515:
          v337 = *(unint64_t **)&v492;
          do
          {
            v338 = __ldaxr(v337);
            v339 = v338 - 1;
          }
          while (__stlxr(v339, v337));
          if (!v339)
          {
            v340 = v492;
            if (v492 != 0.0)
            {
              v486 = (void **)(*(_QWORD *)&v492 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v486);
              goto LABEL_565;
            }
          }
          goto LABEL_579;
        case 5:
          v365 = a1[44];
          if (v365 > 9)
            goto LABEL_752;
          if (v365 == 5)
          {
            v423 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v489, (uint64_t **)(*((_QWORD *)a1 + 4) + 8), (uint64_t **)(*(_QWORD *)&v492 + 8));
            goto LABEL_711;
          }
          v336 = 0;
LABEL_560:
          v366 = *(unint64_t **)&v492;
          do
          {
            v367 = __ldaxr(v366);
            v368 = v367 - 1;
          }
          while (__stlxr(v368, v366));
          if (v368)
            goto LABEL_579;
          v340 = v492;
          if (v492 == 0.0)
            goto LABEL_579;
          v486 = (void **)(*(_QWORD *)&v492 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v486);
LABEL_565:
          v348 = v340;
          v355 = 0x1020C405E66F15BLL;
          goto LABEL_578;
        case 6:
          switch(a1[44])
          {
            case 0u:
              v334 = *((_QWORD *)a1 + 4) == (uint64_t)(*(_QWORD *)&v492 << 8) >> 8 && (_DWORD)v493 == 0;
              goto LABEL_717;
            case 1u:
              v474 = vabdd_f64(*((double *)a1 + 4), (double)(int)v493 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v492 << 8) >> 8));
LABEL_722:
              v336 = v474 < 0.0000005;
              goto LABEL_743;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_589;
            case 6u:
              v334 = ((*(_QWORD *)&v492 ^ *((_QWORD *)a1 + 4)) & 0xFFFFFFFFFFFFFFLL) == 0
                  && *((_DWORD *)a1 + 10) == (_DWORD)v493;
              goto LABEL_717;
            default:
              goto LABEL_752;
          }
        case 7:
          v362 = a1[44];
          if (v362 < 7 || v362 - 8 < 2)
            goto LABEL_589;
          if (v362 != 7)
            goto LABEL_752;
          goto LABEL_580;
        case 8:
          v369 = a1[44];
          if (v369 >= 8 && v369 != 9)
          {
            if (v369 != 8)
              goto LABEL_752;
            v423 = turi::image_type::operator==(*((_QWORD *)a1 + 4) + 8, *(_QWORD *)&v492 + 8);
LABEL_711:
            v336 = v423;
            goto LABEL_743;
          }
          v336 = 0;
LABEL_572:
          v370 = *(unint64_t **)&v492;
          do
          {
            v371 = __ldaxr(v370);
            v372 = v371 - 1;
          }
          while (__stlxr(v372, v370));
          if (!v372)
          {
            v373 = v492;
            if (v492 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v492 + 16));
              v348 = v373;
              v349 = -235920773;
              goto LABEL_577;
            }
          }
          goto LABEL_579;
        case 9:
          v341 = a1[44];
          if (v341 < 9)
          {
            v336 = 0;
LABEL_522:
            v342 = *(unint64_t **)&v492;
            do
            {
              v343 = __ldaxr(v342);
              v344 = v343 - 1;
            }
            while (__stlxr(v344, v342));
            if (v344)
              goto LABEL_579;
            v345 = v492;
            if (v492 == 0.0)
              goto LABEL_579;
            v346 = *(void **)(*(_QWORD *)&v492 + 48);
            if (v346)
            {
              *(_QWORD *)(*(_QWORD *)&v492 + 56) = v346;
              operator delete(v346);
            }
            v347 = *(void **)(*(_QWORD *)&v345 + 24);
            if (v347)
            {
              *(_QWORD *)(*(_QWORD *)&v345 + 32) = v347;
              operator delete(v347);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v345 + 8);
            v348 = v345;
            v349 = 2071181815;
LABEL_577:
            v355 = v349 | 0x1030C4000000000;
            goto LABEL_578;
          }
          if (v341 != 9)
            goto LABEL_752;
          v424 = *((_QWORD *)a1 + 4);
          if (*(_QWORD *)&v492 != v424)
          {
            v485 = v492;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape(v424 + 8, *(_QWORD *)&v492 + 8))
              goto LABEL_741;
            v426 = *(char **)(v424 + 24);
            v425 = *(char **)(v424 + 32);
            v427 = v425 - v426;
            if (v425 != v426)
            {
              if (*(_QWORD *)(v424 + 8))
              {
                v428 = 1;
                do
                {
                  v429 = *(_QWORD *)v426;
                  v426 += 8;
                  v428 *= v429;
                }
                while (v426 != v425);
                if (v428)
                {
                  v490 = 0;
                  std::vector<unsigned long>::vector(&v486, v427 >> 3, &v490);
                  v430 = v486;
                  v431 = v487;
                  v432 = **(_QWORD **)(*(_QWORD *)&v485 + 8);
                  v433 = (char *)v487 - (char *)v486;
                  v434 = v487 - v486;
                  v435 = v434 - 1;
                  if (v434 <= 1)
                    v436 = 1;
                  else
                    v436 = v487 - v486;
                  do
                  {
                    if (v431 == v430)
                    {
                      v444 = 0;
                      v445 = *(double *)(**(_QWORD **)(v424 + 8) + 8 * *(_QWORD *)(v424 + 72));
                    }
                    else
                    {
                      v437 = 0;
                      v438 = *(uint64_t **)(v424 + 48);
                      v439 = v430;
                      v440 = v436;
                      do
                      {
                        v442 = (uint64_t)*v439++;
                        v441 = v442;
                        v443 = *v438++;
                        v437 += v443 * v441;
                        --v440;
                      }
                      while (v440);
                      v444 = 0;
                      v445 = *(double *)(**(_QWORD **)(v424 + 8) + 8 * (*(_QWORD *)(v424 + 72) + v437));
                      v446 = *(uint64_t **)(*(_QWORD *)&v485 + 48);
                      v447 = v430;
                      v448 = v436;
                      do
                      {
                        v450 = (uint64_t)*v447++;
                        v449 = v450;
                        v451 = *v446++;
                        v444 += v451 * v449;
                        --v448;
                      }
                      while (v448);
                    }
                    v452 = *(double *)(v432 + 8 * (*(_QWORD *)(*(_QWORD *)&v485 + 72) + v444));
                    v336 = v445 == v452;
                    if (v445 != v452)
                      break;
                    v453 = v434;
                    v454 = v434 - 1;
                    if (v433 >= 1)
                    {
                      v455 = *(_QWORD *)(v424 + 24);
                      v456 = (unint64_t)v430[v435] + 1;
                      v430[v435] = (void *)v456;
                      if (v456 >= *(_QWORD *)(v455 + 8 * v435))
                      {
                        v457 = v455 - 16;
                        v458 = v434;
                        v459 = (unint64_t *)((char *)v430 + (v433 & 0xFFFFFFFFFFFFFFF8) - 16);
                        while (1)
                        {
                          v460 = v458 - 1;
                          v459[1] = 0;
                          if ((uint64_t)(v458 - 1) <= 0)
                            break;
                          v461 = *v459 + 1;
                          *v459-- = v461;
                          v462 = *(_QWORD *)(v457 + 8 * v458--);
                          if (v461 < v462)
                          {
                            v454 = v460 - 1;
                            v453 = 1;
                            goto LABEL_688;
                          }
                        }
                        v336 = 1;
                        goto LABEL_746;
                      }
                      v453 = 1;
                      v454 = v434 - 1;
                    }
LABEL_688:
                    ;
                  }
                  while ((v454 & 0x8000000000000000) == 0 && v453);
                  if (!v430)
                    goto LABEL_743;
LABEL_746:
                  v487 = v430;
                  operator delete(v430);
                  goto LABEL_743;
                }
              }
            }
          }
          goto LABEL_742;
        default:
          goto LABEL_752;
      }
    }
  }
}

void sub_218237BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24)
{
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;

  switch(a24)
  {
    case 2:
      v25 = (unint64_t *)a22;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_39;
      v28 = a22;
      if (!a22)
        goto LABEL_39;
      if (*(char *)(a22 + 31) < 0)
        operator delete(*(void **)(a22 + 8));
      v29 = (_QWORD *)v28;
      v30 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v39 = (unint64_t *)a22;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_39;
      v42 = a22;
      if (!a22)
        goto LABEL_39;
      v43 = *(void **)(a22 + 8);
      if (v43)
      {
        *(_QWORD *)(a22 + 16) = v43;
        operator delete(v43);
      }
      v29 = (_QWORD *)v42;
      v30 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v31 = (unint64_t *)a22;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_39;
      v34 = a22;
      if (!a22)
        goto LABEL_39;
      a21 = a22 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
      goto LABEL_37;
    case 5:
      v44 = (unint64_t *)a22;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (v46)
        goto LABEL_39;
      v34 = a22;
      if (!a22)
        goto LABEL_39;
      a21 = a22 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
LABEL_37:
      v29 = (_QWORD *)v34;
      v30 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v47 = (unint64_t *)a22;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (v49)
        goto LABEL_39;
      v50 = a22;
      if (!a22)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(a22 + 16));
      v29 = (_QWORD *)v50;
      v38 = -235920773;
      goto LABEL_36;
    case 9:
      v35 = (unint64_t *)a22;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37 || !a22)
        goto LABEL_39;
      v29 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a22);
      v38 = 2071181815;
LABEL_36:
      v30 = v38 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v29, v30);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

void std::__function::__func<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3,std::allocator<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3,std::allocator<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D933650;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3,std::allocator<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D933650;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3,std::allocator<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  void **v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  const void *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void **v19;
  void *v20;
  std::string __p;
  std::string *p_p;

  v4 = a1 + 8;
  v5 = a2[12];
  switch(v5)
  {
    case 4:
      turi::slicer_impl::slice<std::vector<turi::flexible_type>>(v4, (_QWORD *)(*(_QWORD *)a2 + 8), (uint64_t *)&__p);
      *(_QWORD *)(a3 + 5) = 0;
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 12) = 4;
      v6 = operator new();
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)a3 = v6;
      *(_QWORD *)v6 = 1;
      if (*(_QWORD *)v6 != 1)
      {
        v7 = (_QWORD *)operator new();
        v8 = *(uint64_t **)(v6 + 8);
        *v7 = *(_QWORD *)v6;
        v7[2] = 0;
        v7[3] = 0;
        v7[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v7 + 1, v8, *(uint64_t **)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - (_QWORD)v8) >> 4);
        *(_QWORD *)a3 = v7;
        *v7 = 1;
        do
        {
          v9 = __ldaxr((unint64_t *)v6);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unint64_t *)v6));
        if (!v10)
        {
          p_p = (std::string *)(v6 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          MEMORY[0x219A19A08](v6, 0x1020C405E66F15BLL);
        }
      }
      v11 = *(void ***)a3;
      std::vector<turi::flexible_type>::__vdeallocate(v11 + 1);
      *(std::string *)(v11 + 1) = __p;
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      break;
    case 3:
      turi::slicer_impl::slice<std::vector<double>>(v4, (uint64_t *)(*(_QWORD *)a2 + 8), &__p.__r_.__value_.__l.__data_);
      *(_QWORD *)(a3 + 5) = 0;
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 12) = 3;
      v12 = (_QWORD *)operator new();
      *v12 = 0;
      v12[1] = 0;
      v13 = (void **)(v12 + 1);
      v12[2] = 0;
      v12[3] = 0;
      *(_QWORD *)a3 = v12;
      *v12 = 1;
      if (*v12 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (const void *)v12[1];
        *v14 = *v12;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, v15, v12[2], (uint64_t)(v12[2] - (_QWORD)v15) >> 3);
        *(_QWORD *)a3 = v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v12);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v12));
        if (!v17)
        {
          v18 = *v13;
          if (*v13)
          {
            v12[2] = v18;
            operator delete(v18);
          }
          MEMORY[0x219A19A08](v12, 0x1080C409938AC02);
        }
      }
      v19 = *(void ***)a3;
      v20 = v19[1];
      if (v20)
      {
        v19[2] = v20;
        operator delete(v20);
        v19[1] = 0;
        v19[2] = 0;
        v19[3] = 0;
      }
      *(std::string *)(v19 + 1) = __p;
      break;
    case 2:
      turi::slicer_impl::slice<std::string>(v4, (uint64_t *)(*(_QWORD *)a2 + 8), &__p);
      turi::flexible_type::flexible_type<std::string>(a3, (__int128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      break;
    default:
      *(_QWORD *)(a3 + 5) = 0;
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 12) = 7;
      break;
  }
}

void sub_2182381C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;

  v18 = v16;
  MEMORY[0x219A19A08](v18, 0x1080C409938AC02);
  do
  {
    v20 = __ldaxr(v17);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v17));
  if (!v21)
  {
    v22 = *v15;
    if (*v15)
    {
      v23 = *(void **)(v22 + 8);
      if (v23)
      {
        *(_QWORD *)(v22 + 16) = v23;
        operator delete(v23);
      }
      MEMORY[0x219A19A08](v22, 0x1080C409938AC02);
    }
    *v15 = 0;
  }
  *v15 = 0;
  *((_DWORD *)v15 + 2) = 0;
  *((_BYTE *)v15 + 12) = 0;
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3,std::allocator<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3,std::allocator<turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_3>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void turi::slicer_impl::slice<std::string>(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (*(_BYTE *)(a1 + 8))
  {
    v6 = *(_QWORD *)a1;
    if ((*(_QWORD *)a1 & 0x8000000000000000) != 0)
    {
      v7 = *((unsigned __int8 *)a2 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = a2[1];
      v6 += v7;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 <= 0)
    {
      if ((v8 & 0x8000000000000000) == 0)
        turi::slicer_impl::slice<std::string>(std::string const&)const::{lambda(void)#1}::operator()();
      v9 = *((unsigned __int8 *)a2 + 23);
      if ((v9 & 0x80u) != 0)
        v9 = a2[1];
      v6 = v9 - 1;
    }
    else
    {
      v6 = 0;
    }
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (v10 < 0)
    {
      v11 = *((unsigned __int8 *)a2 + 23);
      if ((v11 & 0x80u) != 0)
        v11 = a2[1];
      v10 += v11;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    if (v12 < 1)
    {
      if ((v12 & 0x8000000000000000) == 0)
        turi::slicer_impl::slice<std::string>(std::string const&)const::{lambda(void)#2}::operator()();
      v10 = -1;
    }
    else if (*((char *)a2 + 23) < 0)
    {
      v10 = a2[1];
    }
    else
    {
      v10 = *((unsigned __int8 *)a2 + 23);
    }
  }
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 < 1)
  {
    if (v13 && v6 > v10)
    {
      v18 = *((unsigned __int8 *)a2 + 23);
      if ((v18 & 0x80u) != 0)
        v18 = a2[1];
      v19 = v18 - 1;
      if (v6 >= v19)
        v20 = v19;
      else
        v20 = v6;
      if (v10 < 0)
        v21 = -1;
      else
        v21 = v10;
      while (v20 > v21)
      {
        if (*((char *)a2 + 23) >= 0)
          v22 = a2;
        else
          v22 = (uint64_t *)*a2;
        std::string::push_back(a3, *((_BYTE *)v22 + v20));
        v20 += *(_QWORD *)(a1 + 16);
      }
    }
  }
  else if (v6 < v10)
  {
    v14 = v6 & ~(v6 >> 63);
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    if (v10 >= v15)
      v16 = v15;
    else
      v16 = v10;
    while (v14 < v16)
    {
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      std::string::push_back(a3, *((_BYTE *)v17 + v14));
      v14 += *(_QWORD *)(a1 + 16);
    }
  }
}

void sub_218238520(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void turi::slicer_impl::slice<std::vector<double>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(_BYTE *)(a1 + 8))
  {
    v6 = *(_QWORD *)a1;
    if ((*(_QWORD *)a1 & 0x8000000000000000) != 0)
      v6 += (a2[1] - *a2) >> 3;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7 <= 0)
    {
      if ((v7 & 0x8000000000000000) == 0)
        turi::slicer_impl::slice<std::string>(std::string const&)const::{lambda(void)#1}::operator()();
      v6 = ((a2[1] - *a2) >> 3) - 1;
    }
    else
    {
      v6 = 0;
    }
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8 < 0)
      v8 += (a2[1] - *a2) >> 3;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 < 1)
    {
      if ((v9 & 0x8000000000000000) == 0)
        turi::slicer_impl::slice<std::string>(std::string const&)const::{lambda(void)#2}::operator()();
      v8 = -1;
    }
    else
    {
      v8 = (a2[1] - *a2) >> 3;
    }
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 < 1)
  {
    if (v10 && v6 > v8)
    {
      v26 = v6 >= ((a2[1] - *a2) >> 3) - 1 ? ((a2[1] - *a2) >> 3) - 1 : v6;
      v27 = v8 < 0 ? -1 : v8;
      if (v26 > v27)
      {
        v28 = 0;
        v29 = a3 + 2;
        do
        {
          v30 = *a2;
          if ((unint64_t)v28 >= *v29)
          {
            v32 = *a3;
            v33 = (v28 - *a3) >> 3;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v35 = *v29 - (_QWORD)v32;
            if (v35 >> 2 > v34)
              v34 = v35 >> 2;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v36);
              v32 = *a3;
              v28 = a3[1];
            }
            else
            {
              v37 = 0;
            }
            v38 = &v37[8 * v33];
            *(_QWORD *)v38 = *(_QWORD *)(v30 + 8 * v26);
            v31 = v38 + 8;
            while (v28 != v32)
            {
              v39 = *((_QWORD *)v28 - 1);
              v28 -= 8;
              *((_QWORD *)v38 - 1) = v39;
              v38 -= 8;
            }
            *a3 = v38;
            a3[1] = v31;
            a3[2] = &v37[8 * v36];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_QWORD *)v28 = *(_QWORD *)(v30 + 8 * v26);
            v31 = v28 + 8;
          }
          a3[1] = v31;
          v26 += *(_QWORD *)(a1 + 16);
          v28 = v31;
        }
        while (v26 > v27);
      }
    }
  }
  else if (v6 < v8)
  {
    v11 = v6 & ~(v6 >> 63);
    v12 = a2[1] - *a2;
    v13 = v8 >= v12 >> 3 ? v12 >> 3 : v8;
    if (v11 < v13)
    {
      v14 = 0;
      v15 = a3 + 2;
      do
      {
        v16 = *a2;
        if ((unint64_t)v14 >= *v15)
        {
          v18 = *a3;
          v19 = (v14 - *a3) >> 3;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v21 = *v15 - (_QWORD)v18;
          if (v21 >> 2 > v20)
            v20 = v21 >> 2;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v22);
            v18 = *a3;
            v14 = a3[1];
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[8 * v19];
          *(_QWORD *)v24 = *(_QWORD *)(v16 + 8 * v11);
          v17 = v24 + 8;
          while (v14 != v18)
          {
            v25 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v24 - 1) = v25;
            v24 -= 8;
          }
          *a3 = v24;
          a3[1] = v17;
          a3[2] = &v23[8 * v22];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_QWORD *)v14 = *(_QWORD *)(v16 + 8 * v11);
          v17 = v14 + 8;
        }
        a3[1] = v17;
        v11 += *(_QWORD *)(a1 + 16);
        v14 = v17;
      }
      while (v11 < v13);
    }
  }
}

void sub_21823885C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t turi::slicer_impl::slice<std::vector<turi::flexible_type>>@<X0>(unint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t *v27;
  unint64_t v28;

  v4 = result;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(_BYTE *)(result + 8))
  {
    v6 = *(_QWORD *)result;
    if ((*(_QWORD *)result & 0x8000000000000000) != 0)
      v6 += (uint64_t)(a2[1] - *a2) >> 4;
  }
  else
  {
    v7 = *(_QWORD *)(result + 16);
    if (v7 <= 0)
    {
      if ((v7 & 0x8000000000000000) == 0)
        turi::slicer_impl::slice<std::string>(std::string const&)const::{lambda(void)#1}::operator()();
      v6 = ((uint64_t)(a2[1] - *a2) >> 4) - 1;
    }
    else
    {
      v6 = 0;
    }
  }
  if (*(_BYTE *)(result + 24))
  {
    v8 = *(_QWORD *)(result + 32);
    if (v8 < 0)
      v8 += (uint64_t)(a2[1] - *a2) >> 4;
  }
  else
  {
    v9 = *(_QWORD *)(result + 16);
    if (v9 < 1)
    {
      if ((v9 & 0x8000000000000000) == 0)
        turi::slicer_impl::slice<std::string>(std::string const&)const::{lambda(void)#2}::operator()();
      v8 = -1;
    }
    else
    {
      v8 = (uint64_t)(a2[1] - *a2) >> 4;
    }
  }
  v10 = *(_QWORD *)(result + 16);
  if (v10 < 1)
  {
    if (v10 && v6 > v8)
    {
      v21 = v6 >= ((uint64_t)(a2[1] - *a2) >> 4) - 1 ? ((uint64_t)(a2[1] - *a2) >> 4) - 1 : v6;
      v22 = v8 < 0 ? -1 : v8;
      if (v21 > v22)
      {
        result = 0;
        do
        {
          v23 = *a2 + 16 * v21;
          if (result >= a3[2])
          {
            result = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(a3, (char *)v23);
          }
          else
          {
            *(_QWORD *)result = 0;
            *(_DWORD *)(result + 8) = 0;
            *(_BYTE *)(result + 12) = 0;
            if (result != v23)
            {
              v24 = *(_QWORD *)v23;
              *(_QWORD *)(result + 5) = *(_QWORD *)(v23 + 5);
              *(_QWORD *)result = v24;
              LODWORD(v24) = *(unsigned __int8 *)(v23 + 12);
              *(_BYTE *)(result + 12) = v24;
              v16 = v24 > 9;
              v25 = (1 << v24) & 0x33C;
              if (!v16 && v25 != 0)
              {
                v27 = *(unint64_t **)result;
                do
                  v28 = __ldaxr(v27);
                while (__stlxr(v28 + 1, v27));
              }
            }
            result += 16;
          }
          a3[1] = result;
          v21 += *(_QWORD *)(v4 + 16);
        }
        while (v21 > v22);
      }
    }
  }
  else if (v6 < v8)
  {
    v11 = v6 & ~(v6 >> 63);
    v12 = a2[1] - *a2;
    v13 = v8 >= v12 >> 4 ? v12 >> 4 : v8;
    if (v11 < v13)
    {
      result = 0;
      do
      {
        v14 = *a2 + 16 * v11;
        if (result >= a3[2])
        {
          result = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(a3, (char *)v14);
        }
        else
        {
          *(_QWORD *)result = 0;
          *(_DWORD *)(result + 8) = 0;
          *(_BYTE *)(result + 12) = 0;
          if (result != v14)
          {
            v15 = *(_QWORD *)v14;
            *(_QWORD *)(result + 5) = *(_QWORD *)(v14 + 5);
            *(_QWORD *)result = v15;
            LODWORD(v15) = *(unsigned __int8 *)(v14 + 12);
            *(_BYTE *)(result + 12) = v15;
            v16 = v15 > 9;
            v17 = (1 << v15) & 0x33C;
            if (!v16 && v17 != 0)
            {
              v19 = *(unint64_t **)result;
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v20 + 1, v19));
            }
          }
          result += 16;
        }
        a3[1] = result;
        v11 += *(_QWORD *)(v4 + 16);
      }
      while (v11 < v13);
    }
  }
  return result;
}

void sub_218238B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D9336D0;
  turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0::~$_0((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D9336D0;
  turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0::~$_0((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unint64_t **v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x18uLL);
  *result = &off_24D9336D0;
  result[1] = 0;
  v3 = (unint64_t **)(result + 1);
  *((_DWORD *)result + 4) = 0;
  *((_BYTE *)result + 20) = 0;
  if (result != (_QWORD *)a1)
  {
    *(_QWORD *)((char *)result + 13) = *(_QWORD *)(a1 + 13);
    *v3 = *(unint64_t **)(a1 + 8);
    v4 = *(unsigned __int8 *)(a1 + 20);
    *((_BYTE *)result + 20) = v4;
    v5 = v4 > 9;
    v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0)
    {
      v8 = *v3;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, uint64_t a2)
{
  unint64_t **v2;
  unint64_t *v3;
  BOOL v4;
  int v5;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a2 = &off_24D9336D0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = (unint64_t **)(a2 + 8);
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  if (a2 != result)
  {
    v3 = *(unint64_t **)(result + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(result + 13);
    *v2 = v3;
    LODWORD(v3) = *(unsigned __int8 *)(result + 20);
    *(_BYTE *)(a2 + 20) = (_BYTE)v3;
    v4 = v3 > 9;
    v5 = (1 << (char)v3) & 0x33C;
    if (!v4 && v5 != 0)
    {
      v7 = *v2;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0::~$_0(a1 + 8);
}

void std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0::~$_0((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  if (result + 8 != a2)
  {
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(result + 13);
    *(_QWORD *)a2 = *(_QWORD *)(result + 8);
    v2 = *(unsigned __int8 *)(result + 20);
    *(_BYTE *)(a2 + 12) = v2;
    v3 = v2 > 9;
    v4 = (1 << v2) & 0x33C;
    if (!v3 && v4 != 0)
    {
      v6 = *(unint64_t **)a2;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0,std::allocator<turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 604, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218238E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 605, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218239000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::parallel_for<void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type> & const&)::{lambda(void)#1}>(turi::sarray<turi::flexible_type> &)::stored_vtable
             + 1;
      v16[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2182391D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  _QWORD v21[3];
  _QWORD *v22;
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)*a1 + 32))(v21);
  v4 = *(_QWORD *)a1[1];
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v6 = *(_QWORD *)a1[1];
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v8 = v4 * a2 / v5;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v9 = (v6 + v6 * a2) / v7;
  if (*(_QWORD *)a1[2] == 1)
  {
    for (; v8 < v9; v8 += 1024)
      (*(void (**)(_QWORD))(**(_QWORD **)a1[4] + 48))(*(_QWORD *)a1[4]);
  }
  else if (v8 < v9)
  {
    do
    {
      v10 = *(_QWORD *)a1[3] + *(_QWORD *)a1[2] * v8;
      (*(void (**)(_QWORD, unint64_t, unint64_t, uint64_t *))(**(_QWORD **)a1[4] + 48))(*(_QWORD *)a1[4], v10, v10 + 1, &v17);
      if (v18 == v17)
        break;
      if (!v22)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *))(*v22 + 48))(v22);
      ++v8;
    }
    while (v8 != v9);
  }
  v20 = (void **)&v17;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v20);
  v11 = v26;
  if (v26 == v25)
  {
    v12 = 4;
    v11 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_14;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_14:
  v13 = v24;
  if (v24 == v23)
  {
    v14 = 4;
    v13 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_19;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_19:
  result = v22;
  if (v22 == v21)
  {
    v16 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v16 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void sub_218239468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type> & const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186E5A4ALL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186E5A4ALL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type> & const&)::{lambda(void)#1},void>::invoke(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
      result = turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}::operator()((_QWORD *)*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<turi::unity_sarray,std::allocator<turi::unity_sarray>,turi::unity_sarray&,void>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x60uLL);
  v4[2] = 0;
  *v4 = &unk_24D91E398;
  v4[1] = 0;
  v4[5] = 0;
  v4[4] = 0;
  v4[3] = &off_24D9315D0;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v4 + 6, (uint64_t *)(a1 + 24));
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void OUTLINED_FUNCTION_21_2()
{
  JUMPOUT(0x219A19A08);
}

__n128 OUTLINED_FUNCTION_50(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_57_0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

__n128 OUTLINED_FUNCTION_59(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_62()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

__n128 OUTLINED_FUNCTION_69(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_72(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

std::string *OUTLINED_FUNCTION_73(uint64_t a1, const std::string::value_type *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::string *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return std::string::append((std::string *)&a17, a2);
}

_QWORD *OUTLINED_FUNCTION_74(_QWORD *a1, uint64_t a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, 51);
}

void OUTLINED_FUNCTION_80()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void OUTLINED_FUNCTION_81(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = __p;
  operator delete(__p);
}

_QWORD *OUTLINED_FUNCTION_85(_QWORD *a1, uint64_t a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, 36);
}

std::string *OUTLINED_FUNCTION_86(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3, uint64_t a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return std::string::append((std::string *)&a13, a2, a3);
}

void OUTLINED_FUNCTION_87(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
}

void OUTLINED_FUNCTION_89()
{
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

_QWORD *OUTLINED_FUNCTION_90(_QWORD *a1, uint64_t a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, 48);
}

_QWORD *OUTLINED_FUNCTION_92(_QWORD *a1, uint64_t a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, 45);
}

uint64_t OUTLINED_FUNCTION_95()
{
  return std::iostream::~basic_iostream();
}

_QWORD *OUTLINED_FUNCTION_102(_QWORD *a1, uint64_t a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, 22);
}

void __cxx_global_var_init_126()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t *__cxx_global_var_init_127()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_128()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_129()
{
  uint64_t *result;

  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_130()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_131()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_132()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_unity_sarray_cpp()
{
  uint64_t result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  boost::spirit::lit = 0;
  boost::spirit::bin = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::stream = 0;
  boost::spirit::wstream = 0;
  boost::spirit::left_align = 0;
  boost::spirit::right_align = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::token = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_token = 0;
  boost::spirit::tokenid_mask = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  parser_impl::restricted_string = 0;
  return result;
}

CoreML::Model *CoreML::LogisticModel::LogisticModel(CoreML::Model *a1, const std::string *a2, const std::string *a3, const std::string *a4)
{
  CoreML::Model *v7;
  uint64_t v8;
  CoreML::Specification::GLMClassifier *v9;
  std::string **v10;
  std::string *v11;
  std::string **v12;
  uint64_t *v13;
  uint64_t v14;
  std::string **v15;
  std::string *v16;
  std::string **v17;
  uint64_t *v18;

  v7 = CoreML::Model::Model(a1, a4);
  *(_QWORD *)v7 = &unk_24D9337C0;
  v8 = *((_QWORD *)v7 + 1);
  if (*(_DWORD *)(v8 + 44) == 400)
  {
    v9 = *(CoreML::Specification::GLMClassifier **)(v8 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*((_QWORD *)v7 + 1));
    *(_DWORD *)(v8 + 44) = 400;
    v9 = (CoreML::Specification::GLMClassifier *)operator new();
    CoreML::Specification::GLMClassifier::GLMClassifier(v9);
    *(_QWORD *)(v8 + 32) = v9;
    v8 = *((_QWORD *)a1 + 1);
  }
  *((_DWORD *)v9 + 15) = 0;
  v10 = *(std::string ***)(v8 + 16);
  if (!v10)
  {
    v10 = (std::string **)operator new();
    CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)v10);
    *(_QWORD *)(v8 + 16) = v10;
  }
  v13 = (uint64_t *)v10[11];
  v12 = v10 + 11;
  v11 = (std::string *)v13;
  if (v13 == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v12, (uint64_t)a2);
  else
    std::string::operator=(v11, a2);
  v14 = *((_QWORD *)a1 + 1);
  v15 = *(std::string ***)(v14 + 16);
  if (!v15)
  {
    v15 = (std::string **)operator new();
    CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)v15);
    *(_QWORD *)(v14 + 16) = v15;
  }
  v18 = (uint64_t *)v15[12];
  v17 = v15 + 12;
  v16 = (std::string *)v18;
  if (v18 == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v17, (uint64_t)a3);
  else
    std::string::operator=(v16, a3);
  return a1;
}

void sub_218239C78(_Unwind_Exception *a1)
{
  CoreML::Model *v1;
  uint64_t v2;

  MEMORY[0x219A19A08](v2, 0x10A1C40FD9EAC30);
  CoreML::Model::~Model(v1);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::LogisticModel::setWeights@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v5;
  CoreML::Specification::GLMClassifier *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CoreML::Specification::GLMClassifier_DoubleArray *v10;
  _QWORD *v11;
  _QWORD *v12;
  CoreML::Specification::GLMClassifier_DoubleArray *v13;
  signed int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v5 + 44) == 400)
  {
    v6 = *(CoreML::Specification::GLMClassifier **)(v5 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v5 + 44) = 400;
    v6 = (CoreML::Specification::GLMClassifier *)operator new();
    CoreML::Specification::GLMClassifier::GLMClassifier(v6);
    *(_QWORD *)(v5 + 32) = v6;
  }
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    v9 = (uint64_t)v6 + 16;
    do
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v19, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
      v10 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>(v9);
      v11 = v19;
      v12 = v20;
      if (v19 != v20)
      {
        v13 = v10;
        v15 = (unsigned int *)((char *)v10 + 16);
        v14 = *((_DWORD *)v10 + 4);
        do
        {
          v16 = *v11;
          if (v14 == *((_DWORD *)v13 + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v15, v14 + 1);
            v14 = *v15;
          }
          v17 = *((_QWORD *)v13 + 3) + 8 * v14++;
          *((_DWORD *)v13 + 4) = v14;
          *(_QWORD *)(v17 + 8) = v16;
          ++v11;
        }
        while (v11 != v12);
        v11 = v19;
      }
      if (v11)
      {
        v20 = v11;
        operator delete(v11);
      }
      v7 += 24;
    }
    while (v7 != v8);
  }
  return CoreML::Result::Result(a3);
}

void sub_218239E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x219A19A08](v11, 0x10A1C40D1CF0537);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::LogisticModel::setOffsets@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v5 + 44) == 400)
  {
    v6 = *(_QWORD *)(v5 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v5 + 44) = 400;
    v6 = operator new();
    CoreML::Specification::GLMClassifier::GLMClassifier((CoreML::Specification::GLMClassifier *)v6);
    *(_QWORD *)(v5 + 32) = v6;
  }
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    v9 = *(_DWORD *)(v6 + 40);
    do
    {
      v10 = *v7;
      if (v9 == *(_DWORD *)(v6 + 44))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v6 + 40), v9 + 1);
        v9 = *(_DWORD *)(v6 + 40);
      }
      v11 = *(_QWORD *)(v6 + 48) + 8 * v9++;
      *(_DWORD *)(v6 + 40) = v9;
      *(_QWORD *)(v11 + 8) = v10;
      ++v7;
    }
    while (v7 != v8);
  }
  return CoreML::Result::Result(a3);
}

void sub_218239F38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40D1CF0537);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::LogisticModel::setClassNames@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  CoreML::Specification::StringVector *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _tc_google::protobuf::Arena **v14;
  int *v15;
  uint64_t v16;
  int v17;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v6 + 44) == 400)
  {
    v7 = *(_QWORD *)(v6 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v6 + 44) = 400;
    v7 = operator new();
    CoreML::Specification::GLMClassifier::GLMClassifier((CoreML::Specification::GLMClassifier *)v7);
    *(_QWORD *)(v6 + 32) = v7;
  }
  if (*(_DWORD *)(v7 + 84) == 100)
  {
    v8 = *(CoreML::Specification::StringVector **)(v7 + 72);
  }
  else
  {
    CoreML::Specification::GLMClassifier::clear_ClassLabels(v7);
    *(_DWORD *)(v7 + 84) = 100;
    v8 = (CoreML::Specification::StringVector *)operator new();
    CoreML::Specification::StringVector::StringVector(v8);
    *(_QWORD *)(v7 + 72) = v8;
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v8 + 16);
  if (a2[1] != *a2)
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v11 + 44) == 400)
      {
        v12 = *(_QWORD *)(v11 + 32);
      }
      else
      {
        CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
        *(_DWORD *)(v11 + 44) = 400;
        v12 = operator new();
        CoreML::Specification::GLMClassifier::GLMClassifier((CoreML::Specification::GLMClassifier *)v12);
        *(_QWORD *)(v11 + 32) = v12;
      }
      if (*(_DWORD *)(v12 + 84) == 100)
      {
        v13 = *(_QWORD *)(v12 + 72);
      }
      else
      {
        CoreML::Specification::GLMClassifier::clear_ClassLabels(v12);
        *(_DWORD *)(v12 + 84) = 100;
        v13 = operator new();
        CoreML::Specification::StringVector::StringVector((CoreML::Specification::StringVector *)v13);
        *(_QWORD *)(v12 + 72) = v13;
      }
      v14 = (_tc_google::protobuf::Arena **)(v13 + 16);
      v15 = *(int **)(v13 + 32);
      if (!v15)
        break;
      v16 = *(int *)(v13 + 24);
      v17 = *v15;
      if ((int)v16 >= *v15)
      {
        if (v17 == *(_DWORD *)(v13 + 28))
        {
LABEL_20:
          _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v13 + 16), v17 + 1);
          v15 = *(int **)(v13 + 32);
          v17 = *v15;
        }
        *v15 = v17 + 1;
        v19 = *v14;
        if (*v14)
        {
          Aligned->__r_.__value_.__l.__size_ = 0;
          Aligned->__r_.__value_.__r.__words[2] = 0;
          Aligned->__r_.__value_.__r.__words[0] = 0;
          _tc_google::protobuf::Arena::AddListNode(v19, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
        }
        else
        {
          Aligned = (std::string *)operator new();
          Aligned->__r_.__value_.__l.__size_ = 0;
          Aligned->__r_.__value_.__r.__words[2] = 0;
          Aligned->__r_.__value_.__r.__words[0] = 0;
        }
        v20 = *(_QWORD *)(v13 + 32);
        v21 = *(int *)(v13 + 24);
        *(_DWORD *)(v13 + 24) = v21 + 1;
        *(_QWORD *)(v20 + 8 * v21 + 8) = Aligned;
        goto LABEL_25;
      }
      *(_DWORD *)(v13 + 24) = v16 + 1;
      Aligned = *(std::string **)&v15[2 * v16 + 2];
LABEL_25:
      std::string::operator=(Aligned, (const std::string *)(*a2 + v9));
      ++v10;
      v9 += 24;
      if (v10 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3))
        return CoreML::Result::Result(a3);
    }
    v17 = *(_DWORD *)(v13 + 28);
    goto LABEL_20;
  }
  return CoreML::Result::Result(a3);
}

void sub_21823A208(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::LogisticModel::setClassNames@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  CoreML::Specification::Int64Vector *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v6 + 44) == 400)
  {
    v7 = *(_QWORD *)(v6 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v6 + 44) = 400;
    v7 = operator new();
    CoreML::Specification::GLMClassifier::GLMClassifier((CoreML::Specification::GLMClassifier *)v7);
    *(_QWORD *)(v6 + 32) = v7;
  }
  if (*(_DWORD *)(v7 + 84) == 101)
  {
    v8 = *(CoreML::Specification::Int64Vector **)(v7 + 72);
  }
  else
  {
    CoreML::Specification::GLMClassifier::clear_ClassLabels(v7);
    *(_DWORD *)(v7 + 84) = 101;
    v8 = (CoreML::Specification::Int64Vector *)operator new();
    CoreML::Specification::Int64Vector::Int64Vector(v8);
    *(_QWORD *)(v7 + 72) = v8;
  }
  *((_DWORD *)v8 + 4) = 0;
  if (a2[1] != *a2)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v10 + 44) == 400)
      {
        v11 = *(_QWORD *)(v10 + 32);
      }
      else
      {
        CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
        *(_DWORD *)(v10 + 44) = 400;
        v11 = operator new();
        CoreML::Specification::GLMClassifier::GLMClassifier((CoreML::Specification::GLMClassifier *)v11);
        *(_QWORD *)(v10 + 32) = v11;
      }
      if (*(_DWORD *)(v11 + 84) == 101)
      {
        v12 = *(_QWORD *)(v11 + 72);
      }
      else
      {
        CoreML::Specification::GLMClassifier::clear_ClassLabels(v11);
        *(_DWORD *)(v11 + 84) = 101;
        v12 = operator new();
        CoreML::Specification::Int64Vector::Int64Vector((CoreML::Specification::Int64Vector *)v12);
        *(_QWORD *)(v11 + 72) = v12;
      }
      v13 = *a2;
      v14 = *(_QWORD *)(*a2 + 8 * v9);
      v15 = *(_DWORD *)(v12 + 16);
      if (v15 == *(_DWORD *)(v12 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v12 + 16), v15 + 1);
        v15 = *(_DWORD *)(v12 + 16);
        v13 = *a2;
      }
      v16 = *(_QWORD *)(v12 + 24);
      *(_DWORD *)(v12 + 16) = v15 + 1;
      *(_QWORD *)(v16 + 8 * v15 + 8) = v14;
      ++v9;
    }
    while (v9 < (a2[1] - v13) >> 3);
  }
  return CoreML::Result::Result(a3);
}

void sub_21823A430(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

void CoreML::LogisticModel::~LogisticModel(CoreML::LogisticModel *this)
{
  CoreML::Model::~Model(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::GLMClassifier_DoubleArray *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::GLMClassifier_DoubleArray *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::GLMClassifier_DoubleArray **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>);
  }
  else
  {
    Aligned = (CoreML::Specification::GLMClassifier_DoubleArray *)operator new();
    CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_21823A5A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t _GLOBAL__sub_I_LogisticModel_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

BOOL turi::unity_sarray_binary_operations::check_operation_feasibility(_BOOL8 result, unsigned int a2, unsigned __int8 *a3)
{
  unsigned int v5;
  int v6;
  _WORD *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  _BYTE *v16;
  BOOL v17;
  BOOL v18;
  _QWORD *exception;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  const std::string::value_type *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string *v33;
  __int128 v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;

  v5 = result;
  v6 = a3[23];
  if (((char)a3[23] & 0x80000000) == 0)
  {
    if (v6 != 1)
    {
      v7 = a3;
      if (v6 != 2)
        goto LABEL_59;
      goto LABEL_58;
    }
    v10 = *a3;
    v11 = v10 > 0x2D || ((1 << v10) & 0x2C0000000000) == 0;
    if (v11 && v10 != 47)
      goto LABEL_25;
    goto LABEL_14;
  }
  v8 = *((_QWORD *)a3 + 1);
  if (v8 == 1)
  {
    v9 = **(unsigned __int8 **)a3;
    if (v9 == 42)
    {
      if (result != 6 || a2 != 6)
      {
LABEL_32:
        v12 = *(_BYTE **)a3;
        goto LABEL_33;
      }
      goto LABEL_29;
    }
    if (v9 == 43 || v9 == 45)
    {
LABEL_14:
      if (result != 6 || a2 != 6)
        goto LABEL_31;
      if ((v6 & 0x80) == 0)
      {
        v12 = a3;
        if (v6 != 1)
        {
LABEL_33:
          v14 = (char)*v12;
          if (v14 <= 59)
          {
            v15 = v14 - 37;
            v16 = &turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::plus_operator;
            switch(v15)
            {
              case 0:
              case 5:
              case 10:
                v16 = &turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::other_numeric_operators;
                goto LABEL_42;
              case 6:
                goto LABEL_42;
              case 8:
                v16 = &turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::minus_operator;
                goto LABEL_42;
              default:
                goto LABEL_43;
            }
          }
          if (v14 != 60)
          {
            if (v14 == 61)
            {
              v16 = &turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::equality_operators;
LABEL_42:
              if (v16[10 * result + (int)a2])
                return result;
LABEL_43:
              if (result >= 2)
              {
                if (result == 9)
                {
LABEL_49:
                  if (a2 >= 2 && a2 != 9)
                    goto LABEL_90;
                  return result;
                }
                if (result != 3)
                  goto LABEL_90;
              }
              if (a2 <= 3 && a2 != 2)
                return result;
              if (result > 1)
                goto LABEL_90;
              goto LABEL_49;
            }
            if (v14 != 62)
              goto LABEL_43;
          }
          v16 = turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::comparison_operators;
          goto LABEL_42;
        }
        goto LABEL_30;
      }
LABEL_29:
      v12 = *(_BYTE **)a3;
      if (*((_QWORD *)a3 + 1) != 1)
        goto LABEL_33;
LABEL_30:
      if (*v12 == 45)
        return result;
LABEL_31:
      v12 = a3;
      if ((v6 & 0x80) == 0)
        goto LABEL_33;
      goto LABEL_32;
    }
    v8 = *((_QWORD *)a3 + 1);
    if (v8 == 1)
    {
      v13 = **(unsigned __int8 **)a3;
      if (v13 == 47)
        goto LABEL_14;
      if ((v6 & 0x80) == 0)
      {
        if (v6 != 1)
          goto LABEL_59;
LABEL_25:
        if (*a3 != 37)
          goto LABEL_59;
LABEL_53:
        if (a2 | result)
          goto LABEL_90;
        return result;
      }
      if (v13 == 37)
        goto LABEL_53;
      v8 = *((_QWORD *)a3 + 1);
    }
  }
  if (v8 != 2)
    goto LABEL_59;
  v7 = *(_WORD **)a3;
LABEL_58:
  if (*v7 == 10794)
    goto LABEL_60;
LABEL_59:
  result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "//");
  if (result)
  {
LABEL_60:
    if (v5 >= 2 && v5 != 3 || a2 >= 2 && a2 != 3)
      goto LABEL_90;
    return result;
  }
  result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "<");
  if (!result)
  {
    result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, ">");
    if (!result)
    {
      result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "<=");
      if (!result)
      {
        result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, ">=");
        if (!result)
        {
          result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "==");
          if (result)
            return result;
          result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "!=");
          if (result)
            return result;
          result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "&");
          if (result)
            return result;
          result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "|");
          if (result)
            return result;
          result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "in");
          if (result)
          {
            if (v5 == 2 && a2 == 2)
              return result;
            v17 = v5 != 3 || a2 >= 2;
            v18 = !v17;
            if ((v5 & 0xFFFFFFFE) == 4 || v18)
              return result;
          }
          else
          {
            result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "left_abs");
            if (!result)
              turi::unity_sarray_binary_operations::check_operation_feasibility(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0::operator()();
            if (v5 < 2 || v5 == 3)
              return result;
          }
LABEL_90:
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v35, "Unsupported type operation. cannot perform operation ");
          v20 = (char)a3[23];
          if (v20 >= 0)
            v21 = (const std::string::value_type *)a3;
          else
            v21 = *(const std::string::value_type **)a3;
          if (v20 >= 0)
            v22 = a3[23];
          else
            v22 = *((_QWORD *)a3 + 1);
          v23 = std::string::append(&v35, v21, v22);
          v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          v25 = std::string::append(&v36, " between ");
          v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          v37.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          if (v5 > 9)
            v27 = "undefined";
          else
            v27 = off_24D935108[v5];
          v28 = std::string::append(&v37, v27);
          v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          v30 = std::string::append(&v38, " and ");
          v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v39.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          if (a2 > 9)
            v32 = "undefined";
          else
            v32 = off_24D935108[a2];
          v33 = std::string::append(&v39, v32);
          v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          exception[2] = *((_QWORD *)&v33->__r_.__value_.__l + 2);
          *(_OWORD *)exception = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
        }
      }
    }
  }
  if (!turi::flex_type_has_binary_op(turi::flex_type_enum,turi::flex_type_enum,char)::comparison_operators[10 * v5 + a2])
    goto LABEL_90;
  return result;
}

void sub_21823AB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  int v35;
  void *v36;
  uint64_t v37;

  if (*(char *)(v37 - 41) < 0)
    operator delete(*(void **)(v37 - 64));
  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v35 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v36);
  goto LABEL_14;
}

uint64_t turi::unity_sarray_binary_operations::get_output_type(int a1, int a2, unsigned __int8 **a3)
{
  _QWORD *v3;
  int v5;
  int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v12;
  unsigned __int8 *v14;
  char v15;
  char v16;
  char v18;
  BOOL v21;
  void *exception;

  v3 = a3;
  v5 = a1;
  v6 = *((unsigned __int8 *)a3 + 23);
  if (*((char *)a3 + 23) < 0)
  {
    v7 = a3[1];
    if (v7 == (unsigned __int8 *)1)
    {
      v8 = **a3;
      v9 = v8 > 0x2D;
      v10 = (1 << v8) & 0x2C0000000000;
      if (!v9 && v10 != 0)
      {
LABEL_18:
        if (!a1 && a2 == 1)
          goto LABEL_20;
        if (a1 == 6 && a2 == 6)
        {
          if ((v6 & 0x80) != 0)
          {
            if (a3[1] != (unsigned __int8 *)1)
              goto LABEL_79;
            v3 = *a3;
          }
          else if (v6 != 1)
          {
            goto LABEL_79;
          }
          if (*(_BYTE *)v3 == 45)
          {
LABEL_20:
            LOBYTE(v5) = 1;
            return (char)v5;
          }
        }
LABEL_79:
        v16 = 9;
        if (a2 == 3 || a1 == 3)
          v18 = 3;
        else
          v18 = a1;
        goto LABEL_85;
      }
      v7 = a3[1];
    }
    if (v7 != (unsigned __int8 *)2)
      goto LABEL_34;
    if (*(_WORD *)*a3 == 10794)
      goto LABEL_61;
    v7 = a3[1];
    if (v7 != (unsigned __int8 *)2)
      goto LABEL_34;
    if (*(_WORD *)*a3 == 12079)
    {
LABEL_67:
      v16 = 3;
      v18 = a1 == 1 || a2 == 1;
      if (a2 == 3)
        v18 = 3;
      v21 = a1 == 3;
LABEL_88:
      if (v21)
        LOBYTE(v5) = v16;
      else
        LOBYTE(v5) = v18;
      return (char)v5;
    }
    if ((v6 & 0x80) == 0)
    {
      v14 = (unsigned __int8 *)a3;
      if (v6 != 1)
        goto LABEL_44;
    }
    else
    {
LABEL_34:
      if (v7 != (unsigned __int8 *)1)
        goto LABEL_44;
      v14 = *a3;
    }
    v12 = *v14;
LABEL_37:
    if (v12 == 37)
    {
      if (a1 == 3)
        v15 = 3;
      else
        v15 = 0;
      if (a1 == 9)
        LOBYTE(v5) = 9;
      else
        LOBYTE(v5) = v15;
      return (char)v5;
    }
    goto LABEL_44;
  }
  if (v6 == 1)
  {
    v12 = *(unsigned __int8 *)a3;
    if (v12 <= 0x2D && ((1 << v12) & 0x2C0000000000) != 0)
      goto LABEL_18;
    goto LABEL_37;
  }
  if (v6 == 2)
  {
    if (*(_WORD *)a3 != 10794)
    {
      if (*(_WORD *)a3 == 12079)
        goto LABEL_67;
      goto LABEL_44;
    }
LABEL_61:
    if (a2 == 3 || a1 == 3)
      LOBYTE(v5) = 3;
    else
      LOBYTE(v5) = 1;
    return (char)v5;
  }
LABEL_44:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "/"))
  {
    v16 = 9;
    if (a2 == 3 || v5 == 3)
      v18 = 3;
    else
      v18 = 1;
LABEL_85:
    if (a2 == 9)
      v18 = 9;
    v21 = v5 == 9;
    goto LABEL_88;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "<")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, ">")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "<=")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, ">=")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "==")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "!=")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "&")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "|")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "in"))
  {
    LOBYTE(v5) = 0;
  }
  else if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "left_abs"))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Invalid Operation Type");
  }
  return (char)v5;
}

void sub_21823AEF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL turi::unity_sarray_binary_operations::get_binary_operator@<W0>(_BOOL8 result@<X0>, unsigned int a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t (***a4)()@<X8>)
{
  int v6;
  int v8;
  _WORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t (**v13)();
  BOOL v14;
  char *v15;
  BOOL v16;
  char *v17;
  uint64_t (**v18)();
  BOOL v19;
  uint64_t (**v20)();
  BOOL v21;
  BOOL v22;
  char *v23;
  BOOL v24;
  char *v25;
  BOOL v26;
  char *v27;
  BOOL v28;
  char *v29;
  void *exception;

  v6 = result;
  v8 = a3[23];
  if (((char)a3[23] & 0x80000000) == 0)
  {
    if (v8 != 1)
    {
      if (v8 == 2)
      {
        if (*(_WORD *)a3 != 10794)
        {
          v9 = a3;
          goto LABEL_71;
        }
LABEL_82:
        v13 = &off_24D934618;
        if (a2 == 3)
        {
          v13 = &off_24D934598;
          v22 = result == 3;
        }
        else
        {
          v22 = 0;
        }
        if (v22)
        v20 = (uint64_t (**)())(v23 + 16);
LABEL_88:
        v21 = v6 == 3;
LABEL_89:
        if (v21)
          v13 = v20;
        goto LABEL_139;
      }
      goto LABEL_72;
    }
    v12 = *a3;
    if (v12 != 42)
    {
      if (v12 != 45)
      {
        if (v12 == 43)
        {
LABEL_14:
          if (!result && a2 == 1)
          {
            v13 = &off_24D933808;
            goto LABEL_139;
          }
          if (result == 3 && a2 == 3)
          {
            v13 = &off_24D933898;
            goto LABEL_139;
          }
          v13 = &off_24D933918;
          v16 = a2 == 3 || a2 == 9;
          if (v16)
          v18 = (uint64_t (**)())(v17 + 16);
          if (result == 9)
            v18 = &off_24D933918;
          v19 = result == 3;
          goto LABEL_109;
        }
        if (v12 != 47)
          goto LABEL_72;
LABEL_27:
        v14 = a2 == 3 && result == 3;
        if (v14)
        v13 = (uint64_t (**)())(v15 + 16);
        if (result != 3)
        {
          v13 = &off_24D934298;
          if (a2 != 3)
          {
            if (result == 9)
            {
              v13 = &off_24D934318;
              goto LABEL_139;
            }
            v13 = &off_24D934418;
            v20 = &off_24D934398;
            v21 = a2 == 9;
            goto LABEL_89;
          }
        }
        goto LABEL_139;
      }
LABEL_17:
      if (result || a2 != 1)
      {
        if (result == 6 && a2 == 6)
        {
          v13 = &off_24D933B18;
        }
        else if (result == 3 && a2 == 3)
        {
          v13 = &off_24D933B98;
        }
        else
        {
          v13 = &off_24D933C18;
          if (result != 3 && result != 9)
          {
            v28 = a2 == 3 || a2 == 9;
            if (v28)
            v13 = (uint64_t (**)())(v29 + 16);
          }
        }
      }
      else
      {
        v13 = &off_24D933A98;
      }
      goto LABEL_139;
    }
LABEL_20:
    if (!result && a2 == 1)
    {
      v13 = &off_24D933D98;
      goto LABEL_139;
    }
    if (result == 3 && a2 == 3)
    {
      v13 = &off_24D933E18;
      goto LABEL_139;
    }
    if (result == 9 && a2 == 9)
      v13 = &off_24D933E98;
    else
      v13 = &off_24D933F18;
    if ((result != 9 || a2 != 9) && result != 3)
    {
      v13 = &off_24D934118;
      if (a2 == 9)
        v13 = &off_24D934098;
      if (result == 9)
        v13 = &off_24D934018;
      v20 = &off_24D933F98;
      v21 = a2 == 3;
      goto LABEL_89;
    }
    goto LABEL_139;
  }
  v10 = *((_QWORD *)a3 + 1);
  if (v10 == 1)
  {
    v11 = **(unsigned __int8 **)a3;
    switch(v11)
    {
      case '*':
        goto LABEL_20;
      case '+':
        goto LABEL_14;
      case '-':
        goto LABEL_17;
    }
    v10 = *((_QWORD *)a3 + 1);
    if (v10 == 1)
    {
      if (**(_BYTE **)a3 == 47)
        goto LABEL_27;
      if ((v8 & 0x80) == 0)
        goto LABEL_72;
    }
  }
  if (v10 != 2)
    goto LABEL_72;
  if (**(_WORD **)a3 == 10794)
    goto LABEL_82;
  if (*((_QWORD *)a3 + 1) != 2)
  {
LABEL_72:
    result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "%");
    if (result)
    {
      v13 = &off_24D934918;
      goto LABEL_139;
    }
    result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "in");
    if (result)
    {
      if (v6 == 2 && a2 == 2)
      {
        v13 = &off_24D934998;
        goto LABEL_139;
      }
      if (v6 == 3 && a2 < 2)
      {
        v13 = &off_24D934A18;
        goto LABEL_139;
      }
      if (v6 == 4)
      {
        v13 = &off_24D934A98;
        goto LABEL_139;
      }
      if (v6 == 5)
      {
        v13 = &off_24D934B18;
        goto LABEL_139;
      }
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "Invalid operands for flexible_type binary operator");
LABEL_141:
    }
    result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "left_abs");
    if (!result)
    {
      result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "<");
      if (result)
      {
        v13 = &off_24D934D18;
        goto LABEL_139;
      }
      result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, ">");
      if (result)
      {
        v13 = &off_24D934D98;
        goto LABEL_139;
      }
      result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "<=");
      if (result)
      {
        v13 = &off_24D934E18;
        goto LABEL_139;
      }
      result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, ">=");
      if (result)
      {
        v13 = &off_24D934E98;
        goto LABEL_139;
      }
      result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "==");
      if (result)
      {
        v13 = &off_24D934F18;
        goto LABEL_139;
      }
      result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "!=");
      if (result)
      {
        v13 = &off_24D934F98;
        goto LABEL_139;
      }
      result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "&");
      if (result)
      {
        v13 = &off_24D935018;
        goto LABEL_139;
      }
      result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, "|");
      if (result)
      {
        v13 = &off_24D935098;
        goto LABEL_139;
      }
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "Invalid Operation Type");
      goto LABEL_141;
    }
    v13 = &off_24D934C98;
    if (!v6)
      v13 = &off_24D934C18;
    v20 = &off_24D934B98;
    goto LABEL_88;
  }
  v9 = *(_WORD **)a3;
LABEL_71:
  if (*v9 != 12079)
    goto LABEL_72;
  v24 = a2 == 3 && result == 3;
  if (v24)
  v13 = (uint64_t (**)())(v25 + 16);
  if (result != 3)
  {
    v13 = &off_24D934798;
    v26 = a2 == 1 || result;
    if (v26)
    v18 = (uint64_t (**)())(v27 + 16);
    v19 = a2 == 3;
LABEL_109:
    if (!v19)
      v13 = v18;
  }
LABEL_139:
  *a4 = v13;
  a4[3] = (uint64_t (**)())a4;
  return result;
}

void sub_21823B4F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933808;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933808;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  float v23;
  double v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  float v41;
  double result;
  std::runtime_error *exception;
  std::string *v44;
  __int128 v45;
  std::runtime_error *v46;
  std::string *v47;
  __int128 v48;
  void *__p[2];
  void *v50[2];
  __int128 v51;
  __int128 v52;
  std::string v53;
  size_t __idx;

  v5 = 0.0;
  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      v5 = *(double *)a1;
      break;
    case 2:
      v10 = *(_QWORD *)a1;
      v11 = (char **)(*(_QWORD *)a1 + 8);
      __idx = 0;
      v12 = (char *)v11;
      if (*(char *)(v10 + 31) < 0)
        v12 = *v11;
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      v13 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v50[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v10 + 31) < 0)
        v14 = *(_QWORD *)(v10 + 16);
      else
        v14 = *(unsigned __int8 *)(v10 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v44 = std::string::append(&v53, " cannot be interpreted as a float");
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50[0] = (void *)v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v23 = v13;
      v5 = v23;
      break;
    case 3:
      v6 = *(_QWORD *)a1;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v15 = *(_QWORD *)a1;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 5:
      v16 = *(_QWORD *)a1;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 6:
      v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v17 = *(_QWORD *)a1;
      v18 = *(unsigned int **)(*(_QWORD *)a1 + 16);
      __p[0] = *(void **)(*(_QWORD *)a1 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v51 = *(_OWORD *)(v17 + 40);
      v52 = v22;
      *(_OWORD *)v50 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v51 + 1))
      {
        *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
        operator delete(*((void **)&v51 + 1));
      }
      if (v50[0])
      {
        v50[1] = v50[0];
        operator delete(v50[0]);
      }
      v7 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v8 = (unint64_t *)((char *)__p[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v24 = 0.0;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v24 = (double)*(uint64_t *)a2;
      break;
    case 1:
      v24 = *(double *)a2;
      break;
    case 2:
      v29 = *(_QWORD *)a2;
      __idx = 0;
      v30 = (char *)(v29 + 8);
      if (*(char *)(v29 + 31) < 0)
        v30 = *(char **)(v29 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v30);
      v31 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v50[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v29 + 31) < 0)
        v32 = *(_QWORD *)(v29 + 16);
      else
        v32 = *(unsigned __int8 *)(v29 + 31);
      if (__idx != v32)
      {
        v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v47 = std::string::append(&v53, " cannot be interpreted as a float");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v50[0] = (void *)v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v46, (const std::string *)__p);
        __cxa_throw(v46, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v41 = v31;
      v24 = v41;
      break;
    case 3:
      v25 = *(_QWORD *)a2;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v25 + 8), *(_QWORD *)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v33 = *(_QWORD *)a2;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v33 + 8), *(uint64_t **)(v33 + 16), (uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 5:
      v34 = *(_QWORD *)a2;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v34 + 8), *(uint64_t **)(v34 + 16), (uint64_t)(*(_QWORD *)(v34 + 16) - *(_QWORD *)(v34 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 6:
      v24 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v35 = *(_QWORD *)a2;
      v36 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v36;
      if (v36)
      {
        v37 = v36 + 2;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = *(_OWORD *)(v35 + 24);
      v40 = *(_OWORD *)(v35 + 56);
      v51 = *(_OWORD *)(v35 + 40);
      v52 = v40;
      *(_OWORD *)v50 = v39;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v51 + 1))
      {
        *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
        operator delete(*((void **)&v51 + 1));
      }
      if (v50[0])
      {
        v50[1] = v50[0];
        operator delete(v50[0]);
      }
      v26 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v27 = (unint64_t *)((char *)__p[1] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  result = v5 + v24;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 1;
  *(double *)a3 = v5 + v24;
  return result;
}

void sub_21823BB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_0>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933898;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933898;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, _BYTE *a2@<X2>, unsigned __int8 *a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_1::operator()(unsigned __int8 *a1@<X0>, _BYTE *a2@<X1>, unsigned __int8 *a3@<X8>)
{
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  unint64_t v41;
  double v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  BOOL v63;
  _QWORD *v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  BOOL v72;
  double v73;
  unint64_t *v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  double *v80;
  uint64_t v81;
  unint64_t v82;
  double *v83;
  double v84;
  _QWORD *v85;
  unint64_t v86;
  double v87;
  unint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void **v101;
  void **v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  void **v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  BOOL v133;
  _QWORD *v134;
  unint64_t v135;
  unint64_t *v136;
  _QWORD *v137;
  unint64_t v138;
  unint64_t v139;
  void *v140;
  double *v141;
  uint64_t v142;
  unint64_t v143;
  double v144;
  unint64_t *v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  void *v149;
  double *v150;
  uint64_t v151;
  double v152;
  unint64_t v153;
  _QWORD *v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  unint64_t v160;
  void *v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void **v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  unint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t *v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  _QWORD *v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t *v207;
  double v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void **v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  unint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  double v231;
  _QWORD *v232;
  unint64_t v233;
  BOOL v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int *v239;
  unsigned int v240;
  __int128 v241;
  __int128 v242;
  unint64_t v243;
  BOOL v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  _QWORD *v248;
  unint64_t v249;
  _QWORD *v250;
  unint64_t v251;
  _QWORD *v252;
  unint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  unint64_t v256;
  _QWORD *v257;
  unint64_t v258;
  _QWORD *v259;
  unint64_t v260;
  double v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  unint64_t v275;
  unsigned int v276;
  _QWORD *v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int *v282;
  unsigned int v283;
  __int128 v284;
  __int128 v285;
  unint64_t v286;
  _QWORD *v287;
  unint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  _QWORD *v291;
  unint64_t v292;
  _QWORD *v293;
  unint64_t v294;
  _QWORD *v295;
  unint64_t v296;
  _QWORD *v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  __int128 v304;
  __int128 v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int *v310;
  unsigned int v311;
  __int128 v312;
  __int128 v313;
  unint64_t v314;
  _QWORD *v315;
  unint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  _QWORD *v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int *v324;
  unsigned int v325;
  __int128 v326;
  __int128 v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  __int128 v334;
  __int128 v335;
  unint64_t v336;
  _QWORD *v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int *v342;
  unsigned int v343;
  __int128 v344;
  __int128 v345;
  unint64_t v346;
  _QWORD *v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int *v352;
  unsigned int v353;
  __int128 v354;
  __int128 v355;
  unint64_t v356;
  _QWORD *v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int *v362;
  unsigned int v363;
  __int128 v364;
  __int128 v365;
  unint64_t v366;
  uint64_t v367;
  void **v368;
  void **v369;

  v5 = a1[12];
  v6 = 1;
  switch(a1[12])
  {
    case 3u:
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v8 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v9 = 3;
      goto LABEL_5;
    case 4u:
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v8 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v9 = 4;
      goto LABEL_5;
    case 5u:
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v8 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v9 = 5;
LABEL_5:
      v6 = (uint64_t)(*v8 - *v7) >> v9;
      break;
    case 9u:
      v21 = *(uint64_t **)(*(_QWORD *)a1 + 24);
      v20 = *(uint64_t **)(*(_QWORD *)a1 + 32);
      if (v20 == v21)
      {
        v6 = 0;
      }
      else
      {
        v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
        if (v6)
        {
          v6 = 1;
          do
          {
            v22 = *v21++;
            v6 *= v22;
          }
          while (v21 != v20);
        }
      }
      break;
    default:
      break;
  }
  v10 = 1;
  switch(a2[12])
  {
    case 3:
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v12 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v13 = 3;
      goto LABEL_10;
    case 4:
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v12 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v13 = 4;
      goto LABEL_10;
    case 5:
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v12 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v13 = 5;
LABEL_10:
      v10 = (uint64_t)(*v12 - *v11) >> v13;
      break;
    case 9:
      v24 = *(uint64_t **)(*(_QWORD *)a2 + 24);
      v23 = *(uint64_t **)(*(_QWORD *)a2 + 32);
      if (v23 == v24)
      {
        v10 = 0;
      }
      else
      {
        v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
        if (v10)
        {
          v10 = 1;
          do
          {
            v25 = *v24++;
            v10 *= v25;
          }
          while (v24 != v23);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  a3[12] = 0;
  if (v6 != v10)
  {
    if (a3 != (unsigned __int8 *)&turi::FLEX_UNDEFINED)
    {
      *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
      v17 = byte_254FF28D4;
      a3[12] = byte_254FF28D4;
      switch(v17)
      {
        case 2:
          v18 = *(unint64_t **)a3;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
          break;
        case 3:
          v30 = *(unint64_t **)a3;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
          break;
        case 4:
          v26 = *(unint64_t **)a3;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 + 1, v26));
          break;
        case 5:
          v32 = *(unint64_t **)a3;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 + 1, v32));
          break;
        case 8:
          v34 = *(unint64_t **)a3;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 + 1, v34));
          break;
        case 9:
          v28 = *(unint64_t **)a3;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
          break;
        default:
          return;
      }
    }
    return;
  }
  if (a1 != a3)
  {
    *(_QWORD *)(a3 + 5) = *(_QWORD *)(a1 + 5);
    *(_QWORD *)a3 = *(_QWORD *)a1;
    a3[12] = v5;
    if (v5 <= 9 && ((1 << v5) & 0x33C) != 0)
    {
      v14 = *(unint64_t **)a3;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
  switch(a2[12])
  {
    case 0:
      switch(a3[12])
      {
        case 0u:
          v16 = *(_QWORD *)a3 + *(_QWORD *)a2;
          goto LABEL_89;
        case 1u:
          v231 = *(double *)a3 + (double)*(uint64_t *)a2;
          goto LABEL_346;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v257 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v257, *(_QWORD *)a3);
          *(_QWORD *)a3 = v257;
          *v257 = 1;
          do
          {
            v258 = __ldaxr((unint64_t *)v36);
            v39 = --v258 == 0;
          }
          while (__stlxr(v258, (unint64_t *)v36));
          goto LABEL_322;
        case 3u:
          v136 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 != 1)
          {
            v137 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v137, *(_QWORD *)a3);
            *(_QWORD *)a3 = v137;
            *v137 = 1;
            do
            {
              v138 = __ldaxr(v136);
              v139 = v138 - 1;
            }
            while (__stlxr(v139, v136));
            if (!v139)
            {
              v140 = (void *)v136[1];
              if (v140)
              {
                v136[2] = (unint64_t)v140;
                operator delete(v140);
              }
              MEMORY[0x219A19A08](v136, 0x1080C409938AC02);
            }
          }
          v141 = *(double **)(*(_QWORD *)a3 + 8);
          v142 = *(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v141;
          if (v142)
          {
            v143 = v142 >> 3;
            v144 = (double)*(uint64_t *)a2;
            if (v143 <= 1)
              v143 = 1;
            do
            {
              *v141 = *v141 + v144;
              ++v141;
              --v143;
            }
            while (v143);
          }
          return;
        case 4u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v291 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v291, *(_QWORD *)a3);
          *(_QWORD *)a3 = v291;
          *v291 = 1;
          do
          {
            v292 = __ldaxr((unint64_t *)v130);
            v234 = --v292 == 0;
          }
          while (__stlxr(v292, (unint64_t *)v130));
          goto LABEL_449;
        case 5u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v317 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v317, *(_QWORD *)a3);
          *(_QWORD *)a3 = v317;
          *v317 = 1;
          do
          {
            v318 = __ldaxr((unint64_t *)v130);
            v133 = --v318 == 0;
          }
          while (__stlxr(v318, (unint64_t *)v130));
          goto LABEL_407;
        case 6u:
          *(_QWORD *)a3 = *(_QWORD *)a3 & 0xFF00000000000000 | (*(_QWORD *)a3 + *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL;
          return;
        case 7u:
          goto LABEL_464;
        case 8u:
          v235 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v321 = operator new();
          v322 = *(_QWORD *)a3;
          *(_QWORD *)v321 = **(_QWORD **)a3;
          *(_QWORD *)(v321 + 8) = *(_QWORD *)(v322 + 8);
          v323 = *(_QWORD *)(v322 + 16);
          *(_QWORD *)(v321 + 16) = v323;
          if (v323)
          {
            v324 = (unsigned int *)(v323 + 8);
            do
              v325 = __ldxr(v324);
            while (__stxr(v325 + 1, v324));
          }
          v326 = *(_OWORD *)(v322 + 24);
          v327 = *(_OWORD *)(v322 + 40);
          *(_OWORD *)(v321 + 56) = *(_OWORD *)(v322 + 56);
          *(_OWORD *)(v321 + 40) = v327;
          *(_OWORD *)(v321 + 24) = v326;
          *(_QWORD *)a3 = v321;
          *(_QWORD *)v321 = 1;
          do
          {
            v328 = __ldaxr((unint64_t *)v235);
            v244 = --v328 == 0;
          }
          while (__stlxr(v328, (unint64_t *)v235));
          goto LABEL_459;
        case 9u:
          v169 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 != 1)
          {
            v170 = (_QWORD *)operator new();
            v171 = *(_QWORD *)a3 + 8;
            *v170 = **(_QWORD **)a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v170 + 1, v171);
            *(_QWORD *)a3 = v170;
            *v170 = 1;
            do
            {
              v172 = __ldaxr(v169);
              v173 = v172 - 1;
            }
            while (__stlxr(v173, v169));
            if (!v173)
            {
              v174 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v169);
              MEMORY[0x219A19A08](v174, 0x1030C407B73B9F7);
            }
          }
          v175 = *(uint64_t **)a3;
          v177 = *(uint64_t **)(*(_QWORD *)a3 + 24);
          v176 = *(uint64_t **)(*(_QWORD *)a3 + 32);
          if (v176 == v177)
            return;
          if (!v175[1])
            return;
          v178 = (double)*(uint64_t *)a2;
          v179 = 1;
          do
          {
            v180 = *v177++;
            v179 *= v180;
          }
          while (v177 != v176);
          if (!v179)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v175 + 1);
          v181 = (v175[4] - v175[3]) >> 3;
          v367 = 0;
          std::vector<unsigned long>::vector(&v368, v181, &v367);
          v101 = v368;
          v182 = v369;
          break;
        default:
          goto LABEL_467;
      }
      while (2)
      {
        v183 = 0;
        v184 = (char *)v182 - (char *)v101;
        if (v184)
        {
          v185 = v184 >> 3;
          v186 = (uint64_t *)v175[6];
          if (v185 <= 1)
            v185 = 1;
          do
          {
            v188 = (uint64_t)*v101++;
            v187 = v188;
            v189 = *v186++;
            v183 += v189 * v187;
            --v185;
          }
          while (v185);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v175 + 1);
        *(double *)(*(_QWORD *)v175[1] + 8 * (v175[9] + v183)) = *(double *)(*(_QWORD *)v175[1] + 8 * (v175[9] + v183))
                                                               + v178;
        v101 = v368;
        v182 = v369;
        v190 = v369 - v368;
        v191 = v190 - 1;
        if ((char *)v369 - (char *)v368 < 1)
          goto LABEL_250;
        v192 = v175[3];
        v193 = (char *)v368[v191] + 1;
        v368[v191] = v193;
        if ((unint64_t)v193 < *(_QWORD *)(v192 + 8 * v191))
        {
LABEL_249:
          v190 = 1;
LABEL_250:
          if (v191 < 0 || !v190)
            goto LABEL_277;
          continue;
        }
        break;
      }
      v194 = (unint64_t *)&v101[v190 - 2];
      v195 = v192 - 16;
      while (1)
      {
        v196 = v190 - 1;
        v194[1] = 0;
        if (v190 - 1 <= 0)
          goto LABEL_278;
        v197 = *v194 + 1;
        *v194-- = v197;
        v198 = *(_QWORD *)(v195 + 8 * v190--);
        if (v197 < v198)
        {
          v191 = v196 - 1;
          goto LABEL_249;
        }
      }
    case 1:
      switch(a3[12])
      {
        case 0u:
          v16 = (uint64_t)(*(double *)a2 + (double)*(uint64_t *)a3);
LABEL_89:
          *(_QWORD *)a3 = v16;
          return;
        case 1u:
          v231 = *(double *)a2 + *(double *)a3;
LABEL_346:
          *(double *)a3 = v231;
          return;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v259 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v259, *(_QWORD *)a3);
          *(_QWORD *)a3 = v259;
          *v259 = 1;
          do
          {
            v260 = __ldaxr((unint64_t *)v36);
            v39 = --v260 == 0;
          }
          while (__stlxr(v260, (unint64_t *)v36));
          goto LABEL_322;
        case 3u:
          v145 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 != 1)
          {
            v146 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v146, *(_QWORD *)a3);
            *(_QWORD *)a3 = v146;
            *v146 = 1;
            do
            {
              v147 = __ldaxr(v145);
              v148 = v147 - 1;
            }
            while (__stlxr(v148, v145));
            if (!v148)
            {
              v149 = (void *)v145[1];
              if (v149)
              {
                v145[2] = (unint64_t)v149;
                operator delete(v149);
              }
              MEMORY[0x219A19A08](v145, 0x1080C409938AC02);
            }
          }
          v150 = *(double **)(*(_QWORD *)a3 + 8);
          v151 = *(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v150;
          if (v151)
          {
            v152 = *(double *)a2;
            v153 = v151 >> 3;
            if (v153 <= 1)
              v153 = 1;
            do
            {
              *v150 = v152 + *v150;
              ++v150;
              --v153;
            }
            while (v153);
          }
          return;
        case 4u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v293 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v293, *(_QWORD *)a3);
          *(_QWORD *)a3 = v293;
          *v293 = 1;
          do
          {
            v294 = __ldaxr((unint64_t *)v130);
            v234 = --v294 == 0;
          }
          while (__stlxr(v294, (unint64_t *)v130));
          goto LABEL_449;
        case 5u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v319 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v319, *(_QWORD *)a3);
          *(_QWORD *)a3 = v319;
          *v319 = 1;
          do
          {
            v320 = __ldaxr((unint64_t *)v130);
            v133 = --v320 == 0;
          }
          while (__stlxr(v320, (unint64_t *)v130));
          goto LABEL_407;
        case 6u:
          v261 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          v262 = *(_QWORD *)a3;
          v263 = *(_QWORD *)a3 + vcvtmd_s64_f64(*(double *)a2);
          *(_QWORD *)a3 = *(_QWORD *)a3 & 0xFF00000000000000 | v263 & 0xFFFFFFFFFFFFFFLL;
          v264 = (uint64_t)v261 + *((int *)a3 + 2);
          if (v264 >= 1000000)
          {
            *(_QWORD *)a3 = (v263 + 1) & 0xFFFFFFFFFFFFFFLL | v262 & 0xFF00000000000000;
            LODWORD(v264) = v264 - 1000000;
          }
          if (v264 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          *((_DWORD *)a3 + 2) = v264;
          return;
        case 7u:
          goto LABEL_464;
        case 8u:
          v235 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v329 = operator new();
          v330 = *(_QWORD *)a3;
          *(_QWORD *)v329 = **(_QWORD **)a3;
          *(_QWORD *)(v329 + 8) = *(_QWORD *)(v330 + 8);
          v331 = *(_QWORD *)(v330 + 16);
          *(_QWORD *)(v329 + 16) = v331;
          if (v331)
          {
            v332 = (unsigned int *)(v331 + 8);
            do
              v333 = __ldxr(v332);
            while (__stxr(v333 + 1, v332));
          }
          v334 = *(_OWORD *)(v330 + 24);
          v335 = *(_OWORD *)(v330 + 40);
          *(_OWORD *)(v329 + 56) = *(_OWORD *)(v330 + 56);
          *(_OWORD *)(v329 + 40) = v335;
          *(_OWORD *)(v329 + 24) = v334;
          *(_QWORD *)a3 = v329;
          *(_QWORD *)v329 = 1;
          do
          {
            v336 = __ldaxr((unint64_t *)v235);
            v244 = --v336 == 0;
          }
          while (__stlxr(v336, (unint64_t *)v235));
          goto LABEL_459;
        case 9u:
          v199 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 != 1)
          {
            v200 = (_QWORD *)operator new();
            v201 = *(_QWORD *)a3 + 8;
            *v200 = **(_QWORD **)a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v200 + 1, v201);
            *(_QWORD *)a3 = v200;
            *v200 = 1;
            do
            {
              v202 = __ldaxr(v199);
              v203 = v202 - 1;
            }
            while (__stlxr(v203, v199));
            if (!v203)
            {
              v204 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v199);
              MEMORY[0x219A19A08](v204, 0x1030C407B73B9F7);
            }
          }
          v205 = *(uint64_t **)a3;
          v207 = *(uint64_t **)(*(_QWORD *)a3 + 24);
          v206 = *(uint64_t **)(*(_QWORD *)a3 + 32);
          if (v206 == v207)
            return;
          if (!v205[1])
            return;
          v208 = *(double *)a2;
          v209 = 1;
          do
          {
            v210 = *v207++;
            v209 *= v210;
          }
          while (v207 != v206);
          if (!v209)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v205 + 1);
          v211 = (v205[4] - v205[3]) >> 3;
          v367 = 0;
          std::vector<unsigned long>::vector(&v368, v211, &v367);
          v101 = v368;
          v212 = v369;
          break;
        default:
          goto LABEL_467;
      }
      while (2)
      {
        v213 = 0;
        v214 = (char *)v212 - (char *)v101;
        if (v214)
        {
          v215 = v214 >> 3;
          v216 = (uint64_t *)v205[6];
          if (v215 <= 1)
            v215 = 1;
          do
          {
            v218 = (uint64_t)*v101++;
            v217 = v218;
            v219 = *v216++;
            v213 += v219 * v217;
            --v215;
          }
          while (v215);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v205 + 1);
        *(double *)(*(_QWORD *)v205[1] + 8 * (v205[9] + v213)) = v208
                                                               + *(double *)(*(_QWORD *)v205[1] + 8 * (v205[9] + v213));
        v101 = v368;
        v212 = v369;
        v220 = v369 - v368;
        v221 = v220 - 1;
        if ((char *)v369 - (char *)v368 < 1)
          goto LABEL_275;
        v222 = v205[3];
        v223 = (char *)v368[v221] + 1;
        v368[v221] = v223;
        if ((unint64_t)v223 < *(_QWORD *)(v222 + 8 * v221))
        {
LABEL_274:
          v220 = 1;
LABEL_275:
          if (v221 < 0 || !v220)
            goto LABEL_277;
          continue;
        }
        break;
      }
      v224 = (unint64_t *)&v101[v220 - 2];
      v225 = v222 - 16;
      while (1)
      {
        v226 = v220 - 1;
        v224[1] = 0;
        if (v220 - 1 <= 0)
          goto LABEL_278;
        v227 = *v224 + 1;
        *v224-- = v227;
        v228 = *(_QWORD *)(v225 + 8 * v220--);
        if (v227 < v228)
        {
          v221 = v226 - 1;
          goto LABEL_274;
        }
      }
    case 2:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_464;
        case 2u:
          v42 = *(double *)a2;
          v43 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 != 1)
          {
            v44 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v44, *(_QWORD *)a3);
            *(_QWORD *)a3 = v44;
            *v44 = 1;
            do
            {
              v45 = __ldaxr((unint64_t *)v43);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, (unint64_t *)v43));
            if (!v46)
            {
              if (*(char *)(v43 + 31) < 0)
                operator delete(*(void **)(v43 + 8));
              MEMORY[0x219A19A08](v43, 0x1012C404EF22A49);
            }
          }
          v47 = *(char *)(*(_QWORD *)&v42 + 31);
          if (v47 >= 0)
            v48 = (const std::string::value_type *)(*(_QWORD *)&v42 + 8);
          else
            v48 = *(const std::string::value_type **)(*(_QWORD *)&v42 + 8);
          if (v47 >= 0)
            v49 = *(unsigned __int8 *)(*(_QWORD *)&v42 + 31);
          else
            v49 = *(_QWORD *)(*(_QWORD *)&v42 + 16);
          std::string::append((std::string *)(*(_QWORD *)a3 + 8), v48, v49);
          return;
        case 3u:
          v60 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v66 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v66, *(_QWORD *)a3);
          *(_QWORD *)a3 = v66;
          *v66 = 1;
          do
          {
            v67 = __ldaxr(v60);
            v63 = --v67 == 0;
          }
          while (__stlxr(v67, v60));
          goto LABEL_215;
        case 4u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v277 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v277, *(_QWORD *)a3);
          *(_QWORD *)a3 = v277;
          *v277 = 1;
          do
          {
            v278 = __ldaxr((unint64_t *)v130);
            v234 = --v278 == 0;
          }
          while (__stlxr(v278, (unint64_t *)v130));
          goto LABEL_449;
        case 5u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v229, *(_QWORD *)a3);
          *(_QWORD *)a3 = v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr((unint64_t *)v130);
            v133 = --v230 == 0;
          }
          while (__stlxr(v230, (unint64_t *)v130));
          goto LABEL_407;
        case 8u:
          v235 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v279 = operator new();
          v280 = *(_QWORD *)a3;
          *(_QWORD *)v279 = **(_QWORD **)a3;
          *(_QWORD *)(v279 + 8) = *(_QWORD *)(v280 + 8);
          v281 = *(_QWORD *)(v280 + 16);
          *(_QWORD *)(v279 + 16) = v281;
          if (v281)
          {
            v282 = (unsigned int *)(v281 + 8);
            do
              v283 = __ldxr(v282);
            while (__stxr(v283 + 1, v282));
          }
          v284 = *(_OWORD *)(v280 + 24);
          v285 = *(_OWORD *)(v280 + 40);
          *(_OWORD *)(v279 + 56) = *(_OWORD *)(v280 + 56);
          *(_OWORD *)(v279 + 40) = v285;
          *(_OWORD *)(v279 + 24) = v284;
          *(_QWORD *)a3 = v279;
          *(_QWORD *)v279 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v235);
            v244 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v235));
          goto LABEL_459;
        case 9u:
          v68 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v127 = (_QWORD *)operator new();
          v128 = *(_QWORD *)a3 + 8;
          *v127 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v127 + 1, v128);
          *(_QWORD *)a3 = v127;
          *v127 = 1;
          do
          {
            v129 = __ldaxr(v68);
            v72 = --v129 == 0;
          }
          while (__stlxr(v129, v68));
          goto LABEL_342;
        default:
          goto LABEL_467;
      }
    case 3:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_464;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v50 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v50, *(_QWORD *)a3);
          *(_QWORD *)a3 = v50;
          *v50 = 1;
          do
          {
            v51 = __ldaxr((unint64_t *)v36);
            v39 = --v51 == 0;
          }
          while (__stlxr(v51, (unint64_t *)v36));
          goto LABEL_322;
        case 3u:
          v73 = *(double *)a2;
          v74 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 != 1)
          {
            v75 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v75, *(_QWORD *)a3);
            *(_QWORD *)a3 = v75;
            *v75 = 1;
            do
            {
              v76 = __ldaxr(v74);
              v77 = v76 - 1;
            }
            while (__stlxr(v77, v74));
            if (!v77)
            {
              v78 = (void *)v74[1];
              if (v78)
              {
                v74[2] = (unint64_t)v78;
                operator delete(v78);
              }
              MEMORY[0x219A19A08](v74, 0x1080C409938AC02);
            }
          }
          v79 = *(_QWORD *)a3;
          turi::flexible_type_fail(*(_QWORD *)(*(_QWORD *)a3 + 16) - *(_QWORD *)(*(_QWORD *)a3 + 8) == *(_QWORD *)(*(_QWORD *)&v73 + 16) - *(_QWORD *)(*(_QWORD *)&v73 + 8));
          v80 = *(double **)(v79 + 8);
          v81 = *(_QWORD *)(v79 + 16) - (_QWORD)v80;
          if (v81)
          {
            v82 = v81 >> 3;
            v83 = *(double **)(*(_QWORD *)&v73 + 8);
            if (v82 <= 1)
              v82 = 1;
            do
            {
              v84 = *v83++;
              *v80 = v84 + *v80;
              ++v80;
              --v82;
            }
            while (v82);
          }
          return;
        case 4u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v289 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v289, *(_QWORD *)a3);
          *(_QWORD *)a3 = v289;
          *v289 = 1;
          do
          {
            v290 = __ldaxr((unint64_t *)v130);
            v234 = --v290 == 0;
          }
          while (__stlxr(v290, (unint64_t *)v130));
          goto LABEL_449;
        case 5u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v248 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v248, *(_QWORD *)a3);
          *(_QWORD *)a3 = v248;
          *v248 = 1;
          do
          {
            v249 = __ldaxr((unint64_t *)v130);
            v133 = --v249 == 0;
          }
          while (__stlxr(v249, (unint64_t *)v130));
          goto LABEL_407;
        case 8u:
          v235 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v299 = operator new();
          v300 = *(_QWORD *)a3;
          *(_QWORD *)v299 = **(_QWORD **)a3;
          *(_QWORD *)(v299 + 8) = *(_QWORD *)(v300 + 8);
          v301 = *(_QWORD *)(v300 + 16);
          *(_QWORD *)(v299 + 16) = v301;
          if (v301)
          {
            v302 = (unsigned int *)(v301 + 8);
            do
              v303 = __ldxr(v302);
            while (__stxr(v303 + 1, v302));
          }
          v304 = *(_OWORD *)(v300 + 24);
          v305 = *(_OWORD *)(v300 + 40);
          *(_OWORD *)(v299 + 56) = *(_OWORD *)(v300 + 56);
          *(_OWORD *)(v299 + 40) = v305;
          *(_OWORD *)(v299 + 24) = v304;
          *(_QWORD *)a3 = v299;
          *(_QWORD *)v299 = 1;
          do
          {
            v306 = __ldaxr((unint64_t *)v235);
            v244 = --v306 == 0;
          }
          while (__stlxr(v306, (unint64_t *)v235));
          goto LABEL_459;
        case 9u:
          v68 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v156 = (_QWORD *)operator new();
          v157 = *(_QWORD *)a3 + 8;
          *v156 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v156 + 1, v157);
          *(_QWORD *)a3 = v156;
          *v156 = 1;
          do
          {
            v158 = __ldaxr(v68);
            v72 = --v158 == 0;
          }
          while (__stlxr(v158, v68));
          goto LABEL_342;
        default:
          goto LABEL_467;
      }
    case 4:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_464;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v37 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v37, *(_QWORD *)a3);
          *(_QWORD *)a3 = v37;
          *v37 = 1;
          do
          {
            v38 = __ldaxr((unint64_t *)v36);
            v39 = --v38 == 0;
          }
          while (__stlxr(v38, (unint64_t *)v36));
          goto LABEL_322;
        case 3u:
          v60 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v61 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v61, *(_QWORD *)a3);
          *(_QWORD *)a3 = v61;
          *v61 = 1;
          do
          {
            v62 = __ldaxr(v60);
            v63 = --v62 == 0;
          }
          while (__stlxr(v62, v60));
          goto LABEL_215;
        case 4u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v232 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v232, *(_QWORD *)a3);
          *(_QWORD *)a3 = v232;
          *v232 = 1;
          do
          {
            v233 = __ldaxr((unint64_t *)v130);
            v234 = --v233 == 0;
          }
          while (__stlxr(v233, (unint64_t *)v130));
          goto LABEL_449;
        case 5u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v131 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v131, *(_QWORD *)a3);
          *(_QWORD *)a3 = v131;
          *v131 = 1;
          do
          {
            v132 = __ldaxr((unint64_t *)v130);
            v133 = --v132 == 0;
          }
          while (__stlxr(v132, (unint64_t *)v130));
          goto LABEL_407;
        case 8u:
          v235 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v236 = operator new();
          v237 = *(_QWORD *)a3;
          *(_QWORD *)v236 = **(_QWORD **)a3;
          *(_QWORD *)(v236 + 8) = *(_QWORD *)(v237 + 8);
          v238 = *(_QWORD *)(v237 + 16);
          *(_QWORD *)(v236 + 16) = v238;
          if (v238)
          {
            v239 = (unsigned int *)(v238 + 8);
            do
              v240 = __ldxr(v239);
            while (__stxr(v240 + 1, v239));
          }
          v241 = *(_OWORD *)(v237 + 24);
          v242 = *(_OWORD *)(v237 + 40);
          *(_OWORD *)(v236 + 56) = *(_OWORD *)(v237 + 56);
          *(_OWORD *)(v236 + 40) = v242;
          *(_OWORD *)(v236 + 24) = v241;
          *(_QWORD *)a3 = v236;
          *(_QWORD *)v236 = 1;
          do
          {
            v243 = __ldaxr((unint64_t *)v235);
            v244 = --v243 == 0;
          }
          while (__stlxr(v243, (unint64_t *)v235));
          goto LABEL_459;
        case 9u:
          v68 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v69 = (_QWORD *)operator new();
          v70 = *(_QWORD *)a3 + 8;
          *v69 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v69 + 1, v70);
          *(_QWORD *)a3 = v69;
          *v69 = 1;
          do
          {
            v71 = __ldaxr(v68);
            v72 = --v71 == 0;
          }
          while (__stlxr(v71, v68));
          goto LABEL_342;
        default:
          goto LABEL_467;
      }
    case 5:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_464;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v54 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v54, *(_QWORD *)a3);
          *(_QWORD *)a3 = v54;
          *v54 = 1;
          do
          {
            v55 = __ldaxr((unint64_t *)v36);
            v39 = --v55 == 0;
          }
          while (__stlxr(v55, (unint64_t *)v36));
          goto LABEL_322;
        case 3u:
          v60 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v134 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v134, *(_QWORD *)a3);
          *(_QWORD *)a3 = v134;
          *v134 = 1;
          do
          {
            v135 = __ldaxr(v60);
            v63 = --v135 == 0;
          }
          while (__stlxr(v135, v60));
          goto LABEL_215;
        case 4u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v337 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v337, *(_QWORD *)a3);
          *(_QWORD *)a3 = v337;
          *v337 = 1;
          do
          {
            v338 = __ldaxr((unint64_t *)v130);
            v234 = --v338 == 0;
          }
          while (__stlxr(v338, (unint64_t *)v130));
          goto LABEL_449;
        case 5u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v287 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v287, *(_QWORD *)a3);
          *(_QWORD *)a3 = v287;
          *v287 = 1;
          do
          {
            v288 = __ldaxr((unint64_t *)v130);
            v133 = --v288 == 0;
          }
          while (__stlxr(v288, (unint64_t *)v130));
          goto LABEL_407;
        case 8u:
          v235 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v339 = operator new();
          v340 = *(_QWORD *)a3;
          *(_QWORD *)v339 = **(_QWORD **)a3;
          *(_QWORD *)(v339 + 8) = *(_QWORD *)(v340 + 8);
          v341 = *(_QWORD *)(v340 + 16);
          *(_QWORD *)(v339 + 16) = v341;
          if (v341)
          {
            v342 = (unsigned int *)(v341 + 8);
            do
              v343 = __ldxr(v342);
            while (__stxr(v343 + 1, v342));
          }
          v344 = *(_OWORD *)(v340 + 24);
          v345 = *(_OWORD *)(v340 + 40);
          *(_OWORD *)(v339 + 56) = *(_OWORD *)(v340 + 56);
          *(_OWORD *)(v339 + 40) = v345;
          *(_OWORD *)(v339 + 24) = v344;
          *(_QWORD *)a3 = v339;
          *(_QWORD *)v339 = 1;
          do
          {
            v346 = __ldaxr((unint64_t *)v235);
            v244 = --v346 == 0;
          }
          while (__stlxr(v346, (unint64_t *)v235));
          goto LABEL_459;
        case 9u:
          v68 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v245 = (_QWORD *)operator new();
          v246 = *(_QWORD *)a3 + 8;
          *v245 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v245 + 1, v246);
          *(_QWORD *)a3 = v245;
          *v245 = 1;
          do
          {
            v247 = __ldaxr(v68);
            v72 = --v247 == 0;
          }
          while (__stlxr(v247, v68));
          goto LABEL_342;
        default:
          goto LABEL_467;
      }
    case 6:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_464;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v56 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v56, *(_QWORD *)a3);
          *(_QWORD *)a3 = v56;
          *v56 = 1;
          do
          {
            v57 = __ldaxr((unint64_t *)v36);
            v39 = --v57 == 0;
          }
          while (__stlxr(v57, (unint64_t *)v36));
          goto LABEL_322;
        case 3u:
          v60 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v154 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v154, *(_QWORD *)a3);
          *(_QWORD *)a3 = v154;
          *v154 = 1;
          do
          {
            v155 = __ldaxr(v60);
            v63 = --v155 == 0;
          }
          while (__stlxr(v155, v60));
          goto LABEL_215;
        case 4u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v347 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v347, *(_QWORD *)a3);
          *(_QWORD *)a3 = v347;
          *v347 = 1;
          do
          {
            v348 = __ldaxr((unint64_t *)v130);
            v234 = --v348 == 0;
          }
          while (__stlxr(v348, (unint64_t *)v130));
          goto LABEL_449;
        case 5u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v297 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v297, *(_QWORD *)a3);
          *(_QWORD *)a3 = v297;
          *v297 = 1;
          do
          {
            v298 = __ldaxr((unint64_t *)v130);
            v133 = --v298 == 0;
          }
          while (__stlxr(v298, (unint64_t *)v130));
          goto LABEL_407;
        case 8u:
          v235 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v349 = operator new();
          v350 = *(_QWORD *)a3;
          *(_QWORD *)v349 = **(_QWORD **)a3;
          *(_QWORD *)(v349 + 8) = *(_QWORD *)(v350 + 8);
          v351 = *(_QWORD *)(v350 + 16);
          *(_QWORD *)(v349 + 16) = v351;
          if (v351)
          {
            v352 = (unsigned int *)(v351 + 8);
            do
              v353 = __ldxr(v352);
            while (__stxr(v353 + 1, v352));
          }
          v354 = *(_OWORD *)(v350 + 24);
          v355 = *(_OWORD *)(v350 + 40);
          *(_OWORD *)(v349 + 56) = *(_OWORD *)(v350 + 56);
          *(_OWORD *)(v349 + 40) = v355;
          *(_OWORD *)(v349 + 24) = v354;
          *(_QWORD *)a3 = v349;
          *(_QWORD *)v349 = 1;
          do
          {
            v356 = __ldaxr((unint64_t *)v235);
            v244 = --v356 == 0;
          }
          while (__stlxr(v356, (unint64_t *)v235));
          goto LABEL_459;
        case 9u:
          v68 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v254 = (_QWORD *)operator new();
          v255 = *(_QWORD *)a3 + 8;
          *v254 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v254 + 1, v255);
          *(_QWORD *)a3 = v254;
          *v254 = 1;
          do
          {
            v256 = __ldaxr(v68);
            v72 = --v256 == 0;
          }
          while (__stlxr(v256, v68));
          goto LABEL_342;
        default:
          goto LABEL_467;
      }
    case 7:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_464;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v52 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v52, *(_QWORD *)a3);
          *(_QWORD *)a3 = v52;
          *v52 = 1;
          do
          {
            v53 = __ldaxr((unint64_t *)v36);
            v39 = --v53 == 0;
          }
          while (__stlxr(v53, (unint64_t *)v36));
          goto LABEL_322;
        case 3u:
          v60 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v85 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v85, *(_QWORD *)a3);
          *(_QWORD *)a3 = v85;
          *v85 = 1;
          do
          {
            v86 = __ldaxr(v60);
            v63 = --v86 == 0;
          }
          while (__stlxr(v86, v60));
          goto LABEL_215;
        case 4u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v295 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v295, *(_QWORD *)a3);
          *(_QWORD *)a3 = v295;
          *v295 = 1;
          do
          {
            v296 = __ldaxr((unint64_t *)v130);
            v234 = --v296 == 0;
          }
          while (__stlxr(v296, (unint64_t *)v130));
          goto LABEL_449;
        case 5u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v250 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v250, *(_QWORD *)a3);
          *(_QWORD *)a3 = v250;
          *v250 = 1;
          do
          {
            v251 = __ldaxr((unint64_t *)v130);
            v133 = --v251 == 0;
          }
          while (__stlxr(v251, (unint64_t *)v130));
          goto LABEL_407;
        case 8u:
          v235 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v307 = operator new();
          v308 = *(_QWORD *)a3;
          *(_QWORD *)v307 = **(_QWORD **)a3;
          *(_QWORD *)(v307 + 8) = *(_QWORD *)(v308 + 8);
          v309 = *(_QWORD *)(v308 + 16);
          *(_QWORD *)(v307 + 16) = v309;
          if (v309)
          {
            v310 = (unsigned int *)(v309 + 8);
            do
              v311 = __ldxr(v310);
            while (__stxr(v311 + 1, v310));
          }
          v312 = *(_OWORD *)(v308 + 24);
          v313 = *(_OWORD *)(v308 + 40);
          *(_OWORD *)(v307 + 56) = *(_OWORD *)(v308 + 56);
          *(_OWORD *)(v307 + 40) = v313;
          *(_OWORD *)(v307 + 24) = v312;
          *(_QWORD *)a3 = v307;
          *(_QWORD *)v307 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v235);
            v244 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v235));
          goto LABEL_459;
        case 9u:
          v68 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v166 = (_QWORD *)operator new();
          v167 = *(_QWORD *)a3 + 8;
          *v166 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v166 + 1, v167);
          *(_QWORD *)a3 = v166;
          *v166 = 1;
          do
          {
            v168 = __ldaxr(v68);
            v72 = --v168 == 0;
          }
          while (__stlxr(v168, v68));
          goto LABEL_342;
        default:
          goto LABEL_467;
      }
    case 8:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_464;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v58 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v58, *(_QWORD *)a3);
          *(_QWORD *)a3 = v58;
          *v58 = 1;
          do
          {
            v59 = __ldaxr((unint64_t *)v36);
            v39 = --v59 == 0;
          }
          while (__stlxr(v59, (unint64_t *)v36));
          goto LABEL_322;
        case 3u:
          v60 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v159 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v159, *(_QWORD *)a3);
          *(_QWORD *)a3 = v159;
          *v159 = 1;
          do
          {
            v160 = __ldaxr(v60);
            v63 = --v160 == 0;
          }
          while (__stlxr(v160, v60));
          goto LABEL_215;
        case 4u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v357 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v357, *(_QWORD *)a3);
          *(_QWORD *)a3 = v357;
          *v357 = 1;
          do
          {
            v358 = __ldaxr((unint64_t *)v130);
            v234 = --v358 == 0;
          }
          while (__stlxr(v358, (unint64_t *)v130));
          goto LABEL_449;
        case 5u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v315 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v315, *(_QWORD *)a3);
          *(_QWORD *)a3 = v315;
          *v315 = 1;
          do
          {
            v316 = __ldaxr((unint64_t *)v130);
            v133 = --v316 == 0;
          }
          while (__stlxr(v316, (unint64_t *)v130));
          goto LABEL_407;
        case 8u:
          v235 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v359 = operator new();
          v360 = *(_QWORD *)a3;
          *(_QWORD *)v359 = **(_QWORD **)a3;
          *(_QWORD *)(v359 + 8) = *(_QWORD *)(v360 + 8);
          v361 = *(_QWORD *)(v360 + 16);
          *(_QWORD *)(v359 + 16) = v361;
          if (v361)
          {
            v362 = (unsigned int *)(v361 + 8);
            do
              v363 = __ldxr(v362);
            while (__stxr(v363 + 1, v362));
          }
          v364 = *(_OWORD *)(v360 + 24);
          v365 = *(_OWORD *)(v360 + 40);
          *(_OWORD *)(v359 + 56) = *(_OWORD *)(v360 + 56);
          *(_OWORD *)(v359 + 40) = v365;
          *(_OWORD *)(v359 + 24) = v364;
          *(_QWORD *)a3 = v359;
          *(_QWORD *)v359 = 1;
          do
          {
            v366 = __ldaxr((unint64_t *)v235);
            v244 = --v366 == 0;
          }
          while (__stlxr(v366, (unint64_t *)v235));
          goto LABEL_459;
        case 9u:
          v68 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v273 = (_QWORD *)operator new();
          v274 = *(_QWORD *)a3 + 8;
          *v273 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v273 + 1, v274);
          *(_QWORD *)a3 = v273;
          *v273 = 1;
          do
          {
            v275 = __ldaxr(v68);
            v72 = --v275 == 0;
          }
          while (__stlxr(v275, v68));
LABEL_342:
          if (!v72)
            goto LABEL_464;
          v162 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v68);
          v276 = 2071181815;
          goto LABEL_462;
        default:
          goto LABEL_467;
      }
    case 9:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_464;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v40 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v40, *(_QWORD *)a3);
          *(_QWORD *)a3 = v40;
          *v40 = 1;
          do
          {
            v41 = __ldaxr((unint64_t *)v36);
            v39 = --v41 == 0;
          }
          while (__stlxr(v41, (unint64_t *)v36));
LABEL_322:
          if (!v39)
            goto LABEL_464;
          if (*(char *)(v36 + 31) < 0)
            operator delete(*(void **)(v36 + 8));
          v162 = (_QWORD *)v36;
          v163 = 0x1012C404EF22A49;
          goto LABEL_463;
        case 3u:
          v60 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v64 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v64, *(_QWORD *)a3);
          *(_QWORD *)a3 = v64;
          *v64 = 1;
          do
          {
            v65 = __ldaxr(v60);
            v63 = --v65 == 0;
          }
          while (__stlxr(v65, v60));
LABEL_215:
          if (!v63)
            goto LABEL_464;
          v161 = (void *)v60[1];
          if (v161)
          {
            v60[2] = (unint64_t)v161;
            operator delete(v161);
          }
          v162 = v60;
          v163 = 0x1080C409938AC02;
          goto LABEL_463;
        case 4u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v252 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v252, *(_QWORD *)a3);
          *(_QWORD *)a3 = v252;
          *v252 = 1;
          do
          {
            v253 = __ldaxr((unint64_t *)v130);
            v234 = --v253 == 0;
          }
          while (__stlxr(v253, (unint64_t *)v130));
LABEL_449:
          if (!v234)
            goto LABEL_464;
          v368 = (void **)(v130 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v368);
          goto LABEL_452;
        case 5u:
          v130 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v164 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v164, *(_QWORD *)a3);
          *(_QWORD *)a3 = v164;
          *v164 = 1;
          do
          {
            v165 = __ldaxr((unint64_t *)v130);
            v133 = --v165 == 0;
          }
          while (__stlxr(v165, (unint64_t *)v130));
LABEL_407:
          if (!v133)
            goto LABEL_464;
          v368 = (void **)(v130 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v368);
LABEL_452:
          v162 = (_QWORD *)v130;
          v163 = 0x1020C405E66F15BLL;
          goto LABEL_463;
        case 8u:
          v235 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_464;
          v265 = operator new();
          v266 = *(_QWORD *)a3;
          *(_QWORD *)v265 = **(_QWORD **)a3;
          *(_QWORD *)(v265 + 8) = *(_QWORD *)(v266 + 8);
          v267 = *(_QWORD *)(v266 + 16);
          *(_QWORD *)(v265 + 16) = v267;
          if (v267)
          {
            v268 = (unsigned int *)(v267 + 8);
            do
              v269 = __ldxr(v268);
            while (__stxr(v269 + 1, v268));
          }
          v270 = *(_OWORD *)(v266 + 24);
          v271 = *(_OWORD *)(v266 + 40);
          *(_OWORD *)(v265 + 56) = *(_OWORD *)(v266 + 56);
          *(_OWORD *)(v265 + 40) = v271;
          *(_OWORD *)(v265 + 24) = v270;
          *(_QWORD *)a3 = v265;
          *(_QWORD *)v265 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v235);
            v244 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v235));
LABEL_459:
          if (!v244)
            goto LABEL_464;
          boost::detail::shared_count::~shared_count((unsigned int **)(v235 + 16));
          v162 = (_QWORD *)v235;
          v276 = -235920773;
LABEL_462:
          v163 = v276 | 0x1030C4000000000;
LABEL_463:
          MEMORY[0x219A19A08](v162, v163);
LABEL_464:
          turi::flexible_type_fail(0);
          return;
        case 9u:
          v87 = *(double *)a2;
          v88 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 != 1)
          {
            v89 = (_QWORD *)operator new();
            v90 = *(_QWORD *)a3 + 8;
            *v89 = **(_QWORD **)a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v89 + 1, v90);
            *(_QWORD *)a3 = v89;
            *v89 = 1;
            do
            {
              v91 = __ldaxr(v88);
              v92 = v91 - 1;
            }
            while (__stlxr(v92, v88));
            if (!v92)
            {
              v93 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v88);
              MEMORY[0x219A19A08](v93, 0x1030C407B73B9F7);
            }
          }
          v94 = *(_QWORD *)a3;
          v95 = (uint64_t *)(*(_QWORD *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v95, *(_QWORD *)&v87 + 8))
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v97 = *(uint64_t **)(v94 + 24);
          v96 = *(uint64_t **)(v94 + 32);
          if (v96 == v97)
            return;
          if (!*v95)
            return;
          v98 = 1;
          do
          {
            v99 = *v97++;
            v98 *= v99;
          }
          while (v97 != v96);
          if (!v98)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v95);
          v100 = (uint64_t)(*(_QWORD *)(v94 + 32) - *(_QWORD *)(v94 + 24)) >> 3;
          v367 = 0;
          std::vector<unsigned long>::vector(&v368, v100, &v367);
          v101 = v368;
          v102 = v369;
          break;
        default:
          goto LABEL_467;
      }
      break;
    default:
LABEL_467:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v103 = (char *)v102 - (char *)v101;
    if (v103)
    {
      v104 = 0;
      v105 = v103 >> 3;
      v106 = *(uint64_t **)(*(_QWORD *)&v87 + 48);
      if (v105 <= 1)
        v105 = 1;
      v107 = v101;
      v108 = v105;
      do
      {
        v110 = (uint64_t)*v107++;
        v109 = v110;
        v111 = *v106++;
        v104 += v111 * v109;
        --v108;
      }
      while (v108);
      v112 = 0;
      v113 = *(double *)(**(_QWORD **)(*(_QWORD *)&v87 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v87 + 72) + v104));
      v114 = *(uint64_t **)(v94 + 48);
      do
      {
        v116 = (uint64_t)*v101++;
        v115 = v116;
        v117 = *v114++;
        v112 += v117 * v115;
        --v105;
      }
      while (v105);
    }
    else
    {
      v112 = 0;
      v113 = *(double *)(**(_QWORD **)(*(_QWORD *)&v87 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v87 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v95);
    *(double *)(**(_QWORD **)(v94 + 8) + 8 * (*(_QWORD *)(v94 + 72) + v112)) = v113
                                                                             + *(double *)(**(_QWORD **)(v94 + 8)
                                                                                         + 8
                                                                                         * (*(_QWORD *)(v94 + 72) + v112));
    v101 = v368;
    v102 = v369;
    v118 = v369 - v368;
    v119 = v118 - 1;
    if ((char *)v369 - (char *)v368 < 1)
      goto LABEL_165;
    v120 = *(_QWORD *)(v94 + 24);
    v121 = (char *)v368[v119] + 1;
    v368[v119] = v121;
    if ((unint64_t)v121 >= *(_QWORD *)(v120 + 8 * v119))
      break;
LABEL_164:
    v118 = 1;
LABEL_165:
    if (v119 < 0 || !v118)
      goto LABEL_277;
  }
  v122 = (unint64_t *)&v101[v118 - 2];
  v123 = v120 - 16;
  while (1)
  {
    v124 = v118 - 1;
    v122[1] = 0;
    if (v118 - 1 <= 0)
      break;
    v125 = *v122 + 1;
    *v122-- = v125;
    v126 = *(_QWORD *)(v123 + 8 * v118--);
    if (v125 < v126)
    {
      v119 = v124 - 1;
      goto LABEL_164;
    }
  }
LABEL_277:
  if (v101)
  {
LABEL_278:
    v369 = v101;
    operator delete(v101);
  }
}

void sub_21823E044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933918;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933918;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD **a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_2::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  double v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  unint64_t v58;
  double *v59;
  double v60;
  _QWORD *v61;
  unint64_t v62;
  double v63;
  unint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void **v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  void **v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  BOOL v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t *v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  double *v117;
  uint64_t v118;
  unint64_t v119;
  double v120;
  unint64_t *v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  double *v126;
  uint64_t v127;
  double v128;
  unint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  void *v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t *v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  double v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void **v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  unint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  _QWORD *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t *v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void **v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  unint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  double v207;
  _QWORD *v208;
  unint64_t v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int *v215;
  unsigned int v216;
  __int128 v217;
  __int128 v218;
  unint64_t v219;
  BOOL v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  unint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  unint64_t v232;
  _QWORD *v233;
  unint64_t v234;
  _QWORD *v235;
  unint64_t v236;
  double v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  __int128 v246;
  __int128 v247;
  unint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  unint64_t v251;
  unsigned int v252;
  _QWORD *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  __int128 v260;
  __int128 v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  _QWORD *v271;
  unint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int *v278;
  unsigned int v279;
  __int128 v280;
  __int128 v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int *v286;
  unsigned int v287;
  __int128 v288;
  __int128 v289;
  unint64_t v290;
  _QWORD *v291;
  unint64_t v292;
  _QWORD *v293;
  unint64_t v294;
  _QWORD *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int *v300;
  unsigned int v301;
  __int128 v302;
  __int128 v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  __int128 v330;
  __int128 v331;
  unint64_t v332;
  _QWORD *v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int *v338;
  unsigned int v339;
  __int128 v340;
  __int128 v341;
  unint64_t v342;
  uint64_t v343;
  void **v344;
  void **v345;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((_QWORD **)a1 != a3)
  {
    *(_QWORD **)((char *)a3 + 5) = *(_QWORD **)(a1 + 5);
    *a3 = *(_QWORD **)a1;
    v5 = *(unsigned __int8 *)(a1 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = *a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)*a3 + *(_QWORD *)a2;
          goto LABEL_48;
        case 1:
          v207 = *(double *)a3 + (double)*(uint64_t *)a2;
          goto LABEL_305;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v233 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v233, (uint64_t)*a3);
          *a3 = v233;
          *v233 = 1;
          do
          {
            v234 = __ldaxr((unint64_t *)v12);
            v15 = --v234 == 0;
          }
          while (__stlxr(v234, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v112 = *a3;
          if (**a3 != 1)
          {
            v113 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v113, (uint64_t)*a3);
            *a3 = v113;
            *v113 = 1;
            do
            {
              v114 = __ldaxr(v112);
              v115 = v114 - 1;
            }
            while (__stlxr(v115, v112));
            if (!v115)
            {
              v116 = (void *)v112[1];
              if (v116)
              {
                v112[2] = (unint64_t)v116;
                operator delete(v116);
              }
              MEMORY[0x219A19A08](v112, 0x1080C409938AC02);
            }
          }
          v117 = (double *)(*a3)[1];
          v118 = (*a3)[2] - (_QWORD)v117;
          if (v118)
          {
            v119 = v118 >> 3;
            v120 = (double)*(uint64_t *)a2;
            if (v119 <= 1)
              v119 = 1;
            do
            {
              *v117 = *v117 + v120;
              ++v117;
              --v119;
            }
            while (v119);
          }
          return;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v267 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v267, (uint64_t)*a3);
          *a3 = v267;
          *v267 = 1;
          do
          {
            v268 = __ldaxr((unint64_t *)v106);
            v210 = --v268 == 0;
          }
          while (__stlxr(v268, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v293 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v293, (uint64_t)*a3);
          *a3 = v293;
          *v293 = 1;
          do
          {
            v294 = __ldaxr((unint64_t *)v106);
            v109 = --v294 == 0;
          }
          while (__stlxr(v294, (unint64_t *)v106));
          goto LABEL_366;
        case 6:
          *a3 = (_QWORD *)((unint64_t)*a3 & 0xFF00000000000000 | ((unint64_t)*a3 + *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL);
          return;
        case 7:
          goto LABEL_423;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v297 = operator new();
          v298 = (uint64_t)*a3;
          *(_QWORD *)v297 = **a3;
          *(_QWORD *)(v297 + 8) = *(_QWORD *)(v298 + 8);
          v299 = *(_QWORD *)(v298 + 16);
          *(_QWORD *)(v297 + 16) = v299;
          if (v299)
          {
            v300 = (unsigned int *)(v299 + 8);
            do
              v301 = __ldxr(v300);
            while (__stxr(v301 + 1, v300));
          }
          v302 = *(_OWORD *)(v298 + 24);
          v303 = *(_OWORD *)(v298 + 40);
          *(_OWORD *)(v297 + 56) = *(_OWORD *)(v298 + 56);
          *(_OWORD *)(v297 + 40) = v303;
          *(_OWORD *)(v297 + 24) = v302;
          *a3 = (_QWORD *)v297;
          *(_QWORD *)v297 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v211);
            v220 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v145 = *a3;
          if (**a3 != 1)
          {
            v146 = (_QWORD *)operator new();
            v147 = (uint64_t)(*a3 + 1);
            *v146 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v146 + 1, v147);
            *a3 = v146;
            *v146 = 1;
            do
            {
              v148 = __ldaxr(v145);
              v149 = v148 - 1;
            }
            while (__stlxr(v149, v145));
            if (!v149)
            {
              v150 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v145);
              MEMORY[0x219A19A08](v150, 0x1030C407B73B9F7);
            }
          }
          v151 = *a3;
          v153 = (uint64_t *)(*a3)[3];
          v152 = (uint64_t *)(*a3)[4];
          if (v152 == v153)
            return;
          if (!v151[1])
            return;
          v154 = (double)*(uint64_t *)a2;
          v155 = 1;
          do
          {
            v156 = *v153++;
            v155 *= v156;
          }
          while (v153 != v152);
          if (!v155)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v151 + 1);
          v157 = (v151[4] - v151[3]) >> 3;
          v343 = 0;
          std::vector<unsigned long>::vector(&v344, v157, &v343);
          v77 = v344;
          v158 = v345;
          break;
        default:
          goto LABEL_426;
      }
      while (2)
      {
        v159 = 0;
        v160 = (char *)v158 - (char *)v77;
        if (v160)
        {
          v161 = v160 >> 3;
          v162 = (uint64_t *)v151[6];
          if (v161 <= 1)
            v161 = 1;
          do
          {
            v164 = (uint64_t)*v77++;
            v163 = v164;
            v165 = *v162++;
            v159 += v165 * v163;
            --v161;
          }
          while (v161);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v151 + 1);
        *(double *)(*(_QWORD *)v151[1] + 8 * (v151[9] + v159)) = *(double *)(*(_QWORD *)v151[1] + 8 * (v151[9] + v159))
                                                               + v154;
        v77 = v344;
        v158 = v345;
        v166 = v345 - v344;
        v167 = v166 - 1;
        if ((char *)v345 - (char *)v344 < 1)
          goto LABEL_209;
        v168 = v151[3];
        v169 = (char *)v344[v167] + 1;
        v344[v167] = v169;
        if ((unint64_t)v169 < *(_QWORD *)(v168 + 8 * v167))
        {
LABEL_208:
          v166 = 1;
LABEL_209:
          if (v167 < 0 || !v166)
            goto LABEL_236;
          continue;
        }
        break;
      }
      v170 = (unint64_t *)&v77[v166 - 2];
      v171 = v168 - 16;
      while (1)
      {
        v172 = v166 - 1;
        v170[1] = 0;
        if (v166 - 1 <= 0)
          goto LABEL_237;
        v173 = *v170 + 1;
        *v170-- = v173;
        v174 = *(_QWORD *)(v171 + 8 * v166--);
        if (v173 < v174)
        {
          v167 = v172 - 1;
          goto LABEL_208;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)(*(double *)a2 + (double)(uint64_t)*a3);
LABEL_48:
          *a3 = (_QWORD *)v11;
          return;
        case 1:
          v207 = *(double *)a2 + *(double *)a3;
LABEL_305:
          *(double *)a3 = v207;
          return;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v235 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v235, (uint64_t)*a3);
          *a3 = v235;
          *v235 = 1;
          do
          {
            v236 = __ldaxr((unint64_t *)v12);
            v15 = --v236 == 0;
          }
          while (__stlxr(v236, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v121 = *a3;
          if (**a3 != 1)
          {
            v122 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v122, (uint64_t)*a3);
            *a3 = v122;
            *v122 = 1;
            do
            {
              v123 = __ldaxr(v121);
              v124 = v123 - 1;
            }
            while (__stlxr(v124, v121));
            if (!v124)
            {
              v125 = (void *)v121[1];
              if (v125)
              {
                v121[2] = (unint64_t)v125;
                operator delete(v125);
              }
              MEMORY[0x219A19A08](v121, 0x1080C409938AC02);
            }
          }
          v126 = (double *)(*a3)[1];
          v127 = (*a3)[2] - (_QWORD)v126;
          if (v127)
          {
            v128 = *(double *)a2;
            v129 = v127 >> 3;
            if (v129 <= 1)
              v129 = 1;
            do
            {
              *v126 = v128 + *v126;
              ++v126;
              --v129;
            }
            while (v129);
          }
          return;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v269 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v269, (uint64_t)*a3);
          *a3 = v269;
          *v269 = 1;
          do
          {
            v270 = __ldaxr((unint64_t *)v106);
            v210 = --v270 == 0;
          }
          while (__stlxr(v270, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v295 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v295, (uint64_t)*a3);
          *a3 = v295;
          *v295 = 1;
          do
          {
            v296 = __ldaxr((unint64_t *)v106);
            v109 = --v296 == 0;
          }
          while (__stlxr(v296, (unint64_t *)v106));
          goto LABEL_366;
        case 6:
          v237 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          v238 = (uint64_t)*a3;
          v239 = (unint64_t)*a3 + vcvtmd_s64_f64(*(double *)a2);
          *a3 = (_QWORD *)((unint64_t)*a3 & 0xFF00000000000000 | v239 & 0xFFFFFFFFFFFFFFLL);
          v240 = (uint64_t)v237 + *((int *)a3 + 2);
          if (v240 >= 1000000)
          {
            *a3 = (_QWORD *)((v239 + 1) & 0xFFFFFFFFFFFFFFLL | v238 & 0xFF00000000000000);
            LODWORD(v240) = v240 - 1000000;
          }
          if (v240 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          *((_DWORD *)a3 + 2) = v240;
          return;
        case 7:
          goto LABEL_423;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v305 = operator new();
          v306 = (uint64_t)*a3;
          *(_QWORD *)v305 = **a3;
          *(_QWORD *)(v305 + 8) = *(_QWORD *)(v306 + 8);
          v307 = *(_QWORD *)(v306 + 16);
          *(_QWORD *)(v305 + 16) = v307;
          if (v307)
          {
            v308 = (unsigned int *)(v307 + 8);
            do
              v309 = __ldxr(v308);
            while (__stxr(v309 + 1, v308));
          }
          v310 = *(_OWORD *)(v306 + 24);
          v311 = *(_OWORD *)(v306 + 40);
          *(_OWORD *)(v305 + 56) = *(_OWORD *)(v306 + 56);
          *(_OWORD *)(v305 + 40) = v311;
          *(_OWORD *)(v305 + 24) = v310;
          *a3 = (_QWORD *)v305;
          *(_QWORD *)v305 = 1;
          do
          {
            v312 = __ldaxr((unint64_t *)v211);
            v220 = --v312 == 0;
          }
          while (__stlxr(v312, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v175 = *a3;
          if (**a3 != 1)
          {
            v176 = (_QWORD *)operator new();
            v177 = (uint64_t)(*a3 + 1);
            *v176 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v176 + 1, v177);
            *a3 = v176;
            *v176 = 1;
            do
            {
              v178 = __ldaxr(v175);
              v179 = v178 - 1;
            }
            while (__stlxr(v179, v175));
            if (!v179)
            {
              v180 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v175);
              MEMORY[0x219A19A08](v180, 0x1030C407B73B9F7);
            }
          }
          v181 = *a3;
          v183 = (uint64_t *)(*a3)[3];
          v182 = (uint64_t *)(*a3)[4];
          if (v182 == v183)
            return;
          if (!v181[1])
            return;
          v184 = *(double *)a2;
          v185 = 1;
          do
          {
            v186 = *v183++;
            v185 *= v186;
          }
          while (v183 != v182);
          if (!v185)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v181 + 1);
          v187 = (v181[4] - v181[3]) >> 3;
          v343 = 0;
          std::vector<unsigned long>::vector(&v344, v187, &v343);
          v77 = v344;
          v188 = v345;
          break;
        default:
          goto LABEL_426;
      }
      while (2)
      {
        v189 = 0;
        v190 = (char *)v188 - (char *)v77;
        if (v190)
        {
          v191 = v190 >> 3;
          v192 = (uint64_t *)v181[6];
          if (v191 <= 1)
            v191 = 1;
          do
          {
            v194 = (uint64_t)*v77++;
            v193 = v194;
            v195 = *v192++;
            v189 += v195 * v193;
            --v191;
          }
          while (v191);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v181 + 1);
        *(double *)(*(_QWORD *)v181[1] + 8 * (v181[9] + v189)) = v184
                                                               + *(double *)(*(_QWORD *)v181[1] + 8 * (v181[9] + v189));
        v77 = v344;
        v188 = v345;
        v196 = v345 - v344;
        v197 = v196 - 1;
        if ((char *)v345 - (char *)v344 < 1)
          goto LABEL_234;
        v198 = v181[3];
        v199 = (char *)v344[v197] + 1;
        v344[v197] = v199;
        if ((unint64_t)v199 < *(_QWORD *)(v198 + 8 * v197))
        {
LABEL_233:
          v196 = 1;
LABEL_234:
          if (v197 < 0 || !v196)
            goto LABEL_236;
          continue;
        }
        break;
      }
      v200 = (unint64_t *)&v77[v196 - 2];
      v201 = v198 - 16;
      while (1)
      {
        v202 = v196 - 1;
        v200[1] = 0;
        if (v196 - 1 <= 0)
          goto LABEL_237;
        v203 = *v200 + 1;
        *v200-- = v203;
        v204 = *(_QWORD *)(v201 + 8 * v196--);
        if (v203 < v204)
        {
          v197 = v202 - 1;
          goto LABEL_233;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v18 = *(double *)a2;
          v19 = (uint64_t)*a3;
          if (**a3 != 1)
          {
            v20 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, (uint64_t)*a3);
            *a3 = v20;
            *v20 = 1;
            do
            {
              v21 = __ldaxr((unint64_t *)v19);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, (unint64_t *)v19));
            if (!v22)
            {
              if (*(char *)(v19 + 31) < 0)
                operator delete(*(void **)(v19 + 8));
              MEMORY[0x219A19A08](v19, 0x1012C404EF22A49);
            }
          }
          v23 = *(char *)(*(_QWORD *)&v18 + 31);
          if (v23 >= 0)
            v24 = (const std::string::value_type *)(*(_QWORD *)&v18 + 8);
          else
            v24 = *(const std::string::value_type **)(*(_QWORD *)&v18 + 8);
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(*(_QWORD *)&v18 + 31);
          else
            v25 = *(_QWORD *)(*(_QWORD *)&v18 + 16);
          std::string::append((std::string *)(*a3 + 1), v24, v25);
          return;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v42 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v42, (uint64_t)*a3);
          *a3 = v42;
          *v42 = 1;
          do
          {
            v43 = __ldaxr(v36);
            v39 = --v43 == 0;
          }
          while (__stlxr(v43, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v253 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v253, (uint64_t)*a3);
          *a3 = v253;
          *v253 = 1;
          do
          {
            v254 = __ldaxr((unint64_t *)v106);
            v210 = --v254 == 0;
          }
          while (__stlxr(v254, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v205 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v205, (uint64_t)*a3);
          *a3 = v205;
          *v205 = 1;
          do
          {
            v206 = __ldaxr((unint64_t *)v106);
            v109 = --v206 == 0;
          }
          while (__stlxr(v206, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v255 = operator new();
          v256 = (uint64_t)*a3;
          *(_QWORD *)v255 = **a3;
          *(_QWORD *)(v255 + 8) = *(_QWORD *)(v256 + 8);
          v257 = *(_QWORD *)(v256 + 16);
          *(_QWORD *)(v255 + 16) = v257;
          if (v257)
          {
            v258 = (unsigned int *)(v257 + 8);
            do
              v259 = __ldxr(v258);
            while (__stxr(v259 + 1, v258));
          }
          v260 = *(_OWORD *)(v256 + 24);
          v261 = *(_OWORD *)(v256 + 40);
          *(_OWORD *)(v255 + 56) = *(_OWORD *)(v256 + 56);
          *(_OWORD *)(v255 + 40) = v261;
          *(_OWORD *)(v255 + 24) = v260;
          *a3 = (_QWORD *)v255;
          *(_QWORD *)v255 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v211);
            v220 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v103 = (_QWORD *)operator new();
          v104 = (uint64_t)(*a3 + 1);
          *v103 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v103 + 1, v104);
          *a3 = v103;
          *v103 = 1;
          do
          {
            v105 = __ldaxr(v44);
            v48 = --v105 == 0;
          }
          while (__stlxr(v105, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, (uint64_t)*a3);
          *a3 = v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr((unint64_t *)v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v49 = *(double *)a2;
          v50 = *a3;
          if (**a3 != 1)
          {
            v51 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v51, (uint64_t)*a3);
            *a3 = v51;
            *v51 = 1;
            do
            {
              v52 = __ldaxr(v50);
              v53 = v52 - 1;
            }
            while (__stlxr(v53, v50));
            if (!v53)
            {
              v54 = (void *)v50[1];
              if (v54)
              {
                v50[2] = (unint64_t)v54;
                operator delete(v54);
              }
              MEMORY[0x219A19A08](v50, 0x1080C409938AC02);
            }
          }
          v55 = (uint64_t)*a3;
          turi::flexible_type_fail((*a3)[2] - (*a3)[1] == *(_QWORD *)(*(_QWORD *)&v49 + 16)
                                                        - *(_QWORD *)(*(_QWORD *)&v49 + 8));
          v56 = *(double **)(v55 + 8);
          v57 = *(_QWORD *)(v55 + 16) - (_QWORD)v56;
          if (v57)
          {
            v58 = v57 >> 3;
            v59 = *(double **)(*(_QWORD *)&v49 + 8);
            if (v58 <= 1)
              v58 = 1;
            do
            {
              v60 = *v59++;
              *v56 = v60 + *v56;
              ++v56;
              --v58;
            }
            while (v58);
          }
          return;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v265 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v265, (uint64_t)*a3);
          *a3 = v265;
          *v265 = 1;
          do
          {
            v266 = __ldaxr((unint64_t *)v106);
            v210 = --v266 == 0;
          }
          while (__stlxr(v266, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v224 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v224, (uint64_t)*a3);
          *a3 = v224;
          *v224 = 1;
          do
          {
            v225 = __ldaxr((unint64_t *)v106);
            v109 = --v225 == 0;
          }
          while (__stlxr(v225, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v275 = operator new();
          v276 = (uint64_t)*a3;
          *(_QWORD *)v275 = **a3;
          *(_QWORD *)(v275 + 8) = *(_QWORD *)(v276 + 8);
          v277 = *(_QWORD *)(v276 + 16);
          *(_QWORD *)(v275 + 16) = v277;
          if (v277)
          {
            v278 = (unsigned int *)(v277 + 8);
            do
              v279 = __ldxr(v278);
            while (__stxr(v279 + 1, v278));
          }
          v280 = *(_OWORD *)(v276 + 24);
          v281 = *(_OWORD *)(v276 + 40);
          *(_OWORD *)(v275 + 56) = *(_OWORD *)(v276 + 56);
          *(_OWORD *)(v275 + 40) = v281;
          *(_OWORD *)(v275 + 24) = v280;
          *a3 = (_QWORD *)v275;
          *(_QWORD *)v275 = 1;
          do
          {
            v282 = __ldaxr((unint64_t *)v211);
            v220 = --v282 == 0;
          }
          while (__stlxr(v282, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v132 = (_QWORD *)operator new();
          v133 = (uint64_t)(*a3 + 1);
          *v132 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v132 + 1, v133);
          *a3 = v132;
          *v132 = 1;
          do
          {
            v134 = __ldaxr(v44);
            v48 = --v134 == 0;
          }
          while (__stlxr(v134, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, (uint64_t)*a3);
          *a3 = v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v37 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v37, (uint64_t)*a3);
          *a3 = v37;
          *v37 = 1;
          do
          {
            v38 = __ldaxr(v36);
            v39 = --v38 == 0;
          }
          while (__stlxr(v38, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v208 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v208, (uint64_t)*a3);
          *a3 = v208;
          *v208 = 1;
          do
          {
            v209 = __ldaxr((unint64_t *)v106);
            v210 = --v209 == 0;
          }
          while (__stlxr(v209, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v107 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v107, (uint64_t)*a3);
          *a3 = v107;
          *v107 = 1;
          do
          {
            v108 = __ldaxr((unint64_t *)v106);
            v109 = --v108 == 0;
          }
          while (__stlxr(v108, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v212 = operator new();
          v213 = (uint64_t)*a3;
          *(_QWORD *)v212 = **a3;
          *(_QWORD *)(v212 + 8) = *(_QWORD *)(v213 + 8);
          v214 = *(_QWORD *)(v213 + 16);
          *(_QWORD *)(v212 + 16) = v214;
          if (v214)
          {
            v215 = (unsigned int *)(v214 + 8);
            do
              v216 = __ldxr(v215);
            while (__stxr(v216 + 1, v215));
          }
          v217 = *(_OWORD *)(v213 + 24);
          v218 = *(_OWORD *)(v213 + 40);
          *(_OWORD *)(v212 + 56) = *(_OWORD *)(v213 + 56);
          *(_OWORD *)(v212 + 40) = v218;
          *(_OWORD *)(v212 + 24) = v217;
          *a3 = (_QWORD *)v212;
          *(_QWORD *)v212 = 1;
          do
          {
            v219 = __ldaxr((unint64_t *)v211);
            v220 = --v219 == 0;
          }
          while (__stlxr(v219, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v45 = (_QWORD *)operator new();
          v46 = (uint64_t)(*a3 + 1);
          *v45 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v45 + 1, v46);
          *a3 = v45;
          *v45 = 1;
          do
          {
            v47 = __ldaxr(v44);
            v48 = --v47 == 0;
          }
          while (__stlxr(v47, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v30 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v30, (uint64_t)*a3);
          *a3 = v30;
          *v30 = 1;
          do
          {
            v31 = __ldaxr((unint64_t *)v12);
            v15 = --v31 == 0;
          }
          while (__stlxr(v31, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v110 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v110, (uint64_t)*a3);
          *a3 = v110;
          *v110 = 1;
          do
          {
            v111 = __ldaxr(v36);
            v39 = --v111 == 0;
          }
          while (__stlxr(v111, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v313 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v313, (uint64_t)*a3);
          *a3 = v313;
          *v313 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v106);
            v210 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, (uint64_t)*a3);
          *a3 = v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v106);
            v109 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v315 = operator new();
          v316 = (uint64_t)*a3;
          *(_QWORD *)v315 = **a3;
          *(_QWORD *)(v315 + 8) = *(_QWORD *)(v316 + 8);
          v317 = *(_QWORD *)(v316 + 16);
          *(_QWORD *)(v315 + 16) = v317;
          if (v317)
          {
            v318 = (unsigned int *)(v317 + 8);
            do
              v319 = __ldxr(v318);
            while (__stxr(v319 + 1, v318));
          }
          v320 = *(_OWORD *)(v316 + 24);
          v321 = *(_OWORD *)(v316 + 40);
          *(_OWORD *)(v315 + 56) = *(_OWORD *)(v316 + 56);
          *(_OWORD *)(v315 + 40) = v321;
          *(_OWORD *)(v315 + 24) = v320;
          *a3 = (_QWORD *)v315;
          *(_QWORD *)v315 = 1;
          do
          {
            v322 = __ldaxr((unint64_t *)v211);
            v220 = --v322 == 0;
          }
          while (__stlxr(v322, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v221 = (_QWORD *)operator new();
          v222 = (uint64_t)(*a3 + 1);
          *v221 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v221 + 1, v222);
          *a3 = v221;
          *v221 = 1;
          do
          {
            v223 = __ldaxr(v44);
            v48 = --v223 == 0;
          }
          while (__stlxr(v223, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v32 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v32, (uint64_t)*a3);
          *a3 = v32;
          *v32 = 1;
          do
          {
            v33 = __ldaxr((unint64_t *)v12);
            v15 = --v33 == 0;
          }
          while (__stlxr(v33, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v130 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v130, (uint64_t)*a3);
          *a3 = v130;
          *v130 = 1;
          do
          {
            v131 = __ldaxr(v36);
            v39 = --v131 == 0;
          }
          while (__stlxr(v131, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v323 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, (uint64_t)*a3);
          *a3 = v323;
          *v323 = 1;
          do
          {
            v324 = __ldaxr((unint64_t *)v106);
            v210 = --v324 == 0;
          }
          while (__stlxr(v324, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v273 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v273, (uint64_t)*a3);
          *a3 = v273;
          *v273 = 1;
          do
          {
            v274 = __ldaxr((unint64_t *)v106);
            v109 = --v274 == 0;
          }
          while (__stlxr(v274, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v325 = operator new();
          v326 = (uint64_t)*a3;
          *(_QWORD *)v325 = **a3;
          *(_QWORD *)(v325 + 8) = *(_QWORD *)(v326 + 8);
          v327 = *(_QWORD *)(v326 + 16);
          *(_QWORD *)(v325 + 16) = v327;
          if (v327)
          {
            v328 = (unsigned int *)(v327 + 8);
            do
              v329 = __ldxr(v328);
            while (__stxr(v329 + 1, v328));
          }
          v330 = *(_OWORD *)(v326 + 24);
          v331 = *(_OWORD *)(v326 + 40);
          *(_OWORD *)(v325 + 56) = *(_OWORD *)(v326 + 56);
          *(_OWORD *)(v325 + 40) = v331;
          *(_OWORD *)(v325 + 24) = v330;
          *a3 = (_QWORD *)v325;
          *(_QWORD *)v325 = 1;
          do
          {
            v332 = __ldaxr((unint64_t *)v211);
            v220 = --v332 == 0;
          }
          while (__stlxr(v332, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v230 = (_QWORD *)operator new();
          v231 = (uint64_t)(*a3 + 1);
          *v230 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v230 + 1, v231);
          *a3 = v230;
          *v230 = 1;
          do
          {
            v232 = __ldaxr(v44);
            v48 = --v232 == 0;
          }
          while (__stlxr(v232, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, (uint64_t)*a3);
          *a3 = v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr((unint64_t *)v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v61 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v61, (uint64_t)*a3);
          *a3 = v61;
          *v61 = 1;
          do
          {
            v62 = __ldaxr(v36);
            v39 = --v62 == 0;
          }
          while (__stlxr(v62, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v271 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v271, (uint64_t)*a3);
          *a3 = v271;
          *v271 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v106);
            v210 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v226 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v226, (uint64_t)*a3);
          *a3 = v226;
          *v226 = 1;
          do
          {
            v227 = __ldaxr((unint64_t *)v106);
            v109 = --v227 == 0;
          }
          while (__stlxr(v227, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v283 = operator new();
          v284 = (uint64_t)*a3;
          *(_QWORD *)v283 = **a3;
          *(_QWORD *)(v283 + 8) = *(_QWORD *)(v284 + 8);
          v285 = *(_QWORD *)(v284 + 16);
          *(_QWORD *)(v283 + 16) = v285;
          if (v285)
          {
            v286 = (unsigned int *)(v285 + 8);
            do
              v287 = __ldxr(v286);
            while (__stxr(v287 + 1, v286));
          }
          v288 = *(_OWORD *)(v284 + 24);
          v289 = *(_OWORD *)(v284 + 40);
          *(_OWORD *)(v283 + 56) = *(_OWORD *)(v284 + 56);
          *(_OWORD *)(v283 + 40) = v289;
          *(_OWORD *)(v283 + 24) = v288;
          *a3 = (_QWORD *)v283;
          *(_QWORD *)v283 = 1;
          do
          {
            v290 = __ldaxr((unint64_t *)v211);
            v220 = --v290 == 0;
          }
          while (__stlxr(v290, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v142 = (_QWORD *)operator new();
          v143 = (uint64_t)(*a3 + 1);
          *v142 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v142 + 1, v143);
          *a3 = v142;
          *v142 = 1;
          do
          {
            v144 = __ldaxr(v44);
            v48 = --v144 == 0;
          }
          while (__stlxr(v144, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v34, (uint64_t)*a3);
          *a3 = v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr((unint64_t *)v12);
            v15 = --v35 == 0;
          }
          while (__stlxr(v35, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v135 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v135, (uint64_t)*a3);
          *a3 = v135;
          *v135 = 1;
          do
          {
            v136 = __ldaxr(v36);
            v39 = --v136 == 0;
          }
          while (__stlxr(v136, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v333 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v333, (uint64_t)*a3);
          *a3 = v333;
          *v333 = 1;
          do
          {
            v334 = __ldaxr((unint64_t *)v106);
            v210 = --v334 == 0;
          }
          while (__stlxr(v334, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v291 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v291, (uint64_t)*a3);
          *a3 = v291;
          *v291 = 1;
          do
          {
            v292 = __ldaxr((unint64_t *)v106);
            v109 = --v292 == 0;
          }
          while (__stlxr(v292, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v335 = operator new();
          v336 = (uint64_t)*a3;
          *(_QWORD *)v335 = **a3;
          *(_QWORD *)(v335 + 8) = *(_QWORD *)(v336 + 8);
          v337 = *(_QWORD *)(v336 + 16);
          *(_QWORD *)(v335 + 16) = v337;
          if (v337)
          {
            v338 = (unsigned int *)(v337 + 8);
            do
              v339 = __ldxr(v338);
            while (__stxr(v339 + 1, v338));
          }
          v340 = *(_OWORD *)(v336 + 24);
          v341 = *(_OWORD *)(v336 + 40);
          *(_OWORD *)(v335 + 56) = *(_OWORD *)(v336 + 56);
          *(_OWORD *)(v335 + 40) = v341;
          *(_OWORD *)(v335 + 24) = v340;
          *a3 = (_QWORD *)v335;
          *(_QWORD *)v335 = 1;
          do
          {
            v342 = __ldaxr((unint64_t *)v211);
            v220 = --v342 == 0;
          }
          while (__stlxr(v342, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v249 = (_QWORD *)operator new();
          v250 = (uint64_t)(*a3 + 1);
          *v249 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v249 + 1, v250);
          *a3 = v249;
          *v249 = 1;
          do
          {
            v251 = __ldaxr(v44);
            v48 = --v251 == 0;
          }
          while (__stlxr(v251, v44));
LABEL_301:
          if (!v48)
            goto LABEL_423;
          v138 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v44);
          v252 = 2071181815;
          goto LABEL_421;
        default:
          goto LABEL_426;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, (uint64_t)*a3);
          *a3 = v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr((unint64_t *)v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, (unint64_t *)v12));
LABEL_281:
          if (!v15)
            goto LABEL_423;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v138 = (_QWORD *)v12;
          v139 = 0x1012C404EF22A49;
          goto LABEL_422;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v40 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v40, (uint64_t)*a3);
          *a3 = v40;
          *v40 = 1;
          do
          {
            v41 = __ldaxr(v36);
            v39 = --v41 == 0;
          }
          while (__stlxr(v41, v36));
LABEL_174:
          if (!v39)
            goto LABEL_423;
          v137 = (void *)v36[1];
          if (v137)
          {
            v36[2] = (unint64_t)v137;
            operator delete(v137);
          }
          v138 = v36;
          v139 = 0x1080C409938AC02;
          goto LABEL_422;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v228 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v228, (uint64_t)*a3);
          *a3 = v228;
          *v228 = 1;
          do
          {
            v229 = __ldaxr((unint64_t *)v106);
            v210 = --v229 == 0;
          }
          while (__stlxr(v229, (unint64_t *)v106));
LABEL_408:
          if (!v210)
            goto LABEL_423;
          v344 = (void **)(v106 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v344);
          goto LABEL_411;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v140 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v140, (uint64_t)*a3);
          *a3 = v140;
          *v140 = 1;
          do
          {
            v141 = __ldaxr((unint64_t *)v106);
            v109 = --v141 == 0;
          }
          while (__stlxr(v141, (unint64_t *)v106));
LABEL_366:
          if (!v109)
            goto LABEL_423;
          v344 = (void **)(v106 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v344);
LABEL_411:
          v138 = (_QWORD *)v106;
          v139 = 0x1020C405E66F15BLL;
          goto LABEL_422;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v241 = operator new();
          v242 = (uint64_t)*a3;
          *(_QWORD *)v241 = **a3;
          *(_QWORD *)(v241 + 8) = *(_QWORD *)(v242 + 8);
          v243 = *(_QWORD *)(v242 + 16);
          *(_QWORD *)(v241 + 16) = v243;
          if (v243)
          {
            v244 = (unsigned int *)(v243 + 8);
            do
              v245 = __ldxr(v244);
            while (__stxr(v245 + 1, v244));
          }
          v246 = *(_OWORD *)(v242 + 24);
          v247 = *(_OWORD *)(v242 + 40);
          *(_OWORD *)(v241 + 56) = *(_OWORD *)(v242 + 56);
          *(_OWORD *)(v241 + 40) = v247;
          *(_OWORD *)(v241 + 24) = v246;
          *a3 = (_QWORD *)v241;
          *(_QWORD *)v241 = 1;
          do
          {
            v248 = __ldaxr((unint64_t *)v211);
            v220 = --v248 == 0;
          }
          while (__stlxr(v248, (unint64_t *)v211));
LABEL_418:
          if (!v220)
            goto LABEL_423;
          boost::detail::shared_count::~shared_count((unsigned int **)(v211 + 16));
          v138 = (_QWORD *)v211;
          v252 = -235920773;
LABEL_421:
          v139 = v252 | 0x1030C4000000000;
LABEL_422:
          MEMORY[0x219A19A08](v138, v139);
LABEL_423:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v63 = *(double *)a2;
          v64 = *a3;
          if (**a3 != 1)
          {
            v65 = (_QWORD *)operator new();
            v66 = (uint64_t)(*a3 + 1);
            *v65 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v65 + 1, v66);
            *a3 = v65;
            *v65 = 1;
            do
            {
              v67 = __ldaxr(v64);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v64));
            if (!v68)
            {
              v69 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v64);
              MEMORY[0x219A19A08](v69, 0x1030C407B73B9F7);
            }
          }
          v70 = (uint64_t)*a3;
          v71 = *a3 + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v71, *(_QWORD *)&v63 + 8))
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v73 = *(uint64_t **)(v70 + 24);
          v72 = *(uint64_t **)(v70 + 32);
          if (v72 == v73)
            return;
          if (!*v71)
            return;
          v74 = 1;
          do
          {
            v75 = *v73++;
            v74 *= v75;
          }
          while (v73 != v72);
          if (!v74)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v71);
          v76 = (uint64_t)(*(_QWORD *)(v70 + 32) - *(_QWORD *)(v70 + 24)) >> 3;
          v343 = 0;
          std::vector<unsigned long>::vector(&v344, v76, &v343);
          v77 = v344;
          v78 = v345;
          break;
        default:
          goto LABEL_426;
      }
      break;
    default:
LABEL_426:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v79 = (char *)v78 - (char *)v77;
    if (v79)
    {
      v80 = 0;
      v81 = v79 >> 3;
      v82 = *(uint64_t **)(*(_QWORD *)&v63 + 48);
      if (v81 <= 1)
        v81 = 1;
      v83 = v77;
      v84 = v81;
      do
      {
        v86 = (uint64_t)*v83++;
        v85 = v86;
        v87 = *v82++;
        v80 += v87 * v85;
        --v84;
      }
      while (v84);
      v88 = 0;
      v89 = *(double *)(**(_QWORD **)(*(_QWORD *)&v63 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v63 + 72) + v80));
      v90 = *(uint64_t **)(v70 + 48);
      do
      {
        v92 = (uint64_t)*v77++;
        v91 = v92;
        v93 = *v90++;
        v88 += v93 * v91;
        --v81;
      }
      while (v81);
    }
    else
    {
      v88 = 0;
      v89 = *(double *)(**(_QWORD **)(*(_QWORD *)&v63 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v63 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v71);
    *(double *)(**(_QWORD **)(v70 + 8) + 8 * (*(_QWORD *)(v70 + 72) + v88)) = v89
                                                                            + *(double *)(**(_QWORD **)(v70 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v70 + 72) + v88));
    v77 = v344;
    v78 = v345;
    v94 = v345 - v344;
    v95 = v94 - 1;
    if ((char *)v345 - (char *)v344 < 1)
      goto LABEL_124;
    v96 = *(_QWORD *)(v70 + 24);
    v97 = (char *)v344[v95] + 1;
    v344[v95] = v97;
    if ((unint64_t)v97 >= *(_QWORD *)(v96 + 8 * v95))
      break;
LABEL_123:
    v94 = 1;
LABEL_124:
    if (v95 < 0 || !v94)
      goto LABEL_236;
  }
  v98 = (unint64_t *)&v77[v94 - 2];
  v99 = v96 - 16;
  while (1)
  {
    v100 = v94 - 1;
    v98[1] = 0;
    if (v94 - 1 <= 0)
      break;
    v101 = *v98 + 1;
    *v98-- = v101;
    v102 = *(_QWORD *)(v99 + 8 * v94--);
    if (v101 < v102)
    {
      v95 = v100 - 1;
      goto LABEL_123;
    }
  }
LABEL_236:
  if (v77)
  {
LABEL_237:
    v345 = v77;
    operator delete(v77);
  }
}

void sub_218240488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933998;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933998;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD **a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_3::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  double v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  unint64_t v58;
  double *v59;
  double v60;
  _QWORD *v61;
  unint64_t v62;
  double v63;
  unint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void **v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  void **v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  BOOL v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t *v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  double *v117;
  uint64_t v118;
  unint64_t v119;
  double v120;
  unint64_t *v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  double *v126;
  uint64_t v127;
  double v128;
  unint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  void *v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t *v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  double v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void **v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  unint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  _QWORD *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t *v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void **v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  unint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  double v207;
  _QWORD *v208;
  unint64_t v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int *v215;
  unsigned int v216;
  __int128 v217;
  __int128 v218;
  unint64_t v219;
  BOOL v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  unint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  unint64_t v232;
  _QWORD *v233;
  unint64_t v234;
  _QWORD *v235;
  unint64_t v236;
  double v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  __int128 v246;
  __int128 v247;
  unint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  unint64_t v251;
  unsigned int v252;
  _QWORD *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  __int128 v260;
  __int128 v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  _QWORD *v271;
  unint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int *v278;
  unsigned int v279;
  __int128 v280;
  __int128 v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int *v286;
  unsigned int v287;
  __int128 v288;
  __int128 v289;
  unint64_t v290;
  _QWORD *v291;
  unint64_t v292;
  _QWORD *v293;
  unint64_t v294;
  _QWORD *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int *v300;
  unsigned int v301;
  __int128 v302;
  __int128 v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  __int128 v330;
  __int128 v331;
  unint64_t v332;
  _QWORD *v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int *v338;
  unsigned int v339;
  __int128 v340;
  __int128 v341;
  unint64_t v342;
  uint64_t v343;
  void **v344;
  void **v345;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((_QWORD **)a2 != a3)
  {
    *(_QWORD **)((char *)a3 + 5) = *(_QWORD **)(a2 + 5);
    *a3 = *(_QWORD **)a2;
    v5 = *(unsigned __int8 *)(a2 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = *a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(a1 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)*a3 + *(_QWORD *)a1;
          goto LABEL_48;
        case 1:
          v207 = *(double *)a3 + (double)*(uint64_t *)a1;
          goto LABEL_305;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v233 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v233, (uint64_t)*a3);
          *a3 = v233;
          *v233 = 1;
          do
          {
            v234 = __ldaxr((unint64_t *)v12);
            v15 = --v234 == 0;
          }
          while (__stlxr(v234, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v112 = *a3;
          if (**a3 != 1)
          {
            v113 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v113, (uint64_t)*a3);
            *a3 = v113;
            *v113 = 1;
            do
            {
              v114 = __ldaxr(v112);
              v115 = v114 - 1;
            }
            while (__stlxr(v115, v112));
            if (!v115)
            {
              v116 = (void *)v112[1];
              if (v116)
              {
                v112[2] = (unint64_t)v116;
                operator delete(v116);
              }
              MEMORY[0x219A19A08](v112, 0x1080C409938AC02);
            }
          }
          v117 = (double *)(*a3)[1];
          v118 = (*a3)[2] - (_QWORD)v117;
          if (v118)
          {
            v119 = v118 >> 3;
            v120 = (double)*(uint64_t *)a1;
            if (v119 <= 1)
              v119 = 1;
            do
            {
              *v117 = *v117 + v120;
              ++v117;
              --v119;
            }
            while (v119);
          }
          return;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v267 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v267, (uint64_t)*a3);
          *a3 = v267;
          *v267 = 1;
          do
          {
            v268 = __ldaxr((unint64_t *)v106);
            v210 = --v268 == 0;
          }
          while (__stlxr(v268, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v293 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v293, (uint64_t)*a3);
          *a3 = v293;
          *v293 = 1;
          do
          {
            v294 = __ldaxr((unint64_t *)v106);
            v109 = --v294 == 0;
          }
          while (__stlxr(v294, (unint64_t *)v106));
          goto LABEL_366;
        case 6:
          *a3 = (_QWORD *)((unint64_t)*a3 & 0xFF00000000000000 | ((unint64_t)*a3 + *(_QWORD *)a1) & 0xFFFFFFFFFFFFFFLL);
          return;
        case 7:
          goto LABEL_423;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v297 = operator new();
          v298 = (uint64_t)*a3;
          *(_QWORD *)v297 = **a3;
          *(_QWORD *)(v297 + 8) = *(_QWORD *)(v298 + 8);
          v299 = *(_QWORD *)(v298 + 16);
          *(_QWORD *)(v297 + 16) = v299;
          if (v299)
          {
            v300 = (unsigned int *)(v299 + 8);
            do
              v301 = __ldxr(v300);
            while (__stxr(v301 + 1, v300));
          }
          v302 = *(_OWORD *)(v298 + 24);
          v303 = *(_OWORD *)(v298 + 40);
          *(_OWORD *)(v297 + 56) = *(_OWORD *)(v298 + 56);
          *(_OWORD *)(v297 + 40) = v303;
          *(_OWORD *)(v297 + 24) = v302;
          *a3 = (_QWORD *)v297;
          *(_QWORD *)v297 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v211);
            v220 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v145 = *a3;
          if (**a3 != 1)
          {
            v146 = (_QWORD *)operator new();
            v147 = (uint64_t)(*a3 + 1);
            *v146 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v146 + 1, v147);
            *a3 = v146;
            *v146 = 1;
            do
            {
              v148 = __ldaxr(v145);
              v149 = v148 - 1;
            }
            while (__stlxr(v149, v145));
            if (!v149)
            {
              v150 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v145);
              MEMORY[0x219A19A08](v150, 0x1030C407B73B9F7);
            }
          }
          v151 = *a3;
          v153 = (uint64_t *)(*a3)[3];
          v152 = (uint64_t *)(*a3)[4];
          if (v152 == v153)
            return;
          if (!v151[1])
            return;
          v154 = (double)*(uint64_t *)a1;
          v155 = 1;
          do
          {
            v156 = *v153++;
            v155 *= v156;
          }
          while (v153 != v152);
          if (!v155)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v151 + 1);
          v157 = (v151[4] - v151[3]) >> 3;
          v343 = 0;
          std::vector<unsigned long>::vector(&v344, v157, &v343);
          v77 = v344;
          v158 = v345;
          break;
        default:
          goto LABEL_426;
      }
      while (2)
      {
        v159 = 0;
        v160 = (char *)v158 - (char *)v77;
        if (v160)
        {
          v161 = v160 >> 3;
          v162 = (uint64_t *)v151[6];
          if (v161 <= 1)
            v161 = 1;
          do
          {
            v164 = (uint64_t)*v77++;
            v163 = v164;
            v165 = *v162++;
            v159 += v165 * v163;
            --v161;
          }
          while (v161);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v151 + 1);
        *(double *)(*(_QWORD *)v151[1] + 8 * (v151[9] + v159)) = *(double *)(*(_QWORD *)v151[1] + 8 * (v151[9] + v159))
                                                               + v154;
        v77 = v344;
        v158 = v345;
        v166 = v345 - v344;
        v167 = v166 - 1;
        if ((char *)v345 - (char *)v344 < 1)
          goto LABEL_209;
        v168 = v151[3];
        v169 = (char *)v344[v167] + 1;
        v344[v167] = v169;
        if ((unint64_t)v169 < *(_QWORD *)(v168 + 8 * v167))
        {
LABEL_208:
          v166 = 1;
LABEL_209:
          if (v167 < 0 || !v166)
            goto LABEL_236;
          continue;
        }
        break;
      }
      v170 = (unint64_t *)&v77[v166 - 2];
      v171 = v168 - 16;
      while (1)
      {
        v172 = v166 - 1;
        v170[1] = 0;
        if (v166 - 1 <= 0)
          goto LABEL_237;
        v173 = *v170 + 1;
        *v170-- = v173;
        v174 = *(_QWORD *)(v171 + 8 * v166--);
        if (v173 < v174)
        {
          v167 = v172 - 1;
          goto LABEL_208;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)(*(double *)a1 + (double)(uint64_t)*a3);
LABEL_48:
          *a3 = (_QWORD *)v11;
          return;
        case 1:
          v207 = *(double *)a1 + *(double *)a3;
LABEL_305:
          *(double *)a3 = v207;
          return;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v235 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v235, (uint64_t)*a3);
          *a3 = v235;
          *v235 = 1;
          do
          {
            v236 = __ldaxr((unint64_t *)v12);
            v15 = --v236 == 0;
          }
          while (__stlxr(v236, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v121 = *a3;
          if (**a3 != 1)
          {
            v122 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v122, (uint64_t)*a3);
            *a3 = v122;
            *v122 = 1;
            do
            {
              v123 = __ldaxr(v121);
              v124 = v123 - 1;
            }
            while (__stlxr(v124, v121));
            if (!v124)
            {
              v125 = (void *)v121[1];
              if (v125)
              {
                v121[2] = (unint64_t)v125;
                operator delete(v125);
              }
              MEMORY[0x219A19A08](v121, 0x1080C409938AC02);
            }
          }
          v126 = (double *)(*a3)[1];
          v127 = (*a3)[2] - (_QWORD)v126;
          if (v127)
          {
            v128 = *(double *)a1;
            v129 = v127 >> 3;
            if (v129 <= 1)
              v129 = 1;
            do
            {
              *v126 = v128 + *v126;
              ++v126;
              --v129;
            }
            while (v129);
          }
          return;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v269 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v269, (uint64_t)*a3);
          *a3 = v269;
          *v269 = 1;
          do
          {
            v270 = __ldaxr((unint64_t *)v106);
            v210 = --v270 == 0;
          }
          while (__stlxr(v270, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v295 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v295, (uint64_t)*a3);
          *a3 = v295;
          *v295 = 1;
          do
          {
            v296 = __ldaxr((unint64_t *)v106);
            v109 = --v296 == 0;
          }
          while (__stlxr(v296, (unint64_t *)v106));
          goto LABEL_366;
        case 6:
          v237 = (*(double *)a1 - (double)(uint64_t)floor(*(double *)a1)) * 1000000.0;
          v238 = (uint64_t)*a3;
          v239 = (unint64_t)*a3 + vcvtmd_s64_f64(*(double *)a1);
          *a3 = (_QWORD *)((unint64_t)*a3 & 0xFF00000000000000 | v239 & 0xFFFFFFFFFFFFFFLL);
          v240 = (uint64_t)v237 + *((int *)a3 + 2);
          if (v240 >= 1000000)
          {
            *a3 = (_QWORD *)((v239 + 1) & 0xFFFFFFFFFFFFFFLL | v238 & 0xFF00000000000000);
            LODWORD(v240) = v240 - 1000000;
          }
          if (v240 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          *((_DWORD *)a3 + 2) = v240;
          return;
        case 7:
          goto LABEL_423;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v305 = operator new();
          v306 = (uint64_t)*a3;
          *(_QWORD *)v305 = **a3;
          *(_QWORD *)(v305 + 8) = *(_QWORD *)(v306 + 8);
          v307 = *(_QWORD *)(v306 + 16);
          *(_QWORD *)(v305 + 16) = v307;
          if (v307)
          {
            v308 = (unsigned int *)(v307 + 8);
            do
              v309 = __ldxr(v308);
            while (__stxr(v309 + 1, v308));
          }
          v310 = *(_OWORD *)(v306 + 24);
          v311 = *(_OWORD *)(v306 + 40);
          *(_OWORD *)(v305 + 56) = *(_OWORD *)(v306 + 56);
          *(_OWORD *)(v305 + 40) = v311;
          *(_OWORD *)(v305 + 24) = v310;
          *a3 = (_QWORD *)v305;
          *(_QWORD *)v305 = 1;
          do
          {
            v312 = __ldaxr((unint64_t *)v211);
            v220 = --v312 == 0;
          }
          while (__stlxr(v312, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v175 = *a3;
          if (**a3 != 1)
          {
            v176 = (_QWORD *)operator new();
            v177 = (uint64_t)(*a3 + 1);
            *v176 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v176 + 1, v177);
            *a3 = v176;
            *v176 = 1;
            do
            {
              v178 = __ldaxr(v175);
              v179 = v178 - 1;
            }
            while (__stlxr(v179, v175));
            if (!v179)
            {
              v180 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v175);
              MEMORY[0x219A19A08](v180, 0x1030C407B73B9F7);
            }
          }
          v181 = *a3;
          v183 = (uint64_t *)(*a3)[3];
          v182 = (uint64_t *)(*a3)[4];
          if (v182 == v183)
            return;
          if (!v181[1])
            return;
          v184 = *(double *)a1;
          v185 = 1;
          do
          {
            v186 = *v183++;
            v185 *= v186;
          }
          while (v183 != v182);
          if (!v185)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v181 + 1);
          v187 = (v181[4] - v181[3]) >> 3;
          v343 = 0;
          std::vector<unsigned long>::vector(&v344, v187, &v343);
          v77 = v344;
          v188 = v345;
          break;
        default:
          goto LABEL_426;
      }
      while (2)
      {
        v189 = 0;
        v190 = (char *)v188 - (char *)v77;
        if (v190)
        {
          v191 = v190 >> 3;
          v192 = (uint64_t *)v181[6];
          if (v191 <= 1)
            v191 = 1;
          do
          {
            v194 = (uint64_t)*v77++;
            v193 = v194;
            v195 = *v192++;
            v189 += v195 * v193;
            --v191;
          }
          while (v191);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v181 + 1);
        *(double *)(*(_QWORD *)v181[1] + 8 * (v181[9] + v189)) = v184
                                                               + *(double *)(*(_QWORD *)v181[1] + 8 * (v181[9] + v189));
        v77 = v344;
        v188 = v345;
        v196 = v345 - v344;
        v197 = v196 - 1;
        if ((char *)v345 - (char *)v344 < 1)
          goto LABEL_234;
        v198 = v181[3];
        v199 = (char *)v344[v197] + 1;
        v344[v197] = v199;
        if ((unint64_t)v199 < *(_QWORD *)(v198 + 8 * v197))
        {
LABEL_233:
          v196 = 1;
LABEL_234:
          if (v197 < 0 || !v196)
            goto LABEL_236;
          continue;
        }
        break;
      }
      v200 = (unint64_t *)&v77[v196 - 2];
      v201 = v198 - 16;
      while (1)
      {
        v202 = v196 - 1;
        v200[1] = 0;
        if (v196 - 1 <= 0)
          goto LABEL_237;
        v203 = *v200 + 1;
        *v200-- = v203;
        v204 = *(_QWORD *)(v201 + 8 * v196--);
        if (v203 < v204)
        {
          v197 = v202 - 1;
          goto LABEL_233;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v18 = *(double *)a1;
          v19 = (uint64_t)*a3;
          if (**a3 != 1)
          {
            v20 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, (uint64_t)*a3);
            *a3 = v20;
            *v20 = 1;
            do
            {
              v21 = __ldaxr((unint64_t *)v19);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, (unint64_t *)v19));
            if (!v22)
            {
              if (*(char *)(v19 + 31) < 0)
                operator delete(*(void **)(v19 + 8));
              MEMORY[0x219A19A08](v19, 0x1012C404EF22A49);
            }
          }
          v23 = *(char *)(*(_QWORD *)&v18 + 31);
          if (v23 >= 0)
            v24 = (const std::string::value_type *)(*(_QWORD *)&v18 + 8);
          else
            v24 = *(const std::string::value_type **)(*(_QWORD *)&v18 + 8);
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(*(_QWORD *)&v18 + 31);
          else
            v25 = *(_QWORD *)(*(_QWORD *)&v18 + 16);
          std::string::append((std::string *)(*a3 + 1), v24, v25);
          return;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v42 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v42, (uint64_t)*a3);
          *a3 = v42;
          *v42 = 1;
          do
          {
            v43 = __ldaxr(v36);
            v39 = --v43 == 0;
          }
          while (__stlxr(v43, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v253 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v253, (uint64_t)*a3);
          *a3 = v253;
          *v253 = 1;
          do
          {
            v254 = __ldaxr((unint64_t *)v106);
            v210 = --v254 == 0;
          }
          while (__stlxr(v254, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v205 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v205, (uint64_t)*a3);
          *a3 = v205;
          *v205 = 1;
          do
          {
            v206 = __ldaxr((unint64_t *)v106);
            v109 = --v206 == 0;
          }
          while (__stlxr(v206, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v255 = operator new();
          v256 = (uint64_t)*a3;
          *(_QWORD *)v255 = **a3;
          *(_QWORD *)(v255 + 8) = *(_QWORD *)(v256 + 8);
          v257 = *(_QWORD *)(v256 + 16);
          *(_QWORD *)(v255 + 16) = v257;
          if (v257)
          {
            v258 = (unsigned int *)(v257 + 8);
            do
              v259 = __ldxr(v258);
            while (__stxr(v259 + 1, v258));
          }
          v260 = *(_OWORD *)(v256 + 24);
          v261 = *(_OWORD *)(v256 + 40);
          *(_OWORD *)(v255 + 56) = *(_OWORD *)(v256 + 56);
          *(_OWORD *)(v255 + 40) = v261;
          *(_OWORD *)(v255 + 24) = v260;
          *a3 = (_QWORD *)v255;
          *(_QWORD *)v255 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v211);
            v220 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v103 = (_QWORD *)operator new();
          v104 = (uint64_t)(*a3 + 1);
          *v103 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v103 + 1, v104);
          *a3 = v103;
          *v103 = 1;
          do
          {
            v105 = __ldaxr(v44);
            v48 = --v105 == 0;
          }
          while (__stlxr(v105, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, (uint64_t)*a3);
          *a3 = v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr((unint64_t *)v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v49 = *(double *)a1;
          v50 = *a3;
          if (**a3 != 1)
          {
            v51 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v51, (uint64_t)*a3);
            *a3 = v51;
            *v51 = 1;
            do
            {
              v52 = __ldaxr(v50);
              v53 = v52 - 1;
            }
            while (__stlxr(v53, v50));
            if (!v53)
            {
              v54 = (void *)v50[1];
              if (v54)
              {
                v50[2] = (unint64_t)v54;
                operator delete(v54);
              }
              MEMORY[0x219A19A08](v50, 0x1080C409938AC02);
            }
          }
          v55 = (uint64_t)*a3;
          turi::flexible_type_fail((*a3)[2] - (*a3)[1] == *(_QWORD *)(*(_QWORD *)&v49 + 16)
                                                        - *(_QWORD *)(*(_QWORD *)&v49 + 8));
          v56 = *(double **)(v55 + 8);
          v57 = *(_QWORD *)(v55 + 16) - (_QWORD)v56;
          if (v57)
          {
            v58 = v57 >> 3;
            v59 = *(double **)(*(_QWORD *)&v49 + 8);
            if (v58 <= 1)
              v58 = 1;
            do
            {
              v60 = *v59++;
              *v56 = v60 + *v56;
              ++v56;
              --v58;
            }
            while (v58);
          }
          return;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v265 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v265, (uint64_t)*a3);
          *a3 = v265;
          *v265 = 1;
          do
          {
            v266 = __ldaxr((unint64_t *)v106);
            v210 = --v266 == 0;
          }
          while (__stlxr(v266, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v224 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v224, (uint64_t)*a3);
          *a3 = v224;
          *v224 = 1;
          do
          {
            v225 = __ldaxr((unint64_t *)v106);
            v109 = --v225 == 0;
          }
          while (__stlxr(v225, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v275 = operator new();
          v276 = (uint64_t)*a3;
          *(_QWORD *)v275 = **a3;
          *(_QWORD *)(v275 + 8) = *(_QWORD *)(v276 + 8);
          v277 = *(_QWORD *)(v276 + 16);
          *(_QWORD *)(v275 + 16) = v277;
          if (v277)
          {
            v278 = (unsigned int *)(v277 + 8);
            do
              v279 = __ldxr(v278);
            while (__stxr(v279 + 1, v278));
          }
          v280 = *(_OWORD *)(v276 + 24);
          v281 = *(_OWORD *)(v276 + 40);
          *(_OWORD *)(v275 + 56) = *(_OWORD *)(v276 + 56);
          *(_OWORD *)(v275 + 40) = v281;
          *(_OWORD *)(v275 + 24) = v280;
          *a3 = (_QWORD *)v275;
          *(_QWORD *)v275 = 1;
          do
          {
            v282 = __ldaxr((unint64_t *)v211);
            v220 = --v282 == 0;
          }
          while (__stlxr(v282, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v132 = (_QWORD *)operator new();
          v133 = (uint64_t)(*a3 + 1);
          *v132 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v132 + 1, v133);
          *a3 = v132;
          *v132 = 1;
          do
          {
            v134 = __ldaxr(v44);
            v48 = --v134 == 0;
          }
          while (__stlxr(v134, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, (uint64_t)*a3);
          *a3 = v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v37 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v37, (uint64_t)*a3);
          *a3 = v37;
          *v37 = 1;
          do
          {
            v38 = __ldaxr(v36);
            v39 = --v38 == 0;
          }
          while (__stlxr(v38, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v208 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v208, (uint64_t)*a3);
          *a3 = v208;
          *v208 = 1;
          do
          {
            v209 = __ldaxr((unint64_t *)v106);
            v210 = --v209 == 0;
          }
          while (__stlxr(v209, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v107 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v107, (uint64_t)*a3);
          *a3 = v107;
          *v107 = 1;
          do
          {
            v108 = __ldaxr((unint64_t *)v106);
            v109 = --v108 == 0;
          }
          while (__stlxr(v108, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v212 = operator new();
          v213 = (uint64_t)*a3;
          *(_QWORD *)v212 = **a3;
          *(_QWORD *)(v212 + 8) = *(_QWORD *)(v213 + 8);
          v214 = *(_QWORD *)(v213 + 16);
          *(_QWORD *)(v212 + 16) = v214;
          if (v214)
          {
            v215 = (unsigned int *)(v214 + 8);
            do
              v216 = __ldxr(v215);
            while (__stxr(v216 + 1, v215));
          }
          v217 = *(_OWORD *)(v213 + 24);
          v218 = *(_OWORD *)(v213 + 40);
          *(_OWORD *)(v212 + 56) = *(_OWORD *)(v213 + 56);
          *(_OWORD *)(v212 + 40) = v218;
          *(_OWORD *)(v212 + 24) = v217;
          *a3 = (_QWORD *)v212;
          *(_QWORD *)v212 = 1;
          do
          {
            v219 = __ldaxr((unint64_t *)v211);
            v220 = --v219 == 0;
          }
          while (__stlxr(v219, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v45 = (_QWORD *)operator new();
          v46 = (uint64_t)(*a3 + 1);
          *v45 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v45 + 1, v46);
          *a3 = v45;
          *v45 = 1;
          do
          {
            v47 = __ldaxr(v44);
            v48 = --v47 == 0;
          }
          while (__stlxr(v47, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v30 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v30, (uint64_t)*a3);
          *a3 = v30;
          *v30 = 1;
          do
          {
            v31 = __ldaxr((unint64_t *)v12);
            v15 = --v31 == 0;
          }
          while (__stlxr(v31, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v110 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v110, (uint64_t)*a3);
          *a3 = v110;
          *v110 = 1;
          do
          {
            v111 = __ldaxr(v36);
            v39 = --v111 == 0;
          }
          while (__stlxr(v111, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v313 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v313, (uint64_t)*a3);
          *a3 = v313;
          *v313 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v106);
            v210 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, (uint64_t)*a3);
          *a3 = v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v106);
            v109 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v315 = operator new();
          v316 = (uint64_t)*a3;
          *(_QWORD *)v315 = **a3;
          *(_QWORD *)(v315 + 8) = *(_QWORD *)(v316 + 8);
          v317 = *(_QWORD *)(v316 + 16);
          *(_QWORD *)(v315 + 16) = v317;
          if (v317)
          {
            v318 = (unsigned int *)(v317 + 8);
            do
              v319 = __ldxr(v318);
            while (__stxr(v319 + 1, v318));
          }
          v320 = *(_OWORD *)(v316 + 24);
          v321 = *(_OWORD *)(v316 + 40);
          *(_OWORD *)(v315 + 56) = *(_OWORD *)(v316 + 56);
          *(_OWORD *)(v315 + 40) = v321;
          *(_OWORD *)(v315 + 24) = v320;
          *a3 = (_QWORD *)v315;
          *(_QWORD *)v315 = 1;
          do
          {
            v322 = __ldaxr((unint64_t *)v211);
            v220 = --v322 == 0;
          }
          while (__stlxr(v322, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v221 = (_QWORD *)operator new();
          v222 = (uint64_t)(*a3 + 1);
          *v221 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v221 + 1, v222);
          *a3 = v221;
          *v221 = 1;
          do
          {
            v223 = __ldaxr(v44);
            v48 = --v223 == 0;
          }
          while (__stlxr(v223, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v32 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v32, (uint64_t)*a3);
          *a3 = v32;
          *v32 = 1;
          do
          {
            v33 = __ldaxr((unint64_t *)v12);
            v15 = --v33 == 0;
          }
          while (__stlxr(v33, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v130 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v130, (uint64_t)*a3);
          *a3 = v130;
          *v130 = 1;
          do
          {
            v131 = __ldaxr(v36);
            v39 = --v131 == 0;
          }
          while (__stlxr(v131, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v323 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, (uint64_t)*a3);
          *a3 = v323;
          *v323 = 1;
          do
          {
            v324 = __ldaxr((unint64_t *)v106);
            v210 = --v324 == 0;
          }
          while (__stlxr(v324, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v273 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v273, (uint64_t)*a3);
          *a3 = v273;
          *v273 = 1;
          do
          {
            v274 = __ldaxr((unint64_t *)v106);
            v109 = --v274 == 0;
          }
          while (__stlxr(v274, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v325 = operator new();
          v326 = (uint64_t)*a3;
          *(_QWORD *)v325 = **a3;
          *(_QWORD *)(v325 + 8) = *(_QWORD *)(v326 + 8);
          v327 = *(_QWORD *)(v326 + 16);
          *(_QWORD *)(v325 + 16) = v327;
          if (v327)
          {
            v328 = (unsigned int *)(v327 + 8);
            do
              v329 = __ldxr(v328);
            while (__stxr(v329 + 1, v328));
          }
          v330 = *(_OWORD *)(v326 + 24);
          v331 = *(_OWORD *)(v326 + 40);
          *(_OWORD *)(v325 + 56) = *(_OWORD *)(v326 + 56);
          *(_OWORD *)(v325 + 40) = v331;
          *(_OWORD *)(v325 + 24) = v330;
          *a3 = (_QWORD *)v325;
          *(_QWORD *)v325 = 1;
          do
          {
            v332 = __ldaxr((unint64_t *)v211);
            v220 = --v332 == 0;
          }
          while (__stlxr(v332, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v230 = (_QWORD *)operator new();
          v231 = (uint64_t)(*a3 + 1);
          *v230 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v230 + 1, v231);
          *a3 = v230;
          *v230 = 1;
          do
          {
            v232 = __ldaxr(v44);
            v48 = --v232 == 0;
          }
          while (__stlxr(v232, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, (uint64_t)*a3);
          *a3 = v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr((unint64_t *)v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v61 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v61, (uint64_t)*a3);
          *a3 = v61;
          *v61 = 1;
          do
          {
            v62 = __ldaxr(v36);
            v39 = --v62 == 0;
          }
          while (__stlxr(v62, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v271 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v271, (uint64_t)*a3);
          *a3 = v271;
          *v271 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v106);
            v210 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v226 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v226, (uint64_t)*a3);
          *a3 = v226;
          *v226 = 1;
          do
          {
            v227 = __ldaxr((unint64_t *)v106);
            v109 = --v227 == 0;
          }
          while (__stlxr(v227, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v283 = operator new();
          v284 = (uint64_t)*a3;
          *(_QWORD *)v283 = **a3;
          *(_QWORD *)(v283 + 8) = *(_QWORD *)(v284 + 8);
          v285 = *(_QWORD *)(v284 + 16);
          *(_QWORD *)(v283 + 16) = v285;
          if (v285)
          {
            v286 = (unsigned int *)(v285 + 8);
            do
              v287 = __ldxr(v286);
            while (__stxr(v287 + 1, v286));
          }
          v288 = *(_OWORD *)(v284 + 24);
          v289 = *(_OWORD *)(v284 + 40);
          *(_OWORD *)(v283 + 56) = *(_OWORD *)(v284 + 56);
          *(_OWORD *)(v283 + 40) = v289;
          *(_OWORD *)(v283 + 24) = v288;
          *a3 = (_QWORD *)v283;
          *(_QWORD *)v283 = 1;
          do
          {
            v290 = __ldaxr((unint64_t *)v211);
            v220 = --v290 == 0;
          }
          while (__stlxr(v290, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v142 = (_QWORD *)operator new();
          v143 = (uint64_t)(*a3 + 1);
          *v142 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v142 + 1, v143);
          *a3 = v142;
          *v142 = 1;
          do
          {
            v144 = __ldaxr(v44);
            v48 = --v144 == 0;
          }
          while (__stlxr(v144, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v34, (uint64_t)*a3);
          *a3 = v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr((unint64_t *)v12);
            v15 = --v35 == 0;
          }
          while (__stlxr(v35, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v135 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v135, (uint64_t)*a3);
          *a3 = v135;
          *v135 = 1;
          do
          {
            v136 = __ldaxr(v36);
            v39 = --v136 == 0;
          }
          while (__stlxr(v136, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v333 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v333, (uint64_t)*a3);
          *a3 = v333;
          *v333 = 1;
          do
          {
            v334 = __ldaxr((unint64_t *)v106);
            v210 = --v334 == 0;
          }
          while (__stlxr(v334, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v291 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v291, (uint64_t)*a3);
          *a3 = v291;
          *v291 = 1;
          do
          {
            v292 = __ldaxr((unint64_t *)v106);
            v109 = --v292 == 0;
          }
          while (__stlxr(v292, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v335 = operator new();
          v336 = (uint64_t)*a3;
          *(_QWORD *)v335 = **a3;
          *(_QWORD *)(v335 + 8) = *(_QWORD *)(v336 + 8);
          v337 = *(_QWORD *)(v336 + 16);
          *(_QWORD *)(v335 + 16) = v337;
          if (v337)
          {
            v338 = (unsigned int *)(v337 + 8);
            do
              v339 = __ldxr(v338);
            while (__stxr(v339 + 1, v338));
          }
          v340 = *(_OWORD *)(v336 + 24);
          v341 = *(_OWORD *)(v336 + 40);
          *(_OWORD *)(v335 + 56) = *(_OWORD *)(v336 + 56);
          *(_OWORD *)(v335 + 40) = v341;
          *(_OWORD *)(v335 + 24) = v340;
          *a3 = (_QWORD *)v335;
          *(_QWORD *)v335 = 1;
          do
          {
            v342 = __ldaxr((unint64_t *)v211);
            v220 = --v342 == 0;
          }
          while (__stlxr(v342, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v249 = (_QWORD *)operator new();
          v250 = (uint64_t)(*a3 + 1);
          *v249 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v249 + 1, v250);
          *a3 = v249;
          *v249 = 1;
          do
          {
            v251 = __ldaxr(v44);
            v48 = --v251 == 0;
          }
          while (__stlxr(v251, v44));
LABEL_301:
          if (!v48)
            goto LABEL_423;
          v138 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v44);
          v252 = 2071181815;
          goto LABEL_421;
        default:
          goto LABEL_426;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, (uint64_t)*a3);
          *a3 = v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr((unint64_t *)v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, (unint64_t *)v12));
LABEL_281:
          if (!v15)
            goto LABEL_423;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v138 = (_QWORD *)v12;
          v139 = 0x1012C404EF22A49;
          goto LABEL_422;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v40 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v40, (uint64_t)*a3);
          *a3 = v40;
          *v40 = 1;
          do
          {
            v41 = __ldaxr(v36);
            v39 = --v41 == 0;
          }
          while (__stlxr(v41, v36));
LABEL_174:
          if (!v39)
            goto LABEL_423;
          v137 = (void *)v36[1];
          if (v137)
          {
            v36[2] = (unint64_t)v137;
            operator delete(v137);
          }
          v138 = v36;
          v139 = 0x1080C409938AC02;
          goto LABEL_422;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v228 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v228, (uint64_t)*a3);
          *a3 = v228;
          *v228 = 1;
          do
          {
            v229 = __ldaxr((unint64_t *)v106);
            v210 = --v229 == 0;
          }
          while (__stlxr(v229, (unint64_t *)v106));
LABEL_408:
          if (!v210)
            goto LABEL_423;
          v344 = (void **)(v106 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v344);
          goto LABEL_411;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v140 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v140, (uint64_t)*a3);
          *a3 = v140;
          *v140 = 1;
          do
          {
            v141 = __ldaxr((unint64_t *)v106);
            v109 = --v141 == 0;
          }
          while (__stlxr(v141, (unint64_t *)v106));
LABEL_366:
          if (!v109)
            goto LABEL_423;
          v344 = (void **)(v106 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v344);
LABEL_411:
          v138 = (_QWORD *)v106;
          v139 = 0x1020C405E66F15BLL;
          goto LABEL_422;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v241 = operator new();
          v242 = (uint64_t)*a3;
          *(_QWORD *)v241 = **a3;
          *(_QWORD *)(v241 + 8) = *(_QWORD *)(v242 + 8);
          v243 = *(_QWORD *)(v242 + 16);
          *(_QWORD *)(v241 + 16) = v243;
          if (v243)
          {
            v244 = (unsigned int *)(v243 + 8);
            do
              v245 = __ldxr(v244);
            while (__stxr(v245 + 1, v244));
          }
          v246 = *(_OWORD *)(v242 + 24);
          v247 = *(_OWORD *)(v242 + 40);
          *(_OWORD *)(v241 + 56) = *(_OWORD *)(v242 + 56);
          *(_OWORD *)(v241 + 40) = v247;
          *(_OWORD *)(v241 + 24) = v246;
          *a3 = (_QWORD *)v241;
          *(_QWORD *)v241 = 1;
          do
          {
            v248 = __ldaxr((unint64_t *)v211);
            v220 = --v248 == 0;
          }
          while (__stlxr(v248, (unint64_t *)v211));
LABEL_418:
          if (!v220)
            goto LABEL_423;
          boost::detail::shared_count::~shared_count((unsigned int **)(v211 + 16));
          v138 = (_QWORD *)v211;
          v252 = -235920773;
LABEL_421:
          v139 = v252 | 0x1030C4000000000;
LABEL_422:
          MEMORY[0x219A19A08](v138, v139);
LABEL_423:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v63 = *(double *)a1;
          v64 = *a3;
          if (**a3 != 1)
          {
            v65 = (_QWORD *)operator new();
            v66 = (uint64_t)(*a3 + 1);
            *v65 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v65 + 1, v66);
            *a3 = v65;
            *v65 = 1;
            do
            {
              v67 = __ldaxr(v64);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v64));
            if (!v68)
            {
              v69 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v64);
              MEMORY[0x219A19A08](v69, 0x1030C407B73B9F7);
            }
          }
          v70 = (uint64_t)*a3;
          v71 = *a3 + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v71, *(_QWORD *)&v63 + 8))
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v73 = *(uint64_t **)(v70 + 24);
          v72 = *(uint64_t **)(v70 + 32);
          if (v72 == v73)
            return;
          if (!*v71)
            return;
          v74 = 1;
          do
          {
            v75 = *v73++;
            v74 *= v75;
          }
          while (v73 != v72);
          if (!v74)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v71);
          v76 = (uint64_t)(*(_QWORD *)(v70 + 32) - *(_QWORD *)(v70 + 24)) >> 3;
          v343 = 0;
          std::vector<unsigned long>::vector(&v344, v76, &v343);
          v77 = v344;
          v78 = v345;
          break;
        default:
          goto LABEL_426;
      }
      break;
    default:
LABEL_426:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v79 = (char *)v78 - (char *)v77;
    if (v79)
    {
      v80 = 0;
      v81 = v79 >> 3;
      v82 = *(uint64_t **)(*(_QWORD *)&v63 + 48);
      if (v81 <= 1)
        v81 = 1;
      v83 = v77;
      v84 = v81;
      do
      {
        v86 = (uint64_t)*v83++;
        v85 = v86;
        v87 = *v82++;
        v80 += v87 * v85;
        --v84;
      }
      while (v84);
      v88 = 0;
      v89 = *(double *)(**(_QWORD **)(*(_QWORD *)&v63 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v63 + 72) + v80));
      v90 = *(uint64_t **)(v70 + 48);
      do
      {
        v92 = (uint64_t)*v77++;
        v91 = v92;
        v93 = *v90++;
        v88 += v93 * v91;
        --v81;
      }
      while (v81);
    }
    else
    {
      v88 = 0;
      v89 = *(double *)(**(_QWORD **)(*(_QWORD *)&v63 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v63 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v71);
    *(double *)(**(_QWORD **)(v70 + 8) + 8 * (*(_QWORD *)(v70 + 72) + v88)) = v89
                                                                            + *(double *)(**(_QWORD **)(v70 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v70 + 72) + v88));
    v77 = v344;
    v78 = v345;
    v94 = v345 - v344;
    v95 = v94 - 1;
    if ((char *)v345 - (char *)v344 < 1)
      goto LABEL_124;
    v96 = *(_QWORD *)(v70 + 24);
    v97 = (char *)v344[v95] + 1;
    v344[v95] = v97;
    if ((unint64_t)v97 >= *(_QWORD *)(v96 + 8 * v95))
      break;
LABEL_123:
    v94 = 1;
LABEL_124:
    if (v95 < 0 || !v94)
      goto LABEL_236;
  }
  v98 = (unint64_t *)&v77[v94 - 2];
  v99 = v96 - 16;
  while (1)
  {
    v100 = v94 - 1;
    v98[1] = 0;
    if (v94 - 1 <= 0)
      break;
    v101 = *v98 + 1;
    *v98-- = v101;
    v102 = *(_QWORD *)(v99 + 8 * v94--);
    if (v101 < v102)
    {
      v95 = v100 - 1;
      goto LABEL_123;
    }
  }
LABEL_236:
  if (v77)
  {
LABEL_237:
    v345 = v77;
    operator delete(v77);
  }
}

void sub_2182428CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933A18;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933A18;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD **a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_4::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  double v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  unint64_t v58;
  double *v59;
  double v60;
  _QWORD *v61;
  unint64_t v62;
  double v63;
  unint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void **v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  void **v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  BOOL v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t *v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  double *v117;
  uint64_t v118;
  unint64_t v119;
  double v120;
  unint64_t *v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  double *v126;
  uint64_t v127;
  double v128;
  unint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  void *v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t *v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  double v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void **v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  unint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  _QWORD *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t *v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void **v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  unint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  double v207;
  _QWORD *v208;
  unint64_t v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int *v215;
  unsigned int v216;
  __int128 v217;
  __int128 v218;
  unint64_t v219;
  BOOL v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  unint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  unint64_t v232;
  _QWORD *v233;
  unint64_t v234;
  _QWORD *v235;
  unint64_t v236;
  double v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  __int128 v246;
  __int128 v247;
  unint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  unint64_t v251;
  unsigned int v252;
  _QWORD *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  __int128 v260;
  __int128 v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  _QWORD *v271;
  unint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int *v278;
  unsigned int v279;
  __int128 v280;
  __int128 v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int *v286;
  unsigned int v287;
  __int128 v288;
  __int128 v289;
  unint64_t v290;
  _QWORD *v291;
  unint64_t v292;
  _QWORD *v293;
  unint64_t v294;
  _QWORD *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int *v300;
  unsigned int v301;
  __int128 v302;
  __int128 v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  __int128 v330;
  __int128 v331;
  unint64_t v332;
  _QWORD *v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int *v338;
  unsigned int v339;
  __int128 v340;
  __int128 v341;
  unint64_t v342;
  uint64_t v343;
  void **v344;
  void **v345;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((_QWORD **)a1 != a3)
  {
    *(_QWORD **)((char *)a3 + 5) = *(_QWORD **)(a1 + 5);
    *a3 = *(_QWORD **)a1;
    v5 = *(unsigned __int8 *)(a1 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = *a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)*a3 + *(_QWORD *)a2;
          goto LABEL_48;
        case 1:
          v207 = *(double *)a3 + (double)*(uint64_t *)a2;
          goto LABEL_305;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v233 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v233, (uint64_t)*a3);
          *a3 = v233;
          *v233 = 1;
          do
          {
            v234 = __ldaxr((unint64_t *)v12);
            v15 = --v234 == 0;
          }
          while (__stlxr(v234, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v112 = *a3;
          if (**a3 != 1)
          {
            v113 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v113, (uint64_t)*a3);
            *a3 = v113;
            *v113 = 1;
            do
            {
              v114 = __ldaxr(v112);
              v115 = v114 - 1;
            }
            while (__stlxr(v115, v112));
            if (!v115)
            {
              v116 = (void *)v112[1];
              if (v116)
              {
                v112[2] = (unint64_t)v116;
                operator delete(v116);
              }
              MEMORY[0x219A19A08](v112, 0x1080C409938AC02);
            }
          }
          v117 = (double *)(*a3)[1];
          v118 = (*a3)[2] - (_QWORD)v117;
          if (v118)
          {
            v119 = v118 >> 3;
            v120 = (double)*(uint64_t *)a2;
            if (v119 <= 1)
              v119 = 1;
            do
            {
              *v117 = *v117 + v120;
              ++v117;
              --v119;
            }
            while (v119);
          }
          return;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v267 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v267, (uint64_t)*a3);
          *a3 = v267;
          *v267 = 1;
          do
          {
            v268 = __ldaxr((unint64_t *)v106);
            v210 = --v268 == 0;
          }
          while (__stlxr(v268, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v293 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v293, (uint64_t)*a3);
          *a3 = v293;
          *v293 = 1;
          do
          {
            v294 = __ldaxr((unint64_t *)v106);
            v109 = --v294 == 0;
          }
          while (__stlxr(v294, (unint64_t *)v106));
          goto LABEL_366;
        case 6:
          *a3 = (_QWORD *)((unint64_t)*a3 & 0xFF00000000000000 | ((unint64_t)*a3 + *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL);
          return;
        case 7:
          goto LABEL_423;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v297 = operator new();
          v298 = (uint64_t)*a3;
          *(_QWORD *)v297 = **a3;
          *(_QWORD *)(v297 + 8) = *(_QWORD *)(v298 + 8);
          v299 = *(_QWORD *)(v298 + 16);
          *(_QWORD *)(v297 + 16) = v299;
          if (v299)
          {
            v300 = (unsigned int *)(v299 + 8);
            do
              v301 = __ldxr(v300);
            while (__stxr(v301 + 1, v300));
          }
          v302 = *(_OWORD *)(v298 + 24);
          v303 = *(_OWORD *)(v298 + 40);
          *(_OWORD *)(v297 + 56) = *(_OWORD *)(v298 + 56);
          *(_OWORD *)(v297 + 40) = v303;
          *(_OWORD *)(v297 + 24) = v302;
          *a3 = (_QWORD *)v297;
          *(_QWORD *)v297 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v211);
            v220 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v145 = *a3;
          if (**a3 != 1)
          {
            v146 = (_QWORD *)operator new();
            v147 = (uint64_t)(*a3 + 1);
            *v146 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v146 + 1, v147);
            *a3 = v146;
            *v146 = 1;
            do
            {
              v148 = __ldaxr(v145);
              v149 = v148 - 1;
            }
            while (__stlxr(v149, v145));
            if (!v149)
            {
              v150 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v145);
              MEMORY[0x219A19A08](v150, 0x1030C407B73B9F7);
            }
          }
          v151 = *a3;
          v153 = (uint64_t *)(*a3)[3];
          v152 = (uint64_t *)(*a3)[4];
          if (v152 == v153)
            return;
          if (!v151[1])
            return;
          v154 = (double)*(uint64_t *)a2;
          v155 = 1;
          do
          {
            v156 = *v153++;
            v155 *= v156;
          }
          while (v153 != v152);
          if (!v155)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v151 + 1);
          v157 = (v151[4] - v151[3]) >> 3;
          v343 = 0;
          std::vector<unsigned long>::vector(&v344, v157, &v343);
          v77 = v344;
          v158 = v345;
          break;
        default:
          goto LABEL_426;
      }
      while (2)
      {
        v159 = 0;
        v160 = (char *)v158 - (char *)v77;
        if (v160)
        {
          v161 = v160 >> 3;
          v162 = (uint64_t *)v151[6];
          if (v161 <= 1)
            v161 = 1;
          do
          {
            v164 = (uint64_t)*v77++;
            v163 = v164;
            v165 = *v162++;
            v159 += v165 * v163;
            --v161;
          }
          while (v161);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v151 + 1);
        *(double *)(*(_QWORD *)v151[1] + 8 * (v151[9] + v159)) = *(double *)(*(_QWORD *)v151[1] + 8 * (v151[9] + v159))
                                                               + v154;
        v77 = v344;
        v158 = v345;
        v166 = v345 - v344;
        v167 = v166 - 1;
        if ((char *)v345 - (char *)v344 < 1)
          goto LABEL_209;
        v168 = v151[3];
        v169 = (char *)v344[v167] + 1;
        v344[v167] = v169;
        if ((unint64_t)v169 < *(_QWORD *)(v168 + 8 * v167))
        {
LABEL_208:
          v166 = 1;
LABEL_209:
          if (v167 < 0 || !v166)
            goto LABEL_236;
          continue;
        }
        break;
      }
      v170 = (unint64_t *)&v77[v166 - 2];
      v171 = v168 - 16;
      while (1)
      {
        v172 = v166 - 1;
        v170[1] = 0;
        if (v166 - 1 <= 0)
          goto LABEL_237;
        v173 = *v170 + 1;
        *v170-- = v173;
        v174 = *(_QWORD *)(v171 + 8 * v166--);
        if (v173 < v174)
        {
          v167 = v172 - 1;
          goto LABEL_208;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)(*(double *)a2 + (double)(uint64_t)*a3);
LABEL_48:
          *a3 = (_QWORD *)v11;
          return;
        case 1:
          v207 = *(double *)a2 + *(double *)a3;
LABEL_305:
          *(double *)a3 = v207;
          return;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v235 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v235, (uint64_t)*a3);
          *a3 = v235;
          *v235 = 1;
          do
          {
            v236 = __ldaxr((unint64_t *)v12);
            v15 = --v236 == 0;
          }
          while (__stlxr(v236, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v121 = *a3;
          if (**a3 != 1)
          {
            v122 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v122, (uint64_t)*a3);
            *a3 = v122;
            *v122 = 1;
            do
            {
              v123 = __ldaxr(v121);
              v124 = v123 - 1;
            }
            while (__stlxr(v124, v121));
            if (!v124)
            {
              v125 = (void *)v121[1];
              if (v125)
              {
                v121[2] = (unint64_t)v125;
                operator delete(v125);
              }
              MEMORY[0x219A19A08](v121, 0x1080C409938AC02);
            }
          }
          v126 = (double *)(*a3)[1];
          v127 = (*a3)[2] - (_QWORD)v126;
          if (v127)
          {
            v128 = *(double *)a2;
            v129 = v127 >> 3;
            if (v129 <= 1)
              v129 = 1;
            do
            {
              *v126 = v128 + *v126;
              ++v126;
              --v129;
            }
            while (v129);
          }
          return;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v269 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v269, (uint64_t)*a3);
          *a3 = v269;
          *v269 = 1;
          do
          {
            v270 = __ldaxr((unint64_t *)v106);
            v210 = --v270 == 0;
          }
          while (__stlxr(v270, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v295 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v295, (uint64_t)*a3);
          *a3 = v295;
          *v295 = 1;
          do
          {
            v296 = __ldaxr((unint64_t *)v106);
            v109 = --v296 == 0;
          }
          while (__stlxr(v296, (unint64_t *)v106));
          goto LABEL_366;
        case 6:
          v237 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          v238 = (uint64_t)*a3;
          v239 = (unint64_t)*a3 + vcvtmd_s64_f64(*(double *)a2);
          *a3 = (_QWORD *)((unint64_t)*a3 & 0xFF00000000000000 | v239 & 0xFFFFFFFFFFFFFFLL);
          v240 = (uint64_t)v237 + *((int *)a3 + 2);
          if (v240 >= 1000000)
          {
            *a3 = (_QWORD *)((v239 + 1) & 0xFFFFFFFFFFFFFFLL | v238 & 0xFF00000000000000);
            LODWORD(v240) = v240 - 1000000;
          }
          if (v240 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          *((_DWORD *)a3 + 2) = v240;
          return;
        case 7:
          goto LABEL_423;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v305 = operator new();
          v306 = (uint64_t)*a3;
          *(_QWORD *)v305 = **a3;
          *(_QWORD *)(v305 + 8) = *(_QWORD *)(v306 + 8);
          v307 = *(_QWORD *)(v306 + 16);
          *(_QWORD *)(v305 + 16) = v307;
          if (v307)
          {
            v308 = (unsigned int *)(v307 + 8);
            do
              v309 = __ldxr(v308);
            while (__stxr(v309 + 1, v308));
          }
          v310 = *(_OWORD *)(v306 + 24);
          v311 = *(_OWORD *)(v306 + 40);
          *(_OWORD *)(v305 + 56) = *(_OWORD *)(v306 + 56);
          *(_OWORD *)(v305 + 40) = v311;
          *(_OWORD *)(v305 + 24) = v310;
          *a3 = (_QWORD *)v305;
          *(_QWORD *)v305 = 1;
          do
          {
            v312 = __ldaxr((unint64_t *)v211);
            v220 = --v312 == 0;
          }
          while (__stlxr(v312, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v175 = *a3;
          if (**a3 != 1)
          {
            v176 = (_QWORD *)operator new();
            v177 = (uint64_t)(*a3 + 1);
            *v176 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v176 + 1, v177);
            *a3 = v176;
            *v176 = 1;
            do
            {
              v178 = __ldaxr(v175);
              v179 = v178 - 1;
            }
            while (__stlxr(v179, v175));
            if (!v179)
            {
              v180 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v175);
              MEMORY[0x219A19A08](v180, 0x1030C407B73B9F7);
            }
          }
          v181 = *a3;
          v183 = (uint64_t *)(*a3)[3];
          v182 = (uint64_t *)(*a3)[4];
          if (v182 == v183)
            return;
          if (!v181[1])
            return;
          v184 = *(double *)a2;
          v185 = 1;
          do
          {
            v186 = *v183++;
            v185 *= v186;
          }
          while (v183 != v182);
          if (!v185)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v181 + 1);
          v187 = (v181[4] - v181[3]) >> 3;
          v343 = 0;
          std::vector<unsigned long>::vector(&v344, v187, &v343);
          v77 = v344;
          v188 = v345;
          break;
        default:
          goto LABEL_426;
      }
      while (2)
      {
        v189 = 0;
        v190 = (char *)v188 - (char *)v77;
        if (v190)
        {
          v191 = v190 >> 3;
          v192 = (uint64_t *)v181[6];
          if (v191 <= 1)
            v191 = 1;
          do
          {
            v194 = (uint64_t)*v77++;
            v193 = v194;
            v195 = *v192++;
            v189 += v195 * v193;
            --v191;
          }
          while (v191);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v181 + 1);
        *(double *)(*(_QWORD *)v181[1] + 8 * (v181[9] + v189)) = v184
                                                               + *(double *)(*(_QWORD *)v181[1] + 8 * (v181[9] + v189));
        v77 = v344;
        v188 = v345;
        v196 = v345 - v344;
        v197 = v196 - 1;
        if ((char *)v345 - (char *)v344 < 1)
          goto LABEL_234;
        v198 = v181[3];
        v199 = (char *)v344[v197] + 1;
        v344[v197] = v199;
        if ((unint64_t)v199 < *(_QWORD *)(v198 + 8 * v197))
        {
LABEL_233:
          v196 = 1;
LABEL_234:
          if (v197 < 0 || !v196)
            goto LABEL_236;
          continue;
        }
        break;
      }
      v200 = (unint64_t *)&v77[v196 - 2];
      v201 = v198 - 16;
      while (1)
      {
        v202 = v196 - 1;
        v200[1] = 0;
        if (v196 - 1 <= 0)
          goto LABEL_237;
        v203 = *v200 + 1;
        *v200-- = v203;
        v204 = *(_QWORD *)(v201 + 8 * v196--);
        if (v203 < v204)
        {
          v197 = v202 - 1;
          goto LABEL_233;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v18 = *(double *)a2;
          v19 = (uint64_t)*a3;
          if (**a3 != 1)
          {
            v20 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, (uint64_t)*a3);
            *a3 = v20;
            *v20 = 1;
            do
            {
              v21 = __ldaxr((unint64_t *)v19);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, (unint64_t *)v19));
            if (!v22)
            {
              if (*(char *)(v19 + 31) < 0)
                operator delete(*(void **)(v19 + 8));
              MEMORY[0x219A19A08](v19, 0x1012C404EF22A49);
            }
          }
          v23 = *(char *)(*(_QWORD *)&v18 + 31);
          if (v23 >= 0)
            v24 = (const std::string::value_type *)(*(_QWORD *)&v18 + 8);
          else
            v24 = *(const std::string::value_type **)(*(_QWORD *)&v18 + 8);
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(*(_QWORD *)&v18 + 31);
          else
            v25 = *(_QWORD *)(*(_QWORD *)&v18 + 16);
          std::string::append((std::string *)(*a3 + 1), v24, v25);
          return;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v42 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v42, (uint64_t)*a3);
          *a3 = v42;
          *v42 = 1;
          do
          {
            v43 = __ldaxr(v36);
            v39 = --v43 == 0;
          }
          while (__stlxr(v43, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v253 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v253, (uint64_t)*a3);
          *a3 = v253;
          *v253 = 1;
          do
          {
            v254 = __ldaxr((unint64_t *)v106);
            v210 = --v254 == 0;
          }
          while (__stlxr(v254, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v205 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v205, (uint64_t)*a3);
          *a3 = v205;
          *v205 = 1;
          do
          {
            v206 = __ldaxr((unint64_t *)v106);
            v109 = --v206 == 0;
          }
          while (__stlxr(v206, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v255 = operator new();
          v256 = (uint64_t)*a3;
          *(_QWORD *)v255 = **a3;
          *(_QWORD *)(v255 + 8) = *(_QWORD *)(v256 + 8);
          v257 = *(_QWORD *)(v256 + 16);
          *(_QWORD *)(v255 + 16) = v257;
          if (v257)
          {
            v258 = (unsigned int *)(v257 + 8);
            do
              v259 = __ldxr(v258);
            while (__stxr(v259 + 1, v258));
          }
          v260 = *(_OWORD *)(v256 + 24);
          v261 = *(_OWORD *)(v256 + 40);
          *(_OWORD *)(v255 + 56) = *(_OWORD *)(v256 + 56);
          *(_OWORD *)(v255 + 40) = v261;
          *(_OWORD *)(v255 + 24) = v260;
          *a3 = (_QWORD *)v255;
          *(_QWORD *)v255 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v211);
            v220 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v103 = (_QWORD *)operator new();
          v104 = (uint64_t)(*a3 + 1);
          *v103 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v103 + 1, v104);
          *a3 = v103;
          *v103 = 1;
          do
          {
            v105 = __ldaxr(v44);
            v48 = --v105 == 0;
          }
          while (__stlxr(v105, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, (uint64_t)*a3);
          *a3 = v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr((unint64_t *)v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v49 = *(double *)a2;
          v50 = *a3;
          if (**a3 != 1)
          {
            v51 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v51, (uint64_t)*a3);
            *a3 = v51;
            *v51 = 1;
            do
            {
              v52 = __ldaxr(v50);
              v53 = v52 - 1;
            }
            while (__stlxr(v53, v50));
            if (!v53)
            {
              v54 = (void *)v50[1];
              if (v54)
              {
                v50[2] = (unint64_t)v54;
                operator delete(v54);
              }
              MEMORY[0x219A19A08](v50, 0x1080C409938AC02);
            }
          }
          v55 = (uint64_t)*a3;
          turi::flexible_type_fail((*a3)[2] - (*a3)[1] == *(_QWORD *)(*(_QWORD *)&v49 + 16)
                                                        - *(_QWORD *)(*(_QWORD *)&v49 + 8));
          v56 = *(double **)(v55 + 8);
          v57 = *(_QWORD *)(v55 + 16) - (_QWORD)v56;
          if (v57)
          {
            v58 = v57 >> 3;
            v59 = *(double **)(*(_QWORD *)&v49 + 8);
            if (v58 <= 1)
              v58 = 1;
            do
            {
              v60 = *v59++;
              *v56 = v60 + *v56;
              ++v56;
              --v58;
            }
            while (v58);
          }
          return;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v265 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v265, (uint64_t)*a3);
          *a3 = v265;
          *v265 = 1;
          do
          {
            v266 = __ldaxr((unint64_t *)v106);
            v210 = --v266 == 0;
          }
          while (__stlxr(v266, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v224 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v224, (uint64_t)*a3);
          *a3 = v224;
          *v224 = 1;
          do
          {
            v225 = __ldaxr((unint64_t *)v106);
            v109 = --v225 == 0;
          }
          while (__stlxr(v225, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v275 = operator new();
          v276 = (uint64_t)*a3;
          *(_QWORD *)v275 = **a3;
          *(_QWORD *)(v275 + 8) = *(_QWORD *)(v276 + 8);
          v277 = *(_QWORD *)(v276 + 16);
          *(_QWORD *)(v275 + 16) = v277;
          if (v277)
          {
            v278 = (unsigned int *)(v277 + 8);
            do
              v279 = __ldxr(v278);
            while (__stxr(v279 + 1, v278));
          }
          v280 = *(_OWORD *)(v276 + 24);
          v281 = *(_OWORD *)(v276 + 40);
          *(_OWORD *)(v275 + 56) = *(_OWORD *)(v276 + 56);
          *(_OWORD *)(v275 + 40) = v281;
          *(_OWORD *)(v275 + 24) = v280;
          *a3 = (_QWORD *)v275;
          *(_QWORD *)v275 = 1;
          do
          {
            v282 = __ldaxr((unint64_t *)v211);
            v220 = --v282 == 0;
          }
          while (__stlxr(v282, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v132 = (_QWORD *)operator new();
          v133 = (uint64_t)(*a3 + 1);
          *v132 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v132 + 1, v133);
          *a3 = v132;
          *v132 = 1;
          do
          {
            v134 = __ldaxr(v44);
            v48 = --v134 == 0;
          }
          while (__stlxr(v134, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, (uint64_t)*a3);
          *a3 = v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v37 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v37, (uint64_t)*a3);
          *a3 = v37;
          *v37 = 1;
          do
          {
            v38 = __ldaxr(v36);
            v39 = --v38 == 0;
          }
          while (__stlxr(v38, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v208 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v208, (uint64_t)*a3);
          *a3 = v208;
          *v208 = 1;
          do
          {
            v209 = __ldaxr((unint64_t *)v106);
            v210 = --v209 == 0;
          }
          while (__stlxr(v209, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v107 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v107, (uint64_t)*a3);
          *a3 = v107;
          *v107 = 1;
          do
          {
            v108 = __ldaxr((unint64_t *)v106);
            v109 = --v108 == 0;
          }
          while (__stlxr(v108, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v212 = operator new();
          v213 = (uint64_t)*a3;
          *(_QWORD *)v212 = **a3;
          *(_QWORD *)(v212 + 8) = *(_QWORD *)(v213 + 8);
          v214 = *(_QWORD *)(v213 + 16);
          *(_QWORD *)(v212 + 16) = v214;
          if (v214)
          {
            v215 = (unsigned int *)(v214 + 8);
            do
              v216 = __ldxr(v215);
            while (__stxr(v216 + 1, v215));
          }
          v217 = *(_OWORD *)(v213 + 24);
          v218 = *(_OWORD *)(v213 + 40);
          *(_OWORD *)(v212 + 56) = *(_OWORD *)(v213 + 56);
          *(_OWORD *)(v212 + 40) = v218;
          *(_OWORD *)(v212 + 24) = v217;
          *a3 = (_QWORD *)v212;
          *(_QWORD *)v212 = 1;
          do
          {
            v219 = __ldaxr((unint64_t *)v211);
            v220 = --v219 == 0;
          }
          while (__stlxr(v219, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v45 = (_QWORD *)operator new();
          v46 = (uint64_t)(*a3 + 1);
          *v45 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v45 + 1, v46);
          *a3 = v45;
          *v45 = 1;
          do
          {
            v47 = __ldaxr(v44);
            v48 = --v47 == 0;
          }
          while (__stlxr(v47, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v30 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v30, (uint64_t)*a3);
          *a3 = v30;
          *v30 = 1;
          do
          {
            v31 = __ldaxr((unint64_t *)v12);
            v15 = --v31 == 0;
          }
          while (__stlxr(v31, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v110 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v110, (uint64_t)*a3);
          *a3 = v110;
          *v110 = 1;
          do
          {
            v111 = __ldaxr(v36);
            v39 = --v111 == 0;
          }
          while (__stlxr(v111, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v313 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v313, (uint64_t)*a3);
          *a3 = v313;
          *v313 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v106);
            v210 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, (uint64_t)*a3);
          *a3 = v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v106);
            v109 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v315 = operator new();
          v316 = (uint64_t)*a3;
          *(_QWORD *)v315 = **a3;
          *(_QWORD *)(v315 + 8) = *(_QWORD *)(v316 + 8);
          v317 = *(_QWORD *)(v316 + 16);
          *(_QWORD *)(v315 + 16) = v317;
          if (v317)
          {
            v318 = (unsigned int *)(v317 + 8);
            do
              v319 = __ldxr(v318);
            while (__stxr(v319 + 1, v318));
          }
          v320 = *(_OWORD *)(v316 + 24);
          v321 = *(_OWORD *)(v316 + 40);
          *(_OWORD *)(v315 + 56) = *(_OWORD *)(v316 + 56);
          *(_OWORD *)(v315 + 40) = v321;
          *(_OWORD *)(v315 + 24) = v320;
          *a3 = (_QWORD *)v315;
          *(_QWORD *)v315 = 1;
          do
          {
            v322 = __ldaxr((unint64_t *)v211);
            v220 = --v322 == 0;
          }
          while (__stlxr(v322, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v221 = (_QWORD *)operator new();
          v222 = (uint64_t)(*a3 + 1);
          *v221 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v221 + 1, v222);
          *a3 = v221;
          *v221 = 1;
          do
          {
            v223 = __ldaxr(v44);
            v48 = --v223 == 0;
          }
          while (__stlxr(v223, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v32 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v32, (uint64_t)*a3);
          *a3 = v32;
          *v32 = 1;
          do
          {
            v33 = __ldaxr((unint64_t *)v12);
            v15 = --v33 == 0;
          }
          while (__stlxr(v33, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v130 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v130, (uint64_t)*a3);
          *a3 = v130;
          *v130 = 1;
          do
          {
            v131 = __ldaxr(v36);
            v39 = --v131 == 0;
          }
          while (__stlxr(v131, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v323 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, (uint64_t)*a3);
          *a3 = v323;
          *v323 = 1;
          do
          {
            v324 = __ldaxr((unint64_t *)v106);
            v210 = --v324 == 0;
          }
          while (__stlxr(v324, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v273 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v273, (uint64_t)*a3);
          *a3 = v273;
          *v273 = 1;
          do
          {
            v274 = __ldaxr((unint64_t *)v106);
            v109 = --v274 == 0;
          }
          while (__stlxr(v274, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v325 = operator new();
          v326 = (uint64_t)*a3;
          *(_QWORD *)v325 = **a3;
          *(_QWORD *)(v325 + 8) = *(_QWORD *)(v326 + 8);
          v327 = *(_QWORD *)(v326 + 16);
          *(_QWORD *)(v325 + 16) = v327;
          if (v327)
          {
            v328 = (unsigned int *)(v327 + 8);
            do
              v329 = __ldxr(v328);
            while (__stxr(v329 + 1, v328));
          }
          v330 = *(_OWORD *)(v326 + 24);
          v331 = *(_OWORD *)(v326 + 40);
          *(_OWORD *)(v325 + 56) = *(_OWORD *)(v326 + 56);
          *(_OWORD *)(v325 + 40) = v331;
          *(_OWORD *)(v325 + 24) = v330;
          *a3 = (_QWORD *)v325;
          *(_QWORD *)v325 = 1;
          do
          {
            v332 = __ldaxr((unint64_t *)v211);
            v220 = --v332 == 0;
          }
          while (__stlxr(v332, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v230 = (_QWORD *)operator new();
          v231 = (uint64_t)(*a3 + 1);
          *v230 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v230 + 1, v231);
          *a3 = v230;
          *v230 = 1;
          do
          {
            v232 = __ldaxr(v44);
            v48 = --v232 == 0;
          }
          while (__stlxr(v232, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, (uint64_t)*a3);
          *a3 = v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr((unint64_t *)v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v61 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v61, (uint64_t)*a3);
          *a3 = v61;
          *v61 = 1;
          do
          {
            v62 = __ldaxr(v36);
            v39 = --v62 == 0;
          }
          while (__stlxr(v62, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v271 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v271, (uint64_t)*a3);
          *a3 = v271;
          *v271 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v106);
            v210 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v226 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v226, (uint64_t)*a3);
          *a3 = v226;
          *v226 = 1;
          do
          {
            v227 = __ldaxr((unint64_t *)v106);
            v109 = --v227 == 0;
          }
          while (__stlxr(v227, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v283 = operator new();
          v284 = (uint64_t)*a3;
          *(_QWORD *)v283 = **a3;
          *(_QWORD *)(v283 + 8) = *(_QWORD *)(v284 + 8);
          v285 = *(_QWORD *)(v284 + 16);
          *(_QWORD *)(v283 + 16) = v285;
          if (v285)
          {
            v286 = (unsigned int *)(v285 + 8);
            do
              v287 = __ldxr(v286);
            while (__stxr(v287 + 1, v286));
          }
          v288 = *(_OWORD *)(v284 + 24);
          v289 = *(_OWORD *)(v284 + 40);
          *(_OWORD *)(v283 + 56) = *(_OWORD *)(v284 + 56);
          *(_OWORD *)(v283 + 40) = v289;
          *(_OWORD *)(v283 + 24) = v288;
          *a3 = (_QWORD *)v283;
          *(_QWORD *)v283 = 1;
          do
          {
            v290 = __ldaxr((unint64_t *)v211);
            v220 = --v290 == 0;
          }
          while (__stlxr(v290, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v142 = (_QWORD *)operator new();
          v143 = (uint64_t)(*a3 + 1);
          *v142 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v142 + 1, v143);
          *a3 = v142;
          *v142 = 1;
          do
          {
            v144 = __ldaxr(v44);
            v48 = --v144 == 0;
          }
          while (__stlxr(v144, v44));
          goto LABEL_301;
        default:
          goto LABEL_426;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v34, (uint64_t)*a3);
          *a3 = v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr((unint64_t *)v12);
            v15 = --v35 == 0;
          }
          while (__stlxr(v35, (unint64_t *)v12));
          goto LABEL_281;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v135 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v135, (uint64_t)*a3);
          *a3 = v135;
          *v135 = 1;
          do
          {
            v136 = __ldaxr(v36);
            v39 = --v136 == 0;
          }
          while (__stlxr(v136, v36));
          goto LABEL_174;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v333 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v333, (uint64_t)*a3);
          *a3 = v333;
          *v333 = 1;
          do
          {
            v334 = __ldaxr((unint64_t *)v106);
            v210 = --v334 == 0;
          }
          while (__stlxr(v334, (unint64_t *)v106));
          goto LABEL_408;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v291 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v291, (uint64_t)*a3);
          *a3 = v291;
          *v291 = 1;
          do
          {
            v292 = __ldaxr((unint64_t *)v106);
            v109 = --v292 == 0;
          }
          while (__stlxr(v292, (unint64_t *)v106));
          goto LABEL_366;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v335 = operator new();
          v336 = (uint64_t)*a3;
          *(_QWORD *)v335 = **a3;
          *(_QWORD *)(v335 + 8) = *(_QWORD *)(v336 + 8);
          v337 = *(_QWORD *)(v336 + 16);
          *(_QWORD *)(v335 + 16) = v337;
          if (v337)
          {
            v338 = (unsigned int *)(v337 + 8);
            do
              v339 = __ldxr(v338);
            while (__stxr(v339 + 1, v338));
          }
          v340 = *(_OWORD *)(v336 + 24);
          v341 = *(_OWORD *)(v336 + 40);
          *(_OWORD *)(v335 + 56) = *(_OWORD *)(v336 + 56);
          *(_OWORD *)(v335 + 40) = v341;
          *(_OWORD *)(v335 + 24) = v340;
          *a3 = (_QWORD *)v335;
          *(_QWORD *)v335 = 1;
          do
          {
            v342 = __ldaxr((unint64_t *)v211);
            v220 = --v342 == 0;
          }
          while (__stlxr(v342, (unint64_t *)v211));
          goto LABEL_418;
        case 9:
          v44 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v249 = (_QWORD *)operator new();
          v250 = (uint64_t)(*a3 + 1);
          *v249 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v249 + 1, v250);
          *a3 = v249;
          *v249 = 1;
          do
          {
            v251 = __ldaxr(v44);
            v48 = --v251 == 0;
          }
          while (__stlxr(v251, v44));
LABEL_301:
          if (!v48)
            goto LABEL_423;
          v138 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v44);
          v252 = 2071181815;
          goto LABEL_421;
        default:
          goto LABEL_426;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_423;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, (uint64_t)*a3);
          *a3 = v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr((unint64_t *)v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, (unint64_t *)v12));
LABEL_281:
          if (!v15)
            goto LABEL_423;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v138 = (_QWORD *)v12;
          v139 = 0x1012C404EF22A49;
          goto LABEL_422;
        case 3:
          v36 = *a3;
          if (**a3 == 1)
            goto LABEL_423;
          v40 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v40, (uint64_t)*a3);
          *a3 = v40;
          *v40 = 1;
          do
          {
            v41 = __ldaxr(v36);
            v39 = --v41 == 0;
          }
          while (__stlxr(v41, v36));
LABEL_174:
          if (!v39)
            goto LABEL_423;
          v137 = (void *)v36[1];
          if (v137)
          {
            v36[2] = (unint64_t)v137;
            operator delete(v137);
          }
          v138 = v36;
          v139 = 0x1080C409938AC02;
          goto LABEL_422;
        case 4:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v228 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v228, (uint64_t)*a3);
          *a3 = v228;
          *v228 = 1;
          do
          {
            v229 = __ldaxr((unint64_t *)v106);
            v210 = --v229 == 0;
          }
          while (__stlxr(v229, (unint64_t *)v106));
LABEL_408:
          if (!v210)
            goto LABEL_423;
          v344 = (void **)(v106 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v344);
          goto LABEL_411;
        case 5:
          v106 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v140 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v140, (uint64_t)*a3);
          *a3 = v140;
          *v140 = 1;
          do
          {
            v141 = __ldaxr((unint64_t *)v106);
            v109 = --v141 == 0;
          }
          while (__stlxr(v141, (unint64_t *)v106));
LABEL_366:
          if (!v109)
            goto LABEL_423;
          v344 = (void **)(v106 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v344);
LABEL_411:
          v138 = (_QWORD *)v106;
          v139 = 0x1020C405E66F15BLL;
          goto LABEL_422;
        case 8:
          v211 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_423;
          v241 = operator new();
          v242 = (uint64_t)*a3;
          *(_QWORD *)v241 = **a3;
          *(_QWORD *)(v241 + 8) = *(_QWORD *)(v242 + 8);
          v243 = *(_QWORD *)(v242 + 16);
          *(_QWORD *)(v241 + 16) = v243;
          if (v243)
          {
            v244 = (unsigned int *)(v243 + 8);
            do
              v245 = __ldxr(v244);
            while (__stxr(v245 + 1, v244));
          }
          v246 = *(_OWORD *)(v242 + 24);
          v247 = *(_OWORD *)(v242 + 40);
          *(_OWORD *)(v241 + 56) = *(_OWORD *)(v242 + 56);
          *(_OWORD *)(v241 + 40) = v247;
          *(_OWORD *)(v241 + 24) = v246;
          *a3 = (_QWORD *)v241;
          *(_QWORD *)v241 = 1;
          do
          {
            v248 = __ldaxr((unint64_t *)v211);
            v220 = --v248 == 0;
          }
          while (__stlxr(v248, (unint64_t *)v211));
LABEL_418:
          if (!v220)
            goto LABEL_423;
          boost::detail::shared_count::~shared_count((unsigned int **)(v211 + 16));
          v138 = (_QWORD *)v211;
          v252 = -235920773;
LABEL_421:
          v139 = v252 | 0x1030C4000000000;
LABEL_422:
          MEMORY[0x219A19A08](v138, v139);
LABEL_423:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v63 = *(double *)a2;
          v64 = *a3;
          if (**a3 != 1)
          {
            v65 = (_QWORD *)operator new();
            v66 = (uint64_t)(*a3 + 1);
            *v65 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v65 + 1, v66);
            *a3 = v65;
            *v65 = 1;
            do
            {
              v67 = __ldaxr(v64);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v64));
            if (!v68)
            {
              v69 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v64);
              MEMORY[0x219A19A08](v69, 0x1030C407B73B9F7);
            }
          }
          v70 = (uint64_t)*a3;
          v71 = *a3 + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v71, *(_QWORD *)&v63 + 8))
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v73 = *(uint64_t **)(v70 + 24);
          v72 = *(uint64_t **)(v70 + 32);
          if (v72 == v73)
            return;
          if (!*v71)
            return;
          v74 = 1;
          do
          {
            v75 = *v73++;
            v74 *= v75;
          }
          while (v73 != v72);
          if (!v74)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v71);
          v76 = (uint64_t)(*(_QWORD *)(v70 + 32) - *(_QWORD *)(v70 + 24)) >> 3;
          v343 = 0;
          std::vector<unsigned long>::vector(&v344, v76, &v343);
          v77 = v344;
          v78 = v345;
          break;
        default:
          goto LABEL_426;
      }
      break;
    default:
LABEL_426:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v79 = (char *)v78 - (char *)v77;
    if (v79)
    {
      v80 = 0;
      v81 = v79 >> 3;
      v82 = *(uint64_t **)(*(_QWORD *)&v63 + 48);
      if (v81 <= 1)
        v81 = 1;
      v83 = v77;
      v84 = v81;
      do
      {
        v86 = (uint64_t)*v83++;
        v85 = v86;
        v87 = *v82++;
        v80 += v87 * v85;
        --v84;
      }
      while (v84);
      v88 = 0;
      v89 = *(double *)(**(_QWORD **)(*(_QWORD *)&v63 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v63 + 72) + v80));
      v90 = *(uint64_t **)(v70 + 48);
      do
      {
        v92 = (uint64_t)*v77++;
        v91 = v92;
        v93 = *v90++;
        v88 += v93 * v91;
        --v81;
      }
      while (v81);
    }
    else
    {
      v88 = 0;
      v89 = *(double *)(**(_QWORD **)(*(_QWORD *)&v63 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v63 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v71);
    *(double *)(**(_QWORD **)(v70 + 8) + 8 * (*(_QWORD *)(v70 + 72) + v88)) = v89
                                                                            + *(double *)(**(_QWORD **)(v70 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v70 + 72) + v88));
    v77 = v344;
    v78 = v345;
    v94 = v345 - v344;
    v95 = v94 - 1;
    if ((char *)v345 - (char *)v344 < 1)
      goto LABEL_124;
    v96 = *(_QWORD *)(v70 + 24);
    v97 = (char *)v344[v95] + 1;
    v344[v95] = v97;
    if ((unint64_t)v97 >= *(_QWORD *)(v96 + 8 * v95))
      break;
LABEL_123:
    v94 = 1;
LABEL_124:
    if (v95 < 0 || !v94)
      goto LABEL_236;
  }
  v98 = (unint64_t *)&v77[v94 - 2];
  v99 = v96 - 16;
  while (1)
  {
    v100 = v94 - 1;
    v98[1] = 0;
    if (v94 - 1 <= 0)
      break;
    v101 = *v98 + 1;
    *v98-- = v101;
    v102 = *(_QWORD *)(v99 + 8 * v94--);
    if (v101 < v102)
    {
      v95 = v100 - 1;
      goto LABEL_123;
    }
  }
LABEL_236:
  if (v77)
  {
LABEL_237:
    v345 = v77;
    operator delete(v77);
  }
}

void sub_218244D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933A98;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933A98;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  float v23;
  double v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  float v41;
  double result;
  std::runtime_error *exception;
  std::string *v44;
  __int128 v45;
  std::runtime_error *v46;
  std::string *v47;
  __int128 v48;
  void *__p[2];
  void *v50[2];
  __int128 v51;
  __int128 v52;
  std::string v53;
  size_t __idx;

  v5 = 0.0;
  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      v5 = *(double *)a1;
      break;
    case 2:
      v10 = *(_QWORD *)a1;
      v11 = (char **)(*(_QWORD *)a1 + 8);
      __idx = 0;
      v12 = (char *)v11;
      if (*(char *)(v10 + 31) < 0)
        v12 = *v11;
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      v13 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v50[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v10 + 31) < 0)
        v14 = *(_QWORD *)(v10 + 16);
      else
        v14 = *(unsigned __int8 *)(v10 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v44 = std::string::append(&v53, " cannot be interpreted as a float");
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50[0] = (void *)v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v23 = v13;
      v5 = v23;
      break;
    case 3:
      v6 = *(_QWORD *)a1;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v15 = *(_QWORD *)a1;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 5:
      v16 = *(_QWORD *)a1;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 6:
      v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v17 = *(_QWORD *)a1;
      v18 = *(unsigned int **)(*(_QWORD *)a1 + 16);
      __p[0] = *(void **)(*(_QWORD *)a1 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v51 = *(_OWORD *)(v17 + 40);
      v52 = v22;
      *(_OWORD *)v50 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v51 + 1))
      {
        *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
        operator delete(*((void **)&v51 + 1));
      }
      if (v50[0])
      {
        v50[1] = v50[0];
        operator delete(v50[0]);
      }
      v7 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v8 = (unint64_t *)((char *)__p[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v24 = 0.0;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v24 = (double)*(uint64_t *)a2;
      break;
    case 1:
      v24 = *(double *)a2;
      break;
    case 2:
      v29 = *(_QWORD *)a2;
      __idx = 0;
      v30 = (char *)(v29 + 8);
      if (*(char *)(v29 + 31) < 0)
        v30 = *(char **)(v29 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v30);
      v31 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v50[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v29 + 31) < 0)
        v32 = *(_QWORD *)(v29 + 16);
      else
        v32 = *(unsigned __int8 *)(v29 + 31);
      if (__idx != v32)
      {
        v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v47 = std::string::append(&v53, " cannot be interpreted as a float");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v50[0] = (void *)v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v46, (const std::string *)__p);
        __cxa_throw(v46, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v41 = v31;
      v24 = v41;
      break;
    case 3:
      v25 = *(_QWORD *)a2;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v25 + 8), *(_QWORD *)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v33 = *(_QWORD *)a2;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v33 + 8), *(uint64_t **)(v33 + 16), (uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 5:
      v34 = *(_QWORD *)a2;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v34 + 8), *(uint64_t **)(v34 + 16), (uint64_t)(*(_QWORD *)(v34 + 16) - *(_QWORD *)(v34 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 6:
      v24 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v35 = *(_QWORD *)a2;
      v36 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v36;
      if (v36)
      {
        v37 = v36 + 2;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = *(_OWORD *)(v35 + 24);
      v40 = *(_OWORD *)(v35 + 56);
      v51 = *(_OWORD *)(v35 + 40);
      v52 = v40;
      *(_OWORD *)v50 = v39;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v51 + 1))
      {
        *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
        operator delete(*((void **)&v51 + 1));
      }
      if (v50[0])
      {
        v50[1] = v50[0];
        operator delete(v50[0]);
      }
      v26 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v27 = (unint64_t *)((char *)__p[1] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  result = v5 - v24;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 1;
  *(double *)a3 = v5 - v24;
  return result;
}

void sub_21824565C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_5>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933B18;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933B18;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double result;

  result = (double)*(int *)(a1 + 8) / 1000000.0
         + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8)
         - ((double)*(int *)(a2 + 8) / 1000000.0
          + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8));
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 1;
  *(double *)a3 = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_6>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933B98;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933B98;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, _BYTE *a2@<X2>, unsigned __int8 *a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_7::operator()(unsigned __int8 *a1@<X0>, _BYTE *a2@<X1>, unsigned __int8 *a3@<X8>)
{
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  BOOL v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  double v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  double *v74;
  uint64_t v75;
  unint64_t v76;
  double *v77;
  double v78;
  _QWORD *v79;
  unint64_t v80;
  double v81;
  unint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void **v95;
  void **v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  void **v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  BOOL v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t *v130;
  _QWORD *v131;
  unint64_t v132;
  unint64_t v133;
  void *v134;
  double *v135;
  uint64_t v136;
  unint64_t v137;
  double v138;
  unint64_t *v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t v142;
  void *v143;
  double *v144;
  uint64_t v145;
  double v146;
  unint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  void *v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t *v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t *v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void **v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  unint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t *v193;
  _QWORD *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  double v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  void **v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  unint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  _QWORD *v223;
  unint64_t v224;
  double v225;
  _QWORD *v226;
  unint64_t v227;
  BOOL v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  __int128 v235;
  __int128 v236;
  unint64_t v237;
  BOOL v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  _QWORD *v244;
  unint64_t v245;
  _QWORD *v246;
  unint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  unint64_t v250;
  _QWORD *v251;
  unint64_t v252;
  _QWORD *v253;
  unint64_t v254;
  double v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int *v262;
  unsigned int v263;
  __int128 v264;
  __int128 v265;
  unint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  unint64_t v269;
  unsigned int v270;
  _QWORD *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  __int128 v278;
  __int128 v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  _QWORD *v287;
  unint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  _QWORD *v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int *v296;
  unsigned int v297;
  __int128 v298;
  __int128 v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int *v304;
  unsigned int v305;
  __int128 v306;
  __int128 v307;
  unint64_t v308;
  _QWORD *v309;
  unint64_t v310;
  _QWORD *v311;
  unint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unsigned int *v326;
  unsigned int v327;
  __int128 v328;
  __int128 v329;
  unint64_t v330;
  _QWORD *v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int *v336;
  unsigned int v337;
  __int128 v338;
  __int128 v339;
  unint64_t v340;
  _QWORD *v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int *v346;
  unsigned int v347;
  __int128 v348;
  __int128 v349;
  unint64_t v350;
  _QWORD *v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int *v356;
  unsigned int v357;
  __int128 v358;
  __int128 v359;
  unint64_t v360;
  uint64_t v361;
  void **v362;
  void **v363;

  v5 = a1[12];
  v6 = 1;
  switch(a1[12])
  {
    case 3u:
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v8 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v9 = 3;
      goto LABEL_5;
    case 4u:
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v8 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v9 = 4;
      goto LABEL_5;
    case 5u:
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v8 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v9 = 5;
LABEL_5:
      v6 = (uint64_t)(*v8 - *v7) >> v9;
      break;
    case 9u:
      v21 = *(uint64_t **)(*(_QWORD *)a1 + 24);
      v20 = *(uint64_t **)(*(_QWORD *)a1 + 32);
      if (v20 == v21)
      {
        v6 = 0;
      }
      else
      {
        v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
        if (v6)
        {
          v6 = 1;
          do
          {
            v22 = *v21++;
            v6 *= v22;
          }
          while (v21 != v20);
        }
      }
      break;
    default:
      break;
  }
  v10 = 1;
  switch(a2[12])
  {
    case 3:
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v12 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v13 = 3;
      goto LABEL_10;
    case 4:
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v12 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v13 = 4;
      goto LABEL_10;
    case 5:
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v12 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v13 = 5;
LABEL_10:
      v10 = (uint64_t)(*v12 - *v11) >> v13;
      break;
    case 9:
      v24 = *(uint64_t **)(*(_QWORD *)a2 + 24);
      v23 = *(uint64_t **)(*(_QWORD *)a2 + 32);
      if (v23 == v24)
      {
        v10 = 0;
      }
      else
      {
        v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
        if (v10)
        {
          v10 = 1;
          do
          {
            v25 = *v24++;
            v10 *= v25;
          }
          while (v24 != v23);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  a3[12] = 0;
  if (v6 != v10)
  {
    if (a3 != (unsigned __int8 *)&turi::FLEX_UNDEFINED)
    {
      *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
      v17 = byte_254FF28D4;
      a3[12] = byte_254FF28D4;
      switch(v17)
      {
        case 2:
          v18 = *(unint64_t **)a3;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
          break;
        case 3:
          v30 = *(unint64_t **)a3;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
          break;
        case 4:
          v26 = *(unint64_t **)a3;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 + 1, v26));
          break;
        case 5:
          v32 = *(unint64_t **)a3;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 + 1, v32));
          break;
        case 8:
          v34 = *(unint64_t **)a3;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 + 1, v34));
          break;
        case 9:
          v28 = *(unint64_t **)a3;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
          break;
        default:
          return;
      }
    }
    return;
  }
  if (a1 != a3)
  {
    *(_QWORD *)(a3 + 5) = *(_QWORD *)(a1 + 5);
    *(_QWORD *)a3 = *(_QWORD *)a1;
    a3[12] = v5;
    if (v5 <= 9 && ((1 << v5) & 0x33C) != 0)
    {
      v14 = *(unint64_t **)a3;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
  switch(a2[12])
  {
    case 0:
      switch(a3[12])
      {
        case 0u:
          v16 = *(_QWORD *)a3 - *(_QWORD *)a2;
          goto LABEL_79;
        case 1u:
          v225 = (double)*(uint64_t *)a2;
          goto LABEL_336;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v251 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v251, *(_QWORD *)a3);
          *(_QWORD *)a3 = v251;
          *v251 = 1;
          do
          {
            v252 = __ldaxr((unint64_t *)v36);
            v39 = --v252 == 0;
          }
          while (__stlxr(v252, (unint64_t *)v36));
          goto LABEL_312;
        case 3u:
          v130 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 != 1)
          {
            v131 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v131, *(_QWORD *)a3);
            *(_QWORD *)a3 = v131;
            *v131 = 1;
            do
            {
              v132 = __ldaxr(v130);
              v133 = v132 - 1;
            }
            while (__stlxr(v133, v130));
            if (!v133)
            {
              v134 = (void *)v130[1];
              if (v134)
              {
                v130[2] = (unint64_t)v134;
                operator delete(v134);
              }
              MEMORY[0x219A19A08](v130, 0x1080C409938AC02);
            }
          }
          v135 = *(double **)(*(_QWORD *)a3 + 8);
          v136 = *(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v135;
          if (v136)
          {
            v137 = v136 >> 3;
            v138 = (double)*(uint64_t *)a2;
            if (v137 <= 1)
              v137 = 1;
            do
            {
              *v135 = *v135 - v138;
              ++v135;
              --v137;
            }
            while (v137);
          }
          return;
        case 4u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v285, *(_QWORD *)a3);
          *(_QWORD *)a3 = v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v124);
            v228 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v124));
          goto LABEL_439;
        case 5u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v311 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v311, *(_QWORD *)a3);
          *(_QWORD *)a3 = v311;
          *v311 = 1;
          do
          {
            v312 = __ldaxr((unint64_t *)v124);
            v127 = --v312 == 0;
          }
          while (__stlxr(v312, (unint64_t *)v124));
          goto LABEL_397;
        case 6u:
          *(_QWORD *)a3 = *(_QWORD *)a3 & 0xFF00000000000000 | (*(_QWORD *)a3 - *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL;
          return;
        case 7u:
          goto LABEL_454;
        case 8u:
          v229 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v315 = operator new();
          v316 = *(_QWORD *)a3;
          *(_QWORD *)v315 = **(_QWORD **)a3;
          *(_QWORD *)(v315 + 8) = *(_QWORD *)(v316 + 8);
          v317 = *(_QWORD *)(v316 + 16);
          *(_QWORD *)(v315 + 16) = v317;
          if (v317)
          {
            v318 = (unsigned int *)(v317 + 8);
            do
              v319 = __ldxr(v318);
            while (__stxr(v319 + 1, v318));
          }
          v320 = *(_OWORD *)(v316 + 24);
          v321 = *(_OWORD *)(v316 + 40);
          *(_OWORD *)(v315 + 56) = *(_OWORD *)(v316 + 56);
          *(_OWORD *)(v315 + 40) = v321;
          *(_OWORD *)(v315 + 24) = v320;
          *(_QWORD *)a3 = v315;
          *(_QWORD *)v315 = 1;
          do
          {
            v322 = __ldaxr((unint64_t *)v229);
            v238 = --v322 == 0;
          }
          while (__stlxr(v322, (unint64_t *)v229));
          goto LABEL_449;
        case 9u:
          v163 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 != 1)
          {
            v164 = (_QWORD *)operator new();
            v165 = *(_QWORD *)a3 + 8;
            *v164 = **(_QWORD **)a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v164 + 1, v165);
            *(_QWORD *)a3 = v164;
            *v164 = 1;
            do
            {
              v166 = __ldaxr(v163);
              v167 = v166 - 1;
            }
            while (__stlxr(v167, v163));
            if (!v167)
            {
              v168 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v163);
              MEMORY[0x219A19A08](v168, 0x1030C407B73B9F7);
            }
          }
          v169 = *(uint64_t **)a3;
          v171 = *(uint64_t **)(*(_QWORD *)a3 + 24);
          v170 = *(uint64_t **)(*(_QWORD *)a3 + 32);
          if (v170 == v171)
            return;
          if (!v169[1])
            return;
          v172 = (double)*(uint64_t *)a2;
          v173 = 1;
          do
          {
            v174 = *v171++;
            v173 *= v174;
          }
          while (v171 != v170);
          if (!v173)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v169 + 1);
          v175 = (v169[4] - v169[3]) >> 3;
          v361 = 0;
          std::vector<unsigned long>::vector(&v362, v175, &v361);
          v95 = v362;
          v176 = v363;
          break;
        default:
          goto LABEL_457;
      }
      while (2)
      {
        v177 = 0;
        v178 = (char *)v176 - (char *)v95;
        if (v178)
        {
          v179 = v178 >> 3;
          v180 = (uint64_t *)v169[6];
          if (v179 <= 1)
            v179 = 1;
          do
          {
            v182 = (uint64_t)*v95++;
            v181 = v182;
            v183 = *v180++;
            v177 += v183 * v181;
            --v179;
          }
          while (v179);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v169 + 1);
        *(double *)(*(_QWORD *)v169[1] + 8 * (v169[9] + v177)) = *(double *)(*(_QWORD *)v169[1] + 8 * (v169[9] + v177))
                                                               - v172;
        v95 = v362;
        v176 = v363;
        v184 = v363 - v362;
        v185 = v184 - 1;
        if ((char *)v363 - (char *)v362 < 1)
          goto LABEL_240;
        v186 = v169[3];
        v187 = (char *)v362[v185] + 1;
        v362[v185] = v187;
        if ((unint64_t)v187 < *(_QWORD *)(v186 + 8 * v185))
        {
LABEL_239:
          v184 = 1;
LABEL_240:
          if (v185 < 0 || !v184)
            goto LABEL_267;
          continue;
        }
        break;
      }
      v188 = (unint64_t *)&v95[v184 - 2];
      v189 = v186 - 16;
      while (1)
      {
        v190 = v184 - 1;
        v188[1] = 0;
        if (v184 - 1 <= 0)
          goto LABEL_268;
        v191 = *v188 + 1;
        *v188-- = v191;
        v192 = *(_QWORD *)(v189 + 8 * v184--);
        if (v191 < v192)
        {
          v185 = v190 - 1;
          goto LABEL_239;
        }
      }
    case 1:
      switch(a3[12])
      {
        case 0u:
          v16 = (uint64_t)((double)*(uint64_t *)a3 - *(double *)a2);
LABEL_79:
          *(_QWORD *)a3 = v16;
          return;
        case 1u:
          v225 = *(double *)a2;
LABEL_336:
          *(double *)a3 = *(double *)a3 - v225;
          return;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v253 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v253, *(_QWORD *)a3);
          *(_QWORD *)a3 = v253;
          *v253 = 1;
          do
          {
            v254 = __ldaxr((unint64_t *)v36);
            v39 = --v254 == 0;
          }
          while (__stlxr(v254, (unint64_t *)v36));
          goto LABEL_312;
        case 3u:
          v139 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 != 1)
          {
            v140 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v140, *(_QWORD *)a3);
            *(_QWORD *)a3 = v140;
            *v140 = 1;
            do
            {
              v141 = __ldaxr(v139);
              v142 = v141 - 1;
            }
            while (__stlxr(v142, v139));
            if (!v142)
            {
              v143 = (void *)v139[1];
              if (v143)
              {
                v139[2] = (unint64_t)v143;
                operator delete(v143);
              }
              MEMORY[0x219A19A08](v139, 0x1080C409938AC02);
            }
          }
          v144 = *(double **)(*(_QWORD *)a3 + 8);
          v145 = *(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v144;
          if (v145)
          {
            v146 = *(double *)a2;
            v147 = v145 >> 3;
            if (v147 <= 1)
              v147 = 1;
            do
            {
              *v144 = *v144 - v146;
              ++v144;
              --v147;
            }
            while (v147);
          }
          return;
        case 4u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v287 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v287, *(_QWORD *)a3);
          *(_QWORD *)a3 = v287;
          *v287 = 1;
          do
          {
            v288 = __ldaxr((unint64_t *)v124);
            v228 = --v288 == 0;
          }
          while (__stlxr(v288, (unint64_t *)v124));
          goto LABEL_439;
        case 5u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v313 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v313, *(_QWORD *)a3);
          *(_QWORD *)a3 = v313;
          *v313 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v124);
            v127 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v124));
          goto LABEL_397;
        case 6u:
          v255 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          v256 = *(_QWORD *)a3;
          v257 = *(_QWORD *)a3 - vcvtmd_s64_f64(*(double *)a2);
          *(_QWORD *)a3 = *(_QWORD *)a3 & 0xFF00000000000000 | v257 & 0xFFFFFFFFFFFFFFLL;
          v258 = *((int *)a3 + 2) - (uint64_t)v255;
          if (v258 < 0)
          {
            *(_QWORD *)a3 = (v257 - 1) & 0xFFFFFFFFFFFFFFLL | v256 & 0xFF00000000000000;
            LODWORD(v258) = v258 + 1000000;
          }
          if (v258 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          *((_DWORD *)a3 + 2) = v258;
          return;
        case 7u:
          goto LABEL_454;
        case 8u:
          v229 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v323 = operator new();
          v324 = *(_QWORD *)a3;
          *(_QWORD *)v323 = **(_QWORD **)a3;
          *(_QWORD *)(v323 + 8) = *(_QWORD *)(v324 + 8);
          v325 = *(_QWORD *)(v324 + 16);
          *(_QWORD *)(v323 + 16) = v325;
          if (v325)
          {
            v326 = (unsigned int *)(v325 + 8);
            do
              v327 = __ldxr(v326);
            while (__stxr(v327 + 1, v326));
          }
          v328 = *(_OWORD *)(v324 + 24);
          v329 = *(_OWORD *)(v324 + 40);
          *(_OWORD *)(v323 + 56) = *(_OWORD *)(v324 + 56);
          *(_OWORD *)(v323 + 40) = v329;
          *(_OWORD *)(v323 + 24) = v328;
          *(_QWORD *)a3 = v323;
          *(_QWORD *)v323 = 1;
          do
          {
            v330 = __ldaxr((unint64_t *)v229);
            v238 = --v330 == 0;
          }
          while (__stlxr(v330, (unint64_t *)v229));
          goto LABEL_449;
        case 9u:
          v193 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 != 1)
          {
            v194 = (_QWORD *)operator new();
            v195 = *(_QWORD *)a3 + 8;
            *v194 = **(_QWORD **)a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v194 + 1, v195);
            *(_QWORD *)a3 = v194;
            *v194 = 1;
            do
            {
              v196 = __ldaxr(v193);
              v197 = v196 - 1;
            }
            while (__stlxr(v197, v193));
            if (!v197)
            {
              v198 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v193);
              MEMORY[0x219A19A08](v198, 0x1030C407B73B9F7);
            }
          }
          v199 = *(uint64_t **)a3;
          v201 = *(uint64_t **)(*(_QWORD *)a3 + 24);
          v200 = *(uint64_t **)(*(_QWORD *)a3 + 32);
          if (v200 == v201)
            return;
          if (!v199[1])
            return;
          v202 = *(double *)a2;
          v203 = 1;
          do
          {
            v204 = *v201++;
            v203 *= v204;
          }
          while (v201 != v200);
          if (!v203)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v199 + 1);
          v205 = (v199[4] - v199[3]) >> 3;
          v361 = 0;
          std::vector<unsigned long>::vector(&v362, v205, &v361);
          v95 = v362;
          v206 = v363;
          break;
        default:
          goto LABEL_457;
      }
      while (2)
      {
        v207 = 0;
        v208 = (char *)v206 - (char *)v95;
        if (v208)
        {
          v209 = v208 >> 3;
          v210 = (uint64_t *)v199[6];
          if (v209 <= 1)
            v209 = 1;
          do
          {
            v212 = (uint64_t)*v95++;
            v211 = v212;
            v213 = *v210++;
            v207 += v213 * v211;
            --v209;
          }
          while (v209);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v199 + 1);
        *(double *)(*(_QWORD *)v199[1] + 8 * (v199[9] + v207)) = *(double *)(*(_QWORD *)v199[1] + 8 * (v199[9] + v207))
                                                               - v202;
        v95 = v362;
        v206 = v363;
        v214 = v363 - v362;
        v215 = v214 - 1;
        if ((char *)v363 - (char *)v362 < 1)
          goto LABEL_265;
        v216 = v199[3];
        v217 = (char *)v362[v215] + 1;
        v362[v215] = v217;
        if ((unint64_t)v217 < *(_QWORD *)(v216 + 8 * v215))
        {
LABEL_264:
          v214 = 1;
LABEL_265:
          if (v215 < 0 || !v214)
            goto LABEL_267;
          continue;
        }
        break;
      }
      v218 = (unint64_t *)&v95[v214 - 2];
      v219 = v216 - 16;
      while (1)
      {
        v220 = v214 - 1;
        v218[1] = 0;
        if (v214 - 1 <= 0)
          goto LABEL_268;
        v221 = *v218 + 1;
        *v218-- = v221;
        v222 = *(_QWORD *)(v219 + 8 * v214--);
        if (v221 < v222)
        {
          v215 = v220 - 1;
          goto LABEL_264;
        }
      }
    case 2:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_454;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v42 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v42, *(_QWORD *)a3);
          *(_QWORD *)a3 = v42;
          *v42 = 1;
          do
          {
            v43 = __ldaxr((unint64_t *)v36);
            v39 = --v43 == 0;
          }
          while (__stlxr(v43, (unint64_t *)v36));
          goto LABEL_312;
        case 3u:
          v54 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v60 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v60, *(_QWORD *)a3);
          *(_QWORD *)a3 = v60;
          *v60 = 1;
          do
          {
            v61 = __ldaxr(v54);
            v57 = --v61 == 0;
          }
          while (__stlxr(v61, v54));
          goto LABEL_205;
        case 4u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v271 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v271, *(_QWORD *)a3);
          *(_QWORD *)a3 = v271;
          *v271 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v124);
            v228 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v124));
          goto LABEL_439;
        case 5u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v223 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v223, *(_QWORD *)a3);
          *(_QWORD *)a3 = v223;
          *v223 = 1;
          do
          {
            v224 = __ldaxr((unint64_t *)v124);
            v127 = --v224 == 0;
          }
          while (__stlxr(v224, (unint64_t *)v124));
          goto LABEL_397;
        case 8u:
          v229 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v273 = operator new();
          v274 = *(_QWORD *)a3;
          *(_QWORD *)v273 = **(_QWORD **)a3;
          *(_QWORD *)(v273 + 8) = *(_QWORD *)(v274 + 8);
          v275 = *(_QWORD *)(v274 + 16);
          *(_QWORD *)(v273 + 16) = v275;
          if (v275)
          {
            v276 = (unsigned int *)(v275 + 8);
            do
              v277 = __ldxr(v276);
            while (__stxr(v277 + 1, v276));
          }
          v278 = *(_OWORD *)(v274 + 24);
          v279 = *(_OWORD *)(v274 + 40);
          *(_OWORD *)(v273 + 56) = *(_OWORD *)(v274 + 56);
          *(_OWORD *)(v273 + 40) = v279;
          *(_OWORD *)(v273 + 24) = v278;
          *(_QWORD *)a3 = v273;
          *(_QWORD *)v273 = 1;
          do
          {
            v280 = __ldaxr((unint64_t *)v229);
            v238 = --v280 == 0;
          }
          while (__stlxr(v280, (unint64_t *)v229));
          goto LABEL_449;
        case 9u:
          v62 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v121 = (_QWORD *)operator new();
          v122 = *(_QWORD *)a3 + 8;
          *v121 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v121 + 1, v122);
          *(_QWORD *)a3 = v121;
          *v121 = 1;
          do
          {
            v123 = __ldaxr(v62);
            v66 = --v123 == 0;
          }
          while (__stlxr(v123, v62));
          goto LABEL_332;
        default:
          goto LABEL_457;
      }
    case 3:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_454;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v44 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v44, *(_QWORD *)a3);
          *(_QWORD *)a3 = v44;
          *v44 = 1;
          do
          {
            v45 = __ldaxr((unint64_t *)v36);
            v39 = --v45 == 0;
          }
          while (__stlxr(v45, (unint64_t *)v36));
          goto LABEL_312;
        case 3u:
          v67 = *(double *)a2;
          v68 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 != 1)
          {
            v69 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v69, *(_QWORD *)a3);
            *(_QWORD *)a3 = v69;
            *v69 = 1;
            do
            {
              v70 = __ldaxr(v68);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, v68));
            if (!v71)
            {
              v72 = (void *)v68[1];
              if (v72)
              {
                v68[2] = (unint64_t)v72;
                operator delete(v72);
              }
              MEMORY[0x219A19A08](v68, 0x1080C409938AC02);
            }
          }
          v73 = *(_QWORD *)a3;
          turi::flexible_type_fail(*(_QWORD *)(*(_QWORD *)a3 + 16) - *(_QWORD *)(*(_QWORD *)a3 + 8) == *(_QWORD *)(*(_QWORD *)&v67 + 16) - *(_QWORD *)(*(_QWORD *)&v67 + 8));
          v74 = *(double **)(v73 + 8);
          v75 = *(_QWORD *)(v73 + 16) - (_QWORD)v74;
          if (v75)
          {
            v76 = v75 >> 3;
            v77 = *(double **)(*(_QWORD *)&v67 + 8);
            if (v76 <= 1)
              v76 = 1;
            do
            {
              v78 = *v77++;
              *v74 = *v74 - v78;
              ++v74;
              --v76;
            }
            while (v76);
          }
          return;
        case 4u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v283 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v283, *(_QWORD *)a3);
          *(_QWORD *)a3 = v283;
          *v283 = 1;
          do
          {
            v284 = __ldaxr((unint64_t *)v124);
            v228 = --v284 == 0;
          }
          while (__stlxr(v284, (unint64_t *)v124));
          goto LABEL_439;
        case 5u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v242 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v242, *(_QWORD *)a3);
          *(_QWORD *)a3 = v242;
          *v242 = 1;
          do
          {
            v243 = __ldaxr((unint64_t *)v124);
            v127 = --v243 == 0;
          }
          while (__stlxr(v243, (unint64_t *)v124));
          goto LABEL_397;
        case 8u:
          v229 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v293 = operator new();
          v294 = *(_QWORD *)a3;
          *(_QWORD *)v293 = **(_QWORD **)a3;
          *(_QWORD *)(v293 + 8) = *(_QWORD *)(v294 + 8);
          v295 = *(_QWORD *)(v294 + 16);
          *(_QWORD *)(v293 + 16) = v295;
          if (v295)
          {
            v296 = (unsigned int *)(v295 + 8);
            do
              v297 = __ldxr(v296);
            while (__stxr(v297 + 1, v296));
          }
          v298 = *(_OWORD *)(v294 + 24);
          v299 = *(_OWORD *)(v294 + 40);
          *(_OWORD *)(v293 + 56) = *(_OWORD *)(v294 + 56);
          *(_OWORD *)(v293 + 40) = v299;
          *(_OWORD *)(v293 + 24) = v298;
          *(_QWORD *)a3 = v293;
          *(_QWORD *)v293 = 1;
          do
          {
            v300 = __ldaxr((unint64_t *)v229);
            v238 = --v300 == 0;
          }
          while (__stlxr(v300, (unint64_t *)v229));
          goto LABEL_449;
        case 9u:
          v62 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v150 = (_QWORD *)operator new();
          v151 = *(_QWORD *)a3 + 8;
          *v150 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v150 + 1, v151);
          *(_QWORD *)a3 = v150;
          *v150 = 1;
          do
          {
            v152 = __ldaxr(v62);
            v66 = --v152 == 0;
          }
          while (__stlxr(v152, v62));
          goto LABEL_332;
        default:
          goto LABEL_457;
      }
    case 4:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_454;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v37 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v37, *(_QWORD *)a3);
          *(_QWORD *)a3 = v37;
          *v37 = 1;
          do
          {
            v38 = __ldaxr((unint64_t *)v36);
            v39 = --v38 == 0;
          }
          while (__stlxr(v38, (unint64_t *)v36));
          goto LABEL_312;
        case 3u:
          v54 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *(_QWORD *)a3);
          *(_QWORD *)a3 = v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v54);
            v57 = --v56 == 0;
          }
          while (__stlxr(v56, v54));
          goto LABEL_205;
        case 4u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v226 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v226, *(_QWORD *)a3);
          *(_QWORD *)a3 = v226;
          *v226 = 1;
          do
          {
            v227 = __ldaxr((unint64_t *)v124);
            v228 = --v227 == 0;
          }
          while (__stlxr(v227, (unint64_t *)v124));
          goto LABEL_439;
        case 5u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v125 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v125, *(_QWORD *)a3);
          *(_QWORD *)a3 = v125;
          *v125 = 1;
          do
          {
            v126 = __ldaxr((unint64_t *)v124);
            v127 = --v126 == 0;
          }
          while (__stlxr(v126, (unint64_t *)v124));
          goto LABEL_397;
        case 8u:
          v229 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v230 = operator new();
          v231 = *(_QWORD *)a3;
          *(_QWORD *)v230 = **(_QWORD **)a3;
          *(_QWORD *)(v230 + 8) = *(_QWORD *)(v231 + 8);
          v232 = *(_QWORD *)(v231 + 16);
          *(_QWORD *)(v230 + 16) = v232;
          if (v232)
          {
            v233 = (unsigned int *)(v232 + 8);
            do
              v234 = __ldxr(v233);
            while (__stxr(v234 + 1, v233));
          }
          v235 = *(_OWORD *)(v231 + 24);
          v236 = *(_OWORD *)(v231 + 40);
          *(_OWORD *)(v230 + 56) = *(_OWORD *)(v231 + 56);
          *(_OWORD *)(v230 + 40) = v236;
          *(_OWORD *)(v230 + 24) = v235;
          *(_QWORD *)a3 = v230;
          *(_QWORD *)v230 = 1;
          do
          {
            v237 = __ldaxr((unint64_t *)v229);
            v238 = --v237 == 0;
          }
          while (__stlxr(v237, (unint64_t *)v229));
          goto LABEL_449;
        case 9u:
          v62 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v63 = (_QWORD *)operator new();
          v64 = *(_QWORD *)a3 + 8;
          *v63 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v63 + 1, v64);
          *(_QWORD *)a3 = v63;
          *v63 = 1;
          do
          {
            v65 = __ldaxr(v62);
            v66 = --v65 == 0;
          }
          while (__stlxr(v65, v62));
          goto LABEL_332;
        default:
          goto LABEL_457;
      }
    case 5:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_454;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v48 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v48, *(_QWORD *)a3);
          *(_QWORD *)a3 = v48;
          *v48 = 1;
          do
          {
            v49 = __ldaxr((unint64_t *)v36);
            v39 = --v49 == 0;
          }
          while (__stlxr(v49, (unint64_t *)v36));
          goto LABEL_312;
        case 3u:
          v54 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v128 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v128, *(_QWORD *)a3);
          *(_QWORD *)a3 = v128;
          *v128 = 1;
          do
          {
            v129 = __ldaxr(v54);
            v57 = --v129 == 0;
          }
          while (__stlxr(v129, v54));
          goto LABEL_205;
        case 4u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v331 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v331, *(_QWORD *)a3);
          *(_QWORD *)a3 = v331;
          *v331 = 1;
          do
          {
            v332 = __ldaxr((unint64_t *)v124);
            v228 = --v332 == 0;
          }
          while (__stlxr(v332, (unint64_t *)v124));
          goto LABEL_439;
        case 5u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v281 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v281, *(_QWORD *)a3);
          *(_QWORD *)a3 = v281;
          *v281 = 1;
          do
          {
            v282 = __ldaxr((unint64_t *)v124);
            v127 = --v282 == 0;
          }
          while (__stlxr(v282, (unint64_t *)v124));
          goto LABEL_397;
        case 8u:
          v229 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v333 = operator new();
          v334 = *(_QWORD *)a3;
          *(_QWORD *)v333 = **(_QWORD **)a3;
          *(_QWORD *)(v333 + 8) = *(_QWORD *)(v334 + 8);
          v335 = *(_QWORD *)(v334 + 16);
          *(_QWORD *)(v333 + 16) = v335;
          if (v335)
          {
            v336 = (unsigned int *)(v335 + 8);
            do
              v337 = __ldxr(v336);
            while (__stxr(v337 + 1, v336));
          }
          v338 = *(_OWORD *)(v334 + 24);
          v339 = *(_OWORD *)(v334 + 40);
          *(_OWORD *)(v333 + 56) = *(_OWORD *)(v334 + 56);
          *(_OWORD *)(v333 + 40) = v339;
          *(_OWORD *)(v333 + 24) = v338;
          *(_QWORD *)a3 = v333;
          *(_QWORD *)v333 = 1;
          do
          {
            v340 = __ldaxr((unint64_t *)v229);
            v238 = --v340 == 0;
          }
          while (__stlxr(v340, (unint64_t *)v229));
          goto LABEL_449;
        case 9u:
          v62 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v239 = (_QWORD *)operator new();
          v240 = *(_QWORD *)a3 + 8;
          *v239 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v239 + 1, v240);
          *(_QWORD *)a3 = v239;
          *v239 = 1;
          do
          {
            v241 = __ldaxr(v62);
            v66 = --v241 == 0;
          }
          while (__stlxr(v241, v62));
          goto LABEL_332;
        default:
          goto LABEL_457;
      }
    case 6:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_454;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v50 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v50, *(_QWORD *)a3);
          *(_QWORD *)a3 = v50;
          *v50 = 1;
          do
          {
            v51 = __ldaxr((unint64_t *)v36);
            v39 = --v51 == 0;
          }
          while (__stlxr(v51, (unint64_t *)v36));
          goto LABEL_312;
        case 3u:
          v54 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v148 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v148, *(_QWORD *)a3);
          *(_QWORD *)a3 = v148;
          *v148 = 1;
          do
          {
            v149 = __ldaxr(v54);
            v57 = --v149 == 0;
          }
          while (__stlxr(v149, v54));
          goto LABEL_205;
        case 4u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v341 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v341, *(_QWORD *)a3);
          *(_QWORD *)a3 = v341;
          *v341 = 1;
          do
          {
            v342 = __ldaxr((unint64_t *)v124);
            v228 = --v342 == 0;
          }
          while (__stlxr(v342, (unint64_t *)v124));
          goto LABEL_439;
        case 5u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v291 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v291, *(_QWORD *)a3);
          *(_QWORD *)a3 = v291;
          *v291 = 1;
          do
          {
            v292 = __ldaxr((unint64_t *)v124);
            v127 = --v292 == 0;
          }
          while (__stlxr(v292, (unint64_t *)v124));
          goto LABEL_397;
        case 8u:
          v229 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v343 = operator new();
          v344 = *(_QWORD *)a3;
          *(_QWORD *)v343 = **(_QWORD **)a3;
          *(_QWORD *)(v343 + 8) = *(_QWORD *)(v344 + 8);
          v345 = *(_QWORD *)(v344 + 16);
          *(_QWORD *)(v343 + 16) = v345;
          if (v345)
          {
            v346 = (unsigned int *)(v345 + 8);
            do
              v347 = __ldxr(v346);
            while (__stxr(v347 + 1, v346));
          }
          v348 = *(_OWORD *)(v344 + 24);
          v349 = *(_OWORD *)(v344 + 40);
          *(_OWORD *)(v343 + 56) = *(_OWORD *)(v344 + 56);
          *(_OWORD *)(v343 + 40) = v349;
          *(_OWORD *)(v343 + 24) = v348;
          *(_QWORD *)a3 = v343;
          *(_QWORD *)v343 = 1;
          do
          {
            v350 = __ldaxr((unint64_t *)v229);
            v238 = --v350 == 0;
          }
          while (__stlxr(v350, (unint64_t *)v229));
          goto LABEL_449;
        case 9u:
          v62 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v248 = (_QWORD *)operator new();
          v249 = *(_QWORD *)a3 + 8;
          *v248 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v248 + 1, v249);
          *(_QWORD *)a3 = v248;
          *v248 = 1;
          do
          {
            v250 = __ldaxr(v62);
            v66 = --v250 == 0;
          }
          while (__stlxr(v250, v62));
          goto LABEL_332;
        default:
          goto LABEL_457;
      }
    case 7:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_454;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v46 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v46, *(_QWORD *)a3);
          *(_QWORD *)a3 = v46;
          *v46 = 1;
          do
          {
            v47 = __ldaxr((unint64_t *)v36);
            v39 = --v47 == 0;
          }
          while (__stlxr(v47, (unint64_t *)v36));
          goto LABEL_312;
        case 3u:
          v54 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v79 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v79, *(_QWORD *)a3);
          *(_QWORD *)a3 = v79;
          *v79 = 1;
          do
          {
            v80 = __ldaxr(v54);
            v57 = --v80 == 0;
          }
          while (__stlxr(v80, v54));
          goto LABEL_205;
        case 4u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v289 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v289, *(_QWORD *)a3);
          *(_QWORD *)a3 = v289;
          *v289 = 1;
          do
          {
            v290 = __ldaxr((unint64_t *)v124);
            v228 = --v290 == 0;
          }
          while (__stlxr(v290, (unint64_t *)v124));
          goto LABEL_439;
        case 5u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v244 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v244, *(_QWORD *)a3);
          *(_QWORD *)a3 = v244;
          *v244 = 1;
          do
          {
            v245 = __ldaxr((unint64_t *)v124);
            v127 = --v245 == 0;
          }
          while (__stlxr(v245, (unint64_t *)v124));
          goto LABEL_397;
        case 8u:
          v229 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v301 = operator new();
          v302 = *(_QWORD *)a3;
          *(_QWORD *)v301 = **(_QWORD **)a3;
          *(_QWORD *)(v301 + 8) = *(_QWORD *)(v302 + 8);
          v303 = *(_QWORD *)(v302 + 16);
          *(_QWORD *)(v301 + 16) = v303;
          if (v303)
          {
            v304 = (unsigned int *)(v303 + 8);
            do
              v305 = __ldxr(v304);
            while (__stxr(v305 + 1, v304));
          }
          v306 = *(_OWORD *)(v302 + 24);
          v307 = *(_OWORD *)(v302 + 40);
          *(_OWORD *)(v301 + 56) = *(_OWORD *)(v302 + 56);
          *(_OWORD *)(v301 + 40) = v307;
          *(_OWORD *)(v301 + 24) = v306;
          *(_QWORD *)a3 = v301;
          *(_QWORD *)v301 = 1;
          do
          {
            v308 = __ldaxr((unint64_t *)v229);
            v238 = --v308 == 0;
          }
          while (__stlxr(v308, (unint64_t *)v229));
          goto LABEL_449;
        case 9u:
          v62 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v160 = (_QWORD *)operator new();
          v161 = *(_QWORD *)a3 + 8;
          *v160 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v160 + 1, v161);
          *(_QWORD *)a3 = v160;
          *v160 = 1;
          do
          {
            v162 = __ldaxr(v62);
            v66 = --v162 == 0;
          }
          while (__stlxr(v162, v62));
          goto LABEL_332;
        default:
          goto LABEL_457;
      }
    case 8:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_454;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v52 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v52, *(_QWORD *)a3);
          *(_QWORD *)a3 = v52;
          *v52 = 1;
          do
          {
            v53 = __ldaxr((unint64_t *)v36);
            v39 = --v53 == 0;
          }
          while (__stlxr(v53, (unint64_t *)v36));
          goto LABEL_312;
        case 3u:
          v54 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v153 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v153, *(_QWORD *)a3);
          *(_QWORD *)a3 = v153;
          *v153 = 1;
          do
          {
            v154 = __ldaxr(v54);
            v57 = --v154 == 0;
          }
          while (__stlxr(v154, v54));
          goto LABEL_205;
        case 4u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v351 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v351, *(_QWORD *)a3);
          *(_QWORD *)a3 = v351;
          *v351 = 1;
          do
          {
            v352 = __ldaxr((unint64_t *)v124);
            v228 = --v352 == 0;
          }
          while (__stlxr(v352, (unint64_t *)v124));
          goto LABEL_439;
        case 5u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v309 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v309, *(_QWORD *)a3);
          *(_QWORD *)a3 = v309;
          *v309 = 1;
          do
          {
            v310 = __ldaxr((unint64_t *)v124);
            v127 = --v310 == 0;
          }
          while (__stlxr(v310, (unint64_t *)v124));
          goto LABEL_397;
        case 8u:
          v229 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v353 = operator new();
          v354 = *(_QWORD *)a3;
          *(_QWORD *)v353 = **(_QWORD **)a3;
          *(_QWORD *)(v353 + 8) = *(_QWORD *)(v354 + 8);
          v355 = *(_QWORD *)(v354 + 16);
          *(_QWORD *)(v353 + 16) = v355;
          if (v355)
          {
            v356 = (unsigned int *)(v355 + 8);
            do
              v357 = __ldxr(v356);
            while (__stxr(v357 + 1, v356));
          }
          v358 = *(_OWORD *)(v354 + 24);
          v359 = *(_OWORD *)(v354 + 40);
          *(_OWORD *)(v353 + 56) = *(_OWORD *)(v354 + 56);
          *(_OWORD *)(v353 + 40) = v359;
          *(_OWORD *)(v353 + 24) = v358;
          *(_QWORD *)a3 = v353;
          *(_QWORD *)v353 = 1;
          do
          {
            v360 = __ldaxr((unint64_t *)v229);
            v238 = --v360 == 0;
          }
          while (__stlxr(v360, (unint64_t *)v229));
          goto LABEL_449;
        case 9u:
          v62 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v267 = (_QWORD *)operator new();
          v268 = *(_QWORD *)a3 + 8;
          *v267 = **(_QWORD **)a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v267 + 1, v268);
          *(_QWORD *)a3 = v267;
          *v267 = 1;
          do
          {
            v269 = __ldaxr(v62);
            v66 = --v269 == 0;
          }
          while (__stlxr(v269, v62));
LABEL_332:
          if (!v66)
            goto LABEL_454;
          v156 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v62);
          v270 = 2071181815;
          goto LABEL_452;
        default:
          goto LABEL_457;
      }
    case 9:
      switch(a3[12])
      {
        case 0u:
        case 1u:
        case 6u:
        case 7u:
          goto LABEL_454;
        case 2u:
          v36 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v40 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v40, *(_QWORD *)a3);
          *(_QWORD *)a3 = v40;
          *v40 = 1;
          do
          {
            v41 = __ldaxr((unint64_t *)v36);
            v39 = --v41 == 0;
          }
          while (__stlxr(v41, (unint64_t *)v36));
LABEL_312:
          if (!v39)
            goto LABEL_454;
          if (*(char *)(v36 + 31) < 0)
            operator delete(*(void **)(v36 + 8));
          v156 = (_QWORD *)v36;
          v157 = 0x1012C404EF22A49;
          goto LABEL_453;
        case 3u:
          v54 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v58 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v58, *(_QWORD *)a3);
          *(_QWORD *)a3 = v58;
          *v58 = 1;
          do
          {
            v59 = __ldaxr(v54);
            v57 = --v59 == 0;
          }
          while (__stlxr(v59, v54));
LABEL_205:
          if (!v57)
            goto LABEL_454;
          v155 = (void *)v54[1];
          if (v155)
          {
            v54[2] = (unint64_t)v155;
            operator delete(v155);
          }
          v156 = v54;
          v157 = 0x1080C409938AC02;
          goto LABEL_453;
        case 4u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v246 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v246, *(_QWORD *)a3);
          *(_QWORD *)a3 = v246;
          *v246 = 1;
          do
          {
            v247 = __ldaxr((unint64_t *)v124);
            v228 = --v247 == 0;
          }
          while (__stlxr(v247, (unint64_t *)v124));
LABEL_439:
          if (!v228)
            goto LABEL_454;
          v362 = (void **)(v124 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v362);
          goto LABEL_442;
        case 5u:
          v124 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v158 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v158, *(_QWORD *)a3);
          *(_QWORD *)a3 = v158;
          *v158 = 1;
          do
          {
            v159 = __ldaxr((unint64_t *)v124);
            v127 = --v159 == 0;
          }
          while (__stlxr(v159, (unint64_t *)v124));
LABEL_397:
          if (!v127)
            goto LABEL_454;
          v362 = (void **)(v124 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v362);
LABEL_442:
          v156 = (_QWORD *)v124;
          v157 = 0x1020C405E66F15BLL;
          goto LABEL_453;
        case 8u:
          v229 = *(_QWORD *)a3;
          if (**(_QWORD **)a3 == 1)
            goto LABEL_454;
          v259 = operator new();
          v260 = *(_QWORD *)a3;
          *(_QWORD *)v259 = **(_QWORD **)a3;
          *(_QWORD *)(v259 + 8) = *(_QWORD *)(v260 + 8);
          v261 = *(_QWORD *)(v260 + 16);
          *(_QWORD *)(v259 + 16) = v261;
          if (v261)
          {
            v262 = (unsigned int *)(v261 + 8);
            do
              v263 = __ldxr(v262);
            while (__stxr(v263 + 1, v262));
          }
          v264 = *(_OWORD *)(v260 + 24);
          v265 = *(_OWORD *)(v260 + 40);
          *(_OWORD *)(v259 + 56) = *(_OWORD *)(v260 + 56);
          *(_OWORD *)(v259 + 40) = v265;
          *(_OWORD *)(v259 + 24) = v264;
          *(_QWORD *)a3 = v259;
          *(_QWORD *)v259 = 1;
          do
          {
            v266 = __ldaxr((unint64_t *)v229);
            v238 = --v266 == 0;
          }
          while (__stlxr(v266, (unint64_t *)v229));
LABEL_449:
          if (!v238)
            goto LABEL_454;
          boost::detail::shared_count::~shared_count((unsigned int **)(v229 + 16));
          v156 = (_QWORD *)v229;
          v270 = -235920773;
LABEL_452:
          v157 = v270 | 0x1030C4000000000;
LABEL_453:
          MEMORY[0x219A19A08](v156, v157);
LABEL_454:
          turi::flexible_type_fail(0);
          return;
        case 9u:
          v81 = *(double *)a2;
          v82 = *(unint64_t **)a3;
          if (**(_QWORD **)a3 != 1)
          {
            v83 = (_QWORD *)operator new();
            v84 = *(_QWORD *)a3 + 8;
            *v83 = **(_QWORD **)a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v83 + 1, v84);
            *(_QWORD *)a3 = v83;
            *v83 = 1;
            do
            {
              v85 = __ldaxr(v82);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, v82));
            if (!v86)
            {
              v87 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v82);
              MEMORY[0x219A19A08](v87, 0x1030C407B73B9F7);
            }
          }
          v88 = *(_QWORD *)a3;
          v89 = (uint64_t *)(*(_QWORD *)a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v89, *(_QWORD *)&v81 + 8))
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v91 = *(uint64_t **)(v88 + 24);
          v90 = *(uint64_t **)(v88 + 32);
          if (v90 == v91)
            return;
          if (!*v89)
            return;
          v92 = 1;
          do
          {
            v93 = *v91++;
            v92 *= v93;
          }
          while (v91 != v90);
          if (!v92)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v89);
          v94 = (uint64_t)(*(_QWORD *)(v88 + 32) - *(_QWORD *)(v88 + 24)) >> 3;
          v361 = 0;
          std::vector<unsigned long>::vector(&v362, v94, &v361);
          v95 = v362;
          v96 = v363;
          break;
        default:
          goto LABEL_457;
      }
      break;
    default:
LABEL_457:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v97 = (char *)v96 - (char *)v95;
    if (v97)
    {
      v98 = 0;
      v99 = v97 >> 3;
      v100 = *(uint64_t **)(*(_QWORD *)&v81 + 48);
      if (v99 <= 1)
        v99 = 1;
      v101 = v95;
      v102 = v99;
      do
      {
        v104 = (uint64_t)*v101++;
        v103 = v104;
        v105 = *v100++;
        v98 += v105 * v103;
        --v102;
      }
      while (v102);
      v106 = 0;
      v107 = *(double *)(**(_QWORD **)(*(_QWORD *)&v81 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v81 + 72) + v98));
      v108 = *(uint64_t **)(v88 + 48);
      do
      {
        v110 = (uint64_t)*v95++;
        v109 = v110;
        v111 = *v108++;
        v106 += v111 * v109;
        --v99;
      }
      while (v99);
    }
    else
    {
      v106 = 0;
      v107 = *(double *)(**(_QWORD **)(*(_QWORD *)&v81 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v81 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v89);
    *(double *)(**(_QWORD **)(v88 + 8) + 8 * (*(_QWORD *)(v88 + 72) + v106)) = *(double *)(**(_QWORD **)(v88 + 8)
                                                                                         + 8
                                                                                         * (*(_QWORD *)(v88 + 72) + v106))
                                                                             - v107;
    v95 = v362;
    v96 = v363;
    v112 = v363 - v362;
    v113 = v112 - 1;
    if ((char *)v363 - (char *)v362 < 1)
      goto LABEL_155;
    v114 = *(_QWORD *)(v88 + 24);
    v115 = (char *)v362[v113] + 1;
    v362[v113] = v115;
    if ((unint64_t)v115 >= *(_QWORD *)(v114 + 8 * v113))
      break;
LABEL_154:
    v112 = 1;
LABEL_155:
    if (v113 < 0 || !v112)
      goto LABEL_267;
  }
  v116 = (unint64_t *)&v95[v112 - 2];
  v117 = v114 - 16;
  while (1)
  {
    v118 = v112 - 1;
    v116[1] = 0;
    if (v112 - 1 <= 0)
      break;
    v119 = *v116 + 1;
    *v116-- = v119;
    v120 = *(_QWORD *)(v117 + 8 * v112--);
    if (v119 < v120)
    {
      v113 = v118 - 1;
      goto LABEL_154;
    }
  }
LABEL_267:
  if (v95)
  {
LABEL_268:
    v363 = v95;
    operator delete(v95);
  }
}

void sub_218247BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933C18;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933C18;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD **a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_8::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  double v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  _QWORD *v55;
  unint64_t v56;
  double v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  void **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t *v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  void *v110;
  double *v111;
  uint64_t v112;
  unint64_t v113;
  double v114;
  unint64_t *v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  void *v119;
  double *v120;
  uint64_t v121;
  double v122;
  unint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  void *v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void **v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  unint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void **v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  unint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  double v201;
  _QWORD *v202;
  unint64_t v203;
  BOOL v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int *v209;
  unsigned int v210;
  __int128 v211;
  __int128 v212;
  unint64_t v213;
  BOOL v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  unint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  double v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int *v238;
  unsigned int v239;
  __int128 v240;
  __int128 v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  _QWORD *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  __int128 v254;
  __int128 v255;
  unint64_t v256;
  _QWORD *v257;
  unint64_t v258;
  _QWORD *v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int *v272;
  unsigned int v273;
  __int128 v274;
  __int128 v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int *v280;
  unsigned int v281;
  __int128 v282;
  __int128 v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  _QWORD *v287;
  unint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int *v294;
  unsigned int v295;
  __int128 v296;
  __int128 v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  __int128 v304;
  __int128 v305;
  unint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int *v312;
  unsigned int v313;
  __int128 v314;
  __int128 v315;
  unint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int *v322;
  unsigned int v323;
  __int128 v324;
  __int128 v325;
  unint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  __int128 v334;
  __int128 v335;
  unint64_t v336;
  uint64_t v337;
  void **v338;
  void **v339;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((_QWORD **)a1 != a3)
  {
    *(_QWORD **)((char *)a3 + 5) = *(_QWORD **)(a1 + 5);
    *a3 = *(_QWORD **)a1;
    v5 = *(unsigned __int8 *)(a1 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = *a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)*a3 - *(_QWORD *)a2;
          goto LABEL_38;
        case 1:
          v201 = (double)*(uint64_t *)a2;
          goto LABEL_295;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v227 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v227, (uint64_t)*a3);
          *a3 = v227;
          *v227 = 1;
          do
          {
            v228 = __ldaxr((unint64_t *)v12);
            v15 = --v228 == 0;
          }
          while (__stlxr(v228, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v106 = *a3;
          if (**a3 != 1)
          {
            v107 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v107, (uint64_t)*a3);
            *a3 = v107;
            *v107 = 1;
            do
            {
              v108 = __ldaxr(v106);
              v109 = v108 - 1;
            }
            while (__stlxr(v109, v106));
            if (!v109)
            {
              v110 = (void *)v106[1];
              if (v110)
              {
                v106[2] = (unint64_t)v110;
                operator delete(v110);
              }
              MEMORY[0x219A19A08](v106, 0x1080C409938AC02);
            }
          }
          v111 = (double *)(*a3)[1];
          v112 = (*a3)[2] - (_QWORD)v111;
          if (v112)
          {
            v113 = v112 >> 3;
            v114 = (double)*(uint64_t *)a2;
            if (v113 <= 1)
              v113 = 1;
            do
            {
              *v111 = *v111 - v114;
              ++v111;
              --v113;
            }
            while (v113);
          }
          return;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v261 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v261, (uint64_t)*a3);
          *a3 = v261;
          *v261 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v100);
            v204 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v287 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v287, (uint64_t)*a3);
          *a3 = v287;
          *v287 = 1;
          do
          {
            v288 = __ldaxr((unint64_t *)v100);
            v103 = --v288 == 0;
          }
          while (__stlxr(v288, (unint64_t *)v100));
          goto LABEL_356;
        case 6:
          *a3 = (_QWORD *)((unint64_t)*a3 & 0xFF00000000000000 | ((unint64_t)*a3 - *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL);
          return;
        case 7:
          goto LABEL_413;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v291 = operator new();
          v292 = (uint64_t)*a3;
          *(_QWORD *)v291 = **a3;
          *(_QWORD *)(v291 + 8) = *(_QWORD *)(v292 + 8);
          v293 = *(_QWORD *)(v292 + 16);
          *(_QWORD *)(v291 + 16) = v293;
          if (v293)
          {
            v294 = (unsigned int *)(v293 + 8);
            do
              v295 = __ldxr(v294);
            while (__stxr(v295 + 1, v294));
          }
          v296 = *(_OWORD *)(v292 + 24);
          v297 = *(_OWORD *)(v292 + 40);
          *(_OWORD *)(v291 + 56) = *(_OWORD *)(v292 + 56);
          *(_OWORD *)(v291 + 40) = v297;
          *(_OWORD *)(v291 + 24) = v296;
          *a3 = (_QWORD *)v291;
          *(_QWORD *)v291 = 1;
          do
          {
            v298 = __ldaxr((unint64_t *)v205);
            v214 = --v298 == 0;
          }
          while (__stlxr(v298, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v139 = *a3;
          if (**a3 != 1)
          {
            v140 = (_QWORD *)operator new();
            v141 = (uint64_t)(*a3 + 1);
            *v140 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v140 + 1, v141);
            *a3 = v140;
            *v140 = 1;
            do
            {
              v142 = __ldaxr(v139);
              v143 = v142 - 1;
            }
            while (__stlxr(v143, v139));
            if (!v143)
            {
              v144 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v139);
              MEMORY[0x219A19A08](v144, 0x1030C407B73B9F7);
            }
          }
          v145 = *a3;
          v147 = (uint64_t *)(*a3)[3];
          v146 = (uint64_t *)(*a3)[4];
          if (v146 == v147)
            return;
          if (!v145[1])
            return;
          v148 = (double)*(uint64_t *)a2;
          v149 = 1;
          do
          {
            v150 = *v147++;
            v149 *= v150;
          }
          while (v147 != v146);
          if (!v149)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v145 + 1);
          v151 = (v145[4] - v145[3]) >> 3;
          v337 = 0;
          std::vector<unsigned long>::vector(&v338, v151, &v337);
          v71 = v338;
          v152 = v339;
          break;
        default:
          goto LABEL_416;
      }
      while (2)
      {
        v153 = 0;
        v154 = (char *)v152 - (char *)v71;
        if (v154)
        {
          v155 = v154 >> 3;
          v156 = (uint64_t *)v145[6];
          if (v155 <= 1)
            v155 = 1;
          do
          {
            v158 = (uint64_t)*v71++;
            v157 = v158;
            v159 = *v156++;
            v153 += v159 * v157;
            --v155;
          }
          while (v155);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v145 + 1);
        *(double *)(*(_QWORD *)v145[1] + 8 * (v145[9] + v153)) = *(double *)(*(_QWORD *)v145[1] + 8 * (v145[9] + v153))
                                                               - v148;
        v71 = v338;
        v152 = v339;
        v160 = v339 - v338;
        v161 = v160 - 1;
        if ((char *)v339 - (char *)v338 < 1)
          goto LABEL_199;
        v162 = v145[3];
        v163 = (char *)v338[v161] + 1;
        v338[v161] = v163;
        if ((unint64_t)v163 < *(_QWORD *)(v162 + 8 * v161))
        {
LABEL_198:
          v160 = 1;
LABEL_199:
          if (v161 < 0 || !v160)
            goto LABEL_226;
          continue;
        }
        break;
      }
      v164 = (unint64_t *)&v71[v160 - 2];
      v165 = v162 - 16;
      while (1)
      {
        v166 = v160 - 1;
        v164[1] = 0;
        if (v160 - 1 <= 0)
          goto LABEL_227;
        v167 = *v164 + 1;
        *v164-- = v167;
        v168 = *(_QWORD *)(v165 + 8 * v160--);
        if (v167 < v168)
        {
          v161 = v166 - 1;
          goto LABEL_198;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)((double)(uint64_t)*a3 - *(double *)a2);
LABEL_38:
          *a3 = (_QWORD *)v11;
          return;
        case 1:
          v201 = *(double *)a2;
LABEL_295:
          *(double *)a3 = *(double *)a3 - v201;
          return;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v229, (uint64_t)*a3);
          *a3 = v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr((unint64_t *)v12);
            v15 = --v230 == 0;
          }
          while (__stlxr(v230, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v115 = *a3;
          if (**a3 != 1)
          {
            v116 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v116, (uint64_t)*a3);
            *a3 = v116;
            *v116 = 1;
            do
            {
              v117 = __ldaxr(v115);
              v118 = v117 - 1;
            }
            while (__stlxr(v118, v115));
            if (!v118)
            {
              v119 = (void *)v115[1];
              if (v119)
              {
                v115[2] = (unint64_t)v119;
                operator delete(v119);
              }
              MEMORY[0x219A19A08](v115, 0x1080C409938AC02);
            }
          }
          v120 = (double *)(*a3)[1];
          v121 = (*a3)[2] - (_QWORD)v120;
          if (v121)
          {
            v122 = *(double *)a2;
            v123 = v121 >> 3;
            if (v123 <= 1)
              v123 = 1;
            do
            {
              *v120 = *v120 - v122;
              ++v120;
              --v123;
            }
            while (v123);
          }
          return;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v263, (uint64_t)*a3);
          *a3 = v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v100);
            v204 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v289 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v289, (uint64_t)*a3);
          *a3 = v289;
          *v289 = 1;
          do
          {
            v290 = __ldaxr((unint64_t *)v100);
            v103 = --v290 == 0;
          }
          while (__stlxr(v290, (unint64_t *)v100));
          goto LABEL_356;
        case 6:
          v231 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          v232 = (uint64_t)*a3;
          v233 = (unint64_t)*a3 - vcvtmd_s64_f64(*(double *)a2);
          *a3 = (_QWORD *)((unint64_t)*a3 & 0xFF00000000000000 | v233 & 0xFFFFFFFFFFFFFFLL);
          v234 = *((int *)a3 + 2) - (uint64_t)v231;
          if (v234 < 0)
          {
            *a3 = (_QWORD *)((v233 - 1) & 0xFFFFFFFFFFFFFFLL | v232 & 0xFF00000000000000);
            LODWORD(v234) = v234 + 1000000;
          }
          if (v234 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          *((_DWORD *)a3 + 2) = v234;
          return;
        case 7:
          goto LABEL_413;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v299 = operator new();
          v300 = (uint64_t)*a3;
          *(_QWORD *)v299 = **a3;
          *(_QWORD *)(v299 + 8) = *(_QWORD *)(v300 + 8);
          v301 = *(_QWORD *)(v300 + 16);
          *(_QWORD *)(v299 + 16) = v301;
          if (v301)
          {
            v302 = (unsigned int *)(v301 + 8);
            do
              v303 = __ldxr(v302);
            while (__stxr(v303 + 1, v302));
          }
          v304 = *(_OWORD *)(v300 + 24);
          v305 = *(_OWORD *)(v300 + 40);
          *(_OWORD *)(v299 + 56) = *(_OWORD *)(v300 + 56);
          *(_OWORD *)(v299 + 40) = v305;
          *(_OWORD *)(v299 + 24) = v304;
          *a3 = (_QWORD *)v299;
          *(_QWORD *)v299 = 1;
          do
          {
            v306 = __ldaxr((unint64_t *)v205);
            v214 = --v306 == 0;
          }
          while (__stlxr(v306, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v169 = *a3;
          if (**a3 != 1)
          {
            v170 = (_QWORD *)operator new();
            v171 = (uint64_t)(*a3 + 1);
            *v170 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v170 + 1, v171);
            *a3 = v170;
            *v170 = 1;
            do
            {
              v172 = __ldaxr(v169);
              v173 = v172 - 1;
            }
            while (__stlxr(v173, v169));
            if (!v173)
            {
              v174 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v169);
              MEMORY[0x219A19A08](v174, 0x1030C407B73B9F7);
            }
          }
          v175 = *a3;
          v177 = (uint64_t *)(*a3)[3];
          v176 = (uint64_t *)(*a3)[4];
          if (v176 == v177)
            return;
          if (!v175[1])
            return;
          v178 = *(double *)a2;
          v179 = 1;
          do
          {
            v180 = *v177++;
            v179 *= v180;
          }
          while (v177 != v176);
          if (!v179)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v175 + 1);
          v181 = (v175[4] - v175[3]) >> 3;
          v337 = 0;
          std::vector<unsigned long>::vector(&v338, v181, &v337);
          v71 = v338;
          v182 = v339;
          break;
        default:
          goto LABEL_416;
      }
      while (2)
      {
        v183 = 0;
        v184 = (char *)v182 - (char *)v71;
        if (v184)
        {
          v185 = v184 >> 3;
          v186 = (uint64_t *)v175[6];
          if (v185 <= 1)
            v185 = 1;
          do
          {
            v188 = (uint64_t)*v71++;
            v187 = v188;
            v189 = *v186++;
            v183 += v189 * v187;
            --v185;
          }
          while (v185);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v175 + 1);
        *(double *)(*(_QWORD *)v175[1] + 8 * (v175[9] + v183)) = *(double *)(*(_QWORD *)v175[1] + 8 * (v175[9] + v183))
                                                               - v178;
        v71 = v338;
        v182 = v339;
        v190 = v339 - v338;
        v191 = v190 - 1;
        if ((char *)v339 - (char *)v338 < 1)
          goto LABEL_224;
        v192 = v175[3];
        v193 = (char *)v338[v191] + 1;
        v338[v191] = v193;
        if ((unint64_t)v193 < *(_QWORD *)(v192 + 8 * v191))
        {
LABEL_223:
          v190 = 1;
LABEL_224:
          if (v191 < 0 || !v190)
            goto LABEL_226;
          continue;
        }
        break;
      }
      v194 = (unint64_t *)&v71[v190 - 2];
      v195 = v192 - 16;
      while (1)
      {
        v196 = v190 - 1;
        v194[1] = 0;
        if (v190 - 1 <= 0)
          goto LABEL_227;
        v197 = *v194 + 1;
        *v194-- = v197;
        v198 = *(_QWORD *)(v195 + 8 * v190--);
        if (v197 < v198)
        {
          v191 = v196 - 1;
          goto LABEL_223;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v18 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, (uint64_t)*a3);
          *a3 = v18;
          *v18 = 1;
          do
          {
            v19 = __ldaxr((unint64_t *)v12);
            v15 = --v19 == 0;
          }
          while (__stlxr(v19, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v36 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v36, (uint64_t)*a3);
          *a3 = v36;
          *v36 = 1;
          do
          {
            v37 = __ldaxr(v30);
            v33 = --v37 == 0;
          }
          while (__stlxr(v37, v30));
          goto LABEL_164;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v247 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v247, (uint64_t)*a3);
          *a3 = v247;
          *v247 = 1;
          do
          {
            v248 = __ldaxr((unint64_t *)v100);
            v204 = --v248 == 0;
          }
          while (__stlxr(v248, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v199 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v199, (uint64_t)*a3);
          *a3 = v199;
          *v199 = 1;
          do
          {
            v200 = __ldaxr((unint64_t *)v100);
            v103 = --v200 == 0;
          }
          while (__stlxr(v200, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v249 = operator new();
          v250 = (uint64_t)*a3;
          *(_QWORD *)v249 = **a3;
          *(_QWORD *)(v249 + 8) = *(_QWORD *)(v250 + 8);
          v251 = *(_QWORD *)(v250 + 16);
          *(_QWORD *)(v249 + 16) = v251;
          if (v251)
          {
            v252 = (unsigned int *)(v251 + 8);
            do
              v253 = __ldxr(v252);
            while (__stxr(v253 + 1, v252));
          }
          v254 = *(_OWORD *)(v250 + 24);
          v255 = *(_OWORD *)(v250 + 40);
          *(_OWORD *)(v249 + 56) = *(_OWORD *)(v250 + 56);
          *(_OWORD *)(v249 + 40) = v255;
          *(_OWORD *)(v249 + 24) = v254;
          *a3 = (_QWORD *)v249;
          *(_QWORD *)v249 = 1;
          do
          {
            v256 = __ldaxr((unint64_t *)v205);
            v214 = --v256 == 0;
          }
          while (__stlxr(v256, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v97 = (_QWORD *)operator new();
          v98 = (uint64_t)(*a3 + 1);
          *v97 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, v98);
          *a3 = v97;
          *v97 = 1;
          do
          {
            v99 = __ldaxr(v38);
            v42 = --v99 == 0;
          }
          while (__stlxr(v99, v38));
          goto LABEL_291;
        default:
          goto LABEL_416;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v20 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, (uint64_t)*a3);
          *a3 = v20;
          *v20 = 1;
          do
          {
            v21 = __ldaxr((unint64_t *)v12);
            v15 = --v21 == 0;
          }
          while (__stlxr(v21, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v43 = *(double *)a2;
          v44 = *a3;
          if (**a3 != 1)
          {
            v45 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v45, (uint64_t)*a3);
            *a3 = v45;
            *v45 = 1;
            do
            {
              v46 = __ldaxr(v44);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v44));
            if (!v47)
            {
              v48 = (void *)v44[1];
              if (v48)
              {
                v44[2] = (unint64_t)v48;
                operator delete(v48);
              }
              MEMORY[0x219A19A08](v44, 0x1080C409938AC02);
            }
          }
          v49 = (uint64_t)*a3;
          turi::flexible_type_fail((*a3)[2] - (*a3)[1] == *(_QWORD *)(*(_QWORD *)&v43 + 16)
                                                        - *(_QWORD *)(*(_QWORD *)&v43 + 8));
          v50 = *(double **)(v49 + 8);
          v51 = *(_QWORD *)(v49 + 16) - (_QWORD)v50;
          if (v51)
          {
            v52 = v51 >> 3;
            v53 = *(double **)(*(_QWORD *)&v43 + 8);
            if (v52 <= 1)
              v52 = 1;
            do
            {
              v54 = *v53++;
              *v50 = *v50 - v54;
              ++v50;
              --v52;
            }
            while (v52);
          }
          return;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v259 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v259, (uint64_t)*a3);
          *a3 = v259;
          *v259 = 1;
          do
          {
            v260 = __ldaxr((unint64_t *)v100);
            v204 = --v260 == 0;
          }
          while (__stlxr(v260, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v218 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v218, (uint64_t)*a3);
          *a3 = v218;
          *v218 = 1;
          do
          {
            v219 = __ldaxr((unint64_t *)v100);
            v103 = --v219 == 0;
          }
          while (__stlxr(v219, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v269 = operator new();
          v270 = (uint64_t)*a3;
          *(_QWORD *)v269 = **a3;
          *(_QWORD *)(v269 + 8) = *(_QWORD *)(v270 + 8);
          v271 = *(_QWORD *)(v270 + 16);
          *(_QWORD *)(v269 + 16) = v271;
          if (v271)
          {
            v272 = (unsigned int *)(v271 + 8);
            do
              v273 = __ldxr(v272);
            while (__stxr(v273 + 1, v272));
          }
          v274 = *(_OWORD *)(v270 + 24);
          v275 = *(_OWORD *)(v270 + 40);
          *(_OWORD *)(v269 + 56) = *(_OWORD *)(v270 + 56);
          *(_OWORD *)(v269 + 40) = v275;
          *(_OWORD *)(v269 + 24) = v274;
          *a3 = (_QWORD *)v269;
          *(_QWORD *)v269 = 1;
          do
          {
            v276 = __ldaxr((unint64_t *)v205);
            v214 = --v276 == 0;
          }
          while (__stlxr(v276, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v126 = (_QWORD *)operator new();
          v127 = (uint64_t)(*a3 + 1);
          *v126 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
          *a3 = v126;
          *v126 = 1;
          do
          {
            v128 = __ldaxr(v38);
            v42 = --v128 == 0;
          }
          while (__stlxr(v128, v38));
          goto LABEL_291;
        default:
          goto LABEL_416;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, (uint64_t)*a3);
          *a3 = v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v31 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v31, (uint64_t)*a3);
          *a3 = v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(v30);
            v33 = --v32 == 0;
          }
          while (__stlxr(v32, v30));
          goto LABEL_164;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v202 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v202, (uint64_t)*a3);
          *a3 = v202;
          *v202 = 1;
          do
          {
            v203 = __ldaxr((unint64_t *)v100);
            v204 = --v203 == 0;
          }
          while (__stlxr(v203, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v101 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v101, (uint64_t)*a3);
          *a3 = v101;
          *v101 = 1;
          do
          {
            v102 = __ldaxr((unint64_t *)v100);
            v103 = --v102 == 0;
          }
          while (__stlxr(v102, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v206 = operator new();
          v207 = (uint64_t)*a3;
          *(_QWORD *)v206 = **a3;
          *(_QWORD *)(v206 + 8) = *(_QWORD *)(v207 + 8);
          v208 = *(_QWORD *)(v207 + 16);
          *(_QWORD *)(v206 + 16) = v208;
          if (v208)
          {
            v209 = (unsigned int *)(v208 + 8);
            do
              v210 = __ldxr(v209);
            while (__stxr(v210 + 1, v209));
          }
          v211 = *(_OWORD *)(v207 + 24);
          v212 = *(_OWORD *)(v207 + 40);
          *(_OWORD *)(v206 + 56) = *(_OWORD *)(v207 + 56);
          *(_OWORD *)(v206 + 40) = v212;
          *(_OWORD *)(v206 + 24) = v211;
          *a3 = (_QWORD *)v206;
          *(_QWORD *)v206 = 1;
          do
          {
            v213 = __ldaxr((unint64_t *)v205);
            v214 = --v213 == 0;
          }
          while (__stlxr(v213, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v39 = (_QWORD *)operator new();
          v40 = (uint64_t)(*a3 + 1);
          *v39 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
          *a3 = v39;
          *v39 = 1;
          do
          {
            v41 = __ldaxr(v38);
            v42 = --v41 == 0;
          }
          while (__stlxr(v41, v38));
          goto LABEL_291;
        default:
          goto LABEL_416;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v24 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, (uint64_t)*a3);
          *a3 = v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr((unint64_t *)v12);
            v15 = --v25 == 0;
          }
          while (__stlxr(v25, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v104 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v104, (uint64_t)*a3);
          *a3 = v104;
          *v104 = 1;
          do
          {
            v105 = __ldaxr(v30);
            v33 = --v105 == 0;
          }
          while (__stlxr(v105, v30));
          goto LABEL_164;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v307 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v307, (uint64_t)*a3);
          *a3 = v307;
          *v307 = 1;
          do
          {
            v308 = __ldaxr((unint64_t *)v100);
            v204 = --v308 == 0;
          }
          while (__stlxr(v308, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v257 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v257, (uint64_t)*a3);
          *a3 = v257;
          *v257 = 1;
          do
          {
            v258 = __ldaxr((unint64_t *)v100);
            v103 = --v258 == 0;
          }
          while (__stlxr(v258, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v309 = operator new();
          v310 = (uint64_t)*a3;
          *(_QWORD *)v309 = **a3;
          *(_QWORD *)(v309 + 8) = *(_QWORD *)(v310 + 8);
          v311 = *(_QWORD *)(v310 + 16);
          *(_QWORD *)(v309 + 16) = v311;
          if (v311)
          {
            v312 = (unsigned int *)(v311 + 8);
            do
              v313 = __ldxr(v312);
            while (__stxr(v313 + 1, v312));
          }
          v314 = *(_OWORD *)(v310 + 24);
          v315 = *(_OWORD *)(v310 + 40);
          *(_OWORD *)(v309 + 56) = *(_OWORD *)(v310 + 56);
          *(_OWORD *)(v309 + 40) = v315;
          *(_OWORD *)(v309 + 24) = v314;
          *a3 = (_QWORD *)v309;
          *(_QWORD *)v309 = 1;
          do
          {
            v316 = __ldaxr((unint64_t *)v205);
            v214 = --v316 == 0;
          }
          while (__stlxr(v316, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v215 = (_QWORD *)operator new();
          v216 = (uint64_t)(*a3 + 1);
          *v215 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v215 + 1, v216);
          *a3 = v215;
          *v215 = 1;
          do
          {
            v217 = __ldaxr(v38);
            v42 = --v217 == 0;
          }
          while (__stlxr(v217, v38));
          goto LABEL_291;
        default:
          goto LABEL_416;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, (uint64_t)*a3);
          *a3 = v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr((unint64_t *)v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v124 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v124, (uint64_t)*a3);
          *a3 = v124;
          *v124 = 1;
          do
          {
            v125 = __ldaxr(v30);
            v33 = --v125 == 0;
          }
          while (__stlxr(v125, v30));
          goto LABEL_164;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v317 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v317, (uint64_t)*a3);
          *a3 = v317;
          *v317 = 1;
          do
          {
            v318 = __ldaxr((unint64_t *)v100);
            v204 = --v318 == 0;
          }
          while (__stlxr(v318, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v267 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v267, (uint64_t)*a3);
          *a3 = v267;
          *v267 = 1;
          do
          {
            v268 = __ldaxr((unint64_t *)v100);
            v103 = --v268 == 0;
          }
          while (__stlxr(v268, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v319 = operator new();
          v320 = (uint64_t)*a3;
          *(_QWORD *)v319 = **a3;
          *(_QWORD *)(v319 + 8) = *(_QWORD *)(v320 + 8);
          v321 = *(_QWORD *)(v320 + 16);
          *(_QWORD *)(v319 + 16) = v321;
          if (v321)
          {
            v322 = (unsigned int *)(v321 + 8);
            do
              v323 = __ldxr(v322);
            while (__stxr(v323 + 1, v322));
          }
          v324 = *(_OWORD *)(v320 + 24);
          v325 = *(_OWORD *)(v320 + 40);
          *(_OWORD *)(v319 + 56) = *(_OWORD *)(v320 + 56);
          *(_OWORD *)(v319 + 40) = v325;
          *(_OWORD *)(v319 + 24) = v324;
          *a3 = (_QWORD *)v319;
          *(_QWORD *)v319 = 1;
          do
          {
            v326 = __ldaxr((unint64_t *)v205);
            v214 = --v326 == 0;
          }
          while (__stlxr(v326, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v224 = (_QWORD *)operator new();
          v225 = (uint64_t)(*a3 + 1);
          *v224 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v224 + 1, v225);
          *a3 = v224;
          *v224 = 1;
          do
          {
            v226 = __ldaxr(v38);
            v42 = --v226 == 0;
          }
          while (__stlxr(v226, v38));
          goto LABEL_291;
        default:
          goto LABEL_416;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v22 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, (uint64_t)*a3);
          *a3 = v22;
          *v22 = 1;
          do
          {
            v23 = __ldaxr((unint64_t *)v12);
            v15 = --v23 == 0;
          }
          while (__stlxr(v23, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, (uint64_t)*a3);
          *a3 = v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v30);
            v33 = --v56 == 0;
          }
          while (__stlxr(v56, v30));
          goto LABEL_164;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v265 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v265, (uint64_t)*a3);
          *a3 = v265;
          *v265 = 1;
          do
          {
            v266 = __ldaxr((unint64_t *)v100);
            v204 = --v266 == 0;
          }
          while (__stlxr(v266, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v220 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v220, (uint64_t)*a3);
          *a3 = v220;
          *v220 = 1;
          do
          {
            v221 = __ldaxr((unint64_t *)v100);
            v103 = --v221 == 0;
          }
          while (__stlxr(v221, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v277 = operator new();
          v278 = (uint64_t)*a3;
          *(_QWORD *)v277 = **a3;
          *(_QWORD *)(v277 + 8) = *(_QWORD *)(v278 + 8);
          v279 = *(_QWORD *)(v278 + 16);
          *(_QWORD *)(v277 + 16) = v279;
          if (v279)
          {
            v280 = (unsigned int *)(v279 + 8);
            do
              v281 = __ldxr(v280);
            while (__stxr(v281 + 1, v280));
          }
          v282 = *(_OWORD *)(v278 + 24);
          v283 = *(_OWORD *)(v278 + 40);
          *(_OWORD *)(v277 + 56) = *(_OWORD *)(v278 + 56);
          *(_OWORD *)(v277 + 40) = v283;
          *(_OWORD *)(v277 + 24) = v282;
          *a3 = (_QWORD *)v277;
          *(_QWORD *)v277 = 1;
          do
          {
            v284 = __ldaxr((unint64_t *)v205);
            v214 = --v284 == 0;
          }
          while (__stlxr(v284, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v136 = (_QWORD *)operator new();
          v137 = (uint64_t)(*a3 + 1);
          *v136 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v136 + 1, v137);
          *a3 = v136;
          *v136 = 1;
          do
          {
            v138 = __ldaxr(v38);
            v42 = --v138 == 0;
          }
          while (__stlxr(v138, v38));
          goto LABEL_291;
        default:
          goto LABEL_416;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, (uint64_t)*a3);
          *a3 = v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr((unint64_t *)v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v129 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v129, (uint64_t)*a3);
          *a3 = v129;
          *v129 = 1;
          do
          {
            v130 = __ldaxr(v30);
            v33 = --v130 == 0;
          }
          while (__stlxr(v130, v30));
          goto LABEL_164;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v327 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v327, (uint64_t)*a3);
          *a3 = v327;
          *v327 = 1;
          do
          {
            v328 = __ldaxr((unint64_t *)v100);
            v204 = --v328 == 0;
          }
          while (__stlxr(v328, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v285, (uint64_t)*a3);
          *a3 = v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v100);
            v103 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v329 = operator new();
          v330 = (uint64_t)*a3;
          *(_QWORD *)v329 = **a3;
          *(_QWORD *)(v329 + 8) = *(_QWORD *)(v330 + 8);
          v331 = *(_QWORD *)(v330 + 16);
          *(_QWORD *)(v329 + 16) = v331;
          if (v331)
          {
            v332 = (unsigned int *)(v331 + 8);
            do
              v333 = __ldxr(v332);
            while (__stxr(v333 + 1, v332));
          }
          v334 = *(_OWORD *)(v330 + 24);
          v335 = *(_OWORD *)(v330 + 40);
          *(_OWORD *)(v329 + 56) = *(_OWORD *)(v330 + 56);
          *(_OWORD *)(v329 + 40) = v335;
          *(_OWORD *)(v329 + 24) = v334;
          *a3 = (_QWORD *)v329;
          *(_QWORD *)v329 = 1;
          do
          {
            v336 = __ldaxr((unint64_t *)v205);
            v214 = --v336 == 0;
          }
          while (__stlxr(v336, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v243 = (_QWORD *)operator new();
          v244 = (uint64_t)(*a3 + 1);
          *v243 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v243 + 1, v244);
          *a3 = v243;
          *v243 = 1;
          do
          {
            v245 = __ldaxr(v38);
            v42 = --v245 == 0;
          }
          while (__stlxr(v245, v38));
LABEL_291:
          if (!v42)
            goto LABEL_413;
          v132 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38);
          v246 = 2071181815;
          goto LABEL_411;
        default:
          goto LABEL_416;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, (uint64_t)*a3);
          *a3 = v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr((unint64_t *)v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, (unint64_t *)v12));
LABEL_271:
          if (!v15)
            goto LABEL_413;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v132 = (_QWORD *)v12;
          v133 = 0x1012C404EF22A49;
          goto LABEL_412;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v34, (uint64_t)*a3);
          *a3 = v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr(v30);
            v33 = --v35 == 0;
          }
          while (__stlxr(v35, v30));
LABEL_164:
          if (!v33)
            goto LABEL_413;
          v131 = (void *)v30[1];
          if (v131)
          {
            v30[2] = (unint64_t)v131;
            operator delete(v131);
          }
          v132 = v30;
          v133 = 0x1080C409938AC02;
          goto LABEL_412;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v222 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v222, (uint64_t)*a3);
          *a3 = v222;
          *v222 = 1;
          do
          {
            v223 = __ldaxr((unint64_t *)v100);
            v204 = --v223 == 0;
          }
          while (__stlxr(v223, (unint64_t *)v100));
LABEL_398:
          if (!v204)
            goto LABEL_413;
          v338 = (void **)(v100 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v338);
          goto LABEL_401;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v134 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v134, (uint64_t)*a3);
          *a3 = v134;
          *v134 = 1;
          do
          {
            v135 = __ldaxr((unint64_t *)v100);
            v103 = --v135 == 0;
          }
          while (__stlxr(v135, (unint64_t *)v100));
LABEL_356:
          if (!v103)
            goto LABEL_413;
          v338 = (void **)(v100 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v338);
LABEL_401:
          v132 = (_QWORD *)v100;
          v133 = 0x1020C405E66F15BLL;
          goto LABEL_412;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v235 = operator new();
          v236 = (uint64_t)*a3;
          *(_QWORD *)v235 = **a3;
          *(_QWORD *)(v235 + 8) = *(_QWORD *)(v236 + 8);
          v237 = *(_QWORD *)(v236 + 16);
          *(_QWORD *)(v235 + 16) = v237;
          if (v237)
          {
            v238 = (unsigned int *)(v237 + 8);
            do
              v239 = __ldxr(v238);
            while (__stxr(v239 + 1, v238));
          }
          v240 = *(_OWORD *)(v236 + 24);
          v241 = *(_OWORD *)(v236 + 40);
          *(_OWORD *)(v235 + 56) = *(_OWORD *)(v236 + 56);
          *(_OWORD *)(v235 + 40) = v241;
          *(_OWORD *)(v235 + 24) = v240;
          *a3 = (_QWORD *)v235;
          *(_QWORD *)v235 = 1;
          do
          {
            v242 = __ldaxr((unint64_t *)v205);
            v214 = --v242 == 0;
          }
          while (__stlxr(v242, (unint64_t *)v205));
LABEL_408:
          if (!v214)
            goto LABEL_413;
          boost::detail::shared_count::~shared_count((unsigned int **)(v205 + 16));
          v132 = (_QWORD *)v205;
          v246 = -235920773;
LABEL_411:
          v133 = v246 | 0x1030C4000000000;
LABEL_412:
          MEMORY[0x219A19A08](v132, v133);
LABEL_413:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v57 = *(double *)a2;
          v58 = *a3;
          if (**a3 != 1)
          {
            v59 = (_QWORD *)operator new();
            v60 = (uint64_t)(*a3 + 1);
            *v59 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
            *a3 = v59;
            *v59 = 1;
            do
            {
              v61 = __ldaxr(v58);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v58));
            if (!v62)
            {
              v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v58);
              MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
            }
          }
          v64 = (uint64_t)*a3;
          v65 = *a3 + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v65, *(_QWORD *)&v57 + 8))
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v67 = *(uint64_t **)(v64 + 24);
          v66 = *(uint64_t **)(v64 + 32);
          if (v66 == v67)
            return;
          if (!*v65)
            return;
          v68 = 1;
          do
          {
            v69 = *v67++;
            v68 *= v69;
          }
          while (v67 != v66);
          if (!v68)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
          v70 = (uint64_t)(*(_QWORD *)(v64 + 32) - *(_QWORD *)(v64 + 24)) >> 3;
          v337 = 0;
          std::vector<unsigned long>::vector(&v338, v70, &v337);
          v71 = v338;
          v72 = v339;
          break;
        default:
          goto LABEL_416;
      }
      break;
    default:
LABEL_416:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v73 = (char *)v72 - (char *)v71;
    if (v73)
    {
      v74 = 0;
      v75 = v73 >> 3;
      v76 = *(uint64_t **)(*(_QWORD *)&v57 + 48);
      if (v75 <= 1)
        v75 = 1;
      v77 = v71;
      v78 = v75;
      do
      {
        v80 = (uint64_t)*v77++;
        v79 = v80;
        v81 = *v76++;
        v74 += v81 * v79;
        --v78;
      }
      while (v78);
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v57 + 72) + v74));
      v84 = *(uint64_t **)(v64 + 48);
      do
      {
        v86 = (uint64_t)*v71++;
        v85 = v86;
        v87 = *v84++;
        v82 += v87 * v85;
        --v75;
      }
      while (v75);
    }
    else
    {
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v57 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
    *(double *)(**(_QWORD **)(v64 + 8) + 8 * (*(_QWORD *)(v64 + 72) + v82)) = *(double *)(**(_QWORD **)(v64 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v64 + 72) + v82))
                                                                            - v83;
    v71 = v338;
    v72 = v339;
    v88 = v339 - v338;
    v89 = v88 - 1;
    if ((char *)v339 - (char *)v338 < 1)
      goto LABEL_114;
    v90 = *(_QWORD *)(v64 + 24);
    v91 = (char *)v338[v89] + 1;
    v338[v89] = v91;
    if ((unint64_t)v91 >= *(_QWORD *)(v90 + 8 * v89))
      break;
LABEL_113:
    v88 = 1;
LABEL_114:
    if (v89 < 0 || !v88)
      goto LABEL_226;
  }
  v92 = (unint64_t *)&v71[v88 - 2];
  v93 = v90 - 16;
  while (1)
  {
    v94 = v88 - 1;
    v92[1] = 0;
    if (v88 - 1 <= 0)
      break;
    v95 = *v92 + 1;
    *v92-- = v95;
    v96 = *(_QWORD *)(v93 + 8 * v88--);
    if (v95 < v96)
    {
      v89 = v94 - 1;
      goto LABEL_113;
    }
  }
LABEL_226:
  if (v71)
  {
LABEL_227:
    v339 = v71;
    operator delete(v71);
  }
}

void sub_218249FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933C98;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933C98;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(double *a1@<X1>, uint64_t a2@<X2>, _QWORD **a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_9::operator()(double *a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  double *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  BOOL v64;
  _QWORD *v65;
  unint64_t v66;
  double v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  const std::string::value_type *v73;
  std::string::size_type v74;
  _QWORD *v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  BOOL v88;
  _QWORD *v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  BOOL v97;
  double v98;
  unint64_t *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  double *v105;
  uint64_t v106;
  unint64_t v107;
  double *v108;
  double v109;
  _QWORD *v110;
  unint64_t v111;
  double v112;
  unint64_t *v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void **v126;
  void **v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  void **v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  unint64_t v157;
  BOOL v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t *v161;
  _QWORD *v162;
  unint64_t v163;
  unint64_t v164;
  void *v165;
  double *v166;
  uint64_t v167;
  unint64_t v168;
  double v169;
  unint64_t *v170;
  _QWORD *v171;
  unint64_t v172;
  unint64_t v173;
  void *v174;
  double *v175;
  uint64_t v176;
  double v177;
  unint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  unint64_t v185;
  void *v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  unint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t *v194;
  _QWORD *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;
  double v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  void **v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  unint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t *v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  _QWORD *v229;
  uint64_t *v230;
  uint64_t *v231;
  uint64_t *v232;
  double v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  void **v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  unint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  _QWORD *v254;
  unint64_t v255;
  double v256;
  _QWORD *v257;
  unint64_t v258;
  BOOL v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int *v264;
  unsigned int v265;
  __int128 v266;
  __int128 v267;
  unint64_t v268;
  BOOL v269;
  _QWORD *v270;
  uint64_t v271;
  unint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  _QWORD *v275;
  unint64_t v276;
  _QWORD *v277;
  unint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  unint64_t v281;
  _QWORD *v282;
  unint64_t v283;
  _QWORD *v284;
  unint64_t v285;
  double v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int *v293;
  unsigned int v294;
  __int128 v295;
  __int128 v296;
  unint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  unint64_t v300;
  unsigned int v301;
  _QWORD *v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int *v307;
  unsigned int v308;
  __int128 v309;
  __int128 v310;
  unint64_t v311;
  _QWORD *v312;
  unint64_t v313;
  _QWORD *v314;
  unint64_t v315;
  _QWORD *v316;
  unint64_t v317;
  _QWORD *v318;
  unint64_t v319;
  _QWORD *v320;
  unint64_t v321;
  _QWORD *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int *v327;
  unsigned int v328;
  __int128 v329;
  __int128 v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int *v335;
  unsigned int v336;
  __int128 v337;
  __int128 v338;
  unint64_t v339;
  _QWORD *v340;
  unint64_t v341;
  _QWORD *v342;
  unint64_t v343;
  _QWORD *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int *v349;
  unsigned int v350;
  __int128 v351;
  __int128 v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unsigned int *v357;
  unsigned int v358;
  __int128 v359;
  __int128 v360;
  unint64_t v361;
  _QWORD *v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unsigned int *v367;
  unsigned int v368;
  __int128 v369;
  __int128 v370;
  unint64_t v371;
  _QWORD *v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unsigned int *v377;
  unsigned int v378;
  __int128 v379;
  __int128 v380;
  unint64_t v381;
  _QWORD *v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unsigned int *v387;
  unsigned int v388;
  __int128 v389;
  __int128 v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  BOOL v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  BOOL v399;
  unint64_t v400;
  unint64_t v401;
  BOOL v402;
  void *v403;
  void *v404;
  unsigned int v405;
  unint64_t v406;
  unint64_t v407;
  BOOL v408;
  void *v409;
  unint64_t v410;
  unint64_t v411;
  BOOL v412;
  unint64_t v413;
  unint64_t v414;
  BOOL v415;
  uint64_t v416;
  void **v417;
  void **v418;

  v3 = *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a2;
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
LABEL_4:
      v8 = -v3;
      goto LABEL_75;
    case 1:
LABEL_5:
      v8 = v3 ^ 0x8000000000000000;
      goto LABEL_75;
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
      do
        v9 = __ldaxr((unint64_t *)v3);
      while (__stlxr(v9 + 1, (unint64_t *)v3));
      v8 = v3;
      switch(v4)
      {
        case 0u:
          goto LABEL_4;
        case 1u:
          goto LABEL_5;
        case 2u:
          if (*(_QWORD *)v3 == 1)
            goto LABEL_29;
          v8 = operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v8, v3);
          *(_QWORD *)v8 = 1;
          do
          {
            v10 = __ldaxr((unint64_t *)v3);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, (unint64_t *)v3));
          if (v11)
            goto LABEL_74;
          if (*(char *)(v3 + 31) < 0)
            operator delete(*(void **)(v3 + 8));
          v12 = v3;
          v13 = 0x1012C404EF22A49;
          goto LABEL_73;
        case 3u:
          if (*(_QWORD *)v3 == 1)
          {
            v8 = v3;
          }
          else
          {
            v8 = operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v8, v3);
            *(_QWORD *)v8 = 1;
            do
            {
              v44 = __ldaxr((unint64_t *)v3);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, (unint64_t *)v3));
            if (!v45)
            {
              v46 = *(void **)(v3 + 8);
              if (v46)
              {
                *(_QWORD *)(v3 + 16) = v46;
                operator delete(v46);
              }
              MEMORY[0x219A19A08](v3, 0x1080C409938AC02);
            }
          }
          v47 = *(double **)(v8 + 8);
          v48 = *(_QWORD *)(v8 + 16) - (_QWORD)v47;
          if (v48)
          {
            v49 = v48 >> 3;
            if (v49 <= 1)
              v49 = 1;
            do
            {
              *v47 = -*v47;
              ++v47;
              --v49;
            }
            while (v49);
          }
          goto LABEL_75;
        case 4u:
          if (*(_QWORD *)v3 == 1)
            goto LABEL_29;
          v8 = operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v8, v3);
          *(_QWORD *)v8 = 1;
          do
          {
            v16 = __ldaxr((unint64_t *)v3);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, (unint64_t *)v3));
          if (v17)
            goto LABEL_74;
          v417 = (void **)(v3 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v417);
          goto LABEL_27;
        case 5u:
          if (*(_QWORD *)v3 == 1)
            goto LABEL_29;
          v8 = operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v8, v3);
          *(_QWORD *)v8 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v3);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, (unint64_t *)v3));
          if (v15)
            goto LABEL_74;
          v417 = (void **)(v3 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v417);
LABEL_27:
          v12 = v3;
          v13 = 0x1020C405E66F15BLL;
          goto LABEL_73;
        case 6u:
        case 7u:
          goto LABEL_74;
        case 8u:
          if (*(_QWORD *)v3 == 1)
          {
LABEL_29:
            v8 = v3;
          }
          else
          {
            v50 = operator new();
            v8 = v50;
            *(_QWORD *)v50 = *(_QWORD *)v3;
            *(_QWORD *)(v50 + 8) = *(_QWORD *)(v3 + 8);
            v51 = *(_QWORD *)(v3 + 16);
            *(_QWORD *)(v50 + 16) = v51;
            if (v51)
            {
              v52 = (unsigned int *)(v51 + 8);
              do
                v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
            }
            v54 = *(_OWORD *)(v3 + 24);
            v55 = *(_OWORD *)(v3 + 40);
            *(_OWORD *)(v50 + 56) = *(_OWORD *)(v3 + 56);
            *(_OWORD *)(v50 + 40) = v55;
            *(_OWORD *)(v50 + 24) = v54;
            *(_QWORD *)v50 = 1;
            do
            {
              v56 = __ldaxr((unint64_t *)v3);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, (unint64_t *)v3));
            if (!v57)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v3 + 16));
              v12 = v3;
              v13 = 0x1030C40F1F0227BLL;
LABEL_73:
              MEMORY[0x219A19A08](v12, v13);
            }
          }
          goto LABEL_74;
        case 9u:
          if (*(_QWORD *)v3 == 1)
          {
            v8 = v3;
          }
          else
          {
            v8 = operator new();
            *(_QWORD *)v8 = *(_QWORD *)v3;
            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v8 + 8), v3 + 8);
            *(_QWORD *)v8 = 1;
            do
            {
              v18 = __ldaxr((unint64_t *)v3);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, (unint64_t *)v3));
            if (!v19)
            {
              v20 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v3);
              MEMORY[0x219A19A08](v20, 0x1030C407B73B9F7);
            }
          }
          v22 = *(uint64_t **)(v8 + 24);
          v21 = *(uint64_t **)(v8 + 32);
          if (v21 == v22)
            goto LABEL_75;
          if (!*(_QWORD *)(v8 + 8))
            goto LABEL_75;
          v23 = 1;
          do
          {
            v24 = *v22++;
            v23 *= v24;
          }
          while (v22 != v21);
          if (!v23)
            goto LABEL_75;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v8 + 8));
          v25 = (uint64_t)(*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24)) >> 3;
          v416 = 0;
          std::vector<unsigned long>::vector(&v417, v25, &v416);
          v26 = v417;
          v27 = v418;
          break;
        default:
          goto LABEL_546;
      }
      break;
    case 6:
    case 7:
LABEL_74:
      turi::flexible_type_fail(0);
      goto LABEL_75;
    default:
LABEL_546:
      turi::flexible_type_fail(0);
LABEL_548:
      __break(1u);
      return;
  }
  while (1)
  {
    v28 = 0;
    v29 = (char *)v27 - (char *)v26;
    if (v29)
    {
      v30 = v29 >> 3;
      v31 = *(uint64_t **)(v8 + 48);
      if (v30 <= 1)
        v30 = 1;
      do
      {
        v33 = (uint64_t)*v26++;
        v32 = v33;
        v34 = *v31++;
        v28 += v34 * v32;
        --v30;
      }
      while (v30);
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v8 + 8));
    *(double *)(**(_QWORD **)(v8 + 8) + 8 * (*(_QWORD *)(v8 + 72) + v28)) = -*(double *)(**(_QWORD **)(v8 + 8)
                                                                                       + 8
                                                                                       * (*(_QWORD *)(v8 + 72) + v28));
    v26 = v417;
    v27 = v418;
    v35 = v418 - v417;
    v36 = v35 - 1;
    if ((char *)v418 - (char *)v417 < 1)
      goto LABEL_51;
    v37 = *(_QWORD *)(v8 + 24);
    v38 = (char *)v417[v36] + 1;
    v417[v36] = v38;
    if ((unint64_t)v38 >= *(_QWORD *)(v37 + 8 * v36))
      break;
LABEL_50:
    v35 = 1;
LABEL_51:
    if (v36 < 0 || !v35)
      goto LABEL_53;
  }
  v39 = (unint64_t *)&v26[v35 - 2];
  v40 = v37 - 16;
  while (1)
  {
    v41 = v35 - 1;
    v39[1] = 0;
    if (v35 - 1 <= 0)
      break;
    v42 = *v39 + 1;
    *v39-- = v42;
    v43 = *(_QWORD *)(v40 + 8 * v35--);
    if (v42 < v43)
    {
      v36 = v41 - 1;
      goto LABEL_50;
    }
  }
LABEL_53:
  if (v26)
  {
    v418 = v26;
    operator delete(v26);
  }
LABEL_75:
  *a3 = (_QWORD *)v8;
  *((_DWORD *)a3 + 2) = v7;
  *((_BYTE *)a3 + 12) = v4;
  if (v4 <= 9 && ((1 << v4) & 0x33C) != 0)
  {
    v58 = *a3;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 + 1, v58));
  }
  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v60 = (uint64_t)*a3 + *(_QWORD *)a1;
          goto LABEL_119;
        case 1:
          v256 = *(double *)a3 + (double)*(uint64_t *)a1;
          goto LABEL_376;
        case 2:
          v61 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v282 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v282, (uint64_t)*a3);
          *a3 = v282;
          *v282 = 1;
          do
          {
            v283 = __ldaxr((unint64_t *)v61);
            v64 = --v283 == 0;
          }
          while (__stlxr(v283, (unint64_t *)v61));
          goto LABEL_352;
        case 3:
          v161 = *a3;
          if (**a3 != 1)
          {
            v162 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v162, (uint64_t)*a3);
            *a3 = v162;
            *v162 = 1;
            do
            {
              v163 = __ldaxr(v161);
              v164 = v163 - 1;
            }
            while (__stlxr(v164, v161));
            if (!v164)
            {
              v165 = (void *)v161[1];
              if (v165)
              {
                v161[2] = (unint64_t)v165;
                operator delete(v165);
              }
              MEMORY[0x219A19A08](v161, 0x1080C409938AC02);
            }
          }
          v166 = (double *)(*a3)[1];
          v167 = (*a3)[2] - (_QWORD)v166;
          if (v167)
          {
            v168 = v167 >> 3;
            v169 = (double)*(uint64_t *)a1;
            if (v168 <= 1)
              v168 = 1;
            do
            {
              *v166 = *v166 + v169;
              ++v166;
              --v168;
            }
            while (v168);
          }
          goto LABEL_495;
        case 4:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v316 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v316, (uint64_t)*a3);
          *a3 = v316;
          *v316 = 1;
          do
          {
            v317 = __ldaxr((unint64_t *)v155);
            v259 = --v317 == 0;
          }
          while (__stlxr(v317, (unint64_t *)v155));
          goto LABEL_479;
        case 5:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v342 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v342, (uint64_t)*a3);
          *a3 = v342;
          *v342 = 1;
          do
          {
            v343 = __ldaxr((unint64_t *)v155);
            v158 = --v343 == 0;
          }
          while (__stlxr(v343, (unint64_t *)v155));
          goto LABEL_437;
        case 6:
          *a3 = (_QWORD *)((unint64_t)*a3 & 0xFF00000000000000 | ((unint64_t)*a3 + *(_QWORD *)a1) & 0xFFFFFFFFFFFFFFLL);
          goto LABEL_495;
        case 7:
          goto LABEL_494;
        case 8:
          v260 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v346 = operator new();
          v347 = (uint64_t)*a3;
          *(_QWORD *)v346 = **a3;
          *(_QWORD *)(v346 + 8) = *(_QWORD *)(v347 + 8);
          v348 = *(_QWORD *)(v347 + 16);
          *(_QWORD *)(v346 + 16) = v348;
          if (v348)
          {
            v349 = (unsigned int *)(v348 + 8);
            do
              v350 = __ldxr(v349);
            while (__stxr(v350 + 1, v349));
          }
          v351 = *(_OWORD *)(v347 + 24);
          v352 = *(_OWORD *)(v347 + 40);
          *(_OWORD *)(v346 + 56) = *(_OWORD *)(v347 + 56);
          *(_OWORD *)(v346 + 40) = v352;
          *(_OWORD *)(v346 + 24) = v351;
          *a3 = (_QWORD *)v346;
          *(_QWORD *)v346 = 1;
          do
          {
            v353 = __ldaxr((unint64_t *)v260);
            v269 = --v353 == 0;
          }
          while (__stlxr(v353, (unint64_t *)v260));
          goto LABEL_489;
        case 9:
          v194 = *a3;
          if (**a3 != 1)
          {
            v195 = (_QWORD *)operator new();
            v196 = (uint64_t)(*a3 + 1);
            *v195 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v195 + 1, v196);
            *a3 = v195;
            *v195 = 1;
            do
            {
              v197 = __ldaxr(v194);
              v198 = v197 - 1;
            }
            while (__stlxr(v198, v194));
            if (!v198)
            {
              v199 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v194);
              MEMORY[0x219A19A08](v199, 0x1030C407B73B9F7);
            }
          }
          v200 = *a3;
          v202 = (uint64_t *)(*a3)[3];
          v201 = (uint64_t *)(*a3)[4];
          if (v201 == v202)
            goto LABEL_495;
          if (!v200[1])
            goto LABEL_495;
          v203 = (double)*(uint64_t *)a1;
          v204 = 1;
          do
          {
            v205 = *v202++;
            v204 *= v205;
          }
          while (v202 != v201);
          if (!v204)
            goto LABEL_495;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v200 + 1);
          v206 = (v200[4] - v200[3]) >> 3;
          v416 = 0;
          std::vector<unsigned long>::vector(&v417, v206, &v416);
          v126 = v417;
          v207 = v418;
          break;
        default:
          goto LABEL_545;
      }
      while (2)
      {
        v208 = 0;
        v209 = (char *)v207 - (char *)v126;
        if (v209)
        {
          v210 = v209 >> 3;
          v211 = (uint64_t *)v200[6];
          if (v210 <= 1)
            v210 = 1;
          do
          {
            v213 = (uint64_t)*v126++;
            v212 = v213;
            v214 = *v211++;
            v208 += v214 * v212;
            --v210;
          }
          while (v210);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v200 + 1);
        *(double *)(*(_QWORD *)v200[1] + 8 * (v200[9] + v208)) = *(double *)(*(_QWORD *)v200[1] + 8 * (v200[9] + v208))
                                                               + v203;
        v126 = v417;
        v207 = v418;
        v215 = v418 - v417;
        v216 = v215 - 1;
        if ((char *)v418 - (char *)v417 < 1)
          goto LABEL_280;
        v217 = v200[3];
        v218 = (char *)v417[v216] + 1;
        v417[v216] = v218;
        if ((unint64_t)v218 < *(_QWORD *)(v217 + 8 * v216))
        {
LABEL_279:
          v215 = 1;
LABEL_280:
          if (v216 < 0 || !v215)
            goto LABEL_307;
          continue;
        }
        break;
      }
      v219 = (unint64_t *)&v126[v215 - 2];
      v220 = v217 - 16;
      while (1)
      {
        v221 = v215 - 1;
        v219[1] = 0;
        if (v215 - 1 <= 0)
          goto LABEL_308;
        v222 = *v219 + 1;
        *v219-- = v222;
        v223 = *(_QWORD *)(v220 + 8 * v215--);
        if (v222 < v223)
        {
          v216 = v221 - 1;
          goto LABEL_279;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v60 = (uint64_t)(*a1 + (double)(uint64_t)*a3);
LABEL_119:
          *a3 = (_QWORD *)v60;
          goto LABEL_495;
        case 1:
          v256 = *a1 + *(double *)a3;
LABEL_376:
          *(double *)a3 = v256;
          goto LABEL_495;
        case 2:
          v61 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v284 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v284, (uint64_t)*a3);
          *a3 = v284;
          *v284 = 1;
          do
          {
            v285 = __ldaxr((unint64_t *)v61);
            v64 = --v285 == 0;
          }
          while (__stlxr(v285, (unint64_t *)v61));
          goto LABEL_352;
        case 3:
          v170 = *a3;
          if (**a3 != 1)
          {
            v171 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v171, (uint64_t)*a3);
            *a3 = v171;
            *v171 = 1;
            do
            {
              v172 = __ldaxr(v170);
              v173 = v172 - 1;
            }
            while (__stlxr(v173, v170));
            if (!v173)
            {
              v174 = (void *)v170[1];
              if (v174)
              {
                v170[2] = (unint64_t)v174;
                operator delete(v174);
              }
              MEMORY[0x219A19A08](v170, 0x1080C409938AC02);
            }
          }
          v175 = (double *)(*a3)[1];
          v176 = (*a3)[2] - (_QWORD)v175;
          if (v176)
          {
            v177 = *a1;
            v178 = v176 >> 3;
            if (v178 <= 1)
              v178 = 1;
            do
            {
              *v175 = v177 + *v175;
              ++v175;
              --v178;
            }
            while (v178);
          }
          goto LABEL_495;
        case 4:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v318 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v318, (uint64_t)*a3);
          *a3 = v318;
          *v318 = 1;
          do
          {
            v319 = __ldaxr((unint64_t *)v155);
            v259 = --v319 == 0;
          }
          while (__stlxr(v319, (unint64_t *)v155));
          goto LABEL_479;
        case 5:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v344 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v344, (uint64_t)*a3);
          *a3 = v344;
          *v344 = 1;
          do
          {
            v345 = __ldaxr((unint64_t *)v155);
            v158 = --v345 == 0;
          }
          while (__stlxr(v345, (unint64_t *)v155));
          goto LABEL_437;
        case 6:
          v286 = (*a1 - (double)(uint64_t)floor(*a1)) * 1000000.0;
          v287 = (uint64_t)*a3;
          v288 = (unint64_t)*a3 + vcvtmd_s64_f64(*a1);
          *a3 = (_QWORD *)((unint64_t)*a3 & 0xFF00000000000000 | v288 & 0xFFFFFFFFFFFFFFLL);
          v289 = (uint64_t)v286 + *((int *)a3 + 2);
          if (v289 >= 1000000)
          {
            *a3 = (_QWORD *)((v288 + 1) & 0xFFFFFFFFFFFFFFLL | v287 & 0xFF00000000000000);
            LODWORD(v289) = v289 - 1000000;
          }
          if (v289 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          *((_DWORD *)a3 + 2) = v289;
          goto LABEL_495;
        case 7:
          goto LABEL_494;
        case 8:
          v260 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v354 = operator new();
          v355 = (uint64_t)*a3;
          *(_QWORD *)v354 = **a3;
          *(_QWORD *)(v354 + 8) = *(_QWORD *)(v355 + 8);
          v356 = *(_QWORD *)(v355 + 16);
          *(_QWORD *)(v354 + 16) = v356;
          if (v356)
          {
            v357 = (unsigned int *)(v356 + 8);
            do
              v358 = __ldxr(v357);
            while (__stxr(v358 + 1, v357));
          }
          v359 = *(_OWORD *)(v355 + 24);
          v360 = *(_OWORD *)(v355 + 40);
          *(_OWORD *)(v354 + 56) = *(_OWORD *)(v355 + 56);
          *(_OWORD *)(v354 + 40) = v360;
          *(_OWORD *)(v354 + 24) = v359;
          *a3 = (_QWORD *)v354;
          *(_QWORD *)v354 = 1;
          do
          {
            v361 = __ldaxr((unint64_t *)v260);
            v269 = --v361 == 0;
          }
          while (__stlxr(v361, (unint64_t *)v260));
          goto LABEL_489;
        case 9:
          v224 = *a3;
          if (**a3 != 1)
          {
            v225 = (_QWORD *)operator new();
            v226 = (uint64_t)(*a3 + 1);
            *v225 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v225 + 1, v226);
            *a3 = v225;
            *v225 = 1;
            do
            {
              v227 = __ldaxr(v224);
              v228 = v227 - 1;
            }
            while (__stlxr(v228, v224));
            if (!v228)
            {
              v229 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v224);
              MEMORY[0x219A19A08](v229, 0x1030C407B73B9F7);
            }
          }
          v230 = *a3;
          v232 = (uint64_t *)(*a3)[3];
          v231 = (uint64_t *)(*a3)[4];
          if (v231 == v232)
            goto LABEL_495;
          if (!v230[1])
            goto LABEL_495;
          v233 = *a1;
          v234 = 1;
          do
          {
            v235 = *v232++;
            v234 *= v235;
          }
          while (v232 != v231);
          if (!v234)
            goto LABEL_495;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v230 + 1);
          v236 = (v230[4] - v230[3]) >> 3;
          v416 = 0;
          std::vector<unsigned long>::vector(&v417, v236, &v416);
          v126 = v417;
          v237 = v418;
          break;
        default:
          goto LABEL_545;
      }
      while (2)
      {
        v238 = 0;
        v239 = (char *)v237 - (char *)v126;
        if (v239)
        {
          v240 = v239 >> 3;
          v241 = (uint64_t *)v230[6];
          if (v240 <= 1)
            v240 = 1;
          do
          {
            v243 = (uint64_t)*v126++;
            v242 = v243;
            v244 = *v241++;
            v238 += v244 * v242;
            --v240;
          }
          while (v240);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v230 + 1);
        *(double *)(*(_QWORD *)v230[1] + 8 * (v230[9] + v238)) = v233
                                                               + *(double *)(*(_QWORD *)v230[1] + 8 * (v230[9] + v238));
        v126 = v417;
        v237 = v418;
        v245 = v418 - v417;
        v246 = v245 - 1;
        if ((char *)v418 - (char *)v417 < 1)
          goto LABEL_305;
        v247 = v230[3];
        v248 = (char *)v417[v246] + 1;
        v417[v246] = v248;
        if ((unint64_t)v248 < *(_QWORD *)(v247 + 8 * v246))
        {
LABEL_304:
          v245 = 1;
LABEL_305:
          if (v246 < 0 || !v245)
            goto LABEL_307;
          continue;
        }
        break;
      }
      v249 = (unint64_t *)&v126[v245 - 2];
      v250 = v247 - 16;
      while (1)
      {
        v251 = v245 - 1;
        v249[1] = 0;
        if (v245 - 1 <= 0)
          goto LABEL_308;
        v252 = *v249 + 1;
        *v249-- = v252;
        v253 = *(_QWORD *)(v250 + 8 * v245--);
        if (v252 < v253)
        {
          v246 = v251 - 1;
          goto LABEL_304;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_494;
        case 2:
          v67 = *a1;
          v68 = (uint64_t)*a3;
          if (**a3 != 1)
          {
            v69 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v69, (uint64_t)*a3);
            *a3 = v69;
            *v69 = 1;
            do
            {
              v70 = __ldaxr((unint64_t *)v68);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, (unint64_t *)v68));
            if (!v71)
            {
              if (*(char *)(v68 + 31) < 0)
                operator delete(*(void **)(v68 + 8));
              MEMORY[0x219A19A08](v68, 0x1012C404EF22A49);
            }
          }
          v72 = *(char *)(*(_QWORD *)&v67 + 31);
          if (v72 >= 0)
            v73 = (const std::string::value_type *)(*(_QWORD *)&v67 + 8);
          else
            v73 = *(const std::string::value_type **)(*(_QWORD *)&v67 + 8);
          if (v72 >= 0)
            v74 = *(unsigned __int8 *)(*(_QWORD *)&v67 + 31);
          else
            v74 = *(_QWORD *)(*(_QWORD *)&v67 + 16);
          std::string::append((std::string *)(*a3 + 1), v73, v74);
          goto LABEL_495;
        case 3:
          v85 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v91 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v91, (uint64_t)*a3);
          *a3 = v91;
          *v91 = 1;
          do
          {
            v92 = __ldaxr(v85);
            v88 = --v92 == 0;
          }
          while (__stlxr(v92, v85));
          goto LABEL_245;
        case 4:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v302 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v302, (uint64_t)*a3);
          *a3 = v302;
          *v302 = 1;
          do
          {
            v303 = __ldaxr((unint64_t *)v155);
            v259 = --v303 == 0;
          }
          while (__stlxr(v303, (unint64_t *)v155));
          goto LABEL_479;
        case 5:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v254 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v254, (uint64_t)*a3);
          *a3 = v254;
          *v254 = 1;
          do
          {
            v255 = __ldaxr((unint64_t *)v155);
            v158 = --v255 == 0;
          }
          while (__stlxr(v255, (unint64_t *)v155));
          goto LABEL_437;
        case 8:
          v260 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v304 = operator new();
          v305 = (uint64_t)*a3;
          *(_QWORD *)v304 = **a3;
          *(_QWORD *)(v304 + 8) = *(_QWORD *)(v305 + 8);
          v306 = *(_QWORD *)(v305 + 16);
          *(_QWORD *)(v304 + 16) = v306;
          if (v306)
          {
            v307 = (unsigned int *)(v306 + 8);
            do
              v308 = __ldxr(v307);
            while (__stxr(v308 + 1, v307));
          }
          v309 = *(_OWORD *)(v305 + 24);
          v310 = *(_OWORD *)(v305 + 40);
          *(_OWORD *)(v304 + 56) = *(_OWORD *)(v305 + 56);
          *(_OWORD *)(v304 + 40) = v310;
          *(_OWORD *)(v304 + 24) = v309;
          *a3 = (_QWORD *)v304;
          *(_QWORD *)v304 = 1;
          do
          {
            v311 = __ldaxr((unint64_t *)v260);
            v269 = --v311 == 0;
          }
          while (__stlxr(v311, (unint64_t *)v260));
          goto LABEL_489;
        case 9:
          v93 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v152 = (_QWORD *)operator new();
          v153 = (uint64_t)(*a3 + 1);
          *v152 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v152 + 1, v153);
          *a3 = v152;
          *v152 = 1;
          do
          {
            v154 = __ldaxr(v93);
            v97 = --v154 == 0;
          }
          while (__stlxr(v154, v93));
          goto LABEL_372;
        default:
          goto LABEL_545;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_494;
        case 2:
          v61 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v75 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v75, (uint64_t)*a3);
          *a3 = v75;
          *v75 = 1;
          do
          {
            v76 = __ldaxr((unint64_t *)v61);
            v64 = --v76 == 0;
          }
          while (__stlxr(v76, (unint64_t *)v61));
          goto LABEL_352;
        case 3:
          v98 = *a1;
          v99 = *a3;
          if (**a3 != 1)
          {
            v100 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v100, (uint64_t)*a3);
            *a3 = v100;
            *v100 = 1;
            do
            {
              v101 = __ldaxr(v99);
              v102 = v101 - 1;
            }
            while (__stlxr(v102, v99));
            if (!v102)
            {
              v103 = (void *)v99[1];
              if (v103)
              {
                v99[2] = (unint64_t)v103;
                operator delete(v103);
              }
              MEMORY[0x219A19A08](v99, 0x1080C409938AC02);
            }
          }
          v104 = (uint64_t)*a3;
          turi::flexible_type_fail((*a3)[2] - (*a3)[1] == *(_QWORD *)(*(_QWORD *)&v98 + 16)
                                                        - *(_QWORD *)(*(_QWORD *)&v98 + 8));
          v105 = *(double **)(v104 + 8);
          v106 = *(_QWORD *)(v104 + 16) - (_QWORD)v105;
          if (v106)
          {
            v107 = v106 >> 3;
            v108 = *(double **)(*(_QWORD *)&v98 + 8);
            if (v107 <= 1)
              v107 = 1;
            do
            {
              v109 = *v108++;
              *v105 = v109 + *v105;
              ++v105;
              --v107;
            }
            while (v107);
          }
          goto LABEL_495;
        case 4:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v314 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v314, (uint64_t)*a3);
          *a3 = v314;
          *v314 = 1;
          do
          {
            v315 = __ldaxr((unint64_t *)v155);
            v259 = --v315 == 0;
          }
          while (__stlxr(v315, (unint64_t *)v155));
          goto LABEL_479;
        case 5:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v273 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v273, (uint64_t)*a3);
          *a3 = v273;
          *v273 = 1;
          do
          {
            v274 = __ldaxr((unint64_t *)v155);
            v158 = --v274 == 0;
          }
          while (__stlxr(v274, (unint64_t *)v155));
          goto LABEL_437;
        case 8:
          v260 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v324 = operator new();
          v325 = (uint64_t)*a3;
          *(_QWORD *)v324 = **a3;
          *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
          v326 = *(_QWORD *)(v325 + 16);
          *(_QWORD *)(v324 + 16) = v326;
          if (v326)
          {
            v327 = (unsigned int *)(v326 + 8);
            do
              v328 = __ldxr(v327);
            while (__stxr(v328 + 1, v327));
          }
          v329 = *(_OWORD *)(v325 + 24);
          v330 = *(_OWORD *)(v325 + 40);
          *(_OWORD *)(v324 + 56) = *(_OWORD *)(v325 + 56);
          *(_OWORD *)(v324 + 40) = v330;
          *(_OWORD *)(v324 + 24) = v329;
          *a3 = (_QWORD *)v324;
          *(_QWORD *)v324 = 1;
          do
          {
            v331 = __ldaxr((unint64_t *)v260);
            v269 = --v331 == 0;
          }
          while (__stlxr(v331, (unint64_t *)v260));
          goto LABEL_489;
        case 9:
          v93 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v181 = (_QWORD *)operator new();
          v182 = (uint64_t)(*a3 + 1);
          *v181 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v181 + 1, v182);
          *a3 = v181;
          *v181 = 1;
          do
          {
            v183 = __ldaxr(v93);
            v97 = --v183 == 0;
          }
          while (__stlxr(v183, v93));
          goto LABEL_372;
        default:
          goto LABEL_545;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_494;
        case 2:
          v61 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v62 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v62, (uint64_t)*a3);
          *a3 = v62;
          *v62 = 1;
          do
          {
            v63 = __ldaxr((unint64_t *)v61);
            v64 = --v63 == 0;
          }
          while (__stlxr(v63, (unint64_t *)v61));
          goto LABEL_352;
        case 3:
          v85 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v86 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v86, (uint64_t)*a3);
          *a3 = v86;
          *v86 = 1;
          do
          {
            v87 = __ldaxr(v85);
            v88 = --v87 == 0;
          }
          while (__stlxr(v87, v85));
          goto LABEL_245;
        case 4:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v257 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v257, (uint64_t)*a3);
          *a3 = v257;
          *v257 = 1;
          do
          {
            v258 = __ldaxr((unint64_t *)v155);
            v259 = --v258 == 0;
          }
          while (__stlxr(v258, (unint64_t *)v155));
          goto LABEL_479;
        case 5:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v156 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v156, (uint64_t)*a3);
          *a3 = v156;
          *v156 = 1;
          do
          {
            v157 = __ldaxr((unint64_t *)v155);
            v158 = --v157 == 0;
          }
          while (__stlxr(v157, (unint64_t *)v155));
          goto LABEL_437;
        case 8:
          v260 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v261 = operator new();
          v262 = (uint64_t)*a3;
          *(_QWORD *)v261 = **a3;
          *(_QWORD *)(v261 + 8) = *(_QWORD *)(v262 + 8);
          v263 = *(_QWORD *)(v262 + 16);
          *(_QWORD *)(v261 + 16) = v263;
          if (v263)
          {
            v264 = (unsigned int *)(v263 + 8);
            do
              v265 = __ldxr(v264);
            while (__stxr(v265 + 1, v264));
          }
          v266 = *(_OWORD *)(v262 + 24);
          v267 = *(_OWORD *)(v262 + 40);
          *(_OWORD *)(v261 + 56) = *(_OWORD *)(v262 + 56);
          *(_OWORD *)(v261 + 40) = v267;
          *(_OWORD *)(v261 + 24) = v266;
          *a3 = (_QWORD *)v261;
          *(_QWORD *)v261 = 1;
          do
          {
            v268 = __ldaxr((unint64_t *)v260);
            v269 = --v268 == 0;
          }
          while (__stlxr(v268, (unint64_t *)v260));
          goto LABEL_489;
        case 9:
          v93 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v94 = (_QWORD *)operator new();
          v95 = (uint64_t)(*a3 + 1);
          *v94 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v94 + 1, v95);
          *a3 = v94;
          *v94 = 1;
          do
          {
            v96 = __ldaxr(v93);
            v97 = --v96 == 0;
          }
          while (__stlxr(v96, v93));
          goto LABEL_372;
        default:
          goto LABEL_545;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_494;
        case 2:
          v61 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v79 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v79, (uint64_t)*a3);
          *a3 = v79;
          *v79 = 1;
          do
          {
            v80 = __ldaxr((unint64_t *)v61);
            v64 = --v80 == 0;
          }
          while (__stlxr(v80, (unint64_t *)v61));
          goto LABEL_352;
        case 3:
          v85 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v159 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v159, (uint64_t)*a3);
          *a3 = v159;
          *v159 = 1;
          do
          {
            v160 = __ldaxr(v85);
            v88 = --v160 == 0;
          }
          while (__stlxr(v160, v85));
          goto LABEL_245;
        case 4:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v362 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v362, (uint64_t)*a3);
          *a3 = v362;
          *v362 = 1;
          do
          {
            v363 = __ldaxr((unint64_t *)v155);
            v259 = --v363 == 0;
          }
          while (__stlxr(v363, (unint64_t *)v155));
          goto LABEL_479;
        case 5:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v312 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v312, (uint64_t)*a3);
          *a3 = v312;
          *v312 = 1;
          do
          {
            v313 = __ldaxr((unint64_t *)v155);
            v158 = --v313 == 0;
          }
          while (__stlxr(v313, (unint64_t *)v155));
          goto LABEL_437;
        case 8:
          v260 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v364 = operator new();
          v365 = (uint64_t)*a3;
          *(_QWORD *)v364 = **a3;
          *(_QWORD *)(v364 + 8) = *(_QWORD *)(v365 + 8);
          v366 = *(_QWORD *)(v365 + 16);
          *(_QWORD *)(v364 + 16) = v366;
          if (v366)
          {
            v367 = (unsigned int *)(v366 + 8);
            do
              v368 = __ldxr(v367);
            while (__stxr(v368 + 1, v367));
          }
          v369 = *(_OWORD *)(v365 + 24);
          v370 = *(_OWORD *)(v365 + 40);
          *(_OWORD *)(v364 + 56) = *(_OWORD *)(v365 + 56);
          *(_OWORD *)(v364 + 40) = v370;
          *(_OWORD *)(v364 + 24) = v369;
          *a3 = (_QWORD *)v364;
          *(_QWORD *)v364 = 1;
          do
          {
            v371 = __ldaxr((unint64_t *)v260);
            v269 = --v371 == 0;
          }
          while (__stlxr(v371, (unint64_t *)v260));
          goto LABEL_489;
        case 9:
          v93 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v270 = (_QWORD *)operator new();
          v271 = (uint64_t)(*a3 + 1);
          *v270 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v270 + 1, v271);
          *a3 = v270;
          *v270 = 1;
          do
          {
            v272 = __ldaxr(v93);
            v97 = --v272 == 0;
          }
          while (__stlxr(v272, v93));
          goto LABEL_372;
        default:
          goto LABEL_545;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_494;
        case 2:
          v61 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v81 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v81, (uint64_t)*a3);
          *a3 = v81;
          *v81 = 1;
          do
          {
            v82 = __ldaxr((unint64_t *)v61);
            v64 = --v82 == 0;
          }
          while (__stlxr(v82, (unint64_t *)v61));
          goto LABEL_352;
        case 3:
          v85 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v179 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v179, (uint64_t)*a3);
          *a3 = v179;
          *v179 = 1;
          do
          {
            v180 = __ldaxr(v85);
            v88 = --v180 == 0;
          }
          while (__stlxr(v180, v85));
          goto LABEL_245;
        case 4:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v372 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v372, (uint64_t)*a3);
          *a3 = v372;
          *v372 = 1;
          do
          {
            v373 = __ldaxr((unint64_t *)v155);
            v259 = --v373 == 0;
          }
          while (__stlxr(v373, (unint64_t *)v155));
          goto LABEL_479;
        case 5:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v322 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v322, (uint64_t)*a3);
          *a3 = v322;
          *v322 = 1;
          do
          {
            v323 = __ldaxr((unint64_t *)v155);
            v158 = --v323 == 0;
          }
          while (__stlxr(v323, (unint64_t *)v155));
          goto LABEL_437;
        case 8:
          v260 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v374 = operator new();
          v375 = (uint64_t)*a3;
          *(_QWORD *)v374 = **a3;
          *(_QWORD *)(v374 + 8) = *(_QWORD *)(v375 + 8);
          v376 = *(_QWORD *)(v375 + 16);
          *(_QWORD *)(v374 + 16) = v376;
          if (v376)
          {
            v377 = (unsigned int *)(v376 + 8);
            do
              v378 = __ldxr(v377);
            while (__stxr(v378 + 1, v377));
          }
          v379 = *(_OWORD *)(v375 + 24);
          v380 = *(_OWORD *)(v375 + 40);
          *(_OWORD *)(v374 + 56) = *(_OWORD *)(v375 + 56);
          *(_OWORD *)(v374 + 40) = v380;
          *(_OWORD *)(v374 + 24) = v379;
          *a3 = (_QWORD *)v374;
          *(_QWORD *)v374 = 1;
          do
          {
            v381 = __ldaxr((unint64_t *)v260);
            v269 = --v381 == 0;
          }
          while (__stlxr(v381, (unint64_t *)v260));
          goto LABEL_489;
        case 9:
          v93 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v279 = (_QWORD *)operator new();
          v280 = (uint64_t)(*a3 + 1);
          *v279 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v279 + 1, v280);
          *a3 = v279;
          *v279 = 1;
          do
          {
            v281 = __ldaxr(v93);
            v97 = --v281 == 0;
          }
          while (__stlxr(v281, v93));
          goto LABEL_372;
        default:
          goto LABEL_545;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_494;
        case 2:
          v61 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v77 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v77, (uint64_t)*a3);
          *a3 = v77;
          *v77 = 1;
          do
          {
            v78 = __ldaxr((unint64_t *)v61);
            v64 = --v78 == 0;
          }
          while (__stlxr(v78, (unint64_t *)v61));
          goto LABEL_352;
        case 3:
          v85 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v110 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v110, (uint64_t)*a3);
          *a3 = v110;
          *v110 = 1;
          do
          {
            v111 = __ldaxr(v85);
            v88 = --v111 == 0;
          }
          while (__stlxr(v111, v85));
          goto LABEL_245;
        case 4:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v320 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v320, (uint64_t)*a3);
          *a3 = v320;
          *v320 = 1;
          do
          {
            v321 = __ldaxr((unint64_t *)v155);
            v259 = --v321 == 0;
          }
          while (__stlxr(v321, (unint64_t *)v155));
          goto LABEL_479;
        case 5:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v275 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v275, (uint64_t)*a3);
          *a3 = v275;
          *v275 = 1;
          do
          {
            v276 = __ldaxr((unint64_t *)v155);
            v158 = --v276 == 0;
          }
          while (__stlxr(v276, (unint64_t *)v155));
          goto LABEL_437;
        case 8:
          v260 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v332 = operator new();
          v333 = (uint64_t)*a3;
          *(_QWORD *)v332 = **a3;
          *(_QWORD *)(v332 + 8) = *(_QWORD *)(v333 + 8);
          v334 = *(_QWORD *)(v333 + 16);
          *(_QWORD *)(v332 + 16) = v334;
          if (v334)
          {
            v335 = (unsigned int *)(v334 + 8);
            do
              v336 = __ldxr(v335);
            while (__stxr(v336 + 1, v335));
          }
          v337 = *(_OWORD *)(v333 + 24);
          v338 = *(_OWORD *)(v333 + 40);
          *(_OWORD *)(v332 + 56) = *(_OWORD *)(v333 + 56);
          *(_OWORD *)(v332 + 40) = v338;
          *(_OWORD *)(v332 + 24) = v337;
          *a3 = (_QWORD *)v332;
          *(_QWORD *)v332 = 1;
          do
          {
            v339 = __ldaxr((unint64_t *)v260);
            v269 = --v339 == 0;
          }
          while (__stlxr(v339, (unint64_t *)v260));
          goto LABEL_489;
        case 9:
          v93 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v191 = (_QWORD *)operator new();
          v192 = (uint64_t)(*a3 + 1);
          *v191 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v191 + 1, v192);
          *a3 = v191;
          *v191 = 1;
          do
          {
            v193 = __ldaxr(v93);
            v97 = --v193 == 0;
          }
          while (__stlxr(v193, v93));
          goto LABEL_372;
        default:
          goto LABEL_545;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_494;
        case 2:
          v61 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v83 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v83, (uint64_t)*a3);
          *a3 = v83;
          *v83 = 1;
          do
          {
            v84 = __ldaxr((unint64_t *)v61);
            v64 = --v84 == 0;
          }
          while (__stlxr(v84, (unint64_t *)v61));
          goto LABEL_352;
        case 3:
          v85 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v184 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v184, (uint64_t)*a3);
          *a3 = v184;
          *v184 = 1;
          do
          {
            v185 = __ldaxr(v85);
            v88 = --v185 == 0;
          }
          while (__stlxr(v185, v85));
          goto LABEL_245;
        case 4:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v382 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v382, (uint64_t)*a3);
          *a3 = v382;
          *v382 = 1;
          do
          {
            v383 = __ldaxr((unint64_t *)v155);
            v259 = --v383 == 0;
          }
          while (__stlxr(v383, (unint64_t *)v155));
          goto LABEL_479;
        case 5:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v340 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v340, (uint64_t)*a3);
          *a3 = v340;
          *v340 = 1;
          do
          {
            v341 = __ldaxr((unint64_t *)v155);
            v158 = --v341 == 0;
          }
          while (__stlxr(v341, (unint64_t *)v155));
          goto LABEL_437;
        case 8:
          v260 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v384 = operator new();
          v385 = (uint64_t)*a3;
          *(_QWORD *)v384 = **a3;
          *(_QWORD *)(v384 + 8) = *(_QWORD *)(v385 + 8);
          v386 = *(_QWORD *)(v385 + 16);
          *(_QWORD *)(v384 + 16) = v386;
          if (v386)
          {
            v387 = (unsigned int *)(v386 + 8);
            do
              v388 = __ldxr(v387);
            while (__stxr(v388 + 1, v387));
          }
          v389 = *(_OWORD *)(v385 + 24);
          v390 = *(_OWORD *)(v385 + 40);
          *(_OWORD *)(v384 + 56) = *(_OWORD *)(v385 + 56);
          *(_OWORD *)(v384 + 40) = v390;
          *(_OWORD *)(v384 + 24) = v389;
          *a3 = (_QWORD *)v384;
          *(_QWORD *)v384 = 1;
          do
          {
            v391 = __ldaxr((unint64_t *)v260);
            v269 = --v391 == 0;
          }
          while (__stlxr(v391, (unint64_t *)v260));
          goto LABEL_489;
        case 9:
          v93 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v298 = (_QWORD *)operator new();
          v299 = (uint64_t)(*a3 + 1);
          *v298 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v298 + 1, v299);
          *a3 = v298;
          *v298 = 1;
          do
          {
            v300 = __ldaxr(v93);
            v97 = --v300 == 0;
          }
          while (__stlxr(v300, v93));
LABEL_372:
          if (!v97)
            goto LABEL_494;
          v187 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v93);
          v301 = 2071181815;
          goto LABEL_492;
        default:
          goto LABEL_545;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_494;
        case 2:
          v61 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v65 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v65, (uint64_t)*a3);
          *a3 = v65;
          *v65 = 1;
          do
          {
            v66 = __ldaxr((unint64_t *)v61);
            v64 = --v66 == 0;
          }
          while (__stlxr(v66, (unint64_t *)v61));
LABEL_352:
          if (!v64)
            goto LABEL_494;
          if (*(char *)(v61 + 31) < 0)
            operator delete(*(void **)(v61 + 8));
          v187 = (_QWORD *)v61;
          v188 = 0x1012C404EF22A49;
          goto LABEL_493;
        case 3:
          v85 = *a3;
          if (**a3 == 1)
            goto LABEL_494;
          v89 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v89, (uint64_t)*a3);
          *a3 = v89;
          *v89 = 1;
          do
          {
            v90 = __ldaxr(v85);
            v88 = --v90 == 0;
          }
          while (__stlxr(v90, v85));
LABEL_245:
          if (!v88)
            goto LABEL_494;
          v186 = (void *)v85[1];
          if (v186)
          {
            v85[2] = (unint64_t)v186;
            operator delete(v186);
          }
          v187 = v85;
          v188 = 0x1080C409938AC02;
          goto LABEL_493;
        case 4:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v277 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v277, (uint64_t)*a3);
          *a3 = v277;
          *v277 = 1;
          do
          {
            v278 = __ldaxr((unint64_t *)v155);
            v259 = --v278 == 0;
          }
          while (__stlxr(v278, (unint64_t *)v155));
LABEL_479:
          if (!v259)
            goto LABEL_494;
          v417 = (void **)(v155 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v417);
          goto LABEL_482;
        case 5:
          v155 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v189 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v189, (uint64_t)*a3);
          *a3 = v189;
          *v189 = 1;
          do
          {
            v190 = __ldaxr((unint64_t *)v155);
            v158 = --v190 == 0;
          }
          while (__stlxr(v190, (unint64_t *)v155));
LABEL_437:
          if (!v158)
            goto LABEL_494;
          v417 = (void **)(v155 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v417);
LABEL_482:
          v187 = (_QWORD *)v155;
          v188 = 0x1020C405E66F15BLL;
          goto LABEL_493;
        case 8:
          v260 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_494;
          v290 = operator new();
          v291 = (uint64_t)*a3;
          *(_QWORD *)v290 = **a3;
          *(_QWORD *)(v290 + 8) = *(_QWORD *)(v291 + 8);
          v292 = *(_QWORD *)(v291 + 16);
          *(_QWORD *)(v290 + 16) = v292;
          if (v292)
          {
            v293 = (unsigned int *)(v292 + 8);
            do
              v294 = __ldxr(v293);
            while (__stxr(v294 + 1, v293));
          }
          v295 = *(_OWORD *)(v291 + 24);
          v296 = *(_OWORD *)(v291 + 40);
          *(_OWORD *)(v290 + 56) = *(_OWORD *)(v291 + 56);
          *(_OWORD *)(v290 + 40) = v296;
          *(_OWORD *)(v290 + 24) = v295;
          *a3 = (_QWORD *)v290;
          *(_QWORD *)v290 = 1;
          do
          {
            v297 = __ldaxr((unint64_t *)v260);
            v269 = --v297 == 0;
          }
          while (__stlxr(v297, (unint64_t *)v260));
LABEL_489:
          if (!v269)
            goto LABEL_494;
          boost::detail::shared_count::~shared_count((unsigned int **)(v260 + 16));
          v187 = (_QWORD *)v260;
          v301 = -235920773;
LABEL_492:
          v188 = v301 | 0x1030C4000000000;
LABEL_493:
          MEMORY[0x219A19A08](v187, v188);
LABEL_494:
          turi::flexible_type_fail(0);
          goto LABEL_495;
        case 9:
          v112 = *a1;
          v113 = *a3;
          if (**a3 != 1)
          {
            v114 = (_QWORD *)operator new();
            v115 = (uint64_t)(*a3 + 1);
            *v114 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v114 + 1, v115);
            *a3 = v114;
            *v114 = 1;
            do
            {
              v116 = __ldaxr(v113);
              v117 = v116 - 1;
            }
            while (__stlxr(v117, v113));
            if (!v117)
            {
              v118 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v113);
              MEMORY[0x219A19A08](v118, 0x1030C407B73B9F7);
            }
          }
          v119 = (uint64_t)*a3;
          v120 = *a3 + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v120, *(_QWORD *)&v112 + 8))
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v122 = *(uint64_t **)(v119 + 24);
          v121 = *(uint64_t **)(v119 + 32);
          if (v121 == v122)
            goto LABEL_495;
          if (!*v120)
            goto LABEL_495;
          v123 = 1;
          do
          {
            v124 = *v122++;
            v123 *= v124;
          }
          while (v122 != v121);
          if (!v123)
            goto LABEL_495;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v120);
          v125 = (uint64_t)(*(_QWORD *)(v119 + 32) - *(_QWORD *)(v119 + 24)) >> 3;
          v416 = 0;
          std::vector<unsigned long>::vector(&v417, v125, &v416);
          v126 = v417;
          v127 = v418;
          break;
        default:
          goto LABEL_545;
      }
      break;
    default:
LABEL_545:
      turi::flexible_type_fail(0);
      goto LABEL_548;
  }
  while (2)
  {
    v128 = (char *)v127 - (char *)v126;
    if (v128)
    {
      v129 = 0;
      v130 = v128 >> 3;
      v131 = *(uint64_t **)(*(_QWORD *)&v112 + 48);
      if (v130 <= 1)
        v130 = 1;
      v132 = v126;
      v133 = v130;
      do
      {
        v135 = (uint64_t)*v132++;
        v134 = v135;
        v136 = *v131++;
        v129 += v136 * v134;
        --v133;
      }
      while (v133);
      v137 = 0;
      v138 = *(double *)(**(_QWORD **)(*(_QWORD *)&v112 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v112 + 72) + v129));
      v139 = *(uint64_t **)(v119 + 48);
      do
      {
        v141 = (uint64_t)*v126++;
        v140 = v141;
        v142 = *v139++;
        v137 += v142 * v140;
        --v130;
      }
      while (v130);
    }
    else
    {
      v137 = 0;
      v138 = *(double *)(**(_QWORD **)(*(_QWORD *)&v112 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v112 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v120);
    *(double *)(**(_QWORD **)(v119 + 8) + 8 * (*(_QWORD *)(v119 + 72) + v137)) = v138
                                                                               + *(double *)(**(_QWORD **)(v119 + 8)
                                                                                           + 8
                                                                                           * (*(_QWORD *)(v119 + 72)
                                                                                            + v137));
    v126 = v417;
    v127 = v418;
    v143 = v418 - v417;
    v144 = v143 - 1;
    if ((char *)v418 - (char *)v417 < 1)
    {
LABEL_195:
      if (v144 < 0 || !v143)
        goto LABEL_307;
      continue;
    }
    break;
  }
  v145 = *(_QWORD *)(v119 + 24);
  v146 = (char *)v417[v144] + 1;
  v417[v144] = v146;
  if ((unint64_t)v146 < *(_QWORD *)(v145 + 8 * v144))
  {
LABEL_194:
    v143 = 1;
    goto LABEL_195;
  }
  v147 = (unint64_t *)&v126[v143 - 2];
  v148 = v145 - 16;
  while (1)
  {
    v149 = v143 - 1;
    v147[1] = 0;
    if (v143 - 1 <= 0)
      break;
    v150 = *v147 + 1;
    *v147-- = v150;
    v151 = *(_QWORD *)(v148 + 8 * v143--);
    if (v150 < v151)
    {
      v144 = v149 - 1;
      goto LABEL_194;
    }
  }
LABEL_307:
  if (v126)
  {
LABEL_308:
    v418 = v126;
    operator delete(v126);
  }
LABEL_495:
  switch(v4)
  {
    case 2u:
      do
      {
        v392 = __ldaxr((unint64_t *)v8);
        v393 = v392 - 1;
      }
      while (__stlxr(v393, (unint64_t *)v8));
      if (v393)
        v394 = 1;
      else
        v394 = v8 == 0;
      if (!v394)
      {
        if (*(char *)(v8 + 31) < 0)
          operator delete(*(void **)(v8 + 8));
        v395 = v8;
        v396 = 0x1012C404EF22A49;
        goto LABEL_542;
      }
      break;
    case 3u:
      do
      {
        v406 = __ldaxr((unint64_t *)v8);
        v407 = v406 - 1;
      }
      while (__stlxr(v407, (unint64_t *)v8));
      if (v407)
        v408 = 1;
      else
        v408 = v8 == 0;
      if (!v408)
      {
        v409 = *(void **)(v8 + 8);
        if (v409)
        {
          *(_QWORD *)(v8 + 16) = v409;
          operator delete(v409);
        }
        v395 = v8;
        v396 = 0x1080C409938AC02;
        goto LABEL_542;
      }
      break;
    case 4u:
      do
      {
        v397 = __ldaxr((unint64_t *)v8);
        v398 = v397 - 1;
      }
      while (__stlxr(v398, (unint64_t *)v8));
      if (v398)
        v399 = 1;
      else
        v399 = v8 == 0;
      if (!v399)
      {
        v417 = (void **)(v8 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v417);
        goto LABEL_534;
      }
      break;
    case 5u:
      do
      {
        v410 = __ldaxr((unint64_t *)v8);
        v411 = v410 - 1;
      }
      while (__stlxr(v411, (unint64_t *)v8));
      if (v411)
        v412 = 1;
      else
        v412 = v8 == 0;
      if (!v412)
      {
        v417 = (void **)(v8 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v417);
LABEL_534:
        v395 = v8;
        v396 = 0x1020C405E66F15BLL;
        goto LABEL_542;
      }
      break;
    case 8u:
      do
      {
        v413 = __ldaxr((unint64_t *)v8);
        v414 = v413 - 1;
      }
      while (__stlxr(v414, (unint64_t *)v8));
      if (v414)
        v415 = 1;
      else
        v415 = v8 == 0;
      if (!v415)
      {
        boost::detail::shared_count::~shared_count((unsigned int **)(v8 + 16));
        v395 = v8;
        v405 = -235920773;
        goto LABEL_541;
      }
      break;
    case 9u:
      do
      {
        v400 = __ldaxr((unint64_t *)v8);
        v401 = v400 - 1;
      }
      while (__stlxr(v401, (unint64_t *)v8));
      if (v401)
        v402 = 1;
      else
        v402 = v8 == 0;
      if (!v402)
      {
        v403 = *(void **)(v8 + 48);
        if (v403)
        {
          *(_QWORD *)(v8 + 56) = v403;
          operator delete(v403);
        }
        v404 = *(void **)(v8 + 24);
        if (v404)
        {
          *(_QWORD *)(v8 + 32) = v404;
          operator delete(v404);
        }
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v8 + 8);
        v395 = v8;
        v405 = 2071181815;
LABEL_541:
        v396 = v405 | 0x1030C4000000000;
LABEL_542:
        MEMORY[0x219A19A08](v395, v396);
      }
      break;
    default:
      return;
  }
}

void sub_21824CA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  uint64_t v14;
  unint64_t **v15;
  uint64_t v16;
  int v17;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;

  MEMORY[0x219A19A08](v16, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v15 + 12))
  {
    case 2:
      v19 = *v15;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
        goto LABEL_40;
      v22 = *v15;
      if (!*v15)
        goto LABEL_39;
      if (*((char *)v22 + 31) < 0)
        operator delete((void *)v22[1]);
      v23 = v22;
      v24 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v33 = *v15;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (v35)
        goto LABEL_40;
      v36 = *v15;
      if (!*v15)
        goto LABEL_39;
      v37 = (void *)v36[1];
      if (v37)
      {
        v36[2] = (unint64_t)v37;
        operator delete(v37);
      }
      v23 = v36;
      v24 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v15;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v15;
      if (!*v15)
        goto LABEL_39;
      a14 = v28 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v38 = *v15;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (v40)
        goto LABEL_40;
      v28 = *v15;
      if (!*v15)
        goto LABEL_39;
      a14 = v28 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v23 = v28;
      v24 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v41 = *v15;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (v43)
        goto LABEL_40;
      v44 = *v15;
      if (!*v15)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v44 + 2);
      v23 = v44;
      v32 = -235920773;
      goto LABEL_37;
    case 9:
      v29 = *v15;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      if (!*v15)
        goto LABEL_39;
      v23 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v15);
      v32 = 2071181815;
LABEL_37:
      v24 = v32 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v23, v24);
LABEL_39:
      *v15 = 0;
LABEL_40:
      *v15 = 0;
      *((_DWORD *)v15 + 2) = 0;
      *((_BYTE *)v15 + 12) = 0;
      switch(v17)
      {
        case 2:
          do
          {
            v45 = __ldaxr((unint64_t *)v14);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, (unint64_t *)v14));
          if (v46)
            v47 = 1;
          else
            v47 = v14 == 0;
          if (v47)
            goto LABEL_84;
          if (*(char *)(v14 + 31) < 0)
            operator delete(*(void **)(v14 + 8));
          v48 = (_QWORD *)v14;
          v49 = 0x1012C404EF22A49;
          goto LABEL_83;
        case 3:
          do
          {
            v57 = __ldaxr((unint64_t *)v14);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, (unint64_t *)v14));
          if (v58)
            v59 = 1;
          else
            v59 = v14 == 0;
          if (v59)
            goto LABEL_84;
          v60 = *(void **)(v14 + 8);
          if (v60)
          {
            *(_QWORD *)(v14 + 16) = v60;
            operator delete(v60);
          }
          v48 = (_QWORD *)v14;
          v49 = 0x1080C409938AC02;
          goto LABEL_83;
        case 4:
          do
          {
            v50 = __ldaxr((unint64_t *)v14);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, (unint64_t *)v14));
          if (v51)
            v52 = 1;
          else
            v52 = v14 == 0;
          if (v52)
            goto LABEL_84;
          a14 = (unint64_t *)(v14 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
          goto LABEL_75;
        case 5:
          do
          {
            v61 = __ldaxr((unint64_t *)v14);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, (unint64_t *)v14));
          if (v62)
            v63 = 1;
          else
            v63 = v14 == 0;
          if (v63)
            goto LABEL_84;
          a14 = (unint64_t *)(v14 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_75:
          v48 = (_QWORD *)v14;
          v49 = 0x1020C405E66F15BLL;
          goto LABEL_83;
        case 8:
          do
          {
            v64 = __ldaxr((unint64_t *)v14);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, (unint64_t *)v14));
          if (v65)
            v66 = 1;
          else
            v66 = v14 == 0;
          if (v66)
            goto LABEL_84;
          boost::detail::shared_count::~shared_count((unsigned int **)(v14 + 16));
          v48 = (_QWORD *)v14;
          v56 = -235920773;
          goto LABEL_82;
        case 9:
          do
          {
            v53 = __ldaxr((unint64_t *)v14);
            v54 = v53 - 1;
          }
          while (__stlxr(v54, (unint64_t *)v14));
          if (v54)
            v55 = 1;
          else
            v55 = v14 == 0;
          if (v55)
            goto LABEL_84;
          v48 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v14);
          v56 = 2071181815;
LABEL_82:
          v49 = v56 | 0x1030C4000000000;
LABEL_83:
          MEMORY[0x219A19A08](v48, v49);
LABEL_84:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_84;
      }
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933D18;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933D18;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD **a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_10::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  double v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  _QWORD *v55;
  unint64_t v56;
  double v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  void **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t *v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  void *v110;
  double *v111;
  uint64_t v112;
  unint64_t v113;
  double v114;
  unint64_t *v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  void *v119;
  double *v120;
  uint64_t v121;
  double v122;
  unint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  void *v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void **v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  unint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void **v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  unint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  double v201;
  _QWORD *v202;
  unint64_t v203;
  BOOL v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int *v209;
  unsigned int v210;
  __int128 v211;
  __int128 v212;
  unint64_t v213;
  BOOL v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  unint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  double v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int *v238;
  unsigned int v239;
  __int128 v240;
  __int128 v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  _QWORD *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  __int128 v254;
  __int128 v255;
  unint64_t v256;
  _QWORD *v257;
  unint64_t v258;
  _QWORD *v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int *v272;
  unsigned int v273;
  __int128 v274;
  __int128 v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int *v280;
  unsigned int v281;
  __int128 v282;
  __int128 v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  _QWORD *v287;
  unint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int *v294;
  unsigned int v295;
  __int128 v296;
  __int128 v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  __int128 v304;
  __int128 v305;
  unint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int *v312;
  unsigned int v313;
  __int128 v314;
  __int128 v315;
  unint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int *v322;
  unsigned int v323;
  __int128 v324;
  __int128 v325;
  unint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  __int128 v334;
  __int128 v335;
  unint64_t v336;
  uint64_t v337;
  void **v338;
  void **v339;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((_QWORD **)a1 != a3)
  {
    *(_QWORD **)((char *)a3 + 5) = *(_QWORD **)(a1 + 5);
    *a3 = *(_QWORD **)a1;
    v5 = *(unsigned __int8 *)(a1 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = *a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)*a3 - *(_QWORD *)a2;
          goto LABEL_38;
        case 1:
          v201 = (double)*(uint64_t *)a2;
          goto LABEL_295;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v227 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v227, (uint64_t)*a3);
          *a3 = v227;
          *v227 = 1;
          do
          {
            v228 = __ldaxr((unint64_t *)v12);
            v15 = --v228 == 0;
          }
          while (__stlxr(v228, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v106 = *a3;
          if (**a3 != 1)
          {
            v107 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v107, (uint64_t)*a3);
            *a3 = v107;
            *v107 = 1;
            do
            {
              v108 = __ldaxr(v106);
              v109 = v108 - 1;
            }
            while (__stlxr(v109, v106));
            if (!v109)
            {
              v110 = (void *)v106[1];
              if (v110)
              {
                v106[2] = (unint64_t)v110;
                operator delete(v110);
              }
              MEMORY[0x219A19A08](v106, 0x1080C409938AC02);
            }
          }
          v111 = (double *)(*a3)[1];
          v112 = (*a3)[2] - (_QWORD)v111;
          if (v112)
          {
            v113 = v112 >> 3;
            v114 = (double)*(uint64_t *)a2;
            if (v113 <= 1)
              v113 = 1;
            do
            {
              *v111 = *v111 - v114;
              ++v111;
              --v113;
            }
            while (v113);
          }
          return;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v261 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v261, (uint64_t)*a3);
          *a3 = v261;
          *v261 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v100);
            v204 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v287 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v287, (uint64_t)*a3);
          *a3 = v287;
          *v287 = 1;
          do
          {
            v288 = __ldaxr((unint64_t *)v100);
            v103 = --v288 == 0;
          }
          while (__stlxr(v288, (unint64_t *)v100));
          goto LABEL_356;
        case 6:
          *a3 = (_QWORD *)((unint64_t)*a3 & 0xFF00000000000000 | ((unint64_t)*a3 - *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL);
          return;
        case 7:
          goto LABEL_413;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v291 = operator new();
          v292 = (uint64_t)*a3;
          *(_QWORD *)v291 = **a3;
          *(_QWORD *)(v291 + 8) = *(_QWORD *)(v292 + 8);
          v293 = *(_QWORD *)(v292 + 16);
          *(_QWORD *)(v291 + 16) = v293;
          if (v293)
          {
            v294 = (unsigned int *)(v293 + 8);
            do
              v295 = __ldxr(v294);
            while (__stxr(v295 + 1, v294));
          }
          v296 = *(_OWORD *)(v292 + 24);
          v297 = *(_OWORD *)(v292 + 40);
          *(_OWORD *)(v291 + 56) = *(_OWORD *)(v292 + 56);
          *(_OWORD *)(v291 + 40) = v297;
          *(_OWORD *)(v291 + 24) = v296;
          *a3 = (_QWORD *)v291;
          *(_QWORD *)v291 = 1;
          do
          {
            v298 = __ldaxr((unint64_t *)v205);
            v214 = --v298 == 0;
          }
          while (__stlxr(v298, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v139 = *a3;
          if (**a3 != 1)
          {
            v140 = (_QWORD *)operator new();
            v141 = (uint64_t)(*a3 + 1);
            *v140 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v140 + 1, v141);
            *a3 = v140;
            *v140 = 1;
            do
            {
              v142 = __ldaxr(v139);
              v143 = v142 - 1;
            }
            while (__stlxr(v143, v139));
            if (!v143)
            {
              v144 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v139);
              MEMORY[0x219A19A08](v144, 0x1030C407B73B9F7);
            }
          }
          v145 = *a3;
          v147 = (uint64_t *)(*a3)[3];
          v146 = (uint64_t *)(*a3)[4];
          if (v146 == v147)
            return;
          if (!v145[1])
            return;
          v148 = (double)*(uint64_t *)a2;
          v149 = 1;
          do
          {
            v150 = *v147++;
            v149 *= v150;
          }
          while (v147 != v146);
          if (!v149)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v145 + 1);
          v151 = (v145[4] - v145[3]) >> 3;
          v337 = 0;
          std::vector<unsigned long>::vector(&v338, v151, &v337);
          v71 = v338;
          v152 = v339;
          break;
        default:
          goto LABEL_416;
      }
      while (2)
      {
        v153 = 0;
        v154 = (char *)v152 - (char *)v71;
        if (v154)
        {
          v155 = v154 >> 3;
          v156 = (uint64_t *)v145[6];
          if (v155 <= 1)
            v155 = 1;
          do
          {
            v158 = (uint64_t)*v71++;
            v157 = v158;
            v159 = *v156++;
            v153 += v159 * v157;
            --v155;
          }
          while (v155);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v145 + 1);
        *(double *)(*(_QWORD *)v145[1] + 8 * (v145[9] + v153)) = *(double *)(*(_QWORD *)v145[1] + 8 * (v145[9] + v153))
                                                               - v148;
        v71 = v338;
        v152 = v339;
        v160 = v339 - v338;
        v161 = v160 - 1;
        if ((char *)v339 - (char *)v338 < 1)
          goto LABEL_199;
        v162 = v145[3];
        v163 = (char *)v338[v161] + 1;
        v338[v161] = v163;
        if ((unint64_t)v163 < *(_QWORD *)(v162 + 8 * v161))
        {
LABEL_198:
          v160 = 1;
LABEL_199:
          if (v161 < 0 || !v160)
            goto LABEL_226;
          continue;
        }
        break;
      }
      v164 = (unint64_t *)&v71[v160 - 2];
      v165 = v162 - 16;
      while (1)
      {
        v166 = v160 - 1;
        v164[1] = 0;
        if (v160 - 1 <= 0)
          goto LABEL_227;
        v167 = *v164 + 1;
        *v164-- = v167;
        v168 = *(_QWORD *)(v165 + 8 * v160--);
        if (v167 < v168)
        {
          v161 = v166 - 1;
          goto LABEL_198;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)((double)(uint64_t)*a3 - *(double *)a2);
LABEL_38:
          *a3 = (_QWORD *)v11;
          return;
        case 1:
          v201 = *(double *)a2;
LABEL_295:
          *(double *)a3 = *(double *)a3 - v201;
          return;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v229, (uint64_t)*a3);
          *a3 = v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr((unint64_t *)v12);
            v15 = --v230 == 0;
          }
          while (__stlxr(v230, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v115 = *a3;
          if (**a3 != 1)
          {
            v116 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v116, (uint64_t)*a3);
            *a3 = v116;
            *v116 = 1;
            do
            {
              v117 = __ldaxr(v115);
              v118 = v117 - 1;
            }
            while (__stlxr(v118, v115));
            if (!v118)
            {
              v119 = (void *)v115[1];
              if (v119)
              {
                v115[2] = (unint64_t)v119;
                operator delete(v119);
              }
              MEMORY[0x219A19A08](v115, 0x1080C409938AC02);
            }
          }
          v120 = (double *)(*a3)[1];
          v121 = (*a3)[2] - (_QWORD)v120;
          if (v121)
          {
            v122 = *(double *)a2;
            v123 = v121 >> 3;
            if (v123 <= 1)
              v123 = 1;
            do
            {
              *v120 = *v120 - v122;
              ++v120;
              --v123;
            }
            while (v123);
          }
          return;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v263, (uint64_t)*a3);
          *a3 = v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v100);
            v204 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v289 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v289, (uint64_t)*a3);
          *a3 = v289;
          *v289 = 1;
          do
          {
            v290 = __ldaxr((unint64_t *)v100);
            v103 = --v290 == 0;
          }
          while (__stlxr(v290, (unint64_t *)v100));
          goto LABEL_356;
        case 6:
          v231 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          v232 = (uint64_t)*a3;
          v233 = (unint64_t)*a3 - vcvtmd_s64_f64(*(double *)a2);
          *a3 = (_QWORD *)((unint64_t)*a3 & 0xFF00000000000000 | v233 & 0xFFFFFFFFFFFFFFLL);
          v234 = *((int *)a3 + 2) - (uint64_t)v231;
          if (v234 < 0)
          {
            *a3 = (_QWORD *)((v233 - 1) & 0xFFFFFFFFFFFFFFLL | v232 & 0xFF00000000000000);
            LODWORD(v234) = v234 + 1000000;
          }
          if (v234 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          *((_DWORD *)a3 + 2) = v234;
          return;
        case 7:
          goto LABEL_413;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v299 = operator new();
          v300 = (uint64_t)*a3;
          *(_QWORD *)v299 = **a3;
          *(_QWORD *)(v299 + 8) = *(_QWORD *)(v300 + 8);
          v301 = *(_QWORD *)(v300 + 16);
          *(_QWORD *)(v299 + 16) = v301;
          if (v301)
          {
            v302 = (unsigned int *)(v301 + 8);
            do
              v303 = __ldxr(v302);
            while (__stxr(v303 + 1, v302));
          }
          v304 = *(_OWORD *)(v300 + 24);
          v305 = *(_OWORD *)(v300 + 40);
          *(_OWORD *)(v299 + 56) = *(_OWORD *)(v300 + 56);
          *(_OWORD *)(v299 + 40) = v305;
          *(_OWORD *)(v299 + 24) = v304;
          *a3 = (_QWORD *)v299;
          *(_QWORD *)v299 = 1;
          do
          {
            v306 = __ldaxr((unint64_t *)v205);
            v214 = --v306 == 0;
          }
          while (__stlxr(v306, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v169 = *a3;
          if (**a3 != 1)
          {
            v170 = (_QWORD *)operator new();
            v171 = (uint64_t)(*a3 + 1);
            *v170 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v170 + 1, v171);
            *a3 = v170;
            *v170 = 1;
            do
            {
              v172 = __ldaxr(v169);
              v173 = v172 - 1;
            }
            while (__stlxr(v173, v169));
            if (!v173)
            {
              v174 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v169);
              MEMORY[0x219A19A08](v174, 0x1030C407B73B9F7);
            }
          }
          v175 = *a3;
          v177 = (uint64_t *)(*a3)[3];
          v176 = (uint64_t *)(*a3)[4];
          if (v176 == v177)
            return;
          if (!v175[1])
            return;
          v178 = *(double *)a2;
          v179 = 1;
          do
          {
            v180 = *v177++;
            v179 *= v180;
          }
          while (v177 != v176);
          if (!v179)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v175 + 1);
          v181 = (v175[4] - v175[3]) >> 3;
          v337 = 0;
          std::vector<unsigned long>::vector(&v338, v181, &v337);
          v71 = v338;
          v182 = v339;
          break;
        default:
          goto LABEL_416;
      }
      while (2)
      {
        v183 = 0;
        v184 = (char *)v182 - (char *)v71;
        if (v184)
        {
          v185 = v184 >> 3;
          v186 = (uint64_t *)v175[6];
          if (v185 <= 1)
            v185 = 1;
          do
          {
            v188 = (uint64_t)*v71++;
            v187 = v188;
            v189 = *v186++;
            v183 += v189 * v187;
            --v185;
          }
          while (v185);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v175 + 1);
        *(double *)(*(_QWORD *)v175[1] + 8 * (v175[9] + v183)) = *(double *)(*(_QWORD *)v175[1] + 8 * (v175[9] + v183))
                                                               - v178;
        v71 = v338;
        v182 = v339;
        v190 = v339 - v338;
        v191 = v190 - 1;
        if ((char *)v339 - (char *)v338 < 1)
          goto LABEL_224;
        v192 = v175[3];
        v193 = (char *)v338[v191] + 1;
        v338[v191] = v193;
        if ((unint64_t)v193 < *(_QWORD *)(v192 + 8 * v191))
        {
LABEL_223:
          v190 = 1;
LABEL_224:
          if (v191 < 0 || !v190)
            goto LABEL_226;
          continue;
        }
        break;
      }
      v194 = (unint64_t *)&v71[v190 - 2];
      v195 = v192 - 16;
      while (1)
      {
        v196 = v190 - 1;
        v194[1] = 0;
        if (v190 - 1 <= 0)
          goto LABEL_227;
        v197 = *v194 + 1;
        *v194-- = v197;
        v198 = *(_QWORD *)(v195 + 8 * v190--);
        if (v197 < v198)
        {
          v191 = v196 - 1;
          goto LABEL_223;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v18 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, (uint64_t)*a3);
          *a3 = v18;
          *v18 = 1;
          do
          {
            v19 = __ldaxr((unint64_t *)v12);
            v15 = --v19 == 0;
          }
          while (__stlxr(v19, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v36 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v36, (uint64_t)*a3);
          *a3 = v36;
          *v36 = 1;
          do
          {
            v37 = __ldaxr(v30);
            v33 = --v37 == 0;
          }
          while (__stlxr(v37, v30));
          goto LABEL_164;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v247 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v247, (uint64_t)*a3);
          *a3 = v247;
          *v247 = 1;
          do
          {
            v248 = __ldaxr((unint64_t *)v100);
            v204 = --v248 == 0;
          }
          while (__stlxr(v248, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v199 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v199, (uint64_t)*a3);
          *a3 = v199;
          *v199 = 1;
          do
          {
            v200 = __ldaxr((unint64_t *)v100);
            v103 = --v200 == 0;
          }
          while (__stlxr(v200, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v249 = operator new();
          v250 = (uint64_t)*a3;
          *(_QWORD *)v249 = **a3;
          *(_QWORD *)(v249 + 8) = *(_QWORD *)(v250 + 8);
          v251 = *(_QWORD *)(v250 + 16);
          *(_QWORD *)(v249 + 16) = v251;
          if (v251)
          {
            v252 = (unsigned int *)(v251 + 8);
            do
              v253 = __ldxr(v252);
            while (__stxr(v253 + 1, v252));
          }
          v254 = *(_OWORD *)(v250 + 24);
          v255 = *(_OWORD *)(v250 + 40);
          *(_OWORD *)(v249 + 56) = *(_OWORD *)(v250 + 56);
          *(_OWORD *)(v249 + 40) = v255;
          *(_OWORD *)(v249 + 24) = v254;
          *a3 = (_QWORD *)v249;
          *(_QWORD *)v249 = 1;
          do
          {
            v256 = __ldaxr((unint64_t *)v205);
            v214 = --v256 == 0;
          }
          while (__stlxr(v256, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v97 = (_QWORD *)operator new();
          v98 = (uint64_t)(*a3 + 1);
          *v97 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, v98);
          *a3 = v97;
          *v97 = 1;
          do
          {
            v99 = __ldaxr(v38);
            v42 = --v99 == 0;
          }
          while (__stlxr(v99, v38));
          goto LABEL_291;
        default:
          goto LABEL_416;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v20 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, (uint64_t)*a3);
          *a3 = v20;
          *v20 = 1;
          do
          {
            v21 = __ldaxr((unint64_t *)v12);
            v15 = --v21 == 0;
          }
          while (__stlxr(v21, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v43 = *(double *)a2;
          v44 = *a3;
          if (**a3 != 1)
          {
            v45 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v45, (uint64_t)*a3);
            *a3 = v45;
            *v45 = 1;
            do
            {
              v46 = __ldaxr(v44);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v44));
            if (!v47)
            {
              v48 = (void *)v44[1];
              if (v48)
              {
                v44[2] = (unint64_t)v48;
                operator delete(v48);
              }
              MEMORY[0x219A19A08](v44, 0x1080C409938AC02);
            }
          }
          v49 = (uint64_t)*a3;
          turi::flexible_type_fail((*a3)[2] - (*a3)[1] == *(_QWORD *)(*(_QWORD *)&v43 + 16)
                                                        - *(_QWORD *)(*(_QWORD *)&v43 + 8));
          v50 = *(double **)(v49 + 8);
          v51 = *(_QWORD *)(v49 + 16) - (_QWORD)v50;
          if (v51)
          {
            v52 = v51 >> 3;
            v53 = *(double **)(*(_QWORD *)&v43 + 8);
            if (v52 <= 1)
              v52 = 1;
            do
            {
              v54 = *v53++;
              *v50 = *v50 - v54;
              ++v50;
              --v52;
            }
            while (v52);
          }
          return;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v259 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v259, (uint64_t)*a3);
          *a3 = v259;
          *v259 = 1;
          do
          {
            v260 = __ldaxr((unint64_t *)v100);
            v204 = --v260 == 0;
          }
          while (__stlxr(v260, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v218 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v218, (uint64_t)*a3);
          *a3 = v218;
          *v218 = 1;
          do
          {
            v219 = __ldaxr((unint64_t *)v100);
            v103 = --v219 == 0;
          }
          while (__stlxr(v219, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v269 = operator new();
          v270 = (uint64_t)*a3;
          *(_QWORD *)v269 = **a3;
          *(_QWORD *)(v269 + 8) = *(_QWORD *)(v270 + 8);
          v271 = *(_QWORD *)(v270 + 16);
          *(_QWORD *)(v269 + 16) = v271;
          if (v271)
          {
            v272 = (unsigned int *)(v271 + 8);
            do
              v273 = __ldxr(v272);
            while (__stxr(v273 + 1, v272));
          }
          v274 = *(_OWORD *)(v270 + 24);
          v275 = *(_OWORD *)(v270 + 40);
          *(_OWORD *)(v269 + 56) = *(_OWORD *)(v270 + 56);
          *(_OWORD *)(v269 + 40) = v275;
          *(_OWORD *)(v269 + 24) = v274;
          *a3 = (_QWORD *)v269;
          *(_QWORD *)v269 = 1;
          do
          {
            v276 = __ldaxr((unint64_t *)v205);
            v214 = --v276 == 0;
          }
          while (__stlxr(v276, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v126 = (_QWORD *)operator new();
          v127 = (uint64_t)(*a3 + 1);
          *v126 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
          *a3 = v126;
          *v126 = 1;
          do
          {
            v128 = __ldaxr(v38);
            v42 = --v128 == 0;
          }
          while (__stlxr(v128, v38));
          goto LABEL_291;
        default:
          goto LABEL_416;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, (uint64_t)*a3);
          *a3 = v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v31 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v31, (uint64_t)*a3);
          *a3 = v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(v30);
            v33 = --v32 == 0;
          }
          while (__stlxr(v32, v30));
          goto LABEL_164;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v202 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v202, (uint64_t)*a3);
          *a3 = v202;
          *v202 = 1;
          do
          {
            v203 = __ldaxr((unint64_t *)v100);
            v204 = --v203 == 0;
          }
          while (__stlxr(v203, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v101 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v101, (uint64_t)*a3);
          *a3 = v101;
          *v101 = 1;
          do
          {
            v102 = __ldaxr((unint64_t *)v100);
            v103 = --v102 == 0;
          }
          while (__stlxr(v102, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v206 = operator new();
          v207 = (uint64_t)*a3;
          *(_QWORD *)v206 = **a3;
          *(_QWORD *)(v206 + 8) = *(_QWORD *)(v207 + 8);
          v208 = *(_QWORD *)(v207 + 16);
          *(_QWORD *)(v206 + 16) = v208;
          if (v208)
          {
            v209 = (unsigned int *)(v208 + 8);
            do
              v210 = __ldxr(v209);
            while (__stxr(v210 + 1, v209));
          }
          v211 = *(_OWORD *)(v207 + 24);
          v212 = *(_OWORD *)(v207 + 40);
          *(_OWORD *)(v206 + 56) = *(_OWORD *)(v207 + 56);
          *(_OWORD *)(v206 + 40) = v212;
          *(_OWORD *)(v206 + 24) = v211;
          *a3 = (_QWORD *)v206;
          *(_QWORD *)v206 = 1;
          do
          {
            v213 = __ldaxr((unint64_t *)v205);
            v214 = --v213 == 0;
          }
          while (__stlxr(v213, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v39 = (_QWORD *)operator new();
          v40 = (uint64_t)(*a3 + 1);
          *v39 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
          *a3 = v39;
          *v39 = 1;
          do
          {
            v41 = __ldaxr(v38);
            v42 = --v41 == 0;
          }
          while (__stlxr(v41, v38));
          goto LABEL_291;
        default:
          goto LABEL_416;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v24 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, (uint64_t)*a3);
          *a3 = v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr((unint64_t *)v12);
            v15 = --v25 == 0;
          }
          while (__stlxr(v25, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v104 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v104, (uint64_t)*a3);
          *a3 = v104;
          *v104 = 1;
          do
          {
            v105 = __ldaxr(v30);
            v33 = --v105 == 0;
          }
          while (__stlxr(v105, v30));
          goto LABEL_164;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v307 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v307, (uint64_t)*a3);
          *a3 = v307;
          *v307 = 1;
          do
          {
            v308 = __ldaxr((unint64_t *)v100);
            v204 = --v308 == 0;
          }
          while (__stlxr(v308, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v257 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v257, (uint64_t)*a3);
          *a3 = v257;
          *v257 = 1;
          do
          {
            v258 = __ldaxr((unint64_t *)v100);
            v103 = --v258 == 0;
          }
          while (__stlxr(v258, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v309 = operator new();
          v310 = (uint64_t)*a3;
          *(_QWORD *)v309 = **a3;
          *(_QWORD *)(v309 + 8) = *(_QWORD *)(v310 + 8);
          v311 = *(_QWORD *)(v310 + 16);
          *(_QWORD *)(v309 + 16) = v311;
          if (v311)
          {
            v312 = (unsigned int *)(v311 + 8);
            do
              v313 = __ldxr(v312);
            while (__stxr(v313 + 1, v312));
          }
          v314 = *(_OWORD *)(v310 + 24);
          v315 = *(_OWORD *)(v310 + 40);
          *(_OWORD *)(v309 + 56) = *(_OWORD *)(v310 + 56);
          *(_OWORD *)(v309 + 40) = v315;
          *(_OWORD *)(v309 + 24) = v314;
          *a3 = (_QWORD *)v309;
          *(_QWORD *)v309 = 1;
          do
          {
            v316 = __ldaxr((unint64_t *)v205);
            v214 = --v316 == 0;
          }
          while (__stlxr(v316, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v215 = (_QWORD *)operator new();
          v216 = (uint64_t)(*a3 + 1);
          *v215 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v215 + 1, v216);
          *a3 = v215;
          *v215 = 1;
          do
          {
            v217 = __ldaxr(v38);
            v42 = --v217 == 0;
          }
          while (__stlxr(v217, v38));
          goto LABEL_291;
        default:
          goto LABEL_416;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, (uint64_t)*a3);
          *a3 = v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr((unint64_t *)v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v124 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v124, (uint64_t)*a3);
          *a3 = v124;
          *v124 = 1;
          do
          {
            v125 = __ldaxr(v30);
            v33 = --v125 == 0;
          }
          while (__stlxr(v125, v30));
          goto LABEL_164;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v317 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v317, (uint64_t)*a3);
          *a3 = v317;
          *v317 = 1;
          do
          {
            v318 = __ldaxr((unint64_t *)v100);
            v204 = --v318 == 0;
          }
          while (__stlxr(v318, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v267 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v267, (uint64_t)*a3);
          *a3 = v267;
          *v267 = 1;
          do
          {
            v268 = __ldaxr((unint64_t *)v100);
            v103 = --v268 == 0;
          }
          while (__stlxr(v268, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v319 = operator new();
          v320 = (uint64_t)*a3;
          *(_QWORD *)v319 = **a3;
          *(_QWORD *)(v319 + 8) = *(_QWORD *)(v320 + 8);
          v321 = *(_QWORD *)(v320 + 16);
          *(_QWORD *)(v319 + 16) = v321;
          if (v321)
          {
            v322 = (unsigned int *)(v321 + 8);
            do
              v323 = __ldxr(v322);
            while (__stxr(v323 + 1, v322));
          }
          v324 = *(_OWORD *)(v320 + 24);
          v325 = *(_OWORD *)(v320 + 40);
          *(_OWORD *)(v319 + 56) = *(_OWORD *)(v320 + 56);
          *(_OWORD *)(v319 + 40) = v325;
          *(_OWORD *)(v319 + 24) = v324;
          *a3 = (_QWORD *)v319;
          *(_QWORD *)v319 = 1;
          do
          {
            v326 = __ldaxr((unint64_t *)v205);
            v214 = --v326 == 0;
          }
          while (__stlxr(v326, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v224 = (_QWORD *)operator new();
          v225 = (uint64_t)(*a3 + 1);
          *v224 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v224 + 1, v225);
          *a3 = v224;
          *v224 = 1;
          do
          {
            v226 = __ldaxr(v38);
            v42 = --v226 == 0;
          }
          while (__stlxr(v226, v38));
          goto LABEL_291;
        default:
          goto LABEL_416;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v22 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, (uint64_t)*a3);
          *a3 = v22;
          *v22 = 1;
          do
          {
            v23 = __ldaxr((unint64_t *)v12);
            v15 = --v23 == 0;
          }
          while (__stlxr(v23, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, (uint64_t)*a3);
          *a3 = v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v30);
            v33 = --v56 == 0;
          }
          while (__stlxr(v56, v30));
          goto LABEL_164;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v265 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v265, (uint64_t)*a3);
          *a3 = v265;
          *v265 = 1;
          do
          {
            v266 = __ldaxr((unint64_t *)v100);
            v204 = --v266 == 0;
          }
          while (__stlxr(v266, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v220 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v220, (uint64_t)*a3);
          *a3 = v220;
          *v220 = 1;
          do
          {
            v221 = __ldaxr((unint64_t *)v100);
            v103 = --v221 == 0;
          }
          while (__stlxr(v221, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v277 = operator new();
          v278 = (uint64_t)*a3;
          *(_QWORD *)v277 = **a3;
          *(_QWORD *)(v277 + 8) = *(_QWORD *)(v278 + 8);
          v279 = *(_QWORD *)(v278 + 16);
          *(_QWORD *)(v277 + 16) = v279;
          if (v279)
          {
            v280 = (unsigned int *)(v279 + 8);
            do
              v281 = __ldxr(v280);
            while (__stxr(v281 + 1, v280));
          }
          v282 = *(_OWORD *)(v278 + 24);
          v283 = *(_OWORD *)(v278 + 40);
          *(_OWORD *)(v277 + 56) = *(_OWORD *)(v278 + 56);
          *(_OWORD *)(v277 + 40) = v283;
          *(_OWORD *)(v277 + 24) = v282;
          *a3 = (_QWORD *)v277;
          *(_QWORD *)v277 = 1;
          do
          {
            v284 = __ldaxr((unint64_t *)v205);
            v214 = --v284 == 0;
          }
          while (__stlxr(v284, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v136 = (_QWORD *)operator new();
          v137 = (uint64_t)(*a3 + 1);
          *v136 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v136 + 1, v137);
          *a3 = v136;
          *v136 = 1;
          do
          {
            v138 = __ldaxr(v38);
            v42 = --v138 == 0;
          }
          while (__stlxr(v138, v38));
          goto LABEL_291;
        default:
          goto LABEL_416;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, (uint64_t)*a3);
          *a3 = v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr((unint64_t *)v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, (unint64_t *)v12));
          goto LABEL_271;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v129 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v129, (uint64_t)*a3);
          *a3 = v129;
          *v129 = 1;
          do
          {
            v130 = __ldaxr(v30);
            v33 = --v130 == 0;
          }
          while (__stlxr(v130, v30));
          goto LABEL_164;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v327 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v327, (uint64_t)*a3);
          *a3 = v327;
          *v327 = 1;
          do
          {
            v328 = __ldaxr((unint64_t *)v100);
            v204 = --v328 == 0;
          }
          while (__stlxr(v328, (unint64_t *)v100));
          goto LABEL_398;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v285, (uint64_t)*a3);
          *a3 = v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v100);
            v103 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v100));
          goto LABEL_356;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v329 = operator new();
          v330 = (uint64_t)*a3;
          *(_QWORD *)v329 = **a3;
          *(_QWORD *)(v329 + 8) = *(_QWORD *)(v330 + 8);
          v331 = *(_QWORD *)(v330 + 16);
          *(_QWORD *)(v329 + 16) = v331;
          if (v331)
          {
            v332 = (unsigned int *)(v331 + 8);
            do
              v333 = __ldxr(v332);
            while (__stxr(v333 + 1, v332));
          }
          v334 = *(_OWORD *)(v330 + 24);
          v335 = *(_OWORD *)(v330 + 40);
          *(_OWORD *)(v329 + 56) = *(_OWORD *)(v330 + 56);
          *(_OWORD *)(v329 + 40) = v335;
          *(_OWORD *)(v329 + 24) = v334;
          *a3 = (_QWORD *)v329;
          *(_QWORD *)v329 = 1;
          do
          {
            v336 = __ldaxr((unint64_t *)v205);
            v214 = --v336 == 0;
          }
          while (__stlxr(v336, (unint64_t *)v205));
          goto LABEL_408;
        case 9:
          v38 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v243 = (_QWORD *)operator new();
          v244 = (uint64_t)(*a3 + 1);
          *v243 = **a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v243 + 1, v244);
          *a3 = v243;
          *v243 = 1;
          do
          {
            v245 = __ldaxr(v38);
            v42 = --v245 == 0;
          }
          while (__stlxr(v245, v38));
LABEL_291:
          if (!v42)
            goto LABEL_413;
          v132 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38);
          v246 = 2071181815;
          goto LABEL_411;
        default:
          goto LABEL_416;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_413;
        case 2:
          v12 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, (uint64_t)*a3);
          *a3 = v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr((unint64_t *)v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, (unint64_t *)v12));
LABEL_271:
          if (!v15)
            goto LABEL_413;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v132 = (_QWORD *)v12;
          v133 = 0x1012C404EF22A49;
          goto LABEL_412;
        case 3:
          v30 = *a3;
          if (**a3 == 1)
            goto LABEL_413;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v34, (uint64_t)*a3);
          *a3 = v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr(v30);
            v33 = --v35 == 0;
          }
          while (__stlxr(v35, v30));
LABEL_164:
          if (!v33)
            goto LABEL_413;
          v131 = (void *)v30[1];
          if (v131)
          {
            v30[2] = (unint64_t)v131;
            operator delete(v131);
          }
          v132 = v30;
          v133 = 0x1080C409938AC02;
          goto LABEL_412;
        case 4:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v222 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v222, (uint64_t)*a3);
          *a3 = v222;
          *v222 = 1;
          do
          {
            v223 = __ldaxr((unint64_t *)v100);
            v204 = --v223 == 0;
          }
          while (__stlxr(v223, (unint64_t *)v100));
LABEL_398:
          if (!v204)
            goto LABEL_413;
          v338 = (void **)(v100 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v338);
          goto LABEL_401;
        case 5:
          v100 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v134 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v134, (uint64_t)*a3);
          *a3 = v134;
          *v134 = 1;
          do
          {
            v135 = __ldaxr((unint64_t *)v100);
            v103 = --v135 == 0;
          }
          while (__stlxr(v135, (unint64_t *)v100));
LABEL_356:
          if (!v103)
            goto LABEL_413;
          v338 = (void **)(v100 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v338);
LABEL_401:
          v132 = (_QWORD *)v100;
          v133 = 0x1020C405E66F15BLL;
          goto LABEL_412;
        case 8:
          v205 = (uint64_t)*a3;
          if (**a3 == 1)
            goto LABEL_413;
          v235 = operator new();
          v236 = (uint64_t)*a3;
          *(_QWORD *)v235 = **a3;
          *(_QWORD *)(v235 + 8) = *(_QWORD *)(v236 + 8);
          v237 = *(_QWORD *)(v236 + 16);
          *(_QWORD *)(v235 + 16) = v237;
          if (v237)
          {
            v238 = (unsigned int *)(v237 + 8);
            do
              v239 = __ldxr(v238);
            while (__stxr(v239 + 1, v238));
          }
          v240 = *(_OWORD *)(v236 + 24);
          v241 = *(_OWORD *)(v236 + 40);
          *(_OWORD *)(v235 + 56) = *(_OWORD *)(v236 + 56);
          *(_OWORD *)(v235 + 40) = v241;
          *(_OWORD *)(v235 + 24) = v240;
          *a3 = (_QWORD *)v235;
          *(_QWORD *)v235 = 1;
          do
          {
            v242 = __ldaxr((unint64_t *)v205);
            v214 = --v242 == 0;
          }
          while (__stlxr(v242, (unint64_t *)v205));
LABEL_408:
          if (!v214)
            goto LABEL_413;
          boost::detail::shared_count::~shared_count((unsigned int **)(v205 + 16));
          v132 = (_QWORD *)v205;
          v246 = -235920773;
LABEL_411:
          v133 = v246 | 0x1030C4000000000;
LABEL_412:
          MEMORY[0x219A19A08](v132, v133);
LABEL_413:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v57 = *(double *)a2;
          v58 = *a3;
          if (**a3 != 1)
          {
            v59 = (_QWORD *)operator new();
            v60 = (uint64_t)(*a3 + 1);
            *v59 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
            *a3 = v59;
            *v59 = 1;
            do
            {
              v61 = __ldaxr(v58);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v58));
            if (!v62)
            {
              v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v58);
              MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
            }
          }
          v64 = (uint64_t)*a3;
          v65 = *a3 + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v65, *(_QWORD *)&v57 + 8))
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v67 = *(uint64_t **)(v64 + 24);
          v66 = *(uint64_t **)(v64 + 32);
          if (v66 == v67)
            return;
          if (!*v65)
            return;
          v68 = 1;
          do
          {
            v69 = *v67++;
            v68 *= v69;
          }
          while (v67 != v66);
          if (!v68)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
          v70 = (uint64_t)(*(_QWORD *)(v64 + 32) - *(_QWORD *)(v64 + 24)) >> 3;
          v337 = 0;
          std::vector<unsigned long>::vector(&v338, v70, &v337);
          v71 = v338;
          v72 = v339;
          break;
        default:
          goto LABEL_416;
      }
      break;
    default:
LABEL_416:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v73 = (char *)v72 - (char *)v71;
    if (v73)
    {
      v74 = 0;
      v75 = v73 >> 3;
      v76 = *(uint64_t **)(*(_QWORD *)&v57 + 48);
      if (v75 <= 1)
        v75 = 1;
      v77 = v71;
      v78 = v75;
      do
      {
        v80 = (uint64_t)*v77++;
        v79 = v80;
        v81 = *v76++;
        v74 += v81 * v79;
        --v78;
      }
      while (v78);
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v57 + 72) + v74));
      v84 = *(uint64_t **)(v64 + 48);
      do
      {
        v86 = (uint64_t)*v71++;
        v85 = v86;
        v87 = *v84++;
        v82 += v87 * v85;
        --v75;
      }
      while (v75);
    }
    else
    {
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v57 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
    *(double *)(**(_QWORD **)(v64 + 8) + 8 * (*(_QWORD *)(v64 + 72) + v82)) = *(double *)(**(_QWORD **)(v64 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v64 + 72) + v82))
                                                                            - v83;
    v71 = v338;
    v72 = v339;
    v88 = v339 - v338;
    v89 = v88 - 1;
    if ((char *)v339 - (char *)v338 < 1)
      goto LABEL_114;
    v90 = *(_QWORD *)(v64 + 24);
    v91 = (char *)v338[v89] + 1;
    v338[v89] = v91;
    if ((unint64_t)v91 >= *(_QWORD *)(v90 + 8 * v89))
      break;
LABEL_113:
    v88 = 1;
LABEL_114:
    if (v89 < 0 || !v88)
      goto LABEL_226;
  }
  v92 = (unint64_t *)&v71[v88 - 2];
  v93 = v90 - 16;
  while (1)
  {
    v94 = v88 - 1;
    v92[1] = 0;
    if (v88 - 1 <= 0)
      break;
    v95 = *v92 + 1;
    *v92-- = v95;
    v96 = *(_QWORD *)(v93 + 8 * v88--);
    if (v95 < v96)
    {
      v89 = v94 - 1;
      goto LABEL_113;
    }
  }
LABEL_226:
  if (v71)
  {
LABEL_227:
    v339 = v71;
    operator delete(v71);
  }
}

void sub_21824F110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933D98;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933D98;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  float v23;
  double v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  float v41;
  double result;
  std::runtime_error *exception;
  std::string *v44;
  __int128 v45;
  std::runtime_error *v46;
  std::string *v47;
  __int128 v48;
  void *__p[2];
  void *v50[2];
  __int128 v51;
  __int128 v52;
  std::string v53;
  size_t __idx;

  v5 = 0.0;
  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      v5 = *(double *)a1;
      break;
    case 2:
      v10 = *(_QWORD *)a1;
      v11 = (char **)(*(_QWORD *)a1 + 8);
      __idx = 0;
      v12 = (char *)v11;
      if (*(char *)(v10 + 31) < 0)
        v12 = *v11;
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      v13 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v50[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v10 + 31) < 0)
        v14 = *(_QWORD *)(v10 + 16);
      else
        v14 = *(unsigned __int8 *)(v10 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v44 = std::string::append(&v53, " cannot be interpreted as a float");
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50[0] = (void *)v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v23 = v13;
      v5 = v23;
      break;
    case 3:
      v6 = *(_QWORD *)a1;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v15 = *(_QWORD *)a1;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 5:
      v16 = *(_QWORD *)a1;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 6:
      v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v17 = *(_QWORD *)a1;
      v18 = *(unsigned int **)(*(_QWORD *)a1 + 16);
      __p[0] = *(void **)(*(_QWORD *)a1 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v51 = *(_OWORD *)(v17 + 40);
      v52 = v22;
      *(_OWORD *)v50 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v51 + 1))
      {
        *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
        operator delete(*((void **)&v51 + 1));
      }
      if (v50[0])
      {
        v50[1] = v50[0];
        operator delete(v50[0]);
      }
      v7 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v8 = (unint64_t *)((char *)__p[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v24 = 0.0;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v24 = (double)*(uint64_t *)a2;
      break;
    case 1:
      v24 = *(double *)a2;
      break;
    case 2:
      v29 = *(_QWORD *)a2;
      __idx = 0;
      v30 = (char *)(v29 + 8);
      if (*(char *)(v29 + 31) < 0)
        v30 = *(char **)(v29 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v30);
      v31 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v50[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v29 + 31) < 0)
        v32 = *(_QWORD *)(v29 + 16);
      else
        v32 = *(unsigned __int8 *)(v29 + 31);
      if (__idx != v32)
      {
        v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v47 = std::string::append(&v53, " cannot be interpreted as a float");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v50[0] = (void *)v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v46, (const std::string *)__p);
        __cxa_throw(v46, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v41 = v31;
      v24 = v41;
      break;
    case 3:
      v25 = *(_QWORD *)a2;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v25 + 8), *(_QWORD *)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v33 = *(_QWORD *)a2;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v33 + 8), *(uint64_t **)(v33 + 16), (uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 5:
      v34 = *(_QWORD *)a2;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v34 + 8), *(uint64_t **)(v34 + 16), (uint64_t)(*(_QWORD *)(v34 + 16) - *(_QWORD *)(v34 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 6:
      v24 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v35 = *(_QWORD *)a2;
      v36 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v36;
      if (v36)
      {
        v37 = v36 + 2;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = *(_OWORD *)(v35 + 24);
      v40 = *(_OWORD *)(v35 + 56);
      v51 = *(_OWORD *)(v35 + 40);
      v52 = v40;
      *(_OWORD *)v50 = v39;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v51 + 1))
      {
        *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
        operator delete(*((void **)&v51 + 1));
      }
      if (v50[0])
      {
        v50[1] = v50[0];
        operator delete(v50[0]);
      }
      v26 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v27 = (unint64_t *)((char *)__p[1] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  result = v5 * v24;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 1;
  *(double *)a3 = v5 * v24;
  return result;
}

void sub_21824FA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_11>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933E18;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933E18;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, _BYTE *a2@<X2>, uint64_t *a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_12::operator()(unsigned __int8 *a1@<X0>, _BYTE *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  BOOL v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  uint64_t v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  double *v74;
  uint64_t v75;
  unint64_t v76;
  double *v77;
  double v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void **v95;
  void **v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  void **v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  BOOL v127;
  _QWORD *v128;
  unint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  void *v143;
  _QWORD *v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t *v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t *v157;
  double v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void **v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  unint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t *v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t *v187;
  double v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void **v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  unint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  _QWORD *v209;
  unint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  BOOL v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int *v218;
  unsigned int v219;
  __int128 v220;
  __int128 v221;
  unint64_t v222;
  BOOL v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  _QWORD *v231;
  unint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  unint64_t v235;
  double v236;
  _QWORD *v237;
  unint64_t v238;
  _QWORD *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  __int128 v246;
  __int128 v247;
  unint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  unint64_t v251;
  unsigned int v252;
  _QWORD *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  __int128 v260;
  __int128 v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  unint64_t *v267;
  _QWORD *v268;
  unint64_t v269;
  unint64_t v270;
  void *v271;
  double *v272;
  uint64_t v273;
  unint64_t v274;
  double v275;
  unint64_t *v276;
  _QWORD *v277;
  unint64_t v278;
  unint64_t v279;
  void *v280;
  double *v281;
  uint64_t v282;
  double v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  _QWORD *v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int *v292;
  unsigned int v293;
  __int128 v294;
  __int128 v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int *v300;
  unsigned int v301;
  __int128 v302;
  __int128 v303;
  unint64_t v304;
  _QWORD *v305;
  unint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  _QWORD *v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unsigned int *v314;
  unsigned int v315;
  __int128 v316;
  __int128 v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int *v322;
  unsigned int v323;
  __int128 v324;
  __int128 v325;
  unint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  __int128 v334;
  __int128 v335;
  unint64_t v336;
  _QWORD *v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int *v342;
  unsigned int v343;
  __int128 v344;
  __int128 v345;
  unint64_t v346;
  _QWORD *v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int *v352;
  unsigned int v353;
  __int128 v354;
  __int128 v355;
  unint64_t v356;
  uint64_t v357;
  void **v358;
  void **v359;

  v5 = a1[12];
  v6 = 1;
  switch(a1[12])
  {
    case 3u:
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v8 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v9 = 3;
      goto LABEL_5;
    case 4u:
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v8 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v9 = 4;
      goto LABEL_5;
    case 5u:
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v8 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v9 = 5;
LABEL_5:
      v6 = (uint64_t)(*v8 - *v7) >> v9;
      break;
    case 9u:
      v21 = *(uint64_t **)(*(_QWORD *)a1 + 24);
      v20 = *(uint64_t **)(*(_QWORD *)a1 + 32);
      if (v20 == v21)
      {
        v6 = 0;
      }
      else
      {
        v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
        if (v6)
        {
          v6 = 1;
          do
          {
            v22 = *v21++;
            v6 *= v22;
          }
          while (v21 != v20);
        }
      }
      break;
    default:
      break;
  }
  v10 = 1;
  switch(a2[12])
  {
    case 3:
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v12 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v13 = 3;
      goto LABEL_10;
    case 4:
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v12 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v13 = 4;
      goto LABEL_10;
    case 5:
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v12 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v13 = 5;
LABEL_10:
      v10 = (uint64_t)(*v12 - *v11) >> v13;
      break;
    case 9:
      v24 = *(uint64_t **)(*(_QWORD *)a2 + 24);
      v23 = *(uint64_t **)(*(_QWORD *)a2 + 32);
      if (v23 == v24)
      {
        v10 = 0;
      }
      else
      {
        v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
        if (v10)
        {
          v10 = 1;
          do
          {
            v25 = *v24++;
            v10 *= v25;
          }
          while (v24 != v23);
        }
      }
      break;
    default:
      break;
  }
  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if (v6 != v10)
  {
    if (a3 != &turi::FLEX_UNDEFINED)
    {
      *(uint64_t *)((char *)a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *a3 = turi::FLEX_UNDEFINED;
      v17 = byte_254FF28D4;
      *((_BYTE *)a3 + 12) = byte_254FF28D4;
      switch(v17)
      {
        case 2:
          v18 = (unint64_t *)*a3;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
          break;
        case 3:
          v30 = (unint64_t *)*a3;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
          break;
        case 4:
          v26 = (unint64_t *)*a3;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 + 1, v26));
          break;
        case 5:
          v32 = (unint64_t *)*a3;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 + 1, v32));
          break;
        case 8:
          v34 = (unint64_t *)*a3;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 + 1, v34));
          break;
        case 9:
          v28 = (unint64_t *)*a3;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
          break;
        default:
          return;
      }
    }
    return;
  }
  if (a1 != (unsigned __int8 *)a3)
  {
    *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a1 + 5);
    *a3 = *(_QWORD *)a1;
    *((_BYTE *)a3 + 12) = v5;
    if (v5 <= 9 && ((1 << v5) & 0x33C) != 0)
    {
      v14 = (unint64_t *)*a3;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
  switch(a2[12])
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v16 = *a3 * *(_QWORD *)a2;
          goto LABEL_79;
        case 1:
          v236 = *(double *)a3 * (double)*(uint64_t *)a2;
          goto LABEL_294;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v130 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v130, *a3);
          *a3 = (uint64_t)v130;
          *v130 = 1;
          do
          {
            v131 = __ldaxr((unint64_t *)v36);
            v39 = --v131 == 0;
          }
          while (__stlxr(v131, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v267 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v268 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v268, *a3);
            *a3 = (uint64_t)v268;
            *v268 = 1;
            do
            {
              v269 = __ldaxr(v267);
              v270 = v269 - 1;
            }
            while (__stlxr(v270, v267));
            if (!v270)
            {
              v271 = (void *)v267[1];
              if (v271)
              {
                v267[2] = (unint64_t)v271;
                operator delete(v271);
              }
              MEMORY[0x219A19A08](v267, 0x1080C409938AC02);
            }
          }
          v272 = *(double **)(*a3 + 8);
          v273 = *(_QWORD *)(*a3 + 16) - (_QWORD)v272;
          if (v273)
          {
            v274 = v273 >> 3;
            v275 = (double)*(uint64_t *)a2;
            if (v274 <= 1)
              v274 = 1;
            do
            {
              *v272 = *v272 * v275;
              ++v272;
              --v274;
            }
            while (v274);
          }
          return;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v307 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v307, *a3);
          *a3 = (uint64_t)v307;
          *v307 = 1;
          do
          {
            v308 = __ldaxr((unint64_t *)v124);
            v213 = --v308 == 0;
          }
          while (__stlxr(v308, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v237 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v237, *a3);
          *a3 = (uint64_t)v237;
          *v237 = 1;
          do
          {
            v238 = __ldaxr((unint64_t *)v124);
            v127 = --v238 == 0;
          }
          while (__stlxr(v238, (unint64_t *)v124));
          goto LABEL_384;
        case 6:
        case 7:
          goto LABEL_449;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v311 = operator new();
          v312 = *a3;
          *(_QWORD *)v311 = *(_QWORD *)*a3;
          *(_QWORD *)(v311 + 8) = *(_QWORD *)(v312 + 8);
          v313 = *(_QWORD *)(v312 + 16);
          *(_QWORD *)(v311 + 16) = v313;
          if (v313)
          {
            v314 = (unsigned int *)(v313 + 8);
            do
              v315 = __ldxr(v314);
            while (__stxr(v315 + 1, v314));
          }
          v316 = *(_OWORD *)(v312 + 24);
          v317 = *(_OWORD *)(v312 + 40);
          *(_OWORD *)(v311 + 56) = *(_OWORD *)(v312 + 56);
          *(_OWORD *)(v311 + 40) = v317;
          *(_OWORD *)(v311 + 24) = v316;
          *a3 = v311;
          *(_QWORD *)v311 = 1;
          do
          {
            v318 = __ldaxr((unint64_t *)v214);
            v223 = --v318 == 0;
          }
          while (__stlxr(v318, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v149 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v150 = (_QWORD *)operator new();
            v151 = *a3 + 8;
            *v150 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v150 + 1, v151);
            *a3 = (uint64_t)v150;
            *v150 = 1;
            do
            {
              v152 = __ldaxr(v149);
              v153 = v152 - 1;
            }
            while (__stlxr(v153, v149));
            if (!v153)
            {
              v154 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v149);
              MEMORY[0x219A19A08](v154, 0x1030C407B73B9F7);
            }
          }
          v155 = (uint64_t *)*a3;
          v157 = *(uint64_t **)(*a3 + 24);
          v156 = *(uint64_t **)(*a3 + 32);
          if (v156 == v157)
            return;
          if (!v155[1])
            return;
          v158 = (double)*(uint64_t *)a2;
          v159 = 1;
          do
          {
            v160 = *v157++;
            v159 *= v160;
          }
          while (v157 != v156);
          if (!v159)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v155 + 1);
          v161 = (v155[4] - v155[3]) >> 3;
          v357 = 0;
          std::vector<unsigned long>::vector(&v358, v161, &v357);
          v95 = v358;
          v162 = v359;
          break;
        default:
          goto LABEL_452;
      }
      while (2)
      {
        v163 = 0;
        v164 = (char *)v162 - (char *)v95;
        if (v164)
        {
          v165 = v164 >> 3;
          v166 = (uint64_t *)v155[6];
          if (v165 <= 1)
            v165 = 1;
          do
          {
            v168 = (uint64_t)*v95++;
            v167 = v168;
            v169 = *v166++;
            v163 += v169 * v167;
            --v165;
          }
          while (v165);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v155 + 1);
        *(double *)(*(_QWORD *)v155[1] + 8 * (v155[9] + v163)) = *(double *)(*(_QWORD *)v155[1] + 8 * (v155[9] + v163))
                                                               * v158;
        v95 = v358;
        v162 = v359;
        v170 = v359 - v358;
        v171 = v170 - 1;
        if ((char *)v359 - (char *)v358 < 1)
          goto LABEL_228;
        v172 = v155[3];
        v173 = (char *)v358[v171] + 1;
        v358[v171] = v173;
        if ((unint64_t)v173 < *(_QWORD *)(v172 + 8 * v171))
        {
LABEL_227:
          v170 = 1;
LABEL_228:
          if (v171 < 0 || !v170)
            goto LABEL_255;
          continue;
        }
        break;
      }
      v174 = (unint64_t *)&v95[v170 - 2];
      v175 = v172 - 16;
      while (1)
      {
        v176 = v170 - 1;
        v174[1] = 0;
        if (v170 - 1 <= 0)
          goto LABEL_256;
        v177 = *v174 + 1;
        *v174-- = v177;
        v178 = *(_QWORD *)(v175 + 8 * v170--);
        if (v177 < v178)
        {
          v171 = v176 - 1;
          goto LABEL_227;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v16 = (uint64_t)(*(double *)a2 * (double)*a3);
LABEL_79:
          *a3 = v16;
          return;
        case 1:
          v236 = *(double *)a2 * *(double *)a3;
LABEL_294:
          *(double *)a3 = v236;
          return;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v132 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v132, *a3);
          *a3 = (uint64_t)v132;
          *v132 = 1;
          do
          {
            v133 = __ldaxr((unint64_t *)v36);
            v39 = --v133 == 0;
          }
          while (__stlxr(v133, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v276 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v277 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v277, *a3);
            *a3 = (uint64_t)v277;
            *v277 = 1;
            do
            {
              v278 = __ldaxr(v276);
              v279 = v278 - 1;
            }
            while (__stlxr(v279, v276));
            if (!v279)
            {
              v280 = (void *)v276[1];
              if (v280)
              {
                v276[2] = (unint64_t)v280;
                operator delete(v280);
              }
              MEMORY[0x219A19A08](v276, 0x1080C409938AC02);
            }
          }
          v281 = *(double **)(*a3 + 8);
          v282 = *(_QWORD *)(*a3 + 16) - (_QWORD)v281;
          if (v282)
          {
            v283 = *(double *)a2;
            v284 = v282 >> 3;
            if (v284 <= 1)
              v284 = 1;
            do
            {
              *v281 = v283 * *v281;
              ++v281;
              --v284;
            }
            while (v284);
          }
          return;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v309 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v309, *a3);
          *a3 = (uint64_t)v309;
          *v309 = 1;
          do
          {
            v310 = __ldaxr((unint64_t *)v124);
            v213 = --v310 == 0;
          }
          while (__stlxr(v310, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v239 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v239, *a3);
          *a3 = (uint64_t)v239;
          *v239 = 1;
          do
          {
            v240 = __ldaxr((unint64_t *)v124);
            v127 = --v240 == 0;
          }
          while (__stlxr(v240, (unint64_t *)v124));
          goto LABEL_384;
        case 6:
        case 7:
          goto LABEL_449;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v319 = operator new();
          v320 = *a3;
          *(_QWORD *)v319 = *(_QWORD *)*a3;
          *(_QWORD *)(v319 + 8) = *(_QWORD *)(v320 + 8);
          v321 = *(_QWORD *)(v320 + 16);
          *(_QWORD *)(v319 + 16) = v321;
          if (v321)
          {
            v322 = (unsigned int *)(v321 + 8);
            do
              v323 = __ldxr(v322);
            while (__stxr(v323 + 1, v322));
          }
          v324 = *(_OWORD *)(v320 + 24);
          v325 = *(_OWORD *)(v320 + 40);
          *(_OWORD *)(v319 + 56) = *(_OWORD *)(v320 + 56);
          *(_OWORD *)(v319 + 40) = v325;
          *(_OWORD *)(v319 + 24) = v324;
          *a3 = v319;
          *(_QWORD *)v319 = 1;
          do
          {
            v326 = __ldaxr((unint64_t *)v214);
            v223 = --v326 == 0;
          }
          while (__stlxr(v326, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v179 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v180 = (_QWORD *)operator new();
            v181 = *a3 + 8;
            *v180 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v180 + 1, v181);
            *a3 = (uint64_t)v180;
            *v180 = 1;
            do
            {
              v182 = __ldaxr(v179);
              v183 = v182 - 1;
            }
            while (__stlxr(v183, v179));
            if (!v183)
            {
              v184 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v179);
              MEMORY[0x219A19A08](v184, 0x1030C407B73B9F7);
            }
          }
          v185 = (uint64_t *)*a3;
          v187 = *(uint64_t **)(*a3 + 24);
          v186 = *(uint64_t **)(*a3 + 32);
          if (v186 == v187)
            return;
          if (!v185[1])
            return;
          v188 = *(double *)a2;
          v189 = 1;
          do
          {
            v190 = *v187++;
            v189 *= v190;
          }
          while (v187 != v186);
          if (!v189)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v185 + 1);
          v191 = (v185[4] - v185[3]) >> 3;
          v357 = 0;
          std::vector<unsigned long>::vector(&v358, v191, &v357);
          v95 = v358;
          v192 = v359;
          break;
        default:
          goto LABEL_452;
      }
      while (2)
      {
        v193 = 0;
        v194 = (char *)v192 - (char *)v95;
        if (v194)
        {
          v195 = v194 >> 3;
          v196 = (uint64_t *)v185[6];
          if (v195 <= 1)
            v195 = 1;
          do
          {
            v198 = (uint64_t)*v95++;
            v197 = v198;
            v199 = *v196++;
            v193 += v199 * v197;
            --v195;
          }
          while (v195);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v185 + 1);
        *(double *)(*(_QWORD *)v185[1] + 8 * (v185[9] + v193)) = v188
                                                               * *(double *)(*(_QWORD *)v185[1] + 8 * (v185[9] + v193));
        v95 = v358;
        v192 = v359;
        v200 = v359 - v358;
        v201 = v200 - 1;
        if ((char *)v359 - (char *)v358 < 1)
          goto LABEL_253;
        v202 = v185[3];
        v203 = (char *)v358[v201] + 1;
        v358[v201] = v203;
        if ((unint64_t)v203 < *(_QWORD *)(v202 + 8 * v201))
        {
LABEL_252:
          v200 = 1;
LABEL_253:
          if (v201 < 0 || !v200)
            goto LABEL_255;
          continue;
        }
        break;
      }
      v204 = (unint64_t *)&v95[v200 - 2];
      v205 = v202 - 16;
      while (1)
      {
        v206 = v200 - 1;
        v204[1] = 0;
        if (v200 - 1 <= 0)
          goto LABEL_256;
        v207 = *v204 + 1;
        *v204-- = v207;
        v208 = *(_QWORD *)(v205 + 8 * v200--);
        if (v207 < v208)
        {
          v201 = v206 - 1;
          goto LABEL_252;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v42 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v42, *a3);
          *a3 = (uint64_t)v42;
          *v42 = 1;
          do
          {
            v43 = __ldaxr((unint64_t *)v36);
            v39 = --v43 == 0;
          }
          while (__stlxr(v43, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v60 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v60, *a3);
          *a3 = (uint64_t)v60;
          *v60 = 1;
          do
          {
            v61 = __ldaxr(v54);
            v57 = --v61 == 0;
          }
          while (__stlxr(v61, v54));
          goto LABEL_193;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v253 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v253, *a3);
          *a3 = (uint64_t)v253;
          *v253 = 1;
          do
          {
            v254 = __ldaxr((unint64_t *)v124);
            v213 = --v254 == 0;
          }
          while (__stlxr(v254, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v209 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v209, *a3);
          *a3 = (uint64_t)v209;
          *v209 = 1;
          do
          {
            v210 = __ldaxr((unint64_t *)v124);
            v127 = --v210 == 0;
          }
          while (__stlxr(v210, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v255 = operator new();
          v256 = *a3;
          *(_QWORD *)v255 = *(_QWORD *)*a3;
          *(_QWORD *)(v255 + 8) = *(_QWORD *)(v256 + 8);
          v257 = *(_QWORD *)(v256 + 16);
          *(_QWORD *)(v255 + 16) = v257;
          if (v257)
          {
            v258 = (unsigned int *)(v257 + 8);
            do
              v259 = __ldxr(v258);
            while (__stxr(v259 + 1, v258));
          }
          v260 = *(_OWORD *)(v256 + 24);
          v261 = *(_OWORD *)(v256 + 40);
          *(_OWORD *)(v255 + 56) = *(_OWORD *)(v256 + 56);
          *(_OWORD *)(v255 + 40) = v261;
          *(_OWORD *)(v255 + 24) = v260;
          *a3 = v255;
          *(_QWORD *)v255 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v214);
            v223 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v121 = (_QWORD *)operator new();
          v122 = *a3 + 8;
          *v121 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v121 + 1, v122);
          *a3 = (uint64_t)v121;
          *v121 = 1;
          do
          {
            v123 = __ldaxr(v62);
            v66 = --v123 == 0;
          }
          while (__stlxr(v123, v62));
          goto LABEL_313;
        default:
          goto LABEL_452;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v44 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v44, *a3);
          *a3 = (uint64_t)v44;
          *v44 = 1;
          do
          {
            v45 = __ldaxr((unint64_t *)v36);
            v39 = --v45 == 0;
          }
          while (__stlxr(v45, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v67 = *(_QWORD *)a2;
          v68 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v69 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v69, *a3);
            *a3 = (uint64_t)v69;
            *v69 = 1;
            do
            {
              v70 = __ldaxr(v68);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, v68));
            if (!v71)
            {
              v72 = (void *)v68[1];
              if (v72)
              {
                v68[2] = (unint64_t)v72;
                operator delete(v72);
              }
              MEMORY[0x219A19A08](v68, 0x1080C409938AC02);
            }
          }
          v73 = *a3;
          turi::flexible_type_fail(*(_QWORD *)(*a3 + 16) - *(_QWORD *)(*a3 + 8) == *(_QWORD *)(v67 + 16)
                                                                                 - *(_QWORD *)(v67 + 8));
          v74 = *(double **)(v73 + 8);
          v75 = *(_QWORD *)(v73 + 16) - (_QWORD)v74;
          if (v75)
          {
            v76 = v75 >> 3;
            v77 = *(double **)(v67 + 8);
            if (v76 <= 1)
              v76 = 1;
            do
            {
              v78 = *v77++;
              *v74 = v78 * *v74;
              ++v74;
              --v76;
            }
            while (v76);
          }
          return;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v265 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v265, *a3);
          *a3 = (uint64_t)v265;
          *v265 = 1;
          do
          {
            v266 = __ldaxr((unint64_t *)v124);
            v213 = --v266 == 0;
          }
          while (__stlxr(v266, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v227 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v227, *a3);
          *a3 = (uint64_t)v227;
          *v227 = 1;
          do
          {
            v228 = __ldaxr((unint64_t *)v124);
            v127 = --v228 == 0;
          }
          while (__stlxr(v228, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v289 = operator new();
          v290 = *a3;
          *(_QWORD *)v289 = *(_QWORD *)*a3;
          *(_QWORD *)(v289 + 8) = *(_QWORD *)(v290 + 8);
          v291 = *(_QWORD *)(v290 + 16);
          *(_QWORD *)(v289 + 16) = v291;
          if (v291)
          {
            v292 = (unsigned int *)(v291 + 8);
            do
              v293 = __ldxr(v292);
            while (__stxr(v293 + 1, v292));
          }
          v294 = *(_OWORD *)(v290 + 24);
          v295 = *(_OWORD *)(v290 + 40);
          *(_OWORD *)(v289 + 56) = *(_OWORD *)(v290 + 56);
          *(_OWORD *)(v289 + 40) = v295;
          *(_OWORD *)(v289 + 24) = v294;
          *a3 = v289;
          *(_QWORD *)v289 = 1;
          do
          {
            v296 = __ldaxr((unint64_t *)v214);
            v223 = --v296 == 0;
          }
          while (__stlxr(v296, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v138 = (_QWORD *)operator new();
          v139 = *a3 + 8;
          *v138 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v138 + 1, v139);
          *a3 = (uint64_t)v138;
          *v138 = 1;
          do
          {
            v140 = __ldaxr(v62);
            v66 = --v140 == 0;
          }
          while (__stlxr(v140, v62));
          goto LABEL_313;
        default:
          goto LABEL_452;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v37 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v37, *a3);
          *a3 = (uint64_t)v37;
          *v37 = 1;
          do
          {
            v38 = __ldaxr((unint64_t *)v36);
            v39 = --v38 == 0;
          }
          while (__stlxr(v38, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *a3);
          *a3 = (uint64_t)v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v54);
            v57 = --v56 == 0;
          }
          while (__stlxr(v56, v54));
          goto LABEL_193;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v211 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v211, *a3);
          *a3 = (uint64_t)v211;
          *v211 = 1;
          do
          {
            v212 = __ldaxr((unint64_t *)v124);
            v213 = --v212 == 0;
          }
          while (__stlxr(v212, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v125 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v125, *a3);
          *a3 = (uint64_t)v125;
          *v125 = 1;
          do
          {
            v126 = __ldaxr((unint64_t *)v124);
            v127 = --v126 == 0;
          }
          while (__stlxr(v126, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v215 = operator new();
          v216 = *a3;
          *(_QWORD *)v215 = *(_QWORD *)*a3;
          *(_QWORD *)(v215 + 8) = *(_QWORD *)(v216 + 8);
          v217 = *(_QWORD *)(v216 + 16);
          *(_QWORD *)(v215 + 16) = v217;
          if (v217)
          {
            v218 = (unsigned int *)(v217 + 8);
            do
              v219 = __ldxr(v218);
            while (__stxr(v219 + 1, v218));
          }
          v220 = *(_OWORD *)(v216 + 24);
          v221 = *(_OWORD *)(v216 + 40);
          *(_OWORD *)(v215 + 56) = *(_OWORD *)(v216 + 56);
          *(_OWORD *)(v215 + 40) = v221;
          *(_OWORD *)(v215 + 24) = v220;
          *a3 = v215;
          *(_QWORD *)v215 = 1;
          do
          {
            v222 = __ldaxr((unint64_t *)v214);
            v223 = --v222 == 0;
          }
          while (__stlxr(v222, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v63 = (_QWORD *)operator new();
          v64 = *a3 + 8;
          *v63 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v63 + 1, v64);
          *a3 = (uint64_t)v63;
          *v63 = 1;
          do
          {
            v65 = __ldaxr(v62);
            v66 = --v65 == 0;
          }
          while (__stlxr(v65, v62));
          goto LABEL_313;
        default:
          goto LABEL_452;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v48 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v48, *a3);
          *a3 = (uint64_t)v48;
          *v48 = 1;
          do
          {
            v49 = __ldaxr((unint64_t *)v36);
            v39 = --v49 == 0;
          }
          while (__stlxr(v49, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v128 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v128, *a3);
          *a3 = (uint64_t)v128;
          *v128 = 1;
          do
          {
            v129 = __ldaxr(v54);
            v57 = --v129 == 0;
          }
          while (__stlxr(v129, v54));
          goto LABEL_193;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v327 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v327, *a3);
          *a3 = (uint64_t)v327;
          *v327 = 1;
          do
          {
            v328 = __ldaxr((unint64_t *)v124);
            v213 = --v328 == 0;
          }
          while (__stlxr(v328, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, *a3);
          *a3 = (uint64_t)v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v124);
            v127 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v329 = operator new();
          v330 = *a3;
          *(_QWORD *)v329 = *(_QWORD *)*a3;
          *(_QWORD *)(v329 + 8) = *(_QWORD *)(v330 + 8);
          v331 = *(_QWORD *)(v330 + 16);
          *(_QWORD *)(v329 + 16) = v331;
          if (v331)
          {
            v332 = (unsigned int *)(v331 + 8);
            do
              v333 = __ldxr(v332);
            while (__stxr(v333 + 1, v332));
          }
          v334 = *(_OWORD *)(v330 + 24);
          v335 = *(_OWORD *)(v330 + 40);
          *(_OWORD *)(v329 + 56) = *(_OWORD *)(v330 + 56);
          *(_OWORD *)(v329 + 40) = v335;
          *(_OWORD *)(v329 + 24) = v334;
          *a3 = v329;
          *(_QWORD *)v329 = 1;
          do
          {
            v336 = __ldaxr((unint64_t *)v214);
            v223 = --v336 == 0;
          }
          while (__stlxr(v336, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v224 = (_QWORD *)operator new();
          v225 = *a3 + 8;
          *v224 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v224 + 1, v225);
          *a3 = (uint64_t)v224;
          *v224 = 1;
          do
          {
            v226 = __ldaxr(v62);
            v66 = --v226 == 0;
          }
          while (__stlxr(v226, v62));
          goto LABEL_313;
        default:
          goto LABEL_452;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v50 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v50, *a3);
          *a3 = (uint64_t)v50;
          *v50 = 1;
          do
          {
            v51 = __ldaxr((unint64_t *)v36);
            v39 = --v51 == 0;
          }
          while (__stlxr(v51, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v136 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v136, *a3);
          *a3 = (uint64_t)v136;
          *v136 = 1;
          do
          {
            v137 = __ldaxr(v54);
            v57 = --v137 == 0;
          }
          while (__stlxr(v137, v54));
          goto LABEL_193;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v337 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v337, *a3);
          *a3 = (uint64_t)v337;
          *v337 = 1;
          do
          {
            v338 = __ldaxr((unint64_t *)v124);
            v213 = --v338 == 0;
          }
          while (__stlxr(v338, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v287 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v287, *a3);
          *a3 = (uint64_t)v287;
          *v287 = 1;
          do
          {
            v288 = __ldaxr((unint64_t *)v124);
            v127 = --v288 == 0;
          }
          while (__stlxr(v288, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v339 = operator new();
          v340 = *a3;
          *(_QWORD *)v339 = *(_QWORD *)*a3;
          *(_QWORD *)(v339 + 8) = *(_QWORD *)(v340 + 8);
          v341 = *(_QWORD *)(v340 + 16);
          *(_QWORD *)(v339 + 16) = v341;
          if (v341)
          {
            v342 = (unsigned int *)(v341 + 8);
            do
              v343 = __ldxr(v342);
            while (__stxr(v343 + 1, v342));
          }
          v344 = *(_OWORD *)(v340 + 24);
          v345 = *(_OWORD *)(v340 + 40);
          *(_OWORD *)(v339 + 56) = *(_OWORD *)(v340 + 56);
          *(_OWORD *)(v339 + 40) = v345;
          *(_OWORD *)(v339 + 24) = v344;
          *a3 = v339;
          *(_QWORD *)v339 = 1;
          do
          {
            v346 = __ldaxr((unint64_t *)v214);
            v223 = --v346 == 0;
          }
          while (__stlxr(v346, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v233 = (_QWORD *)operator new();
          v234 = *a3 + 8;
          *v233 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v233 + 1, v234);
          *a3 = (uint64_t)v233;
          *v233 = 1;
          do
          {
            v235 = __ldaxr(v62);
            v66 = --v235 == 0;
          }
          while (__stlxr(v235, v62));
          goto LABEL_313;
        default:
          goto LABEL_452;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v46 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v46, *a3);
          *a3 = (uint64_t)v46;
          *v46 = 1;
          do
          {
            v47 = __ldaxr((unint64_t *)v36);
            v39 = --v47 == 0;
          }
          while (__stlxr(v47, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v79 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v79, *a3);
          *a3 = (uint64_t)v79;
          *v79 = 1;
          do
          {
            v80 = __ldaxr(v54);
            v57 = --v80 == 0;
          }
          while (__stlxr(v80, v54));
          goto LABEL_193;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v285, *a3);
          *a3 = (uint64_t)v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v124);
            v213 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v229, *a3);
          *a3 = (uint64_t)v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr((unint64_t *)v124);
            v127 = --v230 == 0;
          }
          while (__stlxr(v230, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v297 = operator new();
          v298 = *a3;
          *(_QWORD *)v297 = *(_QWORD *)*a3;
          *(_QWORD *)(v297 + 8) = *(_QWORD *)(v298 + 8);
          v299 = *(_QWORD *)(v298 + 16);
          *(_QWORD *)(v297 + 16) = v299;
          if (v299)
          {
            v300 = (unsigned int *)(v299 + 8);
            do
              v301 = __ldxr(v300);
            while (__stxr(v301 + 1, v300));
          }
          v302 = *(_OWORD *)(v298 + 24);
          v303 = *(_OWORD *)(v298 + 40);
          *(_OWORD *)(v297 + 56) = *(_OWORD *)(v298 + 56);
          *(_OWORD *)(v297 + 40) = v303;
          *(_OWORD *)(v297 + 24) = v302;
          *a3 = v297;
          *(_QWORD *)v297 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v214);
            v223 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v146 = (_QWORD *)operator new();
          v147 = *a3 + 8;
          *v146 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v146 + 1, v147);
          *a3 = (uint64_t)v146;
          *v146 = 1;
          do
          {
            v148 = __ldaxr(v62);
            v66 = --v148 == 0;
          }
          while (__stlxr(v148, v62));
          goto LABEL_313;
        default:
          goto LABEL_452;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v52 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v52, *a3);
          *a3 = (uint64_t)v52;
          *v52 = 1;
          do
          {
            v53 = __ldaxr((unint64_t *)v36);
            v39 = --v53 == 0;
          }
          while (__stlxr(v53, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v141 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v141, *a3);
          *a3 = (uint64_t)v141;
          *v141 = 1;
          do
          {
            v142 = __ldaxr(v54);
            v57 = --v142 == 0;
          }
          while (__stlxr(v142, v54));
          goto LABEL_193;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v347 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v347, *a3);
          *a3 = (uint64_t)v347;
          *v347 = 1;
          do
          {
            v348 = __ldaxr((unint64_t *)v124);
            v213 = --v348 == 0;
          }
          while (__stlxr(v348, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v305 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v305, *a3);
          *a3 = (uint64_t)v305;
          *v305 = 1;
          do
          {
            v306 = __ldaxr((unint64_t *)v124);
            v127 = --v306 == 0;
          }
          while (__stlxr(v306, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v349 = operator new();
          v350 = *a3;
          *(_QWORD *)v349 = *(_QWORD *)*a3;
          *(_QWORD *)(v349 + 8) = *(_QWORD *)(v350 + 8);
          v351 = *(_QWORD *)(v350 + 16);
          *(_QWORD *)(v349 + 16) = v351;
          if (v351)
          {
            v352 = (unsigned int *)(v351 + 8);
            do
              v353 = __ldxr(v352);
            while (__stxr(v353 + 1, v352));
          }
          v354 = *(_OWORD *)(v350 + 24);
          v355 = *(_OWORD *)(v350 + 40);
          *(_OWORD *)(v349 + 56) = *(_OWORD *)(v350 + 56);
          *(_OWORD *)(v349 + 40) = v355;
          *(_OWORD *)(v349 + 24) = v354;
          *a3 = v349;
          *(_QWORD *)v349 = 1;
          do
          {
            v356 = __ldaxr((unint64_t *)v214);
            v223 = --v356 == 0;
          }
          while (__stlxr(v356, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v249 = (_QWORD *)operator new();
          v250 = *a3 + 8;
          *v249 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v249 + 1, v250);
          *a3 = (uint64_t)v249;
          *v249 = 1;
          do
          {
            v251 = __ldaxr(v62);
            v66 = --v251 == 0;
          }
          while (__stlxr(v251, v62));
LABEL_313:
          if (!v66)
            goto LABEL_449;
          v134 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v62);
          v252 = 2071181815;
          goto LABEL_447;
        default:
          goto LABEL_452;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v40 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v40, *a3);
          *a3 = (uint64_t)v40;
          *v40 = 1;
          do
          {
            v41 = __ldaxr((unint64_t *)v36);
            v39 = --v41 == 0;
          }
          while (__stlxr(v41, (unint64_t *)v36));
LABEL_177:
          if (!v39)
            goto LABEL_449;
          if (*(char *)(v36 + 31) < 0)
            operator delete(*(void **)(v36 + 8));
          v134 = (_QWORD *)v36;
          v135 = 0x1012C404EF22A49;
          goto LABEL_448;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v58 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v58, *a3);
          *a3 = (uint64_t)v58;
          *v58 = 1;
          do
          {
            v59 = __ldaxr(v54);
            v57 = --v59 == 0;
          }
          while (__stlxr(v59, v54));
LABEL_193:
          if (!v57)
            goto LABEL_449;
          v143 = (void *)v54[1];
          if (v143)
          {
            v54[2] = (unint64_t)v143;
            operator delete(v143);
          }
          v134 = v54;
          v135 = 0x1080C409938AC02;
          goto LABEL_448;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v231 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v231, *a3);
          *a3 = (uint64_t)v231;
          *v231 = 1;
          do
          {
            v232 = __ldaxr((unint64_t *)v124);
            v213 = --v232 == 0;
          }
          while (__stlxr(v232, (unint64_t *)v124));
LABEL_434:
          if (!v213)
            goto LABEL_449;
          v358 = (void **)(v124 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v358);
          goto LABEL_437;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v144 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v144, *a3);
          *a3 = (uint64_t)v144;
          *v144 = 1;
          do
          {
            v145 = __ldaxr((unint64_t *)v124);
            v127 = --v145 == 0;
          }
          while (__stlxr(v145, (unint64_t *)v124));
LABEL_384:
          if (!v127)
            goto LABEL_449;
          v358 = (void **)(v124 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v358);
LABEL_437:
          v134 = (_QWORD *)v124;
          v135 = 0x1020C405E66F15BLL;
          goto LABEL_448;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v241 = operator new();
          v242 = *a3;
          *(_QWORD *)v241 = *(_QWORD *)*a3;
          *(_QWORD *)(v241 + 8) = *(_QWORD *)(v242 + 8);
          v243 = *(_QWORD *)(v242 + 16);
          *(_QWORD *)(v241 + 16) = v243;
          if (v243)
          {
            v244 = (unsigned int *)(v243 + 8);
            do
              v245 = __ldxr(v244);
            while (__stxr(v245 + 1, v244));
          }
          v246 = *(_OWORD *)(v242 + 24);
          v247 = *(_OWORD *)(v242 + 40);
          *(_OWORD *)(v241 + 56) = *(_OWORD *)(v242 + 56);
          *(_OWORD *)(v241 + 40) = v247;
          *(_OWORD *)(v241 + 24) = v246;
          *a3 = v241;
          *(_QWORD *)v241 = 1;
          do
          {
            v248 = __ldaxr((unint64_t *)v214);
            v223 = --v248 == 0;
          }
          while (__stlxr(v248, (unint64_t *)v214));
LABEL_444:
          if (!v223)
            goto LABEL_449;
          boost::detail::shared_count::~shared_count((unsigned int **)(v214 + 16));
          v134 = (_QWORD *)v214;
          v252 = -235920773;
LABEL_447:
          v135 = v252 | 0x1030C4000000000;
LABEL_448:
          MEMORY[0x219A19A08](v134, v135);
LABEL_449:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v81 = *(_QWORD *)a2;
          v82 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v83 = (_QWORD *)operator new();
            v84 = *a3 + 8;
            *v83 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v83 + 1, v84);
            *a3 = (uint64_t)v83;
            *v83 = 1;
            do
            {
              v85 = __ldaxr(v82);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, v82));
            if (!v86)
            {
              v87 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v82);
              MEMORY[0x219A19A08](v87, 0x1030C407B73B9F7);
            }
          }
          v88 = *a3;
          v89 = (uint64_t *)(*a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v89, v81 + 8))
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v91 = *(uint64_t **)(v88 + 24);
          v90 = *(uint64_t **)(v88 + 32);
          if (v90 == v91)
            return;
          if (!*v89)
            return;
          v92 = 1;
          do
          {
            v93 = *v91++;
            v92 *= v93;
          }
          while (v91 != v90);
          if (!v92)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v89);
          v94 = (uint64_t)(*(_QWORD *)(v88 + 32) - *(_QWORD *)(v88 + 24)) >> 3;
          v357 = 0;
          std::vector<unsigned long>::vector(&v358, v94, &v357);
          v95 = v358;
          v96 = v359;
          break;
        default:
          goto LABEL_452;
      }
      break;
    default:
LABEL_452:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v97 = (char *)v96 - (char *)v95;
    if (v97)
    {
      v98 = 0;
      v99 = v97 >> 3;
      v100 = *(uint64_t **)(v81 + 48);
      if (v99 <= 1)
        v99 = 1;
      v101 = v95;
      v102 = v99;
      do
      {
        v104 = (uint64_t)*v101++;
        v103 = v104;
        v105 = *v100++;
        v98 += v105 * v103;
        --v102;
      }
      while (v102);
      v106 = 0;
      v107 = *(double *)(**(_QWORD **)(v81 + 8) + 8 * (*(_QWORD *)(v81 + 72) + v98));
      v108 = *(uint64_t **)(v88 + 48);
      do
      {
        v110 = (uint64_t)*v95++;
        v109 = v110;
        v111 = *v108++;
        v106 += v111 * v109;
        --v99;
      }
      while (v99);
    }
    else
    {
      v106 = 0;
      v107 = *(double *)(**(_QWORD **)(v81 + 8) + 8 * *(_QWORD *)(v81 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v89);
    *(double *)(**(_QWORD **)(v88 + 8) + 8 * (*(_QWORD *)(v88 + 72) + v106)) = v107
                                                                             * *(double *)(**(_QWORD **)(v88 + 8)
                                                                                         + 8
                                                                                         * (*(_QWORD *)(v88 + 72) + v106));
    v95 = v358;
    v96 = v359;
    v112 = v359 - v358;
    v113 = v112 - 1;
    if ((char *)v359 - (char *)v358 < 1)
      goto LABEL_155;
    v114 = *(_QWORD *)(v88 + 24);
    v115 = (char *)v358[v113] + 1;
    v358[v113] = v115;
    if ((unint64_t)v115 >= *(_QWORD *)(v114 + 8 * v113))
      break;
LABEL_154:
    v112 = 1;
LABEL_155:
    if (v113 < 0 || !v112)
      goto LABEL_255;
  }
  v116 = (unint64_t *)&v95[v112 - 2];
  v117 = v114 - 16;
  while (1)
  {
    v118 = v112 - 1;
    v116[1] = 0;
    if (v112 - 1 <= 0)
      break;
    v119 = *v116 + 1;
    *v116-- = v119;
    v120 = *(_QWORD *)(v117 + 8 * v112--);
    if (v119 < v120)
    {
      v113 = v118 - 1;
      goto LABEL_154;
    }
  }
LABEL_255:
  if (v95)
  {
LABEL_256:
    v359 = v95;
    operator delete(v95);
  }
}

void sub_218251E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933E98;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933E98;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_13::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  double v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  _QWORD *v55;
  unint64_t v56;
  double v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  void **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  void *v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void **v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  unint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  __int128 v196;
  __int128 v197;
  unint64_t v198;
  BOOL v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  double v212;
  _QWORD *v213;
  unint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  __int128 v222;
  __int128 v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unsigned int v228;
  _QWORD *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  __int128 v236;
  __int128 v237;
  unint64_t v238;
  _QWORD *v239;
  unint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t *v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  void *v247;
  double *v248;
  uint64_t v249;
  unint64_t v250;
  double v251;
  unint64_t *v252;
  _QWORD *v253;
  unint64_t v254;
  unint64_t v255;
  void *v256;
  double *v257;
  uint64_t v258;
  double v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  __int128 v278;
  __int128 v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int *v290;
  unsigned int v291;
  __int128 v292;
  __int128 v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int *v298;
  unsigned int v299;
  __int128 v300;
  __int128 v301;
  unint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  __int128 v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  void **v334;
  void **v335;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((uint64_t *)a1 != a3)
  {
    *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a1 + 5);
    *a3 = *(_QWORD *)a1;
    v5 = *(unsigned __int8 *)(a1 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = (unint64_t *)*a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = *a3 * *(_QWORD *)a2;
          goto LABEL_38;
        case 1:
          v212 = *(double *)a3 * (double)*(uint64_t *)a2;
          goto LABEL_253;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v106 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v106, *a3);
          *a3 = (uint64_t)v106;
          *v106 = 1;
          do
          {
            v107 = __ldaxr((unint64_t *)v12);
            v15 = --v107 == 0;
          }
          while (__stlxr(v107, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v243 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v244 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v244, *a3);
            *a3 = (uint64_t)v244;
            *v244 = 1;
            do
            {
              v245 = __ldaxr(v243);
              v246 = v245 - 1;
            }
            while (__stlxr(v246, v243));
            if (!v246)
            {
              v247 = (void *)v243[1];
              if (v247)
              {
                v243[2] = (unint64_t)v247;
                operator delete(v247);
              }
              MEMORY[0x219A19A08](v243, 0x1080C409938AC02);
            }
          }
          v248 = *(double **)(*a3 + 8);
          v249 = *(_QWORD *)(*a3 + 16) - (_QWORD)v248;
          if (v249)
          {
            v250 = v249 >> 3;
            v251 = (double)*(uint64_t *)a2;
            if (v250 <= 1)
              v250 = 1;
            do
            {
              *v248 = *v248 * v251;
              ++v248;
              --v250;
            }
            while (v250);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v283 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v283, *a3);
          *a3 = (uint64_t)v283;
          *v283 = 1;
          do
          {
            v284 = __ldaxr((unint64_t *)v100);
            v189 = --v284 == 0;
          }
          while (__stlxr(v284, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v213 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v213, *a3);
          *a3 = (uint64_t)v213;
          *v213 = 1;
          do
          {
            v214 = __ldaxr((unint64_t *)v100);
            v103 = --v214 == 0;
          }
          while (__stlxr(v214, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v287 = operator new();
          v288 = *a3;
          *(_QWORD *)v287 = *(_QWORD *)*a3;
          *(_QWORD *)(v287 + 8) = *(_QWORD *)(v288 + 8);
          v289 = *(_QWORD *)(v288 + 16);
          *(_QWORD *)(v287 + 16) = v289;
          if (v289)
          {
            v290 = (unsigned int *)(v289 + 8);
            do
              v291 = __ldxr(v290);
            while (__stxr(v291 + 1, v290));
          }
          v292 = *(_OWORD *)(v288 + 24);
          v293 = *(_OWORD *)(v288 + 40);
          *(_OWORD *)(v287 + 56) = *(_OWORD *)(v288 + 56);
          *(_OWORD *)(v287 + 40) = v293;
          *(_OWORD *)(v287 + 24) = v292;
          *a3 = v287;
          *(_QWORD *)v287 = 1;
          do
          {
            v294 = __ldaxr((unint64_t *)v190);
            v199 = --v294 == 0;
          }
          while (__stlxr(v294, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v125 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v126 = (_QWORD *)operator new();
            v127 = *a3 + 8;
            *v126 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
            *a3 = (uint64_t)v126;
            *v126 = 1;
            do
            {
              v128 = __ldaxr(v125);
              v129 = v128 - 1;
            }
            while (__stlxr(v129, v125));
            if (!v129)
            {
              v130 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v125);
              MEMORY[0x219A19A08](v130, 0x1030C407B73B9F7);
            }
          }
          v131 = (uint64_t *)*a3;
          v133 = *(uint64_t **)(*a3 + 24);
          v132 = *(uint64_t **)(*a3 + 32);
          if (v132 == v133)
            return;
          if (!v131[1])
            return;
          v134 = (double)*(uint64_t *)a2;
          v135 = 1;
          do
          {
            v136 = *v133++;
            v135 *= v136;
          }
          while (v133 != v132);
          if (!v135)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
          v137 = (v131[4] - v131[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v137, &v333);
          v71 = v334;
          v138 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v139 = 0;
        v140 = (char *)v138 - (char *)v71;
        if (v140)
        {
          v141 = v140 >> 3;
          v142 = (uint64_t *)v131[6];
          if (v141 <= 1)
            v141 = 1;
          do
          {
            v144 = (uint64_t)*v71++;
            v143 = v144;
            v145 = *v142++;
            v139 += v145 * v143;
            --v141;
          }
          while (v141);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
        *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139)) = *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139))
                                                               * v134;
        v71 = v334;
        v138 = v335;
        v146 = v335 - v334;
        v147 = v146 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_187;
        v148 = v131[3];
        v149 = (char *)v334[v147] + 1;
        v334[v147] = v149;
        if ((unint64_t)v149 < *(_QWORD *)(v148 + 8 * v147))
        {
LABEL_186:
          v146 = 1;
LABEL_187:
          if (v147 < 0 || !v146)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v150 = (unint64_t *)&v71[v146 - 2];
      v151 = v148 - 16;
      while (1)
      {
        v152 = v146 - 1;
        v150[1] = 0;
        if (v146 - 1 <= 0)
          goto LABEL_215;
        v153 = *v150 + 1;
        *v150-- = v153;
        v154 = *(_QWORD *)(v151 + 8 * v146--);
        if (v153 < v154)
        {
          v147 = v152 - 1;
          goto LABEL_186;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)(*(double *)a2 * (double)*a3);
LABEL_38:
          *a3 = v11;
          return;
        case 1:
          v212 = *(double *)a2 * *(double *)a3;
LABEL_253:
          *(double *)a3 = v212;
          return;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v108 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v108, *a3);
          *a3 = (uint64_t)v108;
          *v108 = 1;
          do
          {
            v109 = __ldaxr((unint64_t *)v12);
            v15 = --v109 == 0;
          }
          while (__stlxr(v109, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v252 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v253 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v253, *a3);
            *a3 = (uint64_t)v253;
            *v253 = 1;
            do
            {
              v254 = __ldaxr(v252);
              v255 = v254 - 1;
            }
            while (__stlxr(v255, v252));
            if (!v255)
            {
              v256 = (void *)v252[1];
              if (v256)
              {
                v252[2] = (unint64_t)v256;
                operator delete(v256);
              }
              MEMORY[0x219A19A08](v252, 0x1080C409938AC02);
            }
          }
          v257 = *(double **)(*a3 + 8);
          v258 = *(_QWORD *)(*a3 + 16) - (_QWORD)v257;
          if (v258)
          {
            v259 = *(double *)a2;
            v260 = v258 >> 3;
            if (v260 <= 1)
              v260 = 1;
            do
            {
              *v257 = v259 * *v257;
              ++v257;
              --v260;
            }
            while (v260);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v285, *a3);
          *a3 = (uint64_t)v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v100);
            v189 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v215 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v215, *a3);
          *a3 = (uint64_t)v215;
          *v215 = 1;
          do
          {
            v216 = __ldaxr((unint64_t *)v100);
            v103 = --v216 == 0;
          }
          while (__stlxr(v216, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v295 = operator new();
          v296 = *a3;
          *(_QWORD *)v295 = *(_QWORD *)*a3;
          *(_QWORD *)(v295 + 8) = *(_QWORD *)(v296 + 8);
          v297 = *(_QWORD *)(v296 + 16);
          *(_QWORD *)(v295 + 16) = v297;
          if (v297)
          {
            v298 = (unsigned int *)(v297 + 8);
            do
              v299 = __ldxr(v298);
            while (__stxr(v299 + 1, v298));
          }
          v300 = *(_OWORD *)(v296 + 24);
          v301 = *(_OWORD *)(v296 + 40);
          *(_OWORD *)(v295 + 56) = *(_OWORD *)(v296 + 56);
          *(_OWORD *)(v295 + 40) = v301;
          *(_OWORD *)(v295 + 24) = v300;
          *a3 = v295;
          *(_QWORD *)v295 = 1;
          do
          {
            v302 = __ldaxr((unint64_t *)v190);
            v199 = --v302 == 0;
          }
          while (__stlxr(v302, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v155 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v156 = (_QWORD *)operator new();
            v157 = *a3 + 8;
            *v156 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v156 + 1, v157);
            *a3 = (uint64_t)v156;
            *v156 = 1;
            do
            {
              v158 = __ldaxr(v155);
              v159 = v158 - 1;
            }
            while (__stlxr(v159, v155));
            if (!v159)
            {
              v160 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v155);
              MEMORY[0x219A19A08](v160, 0x1030C407B73B9F7);
            }
          }
          v161 = (uint64_t *)*a3;
          v163 = *(uint64_t **)(*a3 + 24);
          v162 = *(uint64_t **)(*a3 + 32);
          if (v162 == v163)
            return;
          if (!v161[1])
            return;
          v164 = *(double *)a2;
          v165 = 1;
          do
          {
            v166 = *v163++;
            v165 *= v166;
          }
          while (v163 != v162);
          if (!v165)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
          v167 = (v161[4] - v161[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v167, &v333);
          v71 = v334;
          v168 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v169 = 0;
        v170 = (char *)v168 - (char *)v71;
        if (v170)
        {
          v171 = v170 >> 3;
          v172 = (uint64_t *)v161[6];
          if (v171 <= 1)
            v171 = 1;
          do
          {
            v174 = (uint64_t)*v71++;
            v173 = v174;
            v175 = *v172++;
            v169 += v175 * v173;
            --v171;
          }
          while (v171);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
        *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169)) = v164
                                                               * *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169));
        v71 = v334;
        v168 = v335;
        v176 = v335 - v334;
        v177 = v176 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_212;
        v178 = v161[3];
        v179 = (char *)v334[v177] + 1;
        v334[v177] = v179;
        if ((unint64_t)v179 < *(_QWORD *)(v178 + 8 * v177))
        {
LABEL_211:
          v176 = 1;
LABEL_212:
          if (v177 < 0 || !v176)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v180 = (unint64_t *)&v71[v176 - 2];
      v181 = v178 - 16;
      while (1)
      {
        v182 = v176 - 1;
        v180[1] = 0;
        if (v176 - 1 <= 0)
          goto LABEL_215;
        v183 = *v180 + 1;
        *v180-- = v183;
        v184 = *(_QWORD *)(v181 + 8 * v176--);
        if (v183 < v184)
        {
          v177 = v182 - 1;
          goto LABEL_211;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v18 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, *a3);
          *a3 = (uint64_t)v18;
          *v18 = 1;
          do
          {
            v19 = __ldaxr((unint64_t *)v12);
            v15 = --v19 == 0;
          }
          while (__stlxr(v19, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v36 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v36, *a3);
          *a3 = (uint64_t)v36;
          *v36 = 1;
          do
          {
            v37 = __ldaxr(v30);
            v33 = --v37 == 0;
          }
          while (__stlxr(v37, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v229, *a3);
          *a3 = (uint64_t)v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr((unint64_t *)v100);
            v189 = --v230 == 0;
          }
          while (__stlxr(v230, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v185 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v185, *a3);
          *a3 = (uint64_t)v185;
          *v185 = 1;
          do
          {
            v186 = __ldaxr((unint64_t *)v100);
            v103 = --v186 == 0;
          }
          while (__stlxr(v186, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v231 = operator new();
          v232 = *a3;
          *(_QWORD *)v231 = *(_QWORD *)*a3;
          *(_QWORD *)(v231 + 8) = *(_QWORD *)(v232 + 8);
          v233 = *(_QWORD *)(v232 + 16);
          *(_QWORD *)(v231 + 16) = v233;
          if (v233)
          {
            v234 = (unsigned int *)(v233 + 8);
            do
              v235 = __ldxr(v234);
            while (__stxr(v235 + 1, v234));
          }
          v236 = *(_OWORD *)(v232 + 24);
          v237 = *(_OWORD *)(v232 + 40);
          *(_OWORD *)(v231 + 56) = *(_OWORD *)(v232 + 56);
          *(_OWORD *)(v231 + 40) = v237;
          *(_OWORD *)(v231 + 24) = v236;
          *a3 = v231;
          *(_QWORD *)v231 = 1;
          do
          {
            v238 = __ldaxr((unint64_t *)v190);
            v199 = --v238 == 0;
          }
          while (__stlxr(v238, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v97 = (_QWORD *)operator new();
          v98 = *a3 + 8;
          *v97 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, v98);
          *a3 = (uint64_t)v97;
          *v97 = 1;
          do
          {
            v99 = __ldaxr(v38);
            v42 = --v99 == 0;
          }
          while (__stlxr(v99, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v20 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, *a3);
          *a3 = (uint64_t)v20;
          *v20 = 1;
          do
          {
            v21 = __ldaxr((unint64_t *)v12);
            v15 = --v21 == 0;
          }
          while (__stlxr(v21, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v43 = *(double *)a2;
          v44 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v45 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v45, *a3);
            *a3 = (uint64_t)v45;
            *v45 = 1;
            do
            {
              v46 = __ldaxr(v44);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v44));
            if (!v47)
            {
              v48 = (void *)v44[1];
              if (v48)
              {
                v44[2] = (unint64_t)v48;
                operator delete(v48);
              }
              MEMORY[0x219A19A08](v44, 0x1080C409938AC02);
            }
          }
          v49 = *a3;
          turi::flexible_type_fail(*(_QWORD *)(*a3 + 16) - *(_QWORD *)(*a3 + 8) == *(_QWORD *)(*(_QWORD *)&v43 + 16)
                                                                                 - *(_QWORD *)(*(_QWORD *)&v43 + 8));
          v50 = *(double **)(v49 + 8);
          v51 = *(_QWORD *)(v49 + 16) - (_QWORD)v50;
          if (v51)
          {
            v52 = v51 >> 3;
            v53 = *(double **)(*(_QWORD *)&v43 + 8);
            if (v52 <= 1)
              v52 = 1;
            do
            {
              v54 = *v53++;
              *v50 = v54 * *v50;
              ++v50;
              --v52;
            }
            while (v52);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v241 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v241, *a3);
          *a3 = (uint64_t)v241;
          *v241 = 1;
          do
          {
            v242 = __ldaxr((unint64_t *)v100);
            v189 = --v242 == 0;
          }
          while (__stlxr(v242, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v203 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v203, *a3);
          *a3 = (uint64_t)v203;
          *v203 = 1;
          do
          {
            v204 = __ldaxr((unint64_t *)v100);
            v103 = --v204 == 0;
          }
          while (__stlxr(v204, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v265 = operator new();
          v266 = *a3;
          *(_QWORD *)v265 = *(_QWORD *)*a3;
          *(_QWORD *)(v265 + 8) = *(_QWORD *)(v266 + 8);
          v267 = *(_QWORD *)(v266 + 16);
          *(_QWORD *)(v265 + 16) = v267;
          if (v267)
          {
            v268 = (unsigned int *)(v267 + 8);
            do
              v269 = __ldxr(v268);
            while (__stxr(v269 + 1, v268));
          }
          v270 = *(_OWORD *)(v266 + 24);
          v271 = *(_OWORD *)(v266 + 40);
          *(_OWORD *)(v265 + 56) = *(_OWORD *)(v266 + 56);
          *(_OWORD *)(v265 + 40) = v271;
          *(_OWORD *)(v265 + 24) = v270;
          *a3 = v265;
          *(_QWORD *)v265 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v190);
            v199 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v114 = (_QWORD *)operator new();
          v115 = *a3 + 8;
          *v114 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v114 + 1, v115);
          *a3 = (uint64_t)v114;
          *v114 = 1;
          do
          {
            v116 = __ldaxr(v38);
            v42 = --v116 == 0;
          }
          while (__stlxr(v116, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, *a3);
          *a3 = (uint64_t)v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v31 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v31, *a3);
          *a3 = (uint64_t)v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(v30);
            v33 = --v32 == 0;
          }
          while (__stlxr(v32, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v187 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v187, *a3);
          *a3 = (uint64_t)v187;
          *v187 = 1;
          do
          {
            v188 = __ldaxr((unint64_t *)v100);
            v189 = --v188 == 0;
          }
          while (__stlxr(v188, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v101 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v101, *a3);
          *a3 = (uint64_t)v101;
          *v101 = 1;
          do
          {
            v102 = __ldaxr((unint64_t *)v100);
            v103 = --v102 == 0;
          }
          while (__stlxr(v102, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v191 = operator new();
          v192 = *a3;
          *(_QWORD *)v191 = *(_QWORD *)*a3;
          *(_QWORD *)(v191 + 8) = *(_QWORD *)(v192 + 8);
          v193 = *(_QWORD *)(v192 + 16);
          *(_QWORD *)(v191 + 16) = v193;
          if (v193)
          {
            v194 = (unsigned int *)(v193 + 8);
            do
              v195 = __ldxr(v194);
            while (__stxr(v195 + 1, v194));
          }
          v196 = *(_OWORD *)(v192 + 24);
          v197 = *(_OWORD *)(v192 + 40);
          *(_OWORD *)(v191 + 56) = *(_OWORD *)(v192 + 56);
          *(_OWORD *)(v191 + 40) = v197;
          *(_OWORD *)(v191 + 24) = v196;
          *a3 = v191;
          *(_QWORD *)v191 = 1;
          do
          {
            v198 = __ldaxr((unint64_t *)v190);
            v199 = --v198 == 0;
          }
          while (__stlxr(v198, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v39 = (_QWORD *)operator new();
          v40 = *a3 + 8;
          *v39 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
          *a3 = (uint64_t)v39;
          *v39 = 1;
          do
          {
            v41 = __ldaxr(v38);
            v42 = --v41 == 0;
          }
          while (__stlxr(v41, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v24 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, *a3);
          *a3 = (uint64_t)v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr((unint64_t *)v12);
            v15 = --v25 == 0;
          }
          while (__stlxr(v25, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v104 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v104, *a3);
          *a3 = (uint64_t)v104;
          *v104 = 1;
          do
          {
            v105 = __ldaxr(v30);
            v33 = --v105 == 0;
          }
          while (__stlxr(v105, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v303 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v303, *a3);
          *a3 = (uint64_t)v303;
          *v303 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v100);
            v189 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v239 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v239, *a3);
          *a3 = (uint64_t)v239;
          *v239 = 1;
          do
          {
            v240 = __ldaxr((unint64_t *)v100);
            v103 = --v240 == 0;
          }
          while (__stlxr(v240, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v305 = operator new();
          v306 = *a3;
          *(_QWORD *)v305 = *(_QWORD *)*a3;
          *(_QWORD *)(v305 + 8) = *(_QWORD *)(v306 + 8);
          v307 = *(_QWORD *)(v306 + 16);
          *(_QWORD *)(v305 + 16) = v307;
          if (v307)
          {
            v308 = (unsigned int *)(v307 + 8);
            do
              v309 = __ldxr(v308);
            while (__stxr(v309 + 1, v308));
          }
          v310 = *(_OWORD *)(v306 + 24);
          v311 = *(_OWORD *)(v306 + 40);
          *(_OWORD *)(v305 + 56) = *(_OWORD *)(v306 + 56);
          *(_OWORD *)(v305 + 40) = v311;
          *(_OWORD *)(v305 + 24) = v310;
          *a3 = v305;
          *(_QWORD *)v305 = 1;
          do
          {
            v312 = __ldaxr((unint64_t *)v190);
            v199 = --v312 == 0;
          }
          while (__stlxr(v312, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v200 = (_QWORD *)operator new();
          v201 = *a3 + 8;
          *v200 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v200 + 1, v201);
          *a3 = (uint64_t)v200;
          *v200 = 1;
          do
          {
            v202 = __ldaxr(v38);
            v42 = --v202 == 0;
          }
          while (__stlxr(v202, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, *a3);
          *a3 = (uint64_t)v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr((unint64_t *)v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v112 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v112, *a3);
          *a3 = (uint64_t)v112;
          *v112 = 1;
          do
          {
            v113 = __ldaxr(v30);
            v33 = --v113 == 0;
          }
          while (__stlxr(v113, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v313 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v313, *a3);
          *a3 = (uint64_t)v313;
          *v313 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v100);
            v189 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, *a3);
          *a3 = (uint64_t)v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v100);
            v103 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v315 = operator new();
          v316 = *a3;
          *(_QWORD *)v315 = *(_QWORD *)*a3;
          *(_QWORD *)(v315 + 8) = *(_QWORD *)(v316 + 8);
          v317 = *(_QWORD *)(v316 + 16);
          *(_QWORD *)(v315 + 16) = v317;
          if (v317)
          {
            v318 = (unsigned int *)(v317 + 8);
            do
              v319 = __ldxr(v318);
            while (__stxr(v319 + 1, v318));
          }
          v320 = *(_OWORD *)(v316 + 24);
          v321 = *(_OWORD *)(v316 + 40);
          *(_OWORD *)(v315 + 56) = *(_OWORD *)(v316 + 56);
          *(_OWORD *)(v315 + 40) = v321;
          *(_OWORD *)(v315 + 24) = v320;
          *a3 = v315;
          *(_QWORD *)v315 = 1;
          do
          {
            v322 = __ldaxr((unint64_t *)v190);
            v199 = --v322 == 0;
          }
          while (__stlxr(v322, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v209 = (_QWORD *)operator new();
          v210 = *a3 + 8;
          *v209 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v209 + 1, v210);
          *a3 = (uint64_t)v209;
          *v209 = 1;
          do
          {
            v211 = __ldaxr(v38);
            v42 = --v211 == 0;
          }
          while (__stlxr(v211, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v22 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, *a3);
          *a3 = (uint64_t)v22;
          *v22 = 1;
          do
          {
            v23 = __ldaxr((unint64_t *)v12);
            v15 = --v23 == 0;
          }
          while (__stlxr(v23, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *a3);
          *a3 = (uint64_t)v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v30);
            v33 = --v56 == 0;
          }
          while (__stlxr(v56, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v261 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v261, *a3);
          *a3 = (uint64_t)v261;
          *v261 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v100);
            v189 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v205 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v205, *a3);
          *a3 = (uint64_t)v205;
          *v205 = 1;
          do
          {
            v206 = __ldaxr((unint64_t *)v100);
            v103 = --v206 == 0;
          }
          while (__stlxr(v206, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v273 = operator new();
          v274 = *a3;
          *(_QWORD *)v273 = *(_QWORD *)*a3;
          *(_QWORD *)(v273 + 8) = *(_QWORD *)(v274 + 8);
          v275 = *(_QWORD *)(v274 + 16);
          *(_QWORD *)(v273 + 16) = v275;
          if (v275)
          {
            v276 = (unsigned int *)(v275 + 8);
            do
              v277 = __ldxr(v276);
            while (__stxr(v277 + 1, v276));
          }
          v278 = *(_OWORD *)(v274 + 24);
          v279 = *(_OWORD *)(v274 + 40);
          *(_OWORD *)(v273 + 56) = *(_OWORD *)(v274 + 56);
          *(_OWORD *)(v273 + 40) = v279;
          *(_OWORD *)(v273 + 24) = v278;
          *a3 = v273;
          *(_QWORD *)v273 = 1;
          do
          {
            v280 = __ldaxr((unint64_t *)v190);
            v199 = --v280 == 0;
          }
          while (__stlxr(v280, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v122 = (_QWORD *)operator new();
          v123 = *a3 + 8;
          *v122 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v122 + 1, v123);
          *a3 = (uint64_t)v122;
          *v122 = 1;
          do
          {
            v124 = __ldaxr(v38);
            v42 = --v124 == 0;
          }
          while (__stlxr(v124, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, *a3);
          *a3 = (uint64_t)v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr((unint64_t *)v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v117 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v117, *a3);
          *a3 = (uint64_t)v117;
          *v117 = 1;
          do
          {
            v118 = __ldaxr(v30);
            v33 = --v118 == 0;
          }
          while (__stlxr(v118, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v323 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, *a3);
          *a3 = (uint64_t)v323;
          *v323 = 1;
          do
          {
            v324 = __ldaxr((unint64_t *)v100);
            v189 = --v324 == 0;
          }
          while (__stlxr(v324, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v281 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v281, *a3);
          *a3 = (uint64_t)v281;
          *v281 = 1;
          do
          {
            v282 = __ldaxr((unint64_t *)v100);
            v103 = --v282 == 0;
          }
          while (__stlxr(v282, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v325 = operator new();
          v326 = *a3;
          *(_QWORD *)v325 = *(_QWORD *)*a3;
          *(_QWORD *)(v325 + 8) = *(_QWORD *)(v326 + 8);
          v327 = *(_QWORD *)(v326 + 16);
          *(_QWORD *)(v325 + 16) = v327;
          if (v327)
          {
            v328 = (unsigned int *)(v327 + 8);
            do
              v329 = __ldxr(v328);
            while (__stxr(v329 + 1, v328));
          }
          v330 = *(_OWORD *)(v326 + 24);
          v331 = *(_OWORD *)(v326 + 40);
          *(_OWORD *)(v325 + 56) = *(_OWORD *)(v326 + 56);
          *(_OWORD *)(v325 + 40) = v331;
          *(_OWORD *)(v325 + 24) = v330;
          *a3 = v325;
          *(_QWORD *)v325 = 1;
          do
          {
            v332 = __ldaxr((unint64_t *)v190);
            v199 = --v332 == 0;
          }
          while (__stlxr(v332, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v225 = (_QWORD *)operator new();
          v226 = *a3 + 8;
          *v225 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v225 + 1, v226);
          *a3 = (uint64_t)v225;
          *v225 = 1;
          do
          {
            v227 = __ldaxr(v38);
            v42 = --v227 == 0;
          }
          while (__stlxr(v227, v38));
LABEL_272:
          if (!v42)
            goto LABEL_408;
          v110 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38);
          v228 = 2071181815;
          goto LABEL_406;
        default:
          goto LABEL_411;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, *a3);
          *a3 = (uint64_t)v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr((unint64_t *)v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, (unint64_t *)v12));
LABEL_136:
          if (!v15)
            goto LABEL_408;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v110 = (_QWORD *)v12;
          v111 = 0x1012C404EF22A49;
          goto LABEL_407;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v34, *a3);
          *a3 = (uint64_t)v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr(v30);
            v33 = --v35 == 0;
          }
          while (__stlxr(v35, v30));
LABEL_152:
          if (!v33)
            goto LABEL_408;
          v119 = (void *)v30[1];
          if (v119)
          {
            v30[2] = (unint64_t)v119;
            operator delete(v119);
          }
          v110 = v30;
          v111 = 0x1080C409938AC02;
          goto LABEL_407;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v207 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v207, *a3);
          *a3 = (uint64_t)v207;
          *v207 = 1;
          do
          {
            v208 = __ldaxr((unint64_t *)v100);
            v189 = --v208 == 0;
          }
          while (__stlxr(v208, (unint64_t *)v100));
LABEL_393:
          if (!v189)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v334);
          goto LABEL_396;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v120 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v120, *a3);
          *a3 = (uint64_t)v120;
          *v120 = 1;
          do
          {
            v121 = __ldaxr((unint64_t *)v100);
            v103 = --v121 == 0;
          }
          while (__stlxr(v121, (unint64_t *)v100));
LABEL_343:
          if (!v103)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v334);
LABEL_396:
          v110 = (_QWORD *)v100;
          v111 = 0x1020C405E66F15BLL;
          goto LABEL_407;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v217 = operator new();
          v218 = *a3;
          *(_QWORD *)v217 = *(_QWORD *)*a3;
          *(_QWORD *)(v217 + 8) = *(_QWORD *)(v218 + 8);
          v219 = *(_QWORD *)(v218 + 16);
          *(_QWORD *)(v217 + 16) = v219;
          if (v219)
          {
            v220 = (unsigned int *)(v219 + 8);
            do
              v221 = __ldxr(v220);
            while (__stxr(v221 + 1, v220));
          }
          v222 = *(_OWORD *)(v218 + 24);
          v223 = *(_OWORD *)(v218 + 40);
          *(_OWORD *)(v217 + 56) = *(_OWORD *)(v218 + 56);
          *(_OWORD *)(v217 + 40) = v223;
          *(_OWORD *)(v217 + 24) = v222;
          *a3 = v217;
          *(_QWORD *)v217 = 1;
          do
          {
            v224 = __ldaxr((unint64_t *)v190);
            v199 = --v224 == 0;
          }
          while (__stlxr(v224, (unint64_t *)v190));
LABEL_403:
          if (!v199)
            goto LABEL_408;
          boost::detail::shared_count::~shared_count((unsigned int **)(v190 + 16));
          v110 = (_QWORD *)v190;
          v228 = -235920773;
LABEL_406:
          v111 = v228 | 0x1030C4000000000;
LABEL_407:
          MEMORY[0x219A19A08](v110, v111);
LABEL_408:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v57 = *(double *)a2;
          v58 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v59 = (_QWORD *)operator new();
            v60 = *a3 + 8;
            *v59 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
            *a3 = (uint64_t)v59;
            *v59 = 1;
            do
            {
              v61 = __ldaxr(v58);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v58));
            if (!v62)
            {
              v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v58);
              MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
            }
          }
          v64 = *a3;
          v65 = (uint64_t *)(*a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v65, *(_QWORD *)&v57 + 8))
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v67 = *(uint64_t **)(v64 + 24);
          v66 = *(uint64_t **)(v64 + 32);
          if (v66 == v67)
            return;
          if (!*v65)
            return;
          v68 = 1;
          do
          {
            v69 = *v67++;
            v68 *= v69;
          }
          while (v67 != v66);
          if (!v68)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
          v70 = (uint64_t)(*(_QWORD *)(v64 + 32) - *(_QWORD *)(v64 + 24)) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v70, &v333);
          v71 = v334;
          v72 = v335;
          break;
        default:
          goto LABEL_411;
      }
      break;
    default:
LABEL_411:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v73 = (char *)v72 - (char *)v71;
    if (v73)
    {
      v74 = 0;
      v75 = v73 >> 3;
      v76 = *(uint64_t **)(*(_QWORD *)&v57 + 48);
      if (v75 <= 1)
        v75 = 1;
      v77 = v71;
      v78 = v75;
      do
      {
        v80 = (uint64_t)*v77++;
        v79 = v80;
        v81 = *v76++;
        v74 += v81 * v79;
        --v78;
      }
      while (v78);
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v57 + 72) + v74));
      v84 = *(uint64_t **)(v64 + 48);
      do
      {
        v86 = (uint64_t)*v71++;
        v85 = v86;
        v87 = *v84++;
        v82 += v87 * v85;
        --v75;
      }
      while (v75);
    }
    else
    {
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v57 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
    *(double *)(**(_QWORD **)(v64 + 8) + 8 * (*(_QWORD *)(v64 + 72) + v82)) = v83
                                                                            * *(double *)(**(_QWORD **)(v64 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v64 + 72) + v82));
    v71 = v334;
    v72 = v335;
    v88 = v335 - v334;
    v89 = v88 - 1;
    if ((char *)v335 - (char *)v334 < 1)
      goto LABEL_114;
    v90 = *(_QWORD *)(v64 + 24);
    v91 = (char *)v334[v89] + 1;
    v334[v89] = v91;
    if ((unint64_t)v91 >= *(_QWORD *)(v90 + 8 * v89))
      break;
LABEL_113:
    v88 = 1;
LABEL_114:
    if (v89 < 0 || !v88)
      goto LABEL_214;
  }
  v92 = (unint64_t *)&v71[v88 - 2];
  v93 = v90 - 16;
  while (1)
  {
    v94 = v88 - 1;
    v92[1] = 0;
    if (v88 - 1 <= 0)
      break;
    v95 = *v92 + 1;
    *v92-- = v95;
    v96 = *(_QWORD *)(v93 + 8 * v88--);
    if (v95 < v96)
    {
      v89 = v94 - 1;
      goto LABEL_113;
    }
  }
LABEL_214:
  if (v71)
  {
LABEL_215:
    v335 = v71;
    operator delete(v71);
  }
}

void sub_2182541B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933F18;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933F18;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_14::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  double v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  _QWORD *v55;
  unint64_t v56;
  double v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  void **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  void *v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void **v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  unint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  __int128 v196;
  __int128 v197;
  unint64_t v198;
  BOOL v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  double v212;
  _QWORD *v213;
  unint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  __int128 v222;
  __int128 v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unsigned int v228;
  _QWORD *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  __int128 v236;
  __int128 v237;
  unint64_t v238;
  _QWORD *v239;
  unint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t *v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  void *v247;
  double *v248;
  uint64_t v249;
  unint64_t v250;
  double v251;
  unint64_t *v252;
  _QWORD *v253;
  unint64_t v254;
  unint64_t v255;
  void *v256;
  double *v257;
  uint64_t v258;
  double v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  __int128 v278;
  __int128 v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int *v290;
  unsigned int v291;
  __int128 v292;
  __int128 v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int *v298;
  unsigned int v299;
  __int128 v300;
  __int128 v301;
  unint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  __int128 v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  void **v334;
  void **v335;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((uint64_t *)a1 != a3)
  {
    *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a1 + 5);
    *a3 = *(_QWORD *)a1;
    v5 = *(unsigned __int8 *)(a1 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = (unint64_t *)*a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = *a3 * *(_QWORD *)a2;
          goto LABEL_38;
        case 1:
          v212 = *(double *)a3 * (double)*(uint64_t *)a2;
          goto LABEL_253;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v106 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v106, *a3);
          *a3 = (uint64_t)v106;
          *v106 = 1;
          do
          {
            v107 = __ldaxr((unint64_t *)v12);
            v15 = --v107 == 0;
          }
          while (__stlxr(v107, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v243 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v244 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v244, *a3);
            *a3 = (uint64_t)v244;
            *v244 = 1;
            do
            {
              v245 = __ldaxr(v243);
              v246 = v245 - 1;
            }
            while (__stlxr(v246, v243));
            if (!v246)
            {
              v247 = (void *)v243[1];
              if (v247)
              {
                v243[2] = (unint64_t)v247;
                operator delete(v247);
              }
              MEMORY[0x219A19A08](v243, 0x1080C409938AC02);
            }
          }
          v248 = *(double **)(*a3 + 8);
          v249 = *(_QWORD *)(*a3 + 16) - (_QWORD)v248;
          if (v249)
          {
            v250 = v249 >> 3;
            v251 = (double)*(uint64_t *)a2;
            if (v250 <= 1)
              v250 = 1;
            do
            {
              *v248 = *v248 * v251;
              ++v248;
              --v250;
            }
            while (v250);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v283 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v283, *a3);
          *a3 = (uint64_t)v283;
          *v283 = 1;
          do
          {
            v284 = __ldaxr((unint64_t *)v100);
            v189 = --v284 == 0;
          }
          while (__stlxr(v284, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v213 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v213, *a3);
          *a3 = (uint64_t)v213;
          *v213 = 1;
          do
          {
            v214 = __ldaxr((unint64_t *)v100);
            v103 = --v214 == 0;
          }
          while (__stlxr(v214, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v287 = operator new();
          v288 = *a3;
          *(_QWORD *)v287 = *(_QWORD *)*a3;
          *(_QWORD *)(v287 + 8) = *(_QWORD *)(v288 + 8);
          v289 = *(_QWORD *)(v288 + 16);
          *(_QWORD *)(v287 + 16) = v289;
          if (v289)
          {
            v290 = (unsigned int *)(v289 + 8);
            do
              v291 = __ldxr(v290);
            while (__stxr(v291 + 1, v290));
          }
          v292 = *(_OWORD *)(v288 + 24);
          v293 = *(_OWORD *)(v288 + 40);
          *(_OWORD *)(v287 + 56) = *(_OWORD *)(v288 + 56);
          *(_OWORD *)(v287 + 40) = v293;
          *(_OWORD *)(v287 + 24) = v292;
          *a3 = v287;
          *(_QWORD *)v287 = 1;
          do
          {
            v294 = __ldaxr((unint64_t *)v190);
            v199 = --v294 == 0;
          }
          while (__stlxr(v294, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v125 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v126 = (_QWORD *)operator new();
            v127 = *a3 + 8;
            *v126 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
            *a3 = (uint64_t)v126;
            *v126 = 1;
            do
            {
              v128 = __ldaxr(v125);
              v129 = v128 - 1;
            }
            while (__stlxr(v129, v125));
            if (!v129)
            {
              v130 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v125);
              MEMORY[0x219A19A08](v130, 0x1030C407B73B9F7);
            }
          }
          v131 = (uint64_t *)*a3;
          v133 = *(uint64_t **)(*a3 + 24);
          v132 = *(uint64_t **)(*a3 + 32);
          if (v132 == v133)
            return;
          if (!v131[1])
            return;
          v134 = (double)*(uint64_t *)a2;
          v135 = 1;
          do
          {
            v136 = *v133++;
            v135 *= v136;
          }
          while (v133 != v132);
          if (!v135)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
          v137 = (v131[4] - v131[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v137, &v333);
          v71 = v334;
          v138 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v139 = 0;
        v140 = (char *)v138 - (char *)v71;
        if (v140)
        {
          v141 = v140 >> 3;
          v142 = (uint64_t *)v131[6];
          if (v141 <= 1)
            v141 = 1;
          do
          {
            v144 = (uint64_t)*v71++;
            v143 = v144;
            v145 = *v142++;
            v139 += v145 * v143;
            --v141;
          }
          while (v141);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
        *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139)) = *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139))
                                                               * v134;
        v71 = v334;
        v138 = v335;
        v146 = v335 - v334;
        v147 = v146 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_187;
        v148 = v131[3];
        v149 = (char *)v334[v147] + 1;
        v334[v147] = v149;
        if ((unint64_t)v149 < *(_QWORD *)(v148 + 8 * v147))
        {
LABEL_186:
          v146 = 1;
LABEL_187:
          if (v147 < 0 || !v146)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v150 = (unint64_t *)&v71[v146 - 2];
      v151 = v148 - 16;
      while (1)
      {
        v152 = v146 - 1;
        v150[1] = 0;
        if (v146 - 1 <= 0)
          goto LABEL_215;
        v153 = *v150 + 1;
        *v150-- = v153;
        v154 = *(_QWORD *)(v151 + 8 * v146--);
        if (v153 < v154)
        {
          v147 = v152 - 1;
          goto LABEL_186;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)(*(double *)a2 * (double)*a3);
LABEL_38:
          *a3 = v11;
          return;
        case 1:
          v212 = *(double *)a2 * *(double *)a3;
LABEL_253:
          *(double *)a3 = v212;
          return;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v108 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v108, *a3);
          *a3 = (uint64_t)v108;
          *v108 = 1;
          do
          {
            v109 = __ldaxr((unint64_t *)v12);
            v15 = --v109 == 0;
          }
          while (__stlxr(v109, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v252 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v253 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v253, *a3);
            *a3 = (uint64_t)v253;
            *v253 = 1;
            do
            {
              v254 = __ldaxr(v252);
              v255 = v254 - 1;
            }
            while (__stlxr(v255, v252));
            if (!v255)
            {
              v256 = (void *)v252[1];
              if (v256)
              {
                v252[2] = (unint64_t)v256;
                operator delete(v256);
              }
              MEMORY[0x219A19A08](v252, 0x1080C409938AC02);
            }
          }
          v257 = *(double **)(*a3 + 8);
          v258 = *(_QWORD *)(*a3 + 16) - (_QWORD)v257;
          if (v258)
          {
            v259 = *(double *)a2;
            v260 = v258 >> 3;
            if (v260 <= 1)
              v260 = 1;
            do
            {
              *v257 = v259 * *v257;
              ++v257;
              --v260;
            }
            while (v260);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v285, *a3);
          *a3 = (uint64_t)v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v100);
            v189 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v215 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v215, *a3);
          *a3 = (uint64_t)v215;
          *v215 = 1;
          do
          {
            v216 = __ldaxr((unint64_t *)v100);
            v103 = --v216 == 0;
          }
          while (__stlxr(v216, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v295 = operator new();
          v296 = *a3;
          *(_QWORD *)v295 = *(_QWORD *)*a3;
          *(_QWORD *)(v295 + 8) = *(_QWORD *)(v296 + 8);
          v297 = *(_QWORD *)(v296 + 16);
          *(_QWORD *)(v295 + 16) = v297;
          if (v297)
          {
            v298 = (unsigned int *)(v297 + 8);
            do
              v299 = __ldxr(v298);
            while (__stxr(v299 + 1, v298));
          }
          v300 = *(_OWORD *)(v296 + 24);
          v301 = *(_OWORD *)(v296 + 40);
          *(_OWORD *)(v295 + 56) = *(_OWORD *)(v296 + 56);
          *(_OWORD *)(v295 + 40) = v301;
          *(_OWORD *)(v295 + 24) = v300;
          *a3 = v295;
          *(_QWORD *)v295 = 1;
          do
          {
            v302 = __ldaxr((unint64_t *)v190);
            v199 = --v302 == 0;
          }
          while (__stlxr(v302, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v155 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v156 = (_QWORD *)operator new();
            v157 = *a3 + 8;
            *v156 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v156 + 1, v157);
            *a3 = (uint64_t)v156;
            *v156 = 1;
            do
            {
              v158 = __ldaxr(v155);
              v159 = v158 - 1;
            }
            while (__stlxr(v159, v155));
            if (!v159)
            {
              v160 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v155);
              MEMORY[0x219A19A08](v160, 0x1030C407B73B9F7);
            }
          }
          v161 = (uint64_t *)*a3;
          v163 = *(uint64_t **)(*a3 + 24);
          v162 = *(uint64_t **)(*a3 + 32);
          if (v162 == v163)
            return;
          if (!v161[1])
            return;
          v164 = *(double *)a2;
          v165 = 1;
          do
          {
            v166 = *v163++;
            v165 *= v166;
          }
          while (v163 != v162);
          if (!v165)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
          v167 = (v161[4] - v161[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v167, &v333);
          v71 = v334;
          v168 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v169 = 0;
        v170 = (char *)v168 - (char *)v71;
        if (v170)
        {
          v171 = v170 >> 3;
          v172 = (uint64_t *)v161[6];
          if (v171 <= 1)
            v171 = 1;
          do
          {
            v174 = (uint64_t)*v71++;
            v173 = v174;
            v175 = *v172++;
            v169 += v175 * v173;
            --v171;
          }
          while (v171);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
        *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169)) = v164
                                                               * *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169));
        v71 = v334;
        v168 = v335;
        v176 = v335 - v334;
        v177 = v176 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_212;
        v178 = v161[3];
        v179 = (char *)v334[v177] + 1;
        v334[v177] = v179;
        if ((unint64_t)v179 < *(_QWORD *)(v178 + 8 * v177))
        {
LABEL_211:
          v176 = 1;
LABEL_212:
          if (v177 < 0 || !v176)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v180 = (unint64_t *)&v71[v176 - 2];
      v181 = v178 - 16;
      while (1)
      {
        v182 = v176 - 1;
        v180[1] = 0;
        if (v176 - 1 <= 0)
          goto LABEL_215;
        v183 = *v180 + 1;
        *v180-- = v183;
        v184 = *(_QWORD *)(v181 + 8 * v176--);
        if (v183 < v184)
        {
          v177 = v182 - 1;
          goto LABEL_211;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v18 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, *a3);
          *a3 = (uint64_t)v18;
          *v18 = 1;
          do
          {
            v19 = __ldaxr((unint64_t *)v12);
            v15 = --v19 == 0;
          }
          while (__stlxr(v19, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v36 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v36, *a3);
          *a3 = (uint64_t)v36;
          *v36 = 1;
          do
          {
            v37 = __ldaxr(v30);
            v33 = --v37 == 0;
          }
          while (__stlxr(v37, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v229, *a3);
          *a3 = (uint64_t)v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr((unint64_t *)v100);
            v189 = --v230 == 0;
          }
          while (__stlxr(v230, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v185 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v185, *a3);
          *a3 = (uint64_t)v185;
          *v185 = 1;
          do
          {
            v186 = __ldaxr((unint64_t *)v100);
            v103 = --v186 == 0;
          }
          while (__stlxr(v186, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v231 = operator new();
          v232 = *a3;
          *(_QWORD *)v231 = *(_QWORD *)*a3;
          *(_QWORD *)(v231 + 8) = *(_QWORD *)(v232 + 8);
          v233 = *(_QWORD *)(v232 + 16);
          *(_QWORD *)(v231 + 16) = v233;
          if (v233)
          {
            v234 = (unsigned int *)(v233 + 8);
            do
              v235 = __ldxr(v234);
            while (__stxr(v235 + 1, v234));
          }
          v236 = *(_OWORD *)(v232 + 24);
          v237 = *(_OWORD *)(v232 + 40);
          *(_OWORD *)(v231 + 56) = *(_OWORD *)(v232 + 56);
          *(_OWORD *)(v231 + 40) = v237;
          *(_OWORD *)(v231 + 24) = v236;
          *a3 = v231;
          *(_QWORD *)v231 = 1;
          do
          {
            v238 = __ldaxr((unint64_t *)v190);
            v199 = --v238 == 0;
          }
          while (__stlxr(v238, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v97 = (_QWORD *)operator new();
          v98 = *a3 + 8;
          *v97 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, v98);
          *a3 = (uint64_t)v97;
          *v97 = 1;
          do
          {
            v99 = __ldaxr(v38);
            v42 = --v99 == 0;
          }
          while (__stlxr(v99, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v20 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, *a3);
          *a3 = (uint64_t)v20;
          *v20 = 1;
          do
          {
            v21 = __ldaxr((unint64_t *)v12);
            v15 = --v21 == 0;
          }
          while (__stlxr(v21, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v43 = *(double *)a2;
          v44 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v45 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v45, *a3);
            *a3 = (uint64_t)v45;
            *v45 = 1;
            do
            {
              v46 = __ldaxr(v44);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v44));
            if (!v47)
            {
              v48 = (void *)v44[1];
              if (v48)
              {
                v44[2] = (unint64_t)v48;
                operator delete(v48);
              }
              MEMORY[0x219A19A08](v44, 0x1080C409938AC02);
            }
          }
          v49 = *a3;
          turi::flexible_type_fail(*(_QWORD *)(*a3 + 16) - *(_QWORD *)(*a3 + 8) == *(_QWORD *)(*(_QWORD *)&v43 + 16)
                                                                                 - *(_QWORD *)(*(_QWORD *)&v43 + 8));
          v50 = *(double **)(v49 + 8);
          v51 = *(_QWORD *)(v49 + 16) - (_QWORD)v50;
          if (v51)
          {
            v52 = v51 >> 3;
            v53 = *(double **)(*(_QWORD *)&v43 + 8);
            if (v52 <= 1)
              v52 = 1;
            do
            {
              v54 = *v53++;
              *v50 = v54 * *v50;
              ++v50;
              --v52;
            }
            while (v52);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v241 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v241, *a3);
          *a3 = (uint64_t)v241;
          *v241 = 1;
          do
          {
            v242 = __ldaxr((unint64_t *)v100);
            v189 = --v242 == 0;
          }
          while (__stlxr(v242, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v203 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v203, *a3);
          *a3 = (uint64_t)v203;
          *v203 = 1;
          do
          {
            v204 = __ldaxr((unint64_t *)v100);
            v103 = --v204 == 0;
          }
          while (__stlxr(v204, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v265 = operator new();
          v266 = *a3;
          *(_QWORD *)v265 = *(_QWORD *)*a3;
          *(_QWORD *)(v265 + 8) = *(_QWORD *)(v266 + 8);
          v267 = *(_QWORD *)(v266 + 16);
          *(_QWORD *)(v265 + 16) = v267;
          if (v267)
          {
            v268 = (unsigned int *)(v267 + 8);
            do
              v269 = __ldxr(v268);
            while (__stxr(v269 + 1, v268));
          }
          v270 = *(_OWORD *)(v266 + 24);
          v271 = *(_OWORD *)(v266 + 40);
          *(_OWORD *)(v265 + 56) = *(_OWORD *)(v266 + 56);
          *(_OWORD *)(v265 + 40) = v271;
          *(_OWORD *)(v265 + 24) = v270;
          *a3 = v265;
          *(_QWORD *)v265 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v190);
            v199 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v114 = (_QWORD *)operator new();
          v115 = *a3 + 8;
          *v114 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v114 + 1, v115);
          *a3 = (uint64_t)v114;
          *v114 = 1;
          do
          {
            v116 = __ldaxr(v38);
            v42 = --v116 == 0;
          }
          while (__stlxr(v116, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, *a3);
          *a3 = (uint64_t)v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v31 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v31, *a3);
          *a3 = (uint64_t)v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(v30);
            v33 = --v32 == 0;
          }
          while (__stlxr(v32, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v187 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v187, *a3);
          *a3 = (uint64_t)v187;
          *v187 = 1;
          do
          {
            v188 = __ldaxr((unint64_t *)v100);
            v189 = --v188 == 0;
          }
          while (__stlxr(v188, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v101 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v101, *a3);
          *a3 = (uint64_t)v101;
          *v101 = 1;
          do
          {
            v102 = __ldaxr((unint64_t *)v100);
            v103 = --v102 == 0;
          }
          while (__stlxr(v102, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v191 = operator new();
          v192 = *a3;
          *(_QWORD *)v191 = *(_QWORD *)*a3;
          *(_QWORD *)(v191 + 8) = *(_QWORD *)(v192 + 8);
          v193 = *(_QWORD *)(v192 + 16);
          *(_QWORD *)(v191 + 16) = v193;
          if (v193)
          {
            v194 = (unsigned int *)(v193 + 8);
            do
              v195 = __ldxr(v194);
            while (__stxr(v195 + 1, v194));
          }
          v196 = *(_OWORD *)(v192 + 24);
          v197 = *(_OWORD *)(v192 + 40);
          *(_OWORD *)(v191 + 56) = *(_OWORD *)(v192 + 56);
          *(_OWORD *)(v191 + 40) = v197;
          *(_OWORD *)(v191 + 24) = v196;
          *a3 = v191;
          *(_QWORD *)v191 = 1;
          do
          {
            v198 = __ldaxr((unint64_t *)v190);
            v199 = --v198 == 0;
          }
          while (__stlxr(v198, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v39 = (_QWORD *)operator new();
          v40 = *a3 + 8;
          *v39 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
          *a3 = (uint64_t)v39;
          *v39 = 1;
          do
          {
            v41 = __ldaxr(v38);
            v42 = --v41 == 0;
          }
          while (__stlxr(v41, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v24 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, *a3);
          *a3 = (uint64_t)v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr((unint64_t *)v12);
            v15 = --v25 == 0;
          }
          while (__stlxr(v25, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v104 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v104, *a3);
          *a3 = (uint64_t)v104;
          *v104 = 1;
          do
          {
            v105 = __ldaxr(v30);
            v33 = --v105 == 0;
          }
          while (__stlxr(v105, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v303 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v303, *a3);
          *a3 = (uint64_t)v303;
          *v303 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v100);
            v189 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v239 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v239, *a3);
          *a3 = (uint64_t)v239;
          *v239 = 1;
          do
          {
            v240 = __ldaxr((unint64_t *)v100);
            v103 = --v240 == 0;
          }
          while (__stlxr(v240, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v305 = operator new();
          v306 = *a3;
          *(_QWORD *)v305 = *(_QWORD *)*a3;
          *(_QWORD *)(v305 + 8) = *(_QWORD *)(v306 + 8);
          v307 = *(_QWORD *)(v306 + 16);
          *(_QWORD *)(v305 + 16) = v307;
          if (v307)
          {
            v308 = (unsigned int *)(v307 + 8);
            do
              v309 = __ldxr(v308);
            while (__stxr(v309 + 1, v308));
          }
          v310 = *(_OWORD *)(v306 + 24);
          v311 = *(_OWORD *)(v306 + 40);
          *(_OWORD *)(v305 + 56) = *(_OWORD *)(v306 + 56);
          *(_OWORD *)(v305 + 40) = v311;
          *(_OWORD *)(v305 + 24) = v310;
          *a3 = v305;
          *(_QWORD *)v305 = 1;
          do
          {
            v312 = __ldaxr((unint64_t *)v190);
            v199 = --v312 == 0;
          }
          while (__stlxr(v312, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v200 = (_QWORD *)operator new();
          v201 = *a3 + 8;
          *v200 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v200 + 1, v201);
          *a3 = (uint64_t)v200;
          *v200 = 1;
          do
          {
            v202 = __ldaxr(v38);
            v42 = --v202 == 0;
          }
          while (__stlxr(v202, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, *a3);
          *a3 = (uint64_t)v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr((unint64_t *)v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v112 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v112, *a3);
          *a3 = (uint64_t)v112;
          *v112 = 1;
          do
          {
            v113 = __ldaxr(v30);
            v33 = --v113 == 0;
          }
          while (__stlxr(v113, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v313 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v313, *a3);
          *a3 = (uint64_t)v313;
          *v313 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v100);
            v189 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, *a3);
          *a3 = (uint64_t)v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v100);
            v103 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v315 = operator new();
          v316 = *a3;
          *(_QWORD *)v315 = *(_QWORD *)*a3;
          *(_QWORD *)(v315 + 8) = *(_QWORD *)(v316 + 8);
          v317 = *(_QWORD *)(v316 + 16);
          *(_QWORD *)(v315 + 16) = v317;
          if (v317)
          {
            v318 = (unsigned int *)(v317 + 8);
            do
              v319 = __ldxr(v318);
            while (__stxr(v319 + 1, v318));
          }
          v320 = *(_OWORD *)(v316 + 24);
          v321 = *(_OWORD *)(v316 + 40);
          *(_OWORD *)(v315 + 56) = *(_OWORD *)(v316 + 56);
          *(_OWORD *)(v315 + 40) = v321;
          *(_OWORD *)(v315 + 24) = v320;
          *a3 = v315;
          *(_QWORD *)v315 = 1;
          do
          {
            v322 = __ldaxr((unint64_t *)v190);
            v199 = --v322 == 0;
          }
          while (__stlxr(v322, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v209 = (_QWORD *)operator new();
          v210 = *a3 + 8;
          *v209 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v209 + 1, v210);
          *a3 = (uint64_t)v209;
          *v209 = 1;
          do
          {
            v211 = __ldaxr(v38);
            v42 = --v211 == 0;
          }
          while (__stlxr(v211, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v22 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, *a3);
          *a3 = (uint64_t)v22;
          *v22 = 1;
          do
          {
            v23 = __ldaxr((unint64_t *)v12);
            v15 = --v23 == 0;
          }
          while (__stlxr(v23, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *a3);
          *a3 = (uint64_t)v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v30);
            v33 = --v56 == 0;
          }
          while (__stlxr(v56, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v261 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v261, *a3);
          *a3 = (uint64_t)v261;
          *v261 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v100);
            v189 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v205 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v205, *a3);
          *a3 = (uint64_t)v205;
          *v205 = 1;
          do
          {
            v206 = __ldaxr((unint64_t *)v100);
            v103 = --v206 == 0;
          }
          while (__stlxr(v206, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v273 = operator new();
          v274 = *a3;
          *(_QWORD *)v273 = *(_QWORD *)*a3;
          *(_QWORD *)(v273 + 8) = *(_QWORD *)(v274 + 8);
          v275 = *(_QWORD *)(v274 + 16);
          *(_QWORD *)(v273 + 16) = v275;
          if (v275)
          {
            v276 = (unsigned int *)(v275 + 8);
            do
              v277 = __ldxr(v276);
            while (__stxr(v277 + 1, v276));
          }
          v278 = *(_OWORD *)(v274 + 24);
          v279 = *(_OWORD *)(v274 + 40);
          *(_OWORD *)(v273 + 56) = *(_OWORD *)(v274 + 56);
          *(_OWORD *)(v273 + 40) = v279;
          *(_OWORD *)(v273 + 24) = v278;
          *a3 = v273;
          *(_QWORD *)v273 = 1;
          do
          {
            v280 = __ldaxr((unint64_t *)v190);
            v199 = --v280 == 0;
          }
          while (__stlxr(v280, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v122 = (_QWORD *)operator new();
          v123 = *a3 + 8;
          *v122 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v122 + 1, v123);
          *a3 = (uint64_t)v122;
          *v122 = 1;
          do
          {
            v124 = __ldaxr(v38);
            v42 = --v124 == 0;
          }
          while (__stlxr(v124, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, *a3);
          *a3 = (uint64_t)v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr((unint64_t *)v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v117 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v117, *a3);
          *a3 = (uint64_t)v117;
          *v117 = 1;
          do
          {
            v118 = __ldaxr(v30);
            v33 = --v118 == 0;
          }
          while (__stlxr(v118, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v323 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, *a3);
          *a3 = (uint64_t)v323;
          *v323 = 1;
          do
          {
            v324 = __ldaxr((unint64_t *)v100);
            v189 = --v324 == 0;
          }
          while (__stlxr(v324, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v281 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v281, *a3);
          *a3 = (uint64_t)v281;
          *v281 = 1;
          do
          {
            v282 = __ldaxr((unint64_t *)v100);
            v103 = --v282 == 0;
          }
          while (__stlxr(v282, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v325 = operator new();
          v326 = *a3;
          *(_QWORD *)v325 = *(_QWORD *)*a3;
          *(_QWORD *)(v325 + 8) = *(_QWORD *)(v326 + 8);
          v327 = *(_QWORD *)(v326 + 16);
          *(_QWORD *)(v325 + 16) = v327;
          if (v327)
          {
            v328 = (unsigned int *)(v327 + 8);
            do
              v329 = __ldxr(v328);
            while (__stxr(v329 + 1, v328));
          }
          v330 = *(_OWORD *)(v326 + 24);
          v331 = *(_OWORD *)(v326 + 40);
          *(_OWORD *)(v325 + 56) = *(_OWORD *)(v326 + 56);
          *(_OWORD *)(v325 + 40) = v331;
          *(_OWORD *)(v325 + 24) = v330;
          *a3 = v325;
          *(_QWORD *)v325 = 1;
          do
          {
            v332 = __ldaxr((unint64_t *)v190);
            v199 = --v332 == 0;
          }
          while (__stlxr(v332, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v225 = (_QWORD *)operator new();
          v226 = *a3 + 8;
          *v225 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v225 + 1, v226);
          *a3 = (uint64_t)v225;
          *v225 = 1;
          do
          {
            v227 = __ldaxr(v38);
            v42 = --v227 == 0;
          }
          while (__stlxr(v227, v38));
LABEL_272:
          if (!v42)
            goto LABEL_408;
          v110 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38);
          v228 = 2071181815;
          goto LABEL_406;
        default:
          goto LABEL_411;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, *a3);
          *a3 = (uint64_t)v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr((unint64_t *)v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, (unint64_t *)v12));
LABEL_136:
          if (!v15)
            goto LABEL_408;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v110 = (_QWORD *)v12;
          v111 = 0x1012C404EF22A49;
          goto LABEL_407;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v34, *a3);
          *a3 = (uint64_t)v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr(v30);
            v33 = --v35 == 0;
          }
          while (__stlxr(v35, v30));
LABEL_152:
          if (!v33)
            goto LABEL_408;
          v119 = (void *)v30[1];
          if (v119)
          {
            v30[2] = (unint64_t)v119;
            operator delete(v119);
          }
          v110 = v30;
          v111 = 0x1080C409938AC02;
          goto LABEL_407;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v207 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v207, *a3);
          *a3 = (uint64_t)v207;
          *v207 = 1;
          do
          {
            v208 = __ldaxr((unint64_t *)v100);
            v189 = --v208 == 0;
          }
          while (__stlxr(v208, (unint64_t *)v100));
LABEL_393:
          if (!v189)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v334);
          goto LABEL_396;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v120 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v120, *a3);
          *a3 = (uint64_t)v120;
          *v120 = 1;
          do
          {
            v121 = __ldaxr((unint64_t *)v100);
            v103 = --v121 == 0;
          }
          while (__stlxr(v121, (unint64_t *)v100));
LABEL_343:
          if (!v103)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v334);
LABEL_396:
          v110 = (_QWORD *)v100;
          v111 = 0x1020C405E66F15BLL;
          goto LABEL_407;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v217 = operator new();
          v218 = *a3;
          *(_QWORD *)v217 = *(_QWORD *)*a3;
          *(_QWORD *)(v217 + 8) = *(_QWORD *)(v218 + 8);
          v219 = *(_QWORD *)(v218 + 16);
          *(_QWORD *)(v217 + 16) = v219;
          if (v219)
          {
            v220 = (unsigned int *)(v219 + 8);
            do
              v221 = __ldxr(v220);
            while (__stxr(v221 + 1, v220));
          }
          v222 = *(_OWORD *)(v218 + 24);
          v223 = *(_OWORD *)(v218 + 40);
          *(_OWORD *)(v217 + 56) = *(_OWORD *)(v218 + 56);
          *(_OWORD *)(v217 + 40) = v223;
          *(_OWORD *)(v217 + 24) = v222;
          *a3 = v217;
          *(_QWORD *)v217 = 1;
          do
          {
            v224 = __ldaxr((unint64_t *)v190);
            v199 = --v224 == 0;
          }
          while (__stlxr(v224, (unint64_t *)v190));
LABEL_403:
          if (!v199)
            goto LABEL_408;
          boost::detail::shared_count::~shared_count((unsigned int **)(v190 + 16));
          v110 = (_QWORD *)v190;
          v228 = -235920773;
LABEL_406:
          v111 = v228 | 0x1030C4000000000;
LABEL_407:
          MEMORY[0x219A19A08](v110, v111);
LABEL_408:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v57 = *(double *)a2;
          v58 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v59 = (_QWORD *)operator new();
            v60 = *a3 + 8;
            *v59 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
            *a3 = (uint64_t)v59;
            *v59 = 1;
            do
            {
              v61 = __ldaxr(v58);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v58));
            if (!v62)
            {
              v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v58);
              MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
            }
          }
          v64 = *a3;
          v65 = (uint64_t *)(*a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v65, *(_QWORD *)&v57 + 8))
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v67 = *(uint64_t **)(v64 + 24);
          v66 = *(uint64_t **)(v64 + 32);
          if (v66 == v67)
            return;
          if (!*v65)
            return;
          v68 = 1;
          do
          {
            v69 = *v67++;
            v68 *= v69;
          }
          while (v67 != v66);
          if (!v68)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
          v70 = (uint64_t)(*(_QWORD *)(v64 + 32) - *(_QWORD *)(v64 + 24)) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v70, &v333);
          v71 = v334;
          v72 = v335;
          break;
        default:
          goto LABEL_411;
      }
      break;
    default:
LABEL_411:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v73 = (char *)v72 - (char *)v71;
    if (v73)
    {
      v74 = 0;
      v75 = v73 >> 3;
      v76 = *(uint64_t **)(*(_QWORD *)&v57 + 48);
      if (v75 <= 1)
        v75 = 1;
      v77 = v71;
      v78 = v75;
      do
      {
        v80 = (uint64_t)*v77++;
        v79 = v80;
        v81 = *v76++;
        v74 += v81 * v79;
        --v78;
      }
      while (v78);
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v57 + 72) + v74));
      v84 = *(uint64_t **)(v64 + 48);
      do
      {
        v86 = (uint64_t)*v71++;
        v85 = v86;
        v87 = *v84++;
        v82 += v87 * v85;
        --v75;
      }
      while (v75);
    }
    else
    {
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v57 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
    *(double *)(**(_QWORD **)(v64 + 8) + 8 * (*(_QWORD *)(v64 + 72) + v82)) = v83
                                                                            * *(double *)(**(_QWORD **)(v64 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v64 + 72) + v82));
    v71 = v334;
    v72 = v335;
    v88 = v335 - v334;
    v89 = v88 - 1;
    if ((char *)v335 - (char *)v334 < 1)
      goto LABEL_114;
    v90 = *(_QWORD *)(v64 + 24);
    v91 = (char *)v334[v89] + 1;
    v334[v89] = v91;
    if ((unint64_t)v91 >= *(_QWORD *)(v90 + 8 * v89))
      break;
LABEL_113:
    v88 = 1;
LABEL_114:
    if (v89 < 0 || !v88)
      goto LABEL_214;
  }
  v92 = (unint64_t *)&v71[v88 - 2];
  v93 = v90 - 16;
  while (1)
  {
    v94 = v88 - 1;
    v92[1] = 0;
    if (v88 - 1 <= 0)
      break;
    v95 = *v92 + 1;
    *v92-- = v95;
    v96 = *(_QWORD *)(v93 + 8 * v88--);
    if (v95 < v96)
    {
      v89 = v94 - 1;
      goto LABEL_113;
    }
  }
LABEL_214:
  if (v71)
  {
LABEL_215:
    v335 = v71;
    operator delete(v71);
  }
}

void sub_2182564F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D933F98;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D933F98;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_15::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  double v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  _QWORD *v55;
  unint64_t v56;
  double v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  void **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  void *v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void **v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  unint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  __int128 v196;
  __int128 v197;
  unint64_t v198;
  BOOL v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  double v212;
  _QWORD *v213;
  unint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  __int128 v222;
  __int128 v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unsigned int v228;
  _QWORD *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  __int128 v236;
  __int128 v237;
  unint64_t v238;
  _QWORD *v239;
  unint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t *v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  void *v247;
  double *v248;
  uint64_t v249;
  unint64_t v250;
  double v251;
  unint64_t *v252;
  _QWORD *v253;
  unint64_t v254;
  unint64_t v255;
  void *v256;
  double *v257;
  uint64_t v258;
  double v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  __int128 v278;
  __int128 v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int *v290;
  unsigned int v291;
  __int128 v292;
  __int128 v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int *v298;
  unsigned int v299;
  __int128 v300;
  __int128 v301;
  unint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  __int128 v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  void **v334;
  void **v335;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((uint64_t *)a2 != a3)
  {
    *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a2 + 5);
    *a3 = *(_QWORD *)a2;
    v5 = *(unsigned __int8 *)(a2 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = (unint64_t *)*a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(a1 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = *a3 * *(_QWORD *)a1;
          goto LABEL_38;
        case 1:
          v212 = *(double *)a3 * (double)*(uint64_t *)a1;
          goto LABEL_253;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v106 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v106, *a3);
          *a3 = (uint64_t)v106;
          *v106 = 1;
          do
          {
            v107 = __ldaxr((unint64_t *)v12);
            v15 = --v107 == 0;
          }
          while (__stlxr(v107, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v243 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v244 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v244, *a3);
            *a3 = (uint64_t)v244;
            *v244 = 1;
            do
            {
              v245 = __ldaxr(v243);
              v246 = v245 - 1;
            }
            while (__stlxr(v246, v243));
            if (!v246)
            {
              v247 = (void *)v243[1];
              if (v247)
              {
                v243[2] = (unint64_t)v247;
                operator delete(v247);
              }
              MEMORY[0x219A19A08](v243, 0x1080C409938AC02);
            }
          }
          v248 = *(double **)(*a3 + 8);
          v249 = *(_QWORD *)(*a3 + 16) - (_QWORD)v248;
          if (v249)
          {
            v250 = v249 >> 3;
            v251 = (double)*(uint64_t *)a1;
            if (v250 <= 1)
              v250 = 1;
            do
            {
              *v248 = *v248 * v251;
              ++v248;
              --v250;
            }
            while (v250);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v283 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v283, *a3);
          *a3 = (uint64_t)v283;
          *v283 = 1;
          do
          {
            v284 = __ldaxr((unint64_t *)v100);
            v189 = --v284 == 0;
          }
          while (__stlxr(v284, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v213 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v213, *a3);
          *a3 = (uint64_t)v213;
          *v213 = 1;
          do
          {
            v214 = __ldaxr((unint64_t *)v100);
            v103 = --v214 == 0;
          }
          while (__stlxr(v214, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v287 = operator new();
          v288 = *a3;
          *(_QWORD *)v287 = *(_QWORD *)*a3;
          *(_QWORD *)(v287 + 8) = *(_QWORD *)(v288 + 8);
          v289 = *(_QWORD *)(v288 + 16);
          *(_QWORD *)(v287 + 16) = v289;
          if (v289)
          {
            v290 = (unsigned int *)(v289 + 8);
            do
              v291 = __ldxr(v290);
            while (__stxr(v291 + 1, v290));
          }
          v292 = *(_OWORD *)(v288 + 24);
          v293 = *(_OWORD *)(v288 + 40);
          *(_OWORD *)(v287 + 56) = *(_OWORD *)(v288 + 56);
          *(_OWORD *)(v287 + 40) = v293;
          *(_OWORD *)(v287 + 24) = v292;
          *a3 = v287;
          *(_QWORD *)v287 = 1;
          do
          {
            v294 = __ldaxr((unint64_t *)v190);
            v199 = --v294 == 0;
          }
          while (__stlxr(v294, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v125 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v126 = (_QWORD *)operator new();
            v127 = *a3 + 8;
            *v126 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
            *a3 = (uint64_t)v126;
            *v126 = 1;
            do
            {
              v128 = __ldaxr(v125);
              v129 = v128 - 1;
            }
            while (__stlxr(v129, v125));
            if (!v129)
            {
              v130 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v125);
              MEMORY[0x219A19A08](v130, 0x1030C407B73B9F7);
            }
          }
          v131 = (uint64_t *)*a3;
          v133 = *(uint64_t **)(*a3 + 24);
          v132 = *(uint64_t **)(*a3 + 32);
          if (v132 == v133)
            return;
          if (!v131[1])
            return;
          v134 = (double)*(uint64_t *)a1;
          v135 = 1;
          do
          {
            v136 = *v133++;
            v135 *= v136;
          }
          while (v133 != v132);
          if (!v135)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
          v137 = (v131[4] - v131[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v137, &v333);
          v71 = v334;
          v138 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v139 = 0;
        v140 = (char *)v138 - (char *)v71;
        if (v140)
        {
          v141 = v140 >> 3;
          v142 = (uint64_t *)v131[6];
          if (v141 <= 1)
            v141 = 1;
          do
          {
            v144 = (uint64_t)*v71++;
            v143 = v144;
            v145 = *v142++;
            v139 += v145 * v143;
            --v141;
          }
          while (v141);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
        *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139)) = *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139))
                                                               * v134;
        v71 = v334;
        v138 = v335;
        v146 = v335 - v334;
        v147 = v146 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_187;
        v148 = v131[3];
        v149 = (char *)v334[v147] + 1;
        v334[v147] = v149;
        if ((unint64_t)v149 < *(_QWORD *)(v148 + 8 * v147))
        {
LABEL_186:
          v146 = 1;
LABEL_187:
          if (v147 < 0 || !v146)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v150 = (unint64_t *)&v71[v146 - 2];
      v151 = v148 - 16;
      while (1)
      {
        v152 = v146 - 1;
        v150[1] = 0;
        if (v146 - 1 <= 0)
          goto LABEL_215;
        v153 = *v150 + 1;
        *v150-- = v153;
        v154 = *(_QWORD *)(v151 + 8 * v146--);
        if (v153 < v154)
        {
          v147 = v152 - 1;
          goto LABEL_186;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)(*(double *)a1 * (double)*a3);
LABEL_38:
          *a3 = v11;
          return;
        case 1:
          v212 = *(double *)a1 * *(double *)a3;
LABEL_253:
          *(double *)a3 = v212;
          return;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v108 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v108, *a3);
          *a3 = (uint64_t)v108;
          *v108 = 1;
          do
          {
            v109 = __ldaxr((unint64_t *)v12);
            v15 = --v109 == 0;
          }
          while (__stlxr(v109, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v252 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v253 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v253, *a3);
            *a3 = (uint64_t)v253;
            *v253 = 1;
            do
            {
              v254 = __ldaxr(v252);
              v255 = v254 - 1;
            }
            while (__stlxr(v255, v252));
            if (!v255)
            {
              v256 = (void *)v252[1];
              if (v256)
              {
                v252[2] = (unint64_t)v256;
                operator delete(v256);
              }
              MEMORY[0x219A19A08](v252, 0x1080C409938AC02);
            }
          }
          v257 = *(double **)(*a3 + 8);
          v258 = *(_QWORD *)(*a3 + 16) - (_QWORD)v257;
          if (v258)
          {
            v259 = *(double *)a1;
            v260 = v258 >> 3;
            if (v260 <= 1)
              v260 = 1;
            do
            {
              *v257 = v259 * *v257;
              ++v257;
              --v260;
            }
            while (v260);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v285, *a3);
          *a3 = (uint64_t)v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v100);
            v189 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v215 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v215, *a3);
          *a3 = (uint64_t)v215;
          *v215 = 1;
          do
          {
            v216 = __ldaxr((unint64_t *)v100);
            v103 = --v216 == 0;
          }
          while (__stlxr(v216, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v295 = operator new();
          v296 = *a3;
          *(_QWORD *)v295 = *(_QWORD *)*a3;
          *(_QWORD *)(v295 + 8) = *(_QWORD *)(v296 + 8);
          v297 = *(_QWORD *)(v296 + 16);
          *(_QWORD *)(v295 + 16) = v297;
          if (v297)
          {
            v298 = (unsigned int *)(v297 + 8);
            do
              v299 = __ldxr(v298);
            while (__stxr(v299 + 1, v298));
          }
          v300 = *(_OWORD *)(v296 + 24);
          v301 = *(_OWORD *)(v296 + 40);
          *(_OWORD *)(v295 + 56) = *(_OWORD *)(v296 + 56);
          *(_OWORD *)(v295 + 40) = v301;
          *(_OWORD *)(v295 + 24) = v300;
          *a3 = v295;
          *(_QWORD *)v295 = 1;
          do
          {
            v302 = __ldaxr((unint64_t *)v190);
            v199 = --v302 == 0;
          }
          while (__stlxr(v302, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v155 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v156 = (_QWORD *)operator new();
            v157 = *a3 + 8;
            *v156 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v156 + 1, v157);
            *a3 = (uint64_t)v156;
            *v156 = 1;
            do
            {
              v158 = __ldaxr(v155);
              v159 = v158 - 1;
            }
            while (__stlxr(v159, v155));
            if (!v159)
            {
              v160 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v155);
              MEMORY[0x219A19A08](v160, 0x1030C407B73B9F7);
            }
          }
          v161 = (uint64_t *)*a3;
          v163 = *(uint64_t **)(*a3 + 24);
          v162 = *(uint64_t **)(*a3 + 32);
          if (v162 == v163)
            return;
          if (!v161[1])
            return;
          v164 = *(double *)a1;
          v165 = 1;
          do
          {
            v166 = *v163++;
            v165 *= v166;
          }
          while (v163 != v162);
          if (!v165)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
          v167 = (v161[4] - v161[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v167, &v333);
          v71 = v334;
          v168 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v169 = 0;
        v170 = (char *)v168 - (char *)v71;
        if (v170)
        {
          v171 = v170 >> 3;
          v172 = (uint64_t *)v161[6];
          if (v171 <= 1)
            v171 = 1;
          do
          {
            v174 = (uint64_t)*v71++;
            v173 = v174;
            v175 = *v172++;
            v169 += v175 * v173;
            --v171;
          }
          while (v171);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
        *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169)) = v164
                                                               * *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169));
        v71 = v334;
        v168 = v335;
        v176 = v335 - v334;
        v177 = v176 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_212;
        v178 = v161[3];
        v179 = (char *)v334[v177] + 1;
        v334[v177] = v179;
        if ((unint64_t)v179 < *(_QWORD *)(v178 + 8 * v177))
        {
LABEL_211:
          v176 = 1;
LABEL_212:
          if (v177 < 0 || !v176)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v180 = (unint64_t *)&v71[v176 - 2];
      v181 = v178 - 16;
      while (1)
      {
        v182 = v176 - 1;
        v180[1] = 0;
        if (v176 - 1 <= 0)
          goto LABEL_215;
        v183 = *v180 + 1;
        *v180-- = v183;
        v184 = *(_QWORD *)(v181 + 8 * v176--);
        if (v183 < v184)
        {
          v177 = v182 - 1;
          goto LABEL_211;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v18 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, *a3);
          *a3 = (uint64_t)v18;
          *v18 = 1;
          do
          {
            v19 = __ldaxr((unint64_t *)v12);
            v15 = --v19 == 0;
          }
          while (__stlxr(v19, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v36 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v36, *a3);
          *a3 = (uint64_t)v36;
          *v36 = 1;
          do
          {
            v37 = __ldaxr(v30);
            v33 = --v37 == 0;
          }
          while (__stlxr(v37, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v229, *a3);
          *a3 = (uint64_t)v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr((unint64_t *)v100);
            v189 = --v230 == 0;
          }
          while (__stlxr(v230, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v185 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v185, *a3);
          *a3 = (uint64_t)v185;
          *v185 = 1;
          do
          {
            v186 = __ldaxr((unint64_t *)v100);
            v103 = --v186 == 0;
          }
          while (__stlxr(v186, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v231 = operator new();
          v232 = *a3;
          *(_QWORD *)v231 = *(_QWORD *)*a3;
          *(_QWORD *)(v231 + 8) = *(_QWORD *)(v232 + 8);
          v233 = *(_QWORD *)(v232 + 16);
          *(_QWORD *)(v231 + 16) = v233;
          if (v233)
          {
            v234 = (unsigned int *)(v233 + 8);
            do
              v235 = __ldxr(v234);
            while (__stxr(v235 + 1, v234));
          }
          v236 = *(_OWORD *)(v232 + 24);
          v237 = *(_OWORD *)(v232 + 40);
          *(_OWORD *)(v231 + 56) = *(_OWORD *)(v232 + 56);
          *(_OWORD *)(v231 + 40) = v237;
          *(_OWORD *)(v231 + 24) = v236;
          *a3 = v231;
          *(_QWORD *)v231 = 1;
          do
          {
            v238 = __ldaxr((unint64_t *)v190);
            v199 = --v238 == 0;
          }
          while (__stlxr(v238, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v97 = (_QWORD *)operator new();
          v98 = *a3 + 8;
          *v97 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, v98);
          *a3 = (uint64_t)v97;
          *v97 = 1;
          do
          {
            v99 = __ldaxr(v38);
            v42 = --v99 == 0;
          }
          while (__stlxr(v99, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v20 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, *a3);
          *a3 = (uint64_t)v20;
          *v20 = 1;
          do
          {
            v21 = __ldaxr((unint64_t *)v12);
            v15 = --v21 == 0;
          }
          while (__stlxr(v21, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v43 = *(double *)a1;
          v44 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v45 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v45, *a3);
            *a3 = (uint64_t)v45;
            *v45 = 1;
            do
            {
              v46 = __ldaxr(v44);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v44));
            if (!v47)
            {
              v48 = (void *)v44[1];
              if (v48)
              {
                v44[2] = (unint64_t)v48;
                operator delete(v48);
              }
              MEMORY[0x219A19A08](v44, 0x1080C409938AC02);
            }
          }
          v49 = *a3;
          turi::flexible_type_fail(*(_QWORD *)(*a3 + 16) - *(_QWORD *)(*a3 + 8) == *(_QWORD *)(*(_QWORD *)&v43 + 16)
                                                                                 - *(_QWORD *)(*(_QWORD *)&v43 + 8));
          v50 = *(double **)(v49 + 8);
          v51 = *(_QWORD *)(v49 + 16) - (_QWORD)v50;
          if (v51)
          {
            v52 = v51 >> 3;
            v53 = *(double **)(*(_QWORD *)&v43 + 8);
            if (v52 <= 1)
              v52 = 1;
            do
            {
              v54 = *v53++;
              *v50 = v54 * *v50;
              ++v50;
              --v52;
            }
            while (v52);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v241 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v241, *a3);
          *a3 = (uint64_t)v241;
          *v241 = 1;
          do
          {
            v242 = __ldaxr((unint64_t *)v100);
            v189 = --v242 == 0;
          }
          while (__stlxr(v242, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v203 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v203, *a3);
          *a3 = (uint64_t)v203;
          *v203 = 1;
          do
          {
            v204 = __ldaxr((unint64_t *)v100);
            v103 = --v204 == 0;
          }
          while (__stlxr(v204, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v265 = operator new();
          v266 = *a3;
          *(_QWORD *)v265 = *(_QWORD *)*a3;
          *(_QWORD *)(v265 + 8) = *(_QWORD *)(v266 + 8);
          v267 = *(_QWORD *)(v266 + 16);
          *(_QWORD *)(v265 + 16) = v267;
          if (v267)
          {
            v268 = (unsigned int *)(v267 + 8);
            do
              v269 = __ldxr(v268);
            while (__stxr(v269 + 1, v268));
          }
          v270 = *(_OWORD *)(v266 + 24);
          v271 = *(_OWORD *)(v266 + 40);
          *(_OWORD *)(v265 + 56) = *(_OWORD *)(v266 + 56);
          *(_OWORD *)(v265 + 40) = v271;
          *(_OWORD *)(v265 + 24) = v270;
          *a3 = v265;
          *(_QWORD *)v265 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v190);
            v199 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v114 = (_QWORD *)operator new();
          v115 = *a3 + 8;
          *v114 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v114 + 1, v115);
          *a3 = (uint64_t)v114;
          *v114 = 1;
          do
          {
            v116 = __ldaxr(v38);
            v42 = --v116 == 0;
          }
          while (__stlxr(v116, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, *a3);
          *a3 = (uint64_t)v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v31 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v31, *a3);
          *a3 = (uint64_t)v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(v30);
            v33 = --v32 == 0;
          }
          while (__stlxr(v32, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v187 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v187, *a3);
          *a3 = (uint64_t)v187;
          *v187 = 1;
          do
          {
            v188 = __ldaxr((unint64_t *)v100);
            v189 = --v188 == 0;
          }
          while (__stlxr(v188, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v101 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v101, *a3);
          *a3 = (uint64_t)v101;
          *v101 = 1;
          do
          {
            v102 = __ldaxr((unint64_t *)v100);
            v103 = --v102 == 0;
          }
          while (__stlxr(v102, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v191 = operator new();
          v192 = *a3;
          *(_QWORD *)v191 = *(_QWORD *)*a3;
          *(_QWORD *)(v191 + 8) = *(_QWORD *)(v192 + 8);
          v193 = *(_QWORD *)(v192 + 16);
          *(_QWORD *)(v191 + 16) = v193;
          if (v193)
          {
            v194 = (unsigned int *)(v193 + 8);
            do
              v195 = __ldxr(v194);
            while (__stxr(v195 + 1, v194));
          }
          v196 = *(_OWORD *)(v192 + 24);
          v197 = *(_OWORD *)(v192 + 40);
          *(_OWORD *)(v191 + 56) = *(_OWORD *)(v192 + 56);
          *(_OWORD *)(v191 + 40) = v197;
          *(_OWORD *)(v191 + 24) = v196;
          *a3 = v191;
          *(_QWORD *)v191 = 1;
          do
          {
            v198 = __ldaxr((unint64_t *)v190);
            v199 = --v198 == 0;
          }
          while (__stlxr(v198, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v39 = (_QWORD *)operator new();
          v40 = *a3 + 8;
          *v39 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
          *a3 = (uint64_t)v39;
          *v39 = 1;
          do
          {
            v41 = __ldaxr(v38);
            v42 = --v41 == 0;
          }
          while (__stlxr(v41, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v24 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, *a3);
          *a3 = (uint64_t)v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr((unint64_t *)v12);
            v15 = --v25 == 0;
          }
          while (__stlxr(v25, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v104 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v104, *a3);
          *a3 = (uint64_t)v104;
          *v104 = 1;
          do
          {
            v105 = __ldaxr(v30);
            v33 = --v105 == 0;
          }
          while (__stlxr(v105, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v303 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v303, *a3);
          *a3 = (uint64_t)v303;
          *v303 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v100);
            v189 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v239 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v239, *a3);
          *a3 = (uint64_t)v239;
          *v239 = 1;
          do
          {
            v240 = __ldaxr((unint64_t *)v100);
            v103 = --v240 == 0;
          }
          while (__stlxr(v240, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v305 = operator new();
          v306 = *a3;
          *(_QWORD *)v305 = *(_QWORD *)*a3;
          *(_QWORD *)(v305 + 8) = *(_QWORD *)(v306 + 8);
          v307 = *(_QWORD *)(v306 + 16);
          *(_QWORD *)(v305 + 16) = v307;
          if (v307)
          {
            v308 = (unsigned int *)(v307 + 8);
            do
              v309 = __ldxr(v308);
            while (__stxr(v309 + 1, v308));
          }
          v310 = *(_OWORD *)(v306 + 24);
          v311 = *(_OWORD *)(v306 + 40);
          *(_OWORD *)(v305 + 56) = *(_OWORD *)(v306 + 56);
          *(_OWORD *)(v305 + 40) = v311;
          *(_OWORD *)(v305 + 24) = v310;
          *a3 = v305;
          *(_QWORD *)v305 = 1;
          do
          {
            v312 = __ldaxr((unint64_t *)v190);
            v199 = --v312 == 0;
          }
          while (__stlxr(v312, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v200 = (_QWORD *)operator new();
          v201 = *a3 + 8;
          *v200 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v200 + 1, v201);
          *a3 = (uint64_t)v200;
          *v200 = 1;
          do
          {
            v202 = __ldaxr(v38);
            v42 = --v202 == 0;
          }
          while (__stlxr(v202, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, *a3);
          *a3 = (uint64_t)v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr((unint64_t *)v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v112 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v112, *a3);
          *a3 = (uint64_t)v112;
          *v112 = 1;
          do
          {
            v113 = __ldaxr(v30);
            v33 = --v113 == 0;
          }
          while (__stlxr(v113, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v313 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v313, *a3);
          *a3 = (uint64_t)v313;
          *v313 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v100);
            v189 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, *a3);
          *a3 = (uint64_t)v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v100);
            v103 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v315 = operator new();
          v316 = *a3;
          *(_QWORD *)v315 = *(_QWORD *)*a3;
          *(_QWORD *)(v315 + 8) = *(_QWORD *)(v316 + 8);
          v317 = *(_QWORD *)(v316 + 16);
          *(_QWORD *)(v315 + 16) = v317;
          if (v317)
          {
            v318 = (unsigned int *)(v317 + 8);
            do
              v319 = __ldxr(v318);
            while (__stxr(v319 + 1, v318));
          }
          v320 = *(_OWORD *)(v316 + 24);
          v321 = *(_OWORD *)(v316 + 40);
          *(_OWORD *)(v315 + 56) = *(_OWORD *)(v316 + 56);
          *(_OWORD *)(v315 + 40) = v321;
          *(_OWORD *)(v315 + 24) = v320;
          *a3 = v315;
          *(_QWORD *)v315 = 1;
          do
          {
            v322 = __ldaxr((unint64_t *)v190);
            v199 = --v322 == 0;
          }
          while (__stlxr(v322, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v209 = (_QWORD *)operator new();
          v210 = *a3 + 8;
          *v209 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v209 + 1, v210);
          *a3 = (uint64_t)v209;
          *v209 = 1;
          do
          {
            v211 = __ldaxr(v38);
            v42 = --v211 == 0;
          }
          while (__stlxr(v211, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v22 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, *a3);
          *a3 = (uint64_t)v22;
          *v22 = 1;
          do
          {
            v23 = __ldaxr((unint64_t *)v12);
            v15 = --v23 == 0;
          }
          while (__stlxr(v23, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *a3);
          *a3 = (uint64_t)v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v30);
            v33 = --v56 == 0;
          }
          while (__stlxr(v56, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v261 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v261, *a3);
          *a3 = (uint64_t)v261;
          *v261 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v100);
            v189 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v205 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v205, *a3);
          *a3 = (uint64_t)v205;
          *v205 = 1;
          do
          {
            v206 = __ldaxr((unint64_t *)v100);
            v103 = --v206 == 0;
          }
          while (__stlxr(v206, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v273 = operator new();
          v274 = *a3;
          *(_QWORD *)v273 = *(_QWORD *)*a3;
          *(_QWORD *)(v273 + 8) = *(_QWORD *)(v274 + 8);
          v275 = *(_QWORD *)(v274 + 16);
          *(_QWORD *)(v273 + 16) = v275;
          if (v275)
          {
            v276 = (unsigned int *)(v275 + 8);
            do
              v277 = __ldxr(v276);
            while (__stxr(v277 + 1, v276));
          }
          v278 = *(_OWORD *)(v274 + 24);
          v279 = *(_OWORD *)(v274 + 40);
          *(_OWORD *)(v273 + 56) = *(_OWORD *)(v274 + 56);
          *(_OWORD *)(v273 + 40) = v279;
          *(_OWORD *)(v273 + 24) = v278;
          *a3 = v273;
          *(_QWORD *)v273 = 1;
          do
          {
            v280 = __ldaxr((unint64_t *)v190);
            v199 = --v280 == 0;
          }
          while (__stlxr(v280, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v122 = (_QWORD *)operator new();
          v123 = *a3 + 8;
          *v122 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v122 + 1, v123);
          *a3 = (uint64_t)v122;
          *v122 = 1;
          do
          {
            v124 = __ldaxr(v38);
            v42 = --v124 == 0;
          }
          while (__stlxr(v124, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, *a3);
          *a3 = (uint64_t)v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr((unint64_t *)v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v117 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v117, *a3);
          *a3 = (uint64_t)v117;
          *v117 = 1;
          do
          {
            v118 = __ldaxr(v30);
            v33 = --v118 == 0;
          }
          while (__stlxr(v118, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v323 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, *a3);
          *a3 = (uint64_t)v323;
          *v323 = 1;
          do
          {
            v324 = __ldaxr((unint64_t *)v100);
            v189 = --v324 == 0;
          }
          while (__stlxr(v324, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v281 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v281, *a3);
          *a3 = (uint64_t)v281;
          *v281 = 1;
          do
          {
            v282 = __ldaxr((unint64_t *)v100);
            v103 = --v282 == 0;
          }
          while (__stlxr(v282, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v325 = operator new();
          v326 = *a3;
          *(_QWORD *)v325 = *(_QWORD *)*a3;
          *(_QWORD *)(v325 + 8) = *(_QWORD *)(v326 + 8);
          v327 = *(_QWORD *)(v326 + 16);
          *(_QWORD *)(v325 + 16) = v327;
          if (v327)
          {
            v328 = (unsigned int *)(v327 + 8);
            do
              v329 = __ldxr(v328);
            while (__stxr(v329 + 1, v328));
          }
          v330 = *(_OWORD *)(v326 + 24);
          v331 = *(_OWORD *)(v326 + 40);
          *(_OWORD *)(v325 + 56) = *(_OWORD *)(v326 + 56);
          *(_OWORD *)(v325 + 40) = v331;
          *(_OWORD *)(v325 + 24) = v330;
          *a3 = v325;
          *(_QWORD *)v325 = 1;
          do
          {
            v332 = __ldaxr((unint64_t *)v190);
            v199 = --v332 == 0;
          }
          while (__stlxr(v332, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v225 = (_QWORD *)operator new();
          v226 = *a3 + 8;
          *v225 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v225 + 1, v226);
          *a3 = (uint64_t)v225;
          *v225 = 1;
          do
          {
            v227 = __ldaxr(v38);
            v42 = --v227 == 0;
          }
          while (__stlxr(v227, v38));
LABEL_272:
          if (!v42)
            goto LABEL_408;
          v110 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38);
          v228 = 2071181815;
          goto LABEL_406;
        default:
          goto LABEL_411;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, *a3);
          *a3 = (uint64_t)v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr((unint64_t *)v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, (unint64_t *)v12));
LABEL_136:
          if (!v15)
            goto LABEL_408;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v110 = (_QWORD *)v12;
          v111 = 0x1012C404EF22A49;
          goto LABEL_407;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v34, *a3);
          *a3 = (uint64_t)v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr(v30);
            v33 = --v35 == 0;
          }
          while (__stlxr(v35, v30));
LABEL_152:
          if (!v33)
            goto LABEL_408;
          v119 = (void *)v30[1];
          if (v119)
          {
            v30[2] = (unint64_t)v119;
            operator delete(v119);
          }
          v110 = v30;
          v111 = 0x1080C409938AC02;
          goto LABEL_407;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v207 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v207, *a3);
          *a3 = (uint64_t)v207;
          *v207 = 1;
          do
          {
            v208 = __ldaxr((unint64_t *)v100);
            v189 = --v208 == 0;
          }
          while (__stlxr(v208, (unint64_t *)v100));
LABEL_393:
          if (!v189)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v334);
          goto LABEL_396;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v120 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v120, *a3);
          *a3 = (uint64_t)v120;
          *v120 = 1;
          do
          {
            v121 = __ldaxr((unint64_t *)v100);
            v103 = --v121 == 0;
          }
          while (__stlxr(v121, (unint64_t *)v100));
LABEL_343:
          if (!v103)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v334);
LABEL_396:
          v110 = (_QWORD *)v100;
          v111 = 0x1020C405E66F15BLL;
          goto LABEL_407;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v217 = operator new();
          v218 = *a3;
          *(_QWORD *)v217 = *(_QWORD *)*a3;
          *(_QWORD *)(v217 + 8) = *(_QWORD *)(v218 + 8);
          v219 = *(_QWORD *)(v218 + 16);
          *(_QWORD *)(v217 + 16) = v219;
          if (v219)
          {
            v220 = (unsigned int *)(v219 + 8);
            do
              v221 = __ldxr(v220);
            while (__stxr(v221 + 1, v220));
          }
          v222 = *(_OWORD *)(v218 + 24);
          v223 = *(_OWORD *)(v218 + 40);
          *(_OWORD *)(v217 + 56) = *(_OWORD *)(v218 + 56);
          *(_OWORD *)(v217 + 40) = v223;
          *(_OWORD *)(v217 + 24) = v222;
          *a3 = v217;
          *(_QWORD *)v217 = 1;
          do
          {
            v224 = __ldaxr((unint64_t *)v190);
            v199 = --v224 == 0;
          }
          while (__stlxr(v224, (unint64_t *)v190));
LABEL_403:
          if (!v199)
            goto LABEL_408;
          boost::detail::shared_count::~shared_count((unsigned int **)(v190 + 16));
          v110 = (_QWORD *)v190;
          v228 = -235920773;
LABEL_406:
          v111 = v228 | 0x1030C4000000000;
LABEL_407:
          MEMORY[0x219A19A08](v110, v111);
LABEL_408:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v57 = *(double *)a1;
          v58 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v59 = (_QWORD *)operator new();
            v60 = *a3 + 8;
            *v59 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
            *a3 = (uint64_t)v59;
            *v59 = 1;
            do
            {
              v61 = __ldaxr(v58);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v58));
            if (!v62)
            {
              v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v58);
              MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
            }
          }
          v64 = *a3;
          v65 = (uint64_t *)(*a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v65, *(_QWORD *)&v57 + 8))
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v67 = *(uint64_t **)(v64 + 24);
          v66 = *(uint64_t **)(v64 + 32);
          if (v66 == v67)
            return;
          if (!*v65)
            return;
          v68 = 1;
          do
          {
            v69 = *v67++;
            v68 *= v69;
          }
          while (v67 != v66);
          if (!v68)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
          v70 = (uint64_t)(*(_QWORD *)(v64 + 32) - *(_QWORD *)(v64 + 24)) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v70, &v333);
          v71 = v334;
          v72 = v335;
          break;
        default:
          goto LABEL_411;
      }
      break;
    default:
LABEL_411:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v73 = (char *)v72 - (char *)v71;
    if (v73)
    {
      v74 = 0;
      v75 = v73 >> 3;
      v76 = *(uint64_t **)(*(_QWORD *)&v57 + 48);
      if (v75 <= 1)
        v75 = 1;
      v77 = v71;
      v78 = v75;
      do
      {
        v80 = (uint64_t)*v77++;
        v79 = v80;
        v81 = *v76++;
        v74 += v81 * v79;
        --v78;
      }
      while (v78);
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v57 + 72) + v74));
      v84 = *(uint64_t **)(v64 + 48);
      do
      {
        v86 = (uint64_t)*v71++;
        v85 = v86;
        v87 = *v84++;
        v82 += v87 * v85;
        --v75;
      }
      while (v75);
    }
    else
    {
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v57 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
    *(double *)(**(_QWORD **)(v64 + 8) + 8 * (*(_QWORD *)(v64 + 72) + v82)) = v83
                                                                            * *(double *)(**(_QWORD **)(v64 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v64 + 72) + v82));
    v71 = v334;
    v72 = v335;
    v88 = v335 - v334;
    v89 = v88 - 1;
    if ((char *)v335 - (char *)v334 < 1)
      goto LABEL_114;
    v90 = *(_QWORD *)(v64 + 24);
    v91 = (char *)v334[v89] + 1;
    v334[v89] = v91;
    if ((unint64_t)v91 >= *(_QWORD *)(v90 + 8 * v89))
      break;
LABEL_113:
    v88 = 1;
LABEL_114:
    if (v89 < 0 || !v88)
      goto LABEL_214;
  }
  v92 = (unint64_t *)&v71[v88 - 2];
  v93 = v90 - 16;
  while (1)
  {
    v94 = v88 - 1;
    v92[1] = 0;
    if (v88 - 1 <= 0)
      break;
    v95 = *v92 + 1;
    *v92-- = v95;
    v96 = *(_QWORD *)(v93 + 8 * v88--);
    if (v95 < v96)
    {
      v89 = v94 - 1;
      goto LABEL_113;
    }
  }
LABEL_214:
  if (v71)
  {
LABEL_215:
    v335 = v71;
    operator delete(v71);
  }
}

void sub_218258840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934018;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934018;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_16::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  double v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  _QWORD *v55;
  unint64_t v56;
  double v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  void **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  void *v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void **v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  unint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  __int128 v196;
  __int128 v197;
  unint64_t v198;
  BOOL v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  double v212;
  _QWORD *v213;
  unint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  __int128 v222;
  __int128 v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unsigned int v228;
  _QWORD *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  __int128 v236;
  __int128 v237;
  unint64_t v238;
  _QWORD *v239;
  unint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t *v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  void *v247;
  double *v248;
  uint64_t v249;
  unint64_t v250;
  double v251;
  unint64_t *v252;
  _QWORD *v253;
  unint64_t v254;
  unint64_t v255;
  void *v256;
  double *v257;
  uint64_t v258;
  double v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  __int128 v278;
  __int128 v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int *v290;
  unsigned int v291;
  __int128 v292;
  __int128 v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int *v298;
  unsigned int v299;
  __int128 v300;
  __int128 v301;
  unint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  __int128 v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  void **v334;
  void **v335;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((uint64_t *)a1 != a3)
  {
    *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a1 + 5);
    *a3 = *(_QWORD *)a1;
    v5 = *(unsigned __int8 *)(a1 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = (unint64_t *)*a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = *a3 * *(_QWORD *)a2;
          goto LABEL_38;
        case 1:
          v212 = *(double *)a3 * (double)*(uint64_t *)a2;
          goto LABEL_253;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v106 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v106, *a3);
          *a3 = (uint64_t)v106;
          *v106 = 1;
          do
          {
            v107 = __ldaxr((unint64_t *)v12);
            v15 = --v107 == 0;
          }
          while (__stlxr(v107, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v243 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v244 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v244, *a3);
            *a3 = (uint64_t)v244;
            *v244 = 1;
            do
            {
              v245 = __ldaxr(v243);
              v246 = v245 - 1;
            }
            while (__stlxr(v246, v243));
            if (!v246)
            {
              v247 = (void *)v243[1];
              if (v247)
              {
                v243[2] = (unint64_t)v247;
                operator delete(v247);
              }
              MEMORY[0x219A19A08](v243, 0x1080C409938AC02);
            }
          }
          v248 = *(double **)(*a3 + 8);
          v249 = *(_QWORD *)(*a3 + 16) - (_QWORD)v248;
          if (v249)
          {
            v250 = v249 >> 3;
            v251 = (double)*(uint64_t *)a2;
            if (v250 <= 1)
              v250 = 1;
            do
            {
              *v248 = *v248 * v251;
              ++v248;
              --v250;
            }
            while (v250);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v283 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v283, *a3);
          *a3 = (uint64_t)v283;
          *v283 = 1;
          do
          {
            v284 = __ldaxr((unint64_t *)v100);
            v189 = --v284 == 0;
          }
          while (__stlxr(v284, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v213 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v213, *a3);
          *a3 = (uint64_t)v213;
          *v213 = 1;
          do
          {
            v214 = __ldaxr((unint64_t *)v100);
            v103 = --v214 == 0;
          }
          while (__stlxr(v214, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v287 = operator new();
          v288 = *a3;
          *(_QWORD *)v287 = *(_QWORD *)*a3;
          *(_QWORD *)(v287 + 8) = *(_QWORD *)(v288 + 8);
          v289 = *(_QWORD *)(v288 + 16);
          *(_QWORD *)(v287 + 16) = v289;
          if (v289)
          {
            v290 = (unsigned int *)(v289 + 8);
            do
              v291 = __ldxr(v290);
            while (__stxr(v291 + 1, v290));
          }
          v292 = *(_OWORD *)(v288 + 24);
          v293 = *(_OWORD *)(v288 + 40);
          *(_OWORD *)(v287 + 56) = *(_OWORD *)(v288 + 56);
          *(_OWORD *)(v287 + 40) = v293;
          *(_OWORD *)(v287 + 24) = v292;
          *a3 = v287;
          *(_QWORD *)v287 = 1;
          do
          {
            v294 = __ldaxr((unint64_t *)v190);
            v199 = --v294 == 0;
          }
          while (__stlxr(v294, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v125 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v126 = (_QWORD *)operator new();
            v127 = *a3 + 8;
            *v126 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
            *a3 = (uint64_t)v126;
            *v126 = 1;
            do
            {
              v128 = __ldaxr(v125);
              v129 = v128 - 1;
            }
            while (__stlxr(v129, v125));
            if (!v129)
            {
              v130 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v125);
              MEMORY[0x219A19A08](v130, 0x1030C407B73B9F7);
            }
          }
          v131 = (uint64_t *)*a3;
          v133 = *(uint64_t **)(*a3 + 24);
          v132 = *(uint64_t **)(*a3 + 32);
          if (v132 == v133)
            return;
          if (!v131[1])
            return;
          v134 = (double)*(uint64_t *)a2;
          v135 = 1;
          do
          {
            v136 = *v133++;
            v135 *= v136;
          }
          while (v133 != v132);
          if (!v135)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
          v137 = (v131[4] - v131[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v137, &v333);
          v71 = v334;
          v138 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v139 = 0;
        v140 = (char *)v138 - (char *)v71;
        if (v140)
        {
          v141 = v140 >> 3;
          v142 = (uint64_t *)v131[6];
          if (v141 <= 1)
            v141 = 1;
          do
          {
            v144 = (uint64_t)*v71++;
            v143 = v144;
            v145 = *v142++;
            v139 += v145 * v143;
            --v141;
          }
          while (v141);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
        *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139)) = *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139))
                                                               * v134;
        v71 = v334;
        v138 = v335;
        v146 = v335 - v334;
        v147 = v146 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_187;
        v148 = v131[3];
        v149 = (char *)v334[v147] + 1;
        v334[v147] = v149;
        if ((unint64_t)v149 < *(_QWORD *)(v148 + 8 * v147))
        {
LABEL_186:
          v146 = 1;
LABEL_187:
          if (v147 < 0 || !v146)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v150 = (unint64_t *)&v71[v146 - 2];
      v151 = v148 - 16;
      while (1)
      {
        v152 = v146 - 1;
        v150[1] = 0;
        if (v146 - 1 <= 0)
          goto LABEL_215;
        v153 = *v150 + 1;
        *v150-- = v153;
        v154 = *(_QWORD *)(v151 + 8 * v146--);
        if (v153 < v154)
        {
          v147 = v152 - 1;
          goto LABEL_186;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)(*(double *)a2 * (double)*a3);
LABEL_38:
          *a3 = v11;
          return;
        case 1:
          v212 = *(double *)a2 * *(double *)a3;
LABEL_253:
          *(double *)a3 = v212;
          return;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v108 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v108, *a3);
          *a3 = (uint64_t)v108;
          *v108 = 1;
          do
          {
            v109 = __ldaxr((unint64_t *)v12);
            v15 = --v109 == 0;
          }
          while (__stlxr(v109, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v252 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v253 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v253, *a3);
            *a3 = (uint64_t)v253;
            *v253 = 1;
            do
            {
              v254 = __ldaxr(v252);
              v255 = v254 - 1;
            }
            while (__stlxr(v255, v252));
            if (!v255)
            {
              v256 = (void *)v252[1];
              if (v256)
              {
                v252[2] = (unint64_t)v256;
                operator delete(v256);
              }
              MEMORY[0x219A19A08](v252, 0x1080C409938AC02);
            }
          }
          v257 = *(double **)(*a3 + 8);
          v258 = *(_QWORD *)(*a3 + 16) - (_QWORD)v257;
          if (v258)
          {
            v259 = *(double *)a2;
            v260 = v258 >> 3;
            if (v260 <= 1)
              v260 = 1;
            do
            {
              *v257 = v259 * *v257;
              ++v257;
              --v260;
            }
            while (v260);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v285, *a3);
          *a3 = (uint64_t)v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v100);
            v189 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v215 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v215, *a3);
          *a3 = (uint64_t)v215;
          *v215 = 1;
          do
          {
            v216 = __ldaxr((unint64_t *)v100);
            v103 = --v216 == 0;
          }
          while (__stlxr(v216, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v295 = operator new();
          v296 = *a3;
          *(_QWORD *)v295 = *(_QWORD *)*a3;
          *(_QWORD *)(v295 + 8) = *(_QWORD *)(v296 + 8);
          v297 = *(_QWORD *)(v296 + 16);
          *(_QWORD *)(v295 + 16) = v297;
          if (v297)
          {
            v298 = (unsigned int *)(v297 + 8);
            do
              v299 = __ldxr(v298);
            while (__stxr(v299 + 1, v298));
          }
          v300 = *(_OWORD *)(v296 + 24);
          v301 = *(_OWORD *)(v296 + 40);
          *(_OWORD *)(v295 + 56) = *(_OWORD *)(v296 + 56);
          *(_OWORD *)(v295 + 40) = v301;
          *(_OWORD *)(v295 + 24) = v300;
          *a3 = v295;
          *(_QWORD *)v295 = 1;
          do
          {
            v302 = __ldaxr((unint64_t *)v190);
            v199 = --v302 == 0;
          }
          while (__stlxr(v302, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v155 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v156 = (_QWORD *)operator new();
            v157 = *a3 + 8;
            *v156 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v156 + 1, v157);
            *a3 = (uint64_t)v156;
            *v156 = 1;
            do
            {
              v158 = __ldaxr(v155);
              v159 = v158 - 1;
            }
            while (__stlxr(v159, v155));
            if (!v159)
            {
              v160 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v155);
              MEMORY[0x219A19A08](v160, 0x1030C407B73B9F7);
            }
          }
          v161 = (uint64_t *)*a3;
          v163 = *(uint64_t **)(*a3 + 24);
          v162 = *(uint64_t **)(*a3 + 32);
          if (v162 == v163)
            return;
          if (!v161[1])
            return;
          v164 = *(double *)a2;
          v165 = 1;
          do
          {
            v166 = *v163++;
            v165 *= v166;
          }
          while (v163 != v162);
          if (!v165)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
          v167 = (v161[4] - v161[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v167, &v333);
          v71 = v334;
          v168 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v169 = 0;
        v170 = (char *)v168 - (char *)v71;
        if (v170)
        {
          v171 = v170 >> 3;
          v172 = (uint64_t *)v161[6];
          if (v171 <= 1)
            v171 = 1;
          do
          {
            v174 = (uint64_t)*v71++;
            v173 = v174;
            v175 = *v172++;
            v169 += v175 * v173;
            --v171;
          }
          while (v171);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
        *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169)) = v164
                                                               * *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169));
        v71 = v334;
        v168 = v335;
        v176 = v335 - v334;
        v177 = v176 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_212;
        v178 = v161[3];
        v179 = (char *)v334[v177] + 1;
        v334[v177] = v179;
        if ((unint64_t)v179 < *(_QWORD *)(v178 + 8 * v177))
        {
LABEL_211:
          v176 = 1;
LABEL_212:
          if (v177 < 0 || !v176)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v180 = (unint64_t *)&v71[v176 - 2];
      v181 = v178 - 16;
      while (1)
      {
        v182 = v176 - 1;
        v180[1] = 0;
        if (v176 - 1 <= 0)
          goto LABEL_215;
        v183 = *v180 + 1;
        *v180-- = v183;
        v184 = *(_QWORD *)(v181 + 8 * v176--);
        if (v183 < v184)
        {
          v177 = v182 - 1;
          goto LABEL_211;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v18 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, *a3);
          *a3 = (uint64_t)v18;
          *v18 = 1;
          do
          {
            v19 = __ldaxr((unint64_t *)v12);
            v15 = --v19 == 0;
          }
          while (__stlxr(v19, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v36 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v36, *a3);
          *a3 = (uint64_t)v36;
          *v36 = 1;
          do
          {
            v37 = __ldaxr(v30);
            v33 = --v37 == 0;
          }
          while (__stlxr(v37, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v229, *a3);
          *a3 = (uint64_t)v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr((unint64_t *)v100);
            v189 = --v230 == 0;
          }
          while (__stlxr(v230, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v185 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v185, *a3);
          *a3 = (uint64_t)v185;
          *v185 = 1;
          do
          {
            v186 = __ldaxr((unint64_t *)v100);
            v103 = --v186 == 0;
          }
          while (__stlxr(v186, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v231 = operator new();
          v232 = *a3;
          *(_QWORD *)v231 = *(_QWORD *)*a3;
          *(_QWORD *)(v231 + 8) = *(_QWORD *)(v232 + 8);
          v233 = *(_QWORD *)(v232 + 16);
          *(_QWORD *)(v231 + 16) = v233;
          if (v233)
          {
            v234 = (unsigned int *)(v233 + 8);
            do
              v235 = __ldxr(v234);
            while (__stxr(v235 + 1, v234));
          }
          v236 = *(_OWORD *)(v232 + 24);
          v237 = *(_OWORD *)(v232 + 40);
          *(_OWORD *)(v231 + 56) = *(_OWORD *)(v232 + 56);
          *(_OWORD *)(v231 + 40) = v237;
          *(_OWORD *)(v231 + 24) = v236;
          *a3 = v231;
          *(_QWORD *)v231 = 1;
          do
          {
            v238 = __ldaxr((unint64_t *)v190);
            v199 = --v238 == 0;
          }
          while (__stlxr(v238, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v97 = (_QWORD *)operator new();
          v98 = *a3 + 8;
          *v97 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, v98);
          *a3 = (uint64_t)v97;
          *v97 = 1;
          do
          {
            v99 = __ldaxr(v38);
            v42 = --v99 == 0;
          }
          while (__stlxr(v99, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v20 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, *a3);
          *a3 = (uint64_t)v20;
          *v20 = 1;
          do
          {
            v21 = __ldaxr((unint64_t *)v12);
            v15 = --v21 == 0;
          }
          while (__stlxr(v21, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v43 = *(double *)a2;
          v44 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v45 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v45, *a3);
            *a3 = (uint64_t)v45;
            *v45 = 1;
            do
            {
              v46 = __ldaxr(v44);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v44));
            if (!v47)
            {
              v48 = (void *)v44[1];
              if (v48)
              {
                v44[2] = (unint64_t)v48;
                operator delete(v48);
              }
              MEMORY[0x219A19A08](v44, 0x1080C409938AC02);
            }
          }
          v49 = *a3;
          turi::flexible_type_fail(*(_QWORD *)(*a3 + 16) - *(_QWORD *)(*a3 + 8) == *(_QWORD *)(*(_QWORD *)&v43 + 16)
                                                                                 - *(_QWORD *)(*(_QWORD *)&v43 + 8));
          v50 = *(double **)(v49 + 8);
          v51 = *(_QWORD *)(v49 + 16) - (_QWORD)v50;
          if (v51)
          {
            v52 = v51 >> 3;
            v53 = *(double **)(*(_QWORD *)&v43 + 8);
            if (v52 <= 1)
              v52 = 1;
            do
            {
              v54 = *v53++;
              *v50 = v54 * *v50;
              ++v50;
              --v52;
            }
            while (v52);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v241 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v241, *a3);
          *a3 = (uint64_t)v241;
          *v241 = 1;
          do
          {
            v242 = __ldaxr((unint64_t *)v100);
            v189 = --v242 == 0;
          }
          while (__stlxr(v242, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v203 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v203, *a3);
          *a3 = (uint64_t)v203;
          *v203 = 1;
          do
          {
            v204 = __ldaxr((unint64_t *)v100);
            v103 = --v204 == 0;
          }
          while (__stlxr(v204, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v265 = operator new();
          v266 = *a3;
          *(_QWORD *)v265 = *(_QWORD *)*a3;
          *(_QWORD *)(v265 + 8) = *(_QWORD *)(v266 + 8);
          v267 = *(_QWORD *)(v266 + 16);
          *(_QWORD *)(v265 + 16) = v267;
          if (v267)
          {
            v268 = (unsigned int *)(v267 + 8);
            do
              v269 = __ldxr(v268);
            while (__stxr(v269 + 1, v268));
          }
          v270 = *(_OWORD *)(v266 + 24);
          v271 = *(_OWORD *)(v266 + 40);
          *(_OWORD *)(v265 + 56) = *(_OWORD *)(v266 + 56);
          *(_OWORD *)(v265 + 40) = v271;
          *(_OWORD *)(v265 + 24) = v270;
          *a3 = v265;
          *(_QWORD *)v265 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v190);
            v199 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v114 = (_QWORD *)operator new();
          v115 = *a3 + 8;
          *v114 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v114 + 1, v115);
          *a3 = (uint64_t)v114;
          *v114 = 1;
          do
          {
            v116 = __ldaxr(v38);
            v42 = --v116 == 0;
          }
          while (__stlxr(v116, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, *a3);
          *a3 = (uint64_t)v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v31 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v31, *a3);
          *a3 = (uint64_t)v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(v30);
            v33 = --v32 == 0;
          }
          while (__stlxr(v32, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v187 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v187, *a3);
          *a3 = (uint64_t)v187;
          *v187 = 1;
          do
          {
            v188 = __ldaxr((unint64_t *)v100);
            v189 = --v188 == 0;
          }
          while (__stlxr(v188, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v101 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v101, *a3);
          *a3 = (uint64_t)v101;
          *v101 = 1;
          do
          {
            v102 = __ldaxr((unint64_t *)v100);
            v103 = --v102 == 0;
          }
          while (__stlxr(v102, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v191 = operator new();
          v192 = *a3;
          *(_QWORD *)v191 = *(_QWORD *)*a3;
          *(_QWORD *)(v191 + 8) = *(_QWORD *)(v192 + 8);
          v193 = *(_QWORD *)(v192 + 16);
          *(_QWORD *)(v191 + 16) = v193;
          if (v193)
          {
            v194 = (unsigned int *)(v193 + 8);
            do
              v195 = __ldxr(v194);
            while (__stxr(v195 + 1, v194));
          }
          v196 = *(_OWORD *)(v192 + 24);
          v197 = *(_OWORD *)(v192 + 40);
          *(_OWORD *)(v191 + 56) = *(_OWORD *)(v192 + 56);
          *(_OWORD *)(v191 + 40) = v197;
          *(_OWORD *)(v191 + 24) = v196;
          *a3 = v191;
          *(_QWORD *)v191 = 1;
          do
          {
            v198 = __ldaxr((unint64_t *)v190);
            v199 = --v198 == 0;
          }
          while (__stlxr(v198, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v39 = (_QWORD *)operator new();
          v40 = *a3 + 8;
          *v39 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
          *a3 = (uint64_t)v39;
          *v39 = 1;
          do
          {
            v41 = __ldaxr(v38);
            v42 = --v41 == 0;
          }
          while (__stlxr(v41, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v24 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, *a3);
          *a3 = (uint64_t)v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr((unint64_t *)v12);
            v15 = --v25 == 0;
          }
          while (__stlxr(v25, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v104 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v104, *a3);
          *a3 = (uint64_t)v104;
          *v104 = 1;
          do
          {
            v105 = __ldaxr(v30);
            v33 = --v105 == 0;
          }
          while (__stlxr(v105, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v303 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v303, *a3);
          *a3 = (uint64_t)v303;
          *v303 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v100);
            v189 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v239 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v239, *a3);
          *a3 = (uint64_t)v239;
          *v239 = 1;
          do
          {
            v240 = __ldaxr((unint64_t *)v100);
            v103 = --v240 == 0;
          }
          while (__stlxr(v240, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v305 = operator new();
          v306 = *a3;
          *(_QWORD *)v305 = *(_QWORD *)*a3;
          *(_QWORD *)(v305 + 8) = *(_QWORD *)(v306 + 8);
          v307 = *(_QWORD *)(v306 + 16);
          *(_QWORD *)(v305 + 16) = v307;
          if (v307)
          {
            v308 = (unsigned int *)(v307 + 8);
            do
              v309 = __ldxr(v308);
            while (__stxr(v309 + 1, v308));
          }
          v310 = *(_OWORD *)(v306 + 24);
          v311 = *(_OWORD *)(v306 + 40);
          *(_OWORD *)(v305 + 56) = *(_OWORD *)(v306 + 56);
          *(_OWORD *)(v305 + 40) = v311;
          *(_OWORD *)(v305 + 24) = v310;
          *a3 = v305;
          *(_QWORD *)v305 = 1;
          do
          {
            v312 = __ldaxr((unint64_t *)v190);
            v199 = --v312 == 0;
          }
          while (__stlxr(v312, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v200 = (_QWORD *)operator new();
          v201 = *a3 + 8;
          *v200 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v200 + 1, v201);
          *a3 = (uint64_t)v200;
          *v200 = 1;
          do
          {
            v202 = __ldaxr(v38);
            v42 = --v202 == 0;
          }
          while (__stlxr(v202, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, *a3);
          *a3 = (uint64_t)v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr((unint64_t *)v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v112 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v112, *a3);
          *a3 = (uint64_t)v112;
          *v112 = 1;
          do
          {
            v113 = __ldaxr(v30);
            v33 = --v113 == 0;
          }
          while (__stlxr(v113, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v313 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v313, *a3);
          *a3 = (uint64_t)v313;
          *v313 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v100);
            v189 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, *a3);
          *a3 = (uint64_t)v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v100);
            v103 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v315 = operator new();
          v316 = *a3;
          *(_QWORD *)v315 = *(_QWORD *)*a3;
          *(_QWORD *)(v315 + 8) = *(_QWORD *)(v316 + 8);
          v317 = *(_QWORD *)(v316 + 16);
          *(_QWORD *)(v315 + 16) = v317;
          if (v317)
          {
            v318 = (unsigned int *)(v317 + 8);
            do
              v319 = __ldxr(v318);
            while (__stxr(v319 + 1, v318));
          }
          v320 = *(_OWORD *)(v316 + 24);
          v321 = *(_OWORD *)(v316 + 40);
          *(_OWORD *)(v315 + 56) = *(_OWORD *)(v316 + 56);
          *(_OWORD *)(v315 + 40) = v321;
          *(_OWORD *)(v315 + 24) = v320;
          *a3 = v315;
          *(_QWORD *)v315 = 1;
          do
          {
            v322 = __ldaxr((unint64_t *)v190);
            v199 = --v322 == 0;
          }
          while (__stlxr(v322, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v209 = (_QWORD *)operator new();
          v210 = *a3 + 8;
          *v209 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v209 + 1, v210);
          *a3 = (uint64_t)v209;
          *v209 = 1;
          do
          {
            v211 = __ldaxr(v38);
            v42 = --v211 == 0;
          }
          while (__stlxr(v211, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v22 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, *a3);
          *a3 = (uint64_t)v22;
          *v22 = 1;
          do
          {
            v23 = __ldaxr((unint64_t *)v12);
            v15 = --v23 == 0;
          }
          while (__stlxr(v23, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *a3);
          *a3 = (uint64_t)v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v30);
            v33 = --v56 == 0;
          }
          while (__stlxr(v56, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v261 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v261, *a3);
          *a3 = (uint64_t)v261;
          *v261 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v100);
            v189 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v205 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v205, *a3);
          *a3 = (uint64_t)v205;
          *v205 = 1;
          do
          {
            v206 = __ldaxr((unint64_t *)v100);
            v103 = --v206 == 0;
          }
          while (__stlxr(v206, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v273 = operator new();
          v274 = *a3;
          *(_QWORD *)v273 = *(_QWORD *)*a3;
          *(_QWORD *)(v273 + 8) = *(_QWORD *)(v274 + 8);
          v275 = *(_QWORD *)(v274 + 16);
          *(_QWORD *)(v273 + 16) = v275;
          if (v275)
          {
            v276 = (unsigned int *)(v275 + 8);
            do
              v277 = __ldxr(v276);
            while (__stxr(v277 + 1, v276));
          }
          v278 = *(_OWORD *)(v274 + 24);
          v279 = *(_OWORD *)(v274 + 40);
          *(_OWORD *)(v273 + 56) = *(_OWORD *)(v274 + 56);
          *(_OWORD *)(v273 + 40) = v279;
          *(_OWORD *)(v273 + 24) = v278;
          *a3 = v273;
          *(_QWORD *)v273 = 1;
          do
          {
            v280 = __ldaxr((unint64_t *)v190);
            v199 = --v280 == 0;
          }
          while (__stlxr(v280, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v122 = (_QWORD *)operator new();
          v123 = *a3 + 8;
          *v122 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v122 + 1, v123);
          *a3 = (uint64_t)v122;
          *v122 = 1;
          do
          {
            v124 = __ldaxr(v38);
            v42 = --v124 == 0;
          }
          while (__stlxr(v124, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, *a3);
          *a3 = (uint64_t)v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr((unint64_t *)v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v117 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v117, *a3);
          *a3 = (uint64_t)v117;
          *v117 = 1;
          do
          {
            v118 = __ldaxr(v30);
            v33 = --v118 == 0;
          }
          while (__stlxr(v118, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v323 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, *a3);
          *a3 = (uint64_t)v323;
          *v323 = 1;
          do
          {
            v324 = __ldaxr((unint64_t *)v100);
            v189 = --v324 == 0;
          }
          while (__stlxr(v324, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v281 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v281, *a3);
          *a3 = (uint64_t)v281;
          *v281 = 1;
          do
          {
            v282 = __ldaxr((unint64_t *)v100);
            v103 = --v282 == 0;
          }
          while (__stlxr(v282, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v325 = operator new();
          v326 = *a3;
          *(_QWORD *)v325 = *(_QWORD *)*a3;
          *(_QWORD *)(v325 + 8) = *(_QWORD *)(v326 + 8);
          v327 = *(_QWORD *)(v326 + 16);
          *(_QWORD *)(v325 + 16) = v327;
          if (v327)
          {
            v328 = (unsigned int *)(v327 + 8);
            do
              v329 = __ldxr(v328);
            while (__stxr(v329 + 1, v328));
          }
          v330 = *(_OWORD *)(v326 + 24);
          v331 = *(_OWORD *)(v326 + 40);
          *(_OWORD *)(v325 + 56) = *(_OWORD *)(v326 + 56);
          *(_OWORD *)(v325 + 40) = v331;
          *(_OWORD *)(v325 + 24) = v330;
          *a3 = v325;
          *(_QWORD *)v325 = 1;
          do
          {
            v332 = __ldaxr((unint64_t *)v190);
            v199 = --v332 == 0;
          }
          while (__stlxr(v332, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v225 = (_QWORD *)operator new();
          v226 = *a3 + 8;
          *v225 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v225 + 1, v226);
          *a3 = (uint64_t)v225;
          *v225 = 1;
          do
          {
            v227 = __ldaxr(v38);
            v42 = --v227 == 0;
          }
          while (__stlxr(v227, v38));
LABEL_272:
          if (!v42)
            goto LABEL_408;
          v110 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38);
          v228 = 2071181815;
          goto LABEL_406;
        default:
          goto LABEL_411;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, *a3);
          *a3 = (uint64_t)v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr((unint64_t *)v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, (unint64_t *)v12));
LABEL_136:
          if (!v15)
            goto LABEL_408;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v110 = (_QWORD *)v12;
          v111 = 0x1012C404EF22A49;
          goto LABEL_407;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v34, *a3);
          *a3 = (uint64_t)v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr(v30);
            v33 = --v35 == 0;
          }
          while (__stlxr(v35, v30));
LABEL_152:
          if (!v33)
            goto LABEL_408;
          v119 = (void *)v30[1];
          if (v119)
          {
            v30[2] = (unint64_t)v119;
            operator delete(v119);
          }
          v110 = v30;
          v111 = 0x1080C409938AC02;
          goto LABEL_407;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v207 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v207, *a3);
          *a3 = (uint64_t)v207;
          *v207 = 1;
          do
          {
            v208 = __ldaxr((unint64_t *)v100);
            v189 = --v208 == 0;
          }
          while (__stlxr(v208, (unint64_t *)v100));
LABEL_393:
          if (!v189)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v334);
          goto LABEL_396;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v120 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v120, *a3);
          *a3 = (uint64_t)v120;
          *v120 = 1;
          do
          {
            v121 = __ldaxr((unint64_t *)v100);
            v103 = --v121 == 0;
          }
          while (__stlxr(v121, (unint64_t *)v100));
LABEL_343:
          if (!v103)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v334);
LABEL_396:
          v110 = (_QWORD *)v100;
          v111 = 0x1020C405E66F15BLL;
          goto LABEL_407;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v217 = operator new();
          v218 = *a3;
          *(_QWORD *)v217 = *(_QWORD *)*a3;
          *(_QWORD *)(v217 + 8) = *(_QWORD *)(v218 + 8);
          v219 = *(_QWORD *)(v218 + 16);
          *(_QWORD *)(v217 + 16) = v219;
          if (v219)
          {
            v220 = (unsigned int *)(v219 + 8);
            do
              v221 = __ldxr(v220);
            while (__stxr(v221 + 1, v220));
          }
          v222 = *(_OWORD *)(v218 + 24);
          v223 = *(_OWORD *)(v218 + 40);
          *(_OWORD *)(v217 + 56) = *(_OWORD *)(v218 + 56);
          *(_OWORD *)(v217 + 40) = v223;
          *(_OWORD *)(v217 + 24) = v222;
          *a3 = v217;
          *(_QWORD *)v217 = 1;
          do
          {
            v224 = __ldaxr((unint64_t *)v190);
            v199 = --v224 == 0;
          }
          while (__stlxr(v224, (unint64_t *)v190));
LABEL_403:
          if (!v199)
            goto LABEL_408;
          boost::detail::shared_count::~shared_count((unsigned int **)(v190 + 16));
          v110 = (_QWORD *)v190;
          v228 = -235920773;
LABEL_406:
          v111 = v228 | 0x1030C4000000000;
LABEL_407:
          MEMORY[0x219A19A08](v110, v111);
LABEL_408:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v57 = *(double *)a2;
          v58 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v59 = (_QWORD *)operator new();
            v60 = *a3 + 8;
            *v59 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
            *a3 = (uint64_t)v59;
            *v59 = 1;
            do
            {
              v61 = __ldaxr(v58);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v58));
            if (!v62)
            {
              v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v58);
              MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
            }
          }
          v64 = *a3;
          v65 = (uint64_t *)(*a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v65, *(_QWORD *)&v57 + 8))
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v67 = *(uint64_t **)(v64 + 24);
          v66 = *(uint64_t **)(v64 + 32);
          if (v66 == v67)
            return;
          if (!*v65)
            return;
          v68 = 1;
          do
          {
            v69 = *v67++;
            v68 *= v69;
          }
          while (v67 != v66);
          if (!v68)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
          v70 = (uint64_t)(*(_QWORD *)(v64 + 32) - *(_QWORD *)(v64 + 24)) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v70, &v333);
          v71 = v334;
          v72 = v335;
          break;
        default:
          goto LABEL_411;
      }
      break;
    default:
LABEL_411:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v73 = (char *)v72 - (char *)v71;
    if (v73)
    {
      v74 = 0;
      v75 = v73 >> 3;
      v76 = *(uint64_t **)(*(_QWORD *)&v57 + 48);
      if (v75 <= 1)
        v75 = 1;
      v77 = v71;
      v78 = v75;
      do
      {
        v80 = (uint64_t)*v77++;
        v79 = v80;
        v81 = *v76++;
        v74 += v81 * v79;
        --v78;
      }
      while (v78);
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v57 + 72) + v74));
      v84 = *(uint64_t **)(v64 + 48);
      do
      {
        v86 = (uint64_t)*v71++;
        v85 = v86;
        v87 = *v84++;
        v82 += v87 * v85;
        --v75;
      }
      while (v75);
    }
    else
    {
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v57 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
    *(double *)(**(_QWORD **)(v64 + 8) + 8 * (*(_QWORD *)(v64 + 72) + v82)) = v83
                                                                            * *(double *)(**(_QWORD **)(v64 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v64 + 72) + v82));
    v71 = v334;
    v72 = v335;
    v88 = v335 - v334;
    v89 = v88 - 1;
    if ((char *)v335 - (char *)v334 < 1)
      goto LABEL_114;
    v90 = *(_QWORD *)(v64 + 24);
    v91 = (char *)v334[v89] + 1;
    v334[v89] = v91;
    if ((unint64_t)v91 >= *(_QWORD *)(v90 + 8 * v89))
      break;
LABEL_113:
    v88 = 1;
LABEL_114:
    if (v89 < 0 || !v88)
      goto LABEL_214;
  }
  v92 = (unint64_t *)&v71[v88 - 2];
  v93 = v90 - 16;
  while (1)
  {
    v94 = v88 - 1;
    v92[1] = 0;
    if (v88 - 1 <= 0)
      break;
    v95 = *v92 + 1;
    *v92-- = v95;
    v96 = *(_QWORD *)(v93 + 8 * v88--);
    if (v95 < v96)
    {
      v89 = v94 - 1;
      goto LABEL_113;
    }
  }
LABEL_214:
  if (v71)
  {
LABEL_215:
    v335 = v71;
    operator delete(v71);
  }
}

void sub_21825AB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934098;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934098;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_17::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  double v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  _QWORD *v55;
  unint64_t v56;
  double v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  void **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  void *v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void **v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  unint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  __int128 v196;
  __int128 v197;
  unint64_t v198;
  BOOL v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  double v212;
  _QWORD *v213;
  unint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  __int128 v222;
  __int128 v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unsigned int v228;
  _QWORD *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  __int128 v236;
  __int128 v237;
  unint64_t v238;
  _QWORD *v239;
  unint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t *v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  void *v247;
  double *v248;
  uint64_t v249;
  unint64_t v250;
  double v251;
  unint64_t *v252;
  _QWORD *v253;
  unint64_t v254;
  unint64_t v255;
  void *v256;
  double *v257;
  uint64_t v258;
  double v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  __int128 v278;
  __int128 v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int *v290;
  unsigned int v291;
  __int128 v292;
  __int128 v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int *v298;
  unsigned int v299;
  __int128 v300;
  __int128 v301;
  unint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  __int128 v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  void **v334;
  void **v335;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((uint64_t *)a2 != a3)
  {
    *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a2 + 5);
    *a3 = *(_QWORD *)a2;
    v5 = *(unsigned __int8 *)(a2 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = (unint64_t *)*a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(a1 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = *a3 * *(_QWORD *)a1;
          goto LABEL_38;
        case 1:
          v212 = *(double *)a3 * (double)*(uint64_t *)a1;
          goto LABEL_253;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v106 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v106, *a3);
          *a3 = (uint64_t)v106;
          *v106 = 1;
          do
          {
            v107 = __ldaxr((unint64_t *)v12);
            v15 = --v107 == 0;
          }
          while (__stlxr(v107, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v243 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v244 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v244, *a3);
            *a3 = (uint64_t)v244;
            *v244 = 1;
            do
            {
              v245 = __ldaxr(v243);
              v246 = v245 - 1;
            }
            while (__stlxr(v246, v243));
            if (!v246)
            {
              v247 = (void *)v243[1];
              if (v247)
              {
                v243[2] = (unint64_t)v247;
                operator delete(v247);
              }
              MEMORY[0x219A19A08](v243, 0x1080C409938AC02);
            }
          }
          v248 = *(double **)(*a3 + 8);
          v249 = *(_QWORD *)(*a3 + 16) - (_QWORD)v248;
          if (v249)
          {
            v250 = v249 >> 3;
            v251 = (double)*(uint64_t *)a1;
            if (v250 <= 1)
              v250 = 1;
            do
            {
              *v248 = *v248 * v251;
              ++v248;
              --v250;
            }
            while (v250);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v283 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v283, *a3);
          *a3 = (uint64_t)v283;
          *v283 = 1;
          do
          {
            v284 = __ldaxr((unint64_t *)v100);
            v189 = --v284 == 0;
          }
          while (__stlxr(v284, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v213 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v213, *a3);
          *a3 = (uint64_t)v213;
          *v213 = 1;
          do
          {
            v214 = __ldaxr((unint64_t *)v100);
            v103 = --v214 == 0;
          }
          while (__stlxr(v214, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v287 = operator new();
          v288 = *a3;
          *(_QWORD *)v287 = *(_QWORD *)*a3;
          *(_QWORD *)(v287 + 8) = *(_QWORD *)(v288 + 8);
          v289 = *(_QWORD *)(v288 + 16);
          *(_QWORD *)(v287 + 16) = v289;
          if (v289)
          {
            v290 = (unsigned int *)(v289 + 8);
            do
              v291 = __ldxr(v290);
            while (__stxr(v291 + 1, v290));
          }
          v292 = *(_OWORD *)(v288 + 24);
          v293 = *(_OWORD *)(v288 + 40);
          *(_OWORD *)(v287 + 56) = *(_OWORD *)(v288 + 56);
          *(_OWORD *)(v287 + 40) = v293;
          *(_OWORD *)(v287 + 24) = v292;
          *a3 = v287;
          *(_QWORD *)v287 = 1;
          do
          {
            v294 = __ldaxr((unint64_t *)v190);
            v199 = --v294 == 0;
          }
          while (__stlxr(v294, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v125 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v126 = (_QWORD *)operator new();
            v127 = *a3 + 8;
            *v126 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
            *a3 = (uint64_t)v126;
            *v126 = 1;
            do
            {
              v128 = __ldaxr(v125);
              v129 = v128 - 1;
            }
            while (__stlxr(v129, v125));
            if (!v129)
            {
              v130 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v125);
              MEMORY[0x219A19A08](v130, 0x1030C407B73B9F7);
            }
          }
          v131 = (uint64_t *)*a3;
          v133 = *(uint64_t **)(*a3 + 24);
          v132 = *(uint64_t **)(*a3 + 32);
          if (v132 == v133)
            return;
          if (!v131[1])
            return;
          v134 = (double)*(uint64_t *)a1;
          v135 = 1;
          do
          {
            v136 = *v133++;
            v135 *= v136;
          }
          while (v133 != v132);
          if (!v135)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
          v137 = (v131[4] - v131[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v137, &v333);
          v71 = v334;
          v138 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v139 = 0;
        v140 = (char *)v138 - (char *)v71;
        if (v140)
        {
          v141 = v140 >> 3;
          v142 = (uint64_t *)v131[6];
          if (v141 <= 1)
            v141 = 1;
          do
          {
            v144 = (uint64_t)*v71++;
            v143 = v144;
            v145 = *v142++;
            v139 += v145 * v143;
            --v141;
          }
          while (v141);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
        *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139)) = *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139))
                                                               * v134;
        v71 = v334;
        v138 = v335;
        v146 = v335 - v334;
        v147 = v146 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_187;
        v148 = v131[3];
        v149 = (char *)v334[v147] + 1;
        v334[v147] = v149;
        if ((unint64_t)v149 < *(_QWORD *)(v148 + 8 * v147))
        {
LABEL_186:
          v146 = 1;
LABEL_187:
          if (v147 < 0 || !v146)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v150 = (unint64_t *)&v71[v146 - 2];
      v151 = v148 - 16;
      while (1)
      {
        v152 = v146 - 1;
        v150[1] = 0;
        if (v146 - 1 <= 0)
          goto LABEL_215;
        v153 = *v150 + 1;
        *v150-- = v153;
        v154 = *(_QWORD *)(v151 + 8 * v146--);
        if (v153 < v154)
        {
          v147 = v152 - 1;
          goto LABEL_186;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)(*(double *)a1 * (double)*a3);
LABEL_38:
          *a3 = v11;
          return;
        case 1:
          v212 = *(double *)a1 * *(double *)a3;
LABEL_253:
          *(double *)a3 = v212;
          return;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v108 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v108, *a3);
          *a3 = (uint64_t)v108;
          *v108 = 1;
          do
          {
            v109 = __ldaxr((unint64_t *)v12);
            v15 = --v109 == 0;
          }
          while (__stlxr(v109, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v252 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v253 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v253, *a3);
            *a3 = (uint64_t)v253;
            *v253 = 1;
            do
            {
              v254 = __ldaxr(v252);
              v255 = v254 - 1;
            }
            while (__stlxr(v255, v252));
            if (!v255)
            {
              v256 = (void *)v252[1];
              if (v256)
              {
                v252[2] = (unint64_t)v256;
                operator delete(v256);
              }
              MEMORY[0x219A19A08](v252, 0x1080C409938AC02);
            }
          }
          v257 = *(double **)(*a3 + 8);
          v258 = *(_QWORD *)(*a3 + 16) - (_QWORD)v257;
          if (v258)
          {
            v259 = *(double *)a1;
            v260 = v258 >> 3;
            if (v260 <= 1)
              v260 = 1;
            do
            {
              *v257 = v259 * *v257;
              ++v257;
              --v260;
            }
            while (v260);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v285, *a3);
          *a3 = (uint64_t)v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v100);
            v189 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v215 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v215, *a3);
          *a3 = (uint64_t)v215;
          *v215 = 1;
          do
          {
            v216 = __ldaxr((unint64_t *)v100);
            v103 = --v216 == 0;
          }
          while (__stlxr(v216, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v295 = operator new();
          v296 = *a3;
          *(_QWORD *)v295 = *(_QWORD *)*a3;
          *(_QWORD *)(v295 + 8) = *(_QWORD *)(v296 + 8);
          v297 = *(_QWORD *)(v296 + 16);
          *(_QWORD *)(v295 + 16) = v297;
          if (v297)
          {
            v298 = (unsigned int *)(v297 + 8);
            do
              v299 = __ldxr(v298);
            while (__stxr(v299 + 1, v298));
          }
          v300 = *(_OWORD *)(v296 + 24);
          v301 = *(_OWORD *)(v296 + 40);
          *(_OWORD *)(v295 + 56) = *(_OWORD *)(v296 + 56);
          *(_OWORD *)(v295 + 40) = v301;
          *(_OWORD *)(v295 + 24) = v300;
          *a3 = v295;
          *(_QWORD *)v295 = 1;
          do
          {
            v302 = __ldaxr((unint64_t *)v190);
            v199 = --v302 == 0;
          }
          while (__stlxr(v302, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v155 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v156 = (_QWORD *)operator new();
            v157 = *a3 + 8;
            *v156 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v156 + 1, v157);
            *a3 = (uint64_t)v156;
            *v156 = 1;
            do
            {
              v158 = __ldaxr(v155);
              v159 = v158 - 1;
            }
            while (__stlxr(v159, v155));
            if (!v159)
            {
              v160 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v155);
              MEMORY[0x219A19A08](v160, 0x1030C407B73B9F7);
            }
          }
          v161 = (uint64_t *)*a3;
          v163 = *(uint64_t **)(*a3 + 24);
          v162 = *(uint64_t **)(*a3 + 32);
          if (v162 == v163)
            return;
          if (!v161[1])
            return;
          v164 = *(double *)a1;
          v165 = 1;
          do
          {
            v166 = *v163++;
            v165 *= v166;
          }
          while (v163 != v162);
          if (!v165)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
          v167 = (v161[4] - v161[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v167, &v333);
          v71 = v334;
          v168 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v169 = 0;
        v170 = (char *)v168 - (char *)v71;
        if (v170)
        {
          v171 = v170 >> 3;
          v172 = (uint64_t *)v161[6];
          if (v171 <= 1)
            v171 = 1;
          do
          {
            v174 = (uint64_t)*v71++;
            v173 = v174;
            v175 = *v172++;
            v169 += v175 * v173;
            --v171;
          }
          while (v171);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
        *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169)) = v164
                                                               * *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169));
        v71 = v334;
        v168 = v335;
        v176 = v335 - v334;
        v177 = v176 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_212;
        v178 = v161[3];
        v179 = (char *)v334[v177] + 1;
        v334[v177] = v179;
        if ((unint64_t)v179 < *(_QWORD *)(v178 + 8 * v177))
        {
LABEL_211:
          v176 = 1;
LABEL_212:
          if (v177 < 0 || !v176)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v180 = (unint64_t *)&v71[v176 - 2];
      v181 = v178 - 16;
      while (1)
      {
        v182 = v176 - 1;
        v180[1] = 0;
        if (v176 - 1 <= 0)
          goto LABEL_215;
        v183 = *v180 + 1;
        *v180-- = v183;
        v184 = *(_QWORD *)(v181 + 8 * v176--);
        if (v183 < v184)
        {
          v177 = v182 - 1;
          goto LABEL_211;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v18 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, *a3);
          *a3 = (uint64_t)v18;
          *v18 = 1;
          do
          {
            v19 = __ldaxr((unint64_t *)v12);
            v15 = --v19 == 0;
          }
          while (__stlxr(v19, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v36 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v36, *a3);
          *a3 = (uint64_t)v36;
          *v36 = 1;
          do
          {
            v37 = __ldaxr(v30);
            v33 = --v37 == 0;
          }
          while (__stlxr(v37, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v229, *a3);
          *a3 = (uint64_t)v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr((unint64_t *)v100);
            v189 = --v230 == 0;
          }
          while (__stlxr(v230, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v185 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v185, *a3);
          *a3 = (uint64_t)v185;
          *v185 = 1;
          do
          {
            v186 = __ldaxr((unint64_t *)v100);
            v103 = --v186 == 0;
          }
          while (__stlxr(v186, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v231 = operator new();
          v232 = *a3;
          *(_QWORD *)v231 = *(_QWORD *)*a3;
          *(_QWORD *)(v231 + 8) = *(_QWORD *)(v232 + 8);
          v233 = *(_QWORD *)(v232 + 16);
          *(_QWORD *)(v231 + 16) = v233;
          if (v233)
          {
            v234 = (unsigned int *)(v233 + 8);
            do
              v235 = __ldxr(v234);
            while (__stxr(v235 + 1, v234));
          }
          v236 = *(_OWORD *)(v232 + 24);
          v237 = *(_OWORD *)(v232 + 40);
          *(_OWORD *)(v231 + 56) = *(_OWORD *)(v232 + 56);
          *(_OWORD *)(v231 + 40) = v237;
          *(_OWORD *)(v231 + 24) = v236;
          *a3 = v231;
          *(_QWORD *)v231 = 1;
          do
          {
            v238 = __ldaxr((unint64_t *)v190);
            v199 = --v238 == 0;
          }
          while (__stlxr(v238, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v97 = (_QWORD *)operator new();
          v98 = *a3 + 8;
          *v97 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, v98);
          *a3 = (uint64_t)v97;
          *v97 = 1;
          do
          {
            v99 = __ldaxr(v38);
            v42 = --v99 == 0;
          }
          while (__stlxr(v99, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v20 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, *a3);
          *a3 = (uint64_t)v20;
          *v20 = 1;
          do
          {
            v21 = __ldaxr((unint64_t *)v12);
            v15 = --v21 == 0;
          }
          while (__stlxr(v21, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v43 = *(double *)a1;
          v44 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v45 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v45, *a3);
            *a3 = (uint64_t)v45;
            *v45 = 1;
            do
            {
              v46 = __ldaxr(v44);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v44));
            if (!v47)
            {
              v48 = (void *)v44[1];
              if (v48)
              {
                v44[2] = (unint64_t)v48;
                operator delete(v48);
              }
              MEMORY[0x219A19A08](v44, 0x1080C409938AC02);
            }
          }
          v49 = *a3;
          turi::flexible_type_fail(*(_QWORD *)(*a3 + 16) - *(_QWORD *)(*a3 + 8) == *(_QWORD *)(*(_QWORD *)&v43 + 16)
                                                                                 - *(_QWORD *)(*(_QWORD *)&v43 + 8));
          v50 = *(double **)(v49 + 8);
          v51 = *(_QWORD *)(v49 + 16) - (_QWORD)v50;
          if (v51)
          {
            v52 = v51 >> 3;
            v53 = *(double **)(*(_QWORD *)&v43 + 8);
            if (v52 <= 1)
              v52 = 1;
            do
            {
              v54 = *v53++;
              *v50 = v54 * *v50;
              ++v50;
              --v52;
            }
            while (v52);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v241 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v241, *a3);
          *a3 = (uint64_t)v241;
          *v241 = 1;
          do
          {
            v242 = __ldaxr((unint64_t *)v100);
            v189 = --v242 == 0;
          }
          while (__stlxr(v242, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v203 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v203, *a3);
          *a3 = (uint64_t)v203;
          *v203 = 1;
          do
          {
            v204 = __ldaxr((unint64_t *)v100);
            v103 = --v204 == 0;
          }
          while (__stlxr(v204, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v265 = operator new();
          v266 = *a3;
          *(_QWORD *)v265 = *(_QWORD *)*a3;
          *(_QWORD *)(v265 + 8) = *(_QWORD *)(v266 + 8);
          v267 = *(_QWORD *)(v266 + 16);
          *(_QWORD *)(v265 + 16) = v267;
          if (v267)
          {
            v268 = (unsigned int *)(v267 + 8);
            do
              v269 = __ldxr(v268);
            while (__stxr(v269 + 1, v268));
          }
          v270 = *(_OWORD *)(v266 + 24);
          v271 = *(_OWORD *)(v266 + 40);
          *(_OWORD *)(v265 + 56) = *(_OWORD *)(v266 + 56);
          *(_OWORD *)(v265 + 40) = v271;
          *(_OWORD *)(v265 + 24) = v270;
          *a3 = v265;
          *(_QWORD *)v265 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v190);
            v199 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v114 = (_QWORD *)operator new();
          v115 = *a3 + 8;
          *v114 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v114 + 1, v115);
          *a3 = (uint64_t)v114;
          *v114 = 1;
          do
          {
            v116 = __ldaxr(v38);
            v42 = --v116 == 0;
          }
          while (__stlxr(v116, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, *a3);
          *a3 = (uint64_t)v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v31 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v31, *a3);
          *a3 = (uint64_t)v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(v30);
            v33 = --v32 == 0;
          }
          while (__stlxr(v32, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v187 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v187, *a3);
          *a3 = (uint64_t)v187;
          *v187 = 1;
          do
          {
            v188 = __ldaxr((unint64_t *)v100);
            v189 = --v188 == 0;
          }
          while (__stlxr(v188, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v101 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v101, *a3);
          *a3 = (uint64_t)v101;
          *v101 = 1;
          do
          {
            v102 = __ldaxr((unint64_t *)v100);
            v103 = --v102 == 0;
          }
          while (__stlxr(v102, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v191 = operator new();
          v192 = *a3;
          *(_QWORD *)v191 = *(_QWORD *)*a3;
          *(_QWORD *)(v191 + 8) = *(_QWORD *)(v192 + 8);
          v193 = *(_QWORD *)(v192 + 16);
          *(_QWORD *)(v191 + 16) = v193;
          if (v193)
          {
            v194 = (unsigned int *)(v193 + 8);
            do
              v195 = __ldxr(v194);
            while (__stxr(v195 + 1, v194));
          }
          v196 = *(_OWORD *)(v192 + 24);
          v197 = *(_OWORD *)(v192 + 40);
          *(_OWORD *)(v191 + 56) = *(_OWORD *)(v192 + 56);
          *(_OWORD *)(v191 + 40) = v197;
          *(_OWORD *)(v191 + 24) = v196;
          *a3 = v191;
          *(_QWORD *)v191 = 1;
          do
          {
            v198 = __ldaxr((unint64_t *)v190);
            v199 = --v198 == 0;
          }
          while (__stlxr(v198, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v39 = (_QWORD *)operator new();
          v40 = *a3 + 8;
          *v39 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
          *a3 = (uint64_t)v39;
          *v39 = 1;
          do
          {
            v41 = __ldaxr(v38);
            v42 = --v41 == 0;
          }
          while (__stlxr(v41, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v24 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, *a3);
          *a3 = (uint64_t)v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr((unint64_t *)v12);
            v15 = --v25 == 0;
          }
          while (__stlxr(v25, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v104 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v104, *a3);
          *a3 = (uint64_t)v104;
          *v104 = 1;
          do
          {
            v105 = __ldaxr(v30);
            v33 = --v105 == 0;
          }
          while (__stlxr(v105, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v303 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v303, *a3);
          *a3 = (uint64_t)v303;
          *v303 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v100);
            v189 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v239 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v239, *a3);
          *a3 = (uint64_t)v239;
          *v239 = 1;
          do
          {
            v240 = __ldaxr((unint64_t *)v100);
            v103 = --v240 == 0;
          }
          while (__stlxr(v240, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v305 = operator new();
          v306 = *a3;
          *(_QWORD *)v305 = *(_QWORD *)*a3;
          *(_QWORD *)(v305 + 8) = *(_QWORD *)(v306 + 8);
          v307 = *(_QWORD *)(v306 + 16);
          *(_QWORD *)(v305 + 16) = v307;
          if (v307)
          {
            v308 = (unsigned int *)(v307 + 8);
            do
              v309 = __ldxr(v308);
            while (__stxr(v309 + 1, v308));
          }
          v310 = *(_OWORD *)(v306 + 24);
          v311 = *(_OWORD *)(v306 + 40);
          *(_OWORD *)(v305 + 56) = *(_OWORD *)(v306 + 56);
          *(_OWORD *)(v305 + 40) = v311;
          *(_OWORD *)(v305 + 24) = v310;
          *a3 = v305;
          *(_QWORD *)v305 = 1;
          do
          {
            v312 = __ldaxr((unint64_t *)v190);
            v199 = --v312 == 0;
          }
          while (__stlxr(v312, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v200 = (_QWORD *)operator new();
          v201 = *a3 + 8;
          *v200 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v200 + 1, v201);
          *a3 = (uint64_t)v200;
          *v200 = 1;
          do
          {
            v202 = __ldaxr(v38);
            v42 = --v202 == 0;
          }
          while (__stlxr(v202, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, *a3);
          *a3 = (uint64_t)v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr((unint64_t *)v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v112 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v112, *a3);
          *a3 = (uint64_t)v112;
          *v112 = 1;
          do
          {
            v113 = __ldaxr(v30);
            v33 = --v113 == 0;
          }
          while (__stlxr(v113, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v313 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v313, *a3);
          *a3 = (uint64_t)v313;
          *v313 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v100);
            v189 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, *a3);
          *a3 = (uint64_t)v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v100);
            v103 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v315 = operator new();
          v316 = *a3;
          *(_QWORD *)v315 = *(_QWORD *)*a3;
          *(_QWORD *)(v315 + 8) = *(_QWORD *)(v316 + 8);
          v317 = *(_QWORD *)(v316 + 16);
          *(_QWORD *)(v315 + 16) = v317;
          if (v317)
          {
            v318 = (unsigned int *)(v317 + 8);
            do
              v319 = __ldxr(v318);
            while (__stxr(v319 + 1, v318));
          }
          v320 = *(_OWORD *)(v316 + 24);
          v321 = *(_OWORD *)(v316 + 40);
          *(_OWORD *)(v315 + 56) = *(_OWORD *)(v316 + 56);
          *(_OWORD *)(v315 + 40) = v321;
          *(_OWORD *)(v315 + 24) = v320;
          *a3 = v315;
          *(_QWORD *)v315 = 1;
          do
          {
            v322 = __ldaxr((unint64_t *)v190);
            v199 = --v322 == 0;
          }
          while (__stlxr(v322, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v209 = (_QWORD *)operator new();
          v210 = *a3 + 8;
          *v209 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v209 + 1, v210);
          *a3 = (uint64_t)v209;
          *v209 = 1;
          do
          {
            v211 = __ldaxr(v38);
            v42 = --v211 == 0;
          }
          while (__stlxr(v211, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v22 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, *a3);
          *a3 = (uint64_t)v22;
          *v22 = 1;
          do
          {
            v23 = __ldaxr((unint64_t *)v12);
            v15 = --v23 == 0;
          }
          while (__stlxr(v23, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *a3);
          *a3 = (uint64_t)v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v30);
            v33 = --v56 == 0;
          }
          while (__stlxr(v56, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v261 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v261, *a3);
          *a3 = (uint64_t)v261;
          *v261 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v100);
            v189 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v205 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v205, *a3);
          *a3 = (uint64_t)v205;
          *v205 = 1;
          do
          {
            v206 = __ldaxr((unint64_t *)v100);
            v103 = --v206 == 0;
          }
          while (__stlxr(v206, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v273 = operator new();
          v274 = *a3;
          *(_QWORD *)v273 = *(_QWORD *)*a3;
          *(_QWORD *)(v273 + 8) = *(_QWORD *)(v274 + 8);
          v275 = *(_QWORD *)(v274 + 16);
          *(_QWORD *)(v273 + 16) = v275;
          if (v275)
          {
            v276 = (unsigned int *)(v275 + 8);
            do
              v277 = __ldxr(v276);
            while (__stxr(v277 + 1, v276));
          }
          v278 = *(_OWORD *)(v274 + 24);
          v279 = *(_OWORD *)(v274 + 40);
          *(_OWORD *)(v273 + 56) = *(_OWORD *)(v274 + 56);
          *(_OWORD *)(v273 + 40) = v279;
          *(_OWORD *)(v273 + 24) = v278;
          *a3 = v273;
          *(_QWORD *)v273 = 1;
          do
          {
            v280 = __ldaxr((unint64_t *)v190);
            v199 = --v280 == 0;
          }
          while (__stlxr(v280, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v122 = (_QWORD *)operator new();
          v123 = *a3 + 8;
          *v122 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v122 + 1, v123);
          *a3 = (uint64_t)v122;
          *v122 = 1;
          do
          {
            v124 = __ldaxr(v38);
            v42 = --v124 == 0;
          }
          while (__stlxr(v124, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, *a3);
          *a3 = (uint64_t)v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr((unint64_t *)v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v117 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v117, *a3);
          *a3 = (uint64_t)v117;
          *v117 = 1;
          do
          {
            v118 = __ldaxr(v30);
            v33 = --v118 == 0;
          }
          while (__stlxr(v118, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v323 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, *a3);
          *a3 = (uint64_t)v323;
          *v323 = 1;
          do
          {
            v324 = __ldaxr((unint64_t *)v100);
            v189 = --v324 == 0;
          }
          while (__stlxr(v324, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v281 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v281, *a3);
          *a3 = (uint64_t)v281;
          *v281 = 1;
          do
          {
            v282 = __ldaxr((unint64_t *)v100);
            v103 = --v282 == 0;
          }
          while (__stlxr(v282, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v325 = operator new();
          v326 = *a3;
          *(_QWORD *)v325 = *(_QWORD *)*a3;
          *(_QWORD *)(v325 + 8) = *(_QWORD *)(v326 + 8);
          v327 = *(_QWORD *)(v326 + 16);
          *(_QWORD *)(v325 + 16) = v327;
          if (v327)
          {
            v328 = (unsigned int *)(v327 + 8);
            do
              v329 = __ldxr(v328);
            while (__stxr(v329 + 1, v328));
          }
          v330 = *(_OWORD *)(v326 + 24);
          v331 = *(_OWORD *)(v326 + 40);
          *(_OWORD *)(v325 + 56) = *(_OWORD *)(v326 + 56);
          *(_OWORD *)(v325 + 40) = v331;
          *(_OWORD *)(v325 + 24) = v330;
          *a3 = v325;
          *(_QWORD *)v325 = 1;
          do
          {
            v332 = __ldaxr((unint64_t *)v190);
            v199 = --v332 == 0;
          }
          while (__stlxr(v332, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v225 = (_QWORD *)operator new();
          v226 = *a3 + 8;
          *v225 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v225 + 1, v226);
          *a3 = (uint64_t)v225;
          *v225 = 1;
          do
          {
            v227 = __ldaxr(v38);
            v42 = --v227 == 0;
          }
          while (__stlxr(v227, v38));
LABEL_272:
          if (!v42)
            goto LABEL_408;
          v110 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38);
          v228 = 2071181815;
          goto LABEL_406;
        default:
          goto LABEL_411;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, *a3);
          *a3 = (uint64_t)v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr((unint64_t *)v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, (unint64_t *)v12));
LABEL_136:
          if (!v15)
            goto LABEL_408;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v110 = (_QWORD *)v12;
          v111 = 0x1012C404EF22A49;
          goto LABEL_407;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v34, *a3);
          *a3 = (uint64_t)v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr(v30);
            v33 = --v35 == 0;
          }
          while (__stlxr(v35, v30));
LABEL_152:
          if (!v33)
            goto LABEL_408;
          v119 = (void *)v30[1];
          if (v119)
          {
            v30[2] = (unint64_t)v119;
            operator delete(v119);
          }
          v110 = v30;
          v111 = 0x1080C409938AC02;
          goto LABEL_407;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v207 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v207, *a3);
          *a3 = (uint64_t)v207;
          *v207 = 1;
          do
          {
            v208 = __ldaxr((unint64_t *)v100);
            v189 = --v208 == 0;
          }
          while (__stlxr(v208, (unint64_t *)v100));
LABEL_393:
          if (!v189)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v334);
          goto LABEL_396;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v120 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v120, *a3);
          *a3 = (uint64_t)v120;
          *v120 = 1;
          do
          {
            v121 = __ldaxr((unint64_t *)v100);
            v103 = --v121 == 0;
          }
          while (__stlxr(v121, (unint64_t *)v100));
LABEL_343:
          if (!v103)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v334);
LABEL_396:
          v110 = (_QWORD *)v100;
          v111 = 0x1020C405E66F15BLL;
          goto LABEL_407;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v217 = operator new();
          v218 = *a3;
          *(_QWORD *)v217 = *(_QWORD *)*a3;
          *(_QWORD *)(v217 + 8) = *(_QWORD *)(v218 + 8);
          v219 = *(_QWORD *)(v218 + 16);
          *(_QWORD *)(v217 + 16) = v219;
          if (v219)
          {
            v220 = (unsigned int *)(v219 + 8);
            do
              v221 = __ldxr(v220);
            while (__stxr(v221 + 1, v220));
          }
          v222 = *(_OWORD *)(v218 + 24);
          v223 = *(_OWORD *)(v218 + 40);
          *(_OWORD *)(v217 + 56) = *(_OWORD *)(v218 + 56);
          *(_OWORD *)(v217 + 40) = v223;
          *(_OWORD *)(v217 + 24) = v222;
          *a3 = v217;
          *(_QWORD *)v217 = 1;
          do
          {
            v224 = __ldaxr((unint64_t *)v190);
            v199 = --v224 == 0;
          }
          while (__stlxr(v224, (unint64_t *)v190));
LABEL_403:
          if (!v199)
            goto LABEL_408;
          boost::detail::shared_count::~shared_count((unsigned int **)(v190 + 16));
          v110 = (_QWORD *)v190;
          v228 = -235920773;
LABEL_406:
          v111 = v228 | 0x1030C4000000000;
LABEL_407:
          MEMORY[0x219A19A08](v110, v111);
LABEL_408:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v57 = *(double *)a1;
          v58 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v59 = (_QWORD *)operator new();
            v60 = *a3 + 8;
            *v59 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
            *a3 = (uint64_t)v59;
            *v59 = 1;
            do
            {
              v61 = __ldaxr(v58);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v58));
            if (!v62)
            {
              v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v58);
              MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
            }
          }
          v64 = *a3;
          v65 = (uint64_t *)(*a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v65, *(_QWORD *)&v57 + 8))
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v67 = *(uint64_t **)(v64 + 24);
          v66 = *(uint64_t **)(v64 + 32);
          if (v66 == v67)
            return;
          if (!*v65)
            return;
          v68 = 1;
          do
          {
            v69 = *v67++;
            v68 *= v69;
          }
          while (v67 != v66);
          if (!v68)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
          v70 = (uint64_t)(*(_QWORD *)(v64 + 32) - *(_QWORD *)(v64 + 24)) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v70, &v333);
          v71 = v334;
          v72 = v335;
          break;
        default:
          goto LABEL_411;
      }
      break;
    default:
LABEL_411:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v73 = (char *)v72 - (char *)v71;
    if (v73)
    {
      v74 = 0;
      v75 = v73 >> 3;
      v76 = *(uint64_t **)(*(_QWORD *)&v57 + 48);
      if (v75 <= 1)
        v75 = 1;
      v77 = v71;
      v78 = v75;
      do
      {
        v80 = (uint64_t)*v77++;
        v79 = v80;
        v81 = *v76++;
        v74 += v81 * v79;
        --v78;
      }
      while (v78);
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v57 + 72) + v74));
      v84 = *(uint64_t **)(v64 + 48);
      do
      {
        v86 = (uint64_t)*v71++;
        v85 = v86;
        v87 = *v84++;
        v82 += v87 * v85;
        --v75;
      }
      while (v75);
    }
    else
    {
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v57 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
    *(double *)(**(_QWORD **)(v64 + 8) + 8 * (*(_QWORD *)(v64 + 72) + v82)) = v83
                                                                            * *(double *)(**(_QWORD **)(v64 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v64 + 72) + v82));
    v71 = v334;
    v72 = v335;
    v88 = v335 - v334;
    v89 = v88 - 1;
    if ((char *)v335 - (char *)v334 < 1)
      goto LABEL_114;
    v90 = *(_QWORD *)(v64 + 24);
    v91 = (char *)v334[v89] + 1;
    v334[v89] = v91;
    if ((unint64_t)v91 >= *(_QWORD *)(v90 + 8 * v89))
      break;
LABEL_113:
    v88 = 1;
LABEL_114:
    if (v89 < 0 || !v88)
      goto LABEL_214;
  }
  v92 = (unint64_t *)&v71[v88 - 2];
  v93 = v90 - 16;
  while (1)
  {
    v94 = v88 - 1;
    v92[1] = 0;
    if (v88 - 1 <= 0)
      break;
    v95 = *v92 + 1;
    *v92-- = v95;
    v96 = *(_QWORD *)(v93 + 8 * v88--);
    if (v95 < v96)
    {
      v89 = v94 - 1;
      goto LABEL_113;
    }
  }
LABEL_214:
  if (v71)
  {
LABEL_215:
    v335 = v71;
    operator delete(v71);
  }
}

void sub_21825CED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934118;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934118;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_18::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  double v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  _QWORD *v55;
  unint64_t v56;
  double v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  void **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  void *v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void **v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  unint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  __int128 v196;
  __int128 v197;
  unint64_t v198;
  BOOL v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  double v212;
  _QWORD *v213;
  unint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  __int128 v222;
  __int128 v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unsigned int v228;
  _QWORD *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  __int128 v236;
  __int128 v237;
  unint64_t v238;
  _QWORD *v239;
  unint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t *v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  void *v247;
  double *v248;
  uint64_t v249;
  unint64_t v250;
  double v251;
  unint64_t *v252;
  _QWORD *v253;
  unint64_t v254;
  unint64_t v255;
  void *v256;
  double *v257;
  uint64_t v258;
  double v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  __int128 v278;
  __int128 v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int *v290;
  unsigned int v291;
  __int128 v292;
  __int128 v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int *v298;
  unsigned int v299;
  __int128 v300;
  __int128 v301;
  unint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  __int128 v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  void **v334;
  void **v335;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((uint64_t *)a1 != a3)
  {
    *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a1 + 5);
    *a3 = *(_QWORD *)a1;
    v5 = *(unsigned __int8 *)(a1 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = (unint64_t *)*a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = *a3 * *(_QWORD *)a2;
          goto LABEL_38;
        case 1:
          v212 = *(double *)a3 * (double)*(uint64_t *)a2;
          goto LABEL_253;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v106 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v106, *a3);
          *a3 = (uint64_t)v106;
          *v106 = 1;
          do
          {
            v107 = __ldaxr((unint64_t *)v12);
            v15 = --v107 == 0;
          }
          while (__stlxr(v107, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v243 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v244 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v244, *a3);
            *a3 = (uint64_t)v244;
            *v244 = 1;
            do
            {
              v245 = __ldaxr(v243);
              v246 = v245 - 1;
            }
            while (__stlxr(v246, v243));
            if (!v246)
            {
              v247 = (void *)v243[1];
              if (v247)
              {
                v243[2] = (unint64_t)v247;
                operator delete(v247);
              }
              MEMORY[0x219A19A08](v243, 0x1080C409938AC02);
            }
          }
          v248 = *(double **)(*a3 + 8);
          v249 = *(_QWORD *)(*a3 + 16) - (_QWORD)v248;
          if (v249)
          {
            v250 = v249 >> 3;
            v251 = (double)*(uint64_t *)a2;
            if (v250 <= 1)
              v250 = 1;
            do
            {
              *v248 = *v248 * v251;
              ++v248;
              --v250;
            }
            while (v250);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v283 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v283, *a3);
          *a3 = (uint64_t)v283;
          *v283 = 1;
          do
          {
            v284 = __ldaxr((unint64_t *)v100);
            v189 = --v284 == 0;
          }
          while (__stlxr(v284, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v213 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v213, *a3);
          *a3 = (uint64_t)v213;
          *v213 = 1;
          do
          {
            v214 = __ldaxr((unint64_t *)v100);
            v103 = --v214 == 0;
          }
          while (__stlxr(v214, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v287 = operator new();
          v288 = *a3;
          *(_QWORD *)v287 = *(_QWORD *)*a3;
          *(_QWORD *)(v287 + 8) = *(_QWORD *)(v288 + 8);
          v289 = *(_QWORD *)(v288 + 16);
          *(_QWORD *)(v287 + 16) = v289;
          if (v289)
          {
            v290 = (unsigned int *)(v289 + 8);
            do
              v291 = __ldxr(v290);
            while (__stxr(v291 + 1, v290));
          }
          v292 = *(_OWORD *)(v288 + 24);
          v293 = *(_OWORD *)(v288 + 40);
          *(_OWORD *)(v287 + 56) = *(_OWORD *)(v288 + 56);
          *(_OWORD *)(v287 + 40) = v293;
          *(_OWORD *)(v287 + 24) = v292;
          *a3 = v287;
          *(_QWORD *)v287 = 1;
          do
          {
            v294 = __ldaxr((unint64_t *)v190);
            v199 = --v294 == 0;
          }
          while (__stlxr(v294, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v125 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v126 = (_QWORD *)operator new();
            v127 = *a3 + 8;
            *v126 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
            *a3 = (uint64_t)v126;
            *v126 = 1;
            do
            {
              v128 = __ldaxr(v125);
              v129 = v128 - 1;
            }
            while (__stlxr(v129, v125));
            if (!v129)
            {
              v130 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v125);
              MEMORY[0x219A19A08](v130, 0x1030C407B73B9F7);
            }
          }
          v131 = (uint64_t *)*a3;
          v133 = *(uint64_t **)(*a3 + 24);
          v132 = *(uint64_t **)(*a3 + 32);
          if (v132 == v133)
            return;
          if (!v131[1])
            return;
          v134 = (double)*(uint64_t *)a2;
          v135 = 1;
          do
          {
            v136 = *v133++;
            v135 *= v136;
          }
          while (v133 != v132);
          if (!v135)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
          v137 = (v131[4] - v131[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v137, &v333);
          v71 = v334;
          v138 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v139 = 0;
        v140 = (char *)v138 - (char *)v71;
        if (v140)
        {
          v141 = v140 >> 3;
          v142 = (uint64_t *)v131[6];
          if (v141 <= 1)
            v141 = 1;
          do
          {
            v144 = (uint64_t)*v71++;
            v143 = v144;
            v145 = *v142++;
            v139 += v145 * v143;
            --v141;
          }
          while (v141);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
        *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139)) = *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139))
                                                               * v134;
        v71 = v334;
        v138 = v335;
        v146 = v335 - v334;
        v147 = v146 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_187;
        v148 = v131[3];
        v149 = (char *)v334[v147] + 1;
        v334[v147] = v149;
        if ((unint64_t)v149 < *(_QWORD *)(v148 + 8 * v147))
        {
LABEL_186:
          v146 = 1;
LABEL_187:
          if (v147 < 0 || !v146)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v150 = (unint64_t *)&v71[v146 - 2];
      v151 = v148 - 16;
      while (1)
      {
        v152 = v146 - 1;
        v150[1] = 0;
        if (v146 - 1 <= 0)
          goto LABEL_215;
        v153 = *v150 + 1;
        *v150-- = v153;
        v154 = *(_QWORD *)(v151 + 8 * v146--);
        if (v153 < v154)
        {
          v147 = v152 - 1;
          goto LABEL_186;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)(*(double *)a2 * (double)*a3);
LABEL_38:
          *a3 = v11;
          return;
        case 1:
          v212 = *(double *)a2 * *(double *)a3;
LABEL_253:
          *(double *)a3 = v212;
          return;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v108 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v108, *a3);
          *a3 = (uint64_t)v108;
          *v108 = 1;
          do
          {
            v109 = __ldaxr((unint64_t *)v12);
            v15 = --v109 == 0;
          }
          while (__stlxr(v109, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v252 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v253 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v253, *a3);
            *a3 = (uint64_t)v253;
            *v253 = 1;
            do
            {
              v254 = __ldaxr(v252);
              v255 = v254 - 1;
            }
            while (__stlxr(v255, v252));
            if (!v255)
            {
              v256 = (void *)v252[1];
              if (v256)
              {
                v252[2] = (unint64_t)v256;
                operator delete(v256);
              }
              MEMORY[0x219A19A08](v252, 0x1080C409938AC02);
            }
          }
          v257 = *(double **)(*a3 + 8);
          v258 = *(_QWORD *)(*a3 + 16) - (_QWORD)v257;
          if (v258)
          {
            v259 = *(double *)a2;
            v260 = v258 >> 3;
            if (v260 <= 1)
              v260 = 1;
            do
            {
              *v257 = v259 * *v257;
              ++v257;
              --v260;
            }
            while (v260);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v285, *a3);
          *a3 = (uint64_t)v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v100);
            v189 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v215 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v215, *a3);
          *a3 = (uint64_t)v215;
          *v215 = 1;
          do
          {
            v216 = __ldaxr((unint64_t *)v100);
            v103 = --v216 == 0;
          }
          while (__stlxr(v216, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v295 = operator new();
          v296 = *a3;
          *(_QWORD *)v295 = *(_QWORD *)*a3;
          *(_QWORD *)(v295 + 8) = *(_QWORD *)(v296 + 8);
          v297 = *(_QWORD *)(v296 + 16);
          *(_QWORD *)(v295 + 16) = v297;
          if (v297)
          {
            v298 = (unsigned int *)(v297 + 8);
            do
              v299 = __ldxr(v298);
            while (__stxr(v299 + 1, v298));
          }
          v300 = *(_OWORD *)(v296 + 24);
          v301 = *(_OWORD *)(v296 + 40);
          *(_OWORD *)(v295 + 56) = *(_OWORD *)(v296 + 56);
          *(_OWORD *)(v295 + 40) = v301;
          *(_OWORD *)(v295 + 24) = v300;
          *a3 = v295;
          *(_QWORD *)v295 = 1;
          do
          {
            v302 = __ldaxr((unint64_t *)v190);
            v199 = --v302 == 0;
          }
          while (__stlxr(v302, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v155 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v156 = (_QWORD *)operator new();
            v157 = *a3 + 8;
            *v156 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v156 + 1, v157);
            *a3 = (uint64_t)v156;
            *v156 = 1;
            do
            {
              v158 = __ldaxr(v155);
              v159 = v158 - 1;
            }
            while (__stlxr(v159, v155));
            if (!v159)
            {
              v160 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v155);
              MEMORY[0x219A19A08](v160, 0x1030C407B73B9F7);
            }
          }
          v161 = (uint64_t *)*a3;
          v163 = *(uint64_t **)(*a3 + 24);
          v162 = *(uint64_t **)(*a3 + 32);
          if (v162 == v163)
            return;
          if (!v161[1])
            return;
          v164 = *(double *)a2;
          v165 = 1;
          do
          {
            v166 = *v163++;
            v165 *= v166;
          }
          while (v163 != v162);
          if (!v165)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
          v167 = (v161[4] - v161[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v167, &v333);
          v71 = v334;
          v168 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v169 = 0;
        v170 = (char *)v168 - (char *)v71;
        if (v170)
        {
          v171 = v170 >> 3;
          v172 = (uint64_t *)v161[6];
          if (v171 <= 1)
            v171 = 1;
          do
          {
            v174 = (uint64_t)*v71++;
            v173 = v174;
            v175 = *v172++;
            v169 += v175 * v173;
            --v171;
          }
          while (v171);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
        *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169)) = v164
                                                               * *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169));
        v71 = v334;
        v168 = v335;
        v176 = v335 - v334;
        v177 = v176 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_212;
        v178 = v161[3];
        v179 = (char *)v334[v177] + 1;
        v334[v177] = v179;
        if ((unint64_t)v179 < *(_QWORD *)(v178 + 8 * v177))
        {
LABEL_211:
          v176 = 1;
LABEL_212:
          if (v177 < 0 || !v176)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v180 = (unint64_t *)&v71[v176 - 2];
      v181 = v178 - 16;
      while (1)
      {
        v182 = v176 - 1;
        v180[1] = 0;
        if (v176 - 1 <= 0)
          goto LABEL_215;
        v183 = *v180 + 1;
        *v180-- = v183;
        v184 = *(_QWORD *)(v181 + 8 * v176--);
        if (v183 < v184)
        {
          v177 = v182 - 1;
          goto LABEL_211;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v18 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, *a3);
          *a3 = (uint64_t)v18;
          *v18 = 1;
          do
          {
            v19 = __ldaxr((unint64_t *)v12);
            v15 = --v19 == 0;
          }
          while (__stlxr(v19, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v36 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v36, *a3);
          *a3 = (uint64_t)v36;
          *v36 = 1;
          do
          {
            v37 = __ldaxr(v30);
            v33 = --v37 == 0;
          }
          while (__stlxr(v37, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v229, *a3);
          *a3 = (uint64_t)v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr((unint64_t *)v100);
            v189 = --v230 == 0;
          }
          while (__stlxr(v230, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v185 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v185, *a3);
          *a3 = (uint64_t)v185;
          *v185 = 1;
          do
          {
            v186 = __ldaxr((unint64_t *)v100);
            v103 = --v186 == 0;
          }
          while (__stlxr(v186, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v231 = operator new();
          v232 = *a3;
          *(_QWORD *)v231 = *(_QWORD *)*a3;
          *(_QWORD *)(v231 + 8) = *(_QWORD *)(v232 + 8);
          v233 = *(_QWORD *)(v232 + 16);
          *(_QWORD *)(v231 + 16) = v233;
          if (v233)
          {
            v234 = (unsigned int *)(v233 + 8);
            do
              v235 = __ldxr(v234);
            while (__stxr(v235 + 1, v234));
          }
          v236 = *(_OWORD *)(v232 + 24);
          v237 = *(_OWORD *)(v232 + 40);
          *(_OWORD *)(v231 + 56) = *(_OWORD *)(v232 + 56);
          *(_OWORD *)(v231 + 40) = v237;
          *(_OWORD *)(v231 + 24) = v236;
          *a3 = v231;
          *(_QWORD *)v231 = 1;
          do
          {
            v238 = __ldaxr((unint64_t *)v190);
            v199 = --v238 == 0;
          }
          while (__stlxr(v238, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v97 = (_QWORD *)operator new();
          v98 = *a3 + 8;
          *v97 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, v98);
          *a3 = (uint64_t)v97;
          *v97 = 1;
          do
          {
            v99 = __ldaxr(v38);
            v42 = --v99 == 0;
          }
          while (__stlxr(v99, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v20 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, *a3);
          *a3 = (uint64_t)v20;
          *v20 = 1;
          do
          {
            v21 = __ldaxr((unint64_t *)v12);
            v15 = --v21 == 0;
          }
          while (__stlxr(v21, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v43 = *(double *)a2;
          v44 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v45 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v45, *a3);
            *a3 = (uint64_t)v45;
            *v45 = 1;
            do
            {
              v46 = __ldaxr(v44);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v44));
            if (!v47)
            {
              v48 = (void *)v44[1];
              if (v48)
              {
                v44[2] = (unint64_t)v48;
                operator delete(v48);
              }
              MEMORY[0x219A19A08](v44, 0x1080C409938AC02);
            }
          }
          v49 = *a3;
          turi::flexible_type_fail(*(_QWORD *)(*a3 + 16) - *(_QWORD *)(*a3 + 8) == *(_QWORD *)(*(_QWORD *)&v43 + 16)
                                                                                 - *(_QWORD *)(*(_QWORD *)&v43 + 8));
          v50 = *(double **)(v49 + 8);
          v51 = *(_QWORD *)(v49 + 16) - (_QWORD)v50;
          if (v51)
          {
            v52 = v51 >> 3;
            v53 = *(double **)(*(_QWORD *)&v43 + 8);
            if (v52 <= 1)
              v52 = 1;
            do
            {
              v54 = *v53++;
              *v50 = v54 * *v50;
              ++v50;
              --v52;
            }
            while (v52);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v241 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v241, *a3);
          *a3 = (uint64_t)v241;
          *v241 = 1;
          do
          {
            v242 = __ldaxr((unint64_t *)v100);
            v189 = --v242 == 0;
          }
          while (__stlxr(v242, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v203 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v203, *a3);
          *a3 = (uint64_t)v203;
          *v203 = 1;
          do
          {
            v204 = __ldaxr((unint64_t *)v100);
            v103 = --v204 == 0;
          }
          while (__stlxr(v204, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v265 = operator new();
          v266 = *a3;
          *(_QWORD *)v265 = *(_QWORD *)*a3;
          *(_QWORD *)(v265 + 8) = *(_QWORD *)(v266 + 8);
          v267 = *(_QWORD *)(v266 + 16);
          *(_QWORD *)(v265 + 16) = v267;
          if (v267)
          {
            v268 = (unsigned int *)(v267 + 8);
            do
              v269 = __ldxr(v268);
            while (__stxr(v269 + 1, v268));
          }
          v270 = *(_OWORD *)(v266 + 24);
          v271 = *(_OWORD *)(v266 + 40);
          *(_OWORD *)(v265 + 56) = *(_OWORD *)(v266 + 56);
          *(_OWORD *)(v265 + 40) = v271;
          *(_OWORD *)(v265 + 24) = v270;
          *a3 = v265;
          *(_QWORD *)v265 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v190);
            v199 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v114 = (_QWORD *)operator new();
          v115 = *a3 + 8;
          *v114 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v114 + 1, v115);
          *a3 = (uint64_t)v114;
          *v114 = 1;
          do
          {
            v116 = __ldaxr(v38);
            v42 = --v116 == 0;
          }
          while (__stlxr(v116, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, *a3);
          *a3 = (uint64_t)v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v31 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v31, *a3);
          *a3 = (uint64_t)v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(v30);
            v33 = --v32 == 0;
          }
          while (__stlxr(v32, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v187 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v187, *a3);
          *a3 = (uint64_t)v187;
          *v187 = 1;
          do
          {
            v188 = __ldaxr((unint64_t *)v100);
            v189 = --v188 == 0;
          }
          while (__stlxr(v188, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v101 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v101, *a3);
          *a3 = (uint64_t)v101;
          *v101 = 1;
          do
          {
            v102 = __ldaxr((unint64_t *)v100);
            v103 = --v102 == 0;
          }
          while (__stlxr(v102, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v191 = operator new();
          v192 = *a3;
          *(_QWORD *)v191 = *(_QWORD *)*a3;
          *(_QWORD *)(v191 + 8) = *(_QWORD *)(v192 + 8);
          v193 = *(_QWORD *)(v192 + 16);
          *(_QWORD *)(v191 + 16) = v193;
          if (v193)
          {
            v194 = (unsigned int *)(v193 + 8);
            do
              v195 = __ldxr(v194);
            while (__stxr(v195 + 1, v194));
          }
          v196 = *(_OWORD *)(v192 + 24);
          v197 = *(_OWORD *)(v192 + 40);
          *(_OWORD *)(v191 + 56) = *(_OWORD *)(v192 + 56);
          *(_OWORD *)(v191 + 40) = v197;
          *(_OWORD *)(v191 + 24) = v196;
          *a3 = v191;
          *(_QWORD *)v191 = 1;
          do
          {
            v198 = __ldaxr((unint64_t *)v190);
            v199 = --v198 == 0;
          }
          while (__stlxr(v198, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v39 = (_QWORD *)operator new();
          v40 = *a3 + 8;
          *v39 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
          *a3 = (uint64_t)v39;
          *v39 = 1;
          do
          {
            v41 = __ldaxr(v38);
            v42 = --v41 == 0;
          }
          while (__stlxr(v41, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v24 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, *a3);
          *a3 = (uint64_t)v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr((unint64_t *)v12);
            v15 = --v25 == 0;
          }
          while (__stlxr(v25, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v104 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v104, *a3);
          *a3 = (uint64_t)v104;
          *v104 = 1;
          do
          {
            v105 = __ldaxr(v30);
            v33 = --v105 == 0;
          }
          while (__stlxr(v105, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v303 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v303, *a3);
          *a3 = (uint64_t)v303;
          *v303 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v100);
            v189 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v239 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v239, *a3);
          *a3 = (uint64_t)v239;
          *v239 = 1;
          do
          {
            v240 = __ldaxr((unint64_t *)v100);
            v103 = --v240 == 0;
          }
          while (__stlxr(v240, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v305 = operator new();
          v306 = *a3;
          *(_QWORD *)v305 = *(_QWORD *)*a3;
          *(_QWORD *)(v305 + 8) = *(_QWORD *)(v306 + 8);
          v307 = *(_QWORD *)(v306 + 16);
          *(_QWORD *)(v305 + 16) = v307;
          if (v307)
          {
            v308 = (unsigned int *)(v307 + 8);
            do
              v309 = __ldxr(v308);
            while (__stxr(v309 + 1, v308));
          }
          v310 = *(_OWORD *)(v306 + 24);
          v311 = *(_OWORD *)(v306 + 40);
          *(_OWORD *)(v305 + 56) = *(_OWORD *)(v306 + 56);
          *(_OWORD *)(v305 + 40) = v311;
          *(_OWORD *)(v305 + 24) = v310;
          *a3 = v305;
          *(_QWORD *)v305 = 1;
          do
          {
            v312 = __ldaxr((unint64_t *)v190);
            v199 = --v312 == 0;
          }
          while (__stlxr(v312, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v200 = (_QWORD *)operator new();
          v201 = *a3 + 8;
          *v200 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v200 + 1, v201);
          *a3 = (uint64_t)v200;
          *v200 = 1;
          do
          {
            v202 = __ldaxr(v38);
            v42 = --v202 == 0;
          }
          while (__stlxr(v202, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, *a3);
          *a3 = (uint64_t)v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr((unint64_t *)v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v112 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v112, *a3);
          *a3 = (uint64_t)v112;
          *v112 = 1;
          do
          {
            v113 = __ldaxr(v30);
            v33 = --v113 == 0;
          }
          while (__stlxr(v113, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v313 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v313, *a3);
          *a3 = (uint64_t)v313;
          *v313 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v100);
            v189 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, *a3);
          *a3 = (uint64_t)v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v100);
            v103 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v315 = operator new();
          v316 = *a3;
          *(_QWORD *)v315 = *(_QWORD *)*a3;
          *(_QWORD *)(v315 + 8) = *(_QWORD *)(v316 + 8);
          v317 = *(_QWORD *)(v316 + 16);
          *(_QWORD *)(v315 + 16) = v317;
          if (v317)
          {
            v318 = (unsigned int *)(v317 + 8);
            do
              v319 = __ldxr(v318);
            while (__stxr(v319 + 1, v318));
          }
          v320 = *(_OWORD *)(v316 + 24);
          v321 = *(_OWORD *)(v316 + 40);
          *(_OWORD *)(v315 + 56) = *(_OWORD *)(v316 + 56);
          *(_OWORD *)(v315 + 40) = v321;
          *(_OWORD *)(v315 + 24) = v320;
          *a3 = v315;
          *(_QWORD *)v315 = 1;
          do
          {
            v322 = __ldaxr((unint64_t *)v190);
            v199 = --v322 == 0;
          }
          while (__stlxr(v322, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v209 = (_QWORD *)operator new();
          v210 = *a3 + 8;
          *v209 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v209 + 1, v210);
          *a3 = (uint64_t)v209;
          *v209 = 1;
          do
          {
            v211 = __ldaxr(v38);
            v42 = --v211 == 0;
          }
          while (__stlxr(v211, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v22 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, *a3);
          *a3 = (uint64_t)v22;
          *v22 = 1;
          do
          {
            v23 = __ldaxr((unint64_t *)v12);
            v15 = --v23 == 0;
          }
          while (__stlxr(v23, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *a3);
          *a3 = (uint64_t)v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v30);
            v33 = --v56 == 0;
          }
          while (__stlxr(v56, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v261 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v261, *a3);
          *a3 = (uint64_t)v261;
          *v261 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v100);
            v189 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v205 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v205, *a3);
          *a3 = (uint64_t)v205;
          *v205 = 1;
          do
          {
            v206 = __ldaxr((unint64_t *)v100);
            v103 = --v206 == 0;
          }
          while (__stlxr(v206, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v273 = operator new();
          v274 = *a3;
          *(_QWORD *)v273 = *(_QWORD *)*a3;
          *(_QWORD *)(v273 + 8) = *(_QWORD *)(v274 + 8);
          v275 = *(_QWORD *)(v274 + 16);
          *(_QWORD *)(v273 + 16) = v275;
          if (v275)
          {
            v276 = (unsigned int *)(v275 + 8);
            do
              v277 = __ldxr(v276);
            while (__stxr(v277 + 1, v276));
          }
          v278 = *(_OWORD *)(v274 + 24);
          v279 = *(_OWORD *)(v274 + 40);
          *(_OWORD *)(v273 + 56) = *(_OWORD *)(v274 + 56);
          *(_OWORD *)(v273 + 40) = v279;
          *(_OWORD *)(v273 + 24) = v278;
          *a3 = v273;
          *(_QWORD *)v273 = 1;
          do
          {
            v280 = __ldaxr((unint64_t *)v190);
            v199 = --v280 == 0;
          }
          while (__stlxr(v280, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v122 = (_QWORD *)operator new();
          v123 = *a3 + 8;
          *v122 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v122 + 1, v123);
          *a3 = (uint64_t)v122;
          *v122 = 1;
          do
          {
            v124 = __ldaxr(v38);
            v42 = --v124 == 0;
          }
          while (__stlxr(v124, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, *a3);
          *a3 = (uint64_t)v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr((unint64_t *)v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v117 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v117, *a3);
          *a3 = (uint64_t)v117;
          *v117 = 1;
          do
          {
            v118 = __ldaxr(v30);
            v33 = --v118 == 0;
          }
          while (__stlxr(v118, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v323 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, *a3);
          *a3 = (uint64_t)v323;
          *v323 = 1;
          do
          {
            v324 = __ldaxr((unint64_t *)v100);
            v189 = --v324 == 0;
          }
          while (__stlxr(v324, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v281 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v281, *a3);
          *a3 = (uint64_t)v281;
          *v281 = 1;
          do
          {
            v282 = __ldaxr((unint64_t *)v100);
            v103 = --v282 == 0;
          }
          while (__stlxr(v282, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v325 = operator new();
          v326 = *a3;
          *(_QWORD *)v325 = *(_QWORD *)*a3;
          *(_QWORD *)(v325 + 8) = *(_QWORD *)(v326 + 8);
          v327 = *(_QWORD *)(v326 + 16);
          *(_QWORD *)(v325 + 16) = v327;
          if (v327)
          {
            v328 = (unsigned int *)(v327 + 8);
            do
              v329 = __ldxr(v328);
            while (__stxr(v329 + 1, v328));
          }
          v330 = *(_OWORD *)(v326 + 24);
          v331 = *(_OWORD *)(v326 + 40);
          *(_OWORD *)(v325 + 56) = *(_OWORD *)(v326 + 56);
          *(_OWORD *)(v325 + 40) = v331;
          *(_OWORD *)(v325 + 24) = v330;
          *a3 = v325;
          *(_QWORD *)v325 = 1;
          do
          {
            v332 = __ldaxr((unint64_t *)v190);
            v199 = --v332 == 0;
          }
          while (__stlxr(v332, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v225 = (_QWORD *)operator new();
          v226 = *a3 + 8;
          *v225 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v225 + 1, v226);
          *a3 = (uint64_t)v225;
          *v225 = 1;
          do
          {
            v227 = __ldaxr(v38);
            v42 = --v227 == 0;
          }
          while (__stlxr(v227, v38));
LABEL_272:
          if (!v42)
            goto LABEL_408;
          v110 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38);
          v228 = 2071181815;
          goto LABEL_406;
        default:
          goto LABEL_411;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, *a3);
          *a3 = (uint64_t)v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr((unint64_t *)v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, (unint64_t *)v12));
LABEL_136:
          if (!v15)
            goto LABEL_408;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v110 = (_QWORD *)v12;
          v111 = 0x1012C404EF22A49;
          goto LABEL_407;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v34, *a3);
          *a3 = (uint64_t)v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr(v30);
            v33 = --v35 == 0;
          }
          while (__stlxr(v35, v30));
LABEL_152:
          if (!v33)
            goto LABEL_408;
          v119 = (void *)v30[1];
          if (v119)
          {
            v30[2] = (unint64_t)v119;
            operator delete(v119);
          }
          v110 = v30;
          v111 = 0x1080C409938AC02;
          goto LABEL_407;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v207 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v207, *a3);
          *a3 = (uint64_t)v207;
          *v207 = 1;
          do
          {
            v208 = __ldaxr((unint64_t *)v100);
            v189 = --v208 == 0;
          }
          while (__stlxr(v208, (unint64_t *)v100));
LABEL_393:
          if (!v189)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v334);
          goto LABEL_396;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v120 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v120, *a3);
          *a3 = (uint64_t)v120;
          *v120 = 1;
          do
          {
            v121 = __ldaxr((unint64_t *)v100);
            v103 = --v121 == 0;
          }
          while (__stlxr(v121, (unint64_t *)v100));
LABEL_343:
          if (!v103)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v334);
LABEL_396:
          v110 = (_QWORD *)v100;
          v111 = 0x1020C405E66F15BLL;
          goto LABEL_407;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v217 = operator new();
          v218 = *a3;
          *(_QWORD *)v217 = *(_QWORD *)*a3;
          *(_QWORD *)(v217 + 8) = *(_QWORD *)(v218 + 8);
          v219 = *(_QWORD *)(v218 + 16);
          *(_QWORD *)(v217 + 16) = v219;
          if (v219)
          {
            v220 = (unsigned int *)(v219 + 8);
            do
              v221 = __ldxr(v220);
            while (__stxr(v221 + 1, v220));
          }
          v222 = *(_OWORD *)(v218 + 24);
          v223 = *(_OWORD *)(v218 + 40);
          *(_OWORD *)(v217 + 56) = *(_OWORD *)(v218 + 56);
          *(_OWORD *)(v217 + 40) = v223;
          *(_OWORD *)(v217 + 24) = v222;
          *a3 = v217;
          *(_QWORD *)v217 = 1;
          do
          {
            v224 = __ldaxr((unint64_t *)v190);
            v199 = --v224 == 0;
          }
          while (__stlxr(v224, (unint64_t *)v190));
LABEL_403:
          if (!v199)
            goto LABEL_408;
          boost::detail::shared_count::~shared_count((unsigned int **)(v190 + 16));
          v110 = (_QWORD *)v190;
          v228 = -235920773;
LABEL_406:
          v111 = v228 | 0x1030C4000000000;
LABEL_407:
          MEMORY[0x219A19A08](v110, v111);
LABEL_408:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v57 = *(double *)a2;
          v58 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v59 = (_QWORD *)operator new();
            v60 = *a3 + 8;
            *v59 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
            *a3 = (uint64_t)v59;
            *v59 = 1;
            do
            {
              v61 = __ldaxr(v58);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v58));
            if (!v62)
            {
              v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v58);
              MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
            }
          }
          v64 = *a3;
          v65 = (uint64_t *)(*a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v65, *(_QWORD *)&v57 + 8))
            turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v67 = *(uint64_t **)(v64 + 24);
          v66 = *(uint64_t **)(v64 + 32);
          if (v66 == v67)
            return;
          if (!*v65)
            return;
          v68 = 1;
          do
          {
            v69 = *v67++;
            v68 *= v69;
          }
          while (v67 != v66);
          if (!v68)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
          v70 = (uint64_t)(*(_QWORD *)(v64 + 32) - *(_QWORD *)(v64 + 24)) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v70, &v333);
          v71 = v334;
          v72 = v335;
          break;
        default:
          goto LABEL_411;
      }
      break;
    default:
LABEL_411:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v73 = (char *)v72 - (char *)v71;
    if (v73)
    {
      v74 = 0;
      v75 = v73 >> 3;
      v76 = *(uint64_t **)(*(_QWORD *)&v57 + 48);
      if (v75 <= 1)
        v75 = 1;
      v77 = v71;
      v78 = v75;
      do
      {
        v80 = (uint64_t)*v77++;
        v79 = v80;
        v81 = *v76++;
        v74 += v81 * v79;
        --v78;
      }
      while (v78);
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v57 + 72) + v74));
      v84 = *(uint64_t **)(v64 + 48);
      do
      {
        v86 = (uint64_t)*v71++;
        v85 = v86;
        v87 = *v84++;
        v82 += v87 * v85;
        --v75;
      }
      while (v75);
    }
    else
    {
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v57 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
    *(double *)(**(_QWORD **)(v64 + 8) + 8 * (*(_QWORD *)(v64 + 72) + v82)) = v83
                                                                            * *(double *)(**(_QWORD **)(v64 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v64 + 72) + v82));
    v71 = v334;
    v72 = v335;
    v88 = v335 - v334;
    v89 = v88 - 1;
    if ((char *)v335 - (char *)v334 < 1)
      goto LABEL_114;
    v90 = *(_QWORD *)(v64 + 24);
    v91 = (char *)v334[v89] + 1;
    v334[v89] = v91;
    if ((unint64_t)v91 >= *(_QWORD *)(v90 + 8 * v89))
      break;
LABEL_113:
    v88 = 1;
LABEL_114:
    if (v89 < 0 || !v88)
      goto LABEL_214;
  }
  v92 = (unint64_t *)&v71[v88 - 2];
  v93 = v90 - 16;
  while (1)
  {
    v94 = v88 - 1;
    v92[1] = 0;
    if (v88 - 1 <= 0)
      break;
    v95 = *v92 + 1;
    *v92-- = v95;
    v96 = *(_QWORD *)(v93 + 8 * v88--);
    if (v95 < v96)
    {
      v89 = v94 - 1;
      goto LABEL_113;
    }
  }
LABEL_214:
  if (v71)
  {
LABEL_215:
    v335 = v71;
    operator delete(v71);
  }
}

void sub_21825F218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934198;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934198;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, _BYTE *a2@<X2>, uint64_t *a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_19::operator()(unsigned __int8 *a1@<X0>, _BYTE *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  BOOL v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  uint64_t v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  double *v74;
  uint64_t v75;
  unint64_t v76;
  double *v77;
  double v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void **v95;
  void **v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  void **v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  BOOL v127;
  _QWORD *v128;
  unint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  void *v143;
  _QWORD *v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t *v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t *v157;
  double v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void **v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  unint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t *v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t *v187;
  double v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void **v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  unint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  _QWORD *v209;
  unint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  BOOL v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int *v218;
  unsigned int v219;
  __int128 v220;
  __int128 v221;
  unint64_t v222;
  BOOL v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  _QWORD *v231;
  unint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  unint64_t v235;
  double v236;
  _QWORD *v237;
  unint64_t v238;
  _QWORD *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  __int128 v246;
  __int128 v247;
  unint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  unint64_t v251;
  unsigned int v252;
  _QWORD *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  __int128 v260;
  __int128 v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  unint64_t *v267;
  _QWORD *v268;
  unint64_t v269;
  unint64_t v270;
  void *v271;
  double *v272;
  uint64_t v273;
  unint64_t v274;
  double v275;
  unint64_t *v276;
  _QWORD *v277;
  unint64_t v278;
  unint64_t v279;
  void *v280;
  double *v281;
  uint64_t v282;
  double v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  _QWORD *v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int *v292;
  unsigned int v293;
  __int128 v294;
  __int128 v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int *v300;
  unsigned int v301;
  __int128 v302;
  __int128 v303;
  unint64_t v304;
  _QWORD *v305;
  unint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  _QWORD *v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unsigned int *v314;
  unsigned int v315;
  __int128 v316;
  __int128 v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int *v322;
  unsigned int v323;
  __int128 v324;
  __int128 v325;
  unint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  __int128 v334;
  __int128 v335;
  unint64_t v336;
  _QWORD *v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int *v342;
  unsigned int v343;
  __int128 v344;
  __int128 v345;
  unint64_t v346;
  _QWORD *v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int *v352;
  unsigned int v353;
  __int128 v354;
  __int128 v355;
  unint64_t v356;
  uint64_t v357;
  void **v358;
  void **v359;

  v5 = a1[12];
  v6 = 1;
  switch(a1[12])
  {
    case 3u:
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v8 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v9 = 3;
      goto LABEL_5;
    case 4u:
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v8 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v9 = 4;
      goto LABEL_5;
    case 5u:
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8);
      v8 = (_QWORD *)(*(_QWORD *)a1 + 16);
      v9 = 5;
LABEL_5:
      v6 = (uint64_t)(*v8 - *v7) >> v9;
      break;
    case 9u:
      v21 = *(uint64_t **)(*(_QWORD *)a1 + 24);
      v20 = *(uint64_t **)(*(_QWORD *)a1 + 32);
      if (v20 == v21)
      {
        v6 = 0;
      }
      else
      {
        v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
        if (v6)
        {
          v6 = 1;
          do
          {
            v22 = *v21++;
            v6 *= v22;
          }
          while (v21 != v20);
        }
      }
      break;
    default:
      break;
  }
  v10 = 1;
  switch(a2[12])
  {
    case 3:
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v12 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v13 = 3;
      goto LABEL_10;
    case 4:
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v12 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v13 = 4;
      goto LABEL_10;
    case 5:
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v12 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v13 = 5;
LABEL_10:
      v10 = (uint64_t)(*v12 - *v11) >> v13;
      break;
    case 9:
      v24 = *(uint64_t **)(*(_QWORD *)a2 + 24);
      v23 = *(uint64_t **)(*(_QWORD *)a2 + 32);
      if (v23 == v24)
      {
        v10 = 0;
      }
      else
      {
        v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
        if (v10)
        {
          v10 = 1;
          do
          {
            v25 = *v24++;
            v10 *= v25;
          }
          while (v24 != v23);
        }
      }
      break;
    default:
      break;
  }
  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if (v6 != v10)
  {
    if (a3 != &turi::FLEX_UNDEFINED)
    {
      *(uint64_t *)((char *)a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *a3 = turi::FLEX_UNDEFINED;
      v17 = byte_254FF28D4;
      *((_BYTE *)a3 + 12) = byte_254FF28D4;
      switch(v17)
      {
        case 2:
          v18 = (unint64_t *)*a3;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
          break;
        case 3:
          v30 = (unint64_t *)*a3;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
          break;
        case 4:
          v26 = (unint64_t *)*a3;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 + 1, v26));
          break;
        case 5:
          v32 = (unint64_t *)*a3;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 + 1, v32));
          break;
        case 8:
          v34 = (unint64_t *)*a3;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 + 1, v34));
          break;
        case 9:
          v28 = (unint64_t *)*a3;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
          break;
        default:
          return;
      }
    }
    return;
  }
  if (a1 != (unsigned __int8 *)a3)
  {
    *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a1 + 5);
    *a3 = *(_QWORD *)a1;
    *((_BYTE *)a3 + 12) = v5;
    if (v5 <= 9 && ((1 << v5) & 0x33C) != 0)
    {
      v14 = (unint64_t *)*a3;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
  switch(a2[12])
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v16 = *a3 / *(_QWORD *)a2;
          goto LABEL_79;
        case 1:
          v236 = (double)*(uint64_t *)a2;
          goto LABEL_294;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v130 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v130, *a3);
          *a3 = (uint64_t)v130;
          *v130 = 1;
          do
          {
            v131 = __ldaxr((unint64_t *)v36);
            v39 = --v131 == 0;
          }
          while (__stlxr(v131, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v267 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v268 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v268, *a3);
            *a3 = (uint64_t)v268;
            *v268 = 1;
            do
            {
              v269 = __ldaxr(v267);
              v270 = v269 - 1;
            }
            while (__stlxr(v270, v267));
            if (!v270)
            {
              v271 = (void *)v267[1];
              if (v271)
              {
                v267[2] = (unint64_t)v271;
                operator delete(v271);
              }
              MEMORY[0x219A19A08](v267, 0x1080C409938AC02);
            }
          }
          v272 = *(double **)(*a3 + 8);
          v273 = *(_QWORD *)(*a3 + 16) - (_QWORD)v272;
          if (v273)
          {
            v274 = v273 >> 3;
            v275 = (double)*(uint64_t *)a2;
            if (v274 <= 1)
              v274 = 1;
            do
            {
              *v272 = *v272 / v275;
              ++v272;
              --v274;
            }
            while (v274);
          }
          return;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v307 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v307, *a3);
          *a3 = (uint64_t)v307;
          *v307 = 1;
          do
          {
            v308 = __ldaxr((unint64_t *)v124);
            v213 = --v308 == 0;
          }
          while (__stlxr(v308, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v237 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v237, *a3);
          *a3 = (uint64_t)v237;
          *v237 = 1;
          do
          {
            v238 = __ldaxr((unint64_t *)v124);
            v127 = --v238 == 0;
          }
          while (__stlxr(v238, (unint64_t *)v124));
          goto LABEL_384;
        case 6:
        case 7:
          goto LABEL_449;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v311 = operator new();
          v312 = *a3;
          *(_QWORD *)v311 = *(_QWORD *)*a3;
          *(_QWORD *)(v311 + 8) = *(_QWORD *)(v312 + 8);
          v313 = *(_QWORD *)(v312 + 16);
          *(_QWORD *)(v311 + 16) = v313;
          if (v313)
          {
            v314 = (unsigned int *)(v313 + 8);
            do
              v315 = __ldxr(v314);
            while (__stxr(v315 + 1, v314));
          }
          v316 = *(_OWORD *)(v312 + 24);
          v317 = *(_OWORD *)(v312 + 40);
          *(_OWORD *)(v311 + 56) = *(_OWORD *)(v312 + 56);
          *(_OWORD *)(v311 + 40) = v317;
          *(_OWORD *)(v311 + 24) = v316;
          *a3 = v311;
          *(_QWORD *)v311 = 1;
          do
          {
            v318 = __ldaxr((unint64_t *)v214);
            v223 = --v318 == 0;
          }
          while (__stlxr(v318, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v149 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v150 = (_QWORD *)operator new();
            v151 = *a3 + 8;
            *v150 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v150 + 1, v151);
            *a3 = (uint64_t)v150;
            *v150 = 1;
            do
            {
              v152 = __ldaxr(v149);
              v153 = v152 - 1;
            }
            while (__stlxr(v153, v149));
            if (!v153)
            {
              v154 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v149);
              MEMORY[0x219A19A08](v154, 0x1030C407B73B9F7);
            }
          }
          v155 = (uint64_t *)*a3;
          v157 = *(uint64_t **)(*a3 + 24);
          v156 = *(uint64_t **)(*a3 + 32);
          if (v156 == v157)
            return;
          if (!v155[1])
            return;
          v158 = (double)*(uint64_t *)a2;
          v159 = 1;
          do
          {
            v160 = *v157++;
            v159 *= v160;
          }
          while (v157 != v156);
          if (!v159)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v155 + 1);
          v161 = (v155[4] - v155[3]) >> 3;
          v357 = 0;
          std::vector<unsigned long>::vector(&v358, v161, &v357);
          v95 = v358;
          v162 = v359;
          break;
        default:
          goto LABEL_452;
      }
      while (2)
      {
        v163 = 0;
        v164 = (char *)v162 - (char *)v95;
        if (v164)
        {
          v165 = v164 >> 3;
          v166 = (uint64_t *)v155[6];
          if (v165 <= 1)
            v165 = 1;
          do
          {
            v168 = (uint64_t)*v95++;
            v167 = v168;
            v169 = *v166++;
            v163 += v169 * v167;
            --v165;
          }
          while (v165);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v155 + 1);
        *(double *)(*(_QWORD *)v155[1] + 8 * (v155[9] + v163)) = *(double *)(*(_QWORD *)v155[1] + 8 * (v155[9] + v163))
                                                               / v158;
        v95 = v358;
        v162 = v359;
        v170 = v359 - v358;
        v171 = v170 - 1;
        if ((char *)v359 - (char *)v358 < 1)
          goto LABEL_228;
        v172 = v155[3];
        v173 = (char *)v358[v171] + 1;
        v358[v171] = v173;
        if ((unint64_t)v173 < *(_QWORD *)(v172 + 8 * v171))
        {
LABEL_227:
          v170 = 1;
LABEL_228:
          if (v171 < 0 || !v170)
            goto LABEL_255;
          continue;
        }
        break;
      }
      v174 = (unint64_t *)&v95[v170 - 2];
      v175 = v172 - 16;
      while (1)
      {
        v176 = v170 - 1;
        v174[1] = 0;
        if (v170 - 1 <= 0)
          goto LABEL_256;
        v177 = *v174 + 1;
        *v174-- = v177;
        v178 = *(_QWORD *)(v175 + 8 * v170--);
        if (v177 < v178)
        {
          v171 = v176 - 1;
          goto LABEL_227;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v16 = (uint64_t)((double)*a3 / *(double *)a2);
LABEL_79:
          *a3 = v16;
          return;
        case 1:
          v236 = *(double *)a2;
LABEL_294:
          *(double *)a3 = *(double *)a3 / v236;
          return;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v132 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v132, *a3);
          *a3 = (uint64_t)v132;
          *v132 = 1;
          do
          {
            v133 = __ldaxr((unint64_t *)v36);
            v39 = --v133 == 0;
          }
          while (__stlxr(v133, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v276 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v277 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v277, *a3);
            *a3 = (uint64_t)v277;
            *v277 = 1;
            do
            {
              v278 = __ldaxr(v276);
              v279 = v278 - 1;
            }
            while (__stlxr(v279, v276));
            if (!v279)
            {
              v280 = (void *)v276[1];
              if (v280)
              {
                v276[2] = (unint64_t)v280;
                operator delete(v280);
              }
              MEMORY[0x219A19A08](v276, 0x1080C409938AC02);
            }
          }
          v281 = *(double **)(*a3 + 8);
          v282 = *(_QWORD *)(*a3 + 16) - (_QWORD)v281;
          if (v282)
          {
            v283 = *(double *)a2;
            v284 = v282 >> 3;
            if (v284 <= 1)
              v284 = 1;
            do
            {
              *v281 = *v281 / v283;
              ++v281;
              --v284;
            }
            while (v284);
          }
          return;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v309 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v309, *a3);
          *a3 = (uint64_t)v309;
          *v309 = 1;
          do
          {
            v310 = __ldaxr((unint64_t *)v124);
            v213 = --v310 == 0;
          }
          while (__stlxr(v310, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v239 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v239, *a3);
          *a3 = (uint64_t)v239;
          *v239 = 1;
          do
          {
            v240 = __ldaxr((unint64_t *)v124);
            v127 = --v240 == 0;
          }
          while (__stlxr(v240, (unint64_t *)v124));
          goto LABEL_384;
        case 6:
        case 7:
          goto LABEL_449;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v319 = operator new();
          v320 = *a3;
          *(_QWORD *)v319 = *(_QWORD *)*a3;
          *(_QWORD *)(v319 + 8) = *(_QWORD *)(v320 + 8);
          v321 = *(_QWORD *)(v320 + 16);
          *(_QWORD *)(v319 + 16) = v321;
          if (v321)
          {
            v322 = (unsigned int *)(v321 + 8);
            do
              v323 = __ldxr(v322);
            while (__stxr(v323 + 1, v322));
          }
          v324 = *(_OWORD *)(v320 + 24);
          v325 = *(_OWORD *)(v320 + 40);
          *(_OWORD *)(v319 + 56) = *(_OWORD *)(v320 + 56);
          *(_OWORD *)(v319 + 40) = v325;
          *(_OWORD *)(v319 + 24) = v324;
          *a3 = v319;
          *(_QWORD *)v319 = 1;
          do
          {
            v326 = __ldaxr((unint64_t *)v214);
            v223 = --v326 == 0;
          }
          while (__stlxr(v326, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v179 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v180 = (_QWORD *)operator new();
            v181 = *a3 + 8;
            *v180 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v180 + 1, v181);
            *a3 = (uint64_t)v180;
            *v180 = 1;
            do
            {
              v182 = __ldaxr(v179);
              v183 = v182 - 1;
            }
            while (__stlxr(v183, v179));
            if (!v183)
            {
              v184 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v179);
              MEMORY[0x219A19A08](v184, 0x1030C407B73B9F7);
            }
          }
          v185 = (uint64_t *)*a3;
          v187 = *(uint64_t **)(*a3 + 24);
          v186 = *(uint64_t **)(*a3 + 32);
          if (v186 == v187)
            return;
          if (!v185[1])
            return;
          v188 = *(double *)a2;
          v189 = 1;
          do
          {
            v190 = *v187++;
            v189 *= v190;
          }
          while (v187 != v186);
          if (!v189)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v185 + 1);
          v191 = (v185[4] - v185[3]) >> 3;
          v357 = 0;
          std::vector<unsigned long>::vector(&v358, v191, &v357);
          v95 = v358;
          v192 = v359;
          break;
        default:
          goto LABEL_452;
      }
      while (2)
      {
        v193 = 0;
        v194 = (char *)v192 - (char *)v95;
        if (v194)
        {
          v195 = v194 >> 3;
          v196 = (uint64_t *)v185[6];
          if (v195 <= 1)
            v195 = 1;
          do
          {
            v198 = (uint64_t)*v95++;
            v197 = v198;
            v199 = *v196++;
            v193 += v199 * v197;
            --v195;
          }
          while (v195);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v185 + 1);
        *(double *)(*(_QWORD *)v185[1] + 8 * (v185[9] + v193)) = *(double *)(*(_QWORD *)v185[1] + 8 * (v185[9] + v193))
                                                               / v188;
        v95 = v358;
        v192 = v359;
        v200 = v359 - v358;
        v201 = v200 - 1;
        if ((char *)v359 - (char *)v358 < 1)
          goto LABEL_253;
        v202 = v185[3];
        v203 = (char *)v358[v201] + 1;
        v358[v201] = v203;
        if ((unint64_t)v203 < *(_QWORD *)(v202 + 8 * v201))
        {
LABEL_252:
          v200 = 1;
LABEL_253:
          if (v201 < 0 || !v200)
            goto LABEL_255;
          continue;
        }
        break;
      }
      v204 = (unint64_t *)&v95[v200 - 2];
      v205 = v202 - 16;
      while (1)
      {
        v206 = v200 - 1;
        v204[1] = 0;
        if (v200 - 1 <= 0)
          goto LABEL_256;
        v207 = *v204 + 1;
        *v204-- = v207;
        v208 = *(_QWORD *)(v205 + 8 * v200--);
        if (v207 < v208)
        {
          v201 = v206 - 1;
          goto LABEL_252;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v42 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v42, *a3);
          *a3 = (uint64_t)v42;
          *v42 = 1;
          do
          {
            v43 = __ldaxr((unint64_t *)v36);
            v39 = --v43 == 0;
          }
          while (__stlxr(v43, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v60 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v60, *a3);
          *a3 = (uint64_t)v60;
          *v60 = 1;
          do
          {
            v61 = __ldaxr(v54);
            v57 = --v61 == 0;
          }
          while (__stlxr(v61, v54));
          goto LABEL_193;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v253 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v253, *a3);
          *a3 = (uint64_t)v253;
          *v253 = 1;
          do
          {
            v254 = __ldaxr((unint64_t *)v124);
            v213 = --v254 == 0;
          }
          while (__stlxr(v254, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v209 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v209, *a3);
          *a3 = (uint64_t)v209;
          *v209 = 1;
          do
          {
            v210 = __ldaxr((unint64_t *)v124);
            v127 = --v210 == 0;
          }
          while (__stlxr(v210, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v255 = operator new();
          v256 = *a3;
          *(_QWORD *)v255 = *(_QWORD *)*a3;
          *(_QWORD *)(v255 + 8) = *(_QWORD *)(v256 + 8);
          v257 = *(_QWORD *)(v256 + 16);
          *(_QWORD *)(v255 + 16) = v257;
          if (v257)
          {
            v258 = (unsigned int *)(v257 + 8);
            do
              v259 = __ldxr(v258);
            while (__stxr(v259 + 1, v258));
          }
          v260 = *(_OWORD *)(v256 + 24);
          v261 = *(_OWORD *)(v256 + 40);
          *(_OWORD *)(v255 + 56) = *(_OWORD *)(v256 + 56);
          *(_OWORD *)(v255 + 40) = v261;
          *(_OWORD *)(v255 + 24) = v260;
          *a3 = v255;
          *(_QWORD *)v255 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v214);
            v223 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v121 = (_QWORD *)operator new();
          v122 = *a3 + 8;
          *v121 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v121 + 1, v122);
          *a3 = (uint64_t)v121;
          *v121 = 1;
          do
          {
            v123 = __ldaxr(v62);
            v66 = --v123 == 0;
          }
          while (__stlxr(v123, v62));
          goto LABEL_313;
        default:
          goto LABEL_452;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v44 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v44, *a3);
          *a3 = (uint64_t)v44;
          *v44 = 1;
          do
          {
            v45 = __ldaxr((unint64_t *)v36);
            v39 = --v45 == 0;
          }
          while (__stlxr(v45, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v67 = *(_QWORD *)a2;
          v68 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v69 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v69, *a3);
            *a3 = (uint64_t)v69;
            *v69 = 1;
            do
            {
              v70 = __ldaxr(v68);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, v68));
            if (!v71)
            {
              v72 = (void *)v68[1];
              if (v72)
              {
                v68[2] = (unint64_t)v72;
                operator delete(v72);
              }
              MEMORY[0x219A19A08](v68, 0x1080C409938AC02);
            }
          }
          v73 = *a3;
          turi::flexible_type_fail(*(_QWORD *)(*a3 + 16) - *(_QWORD *)(*a3 + 8) == *(_QWORD *)(v67 + 16)
                                                                                 - *(_QWORD *)(v67 + 8));
          v74 = *(double **)(v73 + 8);
          v75 = *(_QWORD *)(v73 + 16) - (_QWORD)v74;
          if (v75)
          {
            v76 = v75 >> 3;
            v77 = *(double **)(v67 + 8);
            if (v76 <= 1)
              v76 = 1;
            do
            {
              v78 = *v77++;
              *v74 = *v74 / v78;
              ++v74;
              --v76;
            }
            while (v76);
          }
          return;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v265 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v265, *a3);
          *a3 = (uint64_t)v265;
          *v265 = 1;
          do
          {
            v266 = __ldaxr((unint64_t *)v124);
            v213 = --v266 == 0;
          }
          while (__stlxr(v266, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v227 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v227, *a3);
          *a3 = (uint64_t)v227;
          *v227 = 1;
          do
          {
            v228 = __ldaxr((unint64_t *)v124);
            v127 = --v228 == 0;
          }
          while (__stlxr(v228, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v289 = operator new();
          v290 = *a3;
          *(_QWORD *)v289 = *(_QWORD *)*a3;
          *(_QWORD *)(v289 + 8) = *(_QWORD *)(v290 + 8);
          v291 = *(_QWORD *)(v290 + 16);
          *(_QWORD *)(v289 + 16) = v291;
          if (v291)
          {
            v292 = (unsigned int *)(v291 + 8);
            do
              v293 = __ldxr(v292);
            while (__stxr(v293 + 1, v292));
          }
          v294 = *(_OWORD *)(v290 + 24);
          v295 = *(_OWORD *)(v290 + 40);
          *(_OWORD *)(v289 + 56) = *(_OWORD *)(v290 + 56);
          *(_OWORD *)(v289 + 40) = v295;
          *(_OWORD *)(v289 + 24) = v294;
          *a3 = v289;
          *(_QWORD *)v289 = 1;
          do
          {
            v296 = __ldaxr((unint64_t *)v214);
            v223 = --v296 == 0;
          }
          while (__stlxr(v296, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v138 = (_QWORD *)operator new();
          v139 = *a3 + 8;
          *v138 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v138 + 1, v139);
          *a3 = (uint64_t)v138;
          *v138 = 1;
          do
          {
            v140 = __ldaxr(v62);
            v66 = --v140 == 0;
          }
          while (__stlxr(v140, v62));
          goto LABEL_313;
        default:
          goto LABEL_452;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v37 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v37, *a3);
          *a3 = (uint64_t)v37;
          *v37 = 1;
          do
          {
            v38 = __ldaxr((unint64_t *)v36);
            v39 = --v38 == 0;
          }
          while (__stlxr(v38, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *a3);
          *a3 = (uint64_t)v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v54);
            v57 = --v56 == 0;
          }
          while (__stlxr(v56, v54));
          goto LABEL_193;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v211 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v211, *a3);
          *a3 = (uint64_t)v211;
          *v211 = 1;
          do
          {
            v212 = __ldaxr((unint64_t *)v124);
            v213 = --v212 == 0;
          }
          while (__stlxr(v212, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v125 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v125, *a3);
          *a3 = (uint64_t)v125;
          *v125 = 1;
          do
          {
            v126 = __ldaxr((unint64_t *)v124);
            v127 = --v126 == 0;
          }
          while (__stlxr(v126, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v215 = operator new();
          v216 = *a3;
          *(_QWORD *)v215 = *(_QWORD *)*a3;
          *(_QWORD *)(v215 + 8) = *(_QWORD *)(v216 + 8);
          v217 = *(_QWORD *)(v216 + 16);
          *(_QWORD *)(v215 + 16) = v217;
          if (v217)
          {
            v218 = (unsigned int *)(v217 + 8);
            do
              v219 = __ldxr(v218);
            while (__stxr(v219 + 1, v218));
          }
          v220 = *(_OWORD *)(v216 + 24);
          v221 = *(_OWORD *)(v216 + 40);
          *(_OWORD *)(v215 + 56) = *(_OWORD *)(v216 + 56);
          *(_OWORD *)(v215 + 40) = v221;
          *(_OWORD *)(v215 + 24) = v220;
          *a3 = v215;
          *(_QWORD *)v215 = 1;
          do
          {
            v222 = __ldaxr((unint64_t *)v214);
            v223 = --v222 == 0;
          }
          while (__stlxr(v222, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v63 = (_QWORD *)operator new();
          v64 = *a3 + 8;
          *v63 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v63 + 1, v64);
          *a3 = (uint64_t)v63;
          *v63 = 1;
          do
          {
            v65 = __ldaxr(v62);
            v66 = --v65 == 0;
          }
          while (__stlxr(v65, v62));
          goto LABEL_313;
        default:
          goto LABEL_452;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v48 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v48, *a3);
          *a3 = (uint64_t)v48;
          *v48 = 1;
          do
          {
            v49 = __ldaxr((unint64_t *)v36);
            v39 = --v49 == 0;
          }
          while (__stlxr(v49, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v128 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v128, *a3);
          *a3 = (uint64_t)v128;
          *v128 = 1;
          do
          {
            v129 = __ldaxr(v54);
            v57 = --v129 == 0;
          }
          while (__stlxr(v129, v54));
          goto LABEL_193;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v327 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v327, *a3);
          *a3 = (uint64_t)v327;
          *v327 = 1;
          do
          {
            v328 = __ldaxr((unint64_t *)v124);
            v213 = --v328 == 0;
          }
          while (__stlxr(v328, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, *a3);
          *a3 = (uint64_t)v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v124);
            v127 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v329 = operator new();
          v330 = *a3;
          *(_QWORD *)v329 = *(_QWORD *)*a3;
          *(_QWORD *)(v329 + 8) = *(_QWORD *)(v330 + 8);
          v331 = *(_QWORD *)(v330 + 16);
          *(_QWORD *)(v329 + 16) = v331;
          if (v331)
          {
            v332 = (unsigned int *)(v331 + 8);
            do
              v333 = __ldxr(v332);
            while (__stxr(v333 + 1, v332));
          }
          v334 = *(_OWORD *)(v330 + 24);
          v335 = *(_OWORD *)(v330 + 40);
          *(_OWORD *)(v329 + 56) = *(_OWORD *)(v330 + 56);
          *(_OWORD *)(v329 + 40) = v335;
          *(_OWORD *)(v329 + 24) = v334;
          *a3 = v329;
          *(_QWORD *)v329 = 1;
          do
          {
            v336 = __ldaxr((unint64_t *)v214);
            v223 = --v336 == 0;
          }
          while (__stlxr(v336, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v224 = (_QWORD *)operator new();
          v225 = *a3 + 8;
          *v224 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v224 + 1, v225);
          *a3 = (uint64_t)v224;
          *v224 = 1;
          do
          {
            v226 = __ldaxr(v62);
            v66 = --v226 == 0;
          }
          while (__stlxr(v226, v62));
          goto LABEL_313;
        default:
          goto LABEL_452;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v50 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v50, *a3);
          *a3 = (uint64_t)v50;
          *v50 = 1;
          do
          {
            v51 = __ldaxr((unint64_t *)v36);
            v39 = --v51 == 0;
          }
          while (__stlxr(v51, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v136 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v136, *a3);
          *a3 = (uint64_t)v136;
          *v136 = 1;
          do
          {
            v137 = __ldaxr(v54);
            v57 = --v137 == 0;
          }
          while (__stlxr(v137, v54));
          goto LABEL_193;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v337 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v337, *a3);
          *a3 = (uint64_t)v337;
          *v337 = 1;
          do
          {
            v338 = __ldaxr((unint64_t *)v124);
            v213 = --v338 == 0;
          }
          while (__stlxr(v338, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v287 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v287, *a3);
          *a3 = (uint64_t)v287;
          *v287 = 1;
          do
          {
            v288 = __ldaxr((unint64_t *)v124);
            v127 = --v288 == 0;
          }
          while (__stlxr(v288, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v339 = operator new();
          v340 = *a3;
          *(_QWORD *)v339 = *(_QWORD *)*a3;
          *(_QWORD *)(v339 + 8) = *(_QWORD *)(v340 + 8);
          v341 = *(_QWORD *)(v340 + 16);
          *(_QWORD *)(v339 + 16) = v341;
          if (v341)
          {
            v342 = (unsigned int *)(v341 + 8);
            do
              v343 = __ldxr(v342);
            while (__stxr(v343 + 1, v342));
          }
          v344 = *(_OWORD *)(v340 + 24);
          v345 = *(_OWORD *)(v340 + 40);
          *(_OWORD *)(v339 + 56) = *(_OWORD *)(v340 + 56);
          *(_OWORD *)(v339 + 40) = v345;
          *(_OWORD *)(v339 + 24) = v344;
          *a3 = v339;
          *(_QWORD *)v339 = 1;
          do
          {
            v346 = __ldaxr((unint64_t *)v214);
            v223 = --v346 == 0;
          }
          while (__stlxr(v346, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v233 = (_QWORD *)operator new();
          v234 = *a3 + 8;
          *v233 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v233 + 1, v234);
          *a3 = (uint64_t)v233;
          *v233 = 1;
          do
          {
            v235 = __ldaxr(v62);
            v66 = --v235 == 0;
          }
          while (__stlxr(v235, v62));
          goto LABEL_313;
        default:
          goto LABEL_452;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v46 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v46, *a3);
          *a3 = (uint64_t)v46;
          *v46 = 1;
          do
          {
            v47 = __ldaxr((unint64_t *)v36);
            v39 = --v47 == 0;
          }
          while (__stlxr(v47, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v79 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v79, *a3);
          *a3 = (uint64_t)v79;
          *v79 = 1;
          do
          {
            v80 = __ldaxr(v54);
            v57 = --v80 == 0;
          }
          while (__stlxr(v80, v54));
          goto LABEL_193;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v285, *a3);
          *a3 = (uint64_t)v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v124);
            v213 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v229, *a3);
          *a3 = (uint64_t)v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr((unint64_t *)v124);
            v127 = --v230 == 0;
          }
          while (__stlxr(v230, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v297 = operator new();
          v298 = *a3;
          *(_QWORD *)v297 = *(_QWORD *)*a3;
          *(_QWORD *)(v297 + 8) = *(_QWORD *)(v298 + 8);
          v299 = *(_QWORD *)(v298 + 16);
          *(_QWORD *)(v297 + 16) = v299;
          if (v299)
          {
            v300 = (unsigned int *)(v299 + 8);
            do
              v301 = __ldxr(v300);
            while (__stxr(v301 + 1, v300));
          }
          v302 = *(_OWORD *)(v298 + 24);
          v303 = *(_OWORD *)(v298 + 40);
          *(_OWORD *)(v297 + 56) = *(_OWORD *)(v298 + 56);
          *(_OWORD *)(v297 + 40) = v303;
          *(_OWORD *)(v297 + 24) = v302;
          *a3 = v297;
          *(_QWORD *)v297 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v214);
            v223 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v146 = (_QWORD *)operator new();
          v147 = *a3 + 8;
          *v146 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v146 + 1, v147);
          *a3 = (uint64_t)v146;
          *v146 = 1;
          do
          {
            v148 = __ldaxr(v62);
            v66 = --v148 == 0;
          }
          while (__stlxr(v148, v62));
          goto LABEL_313;
        default:
          goto LABEL_452;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v52 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v52, *a3);
          *a3 = (uint64_t)v52;
          *v52 = 1;
          do
          {
            v53 = __ldaxr((unint64_t *)v36);
            v39 = --v53 == 0;
          }
          while (__stlxr(v53, (unint64_t *)v36));
          goto LABEL_177;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v141 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v141, *a3);
          *a3 = (uint64_t)v141;
          *v141 = 1;
          do
          {
            v142 = __ldaxr(v54);
            v57 = --v142 == 0;
          }
          while (__stlxr(v142, v54));
          goto LABEL_193;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v347 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v347, *a3);
          *a3 = (uint64_t)v347;
          *v347 = 1;
          do
          {
            v348 = __ldaxr((unint64_t *)v124);
            v213 = --v348 == 0;
          }
          while (__stlxr(v348, (unint64_t *)v124));
          goto LABEL_434;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v305 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v305, *a3);
          *a3 = (uint64_t)v305;
          *v305 = 1;
          do
          {
            v306 = __ldaxr((unint64_t *)v124);
            v127 = --v306 == 0;
          }
          while (__stlxr(v306, (unint64_t *)v124));
          goto LABEL_384;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v349 = operator new();
          v350 = *a3;
          *(_QWORD *)v349 = *(_QWORD *)*a3;
          *(_QWORD *)(v349 + 8) = *(_QWORD *)(v350 + 8);
          v351 = *(_QWORD *)(v350 + 16);
          *(_QWORD *)(v349 + 16) = v351;
          if (v351)
          {
            v352 = (unsigned int *)(v351 + 8);
            do
              v353 = __ldxr(v352);
            while (__stxr(v353 + 1, v352));
          }
          v354 = *(_OWORD *)(v350 + 24);
          v355 = *(_OWORD *)(v350 + 40);
          *(_OWORD *)(v349 + 56) = *(_OWORD *)(v350 + 56);
          *(_OWORD *)(v349 + 40) = v355;
          *(_OWORD *)(v349 + 24) = v354;
          *a3 = v349;
          *(_QWORD *)v349 = 1;
          do
          {
            v356 = __ldaxr((unint64_t *)v214);
            v223 = --v356 == 0;
          }
          while (__stlxr(v356, (unint64_t *)v214));
          goto LABEL_444;
        case 9:
          v62 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v249 = (_QWORD *)operator new();
          v250 = *a3 + 8;
          *v249 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v249 + 1, v250);
          *a3 = (uint64_t)v249;
          *v249 = 1;
          do
          {
            v251 = __ldaxr(v62);
            v66 = --v251 == 0;
          }
          while (__stlxr(v251, v62));
LABEL_313:
          if (!v66)
            goto LABEL_449;
          v134 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v62);
          v252 = 2071181815;
          goto LABEL_447;
        default:
          goto LABEL_452;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_449;
        case 2:
          v36 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v40 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v40, *a3);
          *a3 = (uint64_t)v40;
          *v40 = 1;
          do
          {
            v41 = __ldaxr((unint64_t *)v36);
            v39 = --v41 == 0;
          }
          while (__stlxr(v41, (unint64_t *)v36));
LABEL_177:
          if (!v39)
            goto LABEL_449;
          if (*(char *)(v36 + 31) < 0)
            operator delete(*(void **)(v36 + 8));
          v134 = (_QWORD *)v36;
          v135 = 0x1012C404EF22A49;
          goto LABEL_448;
        case 3:
          v54 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v58 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v58, *a3);
          *a3 = (uint64_t)v58;
          *v58 = 1;
          do
          {
            v59 = __ldaxr(v54);
            v57 = --v59 == 0;
          }
          while (__stlxr(v59, v54));
LABEL_193:
          if (!v57)
            goto LABEL_449;
          v143 = (void *)v54[1];
          if (v143)
          {
            v54[2] = (unint64_t)v143;
            operator delete(v143);
          }
          v134 = v54;
          v135 = 0x1080C409938AC02;
          goto LABEL_448;
        case 4:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v231 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v231, *a3);
          *a3 = (uint64_t)v231;
          *v231 = 1;
          do
          {
            v232 = __ldaxr((unint64_t *)v124);
            v213 = --v232 == 0;
          }
          while (__stlxr(v232, (unint64_t *)v124));
LABEL_434:
          if (!v213)
            goto LABEL_449;
          v358 = (void **)(v124 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v358);
          goto LABEL_437;
        case 5:
          v124 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v144 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v144, *a3);
          *a3 = (uint64_t)v144;
          *v144 = 1;
          do
          {
            v145 = __ldaxr((unint64_t *)v124);
            v127 = --v145 == 0;
          }
          while (__stlxr(v145, (unint64_t *)v124));
LABEL_384:
          if (!v127)
            goto LABEL_449;
          v358 = (void **)(v124 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v358);
LABEL_437:
          v134 = (_QWORD *)v124;
          v135 = 0x1020C405E66F15BLL;
          goto LABEL_448;
        case 8:
          v214 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_449;
          v241 = operator new();
          v242 = *a3;
          *(_QWORD *)v241 = *(_QWORD *)*a3;
          *(_QWORD *)(v241 + 8) = *(_QWORD *)(v242 + 8);
          v243 = *(_QWORD *)(v242 + 16);
          *(_QWORD *)(v241 + 16) = v243;
          if (v243)
          {
            v244 = (unsigned int *)(v243 + 8);
            do
              v245 = __ldxr(v244);
            while (__stxr(v245 + 1, v244));
          }
          v246 = *(_OWORD *)(v242 + 24);
          v247 = *(_OWORD *)(v242 + 40);
          *(_OWORD *)(v241 + 56) = *(_OWORD *)(v242 + 56);
          *(_OWORD *)(v241 + 40) = v247;
          *(_OWORD *)(v241 + 24) = v246;
          *a3 = v241;
          *(_QWORD *)v241 = 1;
          do
          {
            v248 = __ldaxr((unint64_t *)v214);
            v223 = --v248 == 0;
          }
          while (__stlxr(v248, (unint64_t *)v214));
LABEL_444:
          if (!v223)
            goto LABEL_449;
          boost::detail::shared_count::~shared_count((unsigned int **)(v214 + 16));
          v134 = (_QWORD *)v214;
          v252 = -235920773;
LABEL_447:
          v135 = v252 | 0x1030C4000000000;
LABEL_448:
          MEMORY[0x219A19A08](v134, v135);
LABEL_449:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v81 = *(_QWORD *)a2;
          v82 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v83 = (_QWORD *)operator new();
            v84 = *a3 + 8;
            *v83 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v83 + 1, v84);
            *a3 = (uint64_t)v83;
            *v83 = 1;
            do
            {
              v85 = __ldaxr(v82);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, v82));
            if (!v86)
            {
              v87 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v82);
              MEMORY[0x219A19A08](v87, 0x1030C407B73B9F7);
            }
          }
          v88 = *a3;
          v89 = (uint64_t *)(*a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v89, v81 + 8))
            turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v91 = *(uint64_t **)(v88 + 24);
          v90 = *(uint64_t **)(v88 + 32);
          if (v90 == v91)
            return;
          if (!*v89)
            return;
          v92 = 1;
          do
          {
            v93 = *v91++;
            v92 *= v93;
          }
          while (v91 != v90);
          if (!v92)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v89);
          v94 = (uint64_t)(*(_QWORD *)(v88 + 32) - *(_QWORD *)(v88 + 24)) >> 3;
          v357 = 0;
          std::vector<unsigned long>::vector(&v358, v94, &v357);
          v95 = v358;
          v96 = v359;
          break;
        default:
          goto LABEL_452;
      }
      break;
    default:
LABEL_452:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v97 = (char *)v96 - (char *)v95;
    if (v97)
    {
      v98 = 0;
      v99 = v97 >> 3;
      v100 = *(uint64_t **)(v81 + 48);
      if (v99 <= 1)
        v99 = 1;
      v101 = v95;
      v102 = v99;
      do
      {
        v104 = (uint64_t)*v101++;
        v103 = v104;
        v105 = *v100++;
        v98 += v105 * v103;
        --v102;
      }
      while (v102);
      v106 = 0;
      v107 = *(double *)(**(_QWORD **)(v81 + 8) + 8 * (*(_QWORD *)(v81 + 72) + v98));
      v108 = *(uint64_t **)(v88 + 48);
      do
      {
        v110 = (uint64_t)*v95++;
        v109 = v110;
        v111 = *v108++;
        v106 += v111 * v109;
        --v99;
      }
      while (v99);
    }
    else
    {
      v106 = 0;
      v107 = *(double *)(**(_QWORD **)(v81 + 8) + 8 * *(_QWORD *)(v81 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v89);
    *(double *)(**(_QWORD **)(v88 + 8) + 8 * (*(_QWORD *)(v88 + 72) + v106)) = *(double *)(**(_QWORD **)(v88 + 8)
                                                                                         + 8
                                                                                         * (*(_QWORD *)(v88 + 72) + v106))
                                                                             / v107;
    v95 = v358;
    v96 = v359;
    v112 = v359 - v358;
    v113 = v112 - 1;
    if ((char *)v359 - (char *)v358 < 1)
      goto LABEL_155;
    v114 = *(_QWORD *)(v88 + 24);
    v115 = (char *)v358[v113] + 1;
    v358[v113] = v115;
    if ((unint64_t)v115 >= *(_QWORD *)(v114 + 8 * v113))
      break;
LABEL_154:
    v112 = 1;
LABEL_155:
    if (v113 < 0 || !v112)
      goto LABEL_255;
  }
  v116 = (unint64_t *)&v95[v112 - 2];
  v117 = v114 - 16;
  while (1)
  {
    v118 = v112 - 1;
    v116[1] = 0;
    if (v112 - 1 <= 0)
      break;
    v119 = *v116 + 1;
    *v116-- = v119;
    v120 = *(_QWORD *)(v117 + 8 * v112--);
    if (v119 < v120)
    {
      v113 = v118 - 1;
      goto LABEL_154;
    }
  }
LABEL_255:
  if (v95)
  {
LABEL_256:
    v359 = v95;
    operator delete(v95);
  }
}

void sub_218261790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934218;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934218;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_20::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  void **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  void *v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void **v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  unint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  __int128 v196;
  __int128 v197;
  unint64_t v198;
  BOOL v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  double v212;
  _QWORD *v213;
  unint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  __int128 v222;
  __int128 v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unsigned int v228;
  _QWORD *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  __int128 v236;
  __int128 v237;
  unint64_t v238;
  _QWORD *v239;
  unint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t *v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  void *v247;
  double *v248;
  uint64_t v249;
  unint64_t v250;
  double v251;
  unint64_t *v252;
  _QWORD *v253;
  unint64_t v254;
  unint64_t v255;
  void *v256;
  double *v257;
  uint64_t v258;
  double v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  __int128 v278;
  __int128 v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int *v290;
  unsigned int v291;
  __int128 v292;
  __int128 v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int *v298;
  unsigned int v299;
  __int128 v300;
  __int128 v301;
  unint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  __int128 v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  void **v334;
  void **v335;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((uint64_t *)a1 != a3)
  {
    *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a1 + 5);
    *a3 = *(_QWORD *)a1;
    v5 = *(unsigned __int8 *)(a1 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = (unint64_t *)*a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = *a3 / *(_QWORD *)a2;
          goto LABEL_38;
        case 1:
          v212 = (double)*(uint64_t *)a2;
          goto LABEL_253;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v106 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v106, *a3);
          *a3 = (uint64_t)v106;
          *v106 = 1;
          do
          {
            v107 = __ldaxr((unint64_t *)v12);
            v15 = --v107 == 0;
          }
          while (__stlxr(v107, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v243 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v244 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v244, *a3);
            *a3 = (uint64_t)v244;
            *v244 = 1;
            do
            {
              v245 = __ldaxr(v243);
              v246 = v245 - 1;
            }
            while (__stlxr(v246, v243));
            if (!v246)
            {
              v247 = (void *)v243[1];
              if (v247)
              {
                v243[2] = (unint64_t)v247;
                operator delete(v247);
              }
              MEMORY[0x219A19A08](v243, 0x1080C409938AC02);
            }
          }
          v248 = *(double **)(*a3 + 8);
          v249 = *(_QWORD *)(*a3 + 16) - (_QWORD)v248;
          if (v249)
          {
            v250 = v249 >> 3;
            v251 = (double)*(uint64_t *)a2;
            if (v250 <= 1)
              v250 = 1;
            do
            {
              *v248 = *v248 / v251;
              ++v248;
              --v250;
            }
            while (v250);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v283 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v283, *a3);
          *a3 = (uint64_t)v283;
          *v283 = 1;
          do
          {
            v284 = __ldaxr((unint64_t *)v100);
            v189 = --v284 == 0;
          }
          while (__stlxr(v284, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v213 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v213, *a3);
          *a3 = (uint64_t)v213;
          *v213 = 1;
          do
          {
            v214 = __ldaxr((unint64_t *)v100);
            v103 = --v214 == 0;
          }
          while (__stlxr(v214, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v287 = operator new();
          v288 = *a3;
          *(_QWORD *)v287 = *(_QWORD *)*a3;
          *(_QWORD *)(v287 + 8) = *(_QWORD *)(v288 + 8);
          v289 = *(_QWORD *)(v288 + 16);
          *(_QWORD *)(v287 + 16) = v289;
          if (v289)
          {
            v290 = (unsigned int *)(v289 + 8);
            do
              v291 = __ldxr(v290);
            while (__stxr(v291 + 1, v290));
          }
          v292 = *(_OWORD *)(v288 + 24);
          v293 = *(_OWORD *)(v288 + 40);
          *(_OWORD *)(v287 + 56) = *(_OWORD *)(v288 + 56);
          *(_OWORD *)(v287 + 40) = v293;
          *(_OWORD *)(v287 + 24) = v292;
          *a3 = v287;
          *(_QWORD *)v287 = 1;
          do
          {
            v294 = __ldaxr((unint64_t *)v190);
            v199 = --v294 == 0;
          }
          while (__stlxr(v294, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v125 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v126 = (_QWORD *)operator new();
            v127 = *a3 + 8;
            *v126 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
            *a3 = (uint64_t)v126;
            *v126 = 1;
            do
            {
              v128 = __ldaxr(v125);
              v129 = v128 - 1;
            }
            while (__stlxr(v129, v125));
            if (!v129)
            {
              v130 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v125);
              MEMORY[0x219A19A08](v130, 0x1030C407B73B9F7);
            }
          }
          v131 = (uint64_t *)*a3;
          v133 = *(uint64_t **)(*a3 + 24);
          v132 = *(uint64_t **)(*a3 + 32);
          if (v132 == v133)
            return;
          if (!v131[1])
            return;
          v134 = (double)*(uint64_t *)a2;
          v135 = 1;
          do
          {
            v136 = *v133++;
            v135 *= v136;
          }
          while (v133 != v132);
          if (!v135)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
          v137 = (v131[4] - v131[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v137, &v333);
          v71 = v334;
          v138 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v139 = 0;
        v140 = (char *)v138 - (char *)v71;
        if (v140)
        {
          v141 = v140 >> 3;
          v142 = (uint64_t *)v131[6];
          if (v141 <= 1)
            v141 = 1;
          do
          {
            v144 = (uint64_t)*v71++;
            v143 = v144;
            v145 = *v142++;
            v139 += v145 * v143;
            --v141;
          }
          while (v141);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
        *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139)) = *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139))
                                                               / v134;
        v71 = v334;
        v138 = v335;
        v146 = v335 - v334;
        v147 = v146 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_187;
        v148 = v131[3];
        v149 = (char *)v334[v147] + 1;
        v334[v147] = v149;
        if ((unint64_t)v149 < *(_QWORD *)(v148 + 8 * v147))
        {
LABEL_186:
          v146 = 1;
LABEL_187:
          if (v147 < 0 || !v146)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v150 = (unint64_t *)&v71[v146 - 2];
      v151 = v148 - 16;
      while (1)
      {
        v152 = v146 - 1;
        v150[1] = 0;
        if (v146 - 1 <= 0)
          goto LABEL_215;
        v153 = *v150 + 1;
        *v150-- = v153;
        v154 = *(_QWORD *)(v151 + 8 * v146--);
        if (v153 < v154)
        {
          v147 = v152 - 1;
          goto LABEL_186;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)((double)*a3 / *(double *)a2);
LABEL_38:
          *a3 = v11;
          return;
        case 1:
          v212 = *(double *)a2;
LABEL_253:
          *(double *)a3 = *(double *)a3 / v212;
          return;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v108 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v108, *a3);
          *a3 = (uint64_t)v108;
          *v108 = 1;
          do
          {
            v109 = __ldaxr((unint64_t *)v12);
            v15 = --v109 == 0;
          }
          while (__stlxr(v109, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v252 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v253 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v253, *a3);
            *a3 = (uint64_t)v253;
            *v253 = 1;
            do
            {
              v254 = __ldaxr(v252);
              v255 = v254 - 1;
            }
            while (__stlxr(v255, v252));
            if (!v255)
            {
              v256 = (void *)v252[1];
              if (v256)
              {
                v252[2] = (unint64_t)v256;
                operator delete(v256);
              }
              MEMORY[0x219A19A08](v252, 0x1080C409938AC02);
            }
          }
          v257 = *(double **)(*a3 + 8);
          v258 = *(_QWORD *)(*a3 + 16) - (_QWORD)v257;
          if (v258)
          {
            v259 = *(double *)a2;
            v260 = v258 >> 3;
            if (v260 <= 1)
              v260 = 1;
            do
            {
              *v257 = *v257 / v259;
              ++v257;
              --v260;
            }
            while (v260);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v285, *a3);
          *a3 = (uint64_t)v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v100);
            v189 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v215 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v215, *a3);
          *a3 = (uint64_t)v215;
          *v215 = 1;
          do
          {
            v216 = __ldaxr((unint64_t *)v100);
            v103 = --v216 == 0;
          }
          while (__stlxr(v216, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v295 = operator new();
          v296 = *a3;
          *(_QWORD *)v295 = *(_QWORD *)*a3;
          *(_QWORD *)(v295 + 8) = *(_QWORD *)(v296 + 8);
          v297 = *(_QWORD *)(v296 + 16);
          *(_QWORD *)(v295 + 16) = v297;
          if (v297)
          {
            v298 = (unsigned int *)(v297 + 8);
            do
              v299 = __ldxr(v298);
            while (__stxr(v299 + 1, v298));
          }
          v300 = *(_OWORD *)(v296 + 24);
          v301 = *(_OWORD *)(v296 + 40);
          *(_OWORD *)(v295 + 56) = *(_OWORD *)(v296 + 56);
          *(_OWORD *)(v295 + 40) = v301;
          *(_OWORD *)(v295 + 24) = v300;
          *a3 = v295;
          *(_QWORD *)v295 = 1;
          do
          {
            v302 = __ldaxr((unint64_t *)v190);
            v199 = --v302 == 0;
          }
          while (__stlxr(v302, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v155 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v156 = (_QWORD *)operator new();
            v157 = *a3 + 8;
            *v156 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v156 + 1, v157);
            *a3 = (uint64_t)v156;
            *v156 = 1;
            do
            {
              v158 = __ldaxr(v155);
              v159 = v158 - 1;
            }
            while (__stlxr(v159, v155));
            if (!v159)
            {
              v160 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v155);
              MEMORY[0x219A19A08](v160, 0x1030C407B73B9F7);
            }
          }
          v161 = (uint64_t *)*a3;
          v163 = *(uint64_t **)(*a3 + 24);
          v162 = *(uint64_t **)(*a3 + 32);
          if (v162 == v163)
            return;
          if (!v161[1])
            return;
          v164 = *(double *)a2;
          v165 = 1;
          do
          {
            v166 = *v163++;
            v165 *= v166;
          }
          while (v163 != v162);
          if (!v165)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
          v167 = (v161[4] - v161[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v167, &v333);
          v71 = v334;
          v168 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v169 = 0;
        v170 = (char *)v168 - (char *)v71;
        if (v170)
        {
          v171 = v170 >> 3;
          v172 = (uint64_t *)v161[6];
          if (v171 <= 1)
            v171 = 1;
          do
          {
            v174 = (uint64_t)*v71++;
            v173 = v174;
            v175 = *v172++;
            v169 += v175 * v173;
            --v171;
          }
          while (v171);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
        *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169)) = *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169))
                                                               / v164;
        v71 = v334;
        v168 = v335;
        v176 = v335 - v334;
        v177 = v176 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_212;
        v178 = v161[3];
        v179 = (char *)v334[v177] + 1;
        v334[v177] = v179;
        if ((unint64_t)v179 < *(_QWORD *)(v178 + 8 * v177))
        {
LABEL_211:
          v176 = 1;
LABEL_212:
          if (v177 < 0 || !v176)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v180 = (unint64_t *)&v71[v176 - 2];
      v181 = v178 - 16;
      while (1)
      {
        v182 = v176 - 1;
        v180[1] = 0;
        if (v176 - 1 <= 0)
          goto LABEL_215;
        v183 = *v180 + 1;
        *v180-- = v183;
        v184 = *(_QWORD *)(v181 + 8 * v176--);
        if (v183 < v184)
        {
          v177 = v182 - 1;
          goto LABEL_211;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v18 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, *a3);
          *a3 = (uint64_t)v18;
          *v18 = 1;
          do
          {
            v19 = __ldaxr((unint64_t *)v12);
            v15 = --v19 == 0;
          }
          while (__stlxr(v19, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v36 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v36, *a3);
          *a3 = (uint64_t)v36;
          *v36 = 1;
          do
          {
            v37 = __ldaxr(v30);
            v33 = --v37 == 0;
          }
          while (__stlxr(v37, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v229, *a3);
          *a3 = (uint64_t)v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr((unint64_t *)v100);
            v189 = --v230 == 0;
          }
          while (__stlxr(v230, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v185 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v185, *a3);
          *a3 = (uint64_t)v185;
          *v185 = 1;
          do
          {
            v186 = __ldaxr((unint64_t *)v100);
            v103 = --v186 == 0;
          }
          while (__stlxr(v186, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v231 = operator new();
          v232 = *a3;
          *(_QWORD *)v231 = *(_QWORD *)*a3;
          *(_QWORD *)(v231 + 8) = *(_QWORD *)(v232 + 8);
          v233 = *(_QWORD *)(v232 + 16);
          *(_QWORD *)(v231 + 16) = v233;
          if (v233)
          {
            v234 = (unsigned int *)(v233 + 8);
            do
              v235 = __ldxr(v234);
            while (__stxr(v235 + 1, v234));
          }
          v236 = *(_OWORD *)(v232 + 24);
          v237 = *(_OWORD *)(v232 + 40);
          *(_OWORD *)(v231 + 56) = *(_OWORD *)(v232 + 56);
          *(_OWORD *)(v231 + 40) = v237;
          *(_OWORD *)(v231 + 24) = v236;
          *a3 = v231;
          *(_QWORD *)v231 = 1;
          do
          {
            v238 = __ldaxr((unint64_t *)v190);
            v199 = --v238 == 0;
          }
          while (__stlxr(v238, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v97 = (_QWORD *)operator new();
          v98 = *a3 + 8;
          *v97 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, v98);
          *a3 = (uint64_t)v97;
          *v97 = 1;
          do
          {
            v99 = __ldaxr(v38);
            v42 = --v99 == 0;
          }
          while (__stlxr(v99, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v20 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, *a3);
          *a3 = (uint64_t)v20;
          *v20 = 1;
          do
          {
            v21 = __ldaxr((unint64_t *)v12);
            v15 = --v21 == 0;
          }
          while (__stlxr(v21, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v43 = *(_QWORD *)a2;
          v44 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v45 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v45, *a3);
            *a3 = (uint64_t)v45;
            *v45 = 1;
            do
            {
              v46 = __ldaxr(v44);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v44));
            if (!v47)
            {
              v48 = (void *)v44[1];
              if (v48)
              {
                v44[2] = (unint64_t)v48;
                operator delete(v48);
              }
              MEMORY[0x219A19A08](v44, 0x1080C409938AC02);
            }
          }
          v49 = *a3;
          turi::flexible_type_fail(*(_QWORD *)(*a3 + 16) - *(_QWORD *)(*a3 + 8) == *(_QWORD *)(v43 + 16)
                                                                                 - *(_QWORD *)(v43 + 8));
          v50 = *(double **)(v49 + 8);
          v51 = *(_QWORD *)(v49 + 16) - (_QWORD)v50;
          if (v51)
          {
            v52 = v51 >> 3;
            v53 = *(double **)(v43 + 8);
            if (v52 <= 1)
              v52 = 1;
            do
            {
              v54 = *v53++;
              *v50 = *v50 / v54;
              ++v50;
              --v52;
            }
            while (v52);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v241 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v241, *a3);
          *a3 = (uint64_t)v241;
          *v241 = 1;
          do
          {
            v242 = __ldaxr((unint64_t *)v100);
            v189 = --v242 == 0;
          }
          while (__stlxr(v242, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v203 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v203, *a3);
          *a3 = (uint64_t)v203;
          *v203 = 1;
          do
          {
            v204 = __ldaxr((unint64_t *)v100);
            v103 = --v204 == 0;
          }
          while (__stlxr(v204, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v265 = operator new();
          v266 = *a3;
          *(_QWORD *)v265 = *(_QWORD *)*a3;
          *(_QWORD *)(v265 + 8) = *(_QWORD *)(v266 + 8);
          v267 = *(_QWORD *)(v266 + 16);
          *(_QWORD *)(v265 + 16) = v267;
          if (v267)
          {
            v268 = (unsigned int *)(v267 + 8);
            do
              v269 = __ldxr(v268);
            while (__stxr(v269 + 1, v268));
          }
          v270 = *(_OWORD *)(v266 + 24);
          v271 = *(_OWORD *)(v266 + 40);
          *(_OWORD *)(v265 + 56) = *(_OWORD *)(v266 + 56);
          *(_OWORD *)(v265 + 40) = v271;
          *(_OWORD *)(v265 + 24) = v270;
          *a3 = v265;
          *(_QWORD *)v265 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v190);
            v199 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v114 = (_QWORD *)operator new();
          v115 = *a3 + 8;
          *v114 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v114 + 1, v115);
          *a3 = (uint64_t)v114;
          *v114 = 1;
          do
          {
            v116 = __ldaxr(v38);
            v42 = --v116 == 0;
          }
          while (__stlxr(v116, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, *a3);
          *a3 = (uint64_t)v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v31 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v31, *a3);
          *a3 = (uint64_t)v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(v30);
            v33 = --v32 == 0;
          }
          while (__stlxr(v32, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v187 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v187, *a3);
          *a3 = (uint64_t)v187;
          *v187 = 1;
          do
          {
            v188 = __ldaxr((unint64_t *)v100);
            v189 = --v188 == 0;
          }
          while (__stlxr(v188, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v101 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v101, *a3);
          *a3 = (uint64_t)v101;
          *v101 = 1;
          do
          {
            v102 = __ldaxr((unint64_t *)v100);
            v103 = --v102 == 0;
          }
          while (__stlxr(v102, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v191 = operator new();
          v192 = *a3;
          *(_QWORD *)v191 = *(_QWORD *)*a3;
          *(_QWORD *)(v191 + 8) = *(_QWORD *)(v192 + 8);
          v193 = *(_QWORD *)(v192 + 16);
          *(_QWORD *)(v191 + 16) = v193;
          if (v193)
          {
            v194 = (unsigned int *)(v193 + 8);
            do
              v195 = __ldxr(v194);
            while (__stxr(v195 + 1, v194));
          }
          v196 = *(_OWORD *)(v192 + 24);
          v197 = *(_OWORD *)(v192 + 40);
          *(_OWORD *)(v191 + 56) = *(_OWORD *)(v192 + 56);
          *(_OWORD *)(v191 + 40) = v197;
          *(_OWORD *)(v191 + 24) = v196;
          *a3 = v191;
          *(_QWORD *)v191 = 1;
          do
          {
            v198 = __ldaxr((unint64_t *)v190);
            v199 = --v198 == 0;
          }
          while (__stlxr(v198, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v39 = (_QWORD *)operator new();
          v40 = *a3 + 8;
          *v39 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
          *a3 = (uint64_t)v39;
          *v39 = 1;
          do
          {
            v41 = __ldaxr(v38);
            v42 = --v41 == 0;
          }
          while (__stlxr(v41, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v24 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, *a3);
          *a3 = (uint64_t)v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr((unint64_t *)v12);
            v15 = --v25 == 0;
          }
          while (__stlxr(v25, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v104 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v104, *a3);
          *a3 = (uint64_t)v104;
          *v104 = 1;
          do
          {
            v105 = __ldaxr(v30);
            v33 = --v105 == 0;
          }
          while (__stlxr(v105, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v303 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v303, *a3);
          *a3 = (uint64_t)v303;
          *v303 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v100);
            v189 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v239 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v239, *a3);
          *a3 = (uint64_t)v239;
          *v239 = 1;
          do
          {
            v240 = __ldaxr((unint64_t *)v100);
            v103 = --v240 == 0;
          }
          while (__stlxr(v240, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v305 = operator new();
          v306 = *a3;
          *(_QWORD *)v305 = *(_QWORD *)*a3;
          *(_QWORD *)(v305 + 8) = *(_QWORD *)(v306 + 8);
          v307 = *(_QWORD *)(v306 + 16);
          *(_QWORD *)(v305 + 16) = v307;
          if (v307)
          {
            v308 = (unsigned int *)(v307 + 8);
            do
              v309 = __ldxr(v308);
            while (__stxr(v309 + 1, v308));
          }
          v310 = *(_OWORD *)(v306 + 24);
          v311 = *(_OWORD *)(v306 + 40);
          *(_OWORD *)(v305 + 56) = *(_OWORD *)(v306 + 56);
          *(_OWORD *)(v305 + 40) = v311;
          *(_OWORD *)(v305 + 24) = v310;
          *a3 = v305;
          *(_QWORD *)v305 = 1;
          do
          {
            v312 = __ldaxr((unint64_t *)v190);
            v199 = --v312 == 0;
          }
          while (__stlxr(v312, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v200 = (_QWORD *)operator new();
          v201 = *a3 + 8;
          *v200 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v200 + 1, v201);
          *a3 = (uint64_t)v200;
          *v200 = 1;
          do
          {
            v202 = __ldaxr(v38);
            v42 = --v202 == 0;
          }
          while (__stlxr(v202, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, *a3);
          *a3 = (uint64_t)v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr((unint64_t *)v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v112 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v112, *a3);
          *a3 = (uint64_t)v112;
          *v112 = 1;
          do
          {
            v113 = __ldaxr(v30);
            v33 = --v113 == 0;
          }
          while (__stlxr(v113, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v313 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v313, *a3);
          *a3 = (uint64_t)v313;
          *v313 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v100);
            v189 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, *a3);
          *a3 = (uint64_t)v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v100);
            v103 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v315 = operator new();
          v316 = *a3;
          *(_QWORD *)v315 = *(_QWORD *)*a3;
          *(_QWORD *)(v315 + 8) = *(_QWORD *)(v316 + 8);
          v317 = *(_QWORD *)(v316 + 16);
          *(_QWORD *)(v315 + 16) = v317;
          if (v317)
          {
            v318 = (unsigned int *)(v317 + 8);
            do
              v319 = __ldxr(v318);
            while (__stxr(v319 + 1, v318));
          }
          v320 = *(_OWORD *)(v316 + 24);
          v321 = *(_OWORD *)(v316 + 40);
          *(_OWORD *)(v315 + 56) = *(_OWORD *)(v316 + 56);
          *(_OWORD *)(v315 + 40) = v321;
          *(_OWORD *)(v315 + 24) = v320;
          *a3 = v315;
          *(_QWORD *)v315 = 1;
          do
          {
            v322 = __ldaxr((unint64_t *)v190);
            v199 = --v322 == 0;
          }
          while (__stlxr(v322, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v209 = (_QWORD *)operator new();
          v210 = *a3 + 8;
          *v209 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v209 + 1, v210);
          *a3 = (uint64_t)v209;
          *v209 = 1;
          do
          {
            v211 = __ldaxr(v38);
            v42 = --v211 == 0;
          }
          while (__stlxr(v211, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v22 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, *a3);
          *a3 = (uint64_t)v22;
          *v22 = 1;
          do
          {
            v23 = __ldaxr((unint64_t *)v12);
            v15 = --v23 == 0;
          }
          while (__stlxr(v23, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *a3);
          *a3 = (uint64_t)v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v30);
            v33 = --v56 == 0;
          }
          while (__stlxr(v56, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v261 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v261, *a3);
          *a3 = (uint64_t)v261;
          *v261 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v100);
            v189 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v205 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v205, *a3);
          *a3 = (uint64_t)v205;
          *v205 = 1;
          do
          {
            v206 = __ldaxr((unint64_t *)v100);
            v103 = --v206 == 0;
          }
          while (__stlxr(v206, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v273 = operator new();
          v274 = *a3;
          *(_QWORD *)v273 = *(_QWORD *)*a3;
          *(_QWORD *)(v273 + 8) = *(_QWORD *)(v274 + 8);
          v275 = *(_QWORD *)(v274 + 16);
          *(_QWORD *)(v273 + 16) = v275;
          if (v275)
          {
            v276 = (unsigned int *)(v275 + 8);
            do
              v277 = __ldxr(v276);
            while (__stxr(v277 + 1, v276));
          }
          v278 = *(_OWORD *)(v274 + 24);
          v279 = *(_OWORD *)(v274 + 40);
          *(_OWORD *)(v273 + 56) = *(_OWORD *)(v274 + 56);
          *(_OWORD *)(v273 + 40) = v279;
          *(_OWORD *)(v273 + 24) = v278;
          *a3 = v273;
          *(_QWORD *)v273 = 1;
          do
          {
            v280 = __ldaxr((unint64_t *)v190);
            v199 = --v280 == 0;
          }
          while (__stlxr(v280, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v122 = (_QWORD *)operator new();
          v123 = *a3 + 8;
          *v122 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v122 + 1, v123);
          *a3 = (uint64_t)v122;
          *v122 = 1;
          do
          {
            v124 = __ldaxr(v38);
            v42 = --v124 == 0;
          }
          while (__stlxr(v124, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, *a3);
          *a3 = (uint64_t)v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr((unint64_t *)v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v117 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v117, *a3);
          *a3 = (uint64_t)v117;
          *v117 = 1;
          do
          {
            v118 = __ldaxr(v30);
            v33 = --v118 == 0;
          }
          while (__stlxr(v118, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v323 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, *a3);
          *a3 = (uint64_t)v323;
          *v323 = 1;
          do
          {
            v324 = __ldaxr((unint64_t *)v100);
            v189 = --v324 == 0;
          }
          while (__stlxr(v324, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v281 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v281, *a3);
          *a3 = (uint64_t)v281;
          *v281 = 1;
          do
          {
            v282 = __ldaxr((unint64_t *)v100);
            v103 = --v282 == 0;
          }
          while (__stlxr(v282, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v325 = operator new();
          v326 = *a3;
          *(_QWORD *)v325 = *(_QWORD *)*a3;
          *(_QWORD *)(v325 + 8) = *(_QWORD *)(v326 + 8);
          v327 = *(_QWORD *)(v326 + 16);
          *(_QWORD *)(v325 + 16) = v327;
          if (v327)
          {
            v328 = (unsigned int *)(v327 + 8);
            do
              v329 = __ldxr(v328);
            while (__stxr(v329 + 1, v328));
          }
          v330 = *(_OWORD *)(v326 + 24);
          v331 = *(_OWORD *)(v326 + 40);
          *(_OWORD *)(v325 + 56) = *(_OWORD *)(v326 + 56);
          *(_OWORD *)(v325 + 40) = v331;
          *(_OWORD *)(v325 + 24) = v330;
          *a3 = v325;
          *(_QWORD *)v325 = 1;
          do
          {
            v332 = __ldaxr((unint64_t *)v190);
            v199 = --v332 == 0;
          }
          while (__stlxr(v332, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v225 = (_QWORD *)operator new();
          v226 = *a3 + 8;
          *v225 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v225 + 1, v226);
          *a3 = (uint64_t)v225;
          *v225 = 1;
          do
          {
            v227 = __ldaxr(v38);
            v42 = --v227 == 0;
          }
          while (__stlxr(v227, v38));
LABEL_272:
          if (!v42)
            goto LABEL_408;
          v110 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38);
          v228 = 2071181815;
          goto LABEL_406;
        default:
          goto LABEL_411;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, *a3);
          *a3 = (uint64_t)v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr((unint64_t *)v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, (unint64_t *)v12));
LABEL_136:
          if (!v15)
            goto LABEL_408;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v110 = (_QWORD *)v12;
          v111 = 0x1012C404EF22A49;
          goto LABEL_407;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v34, *a3);
          *a3 = (uint64_t)v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr(v30);
            v33 = --v35 == 0;
          }
          while (__stlxr(v35, v30));
LABEL_152:
          if (!v33)
            goto LABEL_408;
          v119 = (void *)v30[1];
          if (v119)
          {
            v30[2] = (unint64_t)v119;
            operator delete(v119);
          }
          v110 = v30;
          v111 = 0x1080C409938AC02;
          goto LABEL_407;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v207 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v207, *a3);
          *a3 = (uint64_t)v207;
          *v207 = 1;
          do
          {
            v208 = __ldaxr((unint64_t *)v100);
            v189 = --v208 == 0;
          }
          while (__stlxr(v208, (unint64_t *)v100));
LABEL_393:
          if (!v189)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v334);
          goto LABEL_396;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v120 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v120, *a3);
          *a3 = (uint64_t)v120;
          *v120 = 1;
          do
          {
            v121 = __ldaxr((unint64_t *)v100);
            v103 = --v121 == 0;
          }
          while (__stlxr(v121, (unint64_t *)v100));
LABEL_343:
          if (!v103)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v334);
LABEL_396:
          v110 = (_QWORD *)v100;
          v111 = 0x1020C405E66F15BLL;
          goto LABEL_407;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v217 = operator new();
          v218 = *a3;
          *(_QWORD *)v217 = *(_QWORD *)*a3;
          *(_QWORD *)(v217 + 8) = *(_QWORD *)(v218 + 8);
          v219 = *(_QWORD *)(v218 + 16);
          *(_QWORD *)(v217 + 16) = v219;
          if (v219)
          {
            v220 = (unsigned int *)(v219 + 8);
            do
              v221 = __ldxr(v220);
            while (__stxr(v221 + 1, v220));
          }
          v222 = *(_OWORD *)(v218 + 24);
          v223 = *(_OWORD *)(v218 + 40);
          *(_OWORD *)(v217 + 56) = *(_OWORD *)(v218 + 56);
          *(_OWORD *)(v217 + 40) = v223;
          *(_OWORD *)(v217 + 24) = v222;
          *a3 = v217;
          *(_QWORD *)v217 = 1;
          do
          {
            v224 = __ldaxr((unint64_t *)v190);
            v199 = --v224 == 0;
          }
          while (__stlxr(v224, (unint64_t *)v190));
LABEL_403:
          if (!v199)
            goto LABEL_408;
          boost::detail::shared_count::~shared_count((unsigned int **)(v190 + 16));
          v110 = (_QWORD *)v190;
          v228 = -235920773;
LABEL_406:
          v111 = v228 | 0x1030C4000000000;
LABEL_407:
          MEMORY[0x219A19A08](v110, v111);
LABEL_408:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v57 = *(_QWORD *)a2;
          v58 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v59 = (_QWORD *)operator new();
            v60 = *a3 + 8;
            *v59 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
            *a3 = (uint64_t)v59;
            *v59 = 1;
            do
            {
              v61 = __ldaxr(v58);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v58));
            if (!v62)
            {
              v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v58);
              MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
            }
          }
          v64 = *a3;
          v65 = (uint64_t *)(*a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v65, v57 + 8))
            turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v67 = *(uint64_t **)(v64 + 24);
          v66 = *(uint64_t **)(v64 + 32);
          if (v66 == v67)
            return;
          if (!*v65)
            return;
          v68 = 1;
          do
          {
            v69 = *v67++;
            v68 *= v69;
          }
          while (v67 != v66);
          if (!v68)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
          v70 = (uint64_t)(*(_QWORD *)(v64 + 32) - *(_QWORD *)(v64 + 24)) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v70, &v333);
          v71 = v334;
          v72 = v335;
          break;
        default:
          goto LABEL_411;
      }
      break;
    default:
LABEL_411:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v73 = (char *)v72 - (char *)v71;
    if (v73)
    {
      v74 = 0;
      v75 = v73 >> 3;
      v76 = *(uint64_t **)(v57 + 48);
      if (v75 <= 1)
        v75 = 1;
      v77 = v71;
      v78 = v75;
      do
      {
        v80 = (uint64_t)*v77++;
        v79 = v80;
        v81 = *v76++;
        v74 += v81 * v79;
        --v78;
      }
      while (v78);
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(v57 + 8) + 8 * (*(_QWORD *)(v57 + 72) + v74));
      v84 = *(uint64_t **)(v64 + 48);
      do
      {
        v86 = (uint64_t)*v71++;
        v85 = v86;
        v87 = *v84++;
        v82 += v87 * v85;
        --v75;
      }
      while (v75);
    }
    else
    {
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(v57 + 8) + 8 * *(_QWORD *)(v57 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
    *(double *)(**(_QWORD **)(v64 + 8) + 8 * (*(_QWORD *)(v64 + 72) + v82)) = *(double *)(**(_QWORD **)(v64 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v64 + 72) + v82))
                                                                            / v83;
    v71 = v334;
    v72 = v335;
    v88 = v335 - v334;
    v89 = v88 - 1;
    if ((char *)v335 - (char *)v334 < 1)
      goto LABEL_114;
    v90 = *(_QWORD *)(v64 + 24);
    v91 = (char *)v334[v89] + 1;
    v334[v89] = v91;
    if ((unint64_t)v91 >= *(_QWORD *)(v90 + 8 * v89))
      break;
LABEL_113:
    v88 = 1;
LABEL_114:
    if (v89 < 0 || !v88)
      goto LABEL_214;
  }
  v92 = (unint64_t *)&v71[v88 - 2];
  v93 = v90 - 16;
  while (1)
  {
    v94 = v88 - 1;
    v92[1] = 0;
    if (v88 - 1 <= 0)
      break;
    v95 = *v92 + 1;
    *v92-- = v95;
    v96 = *(_QWORD *)(v93 + 8 * v88--);
    if (v95 < v96)
    {
      v89 = v94 - 1;
      goto LABEL_113;
    }
  }
LABEL_214:
  if (v71)
  {
LABEL_215:
    v335 = v71;
    operator delete(v71);
  }
}

void sub_218263AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934298;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934298;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_21::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int **v12;
  _OWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::string *v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  unint64_t *v38;
  unsigned int v39;
  unint64_t *v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  _QWORD *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  double v71;
  _QWORD *v72;
  double v73;
  std::string *v74;
  __int128 v75;
  _QWORD *v76;
  double v77;
  std::string *v78;
  __int128 v79;
  _QWORD *v80;
  double v81;
  std::string *v82;
  __int128 v83;
  _QWORD *v84;
  double v85;
  std::string *v86;
  __int128 v87;
  _QWORD *v88;
  double v89;
  std::string *v90;
  __int128 v91;
  _QWORD *v92;
  double v93;
  std::string *v94;
  __int128 v95;
  _QWORD *v96;
  double v97;
  std::string *v98;
  __int128 v99;
  _QWORD *v100;
  double v101;
  std::string *v102;
  __int128 v103;
  double v104;
  _QWORD *v105;
  double v106;
  unint64_t v107;
  BOOL v108;
  _QWORD *v109;
  double v110;
  unint64_t v111;
  _QWORD *v112;
  double v113;
  unint64_t v114;
  unint64_t *v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t v118;
  BOOL v119;
  double v120;
  unint64_t *v121;
  _QWORD *v122;
  double v123;
  unint64_t v124;
  unint64_t v125;
  void *v126;
  double v127;
  double *v128;
  uint64_t v129;
  unint64_t v130;
  double *v131;
  double v132;
  _QWORD *v133;
  double v134;
  unint64_t v135;
  double v136;
  unint64_t *v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  double v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t *v150;
  std::string::size_type v151;
  _OWORD *v152;
  unsigned int **v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t v180;
  double v181;
  _QWORD *v182;
  double v183;
  unint64_t v184;
  BOOL v185;
  _QWORD *v186;
  double v187;
  unint64_t v188;
  _QWORD *v189;
  double v190;
  std::string *v191;
  __int128 v192;
  _QWORD *v193;
  double v194;
  std::string *v195;
  __int128 v196;
  _QWORD *v197;
  double v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  double v204;
  unint64_t v205;
  void *v206;
  double v207;
  uint64_t v208;
  _QWORD *v209;
  double v210;
  unint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t *v215;
  _QWORD *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  double v221;
  uint64_t *v222;
  uint64_t *v223;
  double v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  std::string::size_type size;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t *v245;
  _QWORD *v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  _QWORD *v250;
  double v251;
  uint64_t *v252;
  uint64_t *v253;
  double v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  std::string::size_type v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  _QWORD *v275;
  double v276;
  unint64_t v277;
  _QWORD *v278;
  double v279;
  unint64_t v280;
  BOOL v281;
  double v282;
  uint64_t v283;
  double v284;
  uint64_t v285;
  unsigned int *v286;
  unsigned int v287;
  __int128 v288;
  __int128 v289;
  unint64_t v290;
  BOOL v291;
  _QWORD *v292;
  uint64_t v293;
  unint64_t v294;
  _QWORD *v295;
  double v296;
  unint64_t v297;
  _QWORD *v298;
  double v299;
  unint64_t v300;
  _QWORD *v301;
  double v302;
  unint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  unint64_t v306;
  double v307;
  _QWORD *v308;
  double v309;
  unint64_t v310;
  _QWORD *v311;
  double v312;
  unint64_t v313;
  uint64_t v314;
  double v315;
  uint64_t v316;
  unsigned int *v317;
  unsigned int v318;
  __int128 v319;
  __int128 v320;
  unint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  unint64_t v324;
  unsigned int v325;
  _QWORD *v326;
  double v327;
  unint64_t v328;
  uint64_t v329;
  double v330;
  uint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  __int128 v334;
  __int128 v335;
  unint64_t v336;
  _QWORD *v337;
  double v338;
  unint64_t v339;
  _QWORD *v340;
  double v341;
  unint64_t v342;
  unint64_t *v343;
  _QWORD *v344;
  double v345;
  unint64_t v346;
  unint64_t v347;
  void *v348;
  double *v349;
  uint64_t v350;
  unint64_t v351;
  double v352;
  unint64_t *v353;
  _QWORD *v354;
  double v355;
  unint64_t v356;
  unint64_t v357;
  void *v358;
  double *v359;
  uint64_t v360;
  double v361;
  unint64_t v362;
  _QWORD *v363;
  double v364;
  unint64_t v365;
  _QWORD *v366;
  double v367;
  unint64_t v368;
  uint64_t v369;
  double v370;
  uint64_t v371;
  unsigned int *v372;
  unsigned int v373;
  __int128 v374;
  __int128 v375;
  unint64_t v376;
  uint64_t v377;
  double v378;
  uint64_t v379;
  unsigned int *v380;
  unsigned int v381;
  __int128 v382;
  __int128 v383;
  unint64_t v384;
  _QWORD *v385;
  double v386;
  unint64_t v387;
  _QWORD *v388;
  double v389;
  unint64_t v390;
  _QWORD *v391;
  double v392;
  unint64_t v393;
  uint64_t v394;
  double v395;
  uint64_t v396;
  unsigned int *v397;
  unsigned int v398;
  __int128 v399;
  __int128 v400;
  unint64_t v401;
  uint64_t v402;
  double v403;
  uint64_t v404;
  unsigned int *v405;
  unsigned int v406;
  __int128 v407;
  __int128 v408;
  unint64_t v409;
  _QWORD *v410;
  double v411;
  unint64_t v412;
  uint64_t v413;
  double v414;
  uint64_t v415;
  unsigned int *v416;
  unsigned int v417;
  __int128 v418;
  __int128 v419;
  unint64_t v420;
  _QWORD *v421;
  double v422;
  unint64_t v423;
  uint64_t v424;
  double v425;
  uint64_t v426;
  unsigned int *v427;
  unsigned int v428;
  __int128 v429;
  __int128 v430;
  unint64_t v431;
  _QWORD *v432;
  double v433;
  unint64_t v434;
  uint64_t v435;
  double v436;
  uint64_t v437;
  unsigned int *v438;
  unsigned int v439;
  __int128 v440;
  __int128 v441;
  unint64_t v442;
  unint64_t v443;
  BOOL v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  unint64_t *v454;
  unint64_t v455;
  unint64_t v456;
  double v457;
  double v458;
  uint64_t v459;
  unint64_t *v460;
  unint64_t v461;
  unint64_t v462;
  double v463;
  unint64_t *v464;
  unint64_t v465;
  unint64_t v466;
  double v467;
  void *v468;
  void *v469;
  unsigned int v470;
  unint64_t *v471;
  unint64_t v472;
  unint64_t v473;
  double v474;
  void *v475;
  unint64_t *v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t *v479;
  unint64_t v480;
  unint64_t v481;
  double v482;
  double v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  double v487;
  char *v488;
  double v489;
  uint64_t v490;
  double v491;
  uint64_t v492;
  unsigned int *v493;
  unsigned int v494;
  __int128 v495;
  __int128 v496;
  float v497;
  int v498;
  unint64_t *v499;
  _QWORD *v500;
  _QWORD *v501;
  std::string *v502;
  __int128 v503;
  unint64_t *v504;
  _QWORD *v505;
  _QWORD *v506;
  unint64_t v507;
  unint64_t v508;
  unint64_t *v509;
  _QWORD *v510;
  uint64_t v511;
  unint64_t v512;
  unint64_t v513;
  void *v514;
  void *v515;
  unint64_t *v516;
  unsigned int v517;
  unint64_t *v518;
  _QWORD *v519;
  _QWORD *v520;
  unint64_t v521;
  unint64_t v522;
  void *v523;
  uint64_t v524;
  _QWORD *v525;
  _QWORD *v526;
  unint64_t v527;
  unint64_t v528;
  _QWORD *v529;
  uint64_t v530;
  _QWORD *v531;
  uint64_t v532;
  unsigned int *v533;
  unsigned int v534;
  __int128 v535;
  __int128 v536;
  unint64_t v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t v540;
  _QWORD *v541;
  unint64_t v542;
  _QWORD *v543;
  double *v544;
  unint64_t *v545;
  unint64_t v546;
  unint64_t v547;
  double v548;
  double v549;
  uint64_t v550;
  unint64_t *v551;
  unint64_t v552;
  unint64_t v553;
  double v554;
  unint64_t *v555;
  unint64_t v556;
  unint64_t v557;
  double v558;
  void *v559;
  void *v560;
  unsigned int v561;
  unint64_t *v562;
  unint64_t v563;
  unint64_t v564;
  double v565;
  void *v566;
  unint64_t *v567;
  unint64_t v568;
  unint64_t v569;
  unint64_t *v570;
  unint64_t v571;
  unint64_t v572;
  double v573;
  std::runtime_error *exception;
  std::string *v575;
  __int128 v576;
  std::string __p;
  std::string::size_type v578;
  void *v579;
  void *v580;
  std::string v581;
  size_t __idx;
  double v583[2];
  double v584;
  uint64_t v585;
  _QWORD v586[8];

  v586[6] = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((uint64_t *)a2 != a3)
  {
    *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a2 + 5);
    *a3 = *(_QWORD *)a2;
    v5 = *(unsigned __int8 *)(a2 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = (unint64_t *)*a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  v11 = 0;
  v12 = (unsigned int **)&v585;
  v13 = v586;
  while (1)
  {
    v14 = 1;
    switch(*((_BYTE *)a3 + 12))
    {
      case 3:
        v15 = (_QWORD *)(*a3 + 8);
        v16 = (_QWORD *)(*a3 + 16);
        v17 = 3;
        goto LABEL_13;
      case 4:
        v15 = (_QWORD *)(*a3 + 8);
        v16 = (_QWORD *)(*a3 + 16);
        v17 = 4;
        goto LABEL_13;
      case 5:
        v15 = (_QWORD *)(*a3 + 8);
        v16 = (_QWORD *)(*a3 + 16);
        v17 = 5;
LABEL_13:
        v14 = (uint64_t)(*v16 - *v15) >> v17;
        break;
      case 9:
        v24 = *(uint64_t **)(*a3 + 24);
        v23 = *(uint64_t **)(*a3 + 32);
        if (v23 == v24)
        {
          v14 = 0;
        }
        else
        {
          v14 = *(_QWORD *)(*a3 + 8);
          if (v14)
          {
            v14 = 1;
            do
            {
              v25 = *v24++;
              v14 *= v25;
            }
            while (v24 != v23);
          }
        }
        break;
      default:
        break;
    }
    if (v11 >= v14)
      break;
    switch(*((_BYTE *)a3 + 12))
    {
      case 2:
        v18 = *a3;
        if (*(_QWORD *)*a3 != 1)
        {
          v19 = (_QWORD *)operator new();
          v20 = *a3;
          *v19 = *(_QWORD *)*a3;
          v21 = (std::string *)(v19 + 1);
          if (*(char *)(v20 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)(v20 + 8), *(_QWORD *)(v20 + 16));
          }
          else
          {
            v22 = *(_OWORD *)(v20 + 8);
            v19[3] = *(_QWORD *)(v20 + 24);
            *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
          }
          *a3 = (uint64_t)v19;
          *v19 = 1;
          do
          {
            v61 = __ldaxr((unint64_t *)v18);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, (unint64_t *)v18));
          if (!v62)
          {
            if (*(char *)(v18 + 31) < 0)
              operator delete(*(void **)(v18 + 8));
            v38 = (unint64_t *)v18;
            v46 = 0x1012C404EF22A49;
            goto LABEL_68;
          }
        }
        break;
      case 3:
        v40 = (unint64_t *)*a3;
        if (*(_QWORD *)*a3 != 1)
        {
          v41 = (_QWORD *)operator new();
          v42 = (_QWORD *)*a3;
          *v41 = *(_QWORD *)*a3;
          v41[2] = 0;
          v41[3] = 0;
          v41[1] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v41 + 1, (const void *)v42[1], v42[2], (uint64_t)(v42[2] - v42[1]) >> 3);
          *a3 = (uint64_t)v41;
          *v41 = 1;
          do
          {
            v43 = __ldaxr(v40);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v40));
          if (!v44)
          {
            v45 = (void *)v40[1];
            if (v45)
            {
              v40[2] = (unint64_t)v45;
              operator delete(v45);
            }
            v38 = v40;
            v46 = 0x1080C409938AC02;
            goto LABEL_68;
          }
        }
        break;
      case 4:
        v26 = (unint64_t *)*a3;
        if (*(_QWORD *)*a3 != 1)
        {
          v27 = (_QWORD *)operator new();
          v28 = (_QWORD *)*a3;
          *v27 = *(_QWORD *)*a3;
          v27[2] = 0;
          v27[3] = 0;
          v27[1] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v27 + 1, (uint64_t *)v28[1], (uint64_t *)v28[2], (uint64_t)(v28[2] - v28[1]) >> 4);
          *a3 = (uint64_t)v27;
          *v27 = 1;
          do
          {
            v29 = __ldaxr(v26);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v26));
          if (!v30)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v26 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_50;
          }
        }
        break;
      case 5:
        v26 = (unint64_t *)*a3;
        if (*(_QWORD *)*a3 != 1)
        {
          v47 = (_QWORD *)operator new();
          v48 = (_QWORD *)*a3;
          *v47 = *(_QWORD *)*a3;
          v47[2] = 0;
          v47[3] = 0;
          v47[1] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v47 + 1, (uint64_t *)v48[1], (uint64_t *)v48[2], (uint64_t)(v48[2] - v48[1]) >> 5);
          *a3 = (uint64_t)v47;
          *v47 = 1;
          do
          {
            v49 = __ldaxr(v26);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, v26));
          if (!v50)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v26 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_50:
            v38 = v26;
            v46 = 0x1020C405E66F15BLL;
            goto LABEL_68;
          }
        }
        break;
      case 8:
        v51 = (_QWORD *)*a3;
        if (*(_QWORD *)*a3 != 1)
        {
          v52 = operator new();
          v53 = (_QWORD *)*a3;
          *(_QWORD *)v52 = *(_QWORD *)*a3;
          *(_QWORD *)(v52 + 8) = v53[1];
          v54 = v53[2];
          *(_QWORD *)(v52 + 16) = v54;
          if (v54)
          {
            v55 = (unsigned int *)(v54 + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          v57 = *(_OWORD *)(v53 + 3);
          v58 = *(_OWORD *)(v53 + 5);
          *(_OWORD *)(v52 + 56) = *(_OWORD *)(v53 + 7);
          *(_OWORD *)(v52 + 40) = v58;
          *(_OWORD *)(v52 + 24) = v57;
          *a3 = v52;
          *(_QWORD *)v52 = 1;
          do
          {
            v59 = __ldaxr(v51);
            v60 = v59 - 1;
          }
          while (__stlxr(v60, v51));
          if (!v60)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v51 + 2);
            v38 = v51;
            v39 = -235920773;
            goto LABEL_59;
          }
        }
        break;
      case 9:
        v31 = (unint64_t *)*a3;
        if (*(_QWORD *)*a3 != 1)
        {
          v32 = (_QWORD *)operator new();
          v33 = *a3 + 8;
          *v32 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v32 + 1, v33);
          *a3 = (uint64_t)v32;
          *v32 = 1;
          do
          {
            v34 = __ldaxr(v31);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v31));
          if (!v35)
          {
            v36 = (void *)v31[6];
            if (v36)
            {
              v31[7] = (unint64_t)v36;
              operator delete(v36);
            }
            v37 = (void *)v31[3];
            if (v37)
            {
              v31[4] = (unint64_t)v37;
              operator delete(v37);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
            v38 = v31;
            v39 = 2071181815;
LABEL_59:
            v46 = v39 | 0x1030C4000000000;
LABEL_68:
            MEMORY[0x219A19A08](v38, v46);
          }
        }
        break;
      default:
        break;
    }
    v63 = *((unsigned __int8 *)a3 + 12);
    if (v63 == 1)
    {
      v67 = a3;
      if (v11)
        goto LABEL_687;
    }
    else
    {
      if (v63 == 9)
      {
        v66 = (_QWORD *)*a3;
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*a3 + 8));
        v64 = (_QWORD *)v66[1];
        v65 = v66[9] + v11;
      }
      else
      {
        if (v63 != 3)
          goto LABEL_687;
        v64 = (_QWORD *)(*a3 + 8);
        v65 = v11;
      }
      v67 = (uint64_t *)(*v64 + 8 * v65);
    }
    v584 = 0.0;
    LODWORD(v585) = 0;
    BYTE4(v585) = 0;
    turi::flexible_type::operator=<double>((uint64_t)&v584, v67);
    memset(v583, 0, 13);
    if (v583 != (double *)a1)
    {
      *(double *)((char *)v583 + 5) = *(double *)(a1 + 5);
      v583[0] = *(double *)a1;
      BYTE4(v583[1]) = *(_BYTE *)(a1 + 12);
      if (BYTE4(v583[1]) <= 9u && ((1 << SBYTE4(v583[1])) & 0x33C) != 0)
      {
        v68 = *(unint64_t **)&v583[0];
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 + 1, v68));
      }
    }
    switch(BYTE4(v585))
    {
      case 0:
        switch(BYTE4(v583[1]))
        {
          case 0:
            v70 = *(_QWORD *)&v583[0] / *(uint64_t *)&v584;
            goto LABEL_106;
          case 1:
            v307 = (double)*(uint64_t *)&v584;
            goto LABEL_314;
          case 2:
            v71 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v189 = (_QWORD *)operator new();
            v190 = v583[0];
            *v189 = **(_QWORD **)&v583[0];
            v191 = (std::string *)(v189 + 1);
            if (*(char *)(*(_QWORD *)&v190 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v191, *(const std::string::value_type **)(*(_QWORD *)&v190 + 8), *(_QWORD *)(*(_QWORD *)&v190 + 16));
            }
            else
            {
              v192 = *(_OWORD *)(*(_QWORD *)&v190 + 8);
              v189[3] = *(_QWORD *)(*(_QWORD *)&v190 + 24);
              *(_OWORD *)&v191->__r_.__value_.__l.__data_ = v192;
            }
            *(_QWORD *)&v583[0] = v189;
            *v189 = 1;
            do
            {
              v447 = __ldaxr(*(unint64_t **)&v71);
              v444 = --v447 == 0;
            }
            while (__stlxr(v447, *(unint64_t **)&v71));
            goto LABEL_507;
          case 3:
            v343 = *(unint64_t **)&v583[0];
            if (**(_QWORD **)&v583[0] != 1)
            {
              v344 = (_QWORD *)operator new();
              v345 = v583[0];
              *v344 = **(_QWORD **)&v583[0];
              v344[2] = 0;
              v344[3] = 0;
              v344[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v344 + 1, *(const void **)(*(_QWORD *)&v345 + 8), *(_QWORD *)(*(_QWORD *)&v345 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v345 + 16) - *(_QWORD *)(*(_QWORD *)&v345 + 8)) >> 3);
              *(_QWORD *)&v583[0] = v344;
              *v344 = 1;
              do
              {
                v346 = __ldaxr(v343);
                v347 = v346 - 1;
              }
              while (__stlxr(v347, v343));
              if (!v347)
              {
                v348 = (void *)v343[1];
                if (v348)
                {
                  v343[2] = (unint64_t)v348;
                  operator delete(v348);
                }
                MEMORY[0x219A19A08](v343, 0x1080C409938AC02);
              }
            }
            v349 = *(double **)(*(_QWORD *)&v583[0] + 8);
            v350 = *(_QWORD *)(*(_QWORD *)&v583[0] + 16) - (_QWORD)v349;
            if (v350)
            {
              v351 = v350 >> 3;
              v352 = (double)*(uint64_t *)&v584;
              if (v351 <= 1)
                v351 = 1;
              do
              {
                *v349 = *v349 / v352;
                ++v349;
                --v351;
              }
              while (v351);
            }
            goto LABEL_514;
          case 4:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v388 = (_QWORD *)operator new();
            v389 = v583[0];
            *v388 = **(_QWORD **)&v583[0];
            v388[2] = 0;
            v388[3] = 0;
            v388[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v388 + 1, *(uint64_t **)(*(_QWORD *)&v389 + 8), *(uint64_t **)(*(_QWORD *)&v389 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v389 + 16) - *(_QWORD *)(*(_QWORD *)&v389 + 8)) >> 4);
            *(_QWORD *)&v583[0] = v388;
            *v388 = 1;
            do
            {
              v390 = __ldaxr(*(unint64_t **)&v181);
              v281 = --v390 == 0;
            }
            while (__stlxr(v390, *(unint64_t **)&v181));
            goto LABEL_454;
          case 5:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v308 = (_QWORD *)operator new();
            v309 = v583[0];
            *v308 = **(_QWORD **)&v583[0];
            v308[2] = 0;
            v308[3] = 0;
            v308[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v308 + 1, *(uint64_t **)(*(_QWORD *)&v309 + 8), *(uint64_t **)(*(_QWORD *)&v309 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v309 + 16) - *(_QWORD *)(*(_QWORD *)&v309 + 8)) >> 5);
            *(_QWORD *)&v583[0] = v308;
            *v308 = 1;
            do
            {
              v310 = __ldaxr(*(unint64_t **)&v181);
              v185 = --v310 == 0;
            }
            while (__stlxr(v310, *(unint64_t **)&v181));
            goto LABEL_404;
          case 6:
          case 7:
            goto LABEL_513;
          case 8:
            v282 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v394 = operator new();
            v395 = v583[0];
            *(_QWORD *)v394 = **(_QWORD **)&v583[0];
            *(_QWORD *)(v394 + 8) = *(_QWORD *)(*(_QWORD *)&v395 + 8);
            v396 = *(_QWORD *)(*(_QWORD *)&v395 + 16);
            *(_QWORD *)(v394 + 16) = v396;
            if (v396)
            {
              v397 = (unsigned int *)(v396 + 8);
              do
                v398 = __ldxr(v397);
              while (__stxr(v398 + 1, v397));
            }
            v399 = *(_OWORD *)(*(_QWORD *)&v395 + 24);
            v400 = *(_OWORD *)(*(_QWORD *)&v395 + 40);
            *(_OWORD *)(v394 + 56) = *(_OWORD *)(*(_QWORD *)&v395 + 56);
            *(_OWORD *)(v394 + 40) = v400;
            *(_OWORD *)(v394 + 24) = v399;
            *(_QWORD *)&v583[0] = v394;
            *(_QWORD *)v394 = 1;
            do
            {
              v401 = __ldaxr(*(unint64_t **)&v282);
              v291 = --v401 == 0;
            }
            while (__stlxr(v401, *(unint64_t **)&v282));
            goto LABEL_464;
          case 9:
            v215 = *(unint64_t **)&v583[0];
            if (**(_QWORD **)&v583[0] != 1)
            {
              v216 = (_QWORD *)operator new();
              v217 = *(_QWORD *)&v583[0] + 8;
              *v216 = **(_QWORD **)&v583[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v216 + 1, v217);
              *(_QWORD *)&v583[0] = v216;
              *v216 = 1;
              do
              {
                v218 = __ldaxr(v215);
                v219 = v218 - 1;
              }
              while (__stlxr(v219, v215));
              if (!v219)
              {
                v220 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v215);
                MEMORY[0x219A19A08](v220, 0x1030C407B73B9F7);
              }
            }
            v221 = v583[0];
            v223 = *(uint64_t **)(*(_QWORD *)&v583[0] + 24);
            v222 = *(uint64_t **)(*(_QWORD *)&v583[0] + 32);
            if (v222 == v223)
              goto LABEL_514;
            if (!*(_QWORD *)(*(_QWORD *)&v583[0] + 8))
              goto LABEL_514;
            v224 = (double)*(uint64_t *)&v584;
            v225 = 1;
            do
            {
              v226 = *v223++;
              v225 *= v226;
            }
            while (v223 != v222);
            if (!v225)
              goto LABEL_514;
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v583[0] + 8));
            v227 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v221 + 32) - *(_QWORD *)(*(_QWORD *)&v221 + 24)) >> 3;
            __idx = 0;
            std::vector<unsigned long>::vector(&__p, v227, &__idx);
            size = __p.__r_.__value_.__l.__size_;
            v150 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
            break;
          default:
            goto LABEL_687;
        }
        while (2)
        {
          v229 = 0;
          v230 = size - (_QWORD)v150;
          if (v230)
          {
            v231 = v230 >> 3;
            v232 = *(uint64_t **)(*(_QWORD *)&v221 + 48);
            if (v231 <= 1)
              v231 = 1;
            do
            {
              v234 = *v150++;
              v233 = v234;
              v235 = *v232++;
              v229 += v235 * v233;
              --v231;
            }
            while (v231);
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v221 + 8));
          *(double *)(**(_QWORD **)(*(_QWORD *)&v221 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v221 + 72) + v229)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v221 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v221 + 72) + v229)) / v224;
          size = __p.__r_.__value_.__l.__size_;
          v150 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          v236 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
          v237 = v236 - 1;
          if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) < 1)
            goto LABEL_248;
          v238 = *(_QWORD *)(*(_QWORD *)&v221 + 24);
          v239 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v237) + 1;
          *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v237) = v239;
          if (v239 < *(_QWORD *)(v238 + 8 * v237))
          {
LABEL_247:
            v236 = 1;
LABEL_248:
            if (v237 < 0 || !v236)
              goto LABEL_275;
            continue;
          }
          break;
        }
        v240 = (unint64_t *)&v150[v236 - 2];
        v241 = v238 - 16;
        while (1)
        {
          v242 = v236 - 1;
          v240[1] = 0;
          if (v236 - 1 <= 0)
            goto LABEL_276;
          v243 = *v240 + 1;
          *v240-- = v243;
          v244 = *(_QWORD *)(v241 + 8 * v236--);
          if (v243 < v244)
          {
            v237 = v242 - 1;
            goto LABEL_247;
          }
        }
      case 1:
        switch(BYTE4(v583[1]))
        {
          case 0:
            v70 = (uint64_t)((double)*(uint64_t *)&v583[0] / v584);
LABEL_106:
            *(_QWORD *)&v583[0] = v70;
            goto LABEL_514;
          case 1:
            v307 = v584;
LABEL_314:
            v583[0] = v583[0] / v307;
            goto LABEL_514;
          case 2:
            v71 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v193 = (_QWORD *)operator new();
            v194 = v583[0];
            *v193 = **(_QWORD **)&v583[0];
            v195 = (std::string *)(v193 + 1);
            if (*(char *)(*(_QWORD *)&v194 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v195, *(const std::string::value_type **)(*(_QWORD *)&v194 + 8), *(_QWORD *)(*(_QWORD *)&v194 + 16));
            }
            else
            {
              v196 = *(_OWORD *)(*(_QWORD *)&v194 + 8);
              v193[3] = *(_QWORD *)(*(_QWORD *)&v194 + 24);
              *(_OWORD *)&v195->__r_.__value_.__l.__data_ = v196;
            }
            *(_QWORD *)&v583[0] = v193;
            *v193 = 1;
            do
            {
              v448 = __ldaxr(*(unint64_t **)&v71);
              v444 = --v448 == 0;
            }
            while (__stlxr(v448, *(unint64_t **)&v71));
            goto LABEL_507;
          case 3:
            v353 = *(unint64_t **)&v583[0];
            if (**(_QWORD **)&v583[0] != 1)
            {
              v354 = (_QWORD *)operator new();
              v355 = v583[0];
              *v354 = **(_QWORD **)&v583[0];
              v354[2] = 0;
              v354[3] = 0;
              v354[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v354 + 1, *(const void **)(*(_QWORD *)&v355 + 8), *(_QWORD *)(*(_QWORD *)&v355 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v355 + 16) - *(_QWORD *)(*(_QWORD *)&v355 + 8)) >> 3);
              *(_QWORD *)&v583[0] = v354;
              *v354 = 1;
              do
              {
                v356 = __ldaxr(v353);
                v357 = v356 - 1;
              }
              while (__stlxr(v357, v353));
              if (!v357)
              {
                v358 = (void *)v353[1];
                if (v358)
                {
                  v353[2] = (unint64_t)v358;
                  operator delete(v358);
                }
                MEMORY[0x219A19A08](v353, 0x1080C409938AC02);
              }
            }
            v359 = *(double **)(*(_QWORD *)&v583[0] + 8);
            v360 = *(_QWORD *)(*(_QWORD *)&v583[0] + 16) - (_QWORD)v359;
            if (v360)
            {
              v361 = v584;
              v362 = v360 >> 3;
              if (v362 <= 1)
                v362 = 1;
              do
              {
                *v359 = *v359 / v361;
                ++v359;
                --v362;
              }
              while (v362);
            }
            goto LABEL_514;
          case 4:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v391 = (_QWORD *)operator new();
            v392 = v583[0];
            *v391 = **(_QWORD **)&v583[0];
            v391[2] = 0;
            v391[3] = 0;
            v391[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v391 + 1, *(uint64_t **)(*(_QWORD *)&v392 + 8), *(uint64_t **)(*(_QWORD *)&v392 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v392 + 16) - *(_QWORD *)(*(_QWORD *)&v392 + 8)) >> 4);
            *(_QWORD *)&v583[0] = v391;
            *v391 = 1;
            do
            {
              v393 = __ldaxr(*(unint64_t **)&v181);
              v281 = --v393 == 0;
            }
            while (__stlxr(v393, *(unint64_t **)&v181));
            goto LABEL_454;
          case 5:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v311 = (_QWORD *)operator new();
            v312 = v583[0];
            *v311 = **(_QWORD **)&v583[0];
            v311[2] = 0;
            v311[3] = 0;
            v311[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v311 + 1, *(uint64_t **)(*(_QWORD *)&v312 + 8), *(uint64_t **)(*(_QWORD *)&v312 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v312 + 16) - *(_QWORD *)(*(_QWORD *)&v312 + 8)) >> 5);
            *(_QWORD *)&v583[0] = v311;
            *v311 = 1;
            do
            {
              v313 = __ldaxr(*(unint64_t **)&v181);
              v185 = --v313 == 0;
            }
            while (__stlxr(v313, *(unint64_t **)&v181));
            goto LABEL_404;
          case 6:
          case 7:
            goto LABEL_513;
          case 8:
            v282 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v402 = operator new();
            v403 = v583[0];
            *(_QWORD *)v402 = **(_QWORD **)&v583[0];
            *(_QWORD *)(v402 + 8) = *(_QWORD *)(*(_QWORD *)&v403 + 8);
            v404 = *(_QWORD *)(*(_QWORD *)&v403 + 16);
            *(_QWORD *)(v402 + 16) = v404;
            if (v404)
            {
              v405 = (unsigned int *)(v404 + 8);
              do
                v406 = __ldxr(v405);
              while (__stxr(v406 + 1, v405));
            }
            v407 = *(_OWORD *)(*(_QWORD *)&v403 + 24);
            v408 = *(_OWORD *)(*(_QWORD *)&v403 + 40);
            *(_OWORD *)(v402 + 56) = *(_OWORD *)(*(_QWORD *)&v403 + 56);
            *(_OWORD *)(v402 + 40) = v408;
            *(_OWORD *)(v402 + 24) = v407;
            *(_QWORD *)&v583[0] = v402;
            *(_QWORD *)v402 = 1;
            do
            {
              v409 = __ldaxr(*(unint64_t **)&v282);
              v291 = --v409 == 0;
            }
            while (__stlxr(v409, *(unint64_t **)&v282));
            goto LABEL_464;
          case 9:
            v245 = *(unint64_t **)&v583[0];
            if (**(_QWORD **)&v583[0] != 1)
            {
              v246 = (_QWORD *)operator new();
              v247 = *(_QWORD *)&v583[0] + 8;
              *v246 = **(_QWORD **)&v583[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v246 + 1, v247);
              *(_QWORD *)&v583[0] = v246;
              *v246 = 1;
              do
              {
                v248 = __ldaxr(v245);
                v249 = v248 - 1;
              }
              while (__stlxr(v249, v245));
              if (!v249)
              {
                v250 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v245);
                MEMORY[0x219A19A08](v250, 0x1030C407B73B9F7);
              }
            }
            v251 = v583[0];
            v253 = *(uint64_t **)(*(_QWORD *)&v583[0] + 24);
            v252 = *(uint64_t **)(*(_QWORD *)&v583[0] + 32);
            if (v252 == v253)
              goto LABEL_514;
            if (!*(_QWORD *)(*(_QWORD *)&v583[0] + 8))
              goto LABEL_514;
            v254 = v584;
            v255 = 1;
            do
            {
              v256 = *v253++;
              v255 *= v256;
            }
            while (v253 != v252);
            if (!v255)
              goto LABEL_514;
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v583[0] + 8));
            v257 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v251 + 32) - *(_QWORD *)(*(_QWORD *)&v251 + 24)) >> 3;
            __idx = 0;
            std::vector<unsigned long>::vector(&__p, v257, &__idx);
            v258 = __p.__r_.__value_.__l.__size_;
            v150 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
            break;
          default:
            goto LABEL_687;
        }
        while (2)
        {
          v259 = 0;
          v260 = v258 - (_QWORD)v150;
          if (v260)
          {
            v261 = v260 >> 3;
            v262 = *(uint64_t **)(*(_QWORD *)&v251 + 48);
            if (v261 <= 1)
              v261 = 1;
            do
            {
              v264 = *v150++;
              v263 = v264;
              v265 = *v262++;
              v259 += v265 * v263;
              --v261;
            }
            while (v261);
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v251 + 8));
          *(double *)(**(_QWORD **)(*(_QWORD *)&v251 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v251 + 72) + v259)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v251 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v251 + 72) + v259)) / v254;
          v258 = __p.__r_.__value_.__l.__size_;
          v150 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          v266 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
          v267 = v266 - 1;
          if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) < 1)
            goto LABEL_273;
          v268 = *(_QWORD *)(*(_QWORD *)&v251 + 24);
          v269 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v267) + 1;
          *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v267) = v269;
          if (v269 < *(_QWORD *)(v268 + 8 * v267))
          {
LABEL_272:
            v266 = 1;
LABEL_273:
            if (v267 < 0 || !v266)
              goto LABEL_275;
            continue;
          }
          break;
        }
        v270 = (unint64_t *)&v150[v266 - 2];
        v271 = v268 - 16;
        while (1)
        {
          v272 = v266 - 1;
          v270[1] = 0;
          if (v266 - 1 <= 0)
            goto LABEL_276;
          v273 = *v270 + 1;
          *v270-- = v273;
          v274 = *(_QWORD *)(v271 + 8 * v266--);
          if (v273 < v274)
          {
            v267 = v272 - 1;
            goto LABEL_272;
          }
        }
      case 2:
        switch(BYTE4(v583[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_513;
          case 2:
            v71 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v80 = (_QWORD *)operator new();
            v81 = v583[0];
            *v80 = **(_QWORD **)&v583[0];
            v82 = (std::string *)(v80 + 1);
            if (*(char *)(*(_QWORD *)&v81 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v82, *(const std::string::value_type **)(*(_QWORD *)&v81 + 8), *(_QWORD *)(*(_QWORD *)&v81 + 16));
            }
            else
            {
              v83 = *(_OWORD *)(*(_QWORD *)&v81 + 8);
              v80[3] = *(_QWORD *)(*(_QWORD *)&v81 + 24);
              *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v83;
            }
            *(_QWORD *)&v583[0] = v80;
            *v80 = 1;
            do
            {
              v446 = __ldaxr(*(unint64_t **)&v71);
              v444 = --v446 == 0;
            }
            while (__stlxr(v446, *(unint64_t **)&v71));
            goto LABEL_507;
          case 3:
            v104 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v112 = (_QWORD *)operator new();
            v113 = v583[0];
            *v112 = **(_QWORD **)&v583[0];
            v112[2] = 0;
            v112[3] = 0;
            v112[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v112 + 1, *(const void **)(*(_QWORD *)&v113 + 8), *(_QWORD *)(*(_QWORD *)&v113 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v113 + 16) - *(_QWORD *)(*(_QWORD *)&v113 + 8)) >> 3);
            *(_QWORD *)&v583[0] = v112;
            *v112 = 1;
            do
            {
              v114 = __ldaxr(*(unint64_t **)&v104);
              v108 = --v114 == 0;
            }
            while (__stlxr(v114, *(unint64_t **)&v104));
            goto LABEL_213;
          case 4:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v326 = (_QWORD *)operator new();
            v327 = v583[0];
            *v326 = **(_QWORD **)&v583[0];
            v326[2] = 0;
            v326[3] = 0;
            v326[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v326 + 1, *(uint64_t **)(*(_QWORD *)&v327 + 8), *(uint64_t **)(*(_QWORD *)&v327 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v327 + 16) - *(_QWORD *)(*(_QWORD *)&v327 + 8)) >> 4);
            *(_QWORD *)&v583[0] = v326;
            *v326 = 1;
            do
            {
              v328 = __ldaxr(*(unint64_t **)&v181);
              v281 = --v328 == 0;
            }
            while (__stlxr(v328, *(unint64_t **)&v181));
            goto LABEL_454;
          case 5:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v275 = (_QWORD *)operator new();
            v276 = v583[0];
            *v275 = **(_QWORD **)&v583[0];
            v275[2] = 0;
            v275[3] = 0;
            v275[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v275 + 1, *(uint64_t **)(*(_QWORD *)&v276 + 8), *(uint64_t **)(*(_QWORD *)&v276 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v276 + 16) - *(_QWORD *)(*(_QWORD *)&v276 + 8)) >> 5);
            *(_QWORD *)&v583[0] = v275;
            *v275 = 1;
            do
            {
              v277 = __ldaxr(*(unint64_t **)&v181);
              v185 = --v277 == 0;
            }
            while (__stlxr(v277, *(unint64_t **)&v181));
            goto LABEL_404;
          case 8:
            v282 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v329 = operator new();
            v330 = v583[0];
            *(_QWORD *)v329 = **(_QWORD **)&v583[0];
            *(_QWORD *)(v329 + 8) = *(_QWORD *)(*(_QWORD *)&v330 + 8);
            v331 = *(_QWORD *)(*(_QWORD *)&v330 + 16);
            *(_QWORD *)(v329 + 16) = v331;
            if (v331)
            {
              v332 = (unsigned int *)(v331 + 8);
              do
                v333 = __ldxr(v332);
              while (__stxr(v333 + 1, v332));
            }
            v334 = *(_OWORD *)(*(_QWORD *)&v330 + 24);
            v335 = *(_OWORD *)(*(_QWORD *)&v330 + 40);
            *(_OWORD *)(v329 + 56) = *(_OWORD *)(*(_QWORD *)&v330 + 56);
            *(_OWORD *)(v329 + 40) = v335;
            *(_OWORD *)(v329 + 24) = v334;
            *(_QWORD *)&v583[0] = v329;
            *(_QWORD *)v329 = 1;
            do
            {
              v336 = __ldaxr(*(unint64_t **)&v282);
              v291 = --v336 == 0;
            }
            while (__stlxr(v336, *(unint64_t **)&v282));
            goto LABEL_464;
          case 9:
            v115 = *(unint64_t **)&v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v178 = (_QWORD *)operator new();
            v179 = *(_QWORD *)&v583[0] + 8;
            *v178 = **(_QWORD **)&v583[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v178 + 1, v179);
            *(_QWORD *)&v583[0] = v178;
            *v178 = 1;
            do
            {
              v180 = __ldaxr(v115);
              v119 = --v180 == 0;
            }
            while (__stlxr(v180, v115));
            goto LABEL_333;
          default:
            goto LABEL_687;
        }
      case 3:
        switch(BYTE4(v583[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_513;
          case 2:
            v71 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v84 = (_QWORD *)operator new();
            v85 = v583[0];
            *v84 = **(_QWORD **)&v583[0];
            v86 = (std::string *)(v84 + 1);
            if (*(char *)(*(_QWORD *)&v85 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)(*(_QWORD *)&v85 + 8), *(_QWORD *)(*(_QWORD *)&v85 + 16));
            }
            else
            {
              v87 = *(_OWORD *)(*(_QWORD *)&v85 + 8);
              v84[3] = *(_QWORD *)(*(_QWORD *)&v85 + 24);
              *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v87;
            }
            *(_QWORD *)&v583[0] = v84;
            *v84 = 1;
            do
            {
              v449 = __ldaxr(*(unint64_t **)&v71);
              v444 = --v449 == 0;
            }
            while (__stlxr(v449, *(unint64_t **)&v71));
            goto LABEL_507;
          case 3:
            v120 = v584;
            v121 = *(unint64_t **)&v583[0];
            if (**(_QWORD **)&v583[0] != 1)
            {
              v122 = (_QWORD *)operator new();
              v123 = v583[0];
              *v122 = **(_QWORD **)&v583[0];
              v122[2] = 0;
              v122[3] = 0;
              v122[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v122 + 1, *(const void **)(*(_QWORD *)&v123 + 8), *(_QWORD *)(*(_QWORD *)&v123 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v123 + 16) - *(_QWORD *)(*(_QWORD *)&v123 + 8)) >> 3);
              *(_QWORD *)&v583[0] = v122;
              *v122 = 1;
              do
              {
                v124 = __ldaxr(v121);
                v125 = v124 - 1;
              }
              while (__stlxr(v125, v121));
              if (!v125)
              {
                v126 = (void *)v121[1];
                if (v126)
                {
                  v121[2] = (unint64_t)v126;
                  operator delete(v126);
                }
                MEMORY[0x219A19A08](v121, 0x1080C409938AC02);
              }
            }
            v127 = v583[0];
            turi::flexible_type_fail(*(_QWORD *)(*(_QWORD *)&v583[0] + 16) - *(_QWORD *)(*(_QWORD *)&v583[0] + 8) == *(_QWORD *)(*(_QWORD *)&v120 + 16) - *(_QWORD *)(*(_QWORD *)&v120 + 8));
            v128 = *(double **)(*(_QWORD *)&v127 + 8);
            v129 = *(_QWORD *)(*(_QWORD *)&v127 + 16) - (_QWORD)v128;
            if (v129)
            {
              v130 = v129 >> 3;
              v131 = *(double **)(*(_QWORD *)&v120 + 8);
              if (v130 <= 1)
                v130 = 1;
              do
              {
                v132 = *v131++;
                *v128 = *v128 / v132;
                ++v128;
                --v130;
              }
              while (v130);
            }
            goto LABEL_514;
          case 4:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v340 = (_QWORD *)operator new();
            v341 = v583[0];
            *v340 = **(_QWORD **)&v583[0];
            v340[2] = 0;
            v340[3] = 0;
            v340[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v340 + 1, *(uint64_t **)(*(_QWORD *)&v341 + 8), *(uint64_t **)(*(_QWORD *)&v341 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v341 + 16) - *(_QWORD *)(*(_QWORD *)&v341 + 8)) >> 4);
            *(_QWORD *)&v583[0] = v340;
            *v340 = 1;
            do
            {
              v342 = __ldaxr(*(unint64_t **)&v181);
              v281 = --v342 == 0;
            }
            while (__stlxr(v342, *(unint64_t **)&v181));
            goto LABEL_454;
          case 5:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v295 = (_QWORD *)operator new();
            v296 = v583[0];
            *v295 = **(_QWORD **)&v583[0];
            v295[2] = 0;
            v295[3] = 0;
            v295[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v295 + 1, *(uint64_t **)(*(_QWORD *)&v296 + 8), *(uint64_t **)(*(_QWORD *)&v296 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v296 + 16) - *(_QWORD *)(*(_QWORD *)&v296 + 8)) >> 5);
            *(_QWORD *)&v583[0] = v295;
            *v295 = 1;
            do
            {
              v297 = __ldaxr(*(unint64_t **)&v181);
              v185 = --v297 == 0;
            }
            while (__stlxr(v297, *(unint64_t **)&v181));
            goto LABEL_404;
          case 8:
            v282 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v369 = operator new();
            v370 = v583[0];
            *(_QWORD *)v369 = **(_QWORD **)&v583[0];
            *(_QWORD *)(v369 + 8) = *(_QWORD *)(*(_QWORD *)&v370 + 8);
            v371 = *(_QWORD *)(*(_QWORD *)&v370 + 16);
            *(_QWORD *)(v369 + 16) = v371;
            if (v371)
            {
              v372 = (unsigned int *)(v371 + 8);
              do
                v373 = __ldxr(v372);
              while (__stxr(v373 + 1, v372));
            }
            v374 = *(_OWORD *)(*(_QWORD *)&v370 + 24);
            v375 = *(_OWORD *)(*(_QWORD *)&v370 + 40);
            *(_OWORD *)(v369 + 56) = *(_OWORD *)(*(_QWORD *)&v370 + 56);
            *(_OWORD *)(v369 + 40) = v375;
            *(_OWORD *)(v369 + 24) = v374;
            *(_QWORD *)&v583[0] = v369;
            *(_QWORD *)v369 = 1;
            do
            {
              v376 = __ldaxr(*(unint64_t **)&v282);
              v291 = --v376 == 0;
            }
            while (__stlxr(v376, *(unint64_t **)&v282));
            goto LABEL_464;
          case 9:
            v115 = *(unint64_t **)&v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v200 = (_QWORD *)operator new();
            v201 = *(_QWORD *)&v583[0] + 8;
            *v200 = **(_QWORD **)&v583[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v200 + 1, v201);
            *(_QWORD *)&v583[0] = v200;
            *v200 = 1;
            do
            {
              v202 = __ldaxr(v115);
              v119 = --v202 == 0;
            }
            while (__stlxr(v202, v115));
            goto LABEL_333;
          default:
            goto LABEL_687;
        }
      case 4:
        switch(BYTE4(v583[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_513;
          case 2:
            v71 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v72 = (_QWORD *)operator new();
            v73 = v583[0];
            *v72 = **(_QWORD **)&v583[0];
            v74 = (std::string *)(v72 + 1);
            if (*(char *)(*(_QWORD *)&v73 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v74, *(const std::string::value_type **)(*(_QWORD *)&v73 + 8), *(_QWORD *)(*(_QWORD *)&v73 + 16));
            }
            else
            {
              v75 = *(_OWORD *)(*(_QWORD *)&v73 + 8);
              v72[3] = *(_QWORD *)(*(_QWORD *)&v73 + 24);
              *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v75;
            }
            *(_QWORD *)&v583[0] = v72;
            *v72 = 1;
            do
            {
              v443 = __ldaxr(*(unint64_t **)&v71);
              v444 = --v443 == 0;
            }
            while (__stlxr(v443, *(unint64_t **)&v71));
            goto LABEL_507;
          case 3:
            v104 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v105 = (_QWORD *)operator new();
            v106 = v583[0];
            *v105 = **(_QWORD **)&v583[0];
            v105[2] = 0;
            v105[3] = 0;
            v105[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v105 + 1, *(const void **)(*(_QWORD *)&v106 + 8), *(_QWORD *)(*(_QWORD *)&v106 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v106 + 16) - *(_QWORD *)(*(_QWORD *)&v106 + 8)) >> 3);
            *(_QWORD *)&v583[0] = v105;
            *v105 = 1;
            do
            {
              v107 = __ldaxr(*(unint64_t **)&v104);
              v108 = --v107 == 0;
            }
            while (__stlxr(v107, *(unint64_t **)&v104));
            goto LABEL_213;
          case 4:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v278 = (_QWORD *)operator new();
            v279 = v583[0];
            *v278 = **(_QWORD **)&v583[0];
            v278[2] = 0;
            v278[3] = 0;
            v278[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v278 + 1, *(uint64_t **)(*(_QWORD *)&v279 + 8), *(uint64_t **)(*(_QWORD *)&v279 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v279 + 16) - *(_QWORD *)(*(_QWORD *)&v279 + 8)) >> 4);
            *(_QWORD *)&v583[0] = v278;
            *v278 = 1;
            do
            {
              v280 = __ldaxr(*(unint64_t **)&v181);
              v281 = --v280 == 0;
            }
            while (__stlxr(v280, *(unint64_t **)&v181));
            goto LABEL_454;
          case 5:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v182 = (_QWORD *)operator new();
            v183 = v583[0];
            *v182 = **(_QWORD **)&v583[0];
            v182[2] = 0;
            v182[3] = 0;
            v182[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v182 + 1, *(uint64_t **)(*(_QWORD *)&v183 + 8), *(uint64_t **)(*(_QWORD *)&v183 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v183 + 16) - *(_QWORD *)(*(_QWORD *)&v183 + 8)) >> 5);
            *(_QWORD *)&v583[0] = v182;
            *v182 = 1;
            do
            {
              v184 = __ldaxr(*(unint64_t **)&v181);
              v185 = --v184 == 0;
            }
            while (__stlxr(v184, *(unint64_t **)&v181));
            goto LABEL_404;
          case 8:
            v282 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v283 = operator new();
            v284 = v583[0];
            *(_QWORD *)v283 = **(_QWORD **)&v583[0];
            *(_QWORD *)(v283 + 8) = *(_QWORD *)(*(_QWORD *)&v284 + 8);
            v285 = *(_QWORD *)(*(_QWORD *)&v284 + 16);
            *(_QWORD *)(v283 + 16) = v285;
            if (v285)
            {
              v286 = (unsigned int *)(v285 + 8);
              do
                v287 = __ldxr(v286);
              while (__stxr(v287 + 1, v286));
            }
            v288 = *(_OWORD *)(*(_QWORD *)&v284 + 24);
            v289 = *(_OWORD *)(*(_QWORD *)&v284 + 40);
            *(_OWORD *)(v283 + 56) = *(_OWORD *)(*(_QWORD *)&v284 + 56);
            *(_OWORD *)(v283 + 40) = v289;
            *(_OWORD *)(v283 + 24) = v288;
            *(_QWORD *)&v583[0] = v283;
            *(_QWORD *)v283 = 1;
            do
            {
              v290 = __ldaxr(*(unint64_t **)&v282);
              v291 = --v290 == 0;
            }
            while (__stlxr(v290, *(unint64_t **)&v282));
            goto LABEL_464;
          case 9:
            v115 = *(unint64_t **)&v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v116 = (_QWORD *)operator new();
            v117 = *(_QWORD *)&v583[0] + 8;
            *v116 = **(_QWORD **)&v583[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v116 + 1, v117);
            *(_QWORD *)&v583[0] = v116;
            *v116 = 1;
            do
            {
              v118 = __ldaxr(v115);
              v119 = --v118 == 0;
            }
            while (__stlxr(v118, v115));
            goto LABEL_333;
          default:
            goto LABEL_687;
        }
      case 5:
        switch(BYTE4(v583[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_513;
          case 2:
            v71 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v92 = (_QWORD *)operator new();
            v93 = v583[0];
            *v92 = **(_QWORD **)&v583[0];
            v94 = (std::string *)(v92 + 1);
            if (*(char *)(*(_QWORD *)&v93 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v94, *(const std::string::value_type **)(*(_QWORD *)&v93 + 8), *(_QWORD *)(*(_QWORD *)&v93 + 16));
            }
            else
            {
              v95 = *(_OWORD *)(*(_QWORD *)&v93 + 8);
              v92[3] = *(_QWORD *)(*(_QWORD *)&v93 + 24);
              *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v95;
            }
            *(_QWORD *)&v583[0] = v92;
            *v92 = 1;
            do
            {
              v451 = __ldaxr(*(unint64_t **)&v71);
              v444 = --v451 == 0;
            }
            while (__stlxr(v451, *(unint64_t **)&v71));
            goto LABEL_507;
          case 3:
            v104 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v186 = (_QWORD *)operator new();
            v187 = v583[0];
            *v186 = **(_QWORD **)&v583[0];
            v186[2] = 0;
            v186[3] = 0;
            v186[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v186 + 1, *(const void **)(*(_QWORD *)&v187 + 8), *(_QWORD *)(*(_QWORD *)&v187 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v187 + 16) - *(_QWORD *)(*(_QWORD *)&v187 + 8)) >> 3);
            *(_QWORD *)&v583[0] = v186;
            *v186 = 1;
            do
            {
              v188 = __ldaxr(*(unint64_t **)&v104);
              v108 = --v188 == 0;
            }
            while (__stlxr(v188, *(unint64_t **)&v104));
            goto LABEL_213;
          case 4:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v410 = (_QWORD *)operator new();
            v411 = v583[0];
            *v410 = **(_QWORD **)&v583[0];
            v410[2] = 0;
            v410[3] = 0;
            v410[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v410 + 1, *(uint64_t **)(*(_QWORD *)&v411 + 8), *(uint64_t **)(*(_QWORD *)&v411 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v411 + 16) - *(_QWORD *)(*(_QWORD *)&v411 + 8)) >> 4);
            *(_QWORD *)&v583[0] = v410;
            *v410 = 1;
            do
            {
              v412 = __ldaxr(*(unint64_t **)&v181);
              v281 = --v412 == 0;
            }
            while (__stlxr(v412, *(unint64_t **)&v181));
            goto LABEL_454;
          case 5:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v337 = (_QWORD *)operator new();
            v338 = v583[0];
            *v337 = **(_QWORD **)&v583[0];
            v337[2] = 0;
            v337[3] = 0;
            v337[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v337 + 1, *(uint64_t **)(*(_QWORD *)&v338 + 8), *(uint64_t **)(*(_QWORD *)&v338 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v338 + 16) - *(_QWORD *)(*(_QWORD *)&v338 + 8)) >> 5);
            *(_QWORD *)&v583[0] = v337;
            *v337 = 1;
            do
            {
              v339 = __ldaxr(*(unint64_t **)&v181);
              v185 = --v339 == 0;
            }
            while (__stlxr(v339, *(unint64_t **)&v181));
            goto LABEL_404;
          case 8:
            v282 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v413 = operator new();
            v414 = v583[0];
            *(_QWORD *)v413 = **(_QWORD **)&v583[0];
            *(_QWORD *)(v413 + 8) = *(_QWORD *)(*(_QWORD *)&v414 + 8);
            v415 = *(_QWORD *)(*(_QWORD *)&v414 + 16);
            *(_QWORD *)(v413 + 16) = v415;
            if (v415)
            {
              v416 = (unsigned int *)(v415 + 8);
              do
                v417 = __ldxr(v416);
              while (__stxr(v417 + 1, v416));
            }
            v418 = *(_OWORD *)(*(_QWORD *)&v414 + 24);
            v419 = *(_OWORD *)(*(_QWORD *)&v414 + 40);
            *(_OWORD *)(v413 + 56) = *(_OWORD *)(*(_QWORD *)&v414 + 56);
            *(_OWORD *)(v413 + 40) = v419;
            *(_OWORD *)(v413 + 24) = v418;
            *(_QWORD *)&v583[0] = v413;
            *(_QWORD *)v413 = 1;
            do
            {
              v420 = __ldaxr(*(unint64_t **)&v282);
              v291 = --v420 == 0;
            }
            while (__stlxr(v420, *(unint64_t **)&v282));
            goto LABEL_464;
          case 9:
            v115 = *(unint64_t **)&v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v292 = (_QWORD *)operator new();
            v293 = *(_QWORD *)&v583[0] + 8;
            *v292 = **(_QWORD **)&v583[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v292 + 1, v293);
            *(_QWORD *)&v583[0] = v292;
            *v292 = 1;
            do
            {
              v294 = __ldaxr(v115);
              v119 = --v294 == 0;
            }
            while (__stlxr(v294, v115));
            goto LABEL_333;
          default:
            goto LABEL_687;
        }
      case 6:
        switch(BYTE4(v583[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_513;
          case 2:
            v71 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v96 = (_QWORD *)operator new();
            v97 = v583[0];
            *v96 = **(_QWORD **)&v583[0];
            v98 = (std::string *)(v96 + 1);
            if (*(char *)(*(_QWORD *)&v97 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v98, *(const std::string::value_type **)(*(_QWORD *)&v97 + 8), *(_QWORD *)(*(_QWORD *)&v97 + 16));
            }
            else
            {
              v99 = *(_OWORD *)(*(_QWORD *)&v97 + 8);
              v96[3] = *(_QWORD *)(*(_QWORD *)&v97 + 24);
              *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v99;
            }
            *(_QWORD *)&v583[0] = v96;
            *v96 = 1;
            do
            {
              v452 = __ldaxr(*(unint64_t **)&v71);
              v444 = --v452 == 0;
            }
            while (__stlxr(v452, *(unint64_t **)&v71));
            goto LABEL_507;
          case 3:
            v104 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v197 = (_QWORD *)operator new();
            v198 = v583[0];
            *v197 = **(_QWORD **)&v583[0];
            v197[2] = 0;
            v197[3] = 0;
            v197[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v197 + 1, *(const void **)(*(_QWORD *)&v198 + 8), *(_QWORD *)(*(_QWORD *)&v198 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v198 + 16) - *(_QWORD *)(*(_QWORD *)&v198 + 8)) >> 3);
            *(_QWORD *)&v583[0] = v197;
            *v197 = 1;
            do
            {
              v199 = __ldaxr(*(unint64_t **)&v104);
              v108 = --v199 == 0;
            }
            while (__stlxr(v199, *(unint64_t **)&v104));
            goto LABEL_213;
          case 4:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v421 = (_QWORD *)operator new();
            v422 = v583[0];
            *v421 = **(_QWORD **)&v583[0];
            v421[2] = 0;
            v421[3] = 0;
            v421[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v421 + 1, *(uint64_t **)(*(_QWORD *)&v422 + 8), *(uint64_t **)(*(_QWORD *)&v422 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v422 + 16) - *(_QWORD *)(*(_QWORD *)&v422 + 8)) >> 4);
            *(_QWORD *)&v583[0] = v421;
            *v421 = 1;
            do
            {
              v423 = __ldaxr(*(unint64_t **)&v181);
              v281 = --v423 == 0;
            }
            while (__stlxr(v423, *(unint64_t **)&v181));
            goto LABEL_454;
          case 5:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v366 = (_QWORD *)operator new();
            v367 = v583[0];
            *v366 = **(_QWORD **)&v583[0];
            v366[2] = 0;
            v366[3] = 0;
            v366[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v366 + 1, *(uint64_t **)(*(_QWORD *)&v367 + 8), *(uint64_t **)(*(_QWORD *)&v367 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v367 + 16) - *(_QWORD *)(*(_QWORD *)&v367 + 8)) >> 5);
            *(_QWORD *)&v583[0] = v366;
            *v366 = 1;
            do
            {
              v368 = __ldaxr(*(unint64_t **)&v181);
              v185 = --v368 == 0;
            }
            while (__stlxr(v368, *(unint64_t **)&v181));
            goto LABEL_404;
          case 8:
            v282 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v424 = operator new();
            v425 = v583[0];
            *(_QWORD *)v424 = **(_QWORD **)&v583[0];
            *(_QWORD *)(v424 + 8) = *(_QWORD *)(*(_QWORD *)&v425 + 8);
            v426 = *(_QWORD *)(*(_QWORD *)&v425 + 16);
            *(_QWORD *)(v424 + 16) = v426;
            if (v426)
            {
              v427 = (unsigned int *)(v426 + 8);
              do
                v428 = __ldxr(v427);
              while (__stxr(v428 + 1, v427));
            }
            v429 = *(_OWORD *)(*(_QWORD *)&v425 + 24);
            v430 = *(_OWORD *)(*(_QWORD *)&v425 + 40);
            *(_OWORD *)(v424 + 56) = *(_OWORD *)(*(_QWORD *)&v425 + 56);
            *(_OWORD *)(v424 + 40) = v430;
            *(_OWORD *)(v424 + 24) = v429;
            *(_QWORD *)&v583[0] = v424;
            *(_QWORD *)v424 = 1;
            do
            {
              v431 = __ldaxr(*(unint64_t **)&v282);
              v291 = --v431 == 0;
            }
            while (__stlxr(v431, *(unint64_t **)&v282));
            goto LABEL_464;
          case 9:
            v115 = *(unint64_t **)&v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v304 = (_QWORD *)operator new();
            v305 = *(_QWORD *)&v583[0] + 8;
            *v304 = **(_QWORD **)&v583[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v304 + 1, v305);
            *(_QWORD *)&v583[0] = v304;
            *v304 = 1;
            do
            {
              v306 = __ldaxr(v115);
              v119 = --v306 == 0;
            }
            while (__stlxr(v306, v115));
            goto LABEL_333;
          default:
            goto LABEL_687;
        }
      case 7:
        switch(BYTE4(v583[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_513;
          case 2:
            v71 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v88 = (_QWORD *)operator new();
            v89 = v583[0];
            *v88 = **(_QWORD **)&v583[0];
            v90 = (std::string *)(v88 + 1);
            if (*(char *)(*(_QWORD *)&v89 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v90, *(const std::string::value_type **)(*(_QWORD *)&v89 + 8), *(_QWORD *)(*(_QWORD *)&v89 + 16));
            }
            else
            {
              v91 = *(_OWORD *)(*(_QWORD *)&v89 + 8);
              v88[3] = *(_QWORD *)(*(_QWORD *)&v89 + 24);
              *(_OWORD *)&v90->__r_.__value_.__l.__data_ = v91;
            }
            *(_QWORD *)&v583[0] = v88;
            *v88 = 1;
            do
            {
              v450 = __ldaxr(*(unint64_t **)&v71);
              v444 = --v450 == 0;
            }
            while (__stlxr(v450, *(unint64_t **)&v71));
            goto LABEL_507;
          case 3:
            v104 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v133 = (_QWORD *)operator new();
            v134 = v583[0];
            *v133 = **(_QWORD **)&v583[0];
            v133[2] = 0;
            v133[3] = 0;
            v133[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v133 + 1, *(const void **)(*(_QWORD *)&v134 + 8), *(_QWORD *)(*(_QWORD *)&v134 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v134 + 16) - *(_QWORD *)(*(_QWORD *)&v134 + 8)) >> 3);
            *(_QWORD *)&v583[0] = v133;
            *v133 = 1;
            do
            {
              v135 = __ldaxr(*(unint64_t **)&v104);
              v108 = --v135 == 0;
            }
            while (__stlxr(v135, *(unint64_t **)&v104));
            goto LABEL_213;
          case 4:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v363 = (_QWORD *)operator new();
            v364 = v583[0];
            *v363 = **(_QWORD **)&v583[0];
            v363[2] = 0;
            v363[3] = 0;
            v363[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v363 + 1, *(uint64_t **)(*(_QWORD *)&v364 + 8), *(uint64_t **)(*(_QWORD *)&v364 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v364 + 16) - *(_QWORD *)(*(_QWORD *)&v364 + 8)) >> 4);
            *(_QWORD *)&v583[0] = v363;
            *v363 = 1;
            do
            {
              v365 = __ldaxr(*(unint64_t **)&v181);
              v281 = --v365 == 0;
            }
            while (__stlxr(v365, *(unint64_t **)&v181));
            goto LABEL_454;
          case 5:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v298 = (_QWORD *)operator new();
            v299 = v583[0];
            *v298 = **(_QWORD **)&v583[0];
            v298[2] = 0;
            v298[3] = 0;
            v298[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v298 + 1, *(uint64_t **)(*(_QWORD *)&v299 + 8), *(uint64_t **)(*(_QWORD *)&v299 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v299 + 16) - *(_QWORD *)(*(_QWORD *)&v299 + 8)) >> 5);
            *(_QWORD *)&v583[0] = v298;
            *v298 = 1;
            do
            {
              v300 = __ldaxr(*(unint64_t **)&v181);
              v185 = --v300 == 0;
            }
            while (__stlxr(v300, *(unint64_t **)&v181));
            goto LABEL_404;
          case 8:
            v282 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v377 = operator new();
            v378 = v583[0];
            *(_QWORD *)v377 = **(_QWORD **)&v583[0];
            *(_QWORD *)(v377 + 8) = *(_QWORD *)(*(_QWORD *)&v378 + 8);
            v379 = *(_QWORD *)(*(_QWORD *)&v378 + 16);
            *(_QWORD *)(v377 + 16) = v379;
            if (v379)
            {
              v380 = (unsigned int *)(v379 + 8);
              do
                v381 = __ldxr(v380);
              while (__stxr(v381 + 1, v380));
            }
            v382 = *(_OWORD *)(*(_QWORD *)&v378 + 24);
            v383 = *(_OWORD *)(*(_QWORD *)&v378 + 40);
            *(_OWORD *)(v377 + 56) = *(_OWORD *)(*(_QWORD *)&v378 + 56);
            *(_OWORD *)(v377 + 40) = v383;
            *(_OWORD *)(v377 + 24) = v382;
            *(_QWORD *)&v583[0] = v377;
            *(_QWORD *)v377 = 1;
            do
            {
              v384 = __ldaxr(*(unint64_t **)&v282);
              v291 = --v384 == 0;
            }
            while (__stlxr(v384, *(unint64_t **)&v282));
            goto LABEL_464;
          case 9:
            v115 = *(unint64_t **)&v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v212 = (_QWORD *)operator new();
            v213 = *(_QWORD *)&v583[0] + 8;
            *v212 = **(_QWORD **)&v583[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v212 + 1, v213);
            *(_QWORD *)&v583[0] = v212;
            *v212 = 1;
            do
            {
              v214 = __ldaxr(v115);
              v119 = --v214 == 0;
            }
            while (__stlxr(v214, v115));
            goto LABEL_333;
          default:
            goto LABEL_687;
        }
      case 8:
        switch(BYTE4(v583[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_513;
          case 2:
            v71 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v100 = (_QWORD *)operator new();
            v101 = v583[0];
            *v100 = **(_QWORD **)&v583[0];
            v102 = (std::string *)(v100 + 1);
            if (*(char *)(*(_QWORD *)&v101 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v102, *(const std::string::value_type **)(*(_QWORD *)&v101 + 8), *(_QWORD *)(*(_QWORD *)&v101 + 16));
            }
            else
            {
              v103 = *(_OWORD *)(*(_QWORD *)&v101 + 8);
              v100[3] = *(_QWORD *)(*(_QWORD *)&v101 + 24);
              *(_OWORD *)&v102->__r_.__value_.__l.__data_ = v103;
            }
            *(_QWORD *)&v583[0] = v100;
            *v100 = 1;
            do
            {
              v453 = __ldaxr(*(unint64_t **)&v71);
              v444 = --v453 == 0;
            }
            while (__stlxr(v453, *(unint64_t **)&v71));
            goto LABEL_507;
          case 3:
            v104 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v203 = (_QWORD *)operator new();
            v204 = v583[0];
            *v203 = **(_QWORD **)&v583[0];
            v203[2] = 0;
            v203[3] = 0;
            v203[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v203 + 1, *(const void **)(*(_QWORD *)&v204 + 8), *(_QWORD *)(*(_QWORD *)&v204 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v204 + 16) - *(_QWORD *)(*(_QWORD *)&v204 + 8)) >> 3);
            *(_QWORD *)&v583[0] = v203;
            *v203 = 1;
            do
            {
              v205 = __ldaxr(*(unint64_t **)&v104);
              v108 = --v205 == 0;
            }
            while (__stlxr(v205, *(unint64_t **)&v104));
            goto LABEL_213;
          case 4:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v432 = (_QWORD *)operator new();
            v433 = v583[0];
            *v432 = **(_QWORD **)&v583[0];
            v432[2] = 0;
            v432[3] = 0;
            v432[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v432 + 1, *(uint64_t **)(*(_QWORD *)&v433 + 8), *(uint64_t **)(*(_QWORD *)&v433 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v433 + 16) - *(_QWORD *)(*(_QWORD *)&v433 + 8)) >> 4);
            *(_QWORD *)&v583[0] = v432;
            *v432 = 1;
            do
            {
              v434 = __ldaxr(*(unint64_t **)&v181);
              v281 = --v434 == 0;
            }
            while (__stlxr(v434, *(unint64_t **)&v181));
            goto LABEL_454;
          case 5:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v385 = (_QWORD *)operator new();
            v386 = v583[0];
            *v385 = **(_QWORD **)&v583[0];
            v385[2] = 0;
            v385[3] = 0;
            v385[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v385 + 1, *(uint64_t **)(*(_QWORD *)&v386 + 8), *(uint64_t **)(*(_QWORD *)&v386 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v386 + 16) - *(_QWORD *)(*(_QWORD *)&v386 + 8)) >> 5);
            *(_QWORD *)&v583[0] = v385;
            *v385 = 1;
            do
            {
              v387 = __ldaxr(*(unint64_t **)&v181);
              v185 = --v387 == 0;
            }
            while (__stlxr(v387, *(unint64_t **)&v181));
            goto LABEL_404;
          case 8:
            v282 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v435 = operator new();
            v436 = v583[0];
            *(_QWORD *)v435 = **(_QWORD **)&v583[0];
            *(_QWORD *)(v435 + 8) = *(_QWORD *)(*(_QWORD *)&v436 + 8);
            v437 = *(_QWORD *)(*(_QWORD *)&v436 + 16);
            *(_QWORD *)(v435 + 16) = v437;
            if (v437)
            {
              v438 = (unsigned int *)(v437 + 8);
              do
                v439 = __ldxr(v438);
              while (__stxr(v439 + 1, v438));
            }
            v440 = *(_OWORD *)(*(_QWORD *)&v436 + 24);
            v441 = *(_OWORD *)(*(_QWORD *)&v436 + 40);
            *(_OWORD *)(v435 + 56) = *(_OWORD *)(*(_QWORD *)&v436 + 56);
            *(_OWORD *)(v435 + 40) = v441;
            *(_OWORD *)(v435 + 24) = v440;
            *(_QWORD *)&v583[0] = v435;
            *(_QWORD *)v435 = 1;
            do
            {
              v442 = __ldaxr(*(unint64_t **)&v282);
              v291 = --v442 == 0;
            }
            while (__stlxr(v442, *(unint64_t **)&v282));
            goto LABEL_464;
          case 9:
            v115 = *(unint64_t **)&v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v322 = (_QWORD *)operator new();
            v323 = *(_QWORD *)&v583[0] + 8;
            *v322 = **(_QWORD **)&v583[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v322 + 1, v323);
            *(_QWORD *)&v583[0] = v322;
            *v322 = 1;
            do
            {
              v324 = __ldaxr(v115);
              v119 = --v324 == 0;
            }
            while (__stlxr(v324, v115));
LABEL_333:
            if (!v119)
              goto LABEL_513;
            v207 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v115));
            v325 = 2071181815;
            goto LABEL_467;
          default:
            goto LABEL_687;
        }
      case 9:
        switch(BYTE4(v583[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_513;
          case 2:
            v71 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v76 = (_QWORD *)operator new();
            v77 = v583[0];
            *v76 = **(_QWORD **)&v583[0];
            v78 = (std::string *)(v76 + 1);
            if (*(char *)(*(_QWORD *)&v77 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v78, *(const std::string::value_type **)(*(_QWORD *)&v77 + 8), *(_QWORD *)(*(_QWORD *)&v77 + 16));
            }
            else
            {
              v79 = *(_OWORD *)(*(_QWORD *)&v77 + 8);
              v76[3] = *(_QWORD *)(*(_QWORD *)&v77 + 24);
              *(_OWORD *)&v78->__r_.__value_.__l.__data_ = v79;
            }
            *(_QWORD *)&v583[0] = v76;
            *v76 = 1;
            do
            {
              v445 = __ldaxr(*(unint64_t **)&v71);
              v444 = --v445 == 0;
            }
            while (__stlxr(v445, *(unint64_t **)&v71));
LABEL_507:
            if (!v444)
              goto LABEL_513;
            if (*(char *)(*(_QWORD *)&v71 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v71 + 8));
            v207 = v71;
            v208 = 0x1012C404EF22A49;
            goto LABEL_512;
          case 3:
            v104 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v109 = (_QWORD *)operator new();
            v110 = v583[0];
            *v109 = **(_QWORD **)&v583[0];
            v109[2] = 0;
            v109[3] = 0;
            v109[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v109 + 1, *(const void **)(*(_QWORD *)&v110 + 8), *(_QWORD *)(*(_QWORD *)&v110 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v110 + 16) - *(_QWORD *)(*(_QWORD *)&v110 + 8)) >> 3);
            *(_QWORD *)&v583[0] = v109;
            *v109 = 1;
            do
            {
              v111 = __ldaxr(*(unint64_t **)&v104);
              v108 = --v111 == 0;
            }
            while (__stlxr(v111, *(unint64_t **)&v104));
LABEL_213:
            if (!v108)
              goto LABEL_513;
            v206 = *(void **)(*(_QWORD *)&v104 + 8);
            if (v206)
            {
              *(_QWORD *)(*(_QWORD *)&v104 + 16) = v206;
              operator delete(v206);
            }
            v207 = v104;
            v208 = 0x1080C409938AC02;
            goto LABEL_512;
          case 4:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v301 = (_QWORD *)operator new();
            v302 = v583[0];
            *v301 = **(_QWORD **)&v583[0];
            v301[2] = 0;
            v301[3] = 0;
            v301[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v301 + 1, *(uint64_t **)(*(_QWORD *)&v302 + 8), *(uint64_t **)(*(_QWORD *)&v302 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v302 + 16) - *(_QWORD *)(*(_QWORD *)&v302 + 8)) >> 4);
            *(_QWORD *)&v583[0] = v301;
            *v301 = 1;
            do
            {
              v303 = __ldaxr(*(unint64_t **)&v181);
              v281 = --v303 == 0;
            }
            while (__stlxr(v303, *(unint64_t **)&v181));
LABEL_454:
            if (!v281)
              goto LABEL_513;
            __p.__r_.__value_.__r.__words[0] = *(_QWORD *)&v181 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_457;
          case 5:
            v181 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v209 = (_QWORD *)operator new();
            v210 = v583[0];
            *v209 = **(_QWORD **)&v583[0];
            v209[2] = 0;
            v209[3] = 0;
            v209[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v209 + 1, *(uint64_t **)(*(_QWORD *)&v210 + 8), *(uint64_t **)(*(_QWORD *)&v210 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v210 + 16) - *(_QWORD *)(*(_QWORD *)&v210 + 8)) >> 5);
            *(_QWORD *)&v583[0] = v209;
            *v209 = 1;
            do
            {
              v211 = __ldaxr(*(unint64_t **)&v181);
              v185 = --v211 == 0;
            }
            while (__stlxr(v211, *(unint64_t **)&v181));
LABEL_404:
            if (!v185)
              goto LABEL_513;
            __p.__r_.__value_.__r.__words[0] = *(_QWORD *)&v181 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_457:
            v207 = v181;
            v208 = 0x1020C405E66F15BLL;
            goto LABEL_512;
          case 8:
            v282 = v583[0];
            if (**(_QWORD **)&v583[0] == 1)
              goto LABEL_513;
            v314 = operator new();
            v315 = v583[0];
            *(_QWORD *)v314 = **(_QWORD **)&v583[0];
            *(_QWORD *)(v314 + 8) = *(_QWORD *)(*(_QWORD *)&v315 + 8);
            v316 = *(_QWORD *)(*(_QWORD *)&v315 + 16);
            *(_QWORD *)(v314 + 16) = v316;
            if (v316)
            {
              v317 = (unsigned int *)(v316 + 8);
              do
                v318 = __ldxr(v317);
              while (__stxr(v318 + 1, v317));
            }
            v319 = *(_OWORD *)(*(_QWORD *)&v315 + 24);
            v320 = *(_OWORD *)(*(_QWORD *)&v315 + 40);
            *(_OWORD *)(v314 + 56) = *(_OWORD *)(*(_QWORD *)&v315 + 56);
            *(_OWORD *)(v314 + 40) = v320;
            *(_OWORD *)(v314 + 24) = v319;
            *(_QWORD *)&v583[0] = v314;
            *(_QWORD *)v314 = 1;
            do
            {
              v321 = __ldaxr(*(unint64_t **)&v282);
              v291 = --v321 == 0;
            }
            while (__stlxr(v321, *(unint64_t **)&v282));
LABEL_464:
            if (!v291)
              goto LABEL_513;
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v282 + 16));
            v207 = v282;
            v325 = -235920773;
LABEL_467:
            v208 = v325 | 0x1030C4000000000;
LABEL_512:
            MEMORY[0x219A19A08](*(_QWORD *)&v207, v208);
LABEL_513:
            turi::flexible_type_fail(0);
            goto LABEL_514;
          case 9:
            v136 = v584;
            v137 = *(unint64_t **)&v583[0];
            if (**(_QWORD **)&v583[0] != 1)
            {
              v138 = (_QWORD *)operator new();
              v139 = *(_QWORD *)&v583[0] + 8;
              *v138 = **(_QWORD **)&v583[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v138 + 1, v139);
              *(_QWORD *)&v583[0] = v138;
              *v138 = 1;
              do
              {
                v140 = __ldaxr(v137);
                v141 = v140 - 1;
              }
              while (__stlxr(v141, v137));
              if (!v141)
              {
                v142 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v137);
                MEMORY[0x219A19A08](v142, 0x1030C407B73B9F7);
              }
            }
            v143 = v583[0];
            v144 = (uint64_t *)(*(_QWORD *)&v583[0] + 8);
            if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v583[0] + 8, *(_QWORD *)&v136 + 8))
              turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
            v146 = *(uint64_t **)(*(_QWORD *)&v143 + 24);
            v145 = *(uint64_t **)(*(_QWORD *)&v143 + 32);
            if (v145 == v146)
              goto LABEL_514;
            if (!*v144)
              goto LABEL_514;
            v147 = 1;
            do
            {
              v148 = *v146++;
              v147 *= v148;
            }
            while (v146 != v145);
            if (!v147)
              goto LABEL_514;
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v144);
            v149 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v143 + 32) - *(_QWORD *)(*(_QWORD *)&v143 + 24)) >> 3;
            __idx = 0;
            std::vector<unsigned long>::vector(&__p, v149, &__idx);
            v151 = __p.__r_.__value_.__l.__size_;
            v150 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
            break;
          default:
            goto LABEL_687;
        }
        break;
      default:
        goto LABEL_687;
    }
    while (1)
    {
      v152 = v13;
      v153 = v12;
      v154 = v151 - (_QWORD)v150;
      if (v154)
      {
        v155 = 0;
        v156 = v154 >> 3;
        v157 = *(uint64_t **)(*(_QWORD *)&v136 + 48);
        if (v156 <= 1)
          v156 = 1;
        v158 = v150;
        v159 = v156;
        do
        {
          v161 = *v158++;
          v160 = v161;
          v162 = *v157++;
          v155 += v162 * v160;
          --v159;
        }
        while (v159);
        v163 = 0;
        v164 = *(double *)(**(_QWORD **)(*(_QWORD *)&v136 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v136 + 72) + v155));
        v165 = *(uint64_t **)(*(_QWORD *)&v143 + 48);
        do
        {
          v167 = *v150++;
          v166 = v167;
          v168 = *v165++;
          v163 += v168 * v166;
          --v156;
        }
        while (v156);
      }
      else
      {
        v163 = 0;
        v164 = *(double *)(**(_QWORD **)(*(_QWORD *)&v136 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v136 + 72));
      }
      turi::flexible_type_impl::ndarray<double>::ensure_unique(v144);
      *(double *)(**(_QWORD **)(*(_QWORD *)&v143 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v143 + 72) + v163)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v143 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v143 + 72) + v163)) / v164;
      v151 = __p.__r_.__value_.__l.__size_;
      v150 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
      v169 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
      v170 = v169 - 1;
      if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) < 1)
      {
        v12 = v153;
        goto LABEL_176;
      }
      v171 = *(_QWORD *)(*(_QWORD *)&v143 + 24);
      v172 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v170) + 1;
      *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v170) = v172;
      v12 = v153;
      if (v172 >= *(_QWORD *)(v171 + 8 * v170))
        break;
      v169 = 1;
LABEL_176:
      v13 = v152;
      if (v170 < 0)
        goto LABEL_275;
LABEL_177:
      if (!v169)
        goto LABEL_275;
    }
    v173 = (unint64_t *)&v150[v169 - 2];
    v174 = v171 - 16;
    v13 = v152;
    while (1)
    {
      v175 = v169 - 1;
      v173[1] = 0;
      if (v169 - 1 <= 0)
        break;
      v176 = *v173 + 1;
      *v173-- = v176;
      v177 = *(_QWORD *)(v174 + 8 * v169--);
      if (v176 < v177)
      {
        v169 = 1;
        if (((v175 - 1) & 0x8000000000000000) == 0)
          goto LABEL_177;
        break;
      }
    }
LABEL_275:
    if (v150)
    {
LABEL_276:
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v150;
      operator delete(v150);
    }
LABEL_514:
    switch(BYTE4(v585))
    {
      case 2:
        v454 = *(unint64_t **)&v584;
        do
        {
          v455 = __ldaxr(v454);
          v456 = v455 - 1;
        }
        while (__stlxr(v456, v454));
        if (!v456)
        {
          v457 = v584;
          if (v584 != 0.0)
          {
            if (*(char *)(*(_QWORD *)&v584 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v584 + 8));
            v458 = v457;
            v459 = 0x1012C404EF22A49;
            goto LABEL_555;
          }
        }
        break;
      case 3:
        v471 = *(unint64_t **)&v584;
        do
        {
          v472 = __ldaxr(v471);
          v473 = v472 - 1;
        }
        while (__stlxr(v473, v471));
        if (!v473)
        {
          v474 = v584;
          if (v584 != 0.0)
          {
            v475 = *(void **)(*(_QWORD *)&v584 + 8);
            if (v475)
            {
              *(_QWORD *)(*(_QWORD *)&v584 + 16) = v475;
              operator delete(v475);
            }
            v458 = v474;
            v459 = 0x1080C409938AC02;
            goto LABEL_555;
          }
        }
        break;
      case 4:
        v460 = *(unint64_t **)&v584;
        do
        {
          v461 = __ldaxr(v460);
          v462 = v461 - 1;
        }
        while (__stlxr(v462, v460));
        if (!v462)
        {
          v463 = v584;
          if (v584 != 0.0)
          {
            __p.__r_.__value_.__r.__words[0] = *(_QWORD *)&v584 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_548;
          }
        }
        break;
      case 5:
        v476 = *(unint64_t **)&v584;
        do
        {
          v477 = __ldaxr(v476);
          v478 = v477 - 1;
        }
        while (__stlxr(v478, v476));
        if (!v478)
        {
          v463 = v584;
          if (v584 != 0.0)
          {
            __p.__r_.__value_.__r.__words[0] = *(_QWORD *)&v584 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_548:
            v458 = v463;
            v459 = 0x1020C405E66F15BLL;
            goto LABEL_555;
          }
        }
        break;
      case 8:
        v479 = *(unint64_t **)&v584;
        do
        {
          v480 = __ldaxr(v479);
          v481 = v480 - 1;
        }
        while (__stlxr(v481, v479));
        if (!v481)
        {
          v482 = v584;
          if (v584 != 0.0)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v584 + 16));
            v458 = v482;
            v470 = -235920773;
            goto LABEL_554;
          }
        }
        break;
      case 9:
        v464 = *(unint64_t **)&v584;
        do
        {
          v465 = __ldaxr(v464);
          v466 = v465 - 1;
        }
        while (__stlxr(v466, v464));
        if (!v466)
        {
          v467 = v584;
          if (v584 != 0.0)
          {
            v468 = *(void **)(*(_QWORD *)&v584 + 48);
            if (v468)
            {
              *(_QWORD *)(*(_QWORD *)&v584 + 56) = v468;
              operator delete(v468);
            }
            v469 = *(void **)(*(_QWORD *)&v467 + 24);
            if (v469)
            {
              *(_QWORD *)(*(_QWORD *)&v467 + 32) = v469;
              operator delete(v469);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v467 + 8);
            v458 = v467;
            v470 = 2071181815;
LABEL_554:
            v459 = v470 | 0x1030C4000000000;
LABEL_555:
            MEMORY[0x219A19A08](*(_QWORD *)&v458, v459);
          }
        }
        break;
      default:
        break;
    }
    v483 = 0.0;
    switch(BYTE4(v583[1]))
    {
      case 0:
        v483 = (double)*(uint64_t *)&v583[0];
        break;
      case 1:
        v483 = v583[0];
        break;
      case 2:
        v487 = v583[0];
        __idx = 0;
        v488 = (char *)(*(_QWORD *)&v583[0] + 8);
        if (*(char *)(*(_QWORD *)&v583[0] + 31) < 0)
          v488 = *(char **)(*(_QWORD *)&v583[0] + 8);
        std::string::basic_string[abi:ne180100]<0>(&__p, v488);
        v489 = std::stod(&__p, &__idx);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (*(char *)(*(_QWORD *)&v487 + 31) < 0)
          v490 = *(_QWORD *)(*(_QWORD *)&v487 + 16);
        else
          v490 = *(unsigned __int8 *)(*(_QWORD *)&v487 + 31);
        if (__idx != v490)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v575 = std::string::append(&v581, " cannot be interpreted as a float");
          v576 = *(_OWORD *)&v575->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v575->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v576;
          v575->__r_.__value_.__l.__size_ = 0;
          v575->__r_.__value_.__r.__words[2] = 0;
          v575->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &__p);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v497 = v489;
        v483 = v497;
        break;
      case 3:
        memset(&__p, 0, sizeof(__p));
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(*(_QWORD *)&v583[0] + 8), *(_QWORD *)(*(_QWORD *)&v583[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v583[0] + 16) - *(_QWORD *)(*(_QWORD *)&v583[0] + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        break;
      case 4:
        memset(&__p, 0, sizeof(__p));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(*(_QWORD *)&v583[0] + 8), *(uint64_t **)(*(_QWORD *)&v583[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v583[0] + 16) - *(_QWORD *)(*(_QWORD *)&v583[0] + 8)) >> 4);
        turi::flexible_type_fail(0);
        v581.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v581);
        break;
      case 5:
        memset(&__p, 0, sizeof(__p));
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(*(_QWORD *)&v583[0] + 8), *(uint64_t **)(*(_QWORD *)&v583[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v583[0] + 16) - *(_QWORD *)(*(_QWORD *)&v583[0] + 8)) >> 5);
        turi::flexible_type_fail(0);
        v581.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v581);
        break;
      case 6:
        v483 = (double)SLODWORD(v583[1]) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v583[0] << 8) >> 8);
        break;
      case 7:
        break;
      case 8:
        v491 = v583[0];
        v492 = *(_QWORD *)(*(_QWORD *)&v583[0] + 16);
        v584 = *(double *)(*(_QWORD *)&v583[0] + 8);
        v585 = v492;
        if (v492)
        {
          v493 = (unsigned int *)(v492 + 8);
          do
            v494 = __ldxr(v493);
          while (__stxr(v494 + 1, v493));
        }
        v495 = *(_OWORD *)(*(_QWORD *)&v491 + 24);
        v496 = *(_OWORD *)(*(_QWORD *)&v491 + 56);
        v13[1] = *(_OWORD *)(*(_QWORD *)&v491 + 40);
        v13[2] = v496;
        *v13 = v495;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count(v12);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)&v583[0] + 8);
        turi::flexible_type_fail(0);
        if (v579)
        {
          v580 = v579;
          operator delete(v579);
        }
        if (__p.__r_.__value_.__r.__words[2])
        {
          v578 = __p.__r_.__value_.__r.__words[2];
          operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        }
        v484 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v485 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v486 = __ldaxr(v485);
          while (__stlxr(v486 - 1, v485));
          if (!v486)
          {
            ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
            std::__shared_weak_count::__release_weak(v484);
          }
        }
        break;
      default:
        goto LABEL_687;
    }
    v498 = *((unsigned __int8 *)a3 + 12);
    switch(*((_BYTE *)a3 + 12))
    {
      case 2:
        v499 = (unint64_t *)*a3;
        if (*(_QWORD *)*a3 == 1)
          goto LABEL_687;
        v500 = (_QWORD *)operator new();
        v501 = (_QWORD *)*a3;
        *v500 = *(_QWORD *)*a3;
        v502 = (std::string *)(v500 + 1);
        if (*((char *)v501 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v502, (const std::string::value_type *)v501[1], v501[2]);
        }
        else
        {
          v503 = *(_OWORD *)(v501 + 1);
          v500[3] = v501[3];
          *(_OWORD *)&v502->__r_.__value_.__l.__data_ = v503;
        }
        *a3 = (uint64_t)v500;
        *v500 = 1;
        do
        {
          v539 = __ldaxr(v499);
          v540 = v539 - 1;
        }
        while (__stlxr(v540, v499));
        if (v540)
          goto LABEL_634;
        if (*((char *)v499 + 31) < 0)
          operator delete((void *)v499[1]);
        v516 = v499;
        v524 = 0x1012C404EF22A49;
        goto LABEL_633;
      case 3:
        v518 = (unint64_t *)*a3;
        if (*(_QWORD *)*a3 == 1)
          goto LABEL_638;
        v519 = (_QWORD *)operator new();
        v520 = (_QWORD *)*a3;
        *v519 = *(_QWORD *)*a3;
        v519[2] = 0;
        v519[3] = 0;
        v519[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v519 + 1, (const void *)v520[1], v520[2], (uint64_t)(v520[2] - v520[1]) >> 3);
        *a3 = (uint64_t)v519;
        *v519 = 1;
        do
        {
          v521 = __ldaxr(v518);
          v522 = v521 - 1;
        }
        while (__stlxr(v522, v518));
        if (v522)
          goto LABEL_634;
        v523 = (void *)v518[1];
        if (v523)
        {
          v518[2] = (unint64_t)v523;
          operator delete(v523);
        }
        v516 = v518;
        v524 = 0x1080C409938AC02;
        goto LABEL_633;
      case 4:
        v504 = (unint64_t *)*a3;
        if (*(_QWORD *)*a3 == 1)
          goto LABEL_687;
        v505 = (_QWORD *)operator new();
        v506 = (_QWORD *)*a3;
        *v505 = *(_QWORD *)*a3;
        v505[2] = 0;
        v505[3] = 0;
        v505[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v505 + 1, (uint64_t *)v506[1], (uint64_t *)v506[2], (uint64_t)(v506[2] - v506[1]) >> 4);
        *a3 = (uint64_t)v505;
        *v505 = 1;
        do
        {
          v507 = __ldaxr(v504);
          v508 = v507 - 1;
        }
        while (__stlxr(v508, v504));
        if (v508)
          goto LABEL_634;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v504 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_616;
      case 5:
        v504 = (unint64_t *)*a3;
        if (*(_QWORD *)*a3 == 1)
          goto LABEL_687;
        v525 = (_QWORD *)operator new();
        v526 = (_QWORD *)*a3;
        *v525 = *(_QWORD *)*a3;
        v525[2] = 0;
        v525[3] = 0;
        v525[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v525 + 1, (uint64_t *)v526[1], (uint64_t *)v526[2], (uint64_t)(v526[2] - v526[1]) >> 5);
        *a3 = (uint64_t)v525;
        *v525 = 1;
        do
        {
          v527 = __ldaxr(v504);
          v528 = v527 - 1;
        }
        while (__stlxr(v528, v504));
        if (v528)
          goto LABEL_634;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v504 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_616:
        v516 = v504;
        v524 = 0x1020C405E66F15BLL;
        goto LABEL_633;
      case 8:
        v529 = (_QWORD *)*a3;
        if (*(_QWORD *)*a3 == 1)
          goto LABEL_687;
        v530 = operator new();
        v531 = (_QWORD *)*a3;
        *(_QWORD *)v530 = *(_QWORD *)*a3;
        *(_QWORD *)(v530 + 8) = v531[1];
        v532 = v531[2];
        *(_QWORD *)(v530 + 16) = v532;
        if (v532)
        {
          v533 = (unsigned int *)(v532 + 8);
          do
            v534 = __ldxr(v533);
          while (__stxr(v534 + 1, v533));
        }
        v535 = *(_OWORD *)(v531 + 3);
        v536 = *(_OWORD *)(v531 + 5);
        *(_OWORD *)(v530 + 56) = *(_OWORD *)(v531 + 7);
        *(_OWORD *)(v530 + 40) = v536;
        *(_OWORD *)(v530 + 24) = v535;
        *a3 = v530;
        *(_QWORD *)v530 = 1;
        do
        {
          v537 = __ldaxr(v529);
          v538 = v537 - 1;
        }
        while (__stlxr(v538, v529));
        if (v538)
          goto LABEL_634;
        boost::detail::shared_count::~shared_count((unsigned int **)v529 + 2);
        v516 = v529;
        v517 = -235920773;
        goto LABEL_625;
      case 9:
        v509 = (unint64_t *)*a3;
        if (*(_QWORD *)*a3 == 1)
          goto LABEL_639;
        v510 = (_QWORD *)operator new();
        v511 = *a3 + 8;
        *v510 = *(_QWORD *)*a3;
        turi::flexible_type_impl::ndarray<double>::ndarray(v510 + 1, v511);
        *a3 = (uint64_t)v510;
        *v510 = 1;
        do
        {
          v512 = __ldaxr(v509);
          v513 = v512 - 1;
        }
        while (__stlxr(v513, v509));
        if (v513)
          goto LABEL_634;
        v514 = (void *)v509[6];
        if (v514)
        {
          v509[7] = (unint64_t)v514;
          operator delete(v514);
        }
        v515 = (void *)v509[3];
        if (v515)
        {
          v509[4] = (unint64_t)v515;
          operator delete(v515);
        }
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v509 + 1));
        v516 = v509;
        v517 = 2071181815;
LABEL_625:
        v524 = v517 | 0x1030C4000000000;
LABEL_633:
        MEMORY[0x219A19A08](v516, v524);
LABEL_634:
        v498 = *((unsigned __int8 *)a3 + 12);
LABEL_635:
        if (v498 == 1)
        {
          v544 = (double *)a3;
          if (v11)
          {
LABEL_687:
            turi::flexible_type_fail(0);
            __break(1u);
          }
        }
        else
        {
          if (v498 == 9)
          {
LABEL_639:
            v543 = (_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*a3 + 8));
            v541 = (_QWORD *)v543[1];
            v542 = v543[9] + v11;
          }
          else
          {
            if (v498 != 3)
              goto LABEL_687;
LABEL_638:
            v541 = (_QWORD *)(*a3 + 8);
            v542 = v11;
          }
          v544 = (double *)(*v541 + 8 * v542);
        }
        *v544 = v483;
        switch(BYTE4(v583[1]))
        {
          case 2:
            v545 = *(unint64_t **)&v583[0];
            do
            {
              v546 = __ldaxr(v545);
              v547 = v546 - 1;
            }
            while (__stlxr(v547, v545));
            if (!v547)
            {
              v548 = v583[0];
              if (*(_QWORD *)&v583[0])
              {
                if (*(char *)(*(_QWORD *)&v583[0] + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)&v583[0] + 8));
                v549 = v548;
                v550 = 0x1012C404EF22A49;
                goto LABEL_683;
              }
            }
            break;
          case 3:
            v562 = *(unint64_t **)&v583[0];
            do
            {
              v563 = __ldaxr(v562);
              v564 = v563 - 1;
            }
            while (__stlxr(v564, v562));
            if (!v564)
            {
              v565 = v583[0];
              if (*(_QWORD *)&v583[0])
              {
                v566 = *(void **)(*(_QWORD *)&v583[0] + 8);
                if (v566)
                {
                  *(_QWORD *)(*(_QWORD *)&v583[0] + 16) = v566;
                  operator delete(v566);
                }
                v549 = v565;
                v550 = 0x1080C409938AC02;
                goto LABEL_683;
              }
            }
            break;
          case 4:
            v551 = *(unint64_t **)&v583[0];
            do
            {
              v552 = __ldaxr(v551);
              v553 = v552 - 1;
            }
            while (__stlxr(v553, v551));
            if (!v553)
            {
              v554 = v583[0];
              if (*(_QWORD *)&v583[0])
              {
                __p.__r_.__value_.__r.__words[0] = *(_QWORD *)&v583[0] + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                goto LABEL_676;
              }
            }
            break;
          case 5:
            v567 = *(unint64_t **)&v583[0];
            do
            {
              v568 = __ldaxr(v567);
              v569 = v568 - 1;
            }
            while (__stlxr(v569, v567));
            if (!v569)
            {
              v554 = v583[0];
              if (*(_QWORD *)&v583[0])
              {
                __p.__r_.__value_.__r.__words[0] = *(_QWORD *)&v583[0] + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_676:
                v549 = v554;
                v550 = 0x1020C405E66F15BLL;
                goto LABEL_683;
              }
            }
            break;
          case 8:
            v570 = *(unint64_t **)&v583[0];
            do
            {
              v571 = __ldaxr(v570);
              v572 = v571 - 1;
            }
            while (__stlxr(v572, v570));
            if (!v572)
            {
              v573 = v583[0];
              if (*(_QWORD *)&v583[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v583[0] + 16));
                v549 = v573;
                v561 = -235920773;
                goto LABEL_682;
              }
            }
            break;
          case 9:
            v555 = *(unint64_t **)&v583[0];
            do
            {
              v556 = __ldaxr(v555);
              v557 = v556 - 1;
            }
            while (__stlxr(v557, v555));
            if (!v557)
            {
              v558 = v583[0];
              if (*(_QWORD *)&v583[0])
              {
                v559 = *(void **)(*(_QWORD *)&v583[0] + 48);
                if (v559)
                {
                  *(_QWORD *)(*(_QWORD *)&v583[0] + 56) = v559;
                  operator delete(v559);
                }
                v560 = *(void **)(*(_QWORD *)&v558 + 24);
                if (v560)
                {
                  *(_QWORD *)(*(_QWORD *)&v558 + 32) = v560;
                  operator delete(v560);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v558 + 8);
                v549 = v558;
                v561 = 2071181815;
LABEL_682:
                v550 = v561 | 0x1030C4000000000;
LABEL_683:
                MEMORY[0x219A19A08](*(_QWORD *)&v549, v550);
              }
            }
            break;
          default:
            break;
        }
        ++v11;
        break;
      default:
        goto LABEL_635;
    }
  }
}

void sub_218267220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,char a31,uint64_t a32,int a33,char a34)
{
  unint64_t **v34;
  uint64_t v35;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t *v106;
  void *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;

  MEMORY[0x219A19A08](v35, 0x1012C404EF22A49);
  switch(a31)
  {
    case 2:
      v37 = (unint64_t *)a29;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_39;
      v40 = a29;
      if (!a29)
        goto LABEL_39;
      if (*(char *)(a29 + 31) < 0)
        operator delete(*(void **)(a29 + 8));
      v41 = (_QWORD *)v40;
      v42 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v51 = (unint64_t *)a29;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (v53)
        goto LABEL_39;
      v54 = a29;
      if (!a29)
        goto LABEL_39;
      v55 = *(void **)(a29 + 8);
      if (v55)
      {
        *(_QWORD *)(a29 + 16) = v55;
        operator delete(v55);
      }
      v41 = (_QWORD *)v54;
      v42 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v43 = (unint64_t *)a29;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = a29;
      if (!a29)
        goto LABEL_39;
      a22 = (void *)(a29 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      goto LABEL_31;
    case 5:
      v56 = (unint64_t *)a29;
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (v58)
        goto LABEL_39;
      v46 = a29;
      if (!a29)
        goto LABEL_39;
      a22 = (void *)(a29 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_31:
      v41 = (_QWORD *)v46;
      v42 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v59 = (unint64_t *)a29;
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (v61)
        goto LABEL_39;
      v62 = a29;
      if (!a29)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(a29 + 16));
      v41 = (_QWORD *)v62;
      v50 = -235920773;
      goto LABEL_37;
    case 9:
      v47 = (unint64_t *)a29;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (v49 || !a29)
        goto LABEL_39;
      v41 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a29);
      v50 = 2071181815;
LABEL_37:
      v42 = v50 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v41, v42);
LABEL_39:
      a29 = 0;
      a30 = 0;
      a31 = 0;
      switch(a34)
      {
        case 2:
          v63 = (unint64_t *)a32;
          do
          {
            v64 = __ldaxr(v63);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v63));
          if (v65)
            goto LABEL_77;
          v66 = a32;
          if (!a32)
            goto LABEL_77;
          if (*(char *)(a32 + 31) < 0)
            operator delete(*(void **)(a32 + 8));
          v67 = (_QWORD *)v66;
          v68 = 0x1012C404EF22A49;
          goto LABEL_76;
        case 3:
          v77 = (unint64_t *)a32;
          do
          {
            v78 = __ldaxr(v77);
            v79 = v78 - 1;
          }
          while (__stlxr(v79, v77));
          if (v79)
            goto LABEL_77;
          v80 = a32;
          if (!a32)
            goto LABEL_77;
          v81 = *(void **)(a32 + 8);
          if (v81)
          {
            *(_QWORD *)(a32 + 16) = v81;
            operator delete(v81);
          }
          v67 = (_QWORD *)v80;
          v68 = 0x1080C409938AC02;
          goto LABEL_76;
        case 4:
          v69 = (unint64_t *)a32;
          do
          {
            v70 = __ldaxr(v69);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, v69));
          if (v71)
            goto LABEL_77;
          v72 = a32;
          if (!a32)
            goto LABEL_77;
          a22 = (void *)(a32 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
          goto LABEL_69;
        case 5:
          v82 = (unint64_t *)a32;
          do
          {
            v83 = __ldaxr(v82);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, v82));
          if (v84)
            goto LABEL_77;
          v72 = a32;
          if (!a32)
            goto LABEL_77;
          a22 = (void *)(a32 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_69:
          v67 = (_QWORD *)v72;
          v68 = 0x1020C405E66F15BLL;
          goto LABEL_76;
        case 8:
          v85 = (unint64_t *)a32;
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (v87)
            goto LABEL_77;
          v88 = a32;
          if (!a32)
            goto LABEL_77;
          boost::detail::shared_count::~shared_count((unsigned int **)(a32 + 16));
          v67 = (_QWORD *)v88;
          v76 = -235920773;
          goto LABEL_75;
        case 9:
          v73 = (unint64_t *)a32;
          do
          {
            v74 = __ldaxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (v75 || !a32)
            goto LABEL_77;
          v67 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a32);
          v76 = 2071181815;
LABEL_75:
          v68 = v76 | 0x1030C4000000000;
LABEL_76:
          MEMORY[0x219A19A08](v67, v68);
LABEL_77:
          switch(*((_BYTE *)v34 + 12))
          {
            case 2:
              v89 = *v34;
              do
              {
                v90 = __ldaxr(v89);
                v91 = v90 - 1;
              }
              while (__stlxr(v91, v89));
              if (v91)
                goto LABEL_116;
              v92 = *v34;
              if (!*v34)
                goto LABEL_115;
              if (*((char *)v92 + 31) < 0)
                operator delete((void *)v92[1]);
              v93 = v92;
              v94 = 0x1012C404EF22A49;
              goto LABEL_114;
            case 3:
              v103 = *v34;
              do
              {
                v104 = __ldaxr(v103);
                v105 = v104 - 1;
              }
              while (__stlxr(v105, v103));
              if (v105)
                goto LABEL_116;
              v106 = *v34;
              if (!*v34)
                goto LABEL_115;
              v107 = (void *)v106[1];
              if (v107)
              {
                v106[2] = (unint64_t)v107;
                operator delete(v107);
              }
              v93 = v106;
              v94 = 0x1080C409938AC02;
              goto LABEL_114;
            case 4:
              v95 = *v34;
              do
              {
                v96 = __ldaxr(v95);
                v97 = v96 - 1;
              }
              while (__stlxr(v97, v95));
              if (v97)
                goto LABEL_116;
              v98 = *v34;
              if (!*v34)
                goto LABEL_115;
              a22 = v98 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
              goto LABEL_107;
            case 5:
              v108 = *v34;
              do
              {
                v109 = __ldaxr(v108);
                v110 = v109 - 1;
              }
              while (__stlxr(v110, v108));
              if (v110)
                goto LABEL_116;
              v98 = *v34;
              if (!*v34)
                goto LABEL_115;
              a22 = v98 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_107:
              v93 = v98;
              v94 = 0x1020C405E66F15BLL;
              goto LABEL_114;
            case 8:
              v111 = *v34;
              do
              {
                v112 = __ldaxr(v111);
                v113 = v112 - 1;
              }
              while (__stlxr(v113, v111));
              if (v113)
                goto LABEL_116;
              v114 = *v34;
              if (!*v34)
                goto LABEL_115;
              boost::detail::shared_count::~shared_count((unsigned int **)v114 + 2);
              v93 = v114;
              v102 = -235920773;
              goto LABEL_113;
            case 9:
              v99 = *v34;
              do
              {
                v100 = __ldaxr(v99);
                v101 = v100 - 1;
              }
              while (__stlxr(v101, v99));
              if (v101)
                goto LABEL_116;
              if (!*v34)
                goto LABEL_115;
              v93 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v34);
              v102 = 2071181815;
LABEL_113:
              v94 = v102 | 0x1030C4000000000;
LABEL_114:
              MEMORY[0x219A19A08](v93, v94);
LABEL_115:
              *v34 = 0;
LABEL_116:
              *v34 = 0;
              *((_DWORD *)v34 + 2) = 0;
              *((_BYTE *)v34 + 12) = 0;
              _Unwind_Resume(a1);
              return;
            default:
              goto LABEL_116;
          }
        default:
          goto LABEL_77;
      }
    default:
      goto LABEL_39;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934318;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934318;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22::operator()(a1, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_22::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  void **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  void *v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void **v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  unint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  __int128 v196;
  __int128 v197;
  unint64_t v198;
  BOOL v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  double v212;
  _QWORD *v213;
  unint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  __int128 v222;
  __int128 v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unsigned int v228;
  _QWORD *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  __int128 v236;
  __int128 v237;
  unint64_t v238;
  _QWORD *v239;
  unint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t *v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  void *v247;
  double *v248;
  uint64_t v249;
  unint64_t v250;
  double v251;
  unint64_t *v252;
  _QWORD *v253;
  unint64_t v254;
  unint64_t v255;
  void *v256;
  double *v257;
  uint64_t v258;
  double v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  __int128 v278;
  __int128 v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int *v290;
  unsigned int v291;
  __int128 v292;
  __int128 v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int *v298;
  unsigned int v299;
  __int128 v300;
  __int128 v301;
  unint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  __int128 v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  void **v334;
  void **v335;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((uint64_t *)a1 != a3)
  {
    *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a1 + 5);
    *a3 = *(_QWORD *)a1;
    v5 = *(unsigned __int8 *)(a1 + 12);
    *((_BYTE *)a3 + 12) = v5;
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x33C;
    if (!v6 && v7 != 0)
    {
      v9 = (unint64_t *)*a3;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = *a3 / *(_QWORD *)a2;
          goto LABEL_38;
        case 1:
          v212 = (double)*(uint64_t *)a2;
          goto LABEL_253;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v106 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v106, *a3);
          *a3 = (uint64_t)v106;
          *v106 = 1;
          do
          {
            v107 = __ldaxr((unint64_t *)v12);
            v15 = --v107 == 0;
          }
          while (__stlxr(v107, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v243 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v244 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v244, *a3);
            *a3 = (uint64_t)v244;
            *v244 = 1;
            do
            {
              v245 = __ldaxr(v243);
              v246 = v245 - 1;
            }
            while (__stlxr(v246, v243));
            if (!v246)
            {
              v247 = (void *)v243[1];
              if (v247)
              {
                v243[2] = (unint64_t)v247;
                operator delete(v247);
              }
              MEMORY[0x219A19A08](v243, 0x1080C409938AC02);
            }
          }
          v248 = *(double **)(*a3 + 8);
          v249 = *(_QWORD *)(*a3 + 16) - (_QWORD)v248;
          if (v249)
          {
            v250 = v249 >> 3;
            v251 = (double)*(uint64_t *)a2;
            if (v250 <= 1)
              v250 = 1;
            do
            {
              *v248 = *v248 / v251;
              ++v248;
              --v250;
            }
            while (v250);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v283 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v283, *a3);
          *a3 = (uint64_t)v283;
          *v283 = 1;
          do
          {
            v284 = __ldaxr((unint64_t *)v100);
            v189 = --v284 == 0;
          }
          while (__stlxr(v284, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v213 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v213, *a3);
          *a3 = (uint64_t)v213;
          *v213 = 1;
          do
          {
            v214 = __ldaxr((unint64_t *)v100);
            v103 = --v214 == 0;
          }
          while (__stlxr(v214, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v287 = operator new();
          v288 = *a3;
          *(_QWORD *)v287 = *(_QWORD *)*a3;
          *(_QWORD *)(v287 + 8) = *(_QWORD *)(v288 + 8);
          v289 = *(_QWORD *)(v288 + 16);
          *(_QWORD *)(v287 + 16) = v289;
          if (v289)
          {
            v290 = (unsigned int *)(v289 + 8);
            do
              v291 = __ldxr(v290);
            while (__stxr(v291 + 1, v290));
          }
          v292 = *(_OWORD *)(v288 + 24);
          v293 = *(_OWORD *)(v288 + 40);
          *(_OWORD *)(v287 + 56) = *(_OWORD *)(v288 + 56);
          *(_OWORD *)(v287 + 40) = v293;
          *(_OWORD *)(v287 + 24) = v292;
          *a3 = v287;
          *(_QWORD *)v287 = 1;
          do
          {
            v294 = __ldaxr((unint64_t *)v190);
            v199 = --v294 == 0;
          }
          while (__stlxr(v294, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v125 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v126 = (_QWORD *)operator new();
            v127 = *a3 + 8;
            *v126 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
            *a3 = (uint64_t)v126;
            *v126 = 1;
            do
            {
              v128 = __ldaxr(v125);
              v129 = v128 - 1;
            }
            while (__stlxr(v129, v125));
            if (!v129)
            {
              v130 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v125);
              MEMORY[0x219A19A08](v130, 0x1030C407B73B9F7);
            }
          }
          v131 = (uint64_t *)*a3;
          v133 = *(uint64_t **)(*a3 + 24);
          v132 = *(uint64_t **)(*a3 + 32);
          if (v132 == v133)
            return;
          if (!v131[1])
            return;
          v134 = (double)*(uint64_t *)a2;
          v135 = 1;
          do
          {
            v136 = *v133++;
            v135 *= v136;
          }
          while (v133 != v132);
          if (!v135)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
          v137 = (v131[4] - v131[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v137, &v333);
          v71 = v334;
          v138 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v139 = 0;
        v140 = (char *)v138 - (char *)v71;
        if (v140)
        {
          v141 = v140 >> 3;
          v142 = (uint64_t *)v131[6];
          if (v141 <= 1)
            v141 = 1;
          do
          {
            v144 = (uint64_t)*v71++;
            v143 = v144;
            v145 = *v142++;
            v139 += v145 * v143;
            --v141;
          }
          while (v141);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v131 + 1);
        *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139)) = *(double *)(*(_QWORD *)v131[1] + 8 * (v131[9] + v139))
                                                               / v134;
        v71 = v334;
        v138 = v335;
        v146 = v335 - v334;
        v147 = v146 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_187;
        v148 = v131[3];
        v149 = (char *)v334[v147] + 1;
        v334[v147] = v149;
        if ((unint64_t)v149 < *(_QWORD *)(v148 + 8 * v147))
        {
LABEL_186:
          v146 = 1;
LABEL_187:
          if (v147 < 0 || !v146)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v150 = (unint64_t *)&v71[v146 - 2];
      v151 = v148 - 16;
      while (1)
      {
        v152 = v146 - 1;
        v150[1] = 0;
        if (v146 - 1 <= 0)
          goto LABEL_215;
        v153 = *v150 + 1;
        *v150-- = v153;
        v154 = *(_QWORD *)(v151 + 8 * v146--);
        if (v153 < v154)
        {
          v147 = v152 - 1;
          goto LABEL_186;
        }
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v11 = (uint64_t)((double)*a3 / *(double *)a2);
LABEL_38:
          *a3 = v11;
          return;
        case 1:
          v212 = *(double *)a2;
LABEL_253:
          *(double *)a3 = *(double *)a3 / v212;
          return;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v108 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v108, *a3);
          *a3 = (uint64_t)v108;
          *v108 = 1;
          do
          {
            v109 = __ldaxr((unint64_t *)v12);
            v15 = --v109 == 0;
          }
          while (__stlxr(v109, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v252 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v253 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v253, *a3);
            *a3 = (uint64_t)v253;
            *v253 = 1;
            do
            {
              v254 = __ldaxr(v252);
              v255 = v254 - 1;
            }
            while (__stlxr(v255, v252));
            if (!v255)
            {
              v256 = (void *)v252[1];
              if (v256)
              {
                v252[2] = (unint64_t)v256;
                operator delete(v256);
              }
              MEMORY[0x219A19A08](v252, 0x1080C409938AC02);
            }
          }
          v257 = *(double **)(*a3 + 8);
          v258 = *(_QWORD *)(*a3 + 16) - (_QWORD)v257;
          if (v258)
          {
            v259 = *(double *)a2;
            v260 = v258 >> 3;
            if (v260 <= 1)
              v260 = 1;
            do
            {
              *v257 = *v257 / v259;
              ++v257;
              --v260;
            }
            while (v260);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v285, *a3);
          *a3 = (uint64_t)v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr((unint64_t *)v100);
            v189 = --v286 == 0;
          }
          while (__stlxr(v286, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v215 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v215, *a3);
          *a3 = (uint64_t)v215;
          *v215 = 1;
          do
          {
            v216 = __ldaxr((unint64_t *)v100);
            v103 = --v216 == 0;
          }
          while (__stlxr(v216, (unint64_t *)v100));
          goto LABEL_343;
        case 6:
        case 7:
          goto LABEL_408;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v295 = operator new();
          v296 = *a3;
          *(_QWORD *)v295 = *(_QWORD *)*a3;
          *(_QWORD *)(v295 + 8) = *(_QWORD *)(v296 + 8);
          v297 = *(_QWORD *)(v296 + 16);
          *(_QWORD *)(v295 + 16) = v297;
          if (v297)
          {
            v298 = (unsigned int *)(v297 + 8);
            do
              v299 = __ldxr(v298);
            while (__stxr(v299 + 1, v298));
          }
          v300 = *(_OWORD *)(v296 + 24);
          v301 = *(_OWORD *)(v296 + 40);
          *(_OWORD *)(v295 + 56) = *(_OWORD *)(v296 + 56);
          *(_OWORD *)(v295 + 40) = v301;
          *(_OWORD *)(v295 + 24) = v300;
          *a3 = v295;
          *(_QWORD *)v295 = 1;
          do
          {
            v302 = __ldaxr((unint64_t *)v190);
            v199 = --v302 == 0;
          }
          while (__stlxr(v302, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v155 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v156 = (_QWORD *)operator new();
            v157 = *a3 + 8;
            *v156 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v156 + 1, v157);
            *a3 = (uint64_t)v156;
            *v156 = 1;
            do
            {
              v158 = __ldaxr(v155);
              v159 = v158 - 1;
            }
            while (__stlxr(v159, v155));
            if (!v159)
            {
              v160 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v155);
              MEMORY[0x219A19A08](v160, 0x1030C407B73B9F7);
            }
          }
          v161 = (uint64_t *)*a3;
          v163 = *(uint64_t **)(*a3 + 24);
          v162 = *(uint64_t **)(*a3 + 32);
          if (v162 == v163)
            return;
          if (!v161[1])
            return;
          v164 = *(double *)a2;
          v165 = 1;
          do
          {
            v166 = *v163++;
            v165 *= v166;
          }
          while (v163 != v162);
          if (!v165)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
          v167 = (v161[4] - v161[3]) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v167, &v333);
          v71 = v334;
          v168 = v335;
          break;
        default:
          goto LABEL_411;
      }
      while (2)
      {
        v169 = 0;
        v170 = (char *)v168 - (char *)v71;
        if (v170)
        {
          v171 = v170 >> 3;
          v172 = (uint64_t *)v161[6];
          if (v171 <= 1)
            v171 = 1;
          do
          {
            v174 = (uint64_t)*v71++;
            v173 = v174;
            v175 = *v172++;
            v169 += v175 * v173;
            --v171;
          }
          while (v171);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v161 + 1);
        *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169)) = *(double *)(*(_QWORD *)v161[1] + 8 * (v161[9] + v169))
                                                               / v164;
        v71 = v334;
        v168 = v335;
        v176 = v335 - v334;
        v177 = v176 - 1;
        if ((char *)v335 - (char *)v334 < 1)
          goto LABEL_212;
        v178 = v161[3];
        v179 = (char *)v334[v177] + 1;
        v334[v177] = v179;
        if ((unint64_t)v179 < *(_QWORD *)(v178 + 8 * v177))
        {
LABEL_211:
          v176 = 1;
LABEL_212:
          if (v177 < 0 || !v176)
            goto LABEL_214;
          continue;
        }
        break;
      }
      v180 = (unint64_t *)&v71[v176 - 2];
      v181 = v178 - 16;
      while (1)
      {
        v182 = v176 - 1;
        v180[1] = 0;
        if (v176 - 1 <= 0)
          goto LABEL_215;
        v183 = *v180 + 1;
        *v180-- = v183;
        v184 = *(_QWORD *)(v181 + 8 * v176--);
        if (v183 < v184)
        {
          v177 = v182 - 1;
          goto LABEL_211;
        }
      }
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v18 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, *a3);
          *a3 = (uint64_t)v18;
          *v18 = 1;
          do
          {
            v19 = __ldaxr((unint64_t *)v12);
            v15 = --v19 == 0;
          }
          while (__stlxr(v19, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v36 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v36, *a3);
          *a3 = (uint64_t)v36;
          *v36 = 1;
          do
          {
            v37 = __ldaxr(v30);
            v33 = --v37 == 0;
          }
          while (__stlxr(v37, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v229, *a3);
          *a3 = (uint64_t)v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr((unint64_t *)v100);
            v189 = --v230 == 0;
          }
          while (__stlxr(v230, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v185 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v185, *a3);
          *a3 = (uint64_t)v185;
          *v185 = 1;
          do
          {
            v186 = __ldaxr((unint64_t *)v100);
            v103 = --v186 == 0;
          }
          while (__stlxr(v186, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v231 = operator new();
          v232 = *a3;
          *(_QWORD *)v231 = *(_QWORD *)*a3;
          *(_QWORD *)(v231 + 8) = *(_QWORD *)(v232 + 8);
          v233 = *(_QWORD *)(v232 + 16);
          *(_QWORD *)(v231 + 16) = v233;
          if (v233)
          {
            v234 = (unsigned int *)(v233 + 8);
            do
              v235 = __ldxr(v234);
            while (__stxr(v235 + 1, v234));
          }
          v236 = *(_OWORD *)(v232 + 24);
          v237 = *(_OWORD *)(v232 + 40);
          *(_OWORD *)(v231 + 56) = *(_OWORD *)(v232 + 56);
          *(_OWORD *)(v231 + 40) = v237;
          *(_OWORD *)(v231 + 24) = v236;
          *a3 = v231;
          *(_QWORD *)v231 = 1;
          do
          {
            v238 = __ldaxr((unint64_t *)v190);
            v199 = --v238 == 0;
          }
          while (__stlxr(v238, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v97 = (_QWORD *)operator new();
          v98 = *a3 + 8;
          *v97 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, v98);
          *a3 = (uint64_t)v97;
          *v97 = 1;
          do
          {
            v99 = __ldaxr(v38);
            v42 = --v99 == 0;
          }
          while (__stlxr(v99, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v20 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, *a3);
          *a3 = (uint64_t)v20;
          *v20 = 1;
          do
          {
            v21 = __ldaxr((unint64_t *)v12);
            v15 = --v21 == 0;
          }
          while (__stlxr(v21, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v43 = *(_QWORD *)a2;
          v44 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v45 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v45, *a3);
            *a3 = (uint64_t)v45;
            *v45 = 1;
            do
            {
              v46 = __ldaxr(v44);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v44));
            if (!v47)
            {
              v48 = (void *)v44[1];
              if (v48)
              {
                v44[2] = (unint64_t)v48;
                operator delete(v48);
              }
              MEMORY[0x219A19A08](v44, 0x1080C409938AC02);
            }
          }
          v49 = *a3;
          turi::flexible_type_fail(*(_QWORD *)(*a3 + 16) - *(_QWORD *)(*a3 + 8) == *(_QWORD *)(v43 + 16)
                                                                                 - *(_QWORD *)(v43 + 8));
          v50 = *(double **)(v49 + 8);
          v51 = *(_QWORD *)(v49 + 16) - (_QWORD)v50;
          if (v51)
          {
            v52 = v51 >> 3;
            v53 = *(double **)(v43 + 8);
            if (v52 <= 1)
              v52 = 1;
            do
            {
              v54 = *v53++;
              *v50 = *v50 / v54;
              ++v50;
              --v52;
            }
            while (v52);
          }
          return;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v241 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v241, *a3);
          *a3 = (uint64_t)v241;
          *v241 = 1;
          do
          {
            v242 = __ldaxr((unint64_t *)v100);
            v189 = --v242 == 0;
          }
          while (__stlxr(v242, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v203 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v203, *a3);
          *a3 = (uint64_t)v203;
          *v203 = 1;
          do
          {
            v204 = __ldaxr((unint64_t *)v100);
            v103 = --v204 == 0;
          }
          while (__stlxr(v204, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v265 = operator new();
          v266 = *a3;
          *(_QWORD *)v265 = *(_QWORD *)*a3;
          *(_QWORD *)(v265 + 8) = *(_QWORD *)(v266 + 8);
          v267 = *(_QWORD *)(v266 + 16);
          *(_QWORD *)(v265 + 16) = v267;
          if (v267)
          {
            v268 = (unsigned int *)(v267 + 8);
            do
              v269 = __ldxr(v268);
            while (__stxr(v269 + 1, v268));
          }
          v270 = *(_OWORD *)(v266 + 24);
          v271 = *(_OWORD *)(v266 + 40);
          *(_OWORD *)(v265 + 56) = *(_OWORD *)(v266 + 56);
          *(_OWORD *)(v265 + 40) = v271;
          *(_OWORD *)(v265 + 24) = v270;
          *a3 = v265;
          *(_QWORD *)v265 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v190);
            v199 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v114 = (_QWORD *)operator new();
          v115 = *a3 + 8;
          *v114 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v114 + 1, v115);
          *a3 = (uint64_t)v114;
          *v114 = 1;
          do
          {
            v116 = __ldaxr(v38);
            v42 = --v116 == 0;
          }
          while (__stlxr(v116, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, *a3);
          *a3 = (uint64_t)v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr((unint64_t *)v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v31 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v31, *a3);
          *a3 = (uint64_t)v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(v30);
            v33 = --v32 == 0;
          }
          while (__stlxr(v32, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v187 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v187, *a3);
          *a3 = (uint64_t)v187;
          *v187 = 1;
          do
          {
            v188 = __ldaxr((unint64_t *)v100);
            v189 = --v188 == 0;
          }
          while (__stlxr(v188, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v101 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v101, *a3);
          *a3 = (uint64_t)v101;
          *v101 = 1;
          do
          {
            v102 = __ldaxr((unint64_t *)v100);
            v103 = --v102 == 0;
          }
          while (__stlxr(v102, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v191 = operator new();
          v192 = *a3;
          *(_QWORD *)v191 = *(_QWORD *)*a3;
          *(_QWORD *)(v191 + 8) = *(_QWORD *)(v192 + 8);
          v193 = *(_QWORD *)(v192 + 16);
          *(_QWORD *)(v191 + 16) = v193;
          if (v193)
          {
            v194 = (unsigned int *)(v193 + 8);
            do
              v195 = __ldxr(v194);
            while (__stxr(v195 + 1, v194));
          }
          v196 = *(_OWORD *)(v192 + 24);
          v197 = *(_OWORD *)(v192 + 40);
          *(_OWORD *)(v191 + 56) = *(_OWORD *)(v192 + 56);
          *(_OWORD *)(v191 + 40) = v197;
          *(_OWORD *)(v191 + 24) = v196;
          *a3 = v191;
          *(_QWORD *)v191 = 1;
          do
          {
            v198 = __ldaxr((unint64_t *)v190);
            v199 = --v198 == 0;
          }
          while (__stlxr(v198, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v39 = (_QWORD *)operator new();
          v40 = *a3 + 8;
          *v39 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
          *a3 = (uint64_t)v39;
          *v39 = 1;
          do
          {
            v41 = __ldaxr(v38);
            v42 = --v41 == 0;
          }
          while (__stlxr(v41, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v24 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, *a3);
          *a3 = (uint64_t)v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr((unint64_t *)v12);
            v15 = --v25 == 0;
          }
          while (__stlxr(v25, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v104 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v104, *a3);
          *a3 = (uint64_t)v104;
          *v104 = 1;
          do
          {
            v105 = __ldaxr(v30);
            v33 = --v105 == 0;
          }
          while (__stlxr(v105, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v303 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v303, *a3);
          *a3 = (uint64_t)v303;
          *v303 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v100);
            v189 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v239 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v239, *a3);
          *a3 = (uint64_t)v239;
          *v239 = 1;
          do
          {
            v240 = __ldaxr((unint64_t *)v100);
            v103 = --v240 == 0;
          }
          while (__stlxr(v240, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v305 = operator new();
          v306 = *a3;
          *(_QWORD *)v305 = *(_QWORD *)*a3;
          *(_QWORD *)(v305 + 8) = *(_QWORD *)(v306 + 8);
          v307 = *(_QWORD *)(v306 + 16);
          *(_QWORD *)(v305 + 16) = v307;
          if (v307)
          {
            v308 = (unsigned int *)(v307 + 8);
            do
              v309 = __ldxr(v308);
            while (__stxr(v309 + 1, v308));
          }
          v310 = *(_OWORD *)(v306 + 24);
          v311 = *(_OWORD *)(v306 + 40);
          *(_OWORD *)(v305 + 56) = *(_OWORD *)(v306 + 56);
          *(_OWORD *)(v305 + 40) = v311;
          *(_OWORD *)(v305 + 24) = v310;
          *a3 = v305;
          *(_QWORD *)v305 = 1;
          do
          {
            v312 = __ldaxr((unint64_t *)v190);
            v199 = --v312 == 0;
          }
          while (__stlxr(v312, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v200 = (_QWORD *)operator new();
          v201 = *a3 + 8;
          *v200 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v200 + 1, v201);
          *a3 = (uint64_t)v200;
          *v200 = 1;
          do
          {
            v202 = __ldaxr(v38);
            v42 = --v202 == 0;
          }
          while (__stlxr(v202, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, *a3);
          *a3 = (uint64_t)v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr((unint64_t *)v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v112 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v112, *a3);
          *a3 = (uint64_t)v112;
          *v112 = 1;
          do
          {
            v113 = __ldaxr(v30);
            v33 = --v113 == 0;
          }
          while (__stlxr(v113, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v313 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v313, *a3);
          *a3 = (uint64_t)v313;
          *v313 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v100);
            v189 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, *a3);
          *a3 = (uint64_t)v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v100);
            v103 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v315 = operator new();
          v316 = *a3;
          *(_QWORD *)v315 = *(_QWORD *)*a3;
          *(_QWORD *)(v315 + 8) = *(_QWORD *)(v316 + 8);
          v317 = *(_QWORD *)(v316 + 16);
          *(_QWORD *)(v315 + 16) = v317;
          if (v317)
          {
            v318 = (unsigned int *)(v317 + 8);
            do
              v319 = __ldxr(v318);
            while (__stxr(v319 + 1, v318));
          }
          v320 = *(_OWORD *)(v316 + 24);
          v321 = *(_OWORD *)(v316 + 40);
          *(_OWORD *)(v315 + 56) = *(_OWORD *)(v316 + 56);
          *(_OWORD *)(v315 + 40) = v321;
          *(_OWORD *)(v315 + 24) = v320;
          *a3 = v315;
          *(_QWORD *)v315 = 1;
          do
          {
            v322 = __ldaxr((unint64_t *)v190);
            v199 = --v322 == 0;
          }
          while (__stlxr(v322, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v209 = (_QWORD *)operator new();
          v210 = *a3 + 8;
          *v209 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v209 + 1, v210);
          *a3 = (uint64_t)v209;
          *v209 = 1;
          do
          {
            v211 = __ldaxr(v38);
            v42 = --v211 == 0;
          }
          while (__stlxr(v211, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v22 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, *a3);
          *a3 = (uint64_t)v22;
          *v22 = 1;
          do
          {
            v23 = __ldaxr((unint64_t *)v12);
            v15 = --v23 == 0;
          }
          while (__stlxr(v23, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *a3);
          *a3 = (uint64_t)v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v30);
            v33 = --v56 == 0;
          }
          while (__stlxr(v56, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v261 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v261, *a3);
          *a3 = (uint64_t)v261;
          *v261 = 1;
          do
          {
            v262 = __ldaxr((unint64_t *)v100);
            v189 = --v262 == 0;
          }
          while (__stlxr(v262, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v205 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v205, *a3);
          *a3 = (uint64_t)v205;
          *v205 = 1;
          do
          {
            v206 = __ldaxr((unint64_t *)v100);
            v103 = --v206 == 0;
          }
          while (__stlxr(v206, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v273 = operator new();
          v274 = *a3;
          *(_QWORD *)v273 = *(_QWORD *)*a3;
          *(_QWORD *)(v273 + 8) = *(_QWORD *)(v274 + 8);
          v275 = *(_QWORD *)(v274 + 16);
          *(_QWORD *)(v273 + 16) = v275;
          if (v275)
          {
            v276 = (unsigned int *)(v275 + 8);
            do
              v277 = __ldxr(v276);
            while (__stxr(v277 + 1, v276));
          }
          v278 = *(_OWORD *)(v274 + 24);
          v279 = *(_OWORD *)(v274 + 40);
          *(_OWORD *)(v273 + 56) = *(_OWORD *)(v274 + 56);
          *(_OWORD *)(v273 + 40) = v279;
          *(_OWORD *)(v273 + 24) = v278;
          *a3 = v273;
          *(_QWORD *)v273 = 1;
          do
          {
            v280 = __ldaxr((unint64_t *)v190);
            v199 = --v280 == 0;
          }
          while (__stlxr(v280, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v122 = (_QWORD *)operator new();
          v123 = *a3 + 8;
          *v122 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v122 + 1, v123);
          *a3 = (uint64_t)v122;
          *v122 = 1;
          do
          {
            v124 = __ldaxr(v38);
            v42 = --v124 == 0;
          }
          while (__stlxr(v124, v38));
          goto LABEL_272;
        default:
          goto LABEL_411;
      }
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, *a3);
          *a3 = (uint64_t)v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr((unint64_t *)v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, (unint64_t *)v12));
          goto LABEL_136;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v117 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v117, *a3);
          *a3 = (uint64_t)v117;
          *v117 = 1;
          do
          {
            v118 = __ldaxr(v30);
            v33 = --v118 == 0;
          }
          while (__stlxr(v118, v30));
          goto LABEL_152;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v323 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, *a3);
          *a3 = (uint64_t)v323;
          *v323 = 1;
          do
          {
            v324 = __ldaxr((unint64_t *)v100);
            v189 = --v324 == 0;
          }
          while (__stlxr(v324, (unint64_t *)v100));
          goto LABEL_393;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v281 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v281, *a3);
          *a3 = (uint64_t)v281;
          *v281 = 1;
          do
          {
            v282 = __ldaxr((unint64_t *)v100);
            v103 = --v282 == 0;
          }
          while (__stlxr(v282, (unint64_t *)v100));
          goto LABEL_343;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v325 = operator new();
          v326 = *a3;
          *(_QWORD *)v325 = *(_QWORD *)*a3;
          *(_QWORD *)(v325 + 8) = *(_QWORD *)(v326 + 8);
          v327 = *(_QWORD *)(v326 + 16);
          *(_QWORD *)(v325 + 16) = v327;
          if (v327)
          {
            v328 = (unsigned int *)(v327 + 8);
            do
              v329 = __ldxr(v328);
            while (__stxr(v329 + 1, v328));
          }
          v330 = *(_OWORD *)(v326 + 24);
          v331 = *(_OWORD *)(v326 + 40);
          *(_OWORD *)(v325 + 56) = *(_OWORD *)(v326 + 56);
          *(_OWORD *)(v325 + 40) = v331;
          *(_OWORD *)(v325 + 24) = v330;
          *a3 = v325;
          *(_QWORD *)v325 = 1;
          do
          {
            v332 = __ldaxr((unint64_t *)v190);
            v199 = --v332 == 0;
          }
          while (__stlxr(v332, (unint64_t *)v190));
          goto LABEL_403;
        case 9:
          v38 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v225 = (_QWORD *)operator new();
          v226 = *a3 + 8;
          *v225 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v225 + 1, v226);
          *a3 = (uint64_t)v225;
          *v225 = 1;
          do
          {
            v227 = __ldaxr(v38);
            v42 = --v227 == 0;
          }
          while (__stlxr(v227, v38));
LABEL_272:
          if (!v42)
            goto LABEL_408;
          v110 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38);
          v228 = 2071181815;
          goto LABEL_406;
        default:
          goto LABEL_411;
      }
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_408;
        case 2:
          v12 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, *a3);
          *a3 = (uint64_t)v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr((unint64_t *)v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, (unint64_t *)v12));
LABEL_136:
          if (!v15)
            goto LABEL_408;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v110 = (_QWORD *)v12;
          v111 = 0x1012C404EF22A49;
          goto LABEL_407;
        case 3:
          v30 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v34, *a3);
          *a3 = (uint64_t)v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr(v30);
            v33 = --v35 == 0;
          }
          while (__stlxr(v35, v30));
LABEL_152:
          if (!v33)
            goto LABEL_408;
          v119 = (void *)v30[1];
          if (v119)
          {
            v30[2] = (unint64_t)v119;
            operator delete(v119);
          }
          v110 = v30;
          v111 = 0x1080C409938AC02;
          goto LABEL_407;
        case 4:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v207 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v207, *a3);
          *a3 = (uint64_t)v207;
          *v207 = 1;
          do
          {
            v208 = __ldaxr((unint64_t *)v100);
            v189 = --v208 == 0;
          }
          while (__stlxr(v208, (unint64_t *)v100));
LABEL_393:
          if (!v189)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v334);
          goto LABEL_396;
        case 5:
          v100 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v120 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v120, *a3);
          *a3 = (uint64_t)v120;
          *v120 = 1;
          do
          {
            v121 = __ldaxr((unint64_t *)v100);
            v103 = --v121 == 0;
          }
          while (__stlxr(v121, (unint64_t *)v100));
LABEL_343:
          if (!v103)
            goto LABEL_408;
          v334 = (void **)(v100 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v334);
LABEL_396:
          v110 = (_QWORD *)v100;
          v111 = 0x1020C405E66F15BLL;
          goto LABEL_407;
        case 8:
          v190 = *a3;
          if (*(_QWORD *)*a3 == 1)
            goto LABEL_408;
          v217 = operator new();
          v218 = *a3;
          *(_QWORD *)v217 = *(_QWORD *)*a3;
          *(_QWORD *)(v217 + 8) = *(_QWORD *)(v218 + 8);
          v219 = *(_QWORD *)(v218 + 16);
          *(_QWORD *)(v217 + 16) = v219;
          if (v219)
          {
            v220 = (unsigned int *)(v219 + 8);
            do
              v221 = __ldxr(v220);
            while (__stxr(v221 + 1, v220));
          }
          v222 = *(_OWORD *)(v218 + 24);
          v223 = *(_OWORD *)(v218 + 40);
          *(_OWORD *)(v217 + 56) = *(_OWORD *)(v218 + 56);
          *(_OWORD *)(v217 + 40) = v223;
          *(_OWORD *)(v217 + 24) = v222;
          *a3 = v217;
          *(_QWORD *)v217 = 1;
          do
          {
            v224 = __ldaxr((unint64_t *)v190);
            v199 = --v224 == 0;
          }
          while (__stlxr(v224, (unint64_t *)v190));
LABEL_403:
          if (!v199)
            goto LABEL_408;
          boost::detail::shared_count::~shared_count((unsigned int **)(v190 + 16));
          v110 = (_QWORD *)v190;
          v228 = -235920773;
LABEL_406:
          v111 = v228 | 0x1030C4000000000;
LABEL_407:
          MEMORY[0x219A19A08](v110, v111);
LABEL_408:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v57 = *(_QWORD *)a2;
          v58 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v59 = (_QWORD *)operator new();
            v60 = *a3 + 8;
            *v59 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
            *a3 = (uint64_t)v59;
            *v59 = 1;
            do
            {
              v61 = __ldaxr(v58);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v58));
            if (!v62)
            {
              v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v58);
              MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
            }
          }
          v64 = *a3;
          v65 = (uint64_t *)(*a3 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v65, v57 + 8))
            turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v67 = *(uint64_t **)(v64 + 24);
          v66 = *(uint64_t **)(v64 + 32);
          if (v66 == v67)
            return;
          if (!*v65)
            return;
          v68 = 1;
          do
          {
            v69 = *v67++;
            v68 *= v69;
          }
          while (v67 != v66);
          if (!v68)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
          v70 = (uint64_t)(*(_QWORD *)(v64 + 32) - *(_QWORD *)(v64 + 24)) >> 3;
          v333 = 0;
          std::vector<unsigned long>::vector(&v334, v70, &v333);
          v71 = v334;
          v72 = v335;
          break;
        default:
          goto LABEL_411;
      }
      break;
    default:
LABEL_411:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  while (1)
  {
    v73 = (char *)v72 - (char *)v71;
    if (v73)
    {
      v74 = 0;
      v75 = v73 >> 3;
      v76 = *(uint64_t **)(v57 + 48);
      if (v75 <= 1)
        v75 = 1;
      v77 = v71;
      v78 = v75;
      do
      {
        v80 = (uint64_t)*v77++;
        v79 = v80;
        v81 = *v76++;
        v74 += v81 * v79;
        --v78;
      }
      while (v78);
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(v57 + 8) + 8 * (*(_QWORD *)(v57 + 72) + v74));
      v84 = *(uint64_t **)(v64 + 48);
      do
      {
        v86 = (uint64_t)*v71++;
        v85 = v86;
        v87 = *v84++;
        v82 += v87 * v85;
        --v75;
      }
      while (v75);
    }
    else
    {
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(v57 + 8) + 8 * *(_QWORD *)(v57 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v65);
    *(double *)(**(_QWORD **)(v64 + 8) + 8 * (*(_QWORD *)(v64 + 72) + v82)) = *(double *)(**(_QWORD **)(v64 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v64 + 72) + v82))
                                                                            / v83;
    v71 = v334;
    v72 = v335;
    v88 = v335 - v334;
    v89 = v88 - 1;
    if ((char *)v335 - (char *)v334 < 1)
      goto LABEL_114;
    v90 = *(_QWORD *)(v64 + 24);
    v91 = (char *)v334[v89] + 1;
    v334[v89] = v91;
    if ((unint64_t)v91 >= *(_QWORD *)(v90 + 8 * v89))
      break;
LABEL_113:
    v88 = 1;
LABEL_114:
    if (v89 < 0 || !v88)
      goto LABEL_214;
  }
  v92 = (unint64_t *)&v71[v88 - 2];
  v93 = v90 - 16;
  while (1)
  {
    v94 = v88 - 1;
    v92[1] = 0;
    if (v88 - 1 <= 0)
      break;
    v95 = *v92 + 1;
    *v92-- = v95;
    v96 = *(_QWORD *)(v93 + 8 * v88--);
    if (v95 < v96)
    {
      v89 = v94 - 1;
      goto LABEL_113;
    }
  }
LABEL_214:
  if (v71)
  {
LABEL_215:
    v335 = v71;
    operator delete(v71);
  }
}

void sub_218269C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934398;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934398;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  unint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  double v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  char *v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  __int128 v68;
  __int128 v69;
  float v70;
  uint64_t result;
  double *v72;
  double *v73;
  std::runtime_error *exception;
  std::string *v75;
  __int128 v76;
  void *__p[2];
  void *v78[2];
  __int128 v79;
  __int128 v80;
  std::string v81;
  size_t __idx;

  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if ((uint64_t *)a2 != a3)
  {
    *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(a2 + 5);
    *a3 = *(_QWORD *)a2;
    v5 = *(unsigned __int8 *)(a2 + 12);
    *((_BYTE *)a3 + 12) = v5;
    if (v5 <= 9 && ((1 << v5) & 0x33C) != 0)
    {
      v7 = (unint64_t *)*a3;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      v5 = *((unsigned __int8 *)a3 + 12);
    }
    switch(v5)
    {
      case 2u:
        v9 = *a3;
        if (*(_QWORD *)*a3 != 1)
        {
          v10 = (_QWORD *)operator new();
          v11 = *a3;
          *v10 = *(_QWORD *)*a3;
          v12 = (std::string *)(v10 + 1);
          if (*(char *)(v11 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(v11 + 8), *(_QWORD *)(v11 + 16));
          }
          else
          {
            v13 = *(_OWORD *)(v11 + 8);
            v10[3] = *(_QWORD *)(v11 + 24);
            *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
          }
          *a3 = (uint64_t)v10;
          *v10 = 1;
          do
          {
            v49 = __ldaxr((unint64_t *)v9);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, (unint64_t *)v9));
          if (!v50)
          {
            if (*(char *)(v9 + 31) < 0)
              operator delete(*(void **)(v9 + 8));
            v26 = (unint64_t *)v9;
            v34 = 0x1012C404EF22A49;
            goto LABEL_56;
          }
        }
        break;
      case 3u:
        v28 = (unint64_t *)*a3;
        if (*(_QWORD *)*a3 != 1)
        {
          v29 = (_QWORD *)operator new();
          v30 = (_QWORD *)*a3;
          *v29 = *(_QWORD *)*a3;
          v29[2] = 0;
          v29[3] = 0;
          v29[1] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v29 + 1, (const void *)v30[1], v30[2], (uint64_t)(v30[2] - v30[1]) >> 3);
          *a3 = (uint64_t)v29;
          *v29 = 1;
          do
          {
            v31 = __ldaxr(v28);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v28));
          if (!v32)
          {
            v33 = (void *)v28[1];
            if (v33)
            {
              v28[2] = (unint64_t)v33;
              operator delete(v33);
            }
            v26 = v28;
            v34 = 0x1080C409938AC02;
            goto LABEL_56;
          }
        }
        break;
      case 4u:
        v14 = (unint64_t *)*a3;
        if (*(_QWORD *)*a3 != 1)
        {
          v15 = (_QWORD *)operator new();
          v16 = (_QWORD *)*a3;
          *v15 = *(_QWORD *)*a3;
          v15[2] = 0;
          v15[3] = 0;
          v15[1] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v15 + 1, (uint64_t *)v16[1], (uint64_t *)v16[2], (uint64_t)(v16[2] - v16[1]) >> 4);
          *a3 = (uint64_t)v15;
          *v15 = 1;
          do
          {
            v17 = __ldaxr(v14);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v14));
          if (!v18)
          {
            __p[0] = v14 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_39;
          }
        }
        break;
      case 5u:
        v14 = (unint64_t *)*a3;
        if (*(_QWORD *)*a3 != 1)
        {
          v35 = (_QWORD *)operator new();
          v36 = (_QWORD *)*a3;
          *v35 = *(_QWORD *)*a3;
          v35[2] = 0;
          v35[3] = 0;
          v35[1] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v35 + 1, (uint64_t *)v36[1], (uint64_t *)v36[2], (uint64_t)(v36[2] - v36[1]) >> 5);
          *a3 = (uint64_t)v35;
          *v35 = 1;
          do
          {
            v37 = __ldaxr(v14);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v14));
          if (!v38)
          {
            __p[0] = v14 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_39:
            v26 = v14;
            v34 = 0x1020C405E66F15BLL;
            goto LABEL_56;
          }
        }
        break;
      case 8u:
        v39 = (_QWORD *)*a3;
        if (*(_QWORD *)*a3 != 1)
        {
          v40 = operator new();
          v41 = (_QWORD *)*a3;
          *(_QWORD *)v40 = *(_QWORD *)*a3;
          *(_QWORD *)(v40 + 8) = v41[1];
          v42 = v41[2];
          *(_QWORD *)(v40 + 16) = v42;
          if (v42)
          {
            v43 = (unsigned int *)(v42 + 8);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          v45 = *(_OWORD *)(v41 + 3);
          v46 = *(_OWORD *)(v41 + 5);
          *(_OWORD *)(v40 + 56) = *(_OWORD *)(v41 + 7);
          *(_OWORD *)(v40 + 40) = v46;
          *(_OWORD *)(v40 + 24) = v45;
          *a3 = v40;
          *(_QWORD *)v40 = 1;
          do
          {
            v47 = __ldaxr(v39);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v39));
          if (!v48)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v39 + 2);
            v26 = v39;
            v27 = -235920773;
            goto LABEL_48;
          }
        }
        break;
      case 9u:
        v19 = (unint64_t *)*a3;
        if (*(_QWORD *)*a3 != 1)
        {
          v20 = (_QWORD *)operator new();
          v21 = *a3 + 8;
          *v20 = *(_QWORD *)*a3;
          turi::flexible_type_impl::ndarray<double>::ndarray(v20 + 1, v21);
          *a3 = (uint64_t)v20;
          *v20 = 1;
          do
          {
            v22 = __ldaxr(v19);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v19));
          if (!v23)
          {
            v24 = (void *)v19[6];
            if (v24)
            {
              v19[7] = (unint64_t)v24;
              operator delete(v24);
            }
            v25 = (void *)v19[3];
            if (v25)
            {
              v19[4] = (unint64_t)v25;
              operator delete(v25);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v19 + 1));
            v26 = v19;
            v27 = 2071181815;
LABEL_48:
            v34 = v27 | 0x1030C4000000000;
LABEL_56:
            MEMORY[0x219A19A08](v26, v34);
          }
        }
        break;
      default:
        break;
    }
  }
  v51 = (uint64_t *)(*a3 + 8);
  turi::flexible_type_impl::ndarray<double>::ensure_unique(v51);
  v52 = 0.0;
  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      v52 = (double)*(uint64_t *)a1;
      goto LABEL_87;
    case 1:
      v52 = *(double *)a1;
      goto LABEL_87;
    case 2:
      v57 = *(_QWORD *)a1;
      v58 = (char **)(*(_QWORD *)a1 + 8);
      __idx = 0;
      v59 = (char *)v58;
      if (*(char *)(v57 + 31) < 0)
        v59 = *v58;
      std::string::basic_string[abi:ne180100]<0>(__p, v59);
      v60 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v78[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v57 + 31) < 0)
        v61 = *(_QWORD *)(v57 + 16);
      else
        v61 = *(unsigned __int8 *)(v57 + 31);
      if (__idx != v61)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v75 = std::string::append(&v81, " cannot be interpreted as a float");
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v78[0] = (void *)v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v70 = v60;
      v52 = v70;
      goto LABEL_87;
    case 3:
      v53 = *(_QWORD *)a1;
      __p[1] = 0;
      v78[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v53 + 8), *(_QWORD *)(v53 + 16), (uint64_t)(*(_QWORD *)(v53 + 16) - *(_QWORD *)(v53 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_87;
    case 4:
      v62 = *(_QWORD *)a1;
      __p[1] = 0;
      v78[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v62 + 8), *(uint64_t **)(v62 + 16), (uint64_t)(*(_QWORD *)(v62 + 16) - *(_QWORD *)(v62 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
      goto LABEL_87;
    case 5:
      v63 = *(_QWORD *)a1;
      __p[1] = 0;
      v78[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v63 + 8), *(uint64_t **)(v63 + 16), (uint64_t)(*(_QWORD *)(v63 + 16) - *(_QWORD *)(v63 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
      goto LABEL_87;
    case 6:
      v52 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
      goto LABEL_87;
    case 7:
      goto LABEL_87;
    case 8:
      v64 = *(_QWORD *)a1;
      v65 = *(unsigned int **)(*(_QWORD *)a1 + 16);
      __p[0] = *(void **)(*(_QWORD *)a1 + 8);
      __p[1] = v65;
      if (v65)
      {
        v66 = v65 + 2;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      v68 = *(_OWORD *)(v64 + 24);
      v69 = *(_OWORD *)(v64 + 56);
      v79 = *(_OWORD *)(v64 + 40);
      v80 = v69;
      *(_OWORD *)v78 = v68;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_87;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v79 + 1))
      {
        *(_QWORD *)&v80 = *((_QWORD *)&v79 + 1);
        operator delete(*((void **)&v79 + 1));
      }
      if (v78[0])
      {
        v78[1] = v78[0];
        operator delete(v78[0]);
      }
      v54 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v55 = (unint64_t *)((char *)__p[1] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
LABEL_87:
      result = turi::flexible_type_impl::ndarray<double>::elements(v51);
      v72 = *(double **)result;
      v73 = *(double **)(result + 8);
      while (v72 != v73)
      {
        *v72 = v52 / *v72;
        ++v72;
      }
      break;
    default:
      result = turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
  return result;
}

void sub_21826A748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  void *v44;
  void *v45;
  unsigned int v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;

  MEMORY[0x219A19A08](v28, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v27 + 12))
  {
    case 2:
      v30 = *(unint64_t **)v27;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_44;
      v33 = *(unint64_t **)v27;
      if (!*(_QWORD *)v27)
        goto LABEL_43;
      if (*((char *)v33 + 31) < 0)
        operator delete((void *)v33[1]);
      v34 = v33;
      v35 = 0x1012C404EF22A49;
      goto LABEL_42;
    case 3:
      v47 = *(unint64_t **)v27;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (v49)
        goto LABEL_44;
      v50 = *(unint64_t **)v27;
      if (!*(_QWORD *)v27)
        goto LABEL_43;
      v51 = (void *)v50[1];
      if (v51)
      {
        v50[2] = (unint64_t)v51;
        operator delete(v51);
      }
      v34 = v50;
      v35 = 0x1080C409938AC02;
      goto LABEL_42;
    case 4:
      v36 = *(unint64_t **)v27;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_44;
      v39 = *(unint64_t **)v27;
      if (!*(_QWORD *)v27)
        goto LABEL_43;
      a22 = v39 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      goto LABEL_35;
    case 5:
      v52 = *(unint64_t **)v27;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (v54)
        goto LABEL_44;
      v39 = *(unint64_t **)v27;
      if (!*(_QWORD *)v27)
        goto LABEL_43;
      a22 = v39 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_35:
      v34 = v39;
      v35 = 0x1020C405E66F15BLL;
      goto LABEL_42;
    case 8:
      v55 = *(unint64_t **)v27;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (v57)
        goto LABEL_44;
      v58 = *(unint64_t **)v27;
      if (!*(_QWORD *)v27)
        goto LABEL_43;
      boost::detail::shared_count::~shared_count((unsigned int **)v58 + 2);
      v34 = v58;
      v46 = -235920773;
      goto LABEL_41;
    case 9:
      v40 = *(unint64_t **)v27;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_44;
      v43 = *(unint64_t **)v27;
      if (!*(_QWORD *)v27)
        goto LABEL_43;
      v44 = (void *)v43[6];
      if (v44)
      {
        v43[7] = (unint64_t)v44;
        operator delete(v44);
      }
      v45 = (void *)v43[3];
      if (v45)
      {
        v43[4] = (unint64_t)v45;
        operator delete(v45);
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v43 + 1));
      v34 = v43;
      v46 = 2071181815;
LABEL_41:
      v35 = v46 | 0x1030C4000000000;
LABEL_42:
      MEMORY[0x219A19A08](v34, v35);
LABEL_43:
      *(_QWORD *)v27 = 0;
LABEL_44:
      *(_QWORD *)v27 = 0;
      *(_DWORD *)(v27 + 8) = 0;
      *(_BYTE *)(v27 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_44;
  }
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_23>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934418;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934418;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  float v23;
  double v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  float v41;
  double result;
  std::runtime_error *exception;
  std::string *v44;
  __int128 v45;
  std::runtime_error *v46;
  std::string *v47;
  __int128 v48;
  void *__p[2];
  void *v50[2];
  __int128 v51;
  __int128 v52;
  std::string v53;
  size_t __idx;

  v5 = 0.0;
  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      v5 = *(double *)a1;
      break;
    case 2:
      v10 = *(_QWORD *)a1;
      v11 = (char **)(*(_QWORD *)a1 + 8);
      __idx = 0;
      v12 = (char *)v11;
      if (*(char *)(v10 + 31) < 0)
        v12 = *v11;
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      v13 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v50[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v10 + 31) < 0)
        v14 = *(_QWORD *)(v10 + 16);
      else
        v14 = *(unsigned __int8 *)(v10 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v44 = std::string::append(&v53, " cannot be interpreted as a float");
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50[0] = (void *)v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v23 = v13;
      v5 = v23;
      break;
    case 3:
      v6 = *(_QWORD *)a1;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v15 = *(_QWORD *)a1;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 5:
      v16 = *(_QWORD *)a1;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 6:
      v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v17 = *(_QWORD *)a1;
      v18 = *(unsigned int **)(*(_QWORD *)a1 + 16);
      __p[0] = *(void **)(*(_QWORD *)a1 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v51 = *(_OWORD *)(v17 + 40);
      v52 = v22;
      *(_OWORD *)v50 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v51 + 1))
      {
        *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
        operator delete(*((void **)&v51 + 1));
      }
      if (v50[0])
      {
        v50[1] = v50[0];
        operator delete(v50[0]);
      }
      v7 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v8 = (unint64_t *)((char *)__p[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v24 = 0.0;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v24 = (double)*(uint64_t *)a2;
      break;
    case 1:
      v24 = *(double *)a2;
      break;
    case 2:
      v29 = *(_QWORD *)a2;
      __idx = 0;
      v30 = (char *)(v29 + 8);
      if (*(char *)(v29 + 31) < 0)
        v30 = *(char **)(v29 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v30);
      v31 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v50[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v29 + 31) < 0)
        v32 = *(_QWORD *)(v29 + 16);
      else
        v32 = *(unsigned __int8 *)(v29 + 31);
      if (__idx != v32)
      {
        v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v47 = std::string::append(&v53, " cannot be interpreted as a float");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v50[0] = (void *)v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v46, (const std::string *)__p);
        __cxa_throw(v46, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v41 = v31;
      v24 = v41;
      break;
    case 3:
      v25 = *(_QWORD *)a2;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v25 + 8), *(_QWORD *)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v33 = *(_QWORD *)a2;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v33 + 8), *(uint64_t **)(v33 + 16), (uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 5:
      v34 = *(_QWORD *)a2;
      __p[1] = 0;
      v50[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v34 + 8), *(uint64_t **)(v34 + 16), (uint64_t)(*(_QWORD *)(v34 + 16) - *(_QWORD *)(v34 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      break;
    case 6:
      v24 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v35 = *(_QWORD *)a2;
      v36 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v36;
      if (v36)
      {
        v37 = v36 + 2;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = *(_OWORD *)(v35 + 24);
      v40 = *(_OWORD *)(v35 + 56);
      v51 = *(_OWORD *)(v35 + 40);
      v52 = v40;
      *(_OWORD *)v50 = v39;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v51 + 1))
      {
        *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
        operator delete(*((void **)&v51 + 1));
      }
      if (v50[0])
      {
        v50[1] = v50[0];
        operator delete(v50[0]);
      }
      v26 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v27 = (unint64_t *)((char *)__p[1] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  result = v5 / v24;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 1;
  *(double *)a3 = v5 / v24;
  return result;
}

void sub_21826B124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_24>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934498;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934498;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double *v11;
  long double *v12;
  uint64_t v13;
  double v14;
  long double v15;
  long double v16;
  _QWORD *v17;
  void **v18;
  _QWORD *v19;
  const void *v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;

  v4 = *a1;
  v5 = *a2;
  v6 = *(_QWORD *)(*a1 + 16) - *(_QWORD *)(*a1 + 8);
  if (v6 == *(_QWORD *)(*a2 + 16) - *(_QWORD *)(*a2 + 8))
  {
    std::vector<double>::vector(&v39, v6 >> 3);
    v8 = v4 + 8;
    v7 = *(double **)(v4 + 8);
    v9 = *(_QWORD *)(v8 + 8) - (_QWORD)v7;
    if (v9)
    {
      v10 = v9 >> 3;
      v11 = *(double **)(v5 + 8);
      v12 = (long double *)v39;
      if (v10 <= 1)
        v13 = 1;
      else
        v13 = v10;
      do
      {
        v14 = *v7++;
        v15 = v14;
        v16 = *v11++;
        *v12++ = pow(v15, v16);
        --v13;
      }
      while (v13);
    }
    *(_QWORD *)(a3 + 5) = 0;
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 12) = 3;
    v17 = (_QWORD *)operator new();
    *v17 = 0;
    v17[1] = 0;
    v18 = (void **)(v17 + 1);
    v17[2] = 0;
    v17[3] = 0;
    *(_QWORD *)a3 = v17;
    *v17 = 1;
    if (*v17 != 1)
    {
      v19 = (_QWORD *)operator new();
      v20 = (const void *)v17[1];
      *v19 = *v17;
      v19[2] = 0;
      v19[3] = 0;
      v19[1] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v19 + 1, v20, v17[2], (uint64_t)(v17[2] - (_QWORD)v20) >> 3);
      *(_QWORD *)a3 = v19;
      *v19 = 1;
      do
      {
        v21 = __ldaxr(v17);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v17));
      if (!v22)
      {
        v23 = *v18;
        if (*v18)
        {
          v17[2] = v23;
          operator delete(v23);
        }
        MEMORY[0x219A19A08](v17, 0x1080C409938AC02);
      }
    }
    v24 = *(_QWORD **)a3;
    v25 = (void *)v24[1];
    if (v25)
    {
      v24[2] = v25;
      operator delete(v25);
      v24[1] = 0;
      v24[2] = 0;
      v24[3] = 0;
    }
    *(_OWORD *)(v24 + 1) = v39;
    v24[3] = v40;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
    {
      *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
      v26 = byte_254FF28D4;
      *(_BYTE *)(a3 + 12) = byte_254FF28D4;
      switch(v26)
      {
        case 2:
          v27 = *(unint64_t **)a3;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 1, v27));
          break;
        case 3:
          v29 = *(unint64_t **)a3;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 + 1, v29));
          break;
        case 4:
          v31 = *(unint64_t **)a3;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 + 1, v31));
          break;
        case 5:
          v33 = *(unint64_t **)a3;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 + 1, v33));
          break;
        case 8:
          v35 = *(unint64_t **)a3;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 + 1, v35));
          break;
        case 9:
          v37 = *(unint64_t **)a3;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 + 1, v37));
          break;
        default:
          return;
      }
    }
  }
}

void sub_21826B5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;

  v13 = v12;
  MEMORY[0x219A19A08](v13, 0x1080C409938AC02);
  do
  {
    v15 = __ldaxr(v11);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v11));
  if (!v16)
  {
    v17 = *v10;
    if (*v10)
    {
      v18 = *(void **)(v17 + 8);
      if (v18)
      {
        *(_QWORD *)(v17 + 16) = v18;
        operator delete(v18);
      }
      MEMORY[0x219A19A08](v17, 0x1080C409938AC02);
    }
    *v10 = 0;
  }
  *v10 = 0;
  *((_DWORD *)v10 + 2) = 0;
  *((_BYTE *)v10 + 12) = 0;
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_25>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934518;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934518;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(uint64_t *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  float v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  long double *v27;
  uint64_t v28;
  long double v29;
  _QWORD *v30;
  void **v31;
  _QWORD *v32;
  const void *v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  double result;
  std::runtime_error *exception;
  std::string *v41;
  __int128 v42;
  void *__p[2];
  void *v44[2];
  __int128 v45;
  __int128 v46;
  std::string v47;
  size_t __idx;

  v4 = *a1;
  v5 = 0.0;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v5 = (double)*(uint64_t *)a2;
      break;
    case 1:
      v5 = *(double *)a2;
      break;
    case 2:
      v10 = *(_QWORD *)a2;
      v11 = (char **)(*(_QWORD *)a2 + 8);
      __idx = 0;
      v12 = (char *)v11;
      if (*(char *)(v10 + 31) < 0)
        v12 = *v11;
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      v13 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v44[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v10 + 31) < 0)
        v14 = *(_QWORD *)(v10 + 16);
      else
        v14 = *(unsigned __int8 *)(v10 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v41 = std::string::append(&v47, " cannot be interpreted as a float");
        v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v44[0] = (void *)v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v23 = v13;
      v5 = v23;
      break;
    case 3:
      v6 = *(_QWORD *)a2;
      __p[1] = 0;
      v44[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v15 = *(_QWORD *)a2;
      __p[1] = 0;
      v44[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      break;
    case 5:
      v16 = *(_QWORD *)a2;
      __p[1] = 0;
      v44[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      break;
    case 6:
      v5 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v17 = *(_QWORD *)a2;
      v18 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v45 = *(_OWORD *)(v17 + 40);
      v46 = v22;
      *(_OWORD *)v44 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v45 + 1))
      {
        *(_QWORD *)&v46 = *((_QWORD *)&v45 + 1);
        operator delete(*((void **)&v45 + 1));
      }
      if (v44[0])
      {
        v44[1] = v44[0];
        operator delete(v44[0]);
      }
      v7 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v8 = (unint64_t *)((char *)__p[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  std::vector<double>::vector(__p, (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3);
  v24 = *(double **)(v4 + 8);
  v25 = *(_QWORD *)(v4 + 16) - (_QWORD)v24;
  if (v25)
  {
    v26 = v25 >> 3;
    v27 = (long double *)__p[0];
    if (v26 <= 1)
      v28 = 1;
    else
      v28 = v26;
    do
    {
      v29 = *v24++;
      *v27++ = pow(v29, v5);
      --v28;
    }
    while (v28);
  }
  *(_QWORD *)(a3 + 5) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 12) = 3;
  v30 = (_QWORD *)operator new();
  *v30 = 0;
  v30[1] = 0;
  v31 = (void **)(v30 + 1);
  v30[2] = 0;
  v30[3] = 0;
  *(_QWORD *)a3 = v30;
  *v30 = 1;
  if (*v30 != 1)
  {
    v32 = (_QWORD *)operator new();
    v33 = (const void *)v30[1];
    *v32 = *v30;
    v32[2] = 0;
    v32[3] = 0;
    v32[1] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v32 + 1, v33, v30[2], (uint64_t)(v30[2] - (_QWORD)v33) >> 3);
    *(_QWORD *)a3 = v32;
    *v32 = 1;
    do
    {
      v34 = __ldaxr(v30);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v30));
    if (!v35)
    {
      v36 = *v31;
      if (*v31)
      {
        v30[2] = v36;
        operator delete(v36);
      }
      MEMORY[0x219A19A08](v30, 0x1080C409938AC02);
    }
  }
  v37 = *(_QWORD **)a3;
  v38 = (void *)v37[1];
  if (v38)
  {
    v37[2] = v38;
    operator delete(v38);
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = 0;
  }
  result = *(double *)__p;
  *(_OWORD *)(v37 + 1) = *(_OWORD *)__p;
  v37[3] = v44[0];
  return result;
}

void sub_21826BB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_26>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934598;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934598;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(int *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  float v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long double *v29;
  uint64_t v30;
  long double v31;
  _QWORD *v32;
  void **v33;
  _QWORD *v34;
  const void *v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  double result;
  std::runtime_error *exception;
  std::string *v43;
  __int128 v44;
  void *__p[2];
  void *v46[2];
  __int128 v47;
  __int128 v48;
  std::string v49;
  size_t __idx;

  v5 = 0.0;
  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      v5 = *(double *)a1;
      break;
    case 2:
      v10 = *(_QWORD *)a1;
      v11 = (char **)(*(_QWORD *)a1 + 8);
      __idx = 0;
      v12 = (char *)v11;
      if (*(char *)(v10 + 31) < 0)
        v12 = *v11;
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      v13 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v46[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v10 + 31) < 0)
        v14 = *(_QWORD *)(v10 + 16);
      else
        v14 = *(unsigned __int8 *)(v10 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v43 = std::string::append(&v49, " cannot be interpreted as a float");
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v46[0] = (void *)v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v23 = v13;
      v5 = v23;
      break;
    case 3:
      v6 = *(_QWORD *)a1;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v15 = *(_QWORD *)a1;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
      break;
    case 5:
      v16 = *(_QWORD *)a1;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
      break;
    case 6:
      v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v17 = *(_QWORD *)a1;
      v18 = *(unsigned int **)(*(_QWORD *)a1 + 16);
      __p[0] = *(void **)(*(_QWORD *)a1 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v47 = *(_OWORD *)(v17 + 40);
      v48 = v22;
      *(_OWORD *)v46 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v47 + 1))
      {
        *(_QWORD *)&v48 = *((_QWORD *)&v47 + 1);
        operator delete(*((void **)&v47 + 1));
      }
      if (v46[0])
      {
        v46[1] = v46[0];
        operator delete(v46[0]);
      }
      v7 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v8 = (unint64_t *)((char *)__p[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v24 = *a2;
  std::vector<double>::vector(__p, (uint64_t)(*(_QWORD *)(v24 + 16) - *(_QWORD *)(v24 + 8)) >> 3);
  v26 = v24 + 8;
  v25 = *(double **)(v24 + 8);
  v27 = *(_QWORD *)(v26 + 8) - (_QWORD)v25;
  if (v27)
  {
    v28 = v27 >> 3;
    v29 = (long double *)__p[0];
    if (v28 <= 1)
      v30 = 1;
    else
      v30 = v28;
    do
    {
      v31 = *v25++;
      *v29++ = pow(v5, v31);
      --v30;
    }
    while (v30);
  }
  *(_QWORD *)(a3 + 5) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 12) = 3;
  v32 = (_QWORD *)operator new();
  *v32 = 0;
  v32[1] = 0;
  v33 = (void **)(v32 + 1);
  v32[2] = 0;
  v32[3] = 0;
  *(_QWORD *)a3 = v32;
  *v32 = 1;
  if (*v32 != 1)
  {
    v34 = (_QWORD *)operator new();
    v35 = (const void *)v32[1];
    *v34 = *v32;
    v34[2] = 0;
    v34[3] = 0;
    v34[1] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v34 + 1, v35, v32[2], (uint64_t)(v32[2] - (_QWORD)v35) >> 3);
    *(_QWORD *)a3 = v34;
    *v34 = 1;
    do
    {
      v36 = __ldaxr(v32);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v32));
    if (!v37)
    {
      v38 = *v33;
      if (*v33)
      {
        v32[2] = v38;
        operator delete(v38);
      }
      MEMORY[0x219A19A08](v32, 0x1080C409938AC02);
    }
  }
  v39 = *(_QWORD **)a3;
  v40 = (void *)v39[1];
  if (v40)
  {
    v39[2] = v40;
    operator delete(v40);
    v39[1] = 0;
    v39[2] = 0;
    v39[3] = 0;
  }
  result = *(double *)__p;
  *(_OWORD *)(v39 + 1) = *(_OWORD *)__p;
  v39[3] = v46[0];
  return result;
}

void sub_21826C1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_27>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934618;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934618;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  double v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  char *v13;
  const std::string *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  float v25;
  double v26;
  double v27;
  double v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  double v32;
  char **v33;
  char *v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  float v45;
  double v46;
  double v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  double v51;
  char *v52;
  double v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  __int128 v61;
  __int128 v62;
  float v63;
  double v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  char **v70;
  char *v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  __int128 v80;
  __int128 v81;
  float v82;
  std::runtime_error *exception;
  std::string *v84;
  __int128 v85;
  std::runtime_error *v86;
  std::string *v87;
  __int128 v88;
  std::runtime_error *v89;
  std::string *v90;
  __int128 v91;
  std::runtime_error *v92;
  std::string *v93;
  __int128 v94;
  void **v95;
  unsigned int *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _QWORD v100[3];
  _QWORD v101[3];
  _BYTE __str[32];
  __int128 v103;
  __int128 v104;
  void *v105;
  void *v106;
  uint64_t v107;
  std::string v108;
  std::string v109;
  size_t __idx;

  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v6 = (double)*(uint64_t *)a2;
      goto LABEL_31;
    case 1:
      v6 = *(double *)a2;
      goto LABEL_31;
    case 2:
      v11 = *(_QWORD *)a2;
      v12 = (char **)(*(_QWORD *)a2 + 8);
      __idx = 0;
      v13 = (char *)v12;
      if (*(char *)(v11 + 31) < 0)
        v13 = *v12;
      v14 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v109, v13);
      v15 = std::stod(v14, &__idx);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      if (*(char *)(v11 + 31) < 0)
        v16 = *(_QWORD *)(v11 + 16);
      else
        v16 = *(unsigned __int8 *)(v11 + 31);
      if (__idx != v16)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v84 = std::string::append(&v108, " cannot be interpreted as a float");
        v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
        v109.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v85;
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v109);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v25 = v15;
      v6 = v25;
      goto LABEL_31;
    case 3:
      v7 = *(_QWORD *)a2;
      v106 = 0;
      v107 = 0;
      v105 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v105, *(const void **)(v7 + 8), *(_QWORD *)(v7 + 16), (uint64_t)(*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (v105)
      {
        v106 = v105;
        operator delete(v105);
      }
      goto LABEL_34;
    case 4:
      v17 = *(_QWORD *)a2;
      memset(v101, 0, sizeof(v101));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v101, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      goto LABEL_34;
    case 5:
      v18 = *(_QWORD *)a2;
      memset(v100, 0, sizeof(v100));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v100, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      goto LABEL_34;
    case 6:
      v6 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
LABEL_31:
      if (v6 != 0.5)
        goto LABEL_34;
      v26 = 0.0;
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
          v26 = (double)*(uint64_t *)a1;
          break;
        case 1:
          v26 = *(double *)a1;
          break;
        case 2:
          v69 = *(_QWORD *)a1;
          v70 = (char **)(*(_QWORD *)a1 + 8);
          v109.__r_.__value_.__r.__words[0] = 0;
          v71 = (char *)v70;
          if (*(char *)(v69 + 31) < 0)
            v71 = *v70;
          std::string::basic_string[abi:ne180100]<0>(__str, v71);
          v72 = std::stod((const std::string *)__str, (size_t *)&v109);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          if (*(char *)(v69 + 31) < 0)
            v73 = *(_QWORD *)(v69 + 16);
          else
            v73 = *(unsigned __int8 *)(v69 + 31);
          if (v109.__r_.__value_.__r.__words[0] != v73)
          {
            v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v93 = std::string::append((std::string *)&v95, " cannot be interpreted as a float");
            v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
            *(_QWORD *)&__str[16] = *((_QWORD *)&v93->__r_.__value_.__l + 2);
            *(_OWORD *)__str = v94;
            v93->__r_.__value_.__l.__size_ = 0;
            v93->__r_.__value_.__r.__words[2] = 0;
            v93->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v92, (const std::string *)__str);
            __cxa_throw(v92, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v82 = v72;
          v26 = v82;
          break;
        case 3:
          v65 = *(_QWORD *)a1;
          memset(__str, 0, 24);
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v65 + 8), *(_QWORD *)(v65 + 16), (uint64_t)(*(_QWORD *)(v65 + 16) - *(_QWORD *)(v65 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (*(_QWORD *)__str)
          {
            *(_QWORD *)&__str[8] = *(_QWORD *)__str;
            operator delete(*(void **)__str);
          }
          break;
        case 4:
          v74 = *(_QWORD *)a1;
          memset(__str, 0, 24);
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v74 + 8), *(uint64_t **)(v74 + 16), (uint64_t)(*(_QWORD *)(v74 + 16) - *(_QWORD *)(v74 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v95 = (void **)__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v95);
          break;
        case 5:
          v75 = *(_QWORD *)a1;
          memset(__str, 0, 24);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v75 + 8), *(uint64_t **)(v75 + 16), (uint64_t)(*(_QWORD *)(v75 + 16) - *(_QWORD *)(v75 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v95 = (void **)__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v95);
          break;
        case 6:
          v26 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
          break;
        case 7:
          break;
        case 8:
          v76 = *(_QWORD *)a1;
          v77 = *(_QWORD *)(*(_QWORD *)a1 + 16);
          *(_QWORD *)__str = *(_QWORD *)(*(_QWORD *)a1 + 8);
          *(_QWORD *)&__str[8] = v77;
          if (v77)
          {
            v78 = (unsigned int *)(v77 + 8);
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
          v80 = *(_OWORD *)(v76 + 24);
          v81 = *(_OWORD *)(v76 + 56);
          v103 = *(_OWORD *)(v76 + 40);
          v104 = v81;
          *(_OWORD *)&__str[16] = v80;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)a1 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v103 + 1))
          {
            *(_QWORD *)&v104 = *((_QWORD *)&v103 + 1);
            operator delete(*((void **)&v103 + 1));
          }
          if (*(_QWORD *)&__str[16])
          {
            *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
            operator delete(*(void **)&__str[16]);
          }
          v66 = *(std::__shared_weak_count **)&__str[8];
          if (*(_QWORD *)&__str[8])
          {
            v67 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          break;
        default:
          turi::apply_binary_op_ff();
      }
      v64 = sqrt(v26);
      break;
    case 7:
      goto LABEL_34;
    case 8:
      v19 = *(_QWORD *)a2;
      v20 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      v95 = *(void ***)(*(_QWORD *)a2 + 8);
      v96 = v20;
      if (v20)
      {
        v21 = v20 + 2;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(_OWORD *)(v19 + 24);
      v24 = *(_OWORD *)(v19 + 56);
      v98 = *(_OWORD *)(v19 + 40);
      v99 = v24;
      v97 = v23;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v96);
      goto LABEL_34;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v103 + 1))
      {
        *(_QWORD *)&v104 = *((_QWORD *)&v103 + 1);
        operator delete(*((void **)&v103 + 1));
      }
      if (*(_QWORD *)&__str[16])
      {
        *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
        operator delete(*(void **)&__str[16]);
      }
      v8 = *(std::__shared_weak_count **)&__str[8];
      if (*(_QWORD *)&__str[8])
      {
        v9 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
LABEL_34:
      v27 = 0.0;
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
          v27 = (double)*(uint64_t *)a1;
          break;
        case 1:
          v27 = *(double *)a1;
          break;
        case 2:
          v32 = *(double *)a1;
          v33 = (char **)(*(_QWORD *)a1 + 8);
          v109.__r_.__value_.__r.__words[0] = 0;
          v34 = (char *)v33;
          if (*(char *)(*(_QWORD *)&v32 + 31) < 0)
            v34 = *v33;
          std::string::basic_string[abi:ne180100]<0>(__str, v34);
          v35 = std::stod((const std::string *)__str, (size_t *)&v109);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          if (*(char *)(*(_QWORD *)&v32 + 31) < 0)
            v36 = *(_QWORD *)(*(_QWORD *)&v32 + 16);
          else
            v36 = *(unsigned __int8 *)(*(_QWORD *)&v32 + 31);
          if (v109.__r_.__value_.__r.__words[0] != v36)
          {
            v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v87 = std::string::append((std::string *)&v95, " cannot be interpreted as a float");
            v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
            *(_QWORD *)&__str[16] = *((_QWORD *)&v87->__r_.__value_.__l + 2);
            *(_OWORD *)__str = v88;
            v87->__r_.__value_.__l.__size_ = 0;
            v87->__r_.__value_.__r.__words[2] = 0;
            v87->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v86, (const std::string *)__str);
            __cxa_throw(v86, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v45 = v35;
          v27 = v45;
          break;
        case 3:
          v28 = *(double *)a1;
          memset(__str, 0, 24);
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(*(_QWORD *)&v28 + 8), *(_QWORD *)(*(_QWORD *)&v28 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v28 + 16) - *(_QWORD *)(*(_QWORD *)&v28 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (*(_QWORD *)__str)
          {
            *(_QWORD *)&__str[8] = *(_QWORD *)__str;
            operator delete(*(void **)__str);
          }
          break;
        case 4:
          v37 = *(double *)a1;
          memset(__str, 0, 24);
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(*(_QWORD *)&v37 + 8), *(uint64_t **)(*(_QWORD *)&v37 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v37 + 16) - *(_QWORD *)(*(_QWORD *)&v37 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v95 = (void **)__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v95);
          break;
        case 5:
          v38 = *(double *)a1;
          memset(__str, 0, 24);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(*(_QWORD *)&v38 + 8), *(uint64_t **)(*(_QWORD *)&v38 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v38 + 16) - *(_QWORD *)(*(_QWORD *)&v38 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v95 = (void **)__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v95);
          break;
        case 6:
          v27 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
          break;
        case 7:
          break;
        case 8:
          v39 = *(double *)a1;
          v40 = *(_QWORD *)(*(_QWORD *)a1 + 16);
          *(_QWORD *)__str = *(_QWORD *)(*(_QWORD *)a1 + 8);
          *(_QWORD *)&__str[8] = v40;
          if (v40)
          {
            v41 = (unsigned int *)(v40 + 8);
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          v43 = *(_OWORD *)(*(_QWORD *)&v39 + 24);
          v44 = *(_OWORD *)(*(_QWORD *)&v39 + 56);
          v103 = *(_OWORD *)(*(_QWORD *)&v39 + 40);
          v104 = v44;
          *(_OWORD *)&__str[16] = v43;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)a1 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v103 + 1))
          {
            *(_QWORD *)&v104 = *((_QWORD *)&v103 + 1);
            operator delete(*((void **)&v103 + 1));
          }
          if (*(_QWORD *)&__str[16])
          {
            *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
            operator delete(*(void **)&__str[16]);
          }
          v29 = *(std::__shared_weak_count **)&__str[8];
          if (*(_QWORD *)&__str[8])
          {
            v30 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          break;
        default:
          turi::apply_binary_op_ff();
      }
      v46 = 0.0;
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          v46 = (double)*(uint64_t *)a2;
          break;
        case 1:
          v46 = *(double *)a2;
          break;
        case 2:
          v51 = *(double *)a2;
          v109.__r_.__value_.__r.__words[0] = 0;
          v52 = (char *)(*(_QWORD *)&v51 + 8);
          if (*(char *)(*(_QWORD *)&v51 + 31) < 0)
            v52 = *(char **)(*(_QWORD *)&v51 + 8);
          std::string::basic_string[abi:ne180100]<0>(__str, v52);
          v53 = std::stod((const std::string *)__str, (size_t *)&v109);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          if (*(char *)(*(_QWORD *)&v51 + 31) < 0)
            v54 = *(_QWORD *)(*(_QWORD *)&v51 + 16);
          else
            v54 = *(unsigned __int8 *)(*(_QWORD *)&v51 + 31);
          if (v109.__r_.__value_.__r.__words[0] != v54)
          {
            v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v90 = std::string::append((std::string *)&v95, " cannot be interpreted as a float");
            v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
            *(_QWORD *)&__str[16] = *((_QWORD *)&v90->__r_.__value_.__l + 2);
            *(_OWORD *)__str = v91;
            v90->__r_.__value_.__l.__size_ = 0;
            v90->__r_.__value_.__r.__words[2] = 0;
            v90->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v89, (const std::string *)__str);
            __cxa_throw(v89, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v63 = v53;
          v46 = v63;
          break;
        case 3:
          v47 = *(double *)a2;
          memset(__str, 0, 24);
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(*(_QWORD *)&v47 + 8), *(_QWORD *)(*(_QWORD *)&v47 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v47 + 16) - *(_QWORD *)(*(_QWORD *)&v47 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (*(_QWORD *)__str)
          {
            *(_QWORD *)&__str[8] = *(_QWORD *)__str;
            operator delete(*(void **)__str);
          }
          break;
        case 4:
          v55 = *(double *)a2;
          memset(__str, 0, 24);
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(*(_QWORD *)&v55 + 8), *(uint64_t **)(*(_QWORD *)&v55 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v55 + 16) - *(_QWORD *)(*(_QWORD *)&v55 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v95 = (void **)__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v95);
          break;
        case 5:
          v56 = *(double *)a2;
          memset(__str, 0, 24);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(*(_QWORD *)&v56 + 8), *(uint64_t **)(*(_QWORD *)&v56 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v56 + 16) - *(_QWORD *)(*(_QWORD *)&v56 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v95 = (void **)__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v95);
          break;
        case 6:
          v46 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
          break;
        case 7:
          break;
        case 8:
          v57 = *(double *)a2;
          v58 = *(_QWORD *)(*(_QWORD *)a2 + 16);
          *(_QWORD *)__str = *(_QWORD *)(*(_QWORD *)a2 + 8);
          *(_QWORD *)&__str[8] = v58;
          if (v58)
          {
            v59 = (unsigned int *)(v58 + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          v61 = *(_OWORD *)(*(_QWORD *)&v57 + 24);
          v62 = *(_OWORD *)(*(_QWORD *)&v57 + 56);
          v103 = *(_OWORD *)(*(_QWORD *)&v57 + 40);
          v104 = v62;
          *(_OWORD *)&__str[16] = v61;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)a2 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v103 + 1))
          {
            *(_QWORD *)&v104 = *((_QWORD *)&v103 + 1);
            operator delete(*((void **)&v103 + 1));
          }
          if (*(_QWORD *)&__str[16])
          {
            *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
            operator delete(*(void **)&__str[16]);
          }
          v48 = *(std::__shared_weak_count **)&__str[8];
          if (*(_QWORD *)&__str[8])
          {
            v49 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          break;
        default:
          turi::apply_binary_op_ff();
      }
      v64 = pow(v27, v46);
      break;
    default:
      turi::apply_binary_op_ff();
  }
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 1;
  *(double *)a3 = v64;
}

void sub_21826CF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  void *v35;
  int v36;

  if (a31 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v36 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_28>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934698;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934698;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  _QWORD *v17;
  void **v18;
  _QWORD *v19;
  const void *v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;

  v4 = *a1;
  v5 = *a2;
  v6 = *(_QWORD *)(*a1 + 16) - *(_QWORD *)(*a1 + 8);
  if (v6 == *(_QWORD *)(*a2 + 16) - *(_QWORD *)(*a2 + 8))
  {
    std::vector<double>::vector(&v39, v6 >> 3);
    v7 = *(double **)(v4 + 8);
    v8 = *(_QWORD *)(v4 + 16) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      v10 = *(double **)(v5 + 8);
      v11 = (double *)v39;
      if (v9 <= 1)
        v9 = 1;
      do
      {
        v12 = *v7++;
        v13 = v12;
        v14 = *v10++;
        v15 = v13 / v14;
        v16 = floor(v15);
        if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          v15 = v16;
        *v11++ = v15;
        --v9;
      }
      while (v9);
    }
    *(_QWORD *)(a3 + 5) = 0;
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 12) = 3;
    v17 = (_QWORD *)operator new();
    *v17 = 0;
    v17[1] = 0;
    v18 = (void **)(v17 + 1);
    v17[2] = 0;
    v17[3] = 0;
    *(_QWORD *)a3 = v17;
    *v17 = 1;
    if (*v17 != 1)
    {
      v19 = (_QWORD *)operator new();
      v20 = (const void *)v17[1];
      *v19 = *v17;
      v19[2] = 0;
      v19[3] = 0;
      v19[1] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v19 + 1, v20, v17[2], (uint64_t)(v17[2] - (_QWORD)v20) >> 3);
      *(_QWORD *)a3 = v19;
      *v19 = 1;
      do
      {
        v21 = __ldaxr(v17);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v17));
      if (!v22)
      {
        v23 = *v18;
        if (*v18)
        {
          v17[2] = v23;
          operator delete(v23);
        }
        MEMORY[0x219A19A08](v17, 0x1080C409938AC02);
      }
    }
    v24 = *(_QWORD **)a3;
    v25 = (void *)v24[1];
    if (v25)
    {
      v24[2] = v25;
      operator delete(v25);
      v24[1] = 0;
      v24[2] = 0;
      v24[3] = 0;
    }
    *(_OWORD *)(v24 + 1) = v39;
    v24[3] = v40;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
    {
      *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
      v26 = byte_254FF28D4;
      *(_BYTE *)(a3 + 12) = byte_254FF28D4;
      switch(v26)
      {
        case 2:
          v27 = *(unint64_t **)a3;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 1, v27));
          break;
        case 3:
          v29 = *(unint64_t **)a3;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 + 1, v29));
          break;
        case 4:
          v31 = *(unint64_t **)a3;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 + 1, v31));
          break;
        case 5:
          v33 = *(unint64_t **)a3;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 + 1, v33));
          break;
        case 8:
          v35 = *(unint64_t **)a3;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 + 1, v35));
          break;
        case 9:
          v37 = *(unint64_t **)a3;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 + 1, v37));
          break;
        default:
          return;
      }
    }
  }
}

void sub_21826D51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;

  v13 = v12;
  MEMORY[0x219A19A08](v13, 0x1080C409938AC02);
  do
  {
    v15 = __ldaxr(v11);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v11));
  if (!v16)
  {
    v17 = *v10;
    if (*v10)
    {
      v18 = *(void **)(v17 + 8);
      if (v18)
      {
        *(_QWORD *)(v17 + 16) = v18;
        operator delete(v18);
      }
      MEMORY[0x219A19A08](v17, 0x1080C409938AC02);
    }
    *v10 = 0;
  }
  *v10 = 0;
  *((_DWORD *)v10 + 2) = 0;
  *((_BYTE *)v10 + 12) = 0;
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_29>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934718;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934718;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(uint64_t *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  float v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  _QWORD *v31;
  void **v32;
  _QWORD *v33;
  const void *v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  double result;
  std::runtime_error *exception;
  std::string *v42;
  __int128 v43;
  void *__p[2];
  void *v45[2];
  __int128 v46;
  __int128 v47;
  std::string v48;
  size_t __idx;

  v4 = *a1;
  v5 = 0.0;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v5 = (double)*(uint64_t *)a2;
      break;
    case 1:
      v5 = *(double *)a2;
      break;
    case 2:
      v10 = *(_QWORD *)a2;
      v11 = (char **)(*(_QWORD *)a2 + 8);
      __idx = 0;
      v12 = (char *)v11;
      if (*(char *)(v10 + 31) < 0)
        v12 = *v11;
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      v13 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v45[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v10 + 31) < 0)
        v14 = *(_QWORD *)(v10 + 16);
      else
        v14 = *(unsigned __int8 *)(v10 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v42 = std::string::append(&v48, " cannot be interpreted as a float");
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v45[0] = (void *)v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v23 = v13;
      v5 = v23;
      break;
    case 3:
      v6 = *(_QWORD *)a2;
      __p[1] = 0;
      v45[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v15 = *(_QWORD *)a2;
      __p[1] = 0;
      v45[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
      break;
    case 5:
      v16 = *(_QWORD *)a2;
      __p[1] = 0;
      v45[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
      break;
    case 6:
      v5 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v17 = *(_QWORD *)a2;
      v18 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v46 = *(_OWORD *)(v17 + 40);
      v47 = v22;
      *(_OWORD *)v45 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v46 + 1))
      {
        *(_QWORD *)&v47 = *((_QWORD *)&v46 + 1);
        operator delete(*((void **)&v46 + 1));
      }
      if (v45[0])
      {
        v45[1] = v45[0];
        operator delete(v45[0]);
      }
      v7 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v8 = (unint64_t *)((char *)__p[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  std::vector<double>::vector(__p, (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3);
  v24 = *(double **)(v4 + 8);
  v25 = *(_QWORD *)(v4 + 16) - (_QWORD)v24;
  if (v25)
  {
    v26 = v25 >> 3;
    v27 = (double *)__p[0];
    if (v26 <= 1)
      v26 = 1;
    do
    {
      v28 = *v24++;
      v29 = v28 / v5;
      v30 = floor(v28 / v5);
      if (COERCE__INT64(fabs(v28 / v5)) < 0x7FF0000000000000)
        v29 = v30;
      *v27++ = v29;
      --v26;
    }
    while (v26);
  }
  *(_QWORD *)(a3 + 5) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 12) = 3;
  v31 = (_QWORD *)operator new();
  *v31 = 0;
  v31[1] = 0;
  v32 = (void **)(v31 + 1);
  v31[2] = 0;
  v31[3] = 0;
  *(_QWORD *)a3 = v31;
  *v31 = 1;
  if (*v31 != 1)
  {
    v33 = (_QWORD *)operator new();
    v34 = (const void *)v31[1];
    *v33 = *v31;
    v33[2] = 0;
    v33[3] = 0;
    v33[1] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v33 + 1, v34, v31[2], (uint64_t)(v31[2] - (_QWORD)v34) >> 3);
    *(_QWORD *)a3 = v33;
    *v33 = 1;
    do
    {
      v35 = __ldaxr(v31);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v31));
    if (!v36)
    {
      v37 = *v32;
      if (*v32)
      {
        v31[2] = v37;
        operator delete(v37);
      }
      MEMORY[0x219A19A08](v31, 0x1080C409938AC02);
    }
  }
  v38 = *(_QWORD **)a3;
  v39 = (void *)v38[1];
  if (v39)
  {
    v38[2] = v39;
    operator delete(v39);
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = 0;
  }
  result = *(double *)__p;
  *(_OWORD *)(v38 + 1) = *(_OWORD *)__p;
  v38[3] = v45[0];
  return result;
}

void sub_21826DAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_30>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934798;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934798;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(int *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  float v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  _QWORD *v32;
  void **v33;
  _QWORD *v34;
  const void *v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  double result;
  std::runtime_error *exception;
  std::string *v43;
  __int128 v44;
  void *__p[2];
  void *v46[2];
  __int128 v47;
  __int128 v48;
  std::string v49;
  size_t __idx;

  v5 = 0.0;
  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      v5 = *(double *)a1;
      break;
    case 2:
      v10 = *(_QWORD *)a1;
      v11 = (char **)(*(_QWORD *)a1 + 8);
      __idx = 0;
      v12 = (char *)v11;
      if (*(char *)(v10 + 31) < 0)
        v12 = *v11;
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      v13 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v46[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v10 + 31) < 0)
        v14 = *(_QWORD *)(v10 + 16);
      else
        v14 = *(unsigned __int8 *)(v10 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v43 = std::string::append(&v49, " cannot be interpreted as a float");
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v46[0] = (void *)v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v23 = v13;
      v5 = v23;
      break;
    case 3:
      v6 = *(_QWORD *)a1;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v15 = *(_QWORD *)a1;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
      break;
    case 5:
      v16 = *(_QWORD *)a1;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
      break;
    case 6:
      v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v17 = *(_QWORD *)a1;
      v18 = *(unsigned int **)(*(_QWORD *)a1 + 16);
      __p[0] = *(void **)(*(_QWORD *)a1 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v47 = *(_OWORD *)(v17 + 40);
      v48 = v22;
      *(_OWORD *)v46 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v47 + 1))
      {
        *(_QWORD *)&v48 = *((_QWORD *)&v47 + 1);
        operator delete(*((void **)&v47 + 1));
      }
      if (v46[0])
      {
        v46[1] = v46[0];
        operator delete(v46[0]);
      }
      v7 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v8 = (unint64_t *)((char *)__p[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v24 = *a2;
  std::vector<double>::vector(__p, (uint64_t)(*(_QWORD *)(v24 + 16) - *(_QWORD *)(v24 + 8)) >> 3);
  v25 = *(double **)(v24 + 8);
  v26 = *(_QWORD *)(v24 + 16) - (_QWORD)v25;
  if (v26)
  {
    v27 = v26 >> 3;
    v28 = (double *)__p[0];
    if (v27 <= 1)
      v27 = 1;
    do
    {
      v29 = *v25++;
      v30 = v5 / v29;
      v31 = floor(v5 / v29);
      if (COERCE__INT64(fabs(v5 / v29)) < 0x7FF0000000000000)
        v30 = v31;
      *v28++ = v30;
      --v27;
    }
    while (v27);
  }
  *(_QWORD *)(a3 + 5) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 12) = 3;
  v32 = (_QWORD *)operator new();
  *v32 = 0;
  v32[1] = 0;
  v33 = (void **)(v32 + 1);
  v32[2] = 0;
  v32[3] = 0;
  *(_QWORD *)a3 = v32;
  *v32 = 1;
  if (*v32 != 1)
  {
    v34 = (_QWORD *)operator new();
    v35 = (const void *)v32[1];
    *v34 = *v32;
    v34[2] = 0;
    v34[3] = 0;
    v34[1] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v34 + 1, v35, v32[2], (uint64_t)(v32[2] - (_QWORD)v35) >> 3);
    *(_QWORD *)a3 = v34;
    *v34 = 1;
    do
    {
      v36 = __ldaxr(v32);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v32));
    if (!v37)
    {
      v38 = *v33;
      if (*v33)
      {
        v32[2] = v38;
        operator delete(v38);
      }
      MEMORY[0x219A19A08](v32, 0x1080C409938AC02);
    }
  }
  v39 = *(_QWORD **)a3;
  v40 = (void *)v39[1];
  if (v40)
  {
    v39[2] = v40;
    operator delete(v40);
    v39[1] = 0;
    v39[2] = 0;
    v39[3] = 0;
  }
  result = *(double *)__p;
  *(_OWORD *)(v39 + 1) = *(_OWORD *)__p;
  v39[3] = v46[0];
  return result;
}

void sub_21826E154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_31>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934818;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934818;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  float v23;
  double v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  float v41;
  double v42;
  double v43;
  std::runtime_error *exception;
  std::string *v45;
  __int128 v46;
  std::runtime_error *v47;
  std::string *v48;
  __int128 v49;
  void *__p[2];
  void *v51[2];
  __int128 v52;
  __int128 v53;
  std::string v54;
  size_t __idx;

  v5 = 0.0;
  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      v5 = *(double *)a1;
      break;
    case 2:
      v10 = *(_QWORD *)a1;
      v11 = (char **)(*(_QWORD *)a1 + 8);
      __idx = 0;
      v12 = (char *)v11;
      if (*(char *)(v10 + 31) < 0)
        v12 = *v11;
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      v13 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v51[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v10 + 31) < 0)
        v14 = *(_QWORD *)(v10 + 16);
      else
        v14 = *(unsigned __int8 *)(v10 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v45 = std::string::append(&v54, " cannot be interpreted as a float");
        v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v51[0] = (void *)v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v23 = v13;
      v5 = v23;
      break;
    case 3:
      v6 = *(_QWORD *)a1;
      __p[1] = 0;
      v51[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v15 = *(_QWORD *)a1;
      __p[1] = 0;
      v51[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      break;
    case 5:
      v16 = *(_QWORD *)a1;
      __p[1] = 0;
      v51[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      break;
    case 6:
      v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v17 = *(_QWORD *)a1;
      v18 = *(unsigned int **)(*(_QWORD *)a1 + 16);
      __p[0] = *(void **)(*(_QWORD *)a1 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v52 = *(_OWORD *)(v17 + 40);
      v53 = v22;
      *(_OWORD *)v51 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v52 + 1))
      {
        *(_QWORD *)&v53 = *((_QWORD *)&v52 + 1);
        operator delete(*((void **)&v52 + 1));
      }
      if (v51[0])
      {
        v51[1] = v51[0];
        operator delete(v51[0]);
      }
      v7 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v8 = (unint64_t *)((char *)__p[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v24 = 0.0;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v24 = (double)*(uint64_t *)a2;
      break;
    case 1:
      v24 = *(double *)a2;
      break;
    case 2:
      v29 = *(_QWORD *)a2;
      __idx = 0;
      v30 = (char *)(v29 + 8);
      if (*(char *)(v29 + 31) < 0)
        v30 = *(char **)(v29 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v30);
      v31 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v51[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v29 + 31) < 0)
        v32 = *(_QWORD *)(v29 + 16);
      else
        v32 = *(unsigned __int8 *)(v29 + 31);
      if (__idx != v32)
      {
        v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v48 = std::string::append(&v54, " cannot be interpreted as a float");
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v51[0] = (void *)v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v47, (const std::string *)__p);
        __cxa_throw(v47, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v41 = v31;
      v24 = v41;
      break;
    case 3:
      v25 = *(_QWORD *)a2;
      __p[1] = 0;
      v51[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v25 + 8), *(_QWORD *)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v33 = *(_QWORD *)a2;
      __p[1] = 0;
      v51[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v33 + 8), *(uint64_t **)(v33 + 16), (uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      break;
    case 5:
      v34 = *(_QWORD *)a2;
      __p[1] = 0;
      v51[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v34 + 8), *(uint64_t **)(v34 + 16), (uint64_t)(*(_QWORD *)(v34 + 16) - *(_QWORD *)(v34 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      break;
    case 6:
      v24 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v35 = *(_QWORD *)a2;
      v36 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v36;
      if (v36)
      {
        v37 = v36 + 2;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = *(_OWORD *)(v35 + 24);
      v40 = *(_OWORD *)(v35 + 56);
      v52 = *(_OWORD *)(v35 + 40);
      v53 = v40;
      *(_OWORD *)v51 = v39;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v52 + 1))
      {
        *(_QWORD *)&v53 = *((_QWORD *)&v52 + 1);
        operator delete(*((void **)&v52 + 1));
      }
      if (v51[0])
      {
        v51[1] = v51[0];
        operator delete(v51[0]);
      }
      v26 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v27 = (unint64_t *)((char *)__p[1] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v42 = v5 / v24;
  v43 = floor(v5 / v24);
  if (COERCE__INT64(fabs(v5 / v24)) < 0x7FF0000000000000)
    v42 = v43;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 1;
  *(double *)a3 = v42;
}

void sub_21826E960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_32>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934898;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934898;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(int *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  float v23;
  double v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  float v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::runtime_error *exception;
  std::string *v56;
  __int128 v57;
  std::runtime_error *v58;
  std::string *v59;
  __int128 v60;
  void *__p[2];
  void *v62[2];
  __int128 v63;
  __int128 v64;
  std::string v65;
  size_t __idx;

  v5 = 0.0;
  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      v5 = (double)*(uint64_t *)a1;
      break;
    case 1:
      v5 = *(double *)a1;
      break;
    case 2:
      v10 = *(_QWORD *)a1;
      v11 = (char **)(*(_QWORD *)a1 + 8);
      __idx = 0;
      v12 = (char *)v11;
      if (*(char *)(v10 + 31) < 0)
        v12 = *v11;
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      v13 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v62[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v10 + 31) < 0)
        v14 = *(_QWORD *)(v10 + 16);
      else
        v14 = *(unsigned __int8 *)(v10 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v56 = std::string::append(&v65, " cannot be interpreted as a float");
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v62[0] = (void *)v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v23 = v13;
      v5 = v23;
      break;
    case 3:
      v6 = *(_QWORD *)a1;
      __p[1] = 0;
      v62[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v15 = *(_QWORD *)a1;
      __p[1] = 0;
      v62[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v65.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      break;
    case 5:
      v16 = *(_QWORD *)a1;
      __p[1] = 0;
      v62[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v65.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      break;
    case 6:
      v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v17 = *(_QWORD *)a1;
      v18 = *(unsigned int **)(*(_QWORD *)a1 + 16);
      __p[0] = *(void **)(*(_QWORD *)a1 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v63 = *(_OWORD *)(v17 + 40);
      v64 = v22;
      *(_OWORD *)v62 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v63 + 1))
      {
        *(_QWORD *)&v64 = *((_QWORD *)&v63 + 1);
        operator delete(*((void **)&v63 + 1));
      }
      if (v62[0])
      {
        v62[1] = v62[0];
        operator delete(v62[0]);
      }
      v7 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v8 = (unint64_t *)((char *)__p[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v24 = 0.0;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v24 = (double)*(uint64_t *)a2;
      break;
    case 1:
      v24 = *(double *)a2;
      break;
    case 2:
      v29 = *(_QWORD *)a2;
      __idx = 0;
      v30 = (char *)(v29 + 8);
      if (*(char *)(v29 + 31) < 0)
        v30 = *(char **)(v29 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v30);
      v31 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v62[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v29 + 31) < 0)
        v32 = *(_QWORD *)(v29 + 16);
      else
        v32 = *(unsigned __int8 *)(v29 + 31);
      if (__idx != v32)
      {
        v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v59 = std::string::append(&v65, " cannot be interpreted as a float");
        v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        v62[0] = (void *)v59->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v58, (const std::string *)__p);
        __cxa_throw(v58, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v41 = v31;
      v24 = v41;
      break;
    case 3:
      v25 = *(_QWORD *)a2;
      __p[1] = 0;
      v62[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v25 + 8), *(_QWORD *)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v33 = *(_QWORD *)a2;
      __p[1] = 0;
      v62[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v33 + 8), *(uint64_t **)(v33 + 16), (uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v65.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      break;
    case 5:
      v34 = *(_QWORD *)a2;
      __p[1] = 0;
      v62[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v34 + 8), *(uint64_t **)(v34 + 16), (uint64_t)(*(_QWORD *)(v34 + 16) - *(_QWORD *)(v34 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v65.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      break;
    case 6:
      v24 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v35 = *(_QWORD *)a2;
      v36 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v36;
      if (v36)
      {
        v37 = v36 + 2;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = *(_OWORD *)(v35 + 24);
      v40 = *(_OWORD *)(v35 + 56);
      v63 = *(_OWORD *)(v35 + 40);
      v64 = v40;
      *(_OWORD *)v62 = v39;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v63 + 1))
      {
        *(_QWORD *)&v64 = *((_QWORD *)&v63 + 1);
        operator delete(*((void **)&v63 + 1));
      }
      if (v62[0])
      {
        v62[1] = v62[0];
        operator delete(v62[0]);
      }
      v26 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v27 = (unint64_t *)((char *)__p[1] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  if (COERCE__INT64(fabs(v5 / v24)) > 0x7FEFFFFFFFFFFFFFLL)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
    {
      *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
      v42 = byte_254FF28D4;
      *(_BYTE *)(a3 + 12) = byte_254FF28D4;
      switch(v42)
      {
        case 2:
          v43 = *(unint64_t **)a3;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 + 1, v43));
          break;
        case 3:
          v49 = *(unint64_t **)a3;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 + 1, v49));
          break;
        case 4:
          v45 = *(unint64_t **)a3;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 + 1, v45));
          break;
        case 5:
          v51 = *(unint64_t **)a3;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 + 1, v51));
          break;
        case 8:
          v53 = *(unint64_t **)a3;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 + 1, v53));
          break;
        case 9:
          v47 = *(unint64_t **)a3;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 + 1, v47));
          break;
        default:
          return;
      }
    }
  }
  else
  {
    *(_BYTE *)(a3 + 12) = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = vcvtmd_s64_f64(v5 / v24);
  }
}

void sub_21826F234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_33>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934918;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934918;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if (*(unsigned __int8 *)(a1 + 12) | *(unsigned __int8 *)(a2 + 12))
  {
    *(_QWORD *)(a3 + 5) = 0;
    *(_QWORD *)a3 = 0;
  }
  else
  {
    v3 = *(_QWORD *)a2;
    v4 = *(_QWORD *)a1;
    if (*(uint64_t *)a2 >= 1)
    {
      v5 = v4 % v3;
      v3 &= v5 >> 63;
LABEL_4:
      *(_BYTE *)(a3 + 12) = 0;
      *(_DWORD *)(a3 + 8) = 0;
      *(_QWORD *)a3 = v3 + v5;
      return;
    }
    if (v3 < 0)
    {
      v5 = v4 + v4 / -v3 * v3;
      if (v5 <= 0)
        v3 = 0;
      goto LABEL_4;
    }
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
    {
      *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
      v6 = byte_254FF28D4;
      *(_BYTE *)(a3 + 12) = byte_254FF28D4;
      switch(v6)
      {
        case 2:
          v7 = *(unint64_t **)a3;
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
          break;
        case 3:
          v9 = *(unint64_t **)a3;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
          break;
        case 4:
          v11 = *(unint64_t **)a3;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
          break;
        case 5:
          v13 = *(unint64_t **)a3;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
          break;
        case 8:
          v15 = *(unint64_t **)a3;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
          break;
        case 9:
          v17 = *(unint64_t **)a3;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          break;
        default:
          return;
      }
    }
  }
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_34>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934998;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934998;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(_BYTE *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  char *v12;
  char *v13;
  int64_t v14;
  char *v15;
  char *v16;
  int v18;
  void *v19;
  uint64_t v20;
  char *v21;

  if (a1[12] == 2 && a2[12] == 2)
  {
    v6 = *(_QWORD *)a1;
    v7 = *(_QWORD *)a2;
    if (*(char *)(*(_QWORD *)a1 + 31) < 0)
    {
      v8 = *(char **)(v6 + 8);
      v9 = *(_QWORD *)(v6 + 16);
    }
    else
    {
      v8 = (char *)(v6 + 8);
      v9 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
    }
    v10 = *(unsigned __int8 *)(v7 + 31);
    v12 = *(char **)(v7 + 8);
    v11 = *(_QWORD *)(v7 + 16);
    if ((v10 & 0x80u) == 0)
      v13 = (char *)(*(_QWORD *)a2 + 8);
    else
      v13 = v12;
    if ((v10 & 0x80u) == 0)
      v14 = v10;
    else
      v14 = v11;
    if (v14)
    {
      v15 = &v8[v9];
      if (v9 >= v14)
      {
        v18 = *v13;
        v19 = v8;
        do
        {
          v20 = v9 - v14;
          if (v20 == -1)
            break;
          v21 = (char *)memchr(v19, v18, v20 + 1);
          if (!v21)
            break;
          v16 = v21;
          if (!memcmp(v21, v13, v14))
            goto LABEL_18;
          v19 = v16 + 1;
          v9 = v15 - (v16 + 1);
        }
        while (v9 >= v14);
      }
      v16 = v15;
LABEL_18:
      v5 = v16 != v15 && v16 - v8 != -1;
    }
    else
    {
      v5 = 1;
    }
  }
  else
  {
    v5 = 0;
  }
  *(_BYTE *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = v5;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_35>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934A18;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934A18;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(_BYTE *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double v3;
  _BOOL8 v4;
  double *v5;
  double *v6;

  if (a1[12] != 3)
    goto LABEL_5;
  if (*(_BYTE *)(a2 + 12) == 1)
  {
    v3 = *(double *)a2;
    goto LABEL_7;
  }
  if (*(_BYTE *)(a2 + 12))
  {
LABEL_5:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = (double)*(uint64_t *)a2;
LABEL_7:
  v6 = *(double **)(*(_QWORD *)a1 + 8);
  v5 = *(double **)(*(_QWORD *)a1 + 16);
  if (v6 != v5)
  {
    while (*v6 != v3)
    {
      if (++v6 == v5)
      {
        v6 = *(double **)(*(_QWORD *)a1 + 16);
        break;
      }
    }
  }
  v4 = v6 != v5;
LABEL_12:
  *(_BYTE *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = v4;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_36>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934A98;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934A98;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(_BYTE *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _BOOL8 v5;

  if (a1[12] == 4)
  {
    v4 = *(_QWORD *)a1;
    v5 = std::__find_impl[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,turi::flexible_type,std::__identity>(*(unsigned __int8 **)(*(_QWORD *)a1 + 8), *(unsigned __int8 **)(*(_QWORD *)a1 + 16), a2) != *(unsigned __int8 **)(v4 + 16);
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
  }
  else
  {
    v5 = 0;
    *(_BYTE *)(a3 + 12) = 0;
    *(_DWORD *)(a3 + 8) = 0;
  }
  *(_QWORD *)a3 = v5;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_37>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

unsigned __int8 *std::__find_impl[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,turi::flexible_type,std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  double v6;
  uint64_t v7;
  unsigned int v8;
  double v10;
  size_t v11;
  unsigned int v12;
  double *v13;
  double *v14;
  unint64_t v15;
  double *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  double v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  double v60;
  double v61;
  double v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  char v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;

  v3 = a1;
  if (a1 != a2)
  {
    while (2)
    {
      switch(*(_BYTE *)(a3 + 12))
      {
        case 0:
          switch(v3[12])
          {
            case 0u:
              if (*(_QWORD *)v3 == *(_QWORD *)a3)
                return v3;
              goto LABEL_110;
            case 1u:
              v6 = *(double *)v3;
              v7 = *(_QWORD *)a3;
              goto LABEL_79;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_110;
            case 6u:
              if (*(_QWORD *)a3 == (uint64_t)(*(_QWORD *)v3 << 8) >> 8 && !*((_DWORD *)v3 + 2))
                return v3;
              goto LABEL_110;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(v3[12])
          {
            case 0u:
              v6 = *(double *)a3;
              v7 = *(_QWORD *)v3;
LABEL_79:
              v60 = (double)v7;
              goto LABEL_84;
            case 1u:
              v6 = *(double *)v3;
              v60 = *(double *)a3;
LABEL_84:
              if (v6 == v60)
                return v3;
              goto LABEL_110;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_110;
            case 6u:
              v61 = vabdd_f64((double)*((int *)v3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v3 << 8) >> 8), *(double *)a3);
              goto LABEL_88;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v8 = v3[12];
          if (v8 - 3 < 7 || v8 < 2)
            goto LABEL_110;
          if (v8 != 2)
            turi::apply_binary_op_ff();
          v10 = *(double *)v3;
          v11 = *(char *)(*(_QWORD *)v3 + 31) < 0
              ? *(_QWORD *)(*(_QWORD *)&v10 + 16)
              : *(unsigned __int8 *)(*(_QWORD *)v3 + 31);
          v62 = *(double *)a3;
          v63 = *(char *)(*(_QWORD *)a3 + 31) < 0
              ? *(_QWORD *)(*(_QWORD *)&v62 + 16)
              : *(unsigned __int8 *)(*(_QWORD *)a3 + 31);
          if (v11 != v63)
            goto LABEL_110;
          v64 = (unsigned __int8 *)(*(_QWORD *)&v10 + 8);
          if ((*(_BYTE *)(*(_QWORD *)v3 + 31) & 0x80) != 0)
            v64 = *(unsigned __int8 **)v64;
          v65 = (unsigned __int8 *)(*(_QWORD *)&v62 + 8);
          if ((*(_BYTE *)(*(_QWORD *)a3 + 31) & 0x80) != 0)
            v65 = *(unsigned __int8 **)v65;
          if ((*(_BYTE *)(*(_QWORD *)v3 + 31) & 0x80) != 0)
          {
            if (!memcmp(v64, v65, v11))
              return v3;
          }
          else
          {
            if (!v11)
              return v3;
            while (*v64 == *v65)
            {
              ++v64;
              ++v65;
              if (!--v11)
                return v3;
            }
          }
LABEL_110:
          v3 += 16;
          if (v3 != a2)
            continue;
          v3 = a2;
          break;
        case 3:
          v12 = v3[12];
          if (v12 > 9)
            turi::apply_binary_op_ff();
          if (v12 != 3)
            goto LABEL_110;
          v13 = *(double **)(*(_QWORD *)v3 + 8);
          v14 = *(double **)(*(_QWORD *)v3 + 16);
          v15 = v14 - v13;
          v16 = *(double **)(*(_QWORD *)a3 + 8);
          if (v15 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v16) >> 3)
            goto LABEL_110;
          if (v14 == v13)
            return v3;
          if (v15 <= 1)
            v15 = 1;
          while (*v13 == *v16)
          {
            ++v13;
            ++v16;
            if (!--v15)
              return v3;
          }
          goto LABEL_110;
        case 4:
          v17 = v3[12];
          if (v17 > 9)
            turi::apply_binary_op_ff();
          if (v17 == 4
            && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v67, (uint64_t *)(*(_QWORD *)v3 + 8), (_QWORD *)(*(_QWORD *)a3 + 8)) & 1) != 0)
          {
            return v3;
          }
          goto LABEL_110;
        case 5:
          v18 = v3[12];
          if (v18 > 9)
            turi::apply_binary_op_ff();
          if (v18 == 5
            && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v67, (uint64_t **)(*(_QWORD *)v3 + 8), (uint64_t **)(*(_QWORD *)a3 + 8)))
          {
            return v3;
          }
          goto LABEL_110;
        case 6:
          switch(v3[12])
          {
            case 0u:
              if (*(_QWORD *)v3 == (uint64_t)(*(_QWORD *)a3 << 8) >> 8 && !*(_DWORD *)(a3 + 8))
                return v3;
              goto LABEL_110;
            case 1u:
              v61 = vabdd_f64(*(double *)v3, (double)*(int *)(a3 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8));
LABEL_88:
              if (v61 < 0.0000005)
                return v3;
              goto LABEL_110;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_110;
            case 6u:
              if (((*(_QWORD *)a3 ^ *(_QWORD *)v3) & 0xFFFFFFFFFFFFFFLL) == 0
                && *((_DWORD *)v3 + 2) == *(_DWORD *)(a3 + 8))
              {
                return v3;
              }
              goto LABEL_110;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          v19 = v3[12];
          if (v19 < 7 || v19 - 8 < 2)
            goto LABEL_110;
          if (v19 != 7)
            turi::apply_binary_op_ff();
          return v3;
        case 8:
          v20 = v3[12];
          if (v20 < 8)
            goto LABEL_110;
          if (v20 == 8)
          {
            if (turi::image_type::operator==(*(_QWORD *)v3 + 8, *(_QWORD *)a3 + 8))
              return v3;
          }
          else if (v20 != 9)
          {
            turi::apply_binary_op_ff();
          }
          goto LABEL_110;
        case 9:
          v21 = v3[12];
          if (v21 < 9)
            goto LABEL_110;
          if (v21 != 9)
            turi::apply_binary_op_ff();
          v22 = *(double *)a3;
          v23 = *(_QWORD **)v3;
          if (*(_QWORD *)a3 == *(_QWORD *)v3)
            return v3;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v23 + 1), *(_QWORD *)&v22 + 8))
            goto LABEL_110;
          v25 = (char *)v23[3];
          v24 = (char *)v23[4];
          v26 = v24 - v25;
          if (v24 == v25)
            return v3;
          if (!v23[1])
            return v3;
          v27 = 1;
          do
          {
            v28 = *(_QWORD *)v25;
            v25 += 8;
            v27 *= v28;
          }
          while (v25 != v24);
          if (!v27)
            return v3;
          v68 = 0;
          std::vector<unsigned long>::vector(&v69, v26 >> 3, &v68);
          v29 = v69;
          v30 = v70;
          v31 = **(_QWORD **)(*(_QWORD *)&v22 + 8);
          v32 = (char *)v70 - (char *)v69;
          v33 = v70 - v69;
          v34 = v33 - 1;
          if (v33 <= 1)
            v35 = 1;
          else
            v35 = v70 - v69;
          do
          {
            if (v30 == v29)
            {
              v43 = 0;
              v44 = *(double *)(*(_QWORD *)v23[1] + 8 * v23[9]);
            }
            else
            {
              v36 = 0;
              v37 = (uint64_t *)v23[6];
              v38 = v29;
              v39 = v35;
              do
              {
                v41 = *v38++;
                v40 = v41;
                v42 = *v37++;
                v36 += v42 * v40;
                --v39;
              }
              while (v39);
              v43 = 0;
              v44 = *(double *)(*(_QWORD *)v23[1] + 8 * (v23[9] + v36));
              v45 = *(uint64_t **)(*(_QWORD *)&v22 + 48);
              v46 = v29;
              v47 = v35;
              do
              {
                v49 = *v46++;
                v48 = v49;
                v50 = *v45++;
                v43 += v50 * v48;
                --v47;
              }
              while (v47);
            }
            v51 = *(double *)(v31 + 8 * (*(_QWORD *)(*(_QWORD *)&v22 + 72) + v43));
            if (v44 != v51)
              break;
            v52 = v33;
            v53 = v33 - 1;
            if (v32 < 1)
              goto LABEL_68;
            v54 = v23[3];
            v55 = v29[v34] + 1;
            v29[v34] = v55;
            v56 = (v32 & 0xFFFFFFFFFFFFFFF8) - 16;
            v57 = v33 - 1;
            if (v55 < *(_QWORD *)(v54 + 8 * v34))
            {
              v52 = 1;
              v53 = v33 - 1;
LABEL_68:
              if ((v53 & 0x8000000000000000) != 0)
                break;
              continue;
            }
            do
            {
              *(uint64_t *)((char *)v29 + v56 + 8) = 0;
              if (v57 <= 0)
              {
                v70 = v29;
                operator delete(v29);
                return v3;
              }
              --v57;
              v58 = *(uint64_t *)((char *)v29 + v56) + 1;
              *(uint64_t *)((char *)v29 + v56) = v58;
              v59 = *(_QWORD *)(v54 + v56);
              v56 -= 8;
            }
            while (v58 >= v59);
            v52 = 1;
            if (v57 < 0)
              break;
          }
          while (v52);
          if (v29)
          {
            v70 = v29;
            operator delete(v29);
          }
          if (v44 == v51)
            return v3;
          goto LABEL_110;
        default:
          turi::apply_binary_op_ff();
      }
      break;
    }
  }
  return v3;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934B18;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934B18;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(_BYTE *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int16 *v3;
  unsigned __int8 *v5;
  unsigned __int8 *i;
  double v8;
  uint64_t v9;
  unsigned int v10;
  double v12;
  size_t v13;
  unsigned int v14;
  double *v15;
  double *v16;
  unint64_t v17;
  double *v18;
  unsigned int v19;
  __int16 *v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  double v26;
  _QWORD *v27;
  _BOOL4 v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  double v63;
  double v64;
  __int16 *v65;
  _BOOL4 v66;
  double v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  __int16 *v71;
  int v72;
  char v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;

  if (a1[12] == 5)
  {
    v5 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8);
    for (i = *(unsigned __int8 **)(*(_QWORD *)a1 + 16); v5 != i; v5 += 32)
    {
      switch(*(_BYTE *)(a2 + 12))
      {
        case 0:
          switch(v5[12])
          {
            case 0u:
              if (*(_QWORD *)v5 == *(_QWORD *)a2)
                goto LABEL_115;
              continue;
            case 1u:
              v8 = *(double *)v5;
              v9 = *(_QWORD *)a2;
              goto LABEL_76;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              continue;
            case 6u:
              if (*(_QWORD *)a2 == (uint64_t)(*(_QWORD *)v5 << 8) >> 8 && !*((_DWORD *)v5 + 2))
                goto LABEL_115;
              continue;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(v5[12])
          {
            case 0u:
              v8 = *(double *)a2;
              v9 = *(_QWORD *)v5;
LABEL_76:
              v63 = (double)v9;
              goto LABEL_81;
            case 1u:
              v8 = *(double *)v5;
              v63 = *(double *)a2;
LABEL_81:
              if (v8 == v63)
                goto LABEL_115;
              continue;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              continue;
            case 6u:
              v64 = vabdd_f64((double)*((int *)v5 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v5 << 8) >> 8), *(double *)a2);
              goto LABEL_85;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v10 = v5[12];
          if (v10 - 3 < 7 || v10 < 2)
            continue;
          if (v10 != 2)
            turi::apply_binary_op_ff();
          v12 = *(double *)v5;
          v13 = *(char *)(*(_QWORD *)v5 + 31) < 0
              ? *(_QWORD *)(*(_QWORD *)&v12 + 16)
              : *(unsigned __int8 *)(*(_QWORD *)v5 + 31);
          v67 = *(double *)a2;
          v68 = *(char *)(*(_QWORD *)a2 + 31) < 0
              ? *(_QWORD *)(*(_QWORD *)&v67 + 16)
              : *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
          if (v13 != v68)
            continue;
          v69 = (unsigned __int8 *)(*(_QWORD *)&v12 + 8);
          if ((*(_BYTE *)(*(_QWORD *)v5 + 31) & 0x80) != 0)
            v69 = *(unsigned __int8 **)v69;
          v70 = (unsigned __int8 *)(*(_QWORD *)&v67 + 8);
          if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
            v70 = *(unsigned __int8 **)v70;
          if ((*(_BYTE *)(*(_QWORD *)v5 + 31) & 0x80) != 0)
          {
            v71 = v3;
            v72 = memcmp(v69, v70, v13);
            v3 = v71;
            if (!v72)
              goto LABEL_115;
          }
          else
          {
            if (!v13)
              goto LABEL_115;
            while (*v69 == *v70)
            {
              ++v69;
              ++v70;
              if (!--v13)
                goto LABEL_115;
            }
          }
          continue;
        case 3:
          v14 = v5[12];
          if (v14 > 9)
            turi::apply_binary_op_ff();
          if (v14 != 3)
            continue;
          v15 = *(double **)(*(_QWORD *)v5 + 8);
          v16 = *(double **)(*(_QWORD *)v5 + 16);
          v17 = v16 - v15;
          v18 = *(double **)(*(_QWORD *)a2 + 8);
          if (v17 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v18) >> 3)
            continue;
          if (v16 == v15)
            goto LABEL_115;
          if (v17 <= 1)
            v17 = 1;
          while (*v15 == *v18)
          {
            ++v18;
            ++v15;
            if (!--v17)
              goto LABEL_115;
          }
          continue;
        case 4:
          v19 = v5[12];
          if (v19 > 9)
            turi::apply_binary_op_ff();
          if (v19 != 4)
            continue;
          v20 = v3;
          v21 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v73, (uint64_t *)(*(_QWORD *)v5 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
          goto LABEL_32;
        case 5:
          v22 = v5[12];
          if (v22 > 9)
            turi::apply_binary_op_ff();
          if (v22 != 5)
            continue;
          v20 = v3;
          v21 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v73, (uint64_t **)(*(_QWORD *)v5 + 8), (uint64_t **)(*(_QWORD *)a2 + 8));
LABEL_32:
          v3 = v20;
          if ((v21 & 1) != 0)
            goto LABEL_115;
          continue;
        case 6:
          switch(v5[12])
          {
            case 0u:
              if (*(_QWORD *)v5 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && !*(_DWORD *)(a2 + 8))
                goto LABEL_115;
              continue;
            case 1u:
              v64 = vabdd_f64(*(double *)v5, (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8));
LABEL_85:
              if (v64 < 0.0000005)
                goto LABEL_115;
              continue;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              continue;
            case 6u:
              if (((*(_QWORD *)a2 ^ *(_QWORD *)v5) & 0xFFFFFFFFFFFFFFLL) == 0
                && *((_DWORD *)v5 + 2) == *(_DWORD *)(a2 + 8))
              {
                goto LABEL_115;
              }
              continue;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          v23 = v5[12];
          if (v23 < 7 || v23 - 8 < 2)
            continue;
          if (v23 != 7)
            turi::apply_binary_op_ff();
          goto LABEL_115;
        case 8:
          v24 = v5[12];
          if (v24 < 8)
            continue;
          if (v24 == 8)
          {
            v65 = v3;
            v66 = turi::image_type::operator==(*(_QWORD *)v5 + 8, *(_QWORD *)a2 + 8);
            v3 = v65;
            if (v66)
              goto LABEL_115;
          }
          else if (v24 != 9)
          {
            turi::apply_binary_op_ff();
          }
          continue;
        case 9:
          v25 = v5[12];
          if (v25 < 9)
            continue;
          if (v25 != 9)
            turi::apply_binary_op_ff();
          v26 = *(double *)a2;
          v27 = *(_QWORD **)v5;
          if (*(_QWORD *)a2 == *(_QWORD *)v5)
            goto LABEL_115;
          v28 = turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v27 + 1), *(_QWORD *)&v26 + 8);
          v3 = &jpt_218270080;
          if (!v28)
            continue;
          v30 = (char *)v27[3];
          v29 = (char *)v27[4];
          v31 = v29 - v30;
          if (v29 == v30)
            goto LABEL_115;
          if (!v27[1])
            goto LABEL_115;
          v32 = 1;
          do
          {
            v33 = *(_QWORD *)v30;
            v30 += 8;
            v32 *= v33;
          }
          while (v30 != v29);
          if (!v32)
            goto LABEL_115;
          v74 = 0;
          std::vector<unsigned long>::vector(&v75, v31 >> 3, &v74);
          v34 = v75;
          v35 = v76;
          v36 = **(_QWORD **)(*(_QWORD *)&v26 + 8);
          v37 = (char *)v76 - (char *)v75;
          v38 = v76 - v75;
          v39 = v38 - 1;
          if (v38 <= 1)
            v40 = 1;
          else
            v40 = v76 - v75;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      while (1)
      {
        if (v35 == v34)
        {
          v48 = 0;
          v49 = *(double *)(*(_QWORD *)v27[1] + 8 * v27[9]);
        }
        else
        {
          v41 = 0;
          v42 = (uint64_t *)v27[6];
          v43 = v34;
          v44 = v40;
          do
          {
            v46 = *v43++;
            v45 = v46;
            v47 = *v42++;
            v41 += v47 * v45;
            --v44;
          }
          while (v44);
          v48 = 0;
          v49 = *(double *)(*(_QWORD *)v27[1] + 8 * (v27[9] + v41));
          v50 = *(uint64_t **)(*(_QWORD *)&v26 + 48);
          v51 = v34;
          v52 = v40;
          do
          {
            v54 = *v51++;
            v53 = v54;
            v55 = *v50++;
            v48 += v55 * v53;
            --v52;
          }
          while (v52);
        }
        if (v49 != *(double *)(v36 + 8 * (*(_QWORD *)(*(_QWORD *)&v26 + 72) + v48)))
          break;
        v56 = v38;
        v57 = v38 - 1;
        if (v37 >= 1)
        {
          v58 = v27[3];
          v59 = v34[v39] + 1;
          v34[v39] = v59;
          v60 = (v37 & 0xFFFFFFFFFFFFFFF8) - 16;
          v57 = v38 - 1;
          if (v59 >= *(_QWORD *)(v58 + 8 * v39))
          {
            while (1)
            {
              *(uint64_t *)((char *)v34 + v60 + 8) = 0;
              if (v57 <= 0)
                break;
              --v57;
              v61 = *(uint64_t *)((char *)v34 + v60) + 1;
              *(uint64_t *)((char *)v34 + v60) = v61;
              v62 = *(_QWORD *)(v58 + v60);
              v60 -= 8;
              if (v61 < v62)
                goto LABEL_70;
            }
LABEL_114:
            v76 = v34;
            operator delete(v34);
            goto LABEL_115;
          }
          v56 = 1;
          v57 = v38 - 1;
        }
        if (!v56)
          goto LABEL_113;
LABEL_70:
        if (v57 < 0)
        {
LABEL_113:
          if (v34)
            goto LABEL_114;
LABEL_115:
          *(_BYTE *)(a3 + 12) = 0;
          *(_DWORD *)(a3 + 8) = 0;
          *(_QWORD *)a3 = 1;
          return;
        }
      }
      if (v34)
      {
        v76 = v34;
        operator delete(v34);
      }
      v3 = &jpt_218270080;
    }
  }
  *(_QWORD *)(a3 + 5) = 0;
  *(_QWORD *)a3 = 0;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_38>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934B98;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934B98;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double *v4;
  uint64_t v5;
  unint64_t v6;
  double *v7;
  double v8;
  _QWORD *v9;
  void **v10;
  _QWORD *v11;
  const void *v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  double result;
  __int128 v19;
  uint64_t v20;

  v3 = *a1;
  std::vector<double>::vector(&v19, (uint64_t)(*(_QWORD *)(*a1 + 16) - *(_QWORD *)(*a1 + 8)) >> 3);
  v4 = *(double **)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16) - (_QWORD)v4;
  if (v5)
  {
    v6 = v5 >> 3;
    v7 = (double *)v19;
    if (v6 <= 1)
      v6 = 1;
    do
    {
      v8 = *v4++;
      *v7++ = fabs(v8);
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(a2 + 5) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 12) = 3;
  v9 = (_QWORD *)operator new();
  *v9 = 0;
  v9[1] = 0;
  v10 = (void **)(v9 + 1);
  v9[2] = 0;
  v9[3] = 0;
  *(_QWORD *)a2 = v9;
  *v9 = 1;
  if (*v9 != 1)
  {
    v11 = (_QWORD *)operator new();
    v12 = (const void *)v9[1];
    *v11 = *v9;
    v11[2] = 0;
    v11[3] = 0;
    v11[1] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11 + 1, v12, v9[2], (uint64_t)(v9[2] - (_QWORD)v12) >> 3);
    *(_QWORD *)a2 = v11;
    *v11 = 1;
    do
    {
      v13 = __ldaxr(v9);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v9));
    if (!v14)
    {
      v15 = *v10;
      if (*v10)
      {
        v9[2] = v15;
        operator delete(v15);
      }
      MEMORY[0x219A19A08](v9, 0x1080C409938AC02);
    }
  }
  v16 = *(_QWORD **)a2;
  v17 = (void *)v16[1];
  if (v17)
  {
    v16[2] = v17;
    operator delete(v17);
    v16[1] = 0;
    v16[2] = 0;
    v16[3] = 0;
  }
  result = *(double *)&v19;
  *(_OWORD *)(v16 + 1) = v19;
  v16[3] = v20;
  return result;
}

void sub_218270834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;

  v13 = v12;
  MEMORY[0x219A19A08](v13, 0x1080C409938AC02);
  do
  {
    v15 = __ldaxr(v11);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v11));
  if (!v16)
  {
    v17 = *v10;
    if (*v10)
    {
      v18 = *(void **)(v17 + 8);
      if (v18)
      {
        *(_QWORD *)(v17 + 16) = v18;
        operator delete(v18);
      }
      MEMORY[0x219A19A08](v17, 0x1080C409938AC02);
    }
    *v10 = 0;
  }
  *v10 = 0;
  *((_DWORD *)v10 + 2) = 0;
  *((_BYTE *)v10 + 12) = 0;
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_39>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934C18;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934C18;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *a1;
  v3 = *a1 < 0;
  *(_DWORD *)(a2 + 8) = 0;
  if (v3)
    v2 = -v2;
  *(_BYTE *)(a2 + 12) = 0;
  *(_QWORD *)a2 = v2;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_40>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934C98;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934C98;
}

double std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  float v21;
  double result;
  std::runtime_error *exception;
  std::string *v24;
  __int128 v25;
  void *__p[2];
  void *v27[2];
  __int128 v28;
  __int128 v29;
  std::string v30;
  size_t __idx;

  v3 = 0.0;
  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      v3 = (double)*(uint64_t *)a1;
      break;
    case 1:
      v3 = *(double *)a1;
      break;
    case 2:
      v8 = *(_QWORD *)a1;
      v9 = (char **)(*(_QWORD *)a1 + 8);
      __idx = 0;
      v10 = (char *)v9;
      if (*(char *)(v8 + 31) < 0)
        v10 = *v9;
      std::string::basic_string[abi:ne180100]<0>(__p, v10);
      v11 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v27[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v8 + 31) < 0)
        v12 = *(_QWORD *)(v8 + 16);
      else
        v12 = *(unsigned __int8 *)(v8 + 31);
      if (__idx != v12)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v24 = std::string::append(&v30, " cannot be interpreted as a float");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v27[0] = (void *)v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v21 = v11;
      v3 = v21;
      break;
    case 3:
      v4 = *(_QWORD *)a1;
      __p[1] = 0;
      v27[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v4 + 8), *(_QWORD *)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v13 = *(_QWORD *)a1;
      __p[1] = 0;
      v27[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v30.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
      break;
    case 5:
      v14 = *(_QWORD *)a1;
      __p[1] = 0;
      v27[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v30.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
      break;
    case 6:
      v3 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v15 = *(_QWORD *)a1;
      v16 = *(unsigned int **)(*(_QWORD *)a1 + 16);
      __p[0] = *(void **)(*(_QWORD *)a1 + 8);
      __p[1] = v16;
      if (v16)
      {
        v17 = v16 + 2;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = *(_OWORD *)(v15 + 24);
      v20 = *(_OWORD *)(v15 + 56);
      v28 = *(_OWORD *)(v15 + 40);
      v29 = v20;
      *(_OWORD *)v27 = v19;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a1 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v28 + 1))
      {
        *(_QWORD *)&v29 = *((_QWORD *)&v28 + 1);
        operator delete(*((void **)&v28 + 1));
      }
      if (v27[0])
      {
        v27[1] = v27[0];
        operator delete(v27[0]);
      }
      v5 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v6 = (unint64_t *)((char *)__p[1] + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  result = fabs(v3);
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 1;
  *(double *)a2 = result;
  return result;
}

void sub_218270D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_41>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934D18;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934D18;
}

BOOL std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<W0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  BOOL v5;
  double v6;
  char v7;
  const void *v8;
  size_t v9;
  double *v10;
  double *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 result;
  BOOL v17;
  double v18;
  double v19;
  BOOL v20;
  uint64_t v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  char v26;

  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
          v5 = *(_QWORD *)a1 < *(_QWORD *)a2;
          goto LABEL_27;
        case 1:
          v18 = *(double *)a1;
          v19 = (double)*(uint64_t *)a2;
          goto LABEL_37;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 6:
          v17 = *(_QWORD *)a2 <= (uint64_t)(*(_QWORD *)a1 << 8) >> 8;
          goto LABEL_43;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
          v17 = *(double *)a2 <= (double)*(uint64_t *)a1;
          goto LABEL_43;
        case 1:
          v18 = *(double *)a1;
          v19 = *(double *)a2;
LABEL_37:
          v20 = v18 < v19;
          goto LABEL_39;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 6:
          v20 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8) < *(double *)a2;
LABEL_39:
          result = v20;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_33;
    case 2:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 2:
          v6 = *(double *)a1;
          v7 = *(_BYTE *)(*(_QWORD *)a2 + 31);
          if (*(char *)(*(_QWORD *)a1 + 31) < 0)
          {
            v8 = *(const void **)(*(_QWORD *)&v6 + 8);
            v9 = *(_QWORD *)(*(_QWORD *)&v6 + 16);
          }
          else
          {
            v8 = (const void *)(*(_QWORD *)&v6 + 8);
            v9 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
          }
          if (v7 >= 0)
            v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
          else
            v22 = *(_QWORD *)(*(_QWORD *)a2 + 16);
          if (v7 >= 0)
            v23 = (const void *)(*(_QWORD *)a2 + 8);
          else
            v23 = *(const void **)(*(_QWORD *)a2 + 8);
          if (v22 >= v9)
            v24 = v9;
          else
            v24 = v22;
          v25 = memcmp(v8, v23, v24);
          if (v25)
            result = v25 < 0;
          else
            result = v9 < v22;
          goto LABEL_33;
        default:
          turi::apply_binary_op_ff();
      }
    case 3:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 3:
          v10 = *(double **)(*(_QWORD *)a1 + 8);
          v11 = *(double **)(*(_QWORD *)a2 + 8);
          v12 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v11) >> 3;
          v13 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v10) >> 3;
          if (*(double **)(*(_QWORD *)a1 + 16) == v10)
            goto LABEL_17;
          if (v13 <= 1)
            v14 = 1;
          else
            v14 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v10) >> 3;
          v15 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v11) >> 3;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 4:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 4:
          result = turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&v26, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
          goto LABEL_33;
        default:
          turi::apply_binary_op_ff();
      }
    case 5:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_31;
    case 6:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
          v5 = *(_QWORD *)a1 < (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
          goto LABEL_27;
        case 1:
          v17 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8) <= *(double *)a1;
LABEL_43:
          result = !v17;
          goto LABEL_33;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 6:
          v21 = (uint64_t)(*(_QWORD *)a1 << 8) >> 8;
          if (v21 < (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
            goto LABEL_47;
          if (v21 != (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
            goto LABEL_32;
          v5 = a1[2] < *(_DWORD *)(a2 + 8);
LABEL_27:
          result = v5;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_33;
    case 7:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_31;
    case 8:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_31;
    case 9:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          break;
        default:
          turi::apply_binary_op_ff();
      }
LABEL_31:
      turi::flexible_type_fail(0);
      goto LABEL_32;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    if (!v15 || *v10 > *v11)
    {
LABEL_32:
      result = 0;
      goto LABEL_33;
    }
    if (*v10 < *v11)
      break;
    ++v11;
    ++v10;
    --v15;
    if (!--v14)
    {
LABEL_17:
      result = v13 < v12;
      goto LABEL_33;
    }
  }
LABEL_47:
  result = 1;
LABEL_33:
  *(_BYTE *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_42>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934D98;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934D98;
}

BOOL std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()@<W0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  BOOL v5;
  int v6;
  int v7;
  size_t v8;
  const void *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  _BOOL8 result;
  double *v15;
  double *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  double v22;
  double v23;
  uint64_t v24;
  char v25;

  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
          v5 = *(_QWORD *)a1 <= *(_QWORD *)a2;
          goto LABEL_52;
        case 1:
          v22 = *(double *)a1;
          v23 = (double)*(uint64_t *)a2;
          goto LABEL_50;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        case 6:
          result = *(_QWORD *)a2 < (uint64_t)(*(_QWORD *)a1 << 8) >> 8;
          goto LABEL_46;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
          v21 = *(double *)a2 < (double)*(uint64_t *)a1;
          goto LABEL_56;
        case 1:
          v22 = *(double *)a1;
          v23 = *(double *)a2;
LABEL_50:
          v5 = v22 <= v23;
          goto LABEL_52;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        case 6:
          v5 = (double)a1[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8) <= *(double *)a2;
          goto LABEL_52;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        case 2:
          v6 = *(char *)(*(_QWORD *)a1 + 31);
          v7 = *(char *)(*(_QWORD *)a2 + 31);
          if (v7 >= 0)
            v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
          else
            v8 = *(_QWORD *)(*(_QWORD *)a2 + 16);
          if (v7 >= 0)
            v9 = (const void *)(*(_QWORD *)a2 + 8);
          else
            v9 = *(const void **)(*(_QWORD *)a2 + 8);
          if (v6 >= 0)
            v10 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
          else
            v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
          if (v6 >= 0)
            v11 = (const void *)(*(_QWORD *)a1 + 8);
          else
            v11 = *(const void **)(*(_QWORD *)a1 + 8);
          if (v10 >= v8)
            v12 = v8;
          else
            v12 = v10;
          v13 = memcmp(v9, v11, v12);
          if (v13)
            result = v13 < 0;
          else
            result = v8 < v10;
          goto LABEL_46;
        default:
          turi::apply_binary_op_ff();
      }
    case 3:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        case 3:
          v15 = *(double **)(*(_QWORD *)a1 + 8);
          v16 = *(double **)(*(_QWORD *)a2 + 8);
          v17 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v16) >> 3;
          v18 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v15) >> 3;
          if (*(double **)(*(_QWORD *)a1 + 16) == v15)
            goto LABEL_33;
          if (v18 <= 1)
            v19 = 1;
          else
            v19 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v15) >> 3;
          v20 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v16) >> 3;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 4:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        case 4:
          result = turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&v25, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
          goto LABEL_46;
        default:
          turi::apply_binary_op_ff();
      }
    case 5:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_44;
    case 6:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
          v5 = *(_QWORD *)a1 <= (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
          goto LABEL_52;
        case 1:
          v21 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8) < *(double *)a1;
LABEL_56:
          result = v21;
          goto LABEL_46;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        case 6:
          v24 = (uint64_t)(*(_QWORD *)a1 << 8) >> 8;
          if (v24 > (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
            goto LABEL_60;
          if (v24 != (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
            goto LABEL_45;
          v5 = a1[2] <= *(_DWORD *)(a2 + 8);
LABEL_52:
          result = !v5;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_46;
    case 7:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_44;
    case 8:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_44;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_44;
    case 9:
      switch(*((_BYTE *)a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          break;
        default:
          turi::apply_binary_op_ff();
      }
LABEL_44:
      turi::flexible_type_fail(0);
      goto LABEL_45;
    default:
      turi::apply_binary_op_ff();
  }
  while (v20 && *v15 <= *v16)
  {
    if (*v15 < *v16)
    {
LABEL_45:
      result = 0;
      goto LABEL_46;
    }
    ++v16;
    ++v15;
    --v20;
    if (!--v19)
    {
LABEL_33:
      result = v18 > v17;
      goto LABEL_46;
    }
  }
LABEL_60:
  result = 1;
LABEL_46:
  *(_BYTE *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_43>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934E18;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934E18;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  unsigned int v7;
  BOOL v8;
  double v9;
  char v10;
  const void *v11;
  size_t v12;
  unsigned int v13;
  double *v14;
  double *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _BOOL4 v21;
  BOOL v22;
  double v23;
  uint64_t v24;
  unsigned int v25;
  double v27;
  double v28;
  size_t v29;
  unsigned int v30;
  double *v31;
  double *v32;
  unint64_t v33;
  double *v34;
  uint64_t v35;
  unint64_t v36;
  double *v37;
  double *v38;
  double v39;
  double v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v47;
  double v48;
  double v49;
  uint64_t v50;
  double v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  double v91;
  double v92;
  size_t v93;
  const void *v94;
  size_t v95;
  int v96;
  BOOL v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  size_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  char v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;

  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(a1[12])
      {
        case 0u:
          if (*(_QWORD *)a1 < *(_QWORD *)a2)
            goto LABEL_163;
          goto LABEL_44;
        case 1u:
          v48 = *(double *)a1;
          v49 = (double)*(uint64_t *)a2;
          goto LABEL_98;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_43;
        case 6u:
          if (*(_QWORD *)a2 > (uint64_t)(*(_QWORD *)a1 << 8) >> 8)
            goto LABEL_163;
          goto LABEL_44;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(a1[12])
      {
        case 0u:
          if (*(double *)a2 > (double)*(uint64_t *)a1)
            goto LABEL_163;
          goto LABEL_44;
        case 1u:
          v48 = *(double *)a1;
          v49 = *(double *)a2;
LABEL_98:
          if (v48 < v49)
            goto LABEL_163;
          goto LABEL_44;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_43;
        case 6u:
          if ((double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8) < *(double *)a2)
            goto LABEL_163;
          goto LABEL_44;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v7 = a1[12];
      v8 = v7 - 3 >= 7 && v7 >= 2;
      if (!v8)
        goto LABEL_43;
      if (v7 != 2)
        turi::apply_binary_op_ff();
      v9 = *(double *)a1;
      v10 = *(_BYTE *)(*(_QWORD *)a2 + 31);
      if (*(char *)(*(_QWORD *)a1 + 31) < 0)
      {
        v11 = *(const void **)(*(_QWORD *)&v9 + 8);
        v12 = *(_QWORD *)(*(_QWORD *)&v9 + 16);
      }
      else
      {
        v11 = (const void *)(*(_QWORD *)&v9 + 8);
        v12 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
      }
      if (v10 >= 0)
        v93 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
      else
        v93 = *(_QWORD *)(*(_QWORD *)a2 + 16);
      if (v10 >= 0)
        v94 = (const void *)(*(_QWORD *)a2 + 8);
      else
        v94 = *(const void **)(*(_QWORD *)a2 + 8);
      if (v93 >= v12)
        v95 = v12;
      else
        v95 = v93;
      v96 = memcmp(v11, v94, v95);
      v97 = v12 < v93;
      if (v96)
        v97 = v96 < 0;
      if (v97)
        goto LABEL_163;
      goto LABEL_44;
    case 3:
      v13 = a1[12];
      if (v13 > 9)
        turi::apply_binary_op_ff();
      if (v13 != 3)
        goto LABEL_43;
      v14 = *(double **)(*(_QWORD *)a1 + 8);
      v15 = *(double **)(*(_QWORD *)a2 + 8);
      v16 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v15) >> 3;
      v17 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v14) >> 3;
      if (*(double **)(*(_QWORD *)a1 + 16) == v14)
        goto LABEL_27;
      if (v17 <= 1)
        v18 = 1;
      else
        v18 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v14) >> 3;
      v19 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v15) >> 3;
      break;
    case 4:
      v20 = a1[12];
      if (v20 > 9)
        turi::apply_binary_op_ff();
      if (v20 != 4)
        goto LABEL_43;
      if (turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&v108, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(*(_QWORD *)a2 + 8)))
      {
        goto LABEL_163;
      }
      goto LABEL_44;
    case 5:
      if (a1[12] >= 0xAu)
        turi::apply_binary_op_ff();
      goto LABEL_43;
    case 6:
      switch(a1[12])
      {
        case 0u:
          if (*(_QWORD *)a1 < (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
            goto LABEL_163;
          goto LABEL_44;
        case 1u:
          if ((double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8) > *(double *)a1)
            goto LABEL_163;
          goto LABEL_44;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_43;
        case 6u:
          v50 = (uint64_t)(*(_QWORD *)a1 << 8) >> 8;
          if (v50 < (uint64_t)(*(_QWORD *)a2 << 8) >> 8
            || v50 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && *((_DWORD *)a1 + 2) < *(_DWORD *)(a2 + 8))
          {
            goto LABEL_163;
          }
          goto LABEL_44;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      if (a1[12] >= 0xAu)
        turi::apply_binary_op_ff();
      goto LABEL_43;
    case 8:
      if (a1[12] >= 0xAu)
        turi::apply_binary_op_ff();
      goto LABEL_43;
    case 9:
      if (a1[12] >= 0xAu)
        turi::apply_binary_op_ff();
LABEL_43:
      turi::flexible_type_fail(0);
      goto LABEL_44;
    default:
      turi::apply_binary_op_ff();
  }
  while (v19 && *v14 <= *v15)
  {
    if (*v14 < *v15)
      goto LABEL_163;
    ++v15;
    ++v14;
    --v19;
    if (!--v18)
    {
LABEL_27:
      if (v17 < v16)
      {
LABEL_163:
        v21 = 1;
        goto LABEL_93;
      }
      break;
    }
  }
LABEL_44:
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      v21 = 0;
      switch(a1[12])
      {
        case 0u:
          v22 = *(_QWORD *)a1 == *(_QWORD *)a2;
          goto LABEL_81;
        case 1u:
          v23 = *(double *)a1;
          v24 = *(_QWORD *)a2;
          goto LABEL_139;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_93;
        case 6u:
          v22 = *(_QWORD *)a2 == (uint64_t)(*(_QWORD *)a1 << 8) >> 8 && *((_DWORD *)a1 + 2) == 0;
          goto LABEL_81;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      v21 = 0;
      switch(a1[12])
      {
        case 0u:
          v23 = *(double *)a2;
          v24 = *(_QWORD *)a1;
LABEL_139:
          v22 = v23 == (double)v24;
          goto LABEL_81;
        case 1u:
          v21 = *(double *)a1 == *(double *)a2;
          goto LABEL_93;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_93;
        case 6u:
          v91 = *(double *)a2;
          v92 = (double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
          goto LABEL_146;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v25 = a1[12];
      if (v25 - 3 < 7 || v25 < 2)
        goto LABEL_92;
      if (v25 != 2)
        turi::apply_binary_op_ff();
      v27 = *(double *)a2;
      v28 = *(double *)a1;
      v29 = *(char *)(*(_QWORD *)a1 + 31) < 0
          ? *(_QWORD *)(*(_QWORD *)&v28 + 16)
          : *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
      v98 = *(char *)(*(_QWORD *)&v27 + 31) < 0
          ? *(_QWORD *)(*(_QWORD *)&v27 + 16)
          : *(unsigned __int8 *)(*(_QWORD *)&v27 + 31);
      if (v29 != v98)
        goto LABEL_92;
      v99 = (_QWORD *)(*(_QWORD *)&v28 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a1 + 31) & 0x80) != 0)
        v99 = (_QWORD *)*v99;
      v100 = (_QWORD *)(*(_QWORD *)&v27 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v27 + 31) & 0x80) != 0)
        v100 = (_QWORD *)*v100;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 31) & 0x80) != 0)
      {
        v22 = memcmp(v99, v100, v29) == 0;
LABEL_81:
        v21 = v22;
      }
      else
      {
        if (!v29)
          goto LABEL_163;
        v101 = v29 - 1;
        do
        {
          v103 = *(unsigned __int8 *)v99;
          v99 = (_QWORD *)((char *)v99 + 1);
          v102 = v103;
          v105 = *(unsigned __int8 *)v100;
          v100 = (_QWORD *)((char *)v100 + 1);
          v104 = v105;
          v8 = v101-- != 0;
          v106 = v8;
          v21 = v102 == v104;
        }
        while (v102 == v104 && (v106 & 1) != 0);
      }
      goto LABEL_93;
    case 3:
      v30 = a1[12];
      if (v30 > 9)
        turi::apply_binary_op_ff();
      if (v30 != 3)
        goto LABEL_92;
      v32 = *(double **)(*(_QWORD *)a1 + 8);
      v31 = *(double **)(*(_QWORD *)a1 + 16);
      v33 = v31 - v32;
      v34 = *(double **)(*(_QWORD *)a2 + 8);
      if (v33 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v34) >> 3)
        goto LABEL_92;
      if (v31 == v32)
        goto LABEL_163;
      if (v33 <= 1)
        v35 = 1;
      else
        v35 = v31 - v32;
      if (*v32 != *v34)
        goto LABEL_92;
      v36 = 0;
      v37 = v34 + 1;
      v38 = v32 + 1;
      while (v35 - 1 != v36)
      {
        v39 = v38[v36];
        v40 = v37[v36++];
        if (v39 != v40)
          goto LABEL_184;
      }
      v36 = v35;
LABEL_184:
      v21 = v36 >= v33;
      goto LABEL_93;
    case 4:
      v41 = a1[12];
      if (v41 > 9)
        turi::apply_binary_op_ff();
      if (v41 != 4)
        goto LABEL_92;
      v42 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v108, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
      goto LABEL_90;
    case 5:
      v43 = a1[12];
      if (v43 > 9)
        turi::apply_binary_op_ff();
      if (v43 != 5)
        goto LABEL_92;
      v42 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v108, (uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t **)(*(_QWORD *)a2 + 8));
      goto LABEL_90;
    case 6:
      v21 = 0;
      switch(a1[12])
      {
        case 0u:
          v22 = *(_QWORD *)a1 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && *(_DWORD *)(a2 + 8) == 0;
          goto LABEL_81;
        case 1u:
          v92 = *(double *)a1;
          v91 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
LABEL_146:
          v21 = vabdd_f64(v92, v91) < 0.0000005;
          goto LABEL_93;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_93;
        case 6u:
          v22 = ((*(_QWORD *)a2 ^ *(_QWORD *)a1) & 0xFFFFFFFFFFFFFFLL) == 0
             && *((_DWORD *)a1 + 2) == *(_DWORD *)(a2 + 8);
          goto LABEL_81;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v44 = a1[12];
      if (v44 >= 0xA)
        turi::apply_binary_op_ff();
      v22 = v44 == 7;
      goto LABEL_81;
    case 8:
      v45 = a1[12];
      if (v45 < 8 || v45 == 9)
        goto LABEL_92;
      if (v45 != 8)
        turi::apply_binary_op_ff();
      v42 = turi::image_type::operator==(*(_QWORD *)a1 + 8, *(_QWORD *)a2 + 8);
LABEL_90:
      v21 = v42;
      goto LABEL_93;
    case 9:
      v47 = a1[12];
      if (v47 < 9)
        goto LABEL_92;
      if (v47 != 9)
        turi::apply_binary_op_ff();
      v51 = *(double *)a2;
      v52 = *(_QWORD **)a1;
      if (*(_QWORD **)a2 == v52)
        goto LABEL_163;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v52 + 1), *(_QWORD *)&v51 + 8))
      {
LABEL_92:
        v21 = 0;
        goto LABEL_93;
      }
      v54 = (char *)v52[3];
      v53 = (char *)v52[4];
      v55 = v53 - v54;
      if (v53 == v54)
        goto LABEL_163;
      if (!v52[1])
        goto LABEL_163;
      v56 = 1;
      do
      {
        v57 = *(_QWORD *)v54;
        v54 += 8;
        v56 *= v57;
      }
      while (v54 != v53);
      if (!v56)
        goto LABEL_163;
      v107 = 0;
      std::vector<unsigned long>::vector(&v108, v55 >> 3, &v107);
      v58 = v108;
      v59 = v109;
      v60 = **(_QWORD **)(*(_QWORD *)&v51 + 8);
      v61 = (char *)v109 - (char *)v108;
      v62 = v109 - v108;
      v63 = v62 - 1;
      if (v62 <= 1)
        v64 = 1;
      else
        v64 = v109 - v108;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    if (v59 == v58)
    {
      v72 = 0;
      v73 = *(double *)(*(_QWORD *)v52[1] + 8 * v52[9]);
    }
    else
    {
      v65 = 0;
      v66 = (uint64_t *)v52[6];
      v67 = v58;
      v68 = v64;
      do
      {
        v70 = *v67++;
        v69 = v70;
        v71 = *v66++;
        v65 += v71 * v69;
        --v68;
      }
      while (v68);
      v72 = 0;
      v73 = *(double *)(*(_QWORD *)v52[1] + 8 * (v52[9] + v65));
      v74 = *(uint64_t **)(*(_QWORD *)&v51 + 48);
      v75 = v58;
      v76 = v64;
      do
      {
        v78 = *v75++;
        v77 = v78;
        v79 = *v74++;
        v72 += v79 * v77;
        --v76;
      }
      while (v76);
    }
    v80 = *(double *)(v60 + 8 * (*(_QWORD *)(*(_QWORD *)&v51 + 72) + v72));
    v21 = v73 == v80;
    if (v73 != v80)
      break;
    v81 = v62;
    v82 = v62 - 1;
    if (v61 >= 1)
    {
      v83 = v52[3];
      v84 = v58[v63] + 1;
      v58[v63] = v84;
      if (v84 >= *(_QWORD *)(v83 + 8 * v63))
      {
        v85 = v83 - 16;
        v86 = v62;
        v87 = (unint64_t *)((char *)v58 + (v61 & 0xFFFFFFFFFFFFFFF8) - 16);
        while (1)
        {
          v88 = v86 - 1;
          v87[1] = 0;
          if ((uint64_t)(v86 - 1) <= 0)
            break;
          v89 = *v87 + 1;
          *v87-- = v89;
          v90 = *(_QWORD *)(v85 + 8 * v86--);
          if (v89 < v90)
          {
            v82 = v88 - 1;
            v81 = 1;
            goto LABEL_135;
          }
        }
        v21 = 1;
        break;
      }
      v81 = 1;
      v82 = v62 - 1;
    }
LABEL_135:
    ;
  }
  while (v81 && (v82 & 0x8000000000000000) == 0);
  if (v58)
  {
    v109 = v58;
    operator delete(v58);
  }
LABEL_93:
  *(_BYTE *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = v21;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_44>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934E98;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934E98;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  unsigned int v7;
  BOOL v8;
  int v9;
  int v10;
  size_t v11;
  const void *v12;
  size_t v13;
  const void *v14;
  size_t v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  double *v19;
  double *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BOOL4 v26;
  BOOL v27;
  double v28;
  uint64_t v29;
  unsigned int v30;
  double v31;
  double v32;
  size_t v33;
  unsigned int v34;
  double *v35;
  double *v36;
  unint64_t v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  double *v41;
  double *v42;
  double v43;
  double v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  double v51;
  double v52;
  uint64_t v53;
  double v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  double v94;
  double v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  size_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  char v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;

  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(a1[12])
      {
        case 0u:
          if (*(_QWORD *)a1 > *(_QWORD *)a2)
            goto LABEL_181;
          goto LABEL_61;
        case 1u:
          v51 = *(double *)a1;
          v52 = (double)*(uint64_t *)a2;
          goto LABEL_111;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_60;
        case 6u:
          if (*(_QWORD *)a2 < (uint64_t)(*(_QWORD *)a1 << 8) >> 8)
            goto LABEL_181;
          goto LABEL_61;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(a1[12])
      {
        case 0u:
          if (*(double *)a2 < (double)*(uint64_t *)a1)
            goto LABEL_181;
          goto LABEL_61;
        case 1u:
          v51 = *(double *)a1;
          v52 = *(double *)a2;
LABEL_111:
          if (v51 > v52)
            goto LABEL_181;
          goto LABEL_61;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_60;
        case 6u:
          if ((double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8) > *(double *)a2)
            goto LABEL_181;
          goto LABEL_61;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v7 = a1[12];
      v8 = v7 - 3 >= 7 && v7 >= 2;
      if (!v8)
        goto LABEL_60;
      if (v7 != 2)
        turi::apply_binary_op_ff();
      v9 = *(char *)(*(_QWORD *)a1 + 31);
      v10 = *(char *)(*(_QWORD *)a2 + 31);
      if (v10 >= 0)
        v11 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
      else
        v11 = *(_QWORD *)(*(_QWORD *)a2 + 16);
      if (v10 >= 0)
        v12 = (const void *)(*(_QWORD *)a2 + 8);
      else
        v12 = *(const void **)(*(_QWORD *)a2 + 8);
      if (v9 >= 0)
        v13 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
      else
        v13 = *(_QWORD *)(*(_QWORD *)a1 + 16);
      if (v9 >= 0)
        v14 = (const void *)(*(_QWORD *)a1 + 8);
      else
        v14 = *(const void **)(*(_QWORD *)a1 + 8);
      if (v13 >= v11)
        v15 = v11;
      else
        v15 = v13;
      v16 = memcmp(v12, v14, v15);
      v17 = v11 < v13;
      if (v16)
        v17 = v16 < 0;
      if (v17)
        goto LABEL_181;
      goto LABEL_61;
    case 3:
      v18 = a1[12];
      if (v18 > 9)
        turi::apply_binary_op_ff();
      if (v18 != 3)
        goto LABEL_60;
      v19 = *(double **)(*(_QWORD *)a1 + 8);
      v20 = *(double **)(*(_QWORD *)a2 + 8);
      v21 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v20) >> 3;
      v22 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v19) >> 3;
      if (*(double **)(*(_QWORD *)a1 + 16) == v19)
        goto LABEL_44;
      if (v22 <= 1)
        v23 = 1;
      else
        v23 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v19) >> 3;
      v24 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v20) >> 3;
      break;
    case 4:
      v25 = a1[12];
      if (v25 > 9)
        turi::apply_binary_op_ff();
      if (v25 != 4)
        goto LABEL_60;
      if (turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&v106, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(*(_QWORD *)a2 + 8)))
      {
        goto LABEL_181;
      }
      goto LABEL_61;
    case 5:
      if (a1[12] >= 0xAu)
        turi::apply_binary_op_ff();
      goto LABEL_60;
    case 6:
      switch(a1[12])
      {
        case 0u:
          if (*(_QWORD *)a1 > (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
            goto LABEL_181;
          goto LABEL_61;
        case 1u:
          if ((double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8) < *(double *)a1)
            goto LABEL_181;
          goto LABEL_61;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_60;
        case 6u:
          v53 = (uint64_t)(*(_QWORD *)a1 << 8) >> 8;
          if (v53 > (uint64_t)(*(_QWORD *)a2 << 8) >> 8
            || v53 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && *((_DWORD *)a1 + 2) > *(_DWORD *)(a2 + 8))
          {
            goto LABEL_181;
          }
          goto LABEL_61;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      if (a1[12] >= 0xAu)
        turi::apply_binary_op_ff();
      goto LABEL_60;
    case 8:
      if (a1[12] >= 0xAu)
        turi::apply_binary_op_ff();
      goto LABEL_60;
    case 9:
      if (a1[12] >= 0xAu)
        turi::apply_binary_op_ff();
LABEL_60:
      turi::flexible_type_fail(0);
      goto LABEL_61;
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    if (!v24 || *v19 > *v20)
      goto LABEL_181;
    if (*v19 < *v20)
      goto LABEL_61;
    ++v20;
    ++v19;
    --v24;
    --v23;
  }
  while (v23);
LABEL_44:
  if (v22 > v21)
  {
LABEL_181:
    v26 = 1;
    goto LABEL_106;
  }
LABEL_61:
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      v26 = 0;
      switch(a1[12])
      {
        case 0u:
          v27 = *(_QWORD *)a1 == *(_QWORD *)a2;
          goto LABEL_96;
        case 1u:
          v28 = *(double *)a1;
          v29 = *(_QWORD *)a2;
          goto LABEL_152;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_106;
        case 6u:
          v27 = *(_QWORD *)a2 == (uint64_t)(*(_QWORD *)a1 << 8) >> 8 && *((_DWORD *)a1 + 2) == 0;
          goto LABEL_96;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      v26 = 0;
      switch(a1[12])
      {
        case 0u:
          v28 = *(double *)a2;
          v29 = *(_QWORD *)a1;
LABEL_152:
          v27 = v28 == (double)v29;
          goto LABEL_96;
        case 1u:
          v26 = *(double *)a1 == *(double *)a2;
          goto LABEL_106;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_106;
        case 6u:
          v94 = *(double *)a2;
          v95 = (double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
          goto LABEL_159;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v26 = 0;
      v30 = a1[12];
      if (v30 - 3 < 7 || v30 < 2)
        goto LABEL_106;
      if (v30 != 2)
        turi::apply_binary_op_ff();
      v31 = *(double *)a2;
      v32 = *(double *)a1;
      if (*(char *)(*(_QWORD *)a1 + 31) < 0)
        v33 = *(_QWORD *)(*(_QWORD *)&v32 + 16);
      else
        v33 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
      if (*(char *)(*(_QWORD *)&v31 + 31) < 0)
        v96 = *(_QWORD *)(*(_QWORD *)&v31 + 16);
      else
        v96 = *(unsigned __int8 *)(*(_QWORD *)&v31 + 31);
      if (v33 != v96)
        goto LABEL_105;
      v97 = (_QWORD *)(*(_QWORD *)&v32 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a1 + 31) & 0x80) != 0)
        v97 = (_QWORD *)*v97;
      v98 = (_QWORD *)(*(_QWORD *)&v31 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v31 + 31) & 0x80) != 0)
        v98 = (_QWORD *)*v98;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 31) & 0x80) != 0)
      {
        v27 = memcmp(v97, v98, v33) == 0;
LABEL_96:
        v26 = v27;
      }
      else
      {
        if (!v33)
          goto LABEL_181;
        v99 = v33 - 1;
        do
        {
          v101 = *(unsigned __int8 *)v97;
          v97 = (_QWORD *)((char *)v97 + 1);
          v100 = v101;
          v103 = *(unsigned __int8 *)v98;
          v98 = (_QWORD *)((char *)v98 + 1);
          v102 = v103;
          v8 = v99-- != 0;
          v104 = v8;
          v26 = v100 == v102;
        }
        while (v100 == v102 && (v104 & 1) != 0);
      }
      goto LABEL_106;
    case 3:
      v34 = a1[12];
      if (v34 > 9)
        turi::apply_binary_op_ff();
      if (v34 != 3)
        goto LABEL_105;
      v36 = *(double **)(*(_QWORD *)a1 + 8);
      v35 = *(double **)(*(_QWORD *)a1 + 16);
      v37 = v35 - v36;
      v38 = *(double **)(*(_QWORD *)a2 + 8);
      if (v37 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v38) >> 3)
        goto LABEL_105;
      if (v35 == v36)
        goto LABEL_181;
      if (v37 <= 1)
        v39 = 1;
      else
        v39 = v35 - v36;
      if (*v36 != *v38)
        goto LABEL_105;
      v40 = 0;
      v41 = v38 + 1;
      v42 = v36 + 1;
      while (v39 - 1 != v40)
      {
        v43 = v42[v40];
        v44 = v41[v40++];
        if (v43 != v44)
          goto LABEL_184;
      }
      v40 = v39;
LABEL_184:
      v26 = v40 >= v37;
      goto LABEL_106;
    case 4:
      v45 = a1[12];
      if (v45 > 9)
        turi::apply_binary_op_ff();
      if (v45 != 4)
        goto LABEL_105;
      v46 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v106, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
      goto LABEL_103;
    case 5:
      v47 = a1[12];
      if (v47 > 9)
        turi::apply_binary_op_ff();
      if (v47 != 5)
        goto LABEL_105;
      v46 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v106, (uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t **)(*(_QWORD *)a2 + 8));
      goto LABEL_103;
    case 6:
      v26 = 0;
      switch(a1[12])
      {
        case 0u:
          v27 = *(_QWORD *)a1 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && *(_DWORD *)(a2 + 8) == 0;
          goto LABEL_96;
        case 1u:
          v95 = *(double *)a1;
          v94 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
LABEL_159:
          v26 = vabdd_f64(v95, v94) < 0.0000005;
          goto LABEL_106;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_106;
        case 6u:
          v27 = ((*(_QWORD *)a2 ^ *(_QWORD *)a1) & 0xFFFFFFFFFFFFFFLL) == 0
             && *((_DWORD *)a1 + 2) == *(_DWORD *)(a2 + 8);
          goto LABEL_96;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v48 = a1[12];
      if (v48 >= 0xA)
        turi::apply_binary_op_ff();
      v27 = v48 == 7;
      goto LABEL_96;
    case 8:
      v26 = 0;
      v49 = a1[12];
      if (v49 < 8 || v49 == 9)
        goto LABEL_106;
      if (v49 != 8)
        turi::apply_binary_op_ff();
      v46 = turi::image_type::operator==(*(_QWORD *)a1 + 8, *(_QWORD *)a2 + 8);
LABEL_103:
      v26 = v46;
      goto LABEL_106;
    case 9:
      v50 = a1[12];
      if (v50 < 9)
        goto LABEL_105;
      if (v50 != 9)
        turi::apply_binary_op_ff();
      v54 = *(double *)a2;
      v55 = *(_QWORD **)a1;
      if (*(_QWORD **)a2 == v55)
        goto LABEL_181;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v55 + 1), *(_QWORD *)&v54 + 8))
      {
LABEL_105:
        v26 = 0;
        goto LABEL_106;
      }
      v57 = (char *)v55[3];
      v56 = (char *)v55[4];
      v58 = v56 - v57;
      if (v56 == v57)
        goto LABEL_181;
      if (!v55[1])
        goto LABEL_181;
      v59 = 1;
      do
      {
        v60 = *(_QWORD *)v57;
        v57 += 8;
        v59 *= v60;
      }
      while (v57 != v56);
      if (!v59)
        goto LABEL_181;
      v105 = 0;
      std::vector<unsigned long>::vector(&v106, v58 >> 3, &v105);
      v61 = v106;
      v62 = v107;
      v63 = **(_QWORD **)(*(_QWORD *)&v54 + 8);
      v64 = (char *)v107 - (char *)v106;
      v65 = v107 - v106;
      v66 = v65 - 1;
      if (v65 <= 1)
        v67 = 1;
      else
        v67 = v107 - v106;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    if (v62 == v61)
    {
      v75 = 0;
      v76 = *(double *)(*(_QWORD *)v55[1] + 8 * v55[9]);
    }
    else
    {
      v68 = 0;
      v69 = (uint64_t *)v55[6];
      v70 = v61;
      v71 = v67;
      do
      {
        v73 = *v70++;
        v72 = v73;
        v74 = *v69++;
        v68 += v74 * v72;
        --v71;
      }
      while (v71);
      v75 = 0;
      v76 = *(double *)(*(_QWORD *)v55[1] + 8 * (v55[9] + v68));
      v77 = *(uint64_t **)(*(_QWORD *)&v54 + 48);
      v78 = v61;
      v79 = v67;
      do
      {
        v81 = *v78++;
        v80 = v81;
        v82 = *v77++;
        v75 += v82 * v80;
        --v79;
      }
      while (v79);
    }
    v83 = *(double *)(v63 + 8 * (*(_QWORD *)(*(_QWORD *)&v54 + 72) + v75));
    v26 = v76 == v83;
    if (v76 != v83)
      break;
    v84 = v65;
    v85 = v65 - 1;
    if (v64 >= 1)
    {
      v86 = v55[3];
      v87 = v61[v66] + 1;
      v61[v66] = v87;
      if (v87 >= *(_QWORD *)(v86 + 8 * v66))
      {
        v88 = v86 - 16;
        v89 = v65;
        v90 = (unint64_t *)((char *)v61 + (v64 & 0xFFFFFFFFFFFFFFF8) - 16);
        while (1)
        {
          v91 = v89 - 1;
          v90[1] = 0;
          if ((uint64_t)(v89 - 1) <= 0)
            break;
          v92 = *v90 + 1;
          *v90-- = v92;
          v93 = *(_QWORD *)(v88 + 8 * v89--);
          if (v92 < v93)
          {
            v85 = v91 - 1;
            v84 = 1;
            goto LABEL_148;
          }
        }
        v26 = 1;
        break;
      }
      v84 = 1;
      v85 = v65 - 1;
    }
LABEL_148:
    ;
  }
  while (v84 && (v85 & 0x8000000000000000) == 0);
  if (v61)
  {
    v107 = v61;
    operator delete(v61);
  }
LABEL_106:
  *(_BYTE *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = v26;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_45>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934F18;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934F18;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _BOOL4 v4;
  BOOL v5;
  double v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  double v11;
  char v12;
  size_t v13;
  unsigned int v14;
  double *v15;
  double *v16;
  unint64_t v17;
  double *v18;
  uint64_t v19;
  unint64_t v20;
  double *v21;
  double *v22;
  double v23;
  double v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  double v72;
  double v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  size_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;

  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      v4 = 0;
      switch(a1[12])
      {
        case 0u:
          v5 = *(_QWORD *)a1 == *(_QWORD *)a2;
          goto LABEL_38;
        case 1u:
          v6 = *(double *)a1;
          v7 = *(_QWORD *)a2;
          goto LABEL_83;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_50;
        case 6u:
          v5 = *(_QWORD *)a2 == (uint64_t)(*(_QWORD *)a1 << 8) >> 8 && *((_DWORD *)a1 + 2) == 0;
          goto LABEL_38;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      v4 = 0;
      switch(a1[12])
      {
        case 0u:
          v6 = *(double *)a2;
          v7 = *(_QWORD *)a1;
LABEL_83:
          v5 = v6 == (double)v7;
          goto LABEL_38;
        case 1u:
          v4 = *(double *)a1 == *(double *)a2;
          goto LABEL_50;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_50;
        case 6u:
          v72 = *(double *)a2;
          v73 = (double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
          goto LABEL_90;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v8 = a1[12];
      v9 = v8 - 3 >= 7 && v8 >= 2;
      if (!v9)
        goto LABEL_49;
      if (v8 != 2)
        turi::apply_binary_op_ff();
      v10 = *(_QWORD *)a2;
      v11 = *(double *)a1;
      v12 = *(_BYTE *)(*(_QWORD *)a1 + 31);
      v13 = v12 < 0 ? *(_QWORD *)(*(_QWORD *)&v11 + 16) : *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
      v74 = *(char *)(v10 + 31) < 0 ? *(_QWORD *)(v10 + 16) : *(unsigned __int8 *)(v10 + 31);
      if (v13 != v74)
        goto LABEL_49;
      v75 = (_QWORD *)(*(_QWORD *)&v11 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a1 + 31) & 0x80) != 0)
        v75 = (_QWORD *)*v75;
      v76 = (_QWORD *)(v10 + 8);
      if ((*(_BYTE *)(v10 + 31) & 0x80) != 0)
        v76 = (_QWORD *)*v76;
      if (v12 < 0)
      {
        v5 = memcmp(v75, v76, v13) == 0;
LABEL_38:
        v4 = v5;
      }
      else
      {
        if (!v13)
          goto LABEL_112;
        v77 = v13 - 1;
        do
        {
          v79 = *(unsigned __int8 *)v75;
          v75 = (_QWORD *)((char *)v75 + 1);
          v78 = v79;
          v81 = *(unsigned __int8 *)v76;
          v76 = (_QWORD *)((char *)v76 + 1);
          v80 = v81;
          v9 = v77-- != 0;
          v82 = v9;
          v4 = v78 == v80;
        }
        while (v78 == v80 && (v82 & 1) != 0);
      }
      goto LABEL_50;
    case 3:
      v14 = a1[12];
      if (v14 > 9)
        turi::apply_binary_op_ff();
      if (v14 != 3)
        goto LABEL_49;
      v16 = *(double **)(*(_QWORD *)a1 + 8);
      v15 = *(double **)(*(_QWORD *)a1 + 16);
      v17 = v15 - v16;
      v18 = *(double **)(*(_QWORD *)a2 + 8);
      if (v17 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v18) >> 3)
        goto LABEL_49;
      if (v15 == v16)
        goto LABEL_112;
      if (v17 <= 1)
        v19 = 1;
      else
        v19 = v15 - v16;
      if (*v16 != *v18)
        goto LABEL_49;
      v20 = 0;
      v21 = v18 + 1;
      v22 = v16 + 1;
      while (v19 - 1 != v20)
      {
        v23 = v22[v20];
        v24 = v21[v20++];
        if (v23 != v24)
          goto LABEL_115;
      }
      v20 = v19;
LABEL_115:
      v4 = v20 >= v17;
      goto LABEL_50;
    case 4:
      v25 = a1[12];
      if (v25 > 9)
        turi::apply_binary_op_ff();
      if (v25 != 4)
        goto LABEL_49;
      v26 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v84, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
      goto LABEL_47;
    case 5:
      v27 = a1[12];
      if (v27 > 9)
        turi::apply_binary_op_ff();
      if (v27 != 5)
        goto LABEL_49;
      v26 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v84, (uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t **)(*(_QWORD *)a2 + 8));
      goto LABEL_47;
    case 6:
      v4 = 0;
      switch(a1[12])
      {
        case 0u:
          v5 = *(_QWORD *)a1 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && *(_DWORD *)(a2 + 8) == 0;
          goto LABEL_38;
        case 1u:
          v73 = *(double *)a1;
          v72 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
LABEL_90:
          v4 = vabdd_f64(v73, v72) < 0.0000005;
          goto LABEL_50;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_50;
        case 6u:
          v5 = ((*(_QWORD *)a2 ^ *(_QWORD *)a1) & 0xFFFFFFFFFFFFFFLL) == 0 && *((_DWORD *)a1 + 2) == *(_DWORD *)(a2 + 8);
          goto LABEL_38;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v28 = a1[12];
      if (v28 >= 0xA)
        turi::apply_binary_op_ff();
      v5 = v28 == 7;
      goto LABEL_38;
    case 8:
      v29 = a1[12];
      if (v29 < 8 || v29 == 9)
        goto LABEL_49;
      if (v29 != 8)
        turi::apply_binary_op_ff();
      v26 = turi::image_type::operator==(*(_QWORD *)a1 + 8, *(_QWORD *)a2 + 8);
LABEL_47:
      v4 = v26;
      goto LABEL_50;
    case 9:
      v31 = a1[12];
      if (v31 < 9)
        goto LABEL_49;
      if (v31 != 9)
        turi::apply_binary_op_ff();
      v32 = *(_QWORD *)a2;
      v33 = *(_QWORD **)a1;
      if (*(_QWORD *)a2 == *(_QWORD *)a1)
        goto LABEL_112;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v33 + 1), v32 + 8))
      {
LABEL_49:
        v4 = 0;
        goto LABEL_50;
      }
      v35 = (char *)v33[3];
      v34 = (char *)v33[4];
      v36 = v34 - v35;
      if (v34 == v35)
        goto LABEL_112;
      if (!v33[1])
        goto LABEL_112;
      v37 = 1;
      do
      {
        v38 = *(_QWORD *)v35;
        v35 += 8;
        v37 *= v38;
      }
      while (v35 != v34);
      if (!v37)
      {
LABEL_112:
        v4 = 1;
        goto LABEL_50;
      }
      v83 = 0;
      std::vector<unsigned long>::vector(&v84, v36 >> 3, &v83);
      v39 = v84;
      v40 = v85;
      v41 = **(_QWORD **)(v32 + 8);
      v42 = (char *)v85 - (char *)v84;
      v43 = v85 - v84;
      v44 = v43 - 1;
      if (v43 <= 1)
        v45 = 1;
      else
        v45 = v85 - v84;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    if (v40 == v39)
    {
      v53 = 0;
      v54 = *(double *)(*(_QWORD *)v33[1] + 8 * v33[9]);
    }
    else
    {
      v46 = 0;
      v47 = (uint64_t *)v33[6];
      v48 = v39;
      v49 = v45;
      do
      {
        v51 = *v48++;
        v50 = v51;
        v52 = *v47++;
        v46 += v52 * v50;
        --v49;
      }
      while (v49);
      v53 = 0;
      v54 = *(double *)(*(_QWORD *)v33[1] + 8 * (v33[9] + v46));
      v55 = *(uint64_t **)(v32 + 48);
      v56 = v39;
      v57 = v45;
      do
      {
        v59 = *v56++;
        v58 = v59;
        v60 = *v55++;
        v53 += v60 * v58;
        --v57;
      }
      while (v57);
    }
    v61 = *(double *)(v41 + 8 * (*(_QWORD *)(v32 + 72) + v53));
    v4 = v54 == v61;
    if (v54 != v61)
    {
LABEL_80:
      if (!v39)
        goto LABEL_50;
      goto LABEL_117;
    }
    v62 = v43;
    v63 = v43 - 1;
    if (v42 >= 1)
      break;
LABEL_78:
    if (!v62 || (v63 & 0x8000000000000000) != 0)
      goto LABEL_80;
  }
  v64 = v33[3];
  v65 = v39[v44] + 1;
  v39[v44] = v65;
  if (v65 < *(_QWORD *)(v64 + 8 * v44))
  {
    v62 = 1;
    v63 = v43 - 1;
    goto LABEL_78;
  }
  v66 = v64 - 16;
  v67 = v43;
  v68 = (unint64_t *)((char *)v39 + (v42 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    v69 = v67 - 1;
    v68[1] = 0;
    if ((uint64_t)(v67 - 1) <= 0)
      break;
    v70 = *v68 + 1;
    *v68-- = v70;
    v71 = *(_QWORD *)(v66 + 8 * v67--);
    if (v70 < v71)
    {
      v63 = v69 - 1;
      v62 = 1;
      goto LABEL_78;
    }
  }
  v4 = 1;
LABEL_117:
  v85 = v39;
  operator delete(v39);
LABEL_50:
  *(_BYTE *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = v4;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_46>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D934F98;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D934F98;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _BOOL4 v4;
  BOOL v5;
  double v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  double v11;
  char v12;
  size_t v13;
  unsigned int v14;
  double *v15;
  double *v16;
  unint64_t v17;
  double *v18;
  uint64_t v19;
  unint64_t v20;
  double *v21;
  double *v22;
  double v23;
  double v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  double v72;
  double v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  size_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;

  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      v4 = 0;
      switch(a1[12])
      {
        case 0u:
          v5 = *(_QWORD *)a1 == *(_QWORD *)a2;
          goto LABEL_38;
        case 1u:
          v6 = *(double *)a1;
          v7 = *(_QWORD *)a2;
          goto LABEL_83;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_50;
        case 6u:
          v5 = *(_QWORD *)a2 == (uint64_t)(*(_QWORD *)a1 << 8) >> 8 && *((_DWORD *)a1 + 2) == 0;
          goto LABEL_38;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      v4 = 0;
      switch(a1[12])
      {
        case 0u:
          v6 = *(double *)a2;
          v7 = *(_QWORD *)a1;
LABEL_83:
          v5 = v6 == (double)v7;
          goto LABEL_38;
        case 1u:
          v4 = *(double *)a1 == *(double *)a2;
          goto LABEL_50;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_50;
        case 6u:
          v72 = *(double *)a2;
          v73 = (double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
          goto LABEL_90;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v8 = a1[12];
      v9 = v8 - 3 >= 7 && v8 >= 2;
      if (!v9)
        goto LABEL_49;
      if (v8 != 2)
        turi::apply_binary_op_ff();
      v10 = *(_QWORD *)a2;
      v11 = *(double *)a1;
      v12 = *(_BYTE *)(*(_QWORD *)a1 + 31);
      v13 = v12 < 0 ? *(_QWORD *)(*(_QWORD *)&v11 + 16) : *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
      v74 = *(char *)(v10 + 31) < 0 ? *(_QWORD *)(v10 + 16) : *(unsigned __int8 *)(v10 + 31);
      if (v13 != v74)
        goto LABEL_49;
      v75 = (_QWORD *)(*(_QWORD *)&v11 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a1 + 31) & 0x80) != 0)
        v75 = (_QWORD *)*v75;
      v76 = (_QWORD *)(v10 + 8);
      if ((*(_BYTE *)(v10 + 31) & 0x80) != 0)
        v76 = (_QWORD *)*v76;
      if (v12 < 0)
      {
        v5 = memcmp(v75, v76, v13) == 0;
LABEL_38:
        v4 = v5;
      }
      else
      {
        if (!v13)
          goto LABEL_112;
        v77 = v13 - 1;
        do
        {
          v79 = *(unsigned __int8 *)v75;
          v75 = (_QWORD *)((char *)v75 + 1);
          v78 = v79;
          v81 = *(unsigned __int8 *)v76;
          v76 = (_QWORD *)((char *)v76 + 1);
          v80 = v81;
          v9 = v77-- != 0;
          v82 = v9;
          v4 = v78 == v80;
        }
        while (v78 == v80 && (v82 & 1) != 0);
      }
      goto LABEL_50;
    case 3:
      v14 = a1[12];
      if (v14 > 9)
        turi::apply_binary_op_ff();
      if (v14 != 3)
        goto LABEL_49;
      v16 = *(double **)(*(_QWORD *)a1 + 8);
      v15 = *(double **)(*(_QWORD *)a1 + 16);
      v17 = v15 - v16;
      v18 = *(double **)(*(_QWORD *)a2 + 8);
      if (v17 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v18) >> 3)
        goto LABEL_49;
      if (v15 == v16)
        goto LABEL_112;
      if (v17 <= 1)
        v19 = 1;
      else
        v19 = v15 - v16;
      if (*v16 != *v18)
        goto LABEL_49;
      v20 = 0;
      v21 = v18 + 1;
      v22 = v16 + 1;
      while (v19 - 1 != v20)
      {
        v23 = v22[v20];
        v24 = v21[v20++];
        if (v23 != v24)
          goto LABEL_115;
      }
      v20 = v19;
LABEL_115:
      v4 = v20 >= v17;
      goto LABEL_50;
    case 4:
      v25 = a1[12];
      if (v25 > 9)
        turi::apply_binary_op_ff();
      if (v25 != 4)
        goto LABEL_49;
      v26 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v84, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
      goto LABEL_47;
    case 5:
      v27 = a1[12];
      if (v27 > 9)
        turi::apply_binary_op_ff();
      if (v27 != 5)
        goto LABEL_49;
      v26 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v84, (uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t **)(*(_QWORD *)a2 + 8));
      goto LABEL_47;
    case 6:
      v4 = 0;
      switch(a1[12])
      {
        case 0u:
          v5 = *(_QWORD *)a1 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && *(_DWORD *)(a2 + 8) == 0;
          goto LABEL_38;
        case 1u:
          v73 = *(double *)a1;
          v72 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
LABEL_90:
          v4 = vabdd_f64(v73, v72) < 0.0000005;
          goto LABEL_50;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_50;
        case 6u:
          v5 = ((*(_QWORD *)a2 ^ *(_QWORD *)a1) & 0xFFFFFFFFFFFFFFLL) == 0 && *((_DWORD *)a1 + 2) == *(_DWORD *)(a2 + 8);
          goto LABEL_38;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v28 = a1[12];
      if (v28 >= 0xA)
        turi::apply_binary_op_ff();
      v5 = v28 == 7;
      goto LABEL_38;
    case 8:
      v29 = a1[12];
      if (v29 < 8 || v29 == 9)
        goto LABEL_49;
      if (v29 != 8)
        turi::apply_binary_op_ff();
      v26 = turi::image_type::operator==(*(_QWORD *)a1 + 8, *(_QWORD *)a2 + 8);
LABEL_47:
      v4 = v26;
      goto LABEL_50;
    case 9:
      v31 = a1[12];
      if (v31 < 9)
        goto LABEL_49;
      if (v31 != 9)
        turi::apply_binary_op_ff();
      v32 = *(_QWORD *)a2;
      v33 = *(_QWORD **)a1;
      if (*(_QWORD *)a2 == *(_QWORD *)a1)
        goto LABEL_112;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v33 + 1), v32 + 8))
      {
LABEL_49:
        v4 = 0;
        goto LABEL_50;
      }
      v35 = (char *)v33[3];
      v34 = (char *)v33[4];
      v36 = v34 - v35;
      if (v34 == v35)
        goto LABEL_112;
      if (!v33[1])
        goto LABEL_112;
      v37 = 1;
      do
      {
        v38 = *(_QWORD *)v35;
        v35 += 8;
        v37 *= v38;
      }
      while (v35 != v34);
      if (!v37)
      {
LABEL_112:
        v4 = 1;
        goto LABEL_50;
      }
      v83 = 0;
      std::vector<unsigned long>::vector(&v84, v36 >> 3, &v83);
      v39 = v84;
      v40 = v85;
      v41 = **(_QWORD **)(v32 + 8);
      v42 = (char *)v85 - (char *)v84;
      v43 = v85 - v84;
      v44 = v43 - 1;
      if (v43 <= 1)
        v45 = 1;
      else
        v45 = v85 - v84;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    if (v40 == v39)
    {
      v53 = 0;
      v54 = *(double *)(*(_QWORD *)v33[1] + 8 * v33[9]);
    }
    else
    {
      v46 = 0;
      v47 = (uint64_t *)v33[6];
      v48 = v39;
      v49 = v45;
      do
      {
        v51 = *v48++;
        v50 = v51;
        v52 = *v47++;
        v46 += v52 * v50;
        --v49;
      }
      while (v49);
      v53 = 0;
      v54 = *(double *)(*(_QWORD *)v33[1] + 8 * (v33[9] + v46));
      v55 = *(uint64_t **)(v32 + 48);
      v56 = v39;
      v57 = v45;
      do
      {
        v59 = *v56++;
        v58 = v59;
        v60 = *v55++;
        v53 += v60 * v58;
        --v57;
      }
      while (v57);
    }
    v61 = *(double *)(v41 + 8 * (*(_QWORD *)(v32 + 72) + v53));
    v4 = v54 == v61;
    if (v54 != v61)
    {
LABEL_80:
      if (!v39)
        goto LABEL_50;
      goto LABEL_117;
    }
    v62 = v43;
    v63 = v43 - 1;
    if (v42 >= 1)
      break;
LABEL_78:
    if (!v62 || (v63 & 0x8000000000000000) != 0)
      goto LABEL_80;
  }
  v64 = v33[3];
  v65 = v39[v44] + 1;
  v39[v44] = v65;
  if (v65 < *(_QWORD *)(v64 + 8 * v44))
  {
    v62 = 1;
    v63 = v43 - 1;
    goto LABEL_78;
  }
  v66 = v64 - 16;
  v67 = v43;
  v68 = (unint64_t *)((char *)v39 + (v42 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    v69 = v67 - 1;
    v68[1] = 0;
    if ((uint64_t)(v67 - 1) <= 0)
      break;
    v70 = *v68 + 1;
    *v68-- = v70;
    v71 = *(_QWORD *)(v66 + 8 * v67--);
    if (v70 < v71)
    {
      v63 = v69 - 1;
      v62 = 1;
      goto LABEL_78;
    }
  }
  v4 = 1;
LABEL_117:
  v85 = v39;
  operator delete(v39);
LABEL_50:
  *(_BYTE *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = !v4;
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_47>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D935018;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D935018;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(_BYTE *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  int v3;
  BOOL v4;
  double v5;
  int v6;
  BOOL v7;
  double v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;

  v3 = 1;
  switch(a1[12])
  {
    case 0:
      v5 = *(double *)a1;
      goto LABEL_9;
    case 1:
      v4 = *(double *)a1 == 0.0;
      goto LABEL_10;
    case 2:
      if (*(char *)(*(_QWORD *)a1 + 31) < 0)
        v5 = *(double *)(*(_QWORD *)a1 + 16);
      else
        *(_QWORD *)&v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
LABEL_9:
      v4 = *(_QWORD *)&v5 == 0;
      goto LABEL_10;
    case 3:
    case 4:
    case 5:
      v4 = *(_QWORD *)(*(_QWORD *)a1 + 8) == *(_QWORD *)(*(_QWORD *)a1 + 16);
      goto LABEL_10;
    case 7:
      break;
    case 8:
      v4 = *(_QWORD *)(*(_QWORD *)a1 + 64) == 3;
LABEL_10:
      v3 = v4;
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
  v6 = 1;
  switch(a2[12])
  {
    case 0:
      v8 = *(double *)a2;
      goto LABEL_21;
    case 1:
      v7 = *(double *)a2 == 0.0;
      goto LABEL_22;
    case 2:
      if (*(char *)(*(_QWORD *)a2 + 31) < 0)
        v8 = *(double *)(*(_QWORD *)a2 + 16);
      else
        *(_QWORD *)&v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
LABEL_21:
      v7 = *(_QWORD *)&v8 == 0;
      goto LABEL_22;
    case 3:
    case 4:
    case 5:
      v7 = *(_QWORD *)(*(_QWORD *)a2 + 8) == *(_QWORD *)(*(_QWORD *)a2 + 16);
      goto LABEL_22;
    case 7:
      goto LABEL_25;
    case 8:
      v7 = *(_QWORD *)(*(_QWORD *)a2 + 64) == 3;
LABEL_22:
      v6 = v7;
LABEL_25:
      if (a1[12] != 7 && a2[12] != 7)
      {
        *(_BYTE *)(a3 + 12) = 0;
        *(_DWORD *)(a3 + 8) = 0;
        *(_QWORD *)a3 = (v3 | v6) ^ 1u;
        return;
      }
      if (a1[12] == 7)
      {
        if ((a2[12] == 7) | (v6 ^ 1) & 1)
        {
          *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
          *(_BYTE *)(a3 + 12) = 0;
          if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
          {
            *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
            *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
            v9 = byte_254FF28D4;
            *(_BYTE *)(a3 + 12) = byte_254FF28D4;
            switch(v9)
            {
              case 2:
                v10 = *(unint64_t **)a3;
                do
                  v11 = __ldaxr(v10);
                while (__stlxr(v11 + 1, v10));
                break;
              case 3:
                v15 = *(unint64_t **)a3;
                do
                  v16 = __ldaxr(v15);
                while (__stlxr(v16 + 1, v15));
                break;
              case 4:
                v17 = *(unint64_t **)a3;
                do
                  v18 = __ldaxr(v17);
                while (__stlxr(v18 + 1, v17));
                break;
              case 5:
                v19 = *(unint64_t **)a3;
                do
                  v20 = __ldaxr(v19);
                while (__stlxr(v20 + 1, v19));
                break;
              case 8:
                v21 = *(unint64_t **)a3;
                do
                  v22 = __ldaxr(v21);
                while (__stlxr(v22 + 1, v21));
                break;
              case 9:
                v23 = *(unint64_t **)a3;
                do
                  v24 = __ldaxr(v23);
                while (__stlxr(v24 + 1, v23));
                break;
              default:
                return;
            }
          }
          return;
        }
LABEL_35:
        *(_QWORD *)(a3 + 5) = 0;
        *(_QWORD *)a3 = 0;
        return;
      }
      if (v3)
        goto LABEL_35;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 12) = 0;
      if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
      {
        *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
        *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
        v12 = byte_254FF28D4;
        *(_BYTE *)(a3 + 12) = byte_254FF28D4;
        switch(v12)
        {
          case 2:
            v13 = *(unint64_t **)a3;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 + 1, v13));
            break;
          case 3:
            v25 = *(unint64_t **)a3;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 + 1, v25));
            break;
          case 4:
            v27 = *(unint64_t **)a3;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 + 1, v27));
            break;
          case 5:
            v29 = *(unint64_t **)a3;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 + 1, v29));
            break;
          case 8:
            v31 = *(unint64_t **)a3;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 + 1, v31));
            break;
          case 9:
            v33 = *(unint64_t **)a3;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 + 1, v33));
            break;
          default:
            return;
        }
      }
      return;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_48>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D935098;
  return result;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D935098;
}

void std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(_BYTE *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  int v3;
  BOOL v4;
  double v5;
  int v6;
  BOOL v7;
  double v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;

  v3 = 1;
  switch(a1[12])
  {
    case 0:
      v5 = *(double *)a1;
      goto LABEL_9;
    case 1:
      v4 = *(double *)a1 == 0.0;
      goto LABEL_10;
    case 2:
      if (*(char *)(*(_QWORD *)a1 + 31) < 0)
        v5 = *(double *)(*(_QWORD *)a1 + 16);
      else
        *(_QWORD *)&v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
LABEL_9:
      v4 = *(_QWORD *)&v5 == 0;
      goto LABEL_10;
    case 3:
    case 4:
    case 5:
      v4 = *(_QWORD *)(*(_QWORD *)a1 + 8) == *(_QWORD *)(*(_QWORD *)a1 + 16);
      goto LABEL_10;
    case 7:
      break;
    case 8:
      v4 = *(_QWORD *)(*(_QWORD *)a1 + 64) == 3;
LABEL_10:
      v3 = v4;
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
  v6 = 1;
  switch(a2[12])
  {
    case 0:
      v8 = *(double *)a2;
      goto LABEL_21;
    case 1:
      v7 = *(double *)a2 == 0.0;
      goto LABEL_22;
    case 2:
      if (*(char *)(*(_QWORD *)a2 + 31) < 0)
        v8 = *(double *)(*(_QWORD *)a2 + 16);
      else
        *(_QWORD *)&v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
LABEL_21:
      v7 = *(_QWORD *)&v8 == 0;
      goto LABEL_22;
    case 3:
    case 4:
    case 5:
      v7 = *(_QWORD *)(*(_QWORD *)a2 + 8) == *(_QWORD *)(*(_QWORD *)a2 + 16);
      goto LABEL_22;
    case 7:
      goto LABEL_25;
    case 8:
      v7 = *(_QWORD *)(*(_QWORD *)a2 + 64) == 3;
LABEL_22:
      v6 = v7;
LABEL_25:
      if (a1[12] != 7 && a2[12] != 7)
      {
        v12 = v3 & v6 ^ 1u;
        *(_BYTE *)(a3 + 12) = 0;
        *(_DWORD *)(a3 + 8) = 0;
LABEL_41:
        *(_QWORD *)a3 = v12;
        return;
      }
      if (a1[12] == 7)
      {
        if ((a2[12] == 7) | v6 & 1)
        {
          *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
          *(_BYTE *)(a3 + 12) = 0;
          if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
          {
            *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
            *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
            v9 = byte_254FF28D4;
            *(_BYTE *)(a3 + 12) = byte_254FF28D4;
            switch(v9)
            {
              case 2:
                v10 = *(unint64_t **)a3;
                do
                  v11 = __ldaxr(v10);
                while (__stlxr(v11 + 1, v10));
                break;
              case 3:
                v16 = *(unint64_t **)a3;
                do
                  v17 = __ldaxr(v16);
                while (__stlxr(v17 + 1, v16));
                break;
              case 4:
                v18 = *(unint64_t **)a3;
                do
                  v19 = __ldaxr(v18);
                while (__stlxr(v19 + 1, v18));
                break;
              case 5:
                v20 = *(unint64_t **)a3;
                do
                  v21 = __ldaxr(v20);
                while (__stlxr(v21 + 1, v20));
                break;
              case 8:
                v22 = *(unint64_t **)a3;
                do
                  v23 = __ldaxr(v22);
                while (__stlxr(v23 + 1, v22));
                break;
              case 9:
                v24 = *(unint64_t **)a3;
                do
                  v25 = __ldaxr(v24);
                while (__stlxr(v25 + 1, v24));
                break;
              default:
                return;
            }
          }
          return;
        }
        goto LABEL_40;
      }
      if ((v3 & 1) == 0)
      {
LABEL_40:
        *(_BYTE *)(a3 + 12) = 0;
        *(_DWORD *)(a3 + 8) = 0;
        v12 = 1;
        goto LABEL_41;
      }
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 12) = 0;
      if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
      {
        *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
        *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
        v13 = byte_254FF28D4;
        *(_BYTE *)(a3 + 12) = byte_254FF28D4;
        switch(v13)
        {
          case 2:
            v14 = *(unint64_t **)a3;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 + 1, v14));
            break;
          case 3:
            v26 = *(unint64_t **)a3;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 + 1, v26));
            break;
          case 4:
            v28 = *(unint64_t **)a3;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 + 1, v28));
            break;
          case 5:
            v30 = *(unint64_t **)a3;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 + 1, v30));
            break;
          case 8:
            v32 = *(unint64_t **)a3;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 + 1, v32));
            break;
          case 9:
            v34 = *(unint64_t **)a3;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 + 1, v34));
            break;
          default:
            return;
        }
      }
      return;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

uint64_t std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49,std::allocator<turi::unity_sarray_binary_operations::get_binary_operator(turi::flex_type_enum,turi::flex_type_enum,std::string)::$_49>,turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_unity_sarray_binary_operations_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_218274268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_10()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_unity_sarray_builder_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

turi::unity_sframe *turi::unity_sframe::unity_sframe(turi::unity_sframe *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  const turi::sframe *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const turi::sframe *v17;
  std::__shared_weak_count *v18;
  std::string __p;
  void *v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24D935168;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  {
    turi::mutex::mutex(&turi::get_empty_sframe(void)::static_sf_lock);
    __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::get_empty_sframe(void)::static_sf_lock, &dword_217E69000);
  }
  pthread_mutex_lock(&turi::get_empty_sframe(void)::static_sf_lock);
  v3 = turi::get_empty_sframe(void)::sf;
  if (!turi::get_empty_sframe(void)::sf)
  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    v4[1] = 0;
    turi::get_empty_sframe(void)::sf = (uint64_t)v4;
    _ZNSt3__115allocate_sharedB8ne180100IN4turi6sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v23);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](turi::get_empty_sframe(void)::sf, &v23);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(_QWORD *)turi::get_empty_sframe(void)::sf;
    v23 = 0uLL;
    v24 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    turi::sframe::open_for_write(v8, &v23, &v20, &__p, 1, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v20)
    {
      v21 = v20;
      operator delete(v20);
    }
    v20 = &v23;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    (*(void (**)(_QWORD))(**(_QWORD **)turi::get_empty_sframe(void)::sf + 40))(*(_QWORD *)turi::get_empty_sframe(void)::sf);
    v3 = turi::get_empty_sframe(void)::sf;
  }
  v10 = *(const turi::sframe **)v3;
  v9 = *(std::__shared_weak_count **)(v3 + 8);
  v17 = v10;
  v18 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  pthread_mutex_unlock(&turi::get_empty_sframe(void)::static_sf_lock);
  turi::unity_sframe::set_sframe((uint64_t)this, &v17);
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return this;
}

void sub_21827462C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v25 = v21 + 12;
  v26 = *v23;
  *v23 = 0;
  if (v26)
    std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100]((uint64_t)v23, v26);
  v27 = *v25;
  *v25 = 0;
  if (v27)
    std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100]((uint64_t)(v21 + 12), v27);
  v28 = v21[11];
  v21[11] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v21 + 8));
  a21 = v21 + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22);
  cppipc::ipc_object_base::~ipc_object_base((cppipc::ipc_object_base *)v21);
  _Unwind_Resume(a1);
}

_QWORD *turi::unity_sframe::set_sframe(uint64_t a1, const turi::sframe **a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *exception;
  __int128 v15;
  _BYTE v16[296];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "set_sframe", 664, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet((const std::locale *)&v15, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale((std::locale *)&v15);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::sframe::sframe((turi::sframe *)v16, *a2);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node((uint64_t)v16, 0, -1, &v15);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 24, &v15);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  turi::sframe::~sframe((turi::sframe *)v16);
  if ((const turi::sframe *)a1 != *a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 40), *((std::string **)*a2 + 5), *((__int128 **)*a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)*a2 + 6) - *((_QWORD *)*a2 + 5)) >> 3));
  return std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(a1 + 64), (uint64_t *)a2);
}

void sub_218274950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::locale::~locale((std::locale *)&a9);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::~unity_sframe(turi::unity_sframe *this)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_24D935168;
  v2 = (_QWORD *)((char *)this + 64);
  v3 = (char *)this + 24;
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)this + 3);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 5);
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](v2);
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100]((uint64_t)this + 104, v4);
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100]((uint64_t)this + 96, v5);
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  v7 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  cppipc::ipc_object_base::~ipc_object_base(this);
}

{
  turi::unity_sframe::~unity_sframe(this);
  JUMPOUT(0x219A19A08);
}

void turi::unity_sframe::construct_from_dataframe(turi::unity_sframe *this, const turi::dataframe_t *a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *exception;
  std::locale v14;
  std::__shared_weak_count *v15;

  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "construct_from_dataframe", 87, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  (*(void (**)(turi::unity_sframe *))(*(_QWORD *)this + 56))(this);
  std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::dataframe_t const&,void>(a2, &v14);
  turi::unity_sframe::set_sframe((uint64_t)this, &v14.__locale_);
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_218274C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::construct_from_sframe(turi::unity_sframe *this, const turi::sframe *a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *exception;
  std::locale v14;
  std::__shared_weak_count *v15;

  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "construct_from_sframe", 93, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  (*(void (**)(turi::unity_sframe *))(*(_QWORD *)this + 56))(this);
  std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe const&,void>(a2, &v14);
  turi::unity_sframe::set_sframe((uint64_t)this, &v14.__locale_);
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_218274DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::construct_from_sframe_index(uint64_t a1, uint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  unsigned int v11;
  _BOOL4 is_web_protocol;
  size_t v14;
  void **v15;
  const void *v16;
  _BOOL4 v17;
  _BOOL4 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string *v22;
  int data;
  int v24;
  BOOL v26;
  size_t size;
  void **v28;
  std::string *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  _QWORD *exception;
  void *v34[2];
  char v35;
  const turi::sframe *v36;
  std::__shared_weak_count *v37;
  std::string v38;
  void *v39[2];
  char v40;
  std::string v41;
  std::string v42;
  void *v43[2];
  char v44;
  std::string __s;
  void *__p[2];
  char v47;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  char v51;
  std::string v52;
  __n128 v53;
  char v54;
  std::locale v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "construct_from_sframe_index", 99, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Construct sframe from location: ", 32);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v52 = *(std::string *)a2;
    turi::sanitize_url((__n128 *)&v52, &v53);
    v8 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v53);
    v9 = pthread_getspecific(*(_QWORD *)(v8 + 592));
    if (v9)
    {
      if (*((_BYTE *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(v9[2] - 24) + 16));
        v10 = std::locale::use_facet(&v55, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v55);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v8);
        if (*(_DWORD *)(v8 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v54 < 0)
      operator delete((void *)v53.n128_u64[0]);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  turi::fileio::get_file_status(a2, (uint64_t)&v48);
  v11 = v48;
  if (v48 > 3 || v48 == 2)
  {
    is_web_protocol = 0;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __s = *(std::string *)a2;
    turi::fileio::get_protocol(&__s, (std::string::size_type)__p);
    is_web_protocol = turi::fileio::is_web_protocol((uint64_t)__p);
  }
  if (v11 > 3 || v11 == 2)
    goto LABEL_30;
  if (v47 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if (!is_web_protocol)
      goto LABEL_50;
  }
  else
  {
LABEL_30:
    if (!is_web_protocol)
      goto LABEL_50;
  }
  if (*(char *)(a2 + 23) >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = v43;
  std::string::basic_string[abi:ne180100]((uint64_t)v43, v14 + 16);
  if (v44 < 0)
    v15 = (void **)v43[0];
  if (v14)
  {
    if (*(char *)(a2 + 23) >= 0)
      v16 = (const void *)a2;
    else
      v16 = *(const void **)a2;
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "/dir_archive.ini");
  v17 = turi::fileio::try_to_open_file((uint64_t)v43);
  v18 = v17;
  if ((v44 & 0x80000000) == 0)
  {
    if (!v17)
      goto LABEL_50;
LABEL_47:
    v48 = 2;
    if (v51 < 0)
    {
      *(_BYTE *)v49 = 0;
      v50 = 0;
    }
    else
    {
      LOBYTE(v49) = 0;
      v51 = 0;
    }
    goto LABEL_50;
  }
  operator delete(v43[0]);
  if (v18)
    goto LABEL_47;
LABEL_50:
  switch(v48)
  {
    case 0u:
      v55.__locale_ = (std::locale::__imp *)a2;
      v56 = &v48;
      turi::unity_sframe::construct_from_sframe_index(std::string)::$_0::operator()();
    case 1u:
      std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,std::string &,void>(a2, &v55);
      turi::unity_sframe::set_sframe(a1, &v55.__locale_);
      v19 = (std::__shared_weak_count *)v56;
      if (v56)
      {
        v20 = (unint64_t *)(v56 + 2);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      goto LABEL_99;
    case 2u:
      v55.__locale_ = (std::locale::__imp *)-1;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v59 = v60;
      v60[0] = 0;
      v60[1] = 0;
      v65 = 0;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0u;
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v42 = *(std::string *)a2;
      turi::dir_archive::open_directory_for_read((uint64_t)&v55, (uint64_t)&v42);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      memset(&v41, 0, sizeof(v41));
      std::string::basic_string[abi:ne180100]<0>(v39, "contents");
      if (!turi::dir_archive::get_metadata((uint64_t)&v55, (uint64_t)v39, &v41))
      {
        turi::unity_sarray::construct_from_sarray_index((uint64_t)v39);
        goto LABEL_106;
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v41.__r_.__value_.__l.__size_ == 6)
        {
          v22 = (std::string *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_67;
        }
LABEL_73:
        v26 = 1;
        goto LABEL_74;
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) != 6)
        goto LABEL_73;
      v22 = &v41;
LABEL_67:
      data = (int)v22->__r_.__value_.__l.__data_;
      v24 = WORD2(v22->__r_.__value_.__r.__words[0]);
      v26 = data != 1634887283 || v24 != 25965;
LABEL_74:
      if (v40 < 0)
        operator delete(v39[0]);
      if (v26)
LABEL_106:
        turi::unity_sframe::construct_from_sframe_index(std::string)::$_1::operator()();
      turi::dir_archive::get_next_read_prefix((turi::dir_archive *)&v55, &v38);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      else
        size = v38.__r_.__value_.__l.__size_;
      v28 = v34;
      std::string::basic_string[abi:ne180100]((uint64_t)v34, size + 10);
      if (v35 < 0)
        v28 = (void **)v34[0];
      if (size)
      {
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = &v38;
        else
          v29 = (std::string *)v38.__r_.__value_.__r.__words[0];
        memmove(v28, v29, size);
      }
      strcpy((char *)v28 + size, ".frame_idx");
      std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,std::string,void>((uint64_t)v34, &v36);
      if (v35 < 0)
        operator delete(v34[0]);
      turi::unity_sframe::set_sframe(a1, &v36);
      turi::dir_archive::close((turi::dir_archive *)&v55);
      v30 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      turi::dir_archive::~dir_archive((turi::dir_archive *)&v55);
LABEL_99:
      if (v51 < 0)
        operator delete(v49);
      return;
    case 3u:
      v55.__locale_ = (std::locale::__imp *)&v48;
      turi::unity_sframe::construct_from_sframe_index(std::string)::$_2::operator()();
    default:
      goto LABEL_99;
  }
}

void sub_21827546C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  turi::dir_archive::~dir_archive((turi::dir_archive *)(v41 - 208));
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sframe::construct_from_csvs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, const void ***a4@<X3>, uint64_t a5@<X8>)
{
  int *v7;
  file_logger *v8;
  file_logger *started;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  turi::flexible_type_impl *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t **v28;
  int *v29;
  uint64_t v30;
  uint64_t k;
  _QWORD *v32;
  file_logger *v33;
  file_logger *v34;
  std::string *begin;
  std::vector<std::string>::pointer i;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  char v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  __int128 v94;
  __int128 v95;
  int v96;
  _OWORD *v97;
  turi::flexible_type_impl *v98;
  int v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  std::runtime_error *v103;
  std::string *v104;
  __int128 v105;
  std::runtime_error *v106;
  std::string *v107;
  __int128 v108;
  int v109;
  _OWORD *v110;
  turi::flexible_type_impl *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  char v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  _OWORD *v123;
  turi::flexible_type_impl *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  char v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  _OWORD *v136;
  turi::flexible_type_impl *v137;
  int v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  char v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _OWORD *v151;
  char v152;
  BOOL v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  _OWORD *v157;
  size_t v158;
  unint64_t *v159;
  unint64_t v160;
  BOOL v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  const std::string *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  std::string::size_type v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t *v176;
  unint64_t *v177;
  uint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t *v186;
  void *v187;
  void *v188;
  unsigned int v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t *v193;
  void *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t *v201;
  size_t v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  double v206;
  double v207;
  unint64_t *v208;
  unint64_t v209;
  size_t v210;
  size_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int *v215;
  unsigned int v216;
  __int128 v217;
  __int128 v218;
  unint64_t *v219;
  unint64_t v220;
  BOOL v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  BOOL v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  BOOL v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  BOOL v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  BOOL v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  size_t v256;
  unint64_t *v257;
  unint64_t v258;
  size_t v259;
  void *v260;
  void *v261;
  unsigned int v262;
  unint64_t *v263;
  unint64_t v264;
  size_t v265;
  void *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  size_t v271;
  std::string *v272;
  std::vector<std::string>::pointer j;
  std::string::size_type size;
  std::string::size_type v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  __int128 v280;
  std::vector<std::string>::pointer end;
  __int128 v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  char *v286;
  char *v287;
  __int128 v288;
  std::string *v289;
  int v290;
  _OWORD *v291;
  turi::flexible_type_impl *v292;
  int v293;
  uint64_t v294;
  __int128 v295;
  uint64_t v296;
  int v297;
  _OWORD *v298;
  size_t v299;
  unint64_t *v300;
  unint64_t v301;
  BOOL v302;
  uint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  const std::string *v307;
  unint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  std::string::size_type v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t *v317;
  unint64_t *v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t *v323;
  unint64_t *v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t *v327;
  void *v328;
  void *v329;
  unsigned int v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t *v334;
  void *v335;
  unint64_t *v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t *v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t *v342;
  size_t v343;
  unint64_t *v344;
  unint64_t v345;
  uint64_t v346;
  double v347;
  double v348;
  unint64_t *v349;
  unint64_t v350;
  size_t v351;
  size_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int *v356;
  unsigned int v357;
  __int128 v358;
  __int128 v359;
  unint64_t *v360;
  unint64_t v361;
  BOOL v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  BOOL v367;
  unint64_t *v368;
  unint64_t v369;
  unint64_t *v370;
  unint64_t v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  BOOL v376;
  unint64_t *v377;
  unint64_t v378;
  unint64_t *v379;
  unint64_t v380;
  BOOL v381;
  unint64_t *v382;
  unint64_t v383;
  unint64_t *v384;
  unint64_t v385;
  unint64_t *v386;
  unint64_t v387;
  BOOL v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t *v395;
  unint64_t v396;
  size_t v397;
  unint64_t *v398;
  unint64_t v399;
  size_t v400;
  void *v401;
  void *v402;
  unsigned int v403;
  unint64_t *v404;
  unint64_t v405;
  size_t v406;
  void *v407;
  unint64_t *v408;
  unint64_t v409;
  unint64_t *v410;
  unint64_t v411;
  size_t v412;
  std::string *v413;
  std::vector<std::string>::pointer v414;
  std::string::size_type v415;
  std::string::size_type v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t *v419;
  uint64_t v420;
  __int128 v421;
  std::vector<std::string>::pointer v422;
  __int128 v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  char *v427;
  char *v428;
  __int128 v429;
  std::string *v430;
  int v431;
  _OWORD *v432;
  size_t v433;
  unint64_t *v434;
  unint64_t v435;
  BOOL v436;
  uint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  const std::string *v441;
  unint64_t *v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  std::string::size_type v447;
  unint64_t *v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t *v451;
  unint64_t *v452;
  uint64_t v453;
  unint64_t *v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t *v457;
  unint64_t *v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t *v461;
  void *v462;
  void *v463;
  unsigned int v464;
  unint64_t *v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t *v468;
  void *v469;
  unint64_t *v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t *v473;
  unint64_t v474;
  unint64_t v475;
  unint64_t *v476;
  size_t v477;
  unint64_t *v478;
  unint64_t v479;
  uint64_t v480;
  double v481;
  double v482;
  unint64_t *v483;
  unint64_t v484;
  size_t v485;
  size_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unsigned int *v490;
  unsigned int v491;
  __int128 v492;
  __int128 v493;
  unint64_t *v494;
  unint64_t v495;
  BOOL v496;
  unint64_t *v497;
  unint64_t v498;
  unint64_t *v499;
  unint64_t v500;
  BOOL v501;
  unint64_t *v502;
  unint64_t v503;
  unint64_t *v504;
  unint64_t v505;
  unint64_t *v506;
  unint64_t v507;
  unint64_t *v508;
  unint64_t v509;
  BOOL v510;
  unint64_t *v511;
  unint64_t v512;
  unint64_t *v513;
  unint64_t v514;
  BOOL v515;
  unint64_t *v516;
  unint64_t v517;
  unint64_t *v518;
  unint64_t v519;
  unint64_t *v520;
  unint64_t v521;
  BOOL v522;
  unint64_t *v523;
  unint64_t v524;
  unint64_t *v525;
  unint64_t v526;
  unint64_t *v527;
  unint64_t v528;
  unint64_t *v529;
  unint64_t v530;
  size_t v531;
  unint64_t *v532;
  unint64_t v533;
  size_t v534;
  void *v535;
  void *v536;
  unsigned int v537;
  unint64_t *v538;
  unint64_t v539;
  size_t v540;
  void *v541;
  unint64_t *v542;
  unint64_t v543;
  unint64_t *v544;
  unint64_t v545;
  size_t v546;
  std::string::size_type v547;
  std::string::size_type v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t *v551;
  uint64_t v552;
  __int128 v553;
  int v554;
  _OWORD *v555;
  size_t v556;
  unint64_t *v557;
  unint64_t v558;
  BOOL v559;
  uint64_t v560;
  std::__shared_weak_count *v561;
  unint64_t *v562;
  unint64_t v563;
  const std::string *v564;
  unint64_t *v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  std::string::size_type v570;
  unint64_t *v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t *v574;
  unint64_t *v575;
  uint64_t v576;
  unint64_t *v577;
  unint64_t v578;
  unint64_t v579;
  unint64_t *v580;
  unint64_t *v581;
  unint64_t v582;
  unint64_t v583;
  unint64_t *v584;
  void *v585;
  void *v586;
  unsigned int v587;
  unint64_t *v588;
  unint64_t v589;
  unint64_t v590;
  unint64_t *v591;
  void *v592;
  unint64_t *v593;
  unint64_t v594;
  unint64_t v595;
  unint64_t *v596;
  unint64_t v597;
  unint64_t v598;
  unint64_t *v599;
  size_t v600;
  unint64_t *v601;
  unint64_t v602;
  uint64_t v603;
  double v604;
  double v605;
  unint64_t *v606;
  unint64_t v607;
  size_t v608;
  size_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  unsigned int *v613;
  unsigned int v614;
  __int128 v615;
  __int128 v616;
  unint64_t *v617;
  unint64_t v618;
  BOOL v619;
  unint64_t *v620;
  unint64_t v621;
  unint64_t *v622;
  unint64_t v623;
  BOOL v624;
  unint64_t *v625;
  unint64_t v626;
  unint64_t *v627;
  unint64_t v628;
  unint64_t *v629;
  unint64_t v630;
  unint64_t *v631;
  unint64_t v632;
  BOOL v633;
  unint64_t *v634;
  unint64_t v635;
  unint64_t *v636;
  unint64_t v637;
  BOOL v638;
  unint64_t *v639;
  unint64_t v640;
  unint64_t *v641;
  unint64_t v642;
  unint64_t *v643;
  unint64_t v644;
  BOOL v645;
  unint64_t *v646;
  unint64_t v647;
  unint64_t *v648;
  unint64_t v649;
  unint64_t *v650;
  unint64_t v651;
  unint64_t *v652;
  unint64_t v653;
  size_t v654;
  unint64_t *v655;
  unint64_t v656;
  size_t v657;
  void *v658;
  void *v659;
  unsigned int v660;
  unint64_t *v661;
  unint64_t v662;
  size_t v663;
  void *v664;
  unint64_t *v665;
  unint64_t v666;
  unint64_t *v667;
  unint64_t v668;
  size_t v669;
  std::string::size_type v670;
  std::string::size_type v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  __int128 v675;
  _BYTE *v676;
  std::string::size_type v677;
  turi::unity_sarray *v678;
  size_t v679;
  std::__shared_weak_count *v680;
  unint64_t *p_shared_owners;
  unint64_t v682;
  std::__shared_weak_count *v683;
  unint64_t *v684;
  unint64_t v685;
  std::__shared_weak_count *v686;
  unint64_t *v687;
  unint64_t v688;
  std::__shared_weak_count *v689;
  unint64_t *v690;
  unint64_t v691;
  std::string *v692;
  std::string *v693;
  std::__shared_weak_count *v694;
  unint64_t *v695;
  unint64_t v696;
  uint64_t v697;
  uint64_t result;
  _QWORD *exception;
  uint64_t v701;
  uint64_t v703;
  uint64_t v704;
  std::string::size_type v705;
  std::locale::__imp *v706;
  char v707;
  std::locale::__imp *v708;
  char v709;
  char v710;
  uint64_t v711;
  uint64_t v713;
  std::__shared_weak_count *v714;
  std::string v715;
  uint64_t *v716[3];
  std::string v717;
  std::vector<std::string> v718;
  std::locale v719;
  std::string v720;
  std::string v721;
  char v722;
  __int16 v723;
  char v724;
  std::vector<std::string> v725;
  void *v726[2];
  char v727;
  _BYTE v728[160];
  void *v729;
  char v730;
  _QWORD v731[2];
  _QWORD v732[11];
  char v733;
  uint64_t v734;
  std::string v735;
  __n128 __p;
  char v737;
  _BYTE __str[32];
  void *v739[2];
  __int128 v740;
  void *v741;
  char v742;
  _BYTE v743[160];
  std::string v744;
  size_t __idx;
  std::__shared_weak_count *v746;
  uint64_t v747[2];

  v747[0] = *MEMORY[0x24BDAC8D0];
  v7 = (int *)global_logger();
  if (v7[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v7))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v8 = (file_logger *)global_logger();
    started = file_logger::start_stream(v8, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "construct_from_csvs", 151, 1);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10 && *((_BYTE *)v10 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Construct sframe from csvs at ", 30);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v735, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v735 = *(std::string *)a2;
    turi::sanitize_url((__n128 *)&v735, &__p);
    v11 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    v12 = pthread_getspecific(*(_QWORD *)(v11 + 592));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v719, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v719);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v11);
        if (*(_DWORD *)(v11 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v737 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (SHIBYTE(v735.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v735.__r_.__value_.__l.__data_);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v731);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v732, (uint64_t)"Parsing config:\n", 16);
  v703 = a2;
  v704 = a5;
  v14 = *a3;
  if (*a3 != (uint64_t *)(a3 + 1))
  {
    v708 = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
    v705 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v706 = *(std::locale::__imp **)(MEMORY[0x24BEDB7F0] + 64);
    v701 = MEMORY[0x24BEDB848] + 16;
    while (2)
    {
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v732, (uint64_t)"\t", 1);
      v16 = *((char *)v14 + 55);
      if (v16 >= 0)
        v17 = (uint64_t)(v14 + 4);
      else
        v17 = v14[4];
      if (v16 >= 0)
        v18 = *((unsigned __int8 *)v14 + 55);
      else
        v18 = v14[5];
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      v21 = (turi::flexible_type_impl *)(v14 + 7);
      switch(*((_BYTE *)v14 + 68))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v719);
          std::ostream::operator<<();
          std::stringbuf::str();
          v719.__locale_ = v708;
          *(std::locale::__imp **)((char *)&v719.__locale_ + *((_QWORD *)v708 - 3)) = v706;
          v720.__r_.__value_.__l.__size_ = v705;
          v22 = v701;
          goto LABEL_33;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v719);
          std::ostream::operator<<();
          std::stringbuf::str();
          v719.__locale_ = v708;
          *(std::locale::__imp **)((char *)&v719.__locale_ + *((_QWORD *)v708 - 3)) = v706;
          v22 = MEMORY[0x24BEDB848] + 16;
          v720.__r_.__value_.__l.__size_ = v705;
LABEL_33:
          v720.__r_.__value_.__r.__words[2] = v22;
          if (v727 < 0)
            operator delete(v726[0]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v728);
          goto LABEL_40;
        case 2:
          v23 = *(_QWORD *)v21;
          if (*(char *)(*(_QWORD *)v21 + 31) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v23 + 8), *(_QWORD *)(v23 + 16));
          }
          else
          {
            v24 = *(_OWORD *)(v23 + 8);
            *(_QWORD *)&__str[16] = *(_QWORD *)(v23 + 24);
            *(_OWORD *)__str = v24;
          }
          goto LABEL_40;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v719, (_QWORD *)(*(_QWORD *)v21 + 8));
          goto LABEL_40;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v719, (uint64_t *)(*(_QWORD *)v21 + 8));
          goto LABEL_40;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v719, (_QWORD *)(*(_QWORD *)v21 + 8));
          goto LABEL_40;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v21, (std::string *)__str);
          goto LABEL_40;
        case 7:
          memset(__str, 0, 24);
          goto LABEL_40;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_40;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v719, (_QWORD *)(*(_QWORD *)v21 + 8));
LABEL_40:
          if (__str[23] >= 0)
            v25 = __str;
          else
            v25 = *(_BYTE **)__str;
          if (__str[23] >= 0)
            v26 = __str[23];
          else
            v26 = *(_QWORD *)&__str[8];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v25, v26);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
          v27 = (uint64_t *)v14[1];
          if (v27)
          {
            do
            {
              v28 = (uint64_t **)v27;
              v27 = (uint64_t *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v28 = (uint64_t **)v14[2];
              v41 = *v28 == v14;
              v14 = (uint64_t *)v28;
            }
            while (!v41);
          }
          v14 = (uint64_t *)v28;
          if (v28 == a3 + 1)
            break;
          continue;
        default:
          result = turi::flexible_type_fail(0);
LABEL_1223:
          __break(1u);
          return result;
      }
      break;
    }
  }
  v29 = (int *)global_logger();
  k = a2;
  v30 = v704;
  v32 = (_QWORD *)MEMORY[0x24BEDB7F0];
  if (v29[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v29))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v33 = (file_logger *)global_logger();
    v34 = file_logger::start_stream(v33, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "construct_from_csvs", 158, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v34, (uint64_t)&v729);
    if (v730 < 0)
      operator delete(v729);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  turi::csv_line_tokenizer::csv_line_tokenizer((turi::csv_line_tokenizer *)&v719);
  memset(&v718, 0, sizeof(v718));
  MEMORY[0x219A19390](&v720, ",");
  v723 = 256;
  *(_WORD *)((char *)&v719.__locale_ + 1) = 23553;
  v724 = 34;
  BYTE3(v719.__locale_) = 1;
  begin = v725.__begin_;
  for (i = v725.__end_; i != begin; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(i[-1].__r_.__value_.__l.__data_);
  }
  v725.__end_ = begin;
  std::string::basic_string[abi:ne180100]<0>(__str, "use_header");
  v37 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  v38 = v37;
  if ((__str[23] & 0x80000000) == 0)
  {
    if (v37)
      goto LABEL_65;
LABEL_68:
    v710 = 1;
    goto LABEL_81;
  }
  operator delete(*(void **)__str);
  if (!v38)
    goto LABEL_68;
LABEL_65:
  std::string::basic_string[abi:ne180100]<0>(__str, "use_header");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v39 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717);
  v40 = 1;
  switch(*((_BYTE *)v39 + 68))
  {
    case 0:
      v43 = *((_QWORD *)v39 + 7);
      goto LABEL_75;
    case 1:
      v41 = *((double *)v39 + 7) == 0.0;
      goto LABEL_76;
    case 2:
      v42 = *((_QWORD *)v39 + 7);
      if (*(char *)(v42 + 31) < 0)
        v43 = *(_QWORD *)(v42 + 16);
      else
        v43 = *(unsigned __int8 *)(v42 + 31);
LABEL_75:
      v41 = v43 == 0;
      goto LABEL_76;
    case 3:
    case 4:
    case 5:
      v41 = *(_QWORD *)(*((_QWORD *)v39 + 7) + 8) == *(_QWORD *)(*((_QWORD *)v39 + 7) + 16);
      goto LABEL_76;
    case 7:
      goto LABEL_79;
    case 8:
      v41 = *(_QWORD *)(*((_QWORD *)v39 + 7) + 64) == 3;
LABEL_76:
      v40 = v41;
LABEL_79:
      v710 = v40 ^ 1;
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_81:
  std::string::basic_string[abi:ne180100]<0>(__str, "continue_on_failure");
  v44 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  v45 = v44;
  if ((__str[23] & 0x80000000) == 0)
  {
    if (v44)
      goto LABEL_83;
LABEL_86:
    v709 = 0;
    goto LABEL_99;
  }
  operator delete(*(void **)__str);
  if (!v45)
    goto LABEL_86;
LABEL_83:
  std::string::basic_string[abi:ne180100]<0>(__str, "continue_on_failure");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v46 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717);
  v47 = 1;
  switch(*((_BYTE *)v46 + 68))
  {
    case 0:
      v50 = *((_QWORD *)v46 + 7);
      goto LABEL_93;
    case 1:
      v48 = *((double *)v46 + 7) == 0.0;
      goto LABEL_94;
    case 2:
      v49 = *((_QWORD *)v46 + 7);
      if (*(char *)(v49 + 31) < 0)
        v50 = *(_QWORD *)(v49 + 16);
      else
        v50 = *(unsigned __int8 *)(v49 + 31);
LABEL_93:
      v48 = v50 == 0;
      goto LABEL_94;
    case 3:
    case 4:
    case 5:
      v48 = *(_QWORD *)(*((_QWORD *)v46 + 7) + 8) == *(_QWORD *)(*((_QWORD *)v46 + 7) + 16);
      goto LABEL_94;
    case 7:
      goto LABEL_97;
    case 8:
      v48 = *(_QWORD *)(*((_QWORD *)v46 + 7) + 64) == 3;
LABEL_94:
      v47 = v48;
LABEL_97:
      v709 = v47 ^ 1;
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_99:
  std::string::basic_string[abi:ne180100]<0>(__str, "store_errors");
  v51 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  v52 = v51;
  if ((__str[23] & 0x80000000) == 0)
  {
    if (v51)
      goto LABEL_101;
LABEL_104:
    v707 = 0;
    goto LABEL_117;
  }
  operator delete(*(void **)__str);
  if (!v52)
    goto LABEL_104;
LABEL_101:
  std::string::basic_string[abi:ne180100]<0>(__str, "store_errors");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v53 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717);
  v54 = 1;
  switch(*((_BYTE *)v53 + 68))
  {
    case 0:
      v57 = *((_QWORD *)v53 + 7);
      goto LABEL_111;
    case 1:
      v55 = *((double *)v53 + 7) == 0.0;
      goto LABEL_112;
    case 2:
      v56 = *((_QWORD *)v53 + 7);
      if (*(char *)(v56 + 31) < 0)
        v57 = *(_QWORD *)(v56 + 16);
      else
        v57 = *(unsigned __int8 *)(v56 + 31);
LABEL_111:
      v55 = v57 == 0;
      goto LABEL_112;
    case 3:
    case 4:
    case 5:
      v55 = *(_QWORD *)(*((_QWORD *)v53 + 7) + 8) == *(_QWORD *)(*((_QWORD *)v53 + 7) + 16);
      goto LABEL_112;
    case 7:
      goto LABEL_115;
    case 8:
      v55 = *(_QWORD *)(*((_QWORD *)v53 + 7) + 64) == 3;
LABEL_112:
      v54 = v55;
LABEL_115:
      v707 = v54 ^ 1;
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_117:
  std::string::basic_string[abi:ne180100]<0>(__str, "row_limit");
  v58 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  v59 = v58;
  if ((__str[23] & 0x80000000) == 0)
  {
    if (v58)
      goto LABEL_119;
LABEL_122:
    v711 = 0;
    goto LABEL_152;
  }
  operator delete(*(void **)__str);
  if (!v59)
    goto LABEL_122;
LABEL_119:
  std::string::basic_string[abi:ne180100]<0>(&v717, "row_limit");
  *(_QWORD *)__str = &v717;
  v60 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v717.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
  v711 = 0;
  switch(*((_BYTE *)v60 + 68))
  {
    case 0:
      v61 = *((_QWORD *)v60 + 7);
      goto LABEL_142;
    case 1:
      v61 = (uint64_t)*((double *)v60 + 7);
      goto LABEL_142;
    case 2:
      v66 = *((_QWORD *)v60 + 7);
      *(double *)&__idx = 0.0;
      v67 = (char *)(v66 + 8);
      if (*(char *)(v66 + 31) < 0)
        v67 = *(char **)(v66 + 8);
      std::string::basic_string[abi:ne180100]<0>(__str, v67);
      v711 = std::stoll((const std::string *)__str, &__idx, 10);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      if (*(char *)(v66 + 31) < 0)
        v68 = *(_QWORD *)(v66 + 16);
      else
        v68 = *(unsigned __int8 *)(v66 + 31);
      if (__idx != v68)
      {
        v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v104 = std::string::append(&v744, " cannot be interpreted as an integer");
        v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
        *(_QWORD *)&__str[16] = *((_QWORD *)&v104->__r_.__value_.__l + 2);
        *(_OWORD *)__str = v105;
        v104->__r_.__value_.__l.__size_ = 0;
        v104->__r_.__value_.__r.__words[2] = 0;
        v104->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v103, (const std::string *)__str);
        __cxa_throw(v103, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_150;
    case 3:
      v62 = *((_QWORD *)v60 + 7);
      memset(__str, 0, 24);
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v62 + 8), *(_QWORD *)(v62 + 16), (uint64_t)(*(_QWORD *)(v62 + 16) - *(_QWORD *)(v62 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (*(_QWORD *)__str)
      {
        *(_QWORD *)&__str[8] = *(_QWORD *)__str;
        operator delete(*(void **)__str);
      }
      goto LABEL_149;
    case 4:
      v69 = *((_QWORD *)v60 + 7);
      memset(__str, 0, 24);
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v69 + 8), *(uint64_t **)(v69 + 16), (uint64_t)(*(_QWORD *)(v69 + 16) - *(_QWORD *)(v69 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v744.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v744);
      goto LABEL_149;
    case 5:
      v70 = *((_QWORD *)v60 + 7);
      memset(__str, 0, 24);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v70 + 8), *(uint64_t **)(v70 + 16), (uint64_t)(*(_QWORD *)(v70 + 16) - *(_QWORD *)(v70 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v744.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v744);
      goto LABEL_149;
    case 6:
      v61 = (uint64_t)(*((_QWORD *)v60 + 7) << 8) >> 8;
LABEL_142:
      v711 = v61;
      goto LABEL_150;
    case 7:
      goto LABEL_150;
    case 8:
      v71 = *((_QWORD *)v60 + 7);
      v72 = *(_QWORD *)(v71 + 16);
      *(_QWORD *)__str = *(_QWORD *)(v71 + 8);
      *(_QWORD *)&__str[8] = v72;
      if (v72)
      {
        v73 = (unsigned int *)(v72 + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      v75 = *(_OWORD *)(v71 + 24);
      v76 = *(_OWORD *)(v71 + 56);
      *(_OWORD *)v739 = *(_OWORD *)(v71 + 40);
      v740 = v76;
      *(_OWORD *)&__str[16] = v75;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
      goto LABEL_149;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__str, *((_QWORD *)v60 + 7) + 8);
      turi::flexible_type_fail(0);
      if (v739[1])
      {
        *(void **)&v740 = v739[1];
        operator delete(v739[1]);
      }
      if (*(_QWORD *)&__str[16])
      {
        *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
        operator delete(*(void **)&__str[16]);
      }
      v63 = *(std::__shared_weak_count **)&__str[8];
      if (*(_QWORD *)&__str[8])
      {
        v64 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
LABEL_149:
      v711 = 0;
LABEL_150:
      if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v717.__r_.__value_.__l.__data_);
      break;
    default:
LABEL_1222:
      result = turi::flexible_type_fail(0);
      goto LABEL_1223;
  }
LABEL_152:
  std::string::basic_string[abi:ne180100]<0>(__str, "skip_rows");
  v77 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  v78 = v77;
  if ((__str[23] & 0x80000000) == 0)
  {
    if (v77)
      goto LABEL_154;
LABEL_157:
    v80 = 0;
    goto LABEL_186;
  }
  operator delete(*(void **)__str);
  if (!v78)
    goto LABEL_157;
LABEL_154:
  std::string::basic_string[abi:ne180100]<0>(&v717, "skip_rows");
  *(_QWORD *)__str = &v717;
  v79 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v717.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
  v80 = 0;
  switch(*((_BYTE *)v79 + 68))
  {
    case 0:
      v80 = *((_QWORD *)v79 + 7);
      goto LABEL_184;
    case 1:
      v80 = (uint64_t)*((double *)v79 + 7);
      goto LABEL_184;
    case 2:
      v85 = *((_QWORD *)v79 + 7);
      *(double *)&__idx = 0.0;
      v86 = (char *)(v85 + 8);
      if (*(char *)(v85 + 31) < 0)
        v86 = *(char **)(v85 + 8);
      std::string::basic_string[abi:ne180100]<0>(__str, v86);
      v80 = std::stoll((const std::string *)__str, &__idx, 10);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      if (*(char *)(v85 + 31) < 0)
        v87 = *(_QWORD *)(v85 + 16);
      else
        v87 = *(unsigned __int8 *)(v85 + 31);
      if (__idx != v87)
      {
        v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v107 = std::string::append(&v744, " cannot be interpreted as an integer");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        *(_QWORD *)&__str[16] = *((_QWORD *)&v107->__r_.__value_.__l + 2);
        *(_OWORD *)__str = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v106, (const std::string *)__str);
        __cxa_throw(v106, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_184;
    case 3:
      v81 = *((_QWORD *)v79 + 7);
      memset(__str, 0, 24);
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v81 + 8), *(_QWORD *)(v81 + 16), (uint64_t)(*(_QWORD *)(v81 + 16) - *(_QWORD *)(v81 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (*(_QWORD *)__str)
      {
        *(_QWORD *)&__str[8] = *(_QWORD *)__str;
        operator delete(*(void **)__str);
      }
      goto LABEL_183;
    case 4:
      v88 = *((_QWORD *)v79 + 7);
      memset(__str, 0, 24);
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v88 + 8), *(uint64_t **)(v88 + 16), (uint64_t)(*(_QWORD *)(v88 + 16) - *(_QWORD *)(v88 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v744.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v744);
      goto LABEL_183;
    case 5:
      v89 = *((_QWORD *)v79 + 7);
      memset(__str, 0, 24);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v89 + 8), *(uint64_t **)(v89 + 16), (uint64_t)(*(_QWORD *)(v89 + 16) - *(_QWORD *)(v89 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v744.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v744);
      goto LABEL_183;
    case 6:
      v80 = (uint64_t)(*((_QWORD *)v79 + 7) << 8) >> 8;
      goto LABEL_184;
    case 7:
      goto LABEL_184;
    case 8:
      v90 = *((_QWORD *)v79 + 7);
      v91 = *(_QWORD *)(v90 + 16);
      *(_QWORD *)__str = *(_QWORD *)(v90 + 8);
      *(_QWORD *)&__str[8] = v91;
      if (v91)
      {
        v92 = (unsigned int *)(v91 + 8);
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      v94 = *(_OWORD *)(v90 + 24);
      v95 = *(_OWORD *)(v90 + 56);
      *(_OWORD *)v739 = *(_OWORD *)(v90 + 40);
      v740 = v95;
      *(_OWORD *)&__str[16] = v94;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
      goto LABEL_183;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__str, *((_QWORD *)v79 + 7) + 8);
      turi::flexible_type_fail(0);
      if (v739[1])
      {
        *(void **)&v740 = v739[1];
        operator delete(v739[1]);
      }
      if (*(_QWORD *)&__str[16])
      {
        *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
        operator delete(*(void **)&__str[16]);
      }
      v82 = *(std::__shared_weak_count **)&__str[8];
      if (*(_QWORD *)&__str[8])
      {
        v83 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
LABEL_183:
      v80 = 0;
LABEL_184:
      if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v717.__r_.__value_.__l.__data_);
      break;
    default:
      goto LABEL_1222;
  }
LABEL_186:
  std::string::basic_string[abi:ne180100]<0>(__str, "delimiter");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v96 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717)+ 68);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (v96 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v717, "delimiter");
    *(_QWORD *)__str = &v717;
    v97 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v717.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    v98 = (turi::flexible_type_impl *)((char *)v97 + 56);
    switch(*((_BYTE *)v97 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_202;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_202:
        *(_QWORD *)__str = *v32;
        v102 = v32[9];
        *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = v32[8];
        *(_QWORD *)&__str[16] = v102;
        *(_QWORD *)&__str[24] = MEMORY[0x24BEDB848] + 16;
        if (v742 < 0)
          operator delete(v741);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](v743);
        break;
      case 2:
        v100 = *(_QWORD *)v98;
        if (*(char *)(*(_QWORD *)v98 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v744, *(const std::string::value_type **)(v100 + 8), *(_QWORD *)(v100 + 16));
        }
        else
        {
          v101 = *(_OWORD *)(v100 + 8);
          v744.__r_.__value_.__r.__words[2] = *(_QWORD *)(v100 + 24);
          *(_OWORD *)&v744.__r_.__value_.__l.__data_ = v101;
        }
        break;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v98 + 8));
        break;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (uint64_t *)(*(_QWORD *)v98 + 8));
        break;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v98 + 8));
        break;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v98, &v744);
        break;
      case 7:
        memset(&v744, 0, sizeof(v744));
        break;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        break;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v98 + 8));
        break;
      default:
        goto LABEL_1222;
    }
    if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v717.__r_.__value_.__l.__data_);
    std::string::operator=(&v720, &v744);
    if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v744.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "delimiter");
    v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
    v99 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717)+ 68);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    if (v99 == 7)
      MEMORY[0x219A19390](&v720, "");
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "comment_char");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v109 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717)+ 68);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (v109 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v717, "comment_char");
    *(_QWORD *)__str = &v717;
    v110 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v717.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    v111 = (turi::flexible_type_impl *)((char *)v110 + 56);
    switch(*((_BYTE *)v110 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_231;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_231:
        *(_QWORD *)__str = *v32;
        v114 = v32[9];
        *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = v32[8];
        *(_QWORD *)&__str[16] = v114;
        *(_QWORD *)&__str[24] = MEMORY[0x24BEDB848] + 16;
        if (v742 < 0)
          operator delete(v741);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](v743);
        break;
      case 2:
        v112 = *(_QWORD *)v111;
        if (*(char *)(*(_QWORD *)v111 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v744, *(const std::string::value_type **)(v112 + 8), *(_QWORD *)(v112 + 16));
        }
        else
        {
          v113 = *(_OWORD *)(v112 + 8);
          v744.__r_.__value_.__r.__words[2] = *(_QWORD *)(v112 + 24);
          *(_OWORD *)&v744.__r_.__value_.__l.__data_ = v113;
        }
        break;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v111 + 8));
        break;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (uint64_t *)(*(_QWORD *)v111 + 8));
        break;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v111 + 8));
        break;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v111, &v744);
        break;
      case 7:
        memset(&v744, 0, sizeof(v744));
        break;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        break;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v111 + 8));
        break;
      default:
        goto LABEL_1222;
    }
    if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v717.__r_.__value_.__l.__data_);
    if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v744.__r_.__value_.__l.__size_)
      {
        v722 = *v744.__r_.__value_.__l.__data_;
        LOBYTE(v723) = 1;
      }
      operator delete(v744.__r_.__value_.__l.__data_);
    }
    else if (*((_BYTE *)&v744.__r_.__value_.__s + 23))
    {
      v722 = v744.__r_.__value_.__s.__data_[0];
      LOBYTE(v723) = 1;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "use_escape_char");
  v115 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  v116 = v115;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (!v116)
      goto LABEL_264;
  }
  else if (!v115)
  {
    goto LABEL_264;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "use_escape_char");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v117 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717);
  v118 = 1;
  switch(*((_BYTE *)v117 + 68))
  {
    case 0:
      v121 = *((_QWORD *)v117 + 7);
      goto LABEL_258;
    case 1:
      v119 = *((double *)v117 + 7) == 0.0;
      goto LABEL_259;
    case 2:
      v120 = *((_QWORD *)v117 + 7);
      if (*(char *)(v120 + 31) < 0)
        v121 = *(_QWORD *)(v120 + 16);
      else
        v121 = *(unsigned __int8 *)(v120 + 31);
LABEL_258:
      v119 = v121 == 0;
      goto LABEL_259;
    case 3:
    case 4:
    case 5:
      v119 = *(_QWORD *)(*((_QWORD *)v117 + 7) + 8) == *(_QWORD *)(*((_QWORD *)v117 + 7) + 16);
      goto LABEL_259;
    case 7:
      goto LABEL_262;
    case 8:
      v119 = *(_QWORD *)(*((_QWORD *)v117 + 7) + 64) == 3;
LABEL_259:
      v118 = v119;
LABEL_262:
      BYTE1(v719.__locale_) = v118 ^ 1;
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_264:
  std::string::basic_string[abi:ne180100]<0>(__str, "escape_char");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v122 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717)+ 68);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (v122 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v717, "escape_char");
    *(_QWORD *)__str = &v717;
    v123 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v717.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    v124 = (turi::flexible_type_impl *)((char *)v123 + 56);
    switch(*((_BYTE *)v123 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_276;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_276:
        *(_QWORD *)__str = *v32;
        v127 = v32[9];
        *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = v32[8];
        *(_QWORD *)&__str[16] = v127;
        *(_QWORD *)&__str[24] = MEMORY[0x24BEDB848] + 16;
        if (v742 < 0)
          operator delete(v741);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](v743);
        break;
      case 2:
        v125 = *(_QWORD *)v124;
        if (*(char *)(*(_QWORD *)v124 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v744, *(const std::string::value_type **)(v125 + 8), *(_QWORD *)(v125 + 16));
        }
        else
        {
          v126 = *(_OWORD *)(v125 + 8);
          v744.__r_.__value_.__r.__words[2] = *(_QWORD *)(v125 + 24);
          *(_OWORD *)&v744.__r_.__value_.__l.__data_ = v126;
        }
        break;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v124 + 8));
        break;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (uint64_t *)(*(_QWORD *)v124 + 8));
        break;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v124 + 8));
        break;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v124, &v744);
        break;
      case 7:
        memset(&v744, 0, sizeof(v744));
        break;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        break;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v124 + 8));
        break;
      default:
        goto LABEL_1222;
    }
    if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v717.__r_.__value_.__l.__data_);
    if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v744.__r_.__value_.__l.__size_)
        BYTE2(v719.__locale_) = *v744.__r_.__value_.__l.__data_;
      operator delete(v744.__r_.__value_.__l.__data_);
    }
    else if (*((_BYTE *)&v744.__r_.__value_.__s + 23))
    {
      BYTE2(v719.__locale_) = v744.__r_.__value_.__s.__data_[0];
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "double_quote");
  v128 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  v129 = v128;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (!v129)
      goto LABEL_309;
  }
  else if (!v128)
  {
    goto LABEL_309;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "double_quote");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v130 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717);
  v131 = 1;
  switch(*((_BYTE *)v130 + 68))
  {
    case 0:
      v134 = *((_QWORD *)v130 + 7);
      goto LABEL_303;
    case 1:
      v132 = *((double *)v130 + 7) == 0.0;
      goto LABEL_304;
    case 2:
      v133 = *((_QWORD *)v130 + 7);
      if (*(char *)(v133 + 31) < 0)
        v134 = *(_QWORD *)(v133 + 16);
      else
        v134 = *(unsigned __int8 *)(v133 + 31);
LABEL_303:
      v132 = v134 == 0;
      goto LABEL_304;
    case 3:
    case 4:
    case 5:
      v132 = *(_QWORD *)(*((_QWORD *)v130 + 7) + 8) == *(_QWORD *)(*((_QWORD *)v130 + 7) + 16);
      goto LABEL_304;
    case 7:
      goto LABEL_307;
    case 8:
      v132 = *(_QWORD *)(*((_QWORD *)v130 + 7) + 64) == 3;
LABEL_304:
      v131 = v132;
LABEL_307:
      HIBYTE(v723) = v131 ^ 1;
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_309:
  std::string::basic_string[abi:ne180100]<0>(__str, "quote_char");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v135 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717)+ 68);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (v135 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v717, "quote_char");
    *(_QWORD *)__str = &v717;
    v136 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v717.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    v137 = (turi::flexible_type_impl *)((char *)v136 + 56);
    switch(*((_BYTE *)v136 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_325;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_325:
        *(_QWORD *)__str = *v32;
        v141 = v32[9];
        *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = v32[8];
        *(_QWORD *)&__str[16] = v141;
        *(_QWORD *)&__str[24] = MEMORY[0x24BEDB848] + 16;
        if (v742 < 0)
          operator delete(v741);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](v743);
        break;
      case 2:
        v139 = *(_QWORD *)v137;
        if (*(char *)(*(_QWORD *)v137 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v744, *(const std::string::value_type **)(v139 + 8), *(_QWORD *)(v139 + 16));
        }
        else
        {
          v140 = *(_OWORD *)(v139 + 8);
          v744.__r_.__value_.__r.__words[2] = *(_QWORD *)(v139 + 24);
          *(_OWORD *)&v744.__r_.__value_.__l.__data_ = v140;
        }
        break;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v137 + 8));
        break;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (uint64_t *)(*(_QWORD *)v137 + 8));
        break;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v137 + 8));
        break;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v137, &v744);
        break;
      case 7:
        memset(&v744, 0, sizeof(v744));
        break;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        break;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v137 + 8));
        break;
      default:
        goto LABEL_1222;
    }
    if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v717.__r_.__value_.__l.__data_);
    if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v744.__r_.__value_.__l.__size_)
        v724 = *v744.__r_.__value_.__l.__data_;
      operator delete(v744.__r_.__value_.__l.__data_);
    }
    else if (*((_BYTE *)&v744.__r_.__value_.__s + 23))
    {
      v724 = v744.__r_.__value_.__s.__data_[0];
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "quote_char");
    v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
    v138 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717)+ 68);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    if (v138 == 7)
      v724 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "skip_initial_space");
  v142 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  v143 = v142;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (!v143)
      goto LABEL_358;
  }
  else if (!v142)
  {
    goto LABEL_358;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "skip_initial_space");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v144 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717);
  v145 = 1;
  switch(*((_BYTE *)v144 + 68))
  {
    case 0:
      v148 = *((_QWORD *)v144 + 7);
      goto LABEL_352;
    case 1:
      v146 = *((double *)v144 + 7) == 0.0;
      goto LABEL_353;
    case 2:
      v147 = *((_QWORD *)v144 + 7);
      if (*(char *)(v147 + 31) < 0)
        v148 = *(_QWORD *)(v147 + 16);
      else
        v148 = *(unsigned __int8 *)(v147 + 31);
LABEL_352:
      v146 = v148 == 0;
      goto LABEL_353;
    case 3:
    case 4:
    case 5:
      v146 = *(_QWORD *)(*((_QWORD *)v144 + 7) + 8) == *(_QWORD *)(*((_QWORD *)v144 + 7) + 16);
      goto LABEL_353;
    case 7:
      goto LABEL_356;
    case 8:
      v146 = *(_QWORD *)(*((_QWORD *)v144 + 7) + 64) == 3;
LABEL_353:
      v145 = v146;
LABEL_356:
      BYTE3(v719.__locale_) = v145 ^ 1;
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_358:
  std::string::basic_string[abi:ne180100]<0>(__str, "only_raw_string_substitutions");
  v149 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)__str);
  v150 = v149;
  if ((__str[23] & 0x80000000) == 0)
  {
    if (!v149)
      goto LABEL_376;
LABEL_362:
    std::string::basic_string[abi:ne180100]<0>(__str, "only_raw_string_substitutions");
    v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
    v151 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717);
    v152 = 1;
    switch(*((_BYTE *)v151 + 68))
    {
      case 0:
        v155 = *((_QWORD *)v151 + 7);
        goto LABEL_370;
      case 1:
        v153 = *((double *)v151 + 7) == 0.0;
        goto LABEL_371;
      case 2:
        v154 = *((_QWORD *)v151 + 7);
        if (*(char *)(v154 + 31) < 0)
          v155 = *(_QWORD *)(v154 + 16);
        else
          v155 = *(unsigned __int8 *)(v154 + 31);
LABEL_370:
        v153 = v155 == 0;
        goto LABEL_371;
      case 3:
      case 4:
      case 5:
        v153 = *(_QWORD *)(*((_QWORD *)v151 + 7) + 8) == *(_QWORD *)(*((_QWORD *)v151 + 7) + 16);
        goto LABEL_371;
      case 7:
        goto LABEL_374;
      case 8:
        v153 = *(_QWORD *)(*((_QWORD *)v151 + 7) + 64) == 3;
LABEL_371:
        v152 = v153;
LABEL_374:
        v728[40] = v152 ^ 1;
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        break;
      default:
        turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
    }
    goto LABEL_376;
  }
  operator delete(*(void **)__str);
  if (v150)
    goto LABEL_362;
LABEL_376:
  std::string::basic_string[abi:ne180100]<0>(__str, "na_values");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v156 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717)+ 68);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (v156 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v717, "na_values");
    *(_QWORD *)__str = &v717;
    v157 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v717.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    switch(*((_BYTE *)v157 + 68))
    {
      case 0:
        v158 = *((_QWORD *)v157 + 7);
        BYTE4(v746) = 0;
        LODWORD(v746) = 0;
        __idx = v158;
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v159 = (unint64_t *)__idx;
            do
            {
              v160 = __ldaxr(v159);
              v161 = --v160 == 0;
            }
            while (__stlxr(v160, v159));
            goto LABEL_454;
          case 3:
            v233 = (unint64_t *)__idx;
            do
            {
              v234 = __ldaxr(v233);
              v235 = --v234 == 0;
            }
            while (__stlxr(v234, v233));
            goto LABEL_527;
          case 4:
            v219 = (unint64_t *)__idx;
            do
            {
              v220 = __ldaxr(v219);
              v221 = --v220 == 0;
            }
            while (__stlxr(v220, v219));
            goto LABEL_511;
          case 5:
            v238 = (unint64_t *)__idx;
            do
            {
              v239 = __ldaxr(v238);
              v240 = --v239 == 0;
            }
            while (__stlxr(v239, v238));
            goto LABEL_535;
          case 8:
            v245 = (unint64_t *)__idx;
            do
            {
              v246 = __ldaxr(v245);
              v247 = --v246 == 0;
            }
            while (__stlxr(v246, v245));
            goto LABEL_542;
          case 9:
            v224 = (unint64_t *)__idx;
            do
            {
              v225 = __ldaxr(v224);
              v226 = --v225 == 0;
            }
            while (__stlxr(v225, v224));
            goto LABEL_517;
          default:
            goto LABEL_548;
        }
      case 1:
        v202 = *((_QWORD *)v157 + 7);
        LODWORD(v746) = 0;
        BYTE4(v746) = 1;
        __idx = v202;
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v203 = (unint64_t *)__idx;
            do
            {
              v204 = __ldaxr(v203);
              v161 = --v204 == 0;
            }
            while (__stlxr(v204, v203));
            goto LABEL_454;
          case 3:
            v236 = (unint64_t *)__idx;
            do
            {
              v237 = __ldaxr(v236);
              v235 = --v237 == 0;
            }
            while (__stlxr(v237, v236));
            goto LABEL_527;
          case 4:
            v222 = (unint64_t *)__idx;
            do
            {
              v223 = __ldaxr(v222);
              v221 = --v223 == 0;
            }
            while (__stlxr(v223, v222));
            goto LABEL_511;
          case 5:
            v241 = (unint64_t *)__idx;
            do
            {
              v242 = __ldaxr(v241);
              v240 = --v242 == 0;
            }
            while (__stlxr(v242, v241));
            goto LABEL_535;
          case 8:
            v248 = (unint64_t *)__idx;
            do
            {
              v249 = __ldaxr(v248);
              v247 = --v249 == 0;
            }
            while (__stlxr(v249, v248));
            goto LABEL_542;
          case 9:
            v227 = (unint64_t *)__idx;
            do
            {
              v228 = __ldaxr(v227);
              v226 = --v228 == 0;
            }
            while (__stlxr(v228, v227));
            goto LABEL_517;
          default:
            goto LABEL_548;
        }
      case 2:
        v166 = (const std::string *)(*((_QWORD *)v157 + 7) + 8);
        *(double *)&__idx = 0.0;
        LODWORD(v746) = 0;
        BYTE4(v746) = 0;
        turi::flexible_type::operator=<std::string>((uint64_t *)&__idx, v166);
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v167 = (unint64_t *)__idx;
            do
            {
              v168 = __ldaxr(v167);
              v161 = --v168 == 0;
            }
            while (__stlxr(v168, v167));
            goto LABEL_454;
          case 3:
            v263 = (unint64_t *)__idx;
            do
            {
              v264 = __ldaxr(v263);
              v235 = --v264 == 0;
            }
            while (__stlxr(v264, v263));
            goto LABEL_527;
          case 4:
            v254 = (unint64_t *)__idx;
            do
            {
              v255 = __ldaxr(v254);
              v221 = --v255 == 0;
            }
            while (__stlxr(v255, v254));
            goto LABEL_511;
          case 5:
            v267 = (unint64_t *)__idx;
            do
            {
              v268 = __ldaxr(v267);
              v240 = --v268 == 0;
            }
            while (__stlxr(v268, v267));
            goto LABEL_535;
          case 8:
            v269 = (unint64_t *)__idx;
            do
            {
              v270 = __ldaxr(v269);
              v247 = --v270 == 0;
            }
            while (__stlxr(v270, v269));
            goto LABEL_542;
          case 9:
            v257 = (unint64_t *)__idx;
            do
            {
              v258 = __ldaxr(v257);
              v226 = --v258 == 0;
            }
            while (__stlxr(v258, v257));
            goto LABEL_517;
          default:
            goto LABEL_548;
        }
      case 3:
        v169 = *((_QWORD *)v157 + 7);
        std::vector<turi::flexible_type>::vector(&v744, (uint64_t)(*(_QWORD *)(v169 + 16) - *(_QWORD *)(v169 + 8)) >> 3);
        v170 = *(_QWORD *)(v169 + 8);
        if (*(_QWORD *)(v169 + 16) != v170)
        {
          v171 = 0;
          do
          {
            v172 = v744.__r_.__value_.__r.__words[0] + 16 * v171;
            switch(*(_BYTE *)(v172 + 12))
            {
              case 2:
                v173 = *(unint64_t **)v172;
                do
                {
                  v174 = __ldaxr(v173);
                  v175 = v174 - 1;
                }
                while (__stlxr(v175, v173));
                if (!v175)
                {
                  v176 = *(unint64_t **)v172;
                  if (!*(_QWORD *)v172)
                    goto LABEL_442;
                  if (*((char *)v176 + 31) < 0)
                    operator delete((void *)v176[1]);
                  v177 = v176;
                  v178 = 0x1012C404EF22A49;
                  goto LABEL_441;
                }
                break;
              case 3:
                v190 = *(unint64_t **)v172;
                do
                {
                  v191 = __ldaxr(v190);
                  v192 = v191 - 1;
                }
                while (__stlxr(v192, v190));
                if (!v192)
                {
                  v193 = *(unint64_t **)v172;
                  if (!*(_QWORD *)v172)
                    goto LABEL_442;
                  v194 = (void *)v193[1];
                  if (v194)
                  {
                    v193[2] = (unint64_t)v194;
                    operator delete(v194);
                  }
                  v177 = v193;
                  v178 = 0x1080C409938AC02;
                  goto LABEL_441;
                }
                break;
              case 4:
                v179 = *(unint64_t **)v172;
                do
                {
                  v180 = __ldaxr(v179);
                  v181 = v180 - 1;
                }
                while (__stlxr(v181, v179));
                if (!v181)
                {
                  v182 = *(unint64_t **)v172;
                  if (!*(_QWORD *)v172)
                    goto LABEL_442;
                  *(_QWORD *)__str = v182 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                  goto LABEL_434;
                }
                break;
              case 5:
                v195 = *(unint64_t **)v172;
                do
                {
                  v196 = __ldaxr(v195);
                  v197 = v196 - 1;
                }
                while (__stlxr(v197, v195));
                if (!v197)
                {
                  v182 = *(unint64_t **)v172;
                  if (!*(_QWORD *)v172)
                    goto LABEL_442;
                  *(_QWORD *)__str = v182 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_434:
                  v177 = v182;
                  v178 = 0x1020C405E66F15BLL;
                  goto LABEL_441;
                }
                break;
              case 8:
                v198 = *(unint64_t **)v172;
                do
                {
                  v199 = __ldaxr(v198);
                  v200 = v199 - 1;
                }
                while (__stlxr(v200, v198));
                if (!v200)
                {
                  v201 = *(unint64_t **)v172;
                  if (!*(_QWORD *)v172)
                    goto LABEL_442;
                  boost::detail::shared_count::~shared_count((unsigned int **)v201 + 2);
                  v177 = v201;
                  v189 = -235920773;
                  goto LABEL_440;
                }
                break;
              case 9:
                v183 = *(unint64_t **)v172;
                do
                {
                  v184 = __ldaxr(v183);
                  v185 = v184 - 1;
                }
                while (__stlxr(v185, v183));
                if (!v185)
                {
                  v186 = *(unint64_t **)v172;
                  if (*(_QWORD *)v172)
                  {
                    v187 = (void *)v186[6];
                    if (v187)
                    {
                      v186[7] = (unint64_t)v187;
                      operator delete(v187);
                    }
                    v188 = (void *)v186[3];
                    if (v188)
                    {
                      v186[4] = (unint64_t)v188;
                      operator delete(v188);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v186 + 1));
                    v177 = v186;
                    v189 = 2071181815;
LABEL_440:
                    v178 = v189 | 0x1030C4000000000;
LABEL_441:
                    MEMORY[0x219A19A08](v177, v178);
                  }
LABEL_442:
                  *(_QWORD *)v172 = 0;
                }
                break;
              default:
                break;
            }
            *(_QWORD *)v172 = 0;
            *(_DWORD *)(v172 + 8) = 0;
            *(_BYTE *)(v172 + 12) = 1;
            *(_QWORD *)v172 = *(_QWORD *)(v170 + 8 * v171++);
            v170 = *(_QWORD *)(v169 + 8);
          }
          while (v171 < (*(_QWORD *)(v169 + 16) - v170) >> 3);
        }
        break;
      case 4:
        v162 = *((_QWORD *)v157 + 7);
        memset(&v744, 0, sizeof(v744));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v744, *(uint64_t **)(v162 + 8), *(uint64_t **)(v162 + 16), (uint64_t)(*(_QWORD *)(v162 + 16) - *(_QWORD *)(v162 + 8)) >> 4);
        break;
      case 5:
        v205 = *((_QWORD *)v157 + 7);
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v205 + 8), *(uint64_t **)(v205 + 16), (uint64_t)(*(_QWORD *)(v205 + 16) - *(_QWORD *)(v205 + 8)) >> 5);
        turi::flexible_type_fail(0);
        memset(&v744, 0, sizeof(v744));
        *(double *)&__idx = COERCE_DOUBLE(__str);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
        break;
      case 6:
        v206 = (double)((uint64_t)(*((_QWORD *)v157 + 7) << 8) >> 8);
        v207 = (double)*((int *)v157 + 16) / 1000000.0;
        LODWORD(v746) = 0;
        BYTE4(v746) = 1;
        *(double *)&__idx = v207 + v206;
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v208 = (unint64_t *)__idx;
            do
            {
              v209 = __ldaxr(v208);
              v161 = --v209 == 0;
            }
            while (__stlxr(v209, v208));
LABEL_454:
            if (v161)
            {
              v210 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                if (*(char *)(__idx + 31) < 0)
                  operator delete(*(void **)(__idx + 8));
                v211 = v210;
                v212 = 0x1012C404EF22A49;
                goto LABEL_547;
              }
            }
            break;
          case 3:
            v243 = (unint64_t *)__idx;
            do
            {
              v244 = __ldaxr(v243);
              v235 = --v244 == 0;
            }
            while (__stlxr(v244, v243));
LABEL_527:
            if (v235)
            {
              v265 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                v266 = *(void **)(__idx + 8);
                if (v266)
                {
                  *(_QWORD *)(__idx + 16) = v266;
                  operator delete(v266);
                }
                v211 = v265;
                v212 = 0x1080C409938AC02;
                goto LABEL_547;
              }
            }
            break;
          case 4:
            v229 = (unint64_t *)__idx;
            do
            {
              v230 = __ldaxr(v229);
              v221 = --v230 == 0;
            }
            while (__stlxr(v230, v229));
LABEL_511:
            if (v221)
            {
              v256 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                *(_QWORD *)__str = __idx + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                goto LABEL_539;
              }
            }
            break;
          case 5:
            v250 = (unint64_t *)__idx;
            do
            {
              v251 = __ldaxr(v250);
              v240 = --v251 == 0;
            }
            while (__stlxr(v251, v250));
LABEL_535:
            if (v240)
            {
              v256 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                *(_QWORD *)__str = __idx + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_539:
                v211 = v256;
                v212 = 0x1020C405E66F15BLL;
                goto LABEL_547;
              }
            }
            break;
          case 8:
            v252 = (unint64_t *)__idx;
            do
            {
              v253 = __ldaxr(v252);
              v247 = --v253 == 0;
            }
            while (__stlxr(v253, v252));
LABEL_542:
            if (v247)
            {
              v271 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(__idx + 16));
                v211 = v271;
                v262 = -235920773;
                goto LABEL_546;
              }
            }
            break;
          case 9:
            v231 = (unint64_t *)__idx;
            do
            {
              v232 = __ldaxr(v231);
              v226 = --v232 == 0;
            }
            while (__stlxr(v232, v231));
LABEL_517:
            if (v226)
            {
              v259 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                v260 = *(void **)(__idx + 48);
                if (v260)
                {
                  *(_QWORD *)(__idx + 56) = v260;
                  operator delete(v260);
                }
                v261 = *(void **)(v259 + 24);
                if (v261)
                {
                  *(_QWORD *)(v259 + 32) = v261;
                  operator delete(v261);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v259 + 8);
                v211 = v259;
                v262 = 2071181815;
LABEL_546:
                v212 = v262 | 0x1030C4000000000;
LABEL_547:
                MEMORY[0x219A19A08](v211, v212);
              }
            }
            break;
          default:
            goto LABEL_548;
        }
        break;
      case 7:
        memset(&v744, 0, sizeof(v744));
        break;
      case 8:
        v213 = *((_QWORD *)v157 + 7);
        v214 = *(_QWORD *)(v213 + 16);
        *(_QWORD *)__str = *(_QWORD *)(v213 + 8);
        *(_QWORD *)&__str[8] = v214;
        if (v214)
        {
          v215 = (unsigned int *)(v214 + 8);
          do
            v216 = __ldxr(v215);
          while (__stxr(v216 + 1, v215));
        }
        v217 = *(_OWORD *)(v213 + 24);
        v218 = *(_OWORD *)(v213 + 56);
        *(_OWORD *)v739 = *(_OWORD *)(v213 + 40);
        v740 = v218;
        *(_OWORD *)&__str[16] = v217;
        turi::flexible_type_fail(0);
        memset(&v744, 0, sizeof(v744));
        boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *((_QWORD *)v157 + 7) + 8);
        turi::flexible_type_fail(0);
        memset(&v744, 0, sizeof(v744));
        if (v739[1])
        {
          *(void **)&v740 = v739[1];
          operator delete(v739[1]);
        }
        if (*(_QWORD *)&__str[16])
        {
          *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
          operator delete(*(void **)&__str[16]);
        }
        v163 = *(std::__shared_weak_count **)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v164 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 - 1, v164));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        break;
      default:
        goto LABEL_1222;
    }
LABEL_548:
    if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v717.__r_.__value_.__l.__data_);
    v272 = v725.__begin_;
    for (j = v725.__end_; j != v272; --j)
    {
      if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(j[-1].__r_.__value_.__l.__data_);
    }
    v725.__end_ = v272;
    size = v744.__r_.__value_.__l.__size_;
    v275 = v744.__r_.__value_.__r.__words[0];
    if (v744.__r_.__value_.__l.__size_ != v744.__r_.__value_.__r.__words[0])
    {
      v276 = 0;
      v277 = 0;
      do
      {
        v278 = (uint64_t *)(v275 + v276);
        if (*(_BYTE *)(v275 + v276 + 12) == 2)
        {
          v279 = *v278;
          if (*(char *)(*v278 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v717, *(const std::string::value_type **)(v279 + 8), *(_QWORD *)(v279 + 16));
          }
          else
          {
            v280 = *(_OWORD *)(v279 + 8);
            v717.__r_.__value_.__r.__words[2] = *(_QWORD *)(v279 + 24);
            *(_OWORD *)&v717.__r_.__value_.__l.__data_ = v280;
          }
          end = v725.__end_;
          if (v725.__end_ >= v725.__end_cap_.__value_)
          {
            v283 = 0xAAAAAAAAAAAAAAABLL * (((char *)v725.__end_ - (char *)v725.__begin_) >> 3);
            v284 = v283 + 1;
            if (v283 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v725.__end_cap_.__value_ - (char *)v725.__begin_) >> 3) > v284)
              v284 = 0x5555555555555556 * (((char *)v725.__end_cap_.__value_ - (char *)v725.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v725.__end_cap_.__value_ - (char *)v725.__begin_) >> 3) >= 0x555555555555555)
              v285 = 0xAAAAAAAAAAAAAAALL;
            else
              v285 = v284;
            v739[0] = &v725.__end_cap_;
            if (v285)
              v286 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v725.__end_cap_, v285);
            else
              v286 = 0;
            v287 = &v286[24 * v283];
            *(_QWORD *)__str = v286;
            *(_QWORD *)&__str[8] = v287;
            *(_QWORD *)&__str[24] = &v286[24 * v285];
            v288 = *(_OWORD *)&v717.__r_.__value_.__l.__data_;
            *((_QWORD *)v287 + 2) = *((_QWORD *)&v717.__r_.__value_.__l + 2);
            *(_OWORD *)v287 = v288;
            memset(&v717, 0, sizeof(v717));
            *(_QWORD *)&__str[16] = v287 + 24;
            std::vector<std::string>::__swap_out_circular_buffer(&v725, (std::__split_buffer<std::string> *)__str);
            v289 = v725.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__str);
            v725.__end_ = v289;
            if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v717.__r_.__value_.__l.__data_);
          }
          else
          {
            v282 = *(_OWORD *)&v717.__r_.__value_.__l.__data_;
            v725.__end_->__r_.__value_.__r.__words[2] = v717.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v282;
            v725.__end_ = end + 1;
          }
          size = v744.__r_.__value_.__l.__size_;
          v275 = v744.__r_.__value_.__r.__words[0];
        }
        ++v277;
        v276 += 16;
      }
      while (v277 < (uint64_t)(size - v275) >> 4);
    }
    *(_QWORD *)__str = &v744;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    k = v703;
    v30 = v704;
    v32 = (_QWORD *)MEMORY[0x24BEDB7F0];
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "line_terminator");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v290 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717)+ 68);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (v290 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v717, "line_terminator");
    *(_QWORD *)__str = &v717;
    v291 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v717.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    v292 = (turi::flexible_type_impl *)((char *)v291 + 56);
    switch(*((_BYTE *)v291 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_593;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_593:
        *(_QWORD *)__str = *v32;
        v296 = v32[9];
        *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = v32[8];
        *(_QWORD *)&__str[16] = v296;
        *(_QWORD *)&__str[24] = MEMORY[0x24BEDB848] + 16;
        if (v742 < 0)
          operator delete(v741);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](v743);
        break;
      case 2:
        v294 = *(_QWORD *)v292;
        if (*(char *)(*(_QWORD *)v292 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v744, *(const std::string::value_type **)(v294 + 8), *(_QWORD *)(v294 + 16));
        }
        else
        {
          v295 = *(_OWORD *)(v294 + 8);
          v744.__r_.__value_.__r.__words[2] = *(_QWORD *)(v294 + 24);
          *(_OWORD *)&v744.__r_.__value_.__l.__data_ = v295;
        }
        break;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v292 + 8));
        break;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (uint64_t *)(*(_QWORD *)v292 + 8));
        break;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v292 + 8));
        break;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v292, &v744);
        break;
      case 7:
        memset(&v744, 0, sizeof(v744));
        break;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        break;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v292 + 8));
        break;
      default:
        goto LABEL_1222;
    }
    if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v717.__r_.__value_.__l.__data_);
    std::string::operator=(&v721, &v744);
    if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v744.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "line_terminator");
    v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
    v293 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717)+ 68);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    if (v293 == 7)
      MEMORY[0x219A19390](&v721, "");
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "output_columns");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v297 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717)+ 68);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (v297 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v717, "output_columns");
    *(_QWORD *)__str = &v717;
    v298 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v717.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    switch(*((_BYTE *)v298 + 68))
    {
      case 0:
        v299 = *((_QWORD *)v298 + 7);
        BYTE4(v746) = 0;
        LODWORD(v746) = 0;
        __idx = v299;
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v300 = (unint64_t *)__idx;
            do
            {
              v301 = __ldaxr(v300);
              v302 = --v301 == 0;
            }
            while (__stlxr(v301, v300));
            goto LABEL_682;
          case 3:
            v374 = (unint64_t *)__idx;
            do
            {
              v375 = __ldaxr(v374);
              v376 = --v375 == 0;
            }
            while (__stlxr(v375, v374));
            goto LABEL_755;
          case 4:
            v360 = (unint64_t *)__idx;
            do
            {
              v361 = __ldaxr(v360);
              v362 = --v361 == 0;
            }
            while (__stlxr(v361, v360));
            goto LABEL_739;
          case 5:
            v379 = (unint64_t *)__idx;
            do
            {
              v380 = __ldaxr(v379);
              v381 = --v380 == 0;
            }
            while (__stlxr(v380, v379));
            goto LABEL_763;
          case 8:
            v386 = (unint64_t *)__idx;
            do
            {
              v387 = __ldaxr(v386);
              v388 = --v387 == 0;
            }
            while (__stlxr(v387, v386));
            goto LABEL_770;
          case 9:
            v365 = (unint64_t *)__idx;
            do
            {
              v366 = __ldaxr(v365);
              v367 = --v366 == 0;
            }
            while (__stlxr(v366, v365));
            goto LABEL_745;
          default:
            goto LABEL_776;
        }
      case 1:
        v343 = *((_QWORD *)v298 + 7);
        LODWORD(v746) = 0;
        BYTE4(v746) = 1;
        __idx = v343;
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v344 = (unint64_t *)__idx;
            do
            {
              v345 = __ldaxr(v344);
              v302 = --v345 == 0;
            }
            while (__stlxr(v345, v344));
            goto LABEL_682;
          case 3:
            v377 = (unint64_t *)__idx;
            do
            {
              v378 = __ldaxr(v377);
              v376 = --v378 == 0;
            }
            while (__stlxr(v378, v377));
            goto LABEL_755;
          case 4:
            v363 = (unint64_t *)__idx;
            do
            {
              v364 = __ldaxr(v363);
              v362 = --v364 == 0;
            }
            while (__stlxr(v364, v363));
            goto LABEL_739;
          case 5:
            v382 = (unint64_t *)__idx;
            do
            {
              v383 = __ldaxr(v382);
              v381 = --v383 == 0;
            }
            while (__stlxr(v383, v382));
            goto LABEL_763;
          case 8:
            v389 = (unint64_t *)__idx;
            do
            {
              v390 = __ldaxr(v389);
              v388 = --v390 == 0;
            }
            while (__stlxr(v390, v389));
            goto LABEL_770;
          case 9:
            v368 = (unint64_t *)__idx;
            do
            {
              v369 = __ldaxr(v368);
              v367 = --v369 == 0;
            }
            while (__stlxr(v369, v368));
            goto LABEL_745;
          default:
            goto LABEL_776;
        }
      case 2:
        v307 = (const std::string *)(*((_QWORD *)v298 + 7) + 8);
        *(double *)&__idx = 0.0;
        LODWORD(v746) = 0;
        BYTE4(v746) = 0;
        turi::flexible_type::operator=<std::string>((uint64_t *)&__idx, v307);
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v308 = (unint64_t *)__idx;
            do
            {
              v309 = __ldaxr(v308);
              v302 = --v309 == 0;
            }
            while (__stlxr(v309, v308));
            goto LABEL_682;
          case 3:
            v404 = (unint64_t *)__idx;
            do
            {
              v405 = __ldaxr(v404);
              v376 = --v405 == 0;
            }
            while (__stlxr(v405, v404));
            goto LABEL_755;
          case 4:
            v395 = (unint64_t *)__idx;
            do
            {
              v396 = __ldaxr(v395);
              v362 = --v396 == 0;
            }
            while (__stlxr(v396, v395));
            goto LABEL_739;
          case 5:
            v408 = (unint64_t *)__idx;
            do
            {
              v409 = __ldaxr(v408);
              v381 = --v409 == 0;
            }
            while (__stlxr(v409, v408));
            goto LABEL_763;
          case 8:
            v410 = (unint64_t *)__idx;
            do
            {
              v411 = __ldaxr(v410);
              v388 = --v411 == 0;
            }
            while (__stlxr(v411, v410));
            goto LABEL_770;
          case 9:
            v398 = (unint64_t *)__idx;
            do
            {
              v399 = __ldaxr(v398);
              v367 = --v399 == 0;
            }
            while (__stlxr(v399, v398));
            goto LABEL_745;
          default:
            goto LABEL_776;
        }
      case 3:
        v310 = *((_QWORD *)v298 + 7);
        std::vector<turi::flexible_type>::vector(&v744, (uint64_t)(*(_QWORD *)(v310 + 16) - *(_QWORD *)(v310 + 8)) >> 3);
        v311 = *(_QWORD *)(v310 + 8);
        if (*(_QWORD *)(v310 + 16) != v311)
        {
          v312 = 0;
          do
          {
            v313 = v744.__r_.__value_.__r.__words[0] + 16 * v312;
            switch(*(_BYTE *)(v313 + 12))
            {
              case 2:
                v314 = *(unint64_t **)v313;
                do
                {
                  v315 = __ldaxr(v314);
                  v316 = v315 - 1;
                }
                while (__stlxr(v316, v314));
                if (!v316)
                {
                  v317 = *(unint64_t **)v313;
                  if (!*(_QWORD *)v313)
                    goto LABEL_670;
                  if (*((char *)v317 + 31) < 0)
                    operator delete((void *)v317[1]);
                  v318 = v317;
                  v319 = 0x1012C404EF22A49;
                  goto LABEL_669;
                }
                break;
              case 3:
                v331 = *(unint64_t **)v313;
                do
                {
                  v332 = __ldaxr(v331);
                  v333 = v332 - 1;
                }
                while (__stlxr(v333, v331));
                if (!v333)
                {
                  v334 = *(unint64_t **)v313;
                  if (!*(_QWORD *)v313)
                    goto LABEL_670;
                  v335 = (void *)v334[1];
                  if (v335)
                  {
                    v334[2] = (unint64_t)v335;
                    operator delete(v335);
                  }
                  v318 = v334;
                  v319 = 0x1080C409938AC02;
                  goto LABEL_669;
                }
                break;
              case 4:
                v320 = *(unint64_t **)v313;
                do
                {
                  v321 = __ldaxr(v320);
                  v322 = v321 - 1;
                }
                while (__stlxr(v322, v320));
                if (!v322)
                {
                  v323 = *(unint64_t **)v313;
                  if (!*(_QWORD *)v313)
                    goto LABEL_670;
                  *(_QWORD *)__str = v323 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                  goto LABEL_662;
                }
                break;
              case 5:
                v336 = *(unint64_t **)v313;
                do
                {
                  v337 = __ldaxr(v336);
                  v338 = v337 - 1;
                }
                while (__stlxr(v338, v336));
                if (!v338)
                {
                  v323 = *(unint64_t **)v313;
                  if (!*(_QWORD *)v313)
                    goto LABEL_670;
                  *(_QWORD *)__str = v323 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_662:
                  v318 = v323;
                  v319 = 0x1020C405E66F15BLL;
                  goto LABEL_669;
                }
                break;
              case 8:
                v339 = *(unint64_t **)v313;
                do
                {
                  v340 = __ldaxr(v339);
                  v341 = v340 - 1;
                }
                while (__stlxr(v341, v339));
                if (!v341)
                {
                  v342 = *(unint64_t **)v313;
                  if (!*(_QWORD *)v313)
                    goto LABEL_670;
                  boost::detail::shared_count::~shared_count((unsigned int **)v342 + 2);
                  v318 = v342;
                  v330 = -235920773;
                  goto LABEL_668;
                }
                break;
              case 9:
                v324 = *(unint64_t **)v313;
                do
                {
                  v325 = __ldaxr(v324);
                  v326 = v325 - 1;
                }
                while (__stlxr(v326, v324));
                if (!v326)
                {
                  v327 = *(unint64_t **)v313;
                  if (*(_QWORD *)v313)
                  {
                    v328 = (void *)v327[6];
                    if (v328)
                    {
                      v327[7] = (unint64_t)v328;
                      operator delete(v328);
                    }
                    v329 = (void *)v327[3];
                    if (v329)
                    {
                      v327[4] = (unint64_t)v329;
                      operator delete(v329);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v327 + 1));
                    v318 = v327;
                    v330 = 2071181815;
LABEL_668:
                    v319 = v330 | 0x1030C4000000000;
LABEL_669:
                    MEMORY[0x219A19A08](v318, v319);
                  }
LABEL_670:
                  *(_QWORD *)v313 = 0;
                }
                break;
              default:
                break;
            }
            *(_QWORD *)v313 = 0;
            *(_DWORD *)(v313 + 8) = 0;
            *(_BYTE *)(v313 + 12) = 1;
            *(_QWORD *)v313 = *(_QWORD *)(v311 + 8 * v312++);
            v311 = *(_QWORD *)(v310 + 8);
          }
          while (v312 < (*(_QWORD *)(v310 + 16) - v311) >> 3);
        }
        break;
      case 4:
        v303 = *((_QWORD *)v298 + 7);
        memset(&v744, 0, sizeof(v744));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v744, *(uint64_t **)(v303 + 8), *(uint64_t **)(v303 + 16), (uint64_t)(*(_QWORD *)(v303 + 16) - *(_QWORD *)(v303 + 8)) >> 4);
        break;
      case 5:
        v346 = *((_QWORD *)v298 + 7);
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v346 + 8), *(uint64_t **)(v346 + 16), (uint64_t)(*(_QWORD *)(v346 + 16) - *(_QWORD *)(v346 + 8)) >> 5);
        turi::flexible_type_fail(0);
        memset(&v744, 0, sizeof(v744));
        *(double *)&__idx = COERCE_DOUBLE(__str);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
        break;
      case 6:
        v347 = (double)((uint64_t)(*((_QWORD *)v298 + 7) << 8) >> 8);
        v348 = (double)*((int *)v298 + 16) / 1000000.0;
        LODWORD(v746) = 0;
        BYTE4(v746) = 1;
        *(double *)&__idx = v348 + v347;
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v349 = (unint64_t *)__idx;
            do
            {
              v350 = __ldaxr(v349);
              v302 = --v350 == 0;
            }
            while (__stlxr(v350, v349));
LABEL_682:
            if (v302)
            {
              v351 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                if (*(char *)(__idx + 31) < 0)
                  operator delete(*(void **)(__idx + 8));
                v352 = v351;
                v353 = 0x1012C404EF22A49;
                goto LABEL_775;
              }
            }
            break;
          case 3:
            v384 = (unint64_t *)__idx;
            do
            {
              v385 = __ldaxr(v384);
              v376 = --v385 == 0;
            }
            while (__stlxr(v385, v384));
LABEL_755:
            if (v376)
            {
              v406 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                v407 = *(void **)(__idx + 8);
                if (v407)
                {
                  *(_QWORD *)(__idx + 16) = v407;
                  operator delete(v407);
                }
                v352 = v406;
                v353 = 0x1080C409938AC02;
                goto LABEL_775;
              }
            }
            break;
          case 4:
            v370 = (unint64_t *)__idx;
            do
            {
              v371 = __ldaxr(v370);
              v362 = --v371 == 0;
            }
            while (__stlxr(v371, v370));
LABEL_739:
            if (v362)
            {
              v397 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                *(_QWORD *)__str = __idx + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                goto LABEL_767;
              }
            }
            break;
          case 5:
            v391 = (unint64_t *)__idx;
            do
            {
              v392 = __ldaxr(v391);
              v381 = --v392 == 0;
            }
            while (__stlxr(v392, v391));
LABEL_763:
            if (v381)
            {
              v397 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                *(_QWORD *)__str = __idx + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_767:
                v352 = v397;
                v353 = 0x1020C405E66F15BLL;
                goto LABEL_775;
              }
            }
            break;
          case 8:
            v393 = (unint64_t *)__idx;
            do
            {
              v394 = __ldaxr(v393);
              v388 = --v394 == 0;
            }
            while (__stlxr(v394, v393));
LABEL_770:
            if (v388)
            {
              v412 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(__idx + 16));
                v352 = v412;
                v403 = -235920773;
                goto LABEL_774;
              }
            }
            break;
          case 9:
            v372 = (unint64_t *)__idx;
            do
            {
              v373 = __ldaxr(v372);
              v367 = --v373 == 0;
            }
            while (__stlxr(v373, v372));
LABEL_745:
            if (v367)
            {
              v400 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                v401 = *(void **)(__idx + 48);
                if (v401)
                {
                  *(_QWORD *)(__idx + 56) = v401;
                  operator delete(v401);
                }
                v402 = *(void **)(v400 + 24);
                if (v402)
                {
                  *(_QWORD *)(v400 + 32) = v402;
                  operator delete(v402);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v400 + 8);
                v352 = v400;
                v403 = 2071181815;
LABEL_774:
                v353 = v403 | 0x1030C4000000000;
LABEL_775:
                MEMORY[0x219A19A08](v352, v353);
              }
            }
            break;
          default:
            goto LABEL_776;
        }
        break;
      case 7:
        memset(&v744, 0, sizeof(v744));
        break;
      case 8:
        v354 = *((_QWORD *)v298 + 7);
        v355 = *(_QWORD *)(v354 + 16);
        *(_QWORD *)__str = *(_QWORD *)(v354 + 8);
        *(_QWORD *)&__str[8] = v355;
        if (v355)
        {
          v356 = (unsigned int *)(v355 + 8);
          do
            v357 = __ldxr(v356);
          while (__stxr(v357 + 1, v356));
        }
        v358 = *(_OWORD *)(v354 + 24);
        v359 = *(_OWORD *)(v354 + 56);
        *(_OWORD *)v739 = *(_OWORD *)(v354 + 40);
        v740 = v359;
        *(_OWORD *)&__str[16] = v358;
        turi::flexible_type_fail(0);
        memset(&v744, 0, sizeof(v744));
        boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *((_QWORD *)v298 + 7) + 8);
        turi::flexible_type_fail(0);
        memset(&v744, 0, sizeof(v744));
        if (v739[1])
        {
          *(void **)&v740 = v739[1];
          operator delete(v739[1]);
        }
        if (*(_QWORD *)&__str[16])
        {
          *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
          operator delete(*(void **)&__str[16]);
        }
        v304 = *(std::__shared_weak_count **)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v305 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v306 = __ldaxr(v305);
          while (__stlxr(v306 - 1, v305));
          if (!v306)
          {
            ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
            std::__shared_weak_count::__release_weak(v304);
          }
        }
        break;
      default:
        goto LABEL_1222;
    }
LABEL_776:
    if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v717.__r_.__value_.__l.__data_);
    v413 = v718.__begin_;
    v414 = v718.__end_;
    for (k = v703; v414 != v413; --v414)
    {
      if (SHIBYTE(v414[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v414[-1].__r_.__value_.__l.__data_);
    }
    v718.__end_ = v413;
    v415 = v744.__r_.__value_.__l.__size_;
    v416 = v744.__r_.__value_.__r.__words[0];
    if (v744.__r_.__value_.__l.__size_ != v744.__r_.__value_.__r.__words[0])
    {
      v417 = 0;
      v418 = 0;
      do
      {
        v419 = (uint64_t *)(v416 + v417);
        if (*(_BYTE *)(v416 + v417 + 12) == 2)
        {
          v420 = *v419;
          if (*(char *)(*v419 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v717, *(const std::string::value_type **)(v420 + 8), *(_QWORD *)(v420 + 16));
          }
          else
          {
            v421 = *(_OWORD *)(v420 + 8);
            v717.__r_.__value_.__r.__words[2] = *(_QWORD *)(v420 + 24);
            *(_OWORD *)&v717.__r_.__value_.__l.__data_ = v421;
          }
          v422 = v718.__end_;
          if (v718.__end_ >= v718.__end_cap_.__value_)
          {
            v424 = 0xAAAAAAAAAAAAAAABLL * (((char *)v718.__end_ - (char *)v718.__begin_) >> 3);
            v425 = v424 + 1;
            if (v424 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v718.__end_cap_.__value_ - (char *)v718.__begin_) >> 3) > v425)
              v425 = 0x5555555555555556 * (((char *)v718.__end_cap_.__value_ - (char *)v718.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v718.__end_cap_.__value_ - (char *)v718.__begin_) >> 3) >= 0x555555555555555)
              v426 = 0xAAAAAAAAAAAAAAALL;
            else
              v426 = v425;
            v739[0] = &v718.__end_cap_;
            if (v426)
              v427 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v718.__end_cap_, v426);
            else
              v427 = 0;
            v428 = &v427[24 * v424];
            *(_QWORD *)__str = v427;
            *(_QWORD *)&__str[8] = v428;
            *(_QWORD *)&__str[24] = &v427[24 * v426];
            v429 = *(_OWORD *)&v717.__r_.__value_.__l.__data_;
            *((_QWORD *)v428 + 2) = *((_QWORD *)&v717.__r_.__value_.__l + 2);
            *(_OWORD *)v428 = v429;
            memset(&v717, 0, sizeof(v717));
            *(_QWORD *)&__str[16] = v428 + 24;
            std::vector<std::string>::__swap_out_circular_buffer(&v718, (std::__split_buffer<std::string> *)__str);
            v430 = v718.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__str);
            v718.__end_ = v430;
            if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v717.__r_.__value_.__l.__data_);
          }
          else
          {
            v423 = *(_OWORD *)&v717.__r_.__value_.__l.__data_;
            v718.__end_->__r_.__value_.__r.__words[2] = v717.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v422->__r_.__value_.__l.__data_ = v423;
            v718.__end_ = v422 + 1;
          }
          v415 = v744.__r_.__value_.__l.__size_;
          v416 = v744.__r_.__value_.__r.__words[0];
        }
        ++v418;
        v417 += 16;
      }
      while (v418 < (uint64_t)(v415 - v416) >> 4);
    }
    *(_QWORD *)__str = &v744;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    v30 = v704;
    v32 = (_QWORD *)MEMORY[0x24BEDB7F0];
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "true_values");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v431 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717)+ 68);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (v431 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v717, "true_values");
    *(_QWORD *)__str = &v717;
    v432 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v717.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    switch(*((_BYTE *)v432 + 68))
    {
      case 0:
        v433 = *((_QWORD *)v432 + 7);
        BYTE4(v746) = 0;
        LODWORD(v746) = 0;
        __idx = v433;
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v434 = (unint64_t *)__idx;
            do
            {
              v435 = __ldaxr(v434);
              v436 = --v435 == 0;
            }
            while (__stlxr(v435, v434));
            goto LABEL_882;
          case 3:
            v508 = (unint64_t *)__idx;
            do
            {
              v509 = __ldaxr(v508);
              v510 = --v509 == 0;
            }
            while (__stlxr(v509, v508));
            goto LABEL_955;
          case 4:
            v494 = (unint64_t *)__idx;
            do
            {
              v495 = __ldaxr(v494);
              v496 = --v495 == 0;
            }
            while (__stlxr(v495, v494));
            goto LABEL_939;
          case 5:
            v513 = (unint64_t *)__idx;
            do
            {
              v514 = __ldaxr(v513);
              v515 = --v514 == 0;
            }
            while (__stlxr(v514, v513));
            goto LABEL_963;
          case 8:
            v520 = (unint64_t *)__idx;
            do
            {
              v521 = __ldaxr(v520);
              v522 = --v521 == 0;
            }
            while (__stlxr(v521, v520));
            goto LABEL_970;
          case 9:
            v499 = (unint64_t *)__idx;
            do
            {
              v500 = __ldaxr(v499);
              v501 = --v500 == 0;
            }
            while (__stlxr(v500, v499));
            goto LABEL_945;
          default:
            goto LABEL_976;
        }
      case 1:
        v477 = *((_QWORD *)v432 + 7);
        LODWORD(v746) = 0;
        BYTE4(v746) = 1;
        __idx = v477;
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v478 = (unint64_t *)__idx;
            do
            {
              v479 = __ldaxr(v478);
              v436 = --v479 == 0;
            }
            while (__stlxr(v479, v478));
            goto LABEL_882;
          case 3:
            v511 = (unint64_t *)__idx;
            do
            {
              v512 = __ldaxr(v511);
              v510 = --v512 == 0;
            }
            while (__stlxr(v512, v511));
            goto LABEL_955;
          case 4:
            v497 = (unint64_t *)__idx;
            do
            {
              v498 = __ldaxr(v497);
              v496 = --v498 == 0;
            }
            while (__stlxr(v498, v497));
            goto LABEL_939;
          case 5:
            v516 = (unint64_t *)__idx;
            do
            {
              v517 = __ldaxr(v516);
              v515 = --v517 == 0;
            }
            while (__stlxr(v517, v516));
            goto LABEL_963;
          case 8:
            v523 = (unint64_t *)__idx;
            do
            {
              v524 = __ldaxr(v523);
              v522 = --v524 == 0;
            }
            while (__stlxr(v524, v523));
            goto LABEL_970;
          case 9:
            v502 = (unint64_t *)__idx;
            do
            {
              v503 = __ldaxr(v502);
              v501 = --v503 == 0;
            }
            while (__stlxr(v503, v502));
            goto LABEL_945;
          default:
            goto LABEL_976;
        }
      case 2:
        v441 = (const std::string *)(*((_QWORD *)v432 + 7) + 8);
        *(double *)&__idx = 0.0;
        LODWORD(v746) = 0;
        BYTE4(v746) = 0;
        turi::flexible_type::operator=<std::string>((uint64_t *)&__idx, v441);
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v442 = (unint64_t *)__idx;
            do
            {
              v443 = __ldaxr(v442);
              v436 = --v443 == 0;
            }
            while (__stlxr(v443, v442));
            goto LABEL_882;
          case 3:
            v538 = (unint64_t *)__idx;
            do
            {
              v539 = __ldaxr(v538);
              v510 = --v539 == 0;
            }
            while (__stlxr(v539, v538));
            goto LABEL_955;
          case 4:
            v529 = (unint64_t *)__idx;
            do
            {
              v530 = __ldaxr(v529);
              v496 = --v530 == 0;
            }
            while (__stlxr(v530, v529));
            goto LABEL_939;
          case 5:
            v542 = (unint64_t *)__idx;
            do
            {
              v543 = __ldaxr(v542);
              v515 = --v543 == 0;
            }
            while (__stlxr(v543, v542));
            goto LABEL_963;
          case 8:
            v544 = (unint64_t *)__idx;
            do
            {
              v545 = __ldaxr(v544);
              v522 = --v545 == 0;
            }
            while (__stlxr(v545, v544));
            goto LABEL_970;
          case 9:
            v532 = (unint64_t *)__idx;
            do
            {
              v533 = __ldaxr(v532);
              v501 = --v533 == 0;
            }
            while (__stlxr(v533, v532));
            goto LABEL_945;
          default:
            goto LABEL_976;
        }
      case 3:
        v444 = *((_QWORD *)v432 + 7);
        std::vector<turi::flexible_type>::vector(&v744, (uint64_t)(*(_QWORD *)(v444 + 16) - *(_QWORD *)(v444 + 8)) >> 3);
        v445 = *(_QWORD *)(v444 + 8);
        if (*(_QWORD *)(v444 + 16) != v445)
        {
          v446 = 0;
          do
          {
            v447 = v744.__r_.__value_.__r.__words[0] + 16 * v446;
            switch(*(_BYTE *)(v447 + 12))
            {
              case 2:
                v448 = *(unint64_t **)v447;
                do
                {
                  v449 = __ldaxr(v448);
                  v450 = v449 - 1;
                }
                while (__stlxr(v450, v448));
                if (!v450)
                {
                  v451 = *(unint64_t **)v447;
                  if (!*(_QWORD *)v447)
                    goto LABEL_870;
                  if (*((char *)v451 + 31) < 0)
                    operator delete((void *)v451[1]);
                  v452 = v451;
                  v453 = 0x1012C404EF22A49;
                  goto LABEL_869;
                }
                break;
              case 3:
                v465 = *(unint64_t **)v447;
                do
                {
                  v466 = __ldaxr(v465);
                  v467 = v466 - 1;
                }
                while (__stlxr(v467, v465));
                if (!v467)
                {
                  v468 = *(unint64_t **)v447;
                  if (!*(_QWORD *)v447)
                    goto LABEL_870;
                  v469 = (void *)v468[1];
                  if (v469)
                  {
                    v468[2] = (unint64_t)v469;
                    operator delete(v469);
                  }
                  v452 = v468;
                  v453 = 0x1080C409938AC02;
                  goto LABEL_869;
                }
                break;
              case 4:
                v454 = *(unint64_t **)v447;
                do
                {
                  v455 = __ldaxr(v454);
                  v456 = v455 - 1;
                }
                while (__stlxr(v456, v454));
                if (!v456)
                {
                  v457 = *(unint64_t **)v447;
                  if (!*(_QWORD *)v447)
                    goto LABEL_870;
                  *(_QWORD *)__str = v457 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                  goto LABEL_862;
                }
                break;
              case 5:
                v470 = *(unint64_t **)v447;
                do
                {
                  v471 = __ldaxr(v470);
                  v472 = v471 - 1;
                }
                while (__stlxr(v472, v470));
                if (!v472)
                {
                  v457 = *(unint64_t **)v447;
                  if (!*(_QWORD *)v447)
                    goto LABEL_870;
                  *(_QWORD *)__str = v457 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_862:
                  v452 = v457;
                  v453 = 0x1020C405E66F15BLL;
                  goto LABEL_869;
                }
                break;
              case 8:
                v473 = *(unint64_t **)v447;
                do
                {
                  v474 = __ldaxr(v473);
                  v475 = v474 - 1;
                }
                while (__stlxr(v475, v473));
                if (!v475)
                {
                  v476 = *(unint64_t **)v447;
                  if (!*(_QWORD *)v447)
                    goto LABEL_870;
                  boost::detail::shared_count::~shared_count((unsigned int **)v476 + 2);
                  v452 = v476;
                  v464 = -235920773;
                  goto LABEL_868;
                }
                break;
              case 9:
                v458 = *(unint64_t **)v447;
                do
                {
                  v459 = __ldaxr(v458);
                  v460 = v459 - 1;
                }
                while (__stlxr(v460, v458));
                if (!v460)
                {
                  v461 = *(unint64_t **)v447;
                  if (*(_QWORD *)v447)
                  {
                    v462 = (void *)v461[6];
                    if (v462)
                    {
                      v461[7] = (unint64_t)v462;
                      operator delete(v462);
                    }
                    v463 = (void *)v461[3];
                    if (v463)
                    {
                      v461[4] = (unint64_t)v463;
                      operator delete(v463);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v461 + 1));
                    v452 = v461;
                    v464 = 2071181815;
LABEL_868:
                    v453 = v464 | 0x1030C4000000000;
LABEL_869:
                    MEMORY[0x219A19A08](v452, v453);
                  }
LABEL_870:
                  *(_QWORD *)v447 = 0;
                }
                break;
              default:
                break;
            }
            *(_QWORD *)v447 = 0;
            *(_DWORD *)(v447 + 8) = 0;
            *(_BYTE *)(v447 + 12) = 1;
            *(_QWORD *)v447 = *(_QWORD *)(v445 + 8 * v446++);
            v445 = *(_QWORD *)(v444 + 8);
          }
          while (v446 < (*(_QWORD *)(v444 + 16) - v445) >> 3);
        }
        break;
      case 4:
        v437 = *((_QWORD *)v432 + 7);
        memset(&v744, 0, sizeof(v744));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v744, *(uint64_t **)(v437 + 8), *(uint64_t **)(v437 + 16), (uint64_t)(*(_QWORD *)(v437 + 16) - *(_QWORD *)(v437 + 8)) >> 4);
        break;
      case 5:
        v480 = *((_QWORD *)v432 + 7);
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v480 + 8), *(uint64_t **)(v480 + 16), (uint64_t)(*(_QWORD *)(v480 + 16) - *(_QWORD *)(v480 + 8)) >> 5);
        turi::flexible_type_fail(0);
        memset(&v744, 0, sizeof(v744));
        *(double *)&__idx = COERCE_DOUBLE(__str);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
        break;
      case 6:
        v481 = (double)((uint64_t)(*((_QWORD *)v432 + 7) << 8) >> 8);
        v482 = (double)*((int *)v432 + 16) / 1000000.0;
        LODWORD(v746) = 0;
        BYTE4(v746) = 1;
        *(double *)&__idx = v482 + v481;
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v483 = (unint64_t *)__idx;
            do
            {
              v484 = __ldaxr(v483);
              v436 = --v484 == 0;
            }
            while (__stlxr(v484, v483));
LABEL_882:
            if (v436)
            {
              v485 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                if (*(char *)(__idx + 31) < 0)
                  operator delete(*(void **)(__idx + 8));
                v486 = v485;
                v487 = 0x1012C404EF22A49;
                goto LABEL_975;
              }
            }
            break;
          case 3:
            v518 = (unint64_t *)__idx;
            do
            {
              v519 = __ldaxr(v518);
              v510 = --v519 == 0;
            }
            while (__stlxr(v519, v518));
LABEL_955:
            if (v510)
            {
              v540 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                v541 = *(void **)(__idx + 8);
                if (v541)
                {
                  *(_QWORD *)(__idx + 16) = v541;
                  operator delete(v541);
                }
                v486 = v540;
                v487 = 0x1080C409938AC02;
                goto LABEL_975;
              }
            }
            break;
          case 4:
            v504 = (unint64_t *)__idx;
            do
            {
              v505 = __ldaxr(v504);
              v496 = --v505 == 0;
            }
            while (__stlxr(v505, v504));
LABEL_939:
            if (v496)
            {
              v531 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                *(_QWORD *)__str = __idx + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                goto LABEL_967;
              }
            }
            break;
          case 5:
            v525 = (unint64_t *)__idx;
            do
            {
              v526 = __ldaxr(v525);
              v515 = --v526 == 0;
            }
            while (__stlxr(v526, v525));
LABEL_963:
            if (v515)
            {
              v531 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                *(_QWORD *)__str = __idx + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_967:
                v486 = v531;
                v487 = 0x1020C405E66F15BLL;
                goto LABEL_975;
              }
            }
            break;
          case 8:
            v527 = (unint64_t *)__idx;
            do
            {
              v528 = __ldaxr(v527);
              v522 = --v528 == 0;
            }
            while (__stlxr(v528, v527));
LABEL_970:
            if (v522)
            {
              v546 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(__idx + 16));
                v486 = v546;
                v537 = -235920773;
                goto LABEL_974;
              }
            }
            break;
          case 9:
            v506 = (unint64_t *)__idx;
            do
            {
              v507 = __ldaxr(v506);
              v501 = --v507 == 0;
            }
            while (__stlxr(v507, v506));
LABEL_945:
            if (v501)
            {
              v534 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                v535 = *(void **)(__idx + 48);
                if (v535)
                {
                  *(_QWORD *)(__idx + 56) = v535;
                  operator delete(v535);
                }
                v536 = *(void **)(v534 + 24);
                if (v536)
                {
                  *(_QWORD *)(v534 + 32) = v536;
                  operator delete(v536);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v534 + 8);
                v486 = v534;
                v537 = 2071181815;
LABEL_974:
                v487 = v537 | 0x1030C4000000000;
LABEL_975:
                MEMORY[0x219A19A08](v486, v487);
              }
            }
            break;
          default:
            goto LABEL_976;
        }
        break;
      case 7:
        memset(&v744, 0, sizeof(v744));
        break;
      case 8:
        v488 = *((_QWORD *)v432 + 7);
        v489 = *(_QWORD *)(v488 + 16);
        *(_QWORD *)__str = *(_QWORD *)(v488 + 8);
        *(_QWORD *)&__str[8] = v489;
        if (v489)
        {
          v490 = (unsigned int *)(v489 + 8);
          do
            v491 = __ldxr(v490);
          while (__stxr(v491 + 1, v490));
        }
        v492 = *(_OWORD *)(v488 + 24);
        v493 = *(_OWORD *)(v488 + 56);
        *(_OWORD *)v739 = *(_OWORD *)(v488 + 40);
        v740 = v493;
        *(_OWORD *)&__str[16] = v492;
        turi::flexible_type_fail(0);
        memset(&v744, 0, sizeof(v744));
        boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *((_QWORD *)v432 + 7) + 8);
        turi::flexible_type_fail(0);
        memset(&v744, 0, sizeof(v744));
        if (v739[1])
        {
          *(void **)&v740 = v739[1];
          operator delete(v739[1]);
        }
        if (*(_QWORD *)&__str[16])
        {
          *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
          operator delete(*(void **)&__str[16]);
        }
        v438 = *(std::__shared_weak_count **)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v439 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v440 = __ldaxr(v439);
          while (__stlxr(v440 - 1, v439));
          if (!v440)
          {
            ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
            std::__shared_weak_count::__release_weak(v438);
          }
        }
        break;
      default:
        goto LABEL_1222;
    }
LABEL_976:
    if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v717.__r_.__value_.__l.__data_);
    memset(__str, 0, sizeof(__str));
    LODWORD(v739[0]) = 1065353216;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)v726);
    v547 = v744.__r_.__value_.__l.__size_;
    v548 = v744.__r_.__value_.__r.__words[0];
    k = v703;
    v30 = v704;
    v32 = (_QWORD *)MEMORY[0x24BEDB7F0];
    if (v744.__r_.__value_.__l.__size_ != v744.__r_.__value_.__r.__words[0])
    {
      v549 = 0;
      v550 = 0;
      do
      {
        v551 = (uint64_t *)(v548 + v549);
        if (*(_BYTE *)(v548 + v549 + 12) == 2)
        {
          v552 = *v551;
          if (*(char *)(*v551 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v717, *(const std::string::value_type **)(v552 + 8), *(_QWORD *)(v552 + 16));
          }
          else
          {
            v553 = *(_OWORD *)(v552 + 8);
            v717.__r_.__value_.__r.__words[2] = *(_QWORD *)(v552 + 24);
            *(_OWORD *)&v717.__r_.__value_.__l.__data_ = v553;
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v726, (unsigned __int8 *)&v717, (uint64_t)&v717);
          if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v717.__r_.__value_.__l.__data_);
          v547 = v744.__r_.__value_.__l.__size_;
          v548 = v744.__r_.__value_.__r.__words[0];
        }
        ++v550;
        v549 += 16;
      }
      while (v550 < (uint64_t)(v547 - v548) >> 4);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__str);
    *(_QWORD *)__str = &v744;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "false_values");
  v717.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v554 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)__str, (uint64_t)&std::piecewise_construct, &v717)+ 68);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (v554 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v717, "false_values");
    *(_QWORD *)__str = &v717;
    v555 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v717.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
    switch(*((_BYTE *)v555 + 68))
    {
      case 0:
        v556 = *((_QWORD *)v555 + 7);
        BYTE4(v746) = 0;
        LODWORD(v746) = 0;
        __idx = v556;
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v557 = (unint64_t *)__idx;
            do
            {
              v558 = __ldaxr(v557);
              v559 = --v558 == 0;
            }
            while (__stlxr(v558, v557));
            goto LABEL_1067;
          case 3:
            v631 = (unint64_t *)__idx;
            do
            {
              v632 = __ldaxr(v631);
              v633 = --v632 == 0;
            }
            while (__stlxr(v632, v631));
            goto LABEL_1140;
          case 4:
            v617 = (unint64_t *)__idx;
            do
            {
              v618 = __ldaxr(v617);
              v619 = --v618 == 0;
            }
            while (__stlxr(v618, v617));
            goto LABEL_1124;
          case 5:
            v636 = (unint64_t *)__idx;
            do
            {
              v637 = __ldaxr(v636);
              v638 = --v637 == 0;
            }
            while (__stlxr(v637, v636));
            goto LABEL_1148;
          case 8:
            v643 = (unint64_t *)__idx;
            do
            {
              v644 = __ldaxr(v643);
              v645 = --v644 == 0;
            }
            while (__stlxr(v644, v643));
            goto LABEL_1155;
          case 9:
            v622 = (unint64_t *)__idx;
            do
            {
              v623 = __ldaxr(v622);
              v624 = --v623 == 0;
            }
            while (__stlxr(v623, v622));
            goto LABEL_1130;
          default:
            goto LABEL_1161;
        }
      case 1:
        v600 = *((_QWORD *)v555 + 7);
        LODWORD(v746) = 0;
        BYTE4(v746) = 1;
        __idx = v600;
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v601 = (unint64_t *)__idx;
            do
            {
              v602 = __ldaxr(v601);
              v559 = --v602 == 0;
            }
            while (__stlxr(v602, v601));
            goto LABEL_1067;
          case 3:
            v634 = (unint64_t *)__idx;
            do
            {
              v635 = __ldaxr(v634);
              v633 = --v635 == 0;
            }
            while (__stlxr(v635, v634));
            goto LABEL_1140;
          case 4:
            v620 = (unint64_t *)__idx;
            do
            {
              v621 = __ldaxr(v620);
              v619 = --v621 == 0;
            }
            while (__stlxr(v621, v620));
            goto LABEL_1124;
          case 5:
            v639 = (unint64_t *)__idx;
            do
            {
              v640 = __ldaxr(v639);
              v638 = --v640 == 0;
            }
            while (__stlxr(v640, v639));
            goto LABEL_1148;
          case 8:
            v646 = (unint64_t *)__idx;
            do
            {
              v647 = __ldaxr(v646);
              v645 = --v647 == 0;
            }
            while (__stlxr(v647, v646));
            goto LABEL_1155;
          case 9:
            v625 = (unint64_t *)__idx;
            do
            {
              v626 = __ldaxr(v625);
              v624 = --v626 == 0;
            }
            while (__stlxr(v626, v625));
            goto LABEL_1130;
          default:
            goto LABEL_1161;
        }
      case 2:
        v564 = (const std::string *)(*((_QWORD *)v555 + 7) + 8);
        *(double *)&__idx = 0.0;
        LODWORD(v746) = 0;
        BYTE4(v746) = 0;
        turi::flexible_type::operator=<std::string>((uint64_t *)&__idx, v564);
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v565 = (unint64_t *)__idx;
            do
            {
              v566 = __ldaxr(v565);
              v559 = --v566 == 0;
            }
            while (__stlxr(v566, v565));
            goto LABEL_1067;
          case 3:
            v661 = (unint64_t *)__idx;
            do
            {
              v662 = __ldaxr(v661);
              v633 = --v662 == 0;
            }
            while (__stlxr(v662, v661));
            goto LABEL_1140;
          case 4:
            v652 = (unint64_t *)__idx;
            do
            {
              v653 = __ldaxr(v652);
              v619 = --v653 == 0;
            }
            while (__stlxr(v653, v652));
            goto LABEL_1124;
          case 5:
            v665 = (unint64_t *)__idx;
            do
            {
              v666 = __ldaxr(v665);
              v638 = --v666 == 0;
            }
            while (__stlxr(v666, v665));
            goto LABEL_1148;
          case 8:
            v667 = (unint64_t *)__idx;
            do
            {
              v668 = __ldaxr(v667);
              v645 = --v668 == 0;
            }
            while (__stlxr(v668, v667));
            goto LABEL_1155;
          case 9:
            v655 = (unint64_t *)__idx;
            do
            {
              v656 = __ldaxr(v655);
              v624 = --v656 == 0;
            }
            while (__stlxr(v656, v655));
            goto LABEL_1130;
          default:
            goto LABEL_1161;
        }
      case 3:
        v567 = *((_QWORD *)v555 + 7);
        std::vector<turi::flexible_type>::vector(&v744, (uint64_t)(*(_QWORD *)(v567 + 16) - *(_QWORD *)(v567 + 8)) >> 3);
        v568 = *(_QWORD *)(v567 + 8);
        if (*(_QWORD *)(v567 + 16) != v568)
        {
          v569 = 0;
          do
          {
            v570 = v744.__r_.__value_.__r.__words[0] + 16 * v569;
            switch(*(_BYTE *)(v570 + 12))
            {
              case 2:
                v571 = *(unint64_t **)v570;
                do
                {
                  v572 = __ldaxr(v571);
                  v573 = v572 - 1;
                }
                while (__stlxr(v573, v571));
                if (!v573)
                {
                  v574 = *(unint64_t **)v570;
                  if (!*(_QWORD *)v570)
                    goto LABEL_1055;
                  if (*((char *)v574 + 31) < 0)
                    operator delete((void *)v574[1]);
                  v575 = v574;
                  v576 = 0x1012C404EF22A49;
                  goto LABEL_1054;
                }
                break;
              case 3:
                v588 = *(unint64_t **)v570;
                do
                {
                  v589 = __ldaxr(v588);
                  v590 = v589 - 1;
                }
                while (__stlxr(v590, v588));
                if (!v590)
                {
                  v591 = *(unint64_t **)v570;
                  if (!*(_QWORD *)v570)
                    goto LABEL_1055;
                  v592 = (void *)v591[1];
                  if (v592)
                  {
                    v591[2] = (unint64_t)v592;
                    operator delete(v592);
                  }
                  v575 = v591;
                  v576 = 0x1080C409938AC02;
                  goto LABEL_1054;
                }
                break;
              case 4:
                v577 = *(unint64_t **)v570;
                do
                {
                  v578 = __ldaxr(v577);
                  v579 = v578 - 1;
                }
                while (__stlxr(v579, v577));
                if (!v579)
                {
                  v580 = *(unint64_t **)v570;
                  if (!*(_QWORD *)v570)
                    goto LABEL_1055;
                  *(_QWORD *)__str = v580 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                  goto LABEL_1047;
                }
                break;
              case 5:
                v593 = *(unint64_t **)v570;
                do
                {
                  v594 = __ldaxr(v593);
                  v595 = v594 - 1;
                }
                while (__stlxr(v595, v593));
                if (!v595)
                {
                  v580 = *(unint64_t **)v570;
                  if (!*(_QWORD *)v570)
                    goto LABEL_1055;
                  *(_QWORD *)__str = v580 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_1047:
                  v575 = v580;
                  v576 = 0x1020C405E66F15BLL;
                  goto LABEL_1054;
                }
                break;
              case 8:
                v596 = *(unint64_t **)v570;
                do
                {
                  v597 = __ldaxr(v596);
                  v598 = v597 - 1;
                }
                while (__stlxr(v598, v596));
                if (!v598)
                {
                  v599 = *(unint64_t **)v570;
                  if (!*(_QWORD *)v570)
                    goto LABEL_1055;
                  boost::detail::shared_count::~shared_count((unsigned int **)v599 + 2);
                  v575 = v599;
                  v587 = -235920773;
                  goto LABEL_1053;
                }
                break;
              case 9:
                v581 = *(unint64_t **)v570;
                do
                {
                  v582 = __ldaxr(v581);
                  v583 = v582 - 1;
                }
                while (__stlxr(v583, v581));
                if (!v583)
                {
                  v584 = *(unint64_t **)v570;
                  if (*(_QWORD *)v570)
                  {
                    v585 = (void *)v584[6];
                    if (v585)
                    {
                      v584[7] = (unint64_t)v585;
                      operator delete(v585);
                    }
                    v586 = (void *)v584[3];
                    if (v586)
                    {
                      v584[4] = (unint64_t)v586;
                      operator delete(v586);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v584 + 1));
                    v575 = v584;
                    v587 = 2071181815;
LABEL_1053:
                    v576 = v587 | 0x1030C4000000000;
LABEL_1054:
                    MEMORY[0x219A19A08](v575, v576);
                  }
LABEL_1055:
                  *(_QWORD *)v570 = 0;
                }
                break;
              default:
                break;
            }
            *(_QWORD *)v570 = 0;
            *(_DWORD *)(v570 + 8) = 0;
            *(_BYTE *)(v570 + 12) = 1;
            *(_QWORD *)v570 = *(_QWORD *)(v568 + 8 * v569++);
            v568 = *(_QWORD *)(v567 + 8);
          }
          while (v569 < (*(_QWORD *)(v567 + 16) - v568) >> 3);
        }
        break;
      case 4:
        v560 = *((_QWORD *)v555 + 7);
        memset(&v744, 0, sizeof(v744));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v744, *(uint64_t **)(v560 + 8), *(uint64_t **)(v560 + 16), (uint64_t)(*(_QWORD *)(v560 + 16) - *(_QWORD *)(v560 + 8)) >> 4);
        break;
      case 5:
        v603 = *((_QWORD *)v555 + 7);
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v603 + 8), *(uint64_t **)(v603 + 16), (uint64_t)(*(_QWORD *)(v603 + 16) - *(_QWORD *)(v603 + 8)) >> 5);
        turi::flexible_type_fail(0);
        memset(&v744, 0, sizeof(v744));
        *(double *)&__idx = COERCE_DOUBLE(__str);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
        break;
      case 6:
        v604 = (double)((uint64_t)(*((_QWORD *)v555 + 7) << 8) >> 8);
        v605 = (double)*((int *)v555 + 16) / 1000000.0;
        LODWORD(v746) = 0;
        BYTE4(v746) = 1;
        *(double *)&__idx = v605 + v604;
        memset(&v744, 0, sizeof(v744));
        *(_QWORD *)__str = &v744;
        __str[8] = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
        v744.__r_.__value_.__l.__size_ = v744.__r_.__value_.__r.__words[0];
        v744.__r_.__value_.__r.__words[2] = v744.__r_.__value_.__r.__words[0] + 16;
        v744.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v744.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, v747, (uint64_t)v744.__r_.__value_.__l.__data_);
        switch(BYTE4(v746))
        {
          case 2:
            v606 = (unint64_t *)__idx;
            do
            {
              v607 = __ldaxr(v606);
              v559 = --v607 == 0;
            }
            while (__stlxr(v607, v606));
LABEL_1067:
            if (v559)
            {
              v608 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                if (*(char *)(__idx + 31) < 0)
                  operator delete(*(void **)(__idx + 8));
                v609 = v608;
                v610 = 0x1012C404EF22A49;
                goto LABEL_1160;
              }
            }
            break;
          case 3:
            v641 = (unint64_t *)__idx;
            do
            {
              v642 = __ldaxr(v641);
              v633 = --v642 == 0;
            }
            while (__stlxr(v642, v641));
LABEL_1140:
            if (v633)
            {
              v663 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                v664 = *(void **)(__idx + 8);
                if (v664)
                {
                  *(_QWORD *)(__idx + 16) = v664;
                  operator delete(v664);
                }
                v609 = v663;
                v610 = 0x1080C409938AC02;
                goto LABEL_1160;
              }
            }
            break;
          case 4:
            v627 = (unint64_t *)__idx;
            do
            {
              v628 = __ldaxr(v627);
              v619 = --v628 == 0;
            }
            while (__stlxr(v628, v627));
LABEL_1124:
            if (v619)
            {
              v654 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                *(_QWORD *)__str = __idx + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                goto LABEL_1152;
              }
            }
            break;
          case 5:
            v648 = (unint64_t *)__idx;
            do
            {
              v649 = __ldaxr(v648);
              v638 = --v649 == 0;
            }
            while (__stlxr(v649, v648));
LABEL_1148:
            if (v638)
            {
              v654 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                *(_QWORD *)__str = __idx + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_1152:
                v609 = v654;
                v610 = 0x1020C405E66F15BLL;
                goto LABEL_1160;
              }
            }
            break;
          case 8:
            v650 = (unint64_t *)__idx;
            do
            {
              v651 = __ldaxr(v650);
              v645 = --v651 == 0;
            }
            while (__stlxr(v651, v650));
LABEL_1155:
            if (v645)
            {
              v669 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(__idx + 16));
                v609 = v669;
                v660 = -235920773;
                goto LABEL_1159;
              }
            }
            break;
          case 9:
            v629 = (unint64_t *)__idx;
            do
            {
              v630 = __ldaxr(v629);
              v624 = --v630 == 0;
            }
            while (__stlxr(v630, v629));
LABEL_1130:
            if (v624)
            {
              v657 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                v658 = *(void **)(__idx + 48);
                if (v658)
                {
                  *(_QWORD *)(__idx + 56) = v658;
                  operator delete(v658);
                }
                v659 = *(void **)(v657 + 24);
                if (v659)
                {
                  *(_QWORD *)(v657 + 32) = v659;
                  operator delete(v659);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v657 + 8);
                v609 = v657;
                v660 = 2071181815;
LABEL_1159:
                v610 = v660 | 0x1030C4000000000;
LABEL_1160:
                MEMORY[0x219A19A08](v609, v610);
              }
            }
            break;
          default:
            goto LABEL_1161;
        }
        break;
      case 7:
        memset(&v744, 0, sizeof(v744));
        break;
      case 8:
        v611 = *((_QWORD *)v555 + 7);
        v612 = *(_QWORD *)(v611 + 16);
        *(_QWORD *)__str = *(_QWORD *)(v611 + 8);
        *(_QWORD *)&__str[8] = v612;
        if (v612)
        {
          v613 = (unsigned int *)(v612 + 8);
          do
            v614 = __ldxr(v613);
          while (__stxr(v614 + 1, v613));
        }
        v615 = *(_OWORD *)(v611 + 24);
        v616 = *(_OWORD *)(v611 + 56);
        *(_OWORD *)v739 = *(_OWORD *)(v611 + 40);
        v740 = v616;
        *(_OWORD *)&__str[16] = v615;
        turi::flexible_type_fail(0);
        memset(&v744, 0, sizeof(v744));
        boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *((_QWORD *)v555 + 7) + 8);
        turi::flexible_type_fail(0);
        memset(&v744, 0, sizeof(v744));
        if (v739[1])
        {
          *(void **)&v740 = v739[1];
          operator delete(v739[1]);
        }
        if (*(_QWORD *)&__str[16])
        {
          *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
          operator delete(*(void **)&__str[16]);
        }
        v561 = *(std::__shared_weak_count **)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v562 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v563 = __ldaxr(v562);
          while (__stlxr(v563 - 1, v562));
          if (!v563)
          {
            ((void (*)(std::__shared_weak_count *))v561->__on_zero_shared)(v561);
            std::__shared_weak_count::__release_weak(v561);
          }
        }
        break;
      default:
        goto LABEL_1222;
    }
LABEL_1161:
    if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v717.__r_.__value_.__l.__data_);
    memset(__str, 0, sizeof(__str));
    LODWORD(v739[0]) = 1065353216;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)v728);
    v670 = v744.__r_.__value_.__l.__size_;
    v671 = v744.__r_.__value_.__r.__words[0];
    k = v703;
    v30 = v704;
    v32 = (_QWORD *)MEMORY[0x24BEDB7F0];
    if (v744.__r_.__value_.__l.__size_ != v744.__r_.__value_.__r.__words[0])
    {
      v672 = 0;
      v673 = 0;
      do
      {
        if (*(_BYTE *)(v671 + v672 + 12) == 2)
        {
          v674 = *(_QWORD *)(v671 + v672);
          if (*(char *)(v674 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v717, *(const std::string::value_type **)(v674 + 8), *(_QWORD *)(v674 + 16));
          }
          else
          {
            v675 = *(_OWORD *)(v674 + 8);
            v717.__r_.__value_.__r.__words[2] = *(_QWORD *)(v674 + 24);
            *(_OWORD *)&v717.__r_.__value_.__l.__data_ = v675;
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v728, (unsigned __int8 *)&v717, (uint64_t)&v717);
          if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v717.__r_.__value_.__l.__data_);
          v670 = v744.__r_.__value_.__l.__size_;
          v671 = v744.__r_.__value_.__r.__words[0];
        }
        ++v673;
        v672 += 16;
      }
      while (v673 < (uint64_t)(v670 - v671) >> 4);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__str);
    *(_QWORD *)__str = &v744;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  }
  turi::csv_line_tokenizer::init((turi::csv_line_tokenizer *)&v719);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v717);
  v676 = (_BYTE *)v717.__r_.__value_.__r.__words[0];
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)v716, a4);
  memset(&v715, 0, sizeof(v715));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v715, (__int128 *)v718.__begin_, (__int128 *)v718.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v718.__end_ - (char *)v718.__begin_) >> 3));
  turi::sframe::init_from_csvs(v676, k, (unsigned __int8 *)&v719, v710, v709, v707, v716, (uint64_t)&v715, (uint64_t)&v744, v711, v80);
  *(_QWORD *)__str = &v715;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v716, (char *)v716[1]);
  turi::unity_sframe::set_sframe(a1, (const turi::sframe **)&v717);
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)v30 = v30 + 8;
  v677 = v744.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v744.__r_.__value_.__l.__data_ != &v744.__r_.__value_.__r.__words[1])
  {
    do
    {
      v678 = (turi::unity_sarray *)operator new();
      turi::unity_sarray::unity_sarray(v678);
      std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>((uint64_t *)&__idx, (uint64_t)v678);
      v679 = __idx;
      v680 = *(std::__shared_weak_count **)(v677 + 64);
      v713 = *(_QWORD *)(v677 + 56);
      v714 = v680;
      if (v680)
      {
        p_shared_owners = (unint64_t *)&v680->__shared_owners_;
        do
          v682 = __ldxr(p_shared_owners);
        while (__stxr(v682 + 1, p_shared_owners));
      }
      turi::unity_sarray::construct_from_sarray(v679, &v713);
      v683 = v714;
      if (v714)
      {
        v684 = (unint64_t *)&v714->__shared_owners_;
        do
          v685 = __ldaxr(v684);
        while (__stlxr(v685 - 1, v684));
        if (!v685)
        {
          ((void (*)(std::__shared_weak_count *))v683->__on_zero_shared)(v683);
          std::__shared_weak_count::__release_weak(v683);
        }
      }
      std::pair<std::string,std::shared_ptr<turi::unity_sarray>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<turi::unity_sarray>&,0>((std::string *)__str, (__int128 *)(v677 + 32), &__idx);
      std::__tree<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>>((uint64_t **)v30, (const void **)__str, (uint64_t)__str);
      v686 = (std::__shared_weak_count *)v739[0];
      if (v739[0])
      {
        v687 = (unint64_t *)((char *)v739[0] + 8);
        do
          v688 = __ldaxr(v687);
        while (__stlxr(v688 - 1, v687));
        if (!v688)
        {
          ((void (*)(std::__shared_weak_count *))v686->__on_zero_shared)(v686);
          std::__shared_weak_count::__release_weak(v686);
        }
      }
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v689 = v746;
      if (v746)
      {
        v690 = (unint64_t *)&v746->__shared_owners_;
        do
          v691 = __ldaxr(v690);
        while (__stlxr(v691 - 1, v690));
        if (!v691)
        {
          ((void (*)(std::__shared_weak_count *))v689->__on_zero_shared)(v689);
          std::__shared_weak_count::__release_weak(v689);
        }
      }
      v692 = *(std::string **)(v677 + 8);
      if (v692)
      {
        do
        {
          v693 = v692;
          v692 = (std::string *)v692->__r_.__value_.__r.__words[0];
        }
        while (v692);
      }
      else
      {
        do
        {
          v693 = *(std::string **)(v677 + 16);
          v41 = v693->__r_.__value_.__r.__words[0] == v677;
          v677 = (std::string::size_type)v693;
        }
        while (!v41);
      }
      v677 = (std::string::size_type)v693;
    }
    while (v693 != (std::string *)&v744.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>>>::destroy((uint64_t)&v744, (_QWORD *)v744.__r_.__value_.__l.__size_);
  v694 = (std::__shared_weak_count *)v717.__r_.__value_.__l.__size_;
  if (v717.__r_.__value_.__l.__size_)
  {
    v695 = (unint64_t *)(v717.__r_.__value_.__l.__size_ + 8);
    do
      v696 = __ldaxr(v695);
    while (__stlxr(v696 - 1, v695));
    if (!v696)
    {
      ((void (*)(std::__shared_weak_count *))v694->__on_zero_shared)(v694);
      std::__shared_weak_count::__release_weak(v694);
    }
  }
  *(_QWORD *)__str = &v718;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  turi::csv_line_tokenizer::~csv_line_tokenizer((void **)&v719.__locale_);
  v731[0] = *v32;
  v697 = v32[9];
  *(_QWORD *)((char *)v731 + *(_QWORD *)(v731[0] - 24)) = v32[8];
  v732[0] = v697;
  v732[1] = MEMORY[0x24BEDB848] + 16;
  if (v733 < 0)
    operator delete((void *)v732[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v734);
}

