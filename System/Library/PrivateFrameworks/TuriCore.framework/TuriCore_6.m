uint64_t OUTLINED_FUNCTION_13_2(uint64_t a1, const char *a2)
{
  return assert_msg(0, a2);
}

uint64_t *__cxx_global_var_init_9_0()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

void __cxx_global_var_init_10_0()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t *__cxx_global_var_init_11_0()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_12()
{
  uint64_t *result;

  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_13_0()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_14()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_15()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_16_0()
{
  uint64_t *result;

  {
    return turi::any::holder<std::vector<turi::flex_type_enum>>::registry_type::registry_type(&turi::any::holder<std::vector<turi::flex_type_enum>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_17()
{
  uint64_t *result;

  {
    return turi::any::holder<long long>::registry_type::registry_type(&turi::any::holder<long long>::registry);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_operator_properties_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::query_eval::make_segmented_graph@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t **v17;
  _QWORD *result;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char **v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _OWORD *v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  _OWORD *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  unsigned int v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  void *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t **v126;
  std::runtime_error *exception;
  std::string *v128;
  __int128 v129;
  std::runtime_error *v130;
  std::string *v131;
  __int128 v132;
  __int128 v133;
  void *v134[2];
  char v135;
  void *__p[2];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  std::string v140;
  size_t __idx[2];

  v10 = *(_QWORD **)(a4 + 8);
  if (!v10)
  {
LABEL_7:
    if (a3)
    {
      v13 = operator new();
      turi::query_eval::planner_node::planner_node(v13, *a1);
      std::shared_ptr<turi::query_eval::planner_node>::shared_ptr[abi:ne180100]<turi::query_eval::planner_node,void>(a5, v13);
      if ((turi::query_eval::is_source_node((int **)a1) & 1) != 0)
      {
        v14 = *a1;
        std::string::basic_string[abi:ne180100]<0>(v134, "begin_index");
        v15 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at(v14 + 8, (const void **)v134);
        v16 = 0;
        switch(v15[12])
        {
          case 0:
            v16 = *(_QWORD *)v15;
            goto LABEL_51;
          case 1:
            v16 = (uint64_t)*(double *)v15;
            goto LABEL_51;
          case 2:
            v34 = *(_QWORD *)v15;
            v35 = (char **)(*(_QWORD *)v15 + 8);
            __idx[0] = 0;
            v36 = (char *)v35;
            if (*(char *)(v34 + 31) < 0)
              v36 = *v35;
            std::string::basic_string[abi:ne180100]<0>(__p, v36);
            v16 = std::stoll((const std::string *)__p, __idx, 10);
            if (SBYTE7(v137) < 0)
              operator delete(__p[0]);
            if (*(char *)(v34 + 31) < 0)
              v37 = *(_QWORD *)(v34 + 16);
            else
              v37 = *(unsigned __int8 *)(v34 + 31);
            if (__idx[0] != v37)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v128 = std::string::append(&v140, " cannot be interpreted as an integer");
              v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
              *(_QWORD *)&v137 = *((_QWORD *)&v128->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v129;
              v128->__r_.__value_.__l.__size_ = 0;
              v128->__r_.__value_.__r.__words[2] = 0;
              v128->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, (const std::string *)__p);
              __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_51;
          case 3:
            v33 = *(_QWORD *)v15;
            __p[1] = 0;
            *(_QWORD *)&v137 = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v33 + 8), *(_QWORD *)(v33 + 16), (uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_50;
          case 4:
            v38 = *(_QWORD *)v15;
            __p[1] = 0;
            *(_QWORD *)&v137 = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v38 + 8), *(uint64_t **)(v38 + 16), (uint64_t)(*(_QWORD *)(v38 + 16) - *(_QWORD *)(v38 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v140.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
            goto LABEL_50;
          case 5:
            v39 = *(_QWORD *)v15;
            __p[1] = 0;
            *(_QWORD *)&v137 = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v39 + 8), *(uint64_t **)(v39 + 16), (uint64_t)(*(_QWORD *)(v39 + 16) - *(_QWORD *)(v39 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v140.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
            goto LABEL_50;
          case 6:
            v16 = (uint64_t)(*(_QWORD *)v15 << 8) >> 8;
            goto LABEL_51;
          case 7:
            goto LABEL_51;
          case 8:
            v40 = *(_QWORD *)v15;
            v41 = *(unsigned int **)(*(_QWORD *)v15 + 16);
            __p[0] = *(void **)(*(_QWORD *)v15 + 8);
            __p[1] = v41;
            if (v41)
            {
              v42 = v41 + 2;
              do
                v43 = __ldxr(v42);
              while (__stxr(v43 + 1, v42));
            }
            v44 = *(_OWORD *)(v40 + 24);
            v45 = *(_OWORD *)(v40 + 56);
            v138 = *(_OWORD *)(v40 + 40);
            v139 = v45;
            v137 = v44;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
            goto LABEL_50;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v15 + 8);
            turi::flexible_type_fail(0);
            turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
LABEL_50:
            v16 = 0;
LABEL_51:
            if (v135 < 0)
              operator delete(v134[0]);
            v46 = *a1;
            std::string::basic_string[abi:ne180100]<0>(v134, "end_index");
            v47 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at(v46 + 8, (const void **)v134);
            v48 = 0;
            switch(v47[12])
            {
              case 0:
                v48 = *(_QWORD *)v47;
                goto LABEL_73;
              case 1:
                v48 = (uint64_t)*(double *)v47;
                goto LABEL_73;
              case 2:
                v50 = *(_QWORD *)v47;
                v51 = (char **)(*(_QWORD *)v47 + 8);
                __idx[0] = 0;
                v52 = (char *)v51;
                if (*(char *)(v50 + 31) < 0)
                  v52 = *v51;
                std::string::basic_string[abi:ne180100]<0>(__p, v52);
                v48 = std::stoll((const std::string *)__p, __idx, 10);
                if (SBYTE7(v137) < 0)
                  operator delete(__p[0]);
                if (*(char *)(v50 + 31) < 0)
                  v53 = *(_QWORD *)(v50 + 16);
                else
                  v53 = *(unsigned __int8 *)(v50 + 31);
                if (__idx[0] != v53)
                {
                  v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v131 = std::string::append(&v140, " cannot be interpreted as an integer");
                  v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v137 = *((_QWORD *)&v131->__r_.__value_.__l + 2);
                  *(_OWORD *)__p = v132;
                  v131->__r_.__value_.__l.__size_ = 0;
                  v131->__r_.__value_.__r.__words[2] = 0;
                  v131->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v130, (const std::string *)__p);
                  __cxa_throw(v130, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                goto LABEL_73;
              case 3:
                v49 = *(_QWORD *)v47;
                __p[1] = 0;
                *(_QWORD *)&v137 = 0;
                __p[0] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v49 + 8), *(_QWORD *)(v49 + 16), (uint64_t)(*(_QWORD *)(v49 + 16) - *(_QWORD *)(v49 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                goto LABEL_72;
              case 4:
                v54 = *(_QWORD *)v47;
                __p[1] = 0;
                *(_QWORD *)&v137 = 0;
                __p[0] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v54 + 8), *(uint64_t **)(v54 + 16), (uint64_t)(*(_QWORD *)(v54 + 16) - *(_QWORD *)(v54 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v140.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
                goto LABEL_72;
              case 5:
                v55 = *(_QWORD *)v47;
                __p[1] = 0;
                *(_QWORD *)&v137 = 0;
                __p[0] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v55 + 8), *(uint64_t **)(v55 + 16), (uint64_t)(*(_QWORD *)(v55 + 16) - *(_QWORD *)(v55 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v140.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
                goto LABEL_72;
              case 6:
                v48 = (uint64_t)(*(_QWORD *)v47 << 8) >> 8;
                goto LABEL_73;
              case 7:
                goto LABEL_73;
              case 8:
                v56 = *(_QWORD *)v47;
                v57 = *(unsigned int **)(*(_QWORD *)v47 + 16);
                __p[0] = *(void **)(*(_QWORD *)v47 + 8);
                __p[1] = v57;
                if (v57)
                {
                  v58 = v57 + 2;
                  do
                    v59 = __ldxr(v58);
                  while (__stxr(v59 + 1, v58));
                }
                v60 = *(_OWORD *)(v56 + 24);
                v61 = *(_OWORD *)(v56 + 56);
                v138 = *(_OWORD *)(v56 + 40);
                v139 = v61;
                v137 = v60;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
                goto LABEL_72;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v47 + 8);
                turi::flexible_type_fail(0);
                turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
LABEL_72:
                v48 = 0;
LABEL_73:
                if (v135 < 0)
                  operator delete(v134[0]);
                v62 = *a5;
                std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
                v140.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                v63 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v62 + 8), (const void **)__p, (uint64_t)&std::piecewise_construct, &v140);
                v64 = v63;
                v65 = v48 - v16;
                v66 = v65 * a2;
                v67 = v65 * a2 / a3 + v16;
                switch(*((_BYTE *)v63 + 68))
                {
                  case 2:
                    v68 = (unint64_t *)*((_QWORD *)v63 + 7);
                    do
                    {
                      v69 = __ldaxr(v68);
                      v70 = v69 - 1;
                    }
                    while (__stlxr(v70, v68));
                    if (!v70)
                    {
                      v71 = *((_QWORD *)v63 + 7);
                      if (!v71)
                        goto LABEL_113;
                      if (*(char *)(v71 + 31) < 0)
                        operator delete(*(void **)(v71 + 8));
                      v72 = (_QWORD *)v71;
                      v73 = 0x1012C404EF22A49;
                      goto LABEL_112;
                    }
                    break;
                  case 3:
                    v83 = (unint64_t *)*((_QWORD *)v63 + 7);
                    do
                    {
                      v84 = __ldaxr(v83);
                      v85 = v84 - 1;
                    }
                    while (__stlxr(v85, v83));
                    if (!v85)
                    {
                      v86 = (_QWORD *)*((_QWORD *)v63 + 7);
                      if (!v86)
                        goto LABEL_113;
                      v87 = (void *)v86[1];
                      if (v87)
                      {
                        v86[2] = v87;
                        operator delete(v87);
                      }
                      v72 = v86;
                      v73 = 0x1080C409938AC02;
                      goto LABEL_112;
                    }
                    break;
                  case 4:
                    v74 = (unint64_t *)*((_QWORD *)v63 + 7);
                    do
                    {
                      v75 = __ldaxr(v74);
                      v76 = v75 - 1;
                    }
                    while (__stlxr(v76, v74));
                    if (!v76)
                    {
                      v77 = (_QWORD *)*((_QWORD *)v63 + 7);
                      if (!v77)
                        goto LABEL_113;
                      v140.__r_.__value_.__r.__words[0] = (std::string::size_type)(v77 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
                      goto LABEL_105;
                    }
                    break;
                  case 5:
                    v88 = (unint64_t *)*((_QWORD *)v63 + 7);
                    do
                    {
                      v89 = __ldaxr(v88);
                      v90 = v89 - 1;
                    }
                    while (__stlxr(v90, v88));
                    if (!v90)
                    {
                      v77 = (_QWORD *)*((_QWORD *)v63 + 7);
                      if (!v77)
                        goto LABEL_113;
                      v140.__r_.__value_.__r.__words[0] = (std::string::size_type)(v77 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
LABEL_105:
                      v72 = v77;
                      v73 = 0x1020C405E66F15BLL;
                      goto LABEL_112;
                    }
                    break;
                  case 8:
                    v91 = (unint64_t *)*((_QWORD *)v63 + 7);
                    do
                    {
                      v92 = __ldaxr(v91);
                      v93 = v92 - 1;
                    }
                    while (__stlxr(v93, v91));
                    if (!v93)
                    {
                      v94 = *((_QWORD *)v63 + 7);
                      if (!v94)
                        goto LABEL_113;
                      boost::detail::shared_count::~shared_count((unsigned int **)(v94 + 16));
                      v72 = (_QWORD *)v94;
                      v82 = -235920773;
                      goto LABEL_111;
                    }
                    break;
                  case 9:
                    v78 = (unint64_t *)*((_QWORD *)v63 + 7);
                    do
                    {
                      v79 = __ldaxr(v78);
                      v80 = v79 - 1;
                    }
                    while (__stlxr(v80, v78));
                    if (!v80)
                    {
                      v81 = (_QWORD *)*((_QWORD *)v63 + 7);
                      if (v81)
                      {
                        v72 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v81);
                        v82 = 2071181815;
LABEL_111:
                        v73 = v82 | 0x1030C4000000000;
LABEL_112:
                        MEMORY[0x219A19A08](v72, v73);
                      }
LABEL_113:
                      *((_QWORD *)v64 + 7) = 0;
                    }
                    break;
                  default:
                    break;
                }
                *((_DWORD *)v64 + 16) = 0;
                *((_BYTE *)v64 + 68) = 0;
                *((_QWORD *)v64 + 7) = v67;
                if (SBYTE7(v137) < 0)
                  operator delete(__p[0]);
                v95 = *a5;
                std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
                v140.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                v96 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v95 + 8), (const void **)__p, (uint64_t)&std::piecewise_construct, &v140);
                v97 = v96;
                v98 = (v65 + v66) / a3 + v16;
                switch(*((_BYTE *)v96 + 68))
                {
                  case 2:
                    v99 = (unint64_t *)*((_QWORD *)v96 + 7);
                    do
                    {
                      v100 = __ldaxr(v99);
                      v101 = v100 - 1;
                    }
                    while (__stlxr(v101, v99));
                    if (!v101)
                    {
                      v102 = *((_QWORD *)v96 + 7);
                      if (!v102)
                        goto LABEL_154;
                      if (*(char *)(v102 + 31) < 0)
                        operator delete(*(void **)(v102 + 8));
                      v103 = (_QWORD *)v102;
                      v104 = 0x1012C404EF22A49;
                      goto LABEL_153;
                    }
                    break;
                  case 3:
                    v114 = (unint64_t *)*((_QWORD *)v96 + 7);
                    do
                    {
                      v115 = __ldaxr(v114);
                      v116 = v115 - 1;
                    }
                    while (__stlxr(v116, v114));
                    if (!v116)
                    {
                      v117 = (_QWORD *)*((_QWORD *)v96 + 7);
                      if (!v117)
                        goto LABEL_154;
                      v118 = (void *)v117[1];
                      if (v118)
                      {
                        v117[2] = v118;
                        operator delete(v118);
                      }
                      v103 = v117;
                      v104 = 0x1080C409938AC02;
                      goto LABEL_153;
                    }
                    break;
                  case 4:
                    v105 = (unint64_t *)*((_QWORD *)v96 + 7);
                    do
                    {
                      v106 = __ldaxr(v105);
                      v107 = v106 - 1;
                    }
                    while (__stlxr(v107, v105));
                    if (!v107)
                    {
                      v108 = (_QWORD *)*((_QWORD *)v96 + 7);
                      if (!v108)
                        goto LABEL_154;
                      v140.__r_.__value_.__r.__words[0] = (std::string::size_type)(v108 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
                      goto LABEL_146;
                    }
                    break;
                  case 5:
                    v119 = (unint64_t *)*((_QWORD *)v96 + 7);
                    do
                    {
                      v120 = __ldaxr(v119);
                      v121 = v120 - 1;
                    }
                    while (__stlxr(v121, v119));
                    if (!v121)
                    {
                      v108 = (_QWORD *)*((_QWORD *)v96 + 7);
                      if (!v108)
                        goto LABEL_154;
                      v140.__r_.__value_.__r.__words[0] = (std::string::size_type)(v108 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
LABEL_146:
                      v103 = v108;
                      v104 = 0x1020C405E66F15BLL;
                      goto LABEL_153;
                    }
                    break;
                  case 8:
                    v122 = (unint64_t *)*((_QWORD *)v96 + 7);
                    do
                    {
                      v123 = __ldaxr(v122);
                      v124 = v123 - 1;
                    }
                    while (__stlxr(v124, v122));
                    if (!v124)
                    {
                      v125 = *((_QWORD *)v96 + 7);
                      if (!v125)
                        goto LABEL_154;
                      boost::detail::shared_count::~shared_count((unsigned int **)(v125 + 16));
                      v103 = (_QWORD *)v125;
                      v113 = -235920773;
                      goto LABEL_152;
                    }
                    break;
                  case 9:
                    v109 = (unint64_t *)*((_QWORD *)v96 + 7);
                    do
                    {
                      v110 = __ldaxr(v109);
                      v111 = v110 - 1;
                    }
                    while (__stlxr(v111, v109));
                    if (!v111)
                    {
                      v112 = (_QWORD *)*((_QWORD *)v96 + 7);
                      if (v112)
                      {
                        v103 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v112);
                        v113 = 2071181815;
LABEL_152:
                        v104 = v113 | 0x1030C4000000000;
LABEL_153:
                        MEMORY[0x219A19A08](v103, v104);
                      }
LABEL_154:
                      *((_QWORD *)v97 + 7) = 0;
                    }
                    break;
                  default:
                    break;
                }
                *((_DWORD *)v97 + 16) = 0;
                *((_BYTE *)v97 + 68) = 0;
                *((_QWORD *)v97 + 7) = v98;
                if (SBYTE7(v137) < 0)
                  operator delete(__p[0]);
                break;
              default:
                goto LABEL_165;
            }
            goto LABEL_157;
          default:
LABEL_165:
            result = (_QWORD *)turi::flexible_type_fail(0);
            __break(1u);
            return result;
        }
      }
      v19 = *(_QWORD *)(*a5 + 56);
      if (*(_QWORD *)(*a5 + 64) != v19)
      {
        v20 = 0;
        do
        {
          v21 = *(_OWORD *)(v19 + 16 * v20);
          v133 = v21;
          if (*((_QWORD *)&v21 + 1))
          {
            v22 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          turi::query_eval::make_segmented_graph(__p, &v133, a2, a3, a4);
          std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*(_QWORD *)(*a5 + 56) + 16 * v20, (__int128 *)__p);
          v24 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v25 = (unint64_t *)((char *)__p[1] + 8);
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v27 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
          if (*((_QWORD *)&v133 + 1))
          {
            v28 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          ++v20;
          v19 = *(_QWORD *)(*a5 + 56);
        }
        while (v20 < (*(_QWORD *)(*a5 + 64) - v19) >> 4);
      }
LABEL_157:
      __p[0] = a1;
      v126 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a4, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
      return std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v126 + 6, a5);
    }
    else
    {
      __p[0] = a1;
      v17 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a4, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
      result = std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v17 + 6, a1);
      *(_OWORD *)a5 = *(_OWORD *)a1;
      *a1 = 0;
      a1[1] = 0;
    }
    return result;
  }
  v11 = *a1;
  while (1)
  {
    v12 = v10[4];
    if (v11 >= v12)
      break;
LABEL_6:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_7;
  }
  if (v12 < v11)
  {
    ++v10;
    goto LABEL_6;
  }
  __p[0] = a1;
  result = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a4, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
  *a5 = result[6];
  v30 = result[7];
  a5[1] = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  return result;
}

void sub_2180EEBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v36;
  int v37;

  if (a23 < 0)
    operator delete(__p);
  if (a35 < 0)
  {
    operator delete(a30);
    if ((v37 & 1) == 0)
    {
LABEL_8:
      if (a17 < 0)
        operator delete(a12);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v35);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

_QWORD *turi::query_eval::make_sliced_graph@<X0>(uint64_t *a1@<X0>, std::string::size_type a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *result;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char **v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _BYTE *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  __int128 v60;
  __int128 v61;
  char *v62;
  uint64_t v63;
  _OWORD *v64;
  _OWORD *v65;
  std::string::size_type v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unsigned int v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  void *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  unsigned int v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  void *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t **v124;
  std::runtime_error *exception;
  std::string *v126;
  __int128 v127;
  std::runtime_error *v128;
  std::string *v129;
  __int128 v130;
  __int128 v131;
  void *v132[2];
  char v133;
  void *__p[2];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  std::string v138;
  size_t __idx;

  v138.__r_.__value_.__r.__words[0] = a2;
  v132[0] = a3;
  if (a2 > (unint64_t)a3)
  {
    __p[0] = &v138;
    __p[1] = v132;
    turi::query_eval::make_sliced_graph(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,unsigned long,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::planner_node>> &)::$_0::operator()();
  }
  v10 = *(_QWORD **)(a4 + 8);
  if (!v10)
  {
LABEL_8:
    v13 = operator new();
    turi::query_eval::planner_node::planner_node(v13, *a1);
    std::shared_ptr<turi::query_eval::planner_node>::shared_ptr[abi:ne180100]<turi::query_eval::planner_node,void>(a5, v13);
    if ((turi::query_eval::is_source_node((int **)a1) & 1) != 0)
    {
      v14 = *a1;
      std::string::basic_string[abi:ne180100]<0>(v132, "begin_index");
      v15 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at(v14 + 8, (const void **)v132);
      v16 = 0;
      switch(v15[12])
      {
        case 0:
          v16 = *(_QWORD *)v15;
          goto LABEL_50;
        case 1:
          v16 = (uint64_t)*(double *)v15;
          goto LABEL_50;
        case 2:
          v34 = *(_QWORD *)v15;
          v35 = (char **)(*(_QWORD *)v15 + 8);
          __idx = 0;
          v36 = (char *)v35;
          if (*(char *)(v34 + 31) < 0)
            v36 = *v35;
          std::string::basic_string[abi:ne180100]<0>(__p, v36);
          v16 = std::stoll((const std::string *)__p, &__idx, 10);
          if (SBYTE7(v135) < 0)
            operator delete(__p[0]);
          if (*(char *)(v34 + 31) < 0)
            v37 = *(_QWORD *)(v34 + 16);
          else
            v37 = *(unsigned __int8 *)(v34 + 31);
          if (__idx != v37)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v126 = std::string::append(&v138, " cannot be interpreted as an integer");
            v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
            *(_QWORD *)&v135 = *((_QWORD *)&v126->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v127;
            v126->__r_.__value_.__l.__size_ = 0;
            v126->__r_.__value_.__r.__words[2] = 0;
            v126->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, (const std::string *)__p);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_50;
        case 3:
          v33 = *(_QWORD *)v15;
          __p[1] = 0;
          *(_QWORD *)&v135 = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v33 + 8), *(_QWORD *)(v33 + 16), (uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_49;
        case 4:
          v38 = *(_QWORD *)v15;
          __p[1] = 0;
          *(_QWORD *)&v135 = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v38 + 8), *(uint64_t **)(v38 + 16), (uint64_t)(*(_QWORD *)(v38 + 16) - *(_QWORD *)(v38 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v138.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
          goto LABEL_49;
        case 5:
          v39 = *(_QWORD *)v15;
          __p[1] = 0;
          *(_QWORD *)&v135 = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v39 + 8), *(uint64_t **)(v39 + 16), (uint64_t)(*(_QWORD *)(v39 + 16) - *(_QWORD *)(v39 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v138.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
          goto LABEL_49;
        case 6:
          v16 = (uint64_t)(*(_QWORD *)v15 << 8) >> 8;
          goto LABEL_50;
        case 7:
          goto LABEL_50;
        case 8:
          v40 = *(_QWORD *)v15;
          v41 = *(unsigned int **)(*(_QWORD *)v15 + 16);
          __p[0] = *(void **)(*(_QWORD *)v15 + 8);
          __p[1] = v41;
          if (v41)
          {
            v42 = v41 + 2;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          v44 = *(_OWORD *)(v40 + 24);
          v45 = *(_OWORD *)(v40 + 56);
          v136 = *(_OWORD *)(v40 + 40);
          v137 = v45;
          v135 = v44;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          goto LABEL_49;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v15 + 8);
          turi::flexible_type_fail(0);
          turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
LABEL_49:
          v16 = 0;
LABEL_50:
          if (v133 < 0)
            operator delete(v132[0]);
          v46 = *a1;
          std::string::basic_string[abi:ne180100]<0>(v132, "end_index");
          v47 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at(v46 + 8, (const void **)v132);
          v48 = 0;
          switch(v47[12])
          {
            case 0:
              v48 = *(_QWORD *)v47;
              goto LABEL_72;
            case 1:
              v48 = (uint64_t)*(double *)v47;
              goto LABEL_72;
            case 2:
              v50 = *(_QWORD *)v47;
              v51 = (char **)(*(_QWORD *)v47 + 8);
              __idx = 0;
              v52 = (char *)v51;
              if (*(char *)(v50 + 31) < 0)
                v52 = *v51;
              std::string::basic_string[abi:ne180100]<0>(__p, v52);
              v48 = std::stoll((const std::string *)__p, &__idx, 10);
              if (SBYTE7(v135) < 0)
                operator delete(__p[0]);
              if (*(char *)(v50 + 31) < 0)
                v53 = *(_QWORD *)(v50 + 16);
              else
                v53 = *(unsigned __int8 *)(v50 + 31);
              if (__idx != v53)
              {
                v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v129 = std::string::append(&v138, " cannot be interpreted as an integer");
                v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
                *(_QWORD *)&v135 = *((_QWORD *)&v129->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v130;
                v129->__r_.__value_.__l.__size_ = 0;
                v129->__r_.__value_.__r.__words[2] = 0;
                v129->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v128, (const std::string *)__p);
                __cxa_throw(v128, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_72;
            case 3:
              v49 = *(_QWORD *)v47;
              __p[1] = 0;
              *(_QWORD *)&v135 = 0;
              __p[0] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v49 + 8), *(_QWORD *)(v49 + 16), (uint64_t)(*(_QWORD *)(v49 + 16) - *(_QWORD *)(v49 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              goto LABEL_71;
            case 4:
              v54 = *(_QWORD *)v47;
              __p[1] = 0;
              *(_QWORD *)&v135 = 0;
              __p[0] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v54 + 8), *(uint64_t **)(v54 + 16), (uint64_t)(*(_QWORD *)(v54 + 16) - *(_QWORD *)(v54 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v138.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
              goto LABEL_71;
            case 5:
              v55 = *(_QWORD *)v47;
              __p[1] = 0;
              *(_QWORD *)&v135 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v55 + 8), *(uint64_t **)(v55 + 16), (uint64_t)(*(_QWORD *)(v55 + 16) - *(_QWORD *)(v55 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v138.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
              goto LABEL_71;
            case 6:
              v48 = (uint64_t)(*(_QWORD *)v47 << 8) >> 8;
              goto LABEL_72;
            case 7:
              goto LABEL_72;
            case 8:
              v56 = *(_QWORD *)v47;
              v57 = *(unsigned int **)(*(_QWORD *)v47 + 16);
              __p[0] = *(void **)(*(_QWORD *)v47 + 8);
              __p[1] = v57;
              if (v57)
              {
                v58 = v57 + 2;
                do
                  v59 = __ldxr(v58);
                while (__stxr(v59 + 1, v58));
              }
              v60 = *(_OWORD *)(v56 + 24);
              v61 = *(_OWORD *)(v56 + 56);
              v136 = *(_OWORD *)(v56 + 40);
              v137 = v61;
              v135 = v60;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              goto LABEL_71;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v47 + 8);
              turi::flexible_type_fail(0);
              turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
LABEL_71:
              v48 = 0;
LABEL_72:
              if (v133 < 0)
                operator delete(v132[0]);
              v62 = &a3[v16];
              v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&a3[v16];
              v132[0] = (void *)v48;
              if ((unint64_t)&a3[v16] > v48)
              {
                __p[0] = &v138;
                __p[1] = v132;
                turi::query_eval::make_sliced_graph(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,unsigned long,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::planner_node>> &)::$_1::operator()();
              }
              v63 = *a5;
              std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
              v138.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              v64 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v63 + 8), (const void **)__p, (uint64_t)&std::piecewise_construct, &v138);
              v65 = v64;
              v66 = v16 + a2;
              switch(*((_BYTE *)v64 + 68))
              {
                case 2:
                  v67 = (unint64_t *)*((_QWORD *)v64 + 7);
                  do
                  {
                    v68 = __ldaxr(v67);
                    v69 = v68 - 1;
                  }
                  while (__stlxr(v69, v67));
                  if (!v69)
                  {
                    v70 = *((_QWORD *)v64 + 7);
                    if (!v70)
                      goto LABEL_113;
                    if (*(char *)(v70 + 31) < 0)
                      operator delete(*(void **)(v70 + 8));
                    v71 = (_QWORD *)v70;
                    v72 = 0x1012C404EF22A49;
                    goto LABEL_112;
                  }
                  break;
                case 3:
                  v82 = (unint64_t *)*((_QWORD *)v64 + 7);
                  do
                  {
                    v83 = __ldaxr(v82);
                    v84 = v83 - 1;
                  }
                  while (__stlxr(v84, v82));
                  if (!v84)
                  {
                    v85 = (_QWORD *)*((_QWORD *)v64 + 7);
                    if (!v85)
                      goto LABEL_113;
                    v86 = (void *)v85[1];
                    if (v86)
                    {
                      v85[2] = v86;
                      operator delete(v86);
                    }
                    v71 = v85;
                    v72 = 0x1080C409938AC02;
                    goto LABEL_112;
                  }
                  break;
                case 4:
                  v73 = (unint64_t *)*((_QWORD *)v64 + 7);
                  do
                  {
                    v74 = __ldaxr(v73);
                    v75 = v74 - 1;
                  }
                  while (__stlxr(v75, v73));
                  if (!v75)
                  {
                    v76 = (_QWORD *)*((_QWORD *)v64 + 7);
                    if (!v76)
                      goto LABEL_113;
                    v138.__r_.__value_.__r.__words[0] = (std::string::size_type)(v76 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
                    goto LABEL_105;
                  }
                  break;
                case 5:
                  v87 = (unint64_t *)*((_QWORD *)v64 + 7);
                  do
                  {
                    v88 = __ldaxr(v87);
                    v89 = v88 - 1;
                  }
                  while (__stlxr(v89, v87));
                  if (!v89)
                  {
                    v76 = (_QWORD *)*((_QWORD *)v64 + 7);
                    if (!v76)
                      goto LABEL_113;
                    v138.__r_.__value_.__r.__words[0] = (std::string::size_type)(v76 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
LABEL_105:
                    v71 = v76;
                    v72 = 0x1020C405E66F15BLL;
                    goto LABEL_112;
                  }
                  break;
                case 8:
                  v90 = (unint64_t *)*((_QWORD *)v64 + 7);
                  do
                  {
                    v91 = __ldaxr(v90);
                    v92 = v91 - 1;
                  }
                  while (__stlxr(v92, v90));
                  if (!v92)
                  {
                    v93 = *((_QWORD *)v64 + 7);
                    if (!v93)
                      goto LABEL_113;
                    boost::detail::shared_count::~shared_count((unsigned int **)(v93 + 16));
                    v71 = (_QWORD *)v93;
                    v81 = -235920773;
                    goto LABEL_111;
                  }
                  break;
                case 9:
                  v77 = (unint64_t *)*((_QWORD *)v64 + 7);
                  do
                  {
                    v78 = __ldaxr(v77);
                    v79 = v78 - 1;
                  }
                  while (__stlxr(v79, v77));
                  if (!v79)
                  {
                    v80 = (_QWORD *)*((_QWORD *)v64 + 7);
                    if (v80)
                    {
                      v71 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v80);
                      v81 = 2071181815;
LABEL_111:
                      v72 = v81 | 0x1030C4000000000;
LABEL_112:
                      MEMORY[0x219A19A08](v71, v72);
                    }
LABEL_113:
                    *((_QWORD *)v65 + 7) = 0;
                  }
                  break;
                default:
                  break;
              }
              *((_DWORD *)v65 + 16) = 0;
              *((_BYTE *)v65 + 68) = 0;
              *((_QWORD *)v65 + 7) = v66;
              if (SBYTE7(v135) < 0)
                operator delete(__p[0]);
              v94 = *a5;
              std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
              v138.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              v95 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v94 + 8), (const void **)__p, (uint64_t)&std::piecewise_construct, &v138);
              v96 = v95;
              switch(*((_BYTE *)v95 + 68))
              {
                case 2:
                  v97 = (unint64_t *)*((_QWORD *)v95 + 7);
                  do
                  {
                    v98 = __ldaxr(v97);
                    v99 = v98 - 1;
                  }
                  while (__stlxr(v99, v97));
                  if (!v99)
                  {
                    v100 = *((_QWORD *)v95 + 7);
                    if (!v100)
                      goto LABEL_154;
                    if (*(char *)(v100 + 31) < 0)
                      operator delete(*(void **)(v100 + 8));
                    v101 = (_QWORD *)v100;
                    v102 = 0x1012C404EF22A49;
                    goto LABEL_153;
                  }
                  break;
                case 3:
                  v112 = (unint64_t *)*((_QWORD *)v95 + 7);
                  do
                  {
                    v113 = __ldaxr(v112);
                    v114 = v113 - 1;
                  }
                  while (__stlxr(v114, v112));
                  if (!v114)
                  {
                    v115 = (_QWORD *)*((_QWORD *)v95 + 7);
                    if (!v115)
                      goto LABEL_154;
                    v116 = (void *)v115[1];
                    if (v116)
                    {
                      v115[2] = v116;
                      operator delete(v116);
                    }
                    v101 = v115;
                    v102 = 0x1080C409938AC02;
                    goto LABEL_153;
                  }
                  break;
                case 4:
                  v103 = (unint64_t *)*((_QWORD *)v95 + 7);
                  do
                  {
                    v104 = __ldaxr(v103);
                    v105 = v104 - 1;
                  }
                  while (__stlxr(v105, v103));
                  if (!v105)
                  {
                    v106 = (_QWORD *)*((_QWORD *)v95 + 7);
                    if (!v106)
                      goto LABEL_154;
                    v138.__r_.__value_.__r.__words[0] = (std::string::size_type)(v106 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
                    goto LABEL_146;
                  }
                  break;
                case 5:
                  v117 = (unint64_t *)*((_QWORD *)v95 + 7);
                  do
                  {
                    v118 = __ldaxr(v117);
                    v119 = v118 - 1;
                  }
                  while (__stlxr(v119, v117));
                  if (!v119)
                  {
                    v106 = (_QWORD *)*((_QWORD *)v95 + 7);
                    if (!v106)
                      goto LABEL_154;
                    v138.__r_.__value_.__r.__words[0] = (std::string::size_type)(v106 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
LABEL_146:
                    v101 = v106;
                    v102 = 0x1020C405E66F15BLL;
                    goto LABEL_153;
                  }
                  break;
                case 8:
                  v120 = (unint64_t *)*((_QWORD *)v95 + 7);
                  do
                  {
                    v121 = __ldaxr(v120);
                    v122 = v121 - 1;
                  }
                  while (__stlxr(v122, v120));
                  if (!v122)
                  {
                    v123 = *((_QWORD *)v95 + 7);
                    if (!v123)
                      goto LABEL_154;
                    boost::detail::shared_count::~shared_count((unsigned int **)(v123 + 16));
                    v101 = (_QWORD *)v123;
                    v111 = -235920773;
                    goto LABEL_152;
                  }
                  break;
                case 9:
                  v107 = (unint64_t *)*((_QWORD *)v95 + 7);
                  do
                  {
                    v108 = __ldaxr(v107);
                    v109 = v108 - 1;
                  }
                  while (__stlxr(v109, v107));
                  if (!v109)
                  {
                    v110 = (_QWORD *)*((_QWORD *)v95 + 7);
                    if (v110)
                    {
                      v101 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v110);
                      v111 = 2071181815;
LABEL_152:
                      v102 = v111 | 0x1030C4000000000;
LABEL_153:
                      MEMORY[0x219A19A08](v101, v102);
                    }
LABEL_154:
                    *((_QWORD *)v96 + 7) = 0;
                  }
                  break;
                default:
                  break;
              }
              *((_DWORD *)v96 + 16) = 0;
              *((_BYTE *)v96 + 68) = 0;
              *((_QWORD *)v96 + 7) = v62;
              if (SBYTE7(v135) < 0)
                operator delete(__p[0]);
              v17 = *a5;
              break;
            default:
              goto LABEL_170;
          }
          goto LABEL_158;
        default:
LABEL_170:
          result = (_QWORD *)turi::flexible_type_fail(0);
          __break(1u);
          return result;
      }
    }
    v17 = *a5;
    v18 = *(_QWORD *)(*a5 + 56);
    if (*(_QWORD *)(*a5 + 64) != v18)
    {
      v19 = 0;
      do
      {
        v20 = *(_OWORD *)(v18 + 16 * v19);
        v131 = v20;
        if (*((_QWORD *)&v20 + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        turi::query_eval::make_sliced_graph(__p, &v131, a2, a3, a4);
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*(_QWORD *)(*a5 + 56) + 16 * v19, (__int128 *)__p);
        v23 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v24 = (unint64_t *)((char *)__p[1] + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
        if (*((_QWORD *)&v131 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        ++v19;
        v17 = *a5;
        v18 = *(_QWORD *)(*a5 + 56);
      }
      while (v19 < (*(_QWORD *)(*a5 + 64) - v18) >> 4);
    }
LABEL_158:
    std::string::basic_string[abi:ne180100]<0>(__p, "__length_memo__");
    std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__erase_unique<std::string>((uint64_t **)(v17 + 32), (const void **)__p);
    if (SBYTE7(v135) < 0)
      operator delete(__p[0]);
    __p[0] = a1;
    v124 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a4, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
    return std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v124 + 6, a5);
  }
  v11 = *a1;
  while (1)
  {
    v12 = v10[4];
    if (v11 >= v12)
      break;
LABEL_7:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_8;
  }
  if (v12 < v11)
  {
    ++v10;
    goto LABEL_7;
  }
  __p[0] = a1;
  result = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a4, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
  *a5 = result[6];
  v30 = result[7];
  a5[1] = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  return result;
}

void sub_2180EF904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  void *v24;
  int v25;
  uint64_t v26;

  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 89) < 0)
  {
    operator delete(*(void **)(v26 - 112));
    if ((v25 & 1) == 0)
    {
LABEL_8:
      if (a17 < 0)
        operator delete(a12);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void turi::query_eval::make_sliced_graph(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,unsigned long,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::planner_node>> &)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_transformations.cpp", 130);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"begin_index", 11);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"end_index", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_transformations.cpp", "operator()", 60, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::make_sliced_graph(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,unsigned long,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::planner_node>> &)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180EFC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::make_sliced_graph(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,unsigned long,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::planner_node>> &)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_transformations.cpp", 130);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"end_index", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"old_end_index", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_transformations.cpp", "operator()", 76, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::make_sliced_graph(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,unsigned long,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::planner_node>> &)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180EFE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::planner_node::planner_node(uint64_t a1, uint64_t a2)
{
  const void ***v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (const void ***)(a2 + 32);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = (uint64_t *)(a1 + 32);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)(a1 + 8), a2 + 8);
  std::map<std::string,turi::any>::map[abi:ne180100](v5, v4);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)(a1 + 56), *(_QWORD **)(a2 + 56), *(_QWORD **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return a1;
}

void sub_2180EFF60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(v3, *(_QWORD **)(v1 + 40));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v2, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

void sub_2180F0120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::query_eval::planner_node>::shared_ptr[abi:ne180100]<turi::query_eval::planner_node,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D92E208;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2180F0214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<turi::query_eval::planner_node>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::query_eval::planner_node *,std::shared_ptr<turi::query_eval::planner_node>::__shared_ptr_default_delete<turi::query_eval::planner_node,turi::query_eval::planner_node>,std::allocator<turi::query_eval::planner_node>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<turi::query_eval::planner_node>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::query_eval::planner_node *,std::shared_ptr<turi::query_eval::planner_node>::__shared_ptr_default_delete<turi::query_eval::planner_node,turi::query_eval::planner_node>,std::allocator<turi::query_eval::planner_node>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<turi::query_eval::planner_node>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2 + 80);
    v4 = (void **)(a2 + 56);
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(a2 + 32, *(_QWORD **)(a2 + 40));
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a2 + 8, *(_QWORD **)(a2 + 16));
    return MEMORY[0x219A19A08](a2, 0x1020C409E48DA19);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::any>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *__cxx_global_var_init_6_1()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

void __cxx_global_var_init_7_2()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t *__cxx_global_var_init_8_0()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_9_1()
{
  uint64_t *result;

  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_10_1()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_11_1()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_12_0()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_operator_transformations_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::query_eval::optimization_transform_registry::set_num_stages(turi::query_eval::optimization_transform_registry *this, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::resize((uint64_t *)this, a2);
  v3 = *(uint64_t **)this;
  v4 = (uint64_t *)*((_QWORD *)this + 1);
  while (v3 != v4)
  {
    std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>::resize(v3, 0x10uLL);
    v3 += 3;
  }
}

void std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void turi::query_eval::optimization_transform_registry::register_optimization(_QWORD *a1, uint64_t **a2, __int128 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  void *v18[2];
  unsigned __int8 v19;
  std::string v20;
  std::string v21;
  void *__p[2];
  int64_t v23;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = *v3;
      do
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)a3 + 24))(*(_QWORD *)a3, v8))
        {
          std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)(*(_QWORD *)(*a1 + 24 * v10) + v7), a3);
          v9 = 1;
        }
        ++v8;
        v7 += 24;
      }
      while (v8 != 16);
      std::string::basic_string[abi:ne180100]<0>(&v20, "Config ERROR: transform ");
      (*(void (**)(void **__return_ptr))(**(_QWORD **)a3 + 16))(v18);
      if ((v19 & 0x80u) == 0)
        v11 = v18;
      else
        v11 = (void **)v18[0];
      if ((v19 & 0x80u) == 0)
        v12 = v19;
      else
        v12 = (std::string::size_type)v18[1];
      v13 = std::string::append(&v20, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v15 = std::string::append(&v21, " does not seem to apply to any node types.");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v23 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v17 = __p;
      if (v23 < 0)
        v17 = (void **)__p[0];
      assert_msg(v9 & 1, "%s", (const char *)v17);
      if (SHIBYTE(v23) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      if ((char)v19 < 0)
        operator delete(v18[0]);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_2180F0830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a16 < 0)
    operator delete(a11);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void turi::query_eval::optimization_engine::optimize_planner_graph(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  turi::query_eval *v14;
  turi::query_eval::optimization_transform_registry *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31[3];
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD v39[5];
  uint64_t v40;
  uint64_t v41;

  if ((v6 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<turi::query_eval::optimization_transform_registry const>::~shared_ptr[abi:ne180100], &turi::query_eval::get_transform_registry(void)::transform_registry, &dword_217E69000);
  }
  v7 = turi::query_eval::get_transform_registry(void)::transform_registry;
  if (turi::query_eval::get_transform_registry(void)::transform_registry)
    goto LABEL_3;
  if ((v10 & 1) == 0
  {
    turi::mutex::mutex(&turi::query_eval::get_transform_registry(void)::creation_lock);
    __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::query_eval::get_transform_registry(void)::creation_lock, &dword_217E69000);
  }
  pthread_mutex_lock(&turi::query_eval::get_transform_registry(void)::creation_lock);
  v11 = turi::query_eval::get_transform_registry(void)::transform_registry;
  if (turi::query_eval::get_transform_registry(void)::transform_registry)
  {
    v40 = turi::query_eval::get_transform_registry(void)::transform_registry;
    v41 = qword_254FEEC88;
    if (qword_254FEEC88)
    {
      v12 = (unint64_t *)(qword_254FEEC88 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    v14 = (turi::query_eval *)operator new();
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    turi::query_eval::populate_transforms(v14, v15);
    std::shared_ptr<turi::query_eval::optimization_transform_registry const>::reset[abi:ne180100]<turi::query_eval::optimization_transform_registry,void>(&turi::query_eval::get_transform_registry(void)::transform_registry, (uint64_t)v14);
  }
  pthread_mutex_unlock(&turi::query_eval::get_transform_registry(void)::creation_lock);
  if (!v11)
  {
    v7 = turi::query_eval::get_transform_registry(void)::transform_registry;
LABEL_3:
    v40 = v7;
    v41 = qword_254FEEC88;
    if (qword_254FEEC88)
    {
      v8 = (unint64_t *)(qword_254FEEC88 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  pthread_mutex_lock(&turi::query_eval::global_query_lock);
  v31[2] = v40;
  v32 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    v16 = (unint64_t *)(v41 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v33 = v40;
    v34 = v41;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
  }
  else
  {
    v33 = v40;
    v34 = 0;
  }
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = v39;
  memset(v39, 0, sizeof(v39));
  v19 = *a1;
  v20 = (std::__shared_weak_count *)a1[1];
  v31[0] = v19;
  v31[1] = (uint64_t)v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  turi::query_eval::optimization_engine::_run((uint64_t)&v33, v31, a2, a3);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  turi::query_eval::optimization_engine::~optimization_engine((turi::query_eval::optimization_engine *)&v33);
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  pthread_mutex_unlock(&turi::query_eval::global_query_lock);
  v28 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    v29 = (unint64_t *)(v41 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_2180F0BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::query_eval::optimization_engine::_run(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  void *__p;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;

  v7 = a2[1];
  v43 = *a2;
  v44 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::make_planner_node(&v43, &v45);
  v10 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v40 = v45;
  v41 = v46;
  if (v46)
  {
    v13 = (unint64_t *)&v46->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  turi::query_eval::optimization_engine::build_node_info(a1, &v40, &v42);
  v15 = v41;
  if (v41)
  {
    v16 = (unint64_t *)&v41->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  turi::query_eval::get_stages_to_run(a3, &__p);
  v18 = (uint64_t *)__p;
  v19 = v39;
  while (v18 != v19)
  {
    v20 = *v18;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    v37 = v42;
    if (*((_QWORD *)&v42 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    turi::query_eval::optimization_engine::run_stage(a1, v20, (uint64_t *)&v37);
    if (v21)
    {
      v24 = (unint64_t *)&v21->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    ++v18;
  }
  v26 = *(uint64_t **)(v45 + 56);
  v28 = *v26;
  v27 = v26[1];
  *a4 = v28;
  a4[1] = v27;
  if (v27)
  {
    v29 = (unint64_t *)(v27 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  if (__p)
  {
    v39 = (uint64_t *)__p;
    operator delete(__p);
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v46;
  if (v46)
  {
    v35 = (unint64_t *)&v46->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_2180F0E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v19 - 64);
  _Unwind_Resume(a1);
}

void turi::query_eval::optimization_engine::replace_node(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76[2];
  uint64_t v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int128 v82;

  v3 = *a2;
  if (!*((_BYTE *)*a2 + 89))
  {
    v5 = *v3;
    if (*v3 != *a3)
    {
      v7 = (std::__shared_weak_count *)v3[1];
      v80 = v5;
      v81 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      turi::query_eval::optimization_engine::build_node_info(a1, &v80, &v82);
      v10 = v81;
      if (v81)
      {
        v11 = (unint64_t *)&v81->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = a3[1];
      v77 = *a3;
      v78 = (std::__shared_weak_count *)v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      turi::query_eval::optimization_engine::build_node_info(a1, &v77, &v79);
      v16 = v78;
      if (v78)
      {
        v17 = (unint64_t *)&v78->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::vector<std::shared_ptr<turi::query_eval::node_info>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<turi::query_eval::node_info>*>,std::__wrap_iter<std::shared_ptr<turi::query_eval::node_info>*>>((uint64_t *)(v79 + 64), *(_QWORD *)(v79 + 72), *(uint64_t **)(v82 + 64), *(uint64_t **)(v82 + 72), (uint64_t)(*(_QWORD *)(v82 + 72) - *(_QWORD *)(v82 + 64)) >> 4);
      v19 = v82;
      v20 = *(_QWORD *)(v82 + 64);
      v21 = *(_QWORD *)(v82 + 72);
      if (v20 == v21)
        goto LABEL_32;
      do
      {
        v22 = *(_QWORD *)(*(_QWORD *)v20 + 40);
        v23 = *(_QWORD *)(*(_QWORD *)v20 + 48) - v22;
        if (v23)
        {
          v24 = 0;
          v25 = v23 >> 4;
          if ((unint64_t)(v23 >> 4) <= 1)
            v25 = 1;
          while (*(_QWORD *)(v22 + v24) != (_QWORD)v82)
          {
            v24 += 16;
            if (!--v25)
              goto LABEL_28;
          }
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v22 + v24), (uint64_t *)&v79);
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(**(_QWORD **)v20 + 56) + v24), (uint64_t *)v79);
        }
LABEL_28:
        v20 += 16;
      }
      while (v20 != v21);
      v19 = v82;
      v20 = *(_QWORD *)(v82 + 64);
      v26 = *(_QWORD *)(v82 + 72);
      if (v26 == v20)
      {
LABEL_32:
        v27 = v19;
      }
      else
      {
        do
          v26 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v26 - 16);
        while (v26 != v20);
        v27 = v82;
      }
      *(_QWORD *)(v19 + 72) = v20;
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
      v76[0] = v27;
      v76[1] = *((_QWORD *)&v82 + 1);
      if (*((_QWORD *)&v82 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      turi::query_eval::optimization_engine::eliminate_node_and_prune(a1, v76);
      if (v28)
      {
        v31 = (unint64_t *)&v28->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v33 = v79;
      v34 = *(unint64_t **)(v79 + 40);
      v35 = *(unint64_t **)(v79 + 48);
      if (v34 != v35)
      {
        do
        {
          v36 = *v34;
          v37 = (std::__shared_weak_count *)v34[1];
          v74 = *v34;
          v75 = v37;
          if (v37)
          {
            v38 = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
            *(_QWORD *)&v73 = v36;
            *((_QWORD *)&v73 + 1) = v37;
            do
              v40 = __ldxr(v38);
            while (__stxr(v40 + 1, v38));
          }
          else
          {
            v73 = v36;
          }
          if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(v36 + 16)))
            std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)(a1 + 40), &v73);
          v41 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
          if (*((_QWORD *)&v73 + 1))
          {
            v42 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = v75;
          if (v75)
          {
            v45 = (unint64_t *)&v75->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          v34 += 2;
        }
        while (v34 != v35);
        v33 = v79;
      }
      v47 = *(unint64_t **)(v33 + 64);
      v48 = *(unint64_t **)(v33 + 72);
      if (v47 != v48)
      {
        do
        {
          v49 = *v47;
          v50 = (std::__shared_weak_count *)v47[1];
          v74 = *v47;
          v75 = v50;
          if (v50)
          {
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
            *(_QWORD *)&v72 = v49;
            *((_QWORD *)&v72 + 1) = v50;
            do
              v53 = __ldxr(v51);
            while (__stxr(v53 + 1, v51));
          }
          else
          {
            v72 = v49;
          }
          if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(v49 + 16)))
            std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)(a1 + 40), &v72);
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
          if (*((_QWORD *)&v72 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          v57 = v75;
          if (v75)
          {
            v58 = (unint64_t *)&v75->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v47 += 2;
        }
        while (v47 != v48);
        v33 = v79;
      }
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      *(_QWORD *)&v71 = v33;
      *((_QWORD *)&v71 + 1) = *((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(v33 + 16)))
      {
        std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)(a1 + 40), &v71);
        v60 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      }
      if (v60)
      {
        v63 = (unint64_t *)&v60->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
      if (*((_QWORD *)&v82 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
    }
  }
}

void sub_2180F13DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v21 - 64);
  _Unwind_Resume(a1);
}

void turi::query_eval::optimization_engine::build_node_info(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;

  v7 = (uint64_t **)(a1 + 72);
  v6 = *(_QWORD **)(a1 + 72);
  if (!v6)
    goto LABEL_12;
  v8 = *a2;
  v9 = (uint64_t **)(a1 + 72);
  do
  {
    v10 = v6[4];
    v11 = v10 >= v8;
    if (v10 >= v8)
      v12 = v6;
    else
      v12 = v6 + 1;
    if (v11)
      v9 = (uint64_t **)v6;
    v6 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 != v7 && v8 >= (unint64_t)v9[4])
  {
    *(_QWORD *)a3 = v9[6];
    v25 = v9[7];
    *((_QWORD *)a3 + 1) = v25;
    if (v25)
    {
      v26 = (unint64_t *)(v25 + 1);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
LABEL_12:
    std::allocate_shared[abi:ne180100]<turi::query_eval::node_info,std::allocator<turi::query_eval::node_info>,std::shared_ptr<turi::query_eval::planner_node> &,void>(a2, a3);
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)(a1 + 88), a3);
    *(_QWORD *)&v29 = a2;
    v13 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(v7 - 1, (unint64_t *)a2, (uint64_t)&std::piecewise_construct, (uint64_t **)&v29);
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v13 + 6, (uint64_t *)a3);
    std::vector<std::shared_ptr<turi::sframe_rows const>>::resize(*(_QWORD *)a3 + 40, (uint64_t)(*(_QWORD *)(*a2 + 64) - *(_QWORD *)(*a2 + 56)) >> 4);
    v14 = *(_QWORD *)(*a2 + 56);
    if (*(_QWORD *)(*a2 + 64) != v14)
    {
      v15 = 0;
      do
      {
        v16 = *(_OWORD *)(v14 + 16 * v15);
        v28 = v16;
        if (*((_QWORD *)&v16 + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        turi::query_eval::optimization_engine::build_node_info(&v29, a1, &v28);
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * v15, &v29);
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
        if (*((_QWORD *)&v29 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
        if (*((_QWORD *)&v28 + 1))
        {
          v23 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * v15++) + 64), a3);
        v14 = *(_QWORD *)(*a2 + 56);
      }
      while (v15 < (*(_QWORD *)(*a2 + 64) - v14) >> 4);
    }
  }
}

void sub_2180F1670(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::query_eval::optimization_engine::eliminate_node_and_prune(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[3];
  std::__shared_weak_count *v26;

  v2 = *a2;
  *(_BYTE *)(v2 + 89) = 1;
  v3 = *(_QWORD *)(v2 + 48);
  if (*(_QWORD *)(v2 + 40) != v3)
  {
    do
    {
      v6 = *(_QWORD *)(v3 - 16);
      v25[2] = v6;
      v7 = *(std::__shared_weak_count **)(v3 - 8);
      v26 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v2 = *a2;
      }
      *(_QWORD *)(v2 + 48) = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)(v2 + 48) - 16);
      v11 = *(_QWORD **)(v6 + 64);
      v10 = *(_QWORD *)(v6 + 72);
      if (v10 - (_QWORD)v11 == 16)
      {
        if (*v11 == *a2)
        {
          while ((_QWORD *)v10 != v11)
          {
            v10 -= 16;
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v10);
          }
          *(_QWORD *)(v6 + 72) = v11;
          v25[0] = v6;
          v25[1] = v7;
          if (v7)
          {
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
          }
          turi::query_eval::optimization_engine::eliminate_node_and_prune(a1, v25);
          if (v7)
          {
            v14 = (unint64_t *)&v7->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
      }
      else if ((_QWORD *)v10 != v11)
      {
        v16 = (v10 - (uint64_t)v11) >> 4;
        if (v16 <= 1)
          v16 = 1;
        v17 = *(_QWORD *)(v6 + 64);
        while (*v11 != *a2)
        {
          v11 += 2;
          v17 += 16;
          if (!--v16)
            goto LABEL_33;
        }
        v18 = v17;
        if (v11 + 2 != (_QWORD *)v10)
        {
          v19 = 0;
          do
          {
            v20 = &v11[v19];
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)&v11[v19], (__int128 *)&v11[v19 + 2]);
            v19 += 2;
          }
          while (v20 + 4 != (_QWORD *)v10);
          v10 = *(_QWORD *)(v6 + 72);
          v18 = v17 + v19 * 8;
        }
        v21 = (char *)v11 + v18 - v17;
        while ((char *)v10 != v21)
        {
          v10 -= 16;
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v10);
        }
        *(_QWORD *)(v6 + 72) = v21;
      }
LABEL_33:
      v22 = v26;
      if (v26)
      {
        v23 = (unint64_t *)&v26->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v2 = *a2;
      v3 = *(_QWORD *)(*a2 + 48);
    }
    while (*(_QWORD *)(*a2 + 40) != v3);
  }
}

void sub_2180F18B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::make_planner_node@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v8[3];
  const void **v9;
  _QWORD *v10[2];
  int v11;
  void **v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v15[0] = 0;
  v13 = &v14;
  v10[0] = 0;
  v10[1] = 0;
  v9 = (const void **)v10;
  memset(v8, 0, sizeof(v8));
  v11 = 15;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v11, (uint64_t)&v13, &v9, v8, a2);
  v12 = (void **)v8;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v9, v10[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v13, v14);
  v4 = (_QWORD *)a1[1];
  v13 = (_QWORD **)*a1;
  v14 = v4;
  if (v4)
  {
    v5 = v4 + 1;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(*a2 + 56, (uint64_t *)&v13, v15, 1uLL);
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v13);
}

void sub_2180F19DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void turi::query_eval::optimization_engine::run_stage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 16), 0x10uLL);
  v6 = *(char **)(a1 + 16);
  v7 = *(char **)(a1 + 24);
  v8 = v7 - v6;
  if (v7 != v6)
  {
    v9 = 0;
    v10 = v8 >> 2;
    v11 = *(_QWORD *)(**(_QWORD **)a1 + 24 * a2);
    if ((unint64_t)(v8 >> 2) <= 1)
      v10 = 1;
    do
    {
      *(_DWORD *)v6 = *(_QWORD *)(v11 + 24 * SHIDWORD(v9)) != *(_QWORD *)(v11 + 24 * SHIDWORD(v9) + 8);
      v6 += 4;
      v9 += 0x100000000;
      --v10;
    }
    while (v10);
  }
  do
  {
    v30 = (std::__shared_weak_count *)a3[1];
    v37 = *a3;
    v38 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
    }
    turi::query_eval::optimization_engine::_build_active_node_queue((_QWORD *)a1, (uint64_t)&v37);
    if (v30)
    {
      v33 = (unint64_t *)&v30->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v16 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 40) == v16)
      break;
    v12 = 0;
    do
    {
      v37 = *(_QWORD *)(v16 - 16);
      v13 = *(std::__shared_weak_count **)(v16 - 8);
      v38 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        v16 = *(_QWORD *)(a1 + 48);
      }
      *(_QWORD *)(a1 + 48) = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v16 - 16);
      if (!*(_BYTE *)(v37 + 89))
      {
        v20 = *(_QWORD *)(**(_QWORD **)a1 + 24 * a2) + 24 * *(int *)(v37 + 16);
        v21 = *(uint64_t **)v20;
        v22 = *(uint64_t **)(v20 + 8);
        while (v21 != v22)
        {
          v23 = *v21;
          v35 = v37;
          v36 = v38;
          if (v38)
          {
            v24 = (unint64_t *)&v38->__shared_owners_;
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
          v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v23 + 32))(v23, a1, &v35);
          v27 = v36;
          if (v36)
          {
            v28 = (unint64_t *)&v36->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          if ((v26 & 1) != 0)
          {
            v12 = 1;
            break;
          }
          v21 += 2;
        }
      }
      v17 = v38;
      if (v38)
      {
        v18 = (unint64_t *)&v38->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v16 = *(_QWORD *)(a1 + 48);
    }
    while (*(_QWORD *)(a1 + 40) != v16);
  }
  while ((v12 & 1) != 0);
}

void sub_2180F1C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::query_eval::optimization_engine::_build_active_node_queue(_QWORD *a1, uint64_t a2)
{
  uint64_t v5;
  char **v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD **v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42[2];

  v42[1] = *MEMORY[0x24BDAC8D0];
  v7 = a1[5];
  v5 = a1[6];
  v6 = (char **)(a1 + 5);
  while (v5 != v7)
    v5 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v5 - 16);
  a1[6] = v7;
  std::vector<std::shared_ptr<turi::query_eval::node_info const>>::reserve(v6, a1[10]);
  v8 = *(_QWORD **)(a2 + 8);
  v40 = *(uint64_t **)a2;
  v41 = v8;
  if (v8)
  {
    v9 = v8 + 1;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>((uint64_t)v6, (uint64_t *)&v40, v42, 1uLL);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v40);
  v41 = 0;
  v42[0] = 0;
  v40 = (uint64_t *)&v41;
  v11 = (char *)a1[5];
  v12 = (char *)a1[6];
  if (v12 == v11)
  {
    v11 = (char *)a1[6];
    goto LABEL_39;
  }
  v13 = 0;
  do
  {
    v14 = *(_QWORD *)&v11[16 * v13];
    v15 = *(unint64_t **)(v14 + 40);
    v16 = *(unint64_t **)(v14 + 48);
    if (v15 != v16)
    {
      do
      {
        v17 = *v15;
        v18 = v15[1];
        *(_QWORD *)&v39 = *v15;
        *((_QWORD *)&v39 + 1) = v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v21 = v41;
        v22 = &v41;
        if (!v41)
          goto LABEL_24;
        v23 = &v41;
        do
        {
          v24 = v21[4];
          v25 = v24 >= v17;
          if (v24 >= v17)
            v26 = v21;
          else
            v26 = v21 + 1;
          if (v25)
            v23 = (_QWORD **)v21;
          v21 = (_QWORD *)*v26;
        }
        while (*v26);
        v22 = &v41;
        if (v23 == &v41 || (v22 = v23, v23[4] != (_QWORD *)v17))
        {
LABEL_24:
          v38 = v17;
          std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(&v40, v22, &v38, (uint64_t *)&v38);
          std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](v6, &v39);
        }
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
        if (*((_QWORD *)&v39 + 1))
        {
          v28 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *, _QWORD *))v27->__on_zero_shared)(v27, v22);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v15 += 2;
      }
      while (v15 != v16);
      v11 = (char *)a1[5];
      v12 = (char *)a1[6];
    }
    ++v13;
  }
  while (v13 < (v12 - v11) >> 4);
  if (v11 == v12)
  {
    v30 = (uint64_t)v11;
    goto LABEL_47;
  }
  v30 = (uint64_t)v11;
  while (*(_DWORD *)(a1[2] + 4 * *(int *)(*(_QWORD *)v30 + 16)))
  {
    v30 += 16;
    if ((char *)v30 == v12)
      goto LABEL_39;
  }
  if ((char *)v30 == v12)
  {
LABEL_39:
    v30 = (uint64_t)v12;
    goto LABEL_47;
  }
  v31 = (__int128 *)(v30 + 16);
  if ((char *)(v30 + 16) != v12)
  {
    do
    {
      if (*(_DWORD *)(a1[2] + 4 * *(int *)(*(_QWORD *)v31 + 16)))
      {
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v30, v31);
        v30 += 16;
      }
      ++v31;
    }
    while (v31 != (__int128 *)v12);
    v11 = *v6;
  }
LABEL_47:
  std::vector<std::shared_ptr<turi::sframe_rows const>>::resize((uint64_t)v6, (v30 - (uint64_t)v11) >> 4);
  v32 = (uint64_t *)a1[5];
  v33 = (uint64_t *)a1[6];
  v34 = v33 - 2;
  if (v32 != v33 && v34 > v32)
  {
    do
    {
      v36 = *v32;
      *v32 = *v34;
      *v34 = v36;
      v37 = v32[1];
      v32[1] = v34[1];
      v34[1] = v37;
      v32 += 2;
      v34 -= 2;
    }
    while (v32 < v34);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v40, v41);
}

void sub_2180F1F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<turi::query_eval::node_info const>>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[16 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

void turi::query_eval::optimization_engine::release_node(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *a2;
  v5 = *(_QWORD *)(*a2 + 40);
  v4 = *(_QWORD *)(*a2 + 48);
  v6 = (_QWORD *)*a2;
  if (v4 != v5)
  {
    do
      v4 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v4 - 16);
    while (v4 != v5);
    v6 = (_QWORD *)*a2;
  }
  *(_QWORD *)(v3 + 48) = v5;
  v8 = v6[8];
  v7 = v6[9];
  v9 = v6;
  if (v7 != v8)
  {
    do
      v7 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v7 - 16);
    while (v7 != v8);
    v9 = (_QWORD *)*a2;
  }
  v6[9] = v8;
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](v9);
}

void turi::query_eval::optimization_engine::~optimization_engine(turi::query_eval::optimization_engine *this)
{
  uint64_t *v2;
  void **v3;
  uint64_t *v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  void **v8;

  v2 = (uint64_t *)*((_QWORD *)this + 11);
  v4 = (uint64_t *)*((_QWORD *)this + 12);
  v3 = (void **)((char *)this + 88);
  while (v2 != v4)
  {
    turi::query_eval::optimization_engine::release_node((uint64_t)this, v2);
    v2 += 2;
  }
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  *((_QWORD *)this + 8) = (char *)this + 72;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  v6 = *((_QWORD *)this + 11);
  for (i = *((_QWORD *)this + 12); i != v6; i = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *((_QWORD *)this + 12) = v6;
  v8 = v3;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  v8 = (void **)((char *)this + 40);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 3) = v7;
    operator delete(v7);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void sub_2180F230C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::query_eval::optimization_transform_registry const>::reset[abi:ne180100]<turi::query_eval::optimization_transform_registry,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::query_eval::optimization_transform_registry const>::shared_ptr[abi:ne180100]<turi::query_eval::optimization_transform_registry,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::shared_ptr<turi::query_eval::optimization_transform_registry const>::shared_ptr[abi:ne180100]<turi::query_eval::optimization_transform_registry,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  void **v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D92E280;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  std::unique_ptr<turi::query_eval::optimization_transform_registry>::reset[abi:ne180100](&v6, 0);
  return a1;
}

void sub_2180F2484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<turi::query_eval::optimization_transform_registry>::reset[abi:ne180100]((void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<turi::query_eval::optimization_transform_registry *,std::shared_ptr<turi::query_eval::optimization_transform_registry const>::__shared_ptr_default_delete<turi::query_eval::optimization_transform_registry const,turi::query_eval::optimization_transform_registry>,std::allocator<turi::query_eval::optimization_transform_registry>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<turi::query_eval::optimization_transform_registry>::operator()[abi:ne180100](a1 + 24, *(void ***)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::query_eval::optimization_transform_registry *,std::shared_ptr<turi::query_eval::optimization_transform_registry const>::__shared_ptr_default_delete<turi::query_eval::optimization_transform_registry const,turi::query_eval::optimization_transform_registry>,std::allocator<turi::query_eval::optimization_transform_registry>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<turi::query_eval::optimization_transform_registry>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = a2;
    std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x219A19A08](a2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***std::unique_ptr<turi::query_eval::optimization_transform_registry>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x219A19A08](v2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::~__split_buffer(&v15);
  }
}

void sub_2180F2740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::~__split_buffer(&v15);
  }
}

void sub_2180F2AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<std::shared_ptr<turi::query_eval::node_info>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<turi::query_eval::node_info>*>,std::__wrap_iter<std::shared_ptr<turi::query_eval::node_info>*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v33[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v33[4] = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v33[0] = v18;
    v33[1] = v26;
    v33[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v33[2] = v27;
    v5 = (_QWORD *)std::vector<std::shared_ptr<turi::query_eval::node_info>>::__swap_out_circular_buffer(a1, v33, v5);
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)v33);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    std::vector<std::shared_ptr<turi::query_eval::node_info>>::__move_range((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v31 = v5;
      do
      {
        std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v31, a3);
        a3 += 2;
        v31 += 2;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_2180F2DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<turi::query_eval::node_info>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<turi::query_eval::node_info>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::node_info,std::allocator<turi::query_eval::node_info>,std::shared_ptr<turi::query_eval::planner_node> &,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::node_info>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node> &,std::allocator<turi::query_eval::node_info>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2180F2F58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::node_info>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node> &,std::allocator<turi::query_eval::node_info>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D92E2F8;
  a1[1] = 0;
  std::allocator<turi::query_eval::node_info>::construct[abi:ne180100]<turi::query_eval::node_info,std::shared_ptr<turi::query_eval::planner_node> &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2180F2FB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::node_info>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E2F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::node_info>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E2F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::node_info>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<turi::query_eval::node_info>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

void std::allocator<turi::query_eval::node_info>::construct[abi:ne180100]<turi::query_eval::node_info,std::shared_ptr<turi::query_eval::planner_node> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a3[1];
  v9 = *a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  turi::query_eval::node_info::node_info(a2, (uint64_t)&v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2180F30C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::node_info::node_info(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = *(_DWORD **)a1;
  }
  *(_DWORD *)(a1 + 16) = *v3;
  *(_QWORD *)(a1 + 24) = turi::query_eval::planner_node_type_to_attributes();
  *(_QWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_WORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = -1;
  return a1;
}

void sub_2180F3144(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<turi::query_eval::node_info>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v4;

  v4 = (void **)(a2 + 64);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a2 + 40);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2);
}

uint64_t *__cxx_global_var_init_6_2()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

void __cxx_global_var_init_7_3()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t *__cxx_global_var_init_8_1()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_9_2()
{
  uint64_t *result;

  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_10_2()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_11_2()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_12_1()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_optimization_engine_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::query_eval::get_stages_to_run@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  _QWORD *result;
  char *v5;

  v3 = *(unsigned __int8 *)(a1 + 41);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3)
  {
    result = operator new(0x28uLL);
    *a2 = result;
    v5 = (char *)(result + 5);
    a2[2] = result + 5;
    result[4] = 6;
    *(_OWORD *)result = xmmword_2186DACB8;
    *((_OWORD *)result + 1) = unk_2186DACC8;
  }
  else
  {
    result = operator new(0x38uLL);
    *a2 = result;
    v5 = (char *)(result + 7);
    a2[2] = result + 7;
    result[6] = 6;
    *(_OWORD *)result = xmmword_2186DACE0;
    *((_OWORD *)result + 1) = unk_2186DACF0;
    *((_OWORD *)result + 2) = xmmword_2186DAD00;
  }
  a2[1] = v5;
  return result;
}

void turi::query_eval::populate_transforms(turi::query_eval *this, turi::query_eval::optimization_transform_registry *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t *v80;
  _QWORD *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  _QWORD *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  _QWORD *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t *v112;
  _QWORD *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t *v120;
  _QWORD *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t *v128;
  _QWORD *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t *v144;
  _QWORD *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t *v152;
  _QWORD *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t *v160;
  _QWORD *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t *v168;
  _QWORD *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  __int128 v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;

  turi::query_eval::optimization_transform_registry::set_num_stages(this, 7uLL);
  v3 = (uint64_t *)operator new(8uLL);
  *v3 = 0;
  v201 = v3 + 1;
  v202 = v3 + 1;
  v200 = v3;
  v4 = operator new(0x20uLL);
  v4[2] = 0;
  *v4 = &unk_24D92E3C0;
  v4[1] = 0;
  v4[3] = &unk_24D92E410;
  *(_QWORD *)&v199 = v4 + 3;
  *((_QWORD *)&v199 + 1) = v4;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v199);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
  if (*((_QWORD *)&v199 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v8 = (char *)operator new(0x20uLL);
  v201 = (uint64_t *)(v8 + 32);
  v202 = (uint64_t *)(v8 + 32);
  *(_OWORD *)v8 = xmmword_2186DAD18;
  *((_OWORD *)v8 + 1) = unk_2186DAD28;
  v200 = (uint64_t *)v8;
  v9 = operator new(0x20uLL);
  v9[2] = 0;
  *v9 = &unk_24D92E470;
  v9[1] = 0;
  v9[3] = &unk_24D92E4C0;
  *(_QWORD *)&v196 = v9 + 3;
  *((_QWORD *)&v196 + 1) = v9;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v196);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
  if (*((_QWORD *)&v196 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v198;
  if (v198)
  {
    p_shared_owners = (unint64_t *)&v198->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v16 = (uint64_t *)operator new(0x18uLL);
  v201 = v16 + 3;
  v202 = v16 + 3;
  v16[2] = 3;
  *(_OWORD *)v16 = xmmword_2186DAD38;
  v200 = v16;
  v17 = operator new(0x20uLL);
  v17[2] = 0;
  *v17 = &unk_24D92E528;
  v17[1] = 0;
  v17[3] = &unk_24D92E578;
  *(_QWORD *)&v195 = v17 + 3;
  *((_QWORD *)&v195 + 1) = v17;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v195);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
  if (*((_QWORD *)&v195 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v198;
  if (v198)
  {
    v22 = (unint64_t *)&v198->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v24 = (uint64_t *)operator new(0x18uLL);
  v201 = v24 + 3;
  v202 = v24 + 3;
  v24[2] = 3;
  *(_OWORD *)v24 = xmmword_2186DAD38;
  v200 = v24;
  v25 = operator new(0x20uLL);
  v25[2] = 0;
  *v25 = &unk_24D92E5C8;
  v25[1] = 0;
  v25[3] = &unk_24D92E618;
  *(_QWORD *)&v194 = v25 + 3;
  *((_QWORD *)&v194 + 1) = v25;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v194);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
  if (*((_QWORD *)&v194 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v198;
  if (v198)
  {
    v30 = (unint64_t *)&v198->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v32 = (uint64_t *)operator new(0x18uLL);
  v201 = v32 + 3;
  v202 = v32 + 3;
  v32[2] = 3;
  *(_OWORD *)v32 = xmmword_2186DAD38;
  v200 = v32;
  v33 = operator new(0x20uLL);
  v33[2] = 0;
  *v33 = &unk_24D92E710;
  v33[1] = 0;
  v33[3] = &unk_24D92E760;
  *(_QWORD *)&v193 = v33 + 3;
  *((_QWORD *)&v193 + 1) = v33;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v193);
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
  if (*((_QWORD *)&v193 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v198;
  if (v198)
  {
    v38 = (unint64_t *)&v198->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v40 = (uint64_t *)operator new(0x18uLL);
  v201 = v40 + 3;
  v202 = v40 + 3;
  v40[2] = 3;
  *(_OWORD *)v40 = xmmword_2186DAD38;
  v200 = v40;
  v41 = operator new(0x20uLL);
  v41[2] = 0;
  *v41 = &unk_24D92E7B0;
  v41[1] = 0;
  v41[3] = &unk_24D92E800;
  *(_QWORD *)&v192 = v41 + 3;
  *((_QWORD *)&v192 + 1) = v41;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v192);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  if (*((_QWORD *)&v192 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v198;
  if (v198)
  {
    v46 = (unint64_t *)&v198->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v48 = (uint64_t *)operator new(0x18uLL);
  v201 = v48 + 3;
  v202 = v48 + 3;
  v48[2] = 3;
  *(_OWORD *)v48 = xmmword_2186DAD38;
  v200 = v48;
  v49 = operator new(0x20uLL);
  v49[2] = 0;
  *v49 = &unk_24D92E850;
  v49[1] = 0;
  v49[3] = &unk_24D92E8A0;
  *(_QWORD *)&v191 = v49 + 3;
  *((_QWORD *)&v191 + 1) = v49;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v191);
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
  if (*((_QWORD *)&v191 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v198;
  if (v198)
  {
    v54 = (unint64_t *)&v198->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v56 = (uint64_t *)operator new(0x18uLL);
  v201 = v56 + 3;
  v202 = v56 + 3;
  v56[2] = 3;
  *(_OWORD *)v56 = xmmword_2186DAD38;
  v200 = v56;
  v57 = operator new(0x20uLL);
  v57[2] = 0;
  *v57 = &unk_24D92E928;
  v57[1] = 0;
  v57[3] = &unk_24D92E978;
  *(_QWORD *)&v190 = v57 + 3;
  *((_QWORD *)&v190 + 1) = v57;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v190);
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
  if (*((_QWORD *)&v190 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v198;
  if (v198)
  {
    v62 = (unint64_t *)&v198->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v64 = (uint64_t *)operator new(0x18uLL);
  v201 = v64 + 3;
  v202 = v64 + 3;
  v64[2] = 3;
  *(_OWORD *)v64 = xmmword_2186DAD38;
  v200 = v64;
  v65 = operator new(0x20uLL);
  v65[2] = 0;
  *v65 = &unk_24D92E9C8;
  v65[1] = 0;
  v65[3] = &unk_24D92EA18;
  *(_QWORD *)&v189 = v65 + 3;
  *((_QWORD *)&v189 + 1) = v65;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v189);
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
  if (*((_QWORD *)&v189 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v198;
  if (v198)
  {
    v70 = (unint64_t *)&v198->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v72 = (uint64_t *)operator new(0x18uLL);
  v201 = v72 + 3;
  v202 = v72 + 3;
  v72[2] = 3;
  *(_OWORD *)v72 = xmmword_2186DAD38;
  v200 = v72;
  v73 = operator new(0x20uLL);
  v73[2] = 0;
  *v73 = &unk_24D92EA68;
  v73[1] = 0;
  v73[3] = &unk_24D92EAB8;
  *(_QWORD *)&v188 = v73 + 3;
  *((_QWORD *)&v188 + 1) = v73;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v188);
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
  if (*((_QWORD *)&v188 + 1))
  {
    v75 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v198;
  if (v198)
  {
    v78 = (unint64_t *)&v198->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v80 = (uint64_t *)operator new(0x18uLL);
  v201 = v80 + 3;
  v202 = v80 + 3;
  v80[2] = 3;
  *(_OWORD *)v80 = xmmword_2186DAD38;
  v200 = v80;
  v81 = operator new(0x20uLL);
  v81[2] = 0;
  *v81 = &unk_24D92EB08;
  v81[1] = 0;
  v81[3] = &unk_24D92EB58;
  *(_QWORD *)&v187 = v81 + 3;
  *((_QWORD *)&v187 + 1) = v81;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v187);
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
  if (*((_QWORD *)&v187 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v198;
  if (v198)
  {
    v86 = (unint64_t *)&v198->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v88 = (uint64_t *)operator new(0x18uLL);
  v201 = v88 + 3;
  v202 = v88 + 3;
  v88[2] = 3;
  *(_OWORD *)v88 = xmmword_2186DAD38;
  v200 = v88;
  v89 = operator new(0x20uLL);
  v89[2] = 0;
  *v89 = &unk_24D92EBA8;
  v89[1] = 0;
  v89[3] = &unk_24D92EBF8;
  *(_QWORD *)&v186 = v89 + 3;
  *((_QWORD *)&v186 + 1) = v89;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v186);
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v198;
  if (v198)
  {
    v94 = (unint64_t *)&v198->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v96 = (uint64_t *)operator new(0x18uLL);
  v201 = v96 + 3;
  v202 = v96 + 3;
  v96[2] = 3;
  *(_OWORD *)v96 = xmmword_2186DAD38;
  v200 = v96;
  v97 = operator new(0x20uLL);
  v97[2] = 0;
  *v97 = &unk_24D92EC48;
  v97[1] = 0;
  v97[3] = &unk_24D92EC98;
  *(_QWORD *)&v185 = v97 + 3;
  *((_QWORD *)&v185 + 1) = v97;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v185);
  v98 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  if (*((_QWORD *)&v185 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v198;
  if (v198)
  {
    v102 = (unint64_t *)&v198->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v104 = (uint64_t *)operator new(8uLL);
  *v104 = 2;
  v201 = v104 + 1;
  v202 = v104 + 1;
  v200 = v104;
  v105 = operator new(0x20uLL);
  v105[2] = 0;
  *v105 = &unk_24D92ECE8;
  v105[1] = 0;
  v105[3] = &unk_24D92ED38;
  *(_QWORD *)&v184 = v105 + 3;
  *((_QWORD *)&v184 + 1) = v105;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v184);
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v198;
  if (v198)
  {
    v110 = (unint64_t *)&v198->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v112 = (uint64_t *)operator new(8uLL);
  *v112 = 2;
  v201 = v112 + 1;
  v202 = v112 + 1;
  v200 = v112;
  v113 = operator new(0x20uLL);
  v113[2] = 0;
  *v113 = &unk_24D92ED88;
  v113[1] = 0;
  v113[3] = &unk_24D92EDD8;
  *(_QWORD *)&v183 = v113 + 3;
  *((_QWORD *)&v183 + 1) = v113;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v183);
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
  if (*((_QWORD *)&v183 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v198;
  if (v198)
  {
    v118 = (unint64_t *)&v198->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v120 = (uint64_t *)operator new(0x10uLL);
  *(_OWORD *)v120 = xmmword_2186DC0A0;
  v201 = v120 + 2;
  v202 = v120 + 2;
  v200 = v120;
  v121 = operator new(0x20uLL);
  v121[2] = 0;
  *v121 = &unk_24D92EE40;
  v121[1] = 0;
  v121[3] = &unk_24D92EE90;
  *(_QWORD *)&v182 = v121 + 3;
  *((_QWORD *)&v182 + 1) = v121;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v182);
  v122 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
  if (*((_QWORD *)&v182 + 1))
  {
    v123 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v198;
  if (v198)
  {
    v126 = (unint64_t *)&v198->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v128 = (uint64_t *)operator new(8uLL);
  *v128 = 3;
  v201 = v128 + 1;
  v202 = v128 + 1;
  v200 = v128;
  v129 = operator new(0x20uLL);
  v129[2] = 0;
  *v129 = &unk_24D92EEE0;
  v129[1] = 0;
  v129[3] = &unk_24D92EF30;
  *(_QWORD *)&v181 = v129 + 3;
  *((_QWORD *)&v181 + 1) = v129;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v181);
  v130 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
  if (*((_QWORD *)&v181 + 1))
  {
    v131 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v198;
  if (v198)
  {
    v134 = (unint64_t *)&v198->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v136 = (uint64_t *)operator new(8uLL);
  *v136 = 4;
  v201 = v136 + 1;
  v202 = v136 + 1;
  v200 = v136;
  v137 = operator new(0x20uLL);
  v137[2] = 0;
  *v137 = &unk_24D92EF80;
  v137[1] = 0;
  v137[3] = &unk_24D92EFD0;
  *(_QWORD *)&v180 = v137 + 3;
  *((_QWORD *)&v180 + 1) = v137;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v180);
  v138 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
  if (*((_QWORD *)&v180 + 1))
  {
    v139 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = v198;
  if (v198)
  {
    v142 = (unint64_t *)&v198->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v144 = (uint64_t *)operator new(8uLL);
  *v144 = 5;
  v201 = v144 + 1;
  v202 = v144 + 1;
  v200 = v144;
  v145 = operator new(0x20uLL);
  v145[2] = 0;
  *v145 = &unk_24D92F020;
  v145[1] = 0;
  v145[3] = &unk_24D92F070;
  *(_QWORD *)&v179 = v145 + 3;
  *((_QWORD *)&v179 + 1) = v145;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v179);
  v146 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
  if (*((_QWORD *)&v179 + 1))
  {
    v147 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = v198;
  if (v198)
  {
    v150 = (unint64_t *)&v198->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v152 = (uint64_t *)operator new(8uLL);
  *v152 = 5;
  v201 = v152 + 1;
  v202 = v152 + 1;
  v200 = v152;
  v153 = operator new(0x20uLL);
  v153[2] = 0;
  *v153 = &unk_24D92F0C0;
  v153[1] = 0;
  v153[3] = &unk_24D92F110;
  *(_QWORD *)&v178 = v153 + 3;
  *((_QWORD *)&v178 + 1) = v153;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v178);
  v154 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
  if (*((_QWORD *)&v178 + 1))
  {
    v155 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = v198;
  if (v198)
  {
    v158 = (unint64_t *)&v198->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v160 = (uint64_t *)operator new(8uLL);
  *v160 = 5;
  v201 = v160 + 1;
  v202 = v160 + 1;
  v200 = v160;
  v161 = operator new(0x20uLL);
  v161[2] = 0;
  *v161 = &unk_24D92F160;
  v161[1] = 0;
  v161[3] = &unk_24D92F1B0;
  *(_QWORD *)&v177 = v161 + 3;
  *((_QWORD *)&v177 + 1) = v161;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v177);
  v162 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
  if (*((_QWORD *)&v177 + 1))
  {
    v163 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = v198;
  if (v198)
  {
    v166 = (unint64_t *)&v198->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v168 = (uint64_t *)operator new(8uLL);
  *v168 = 6;
  v201 = v168 + 1;
  v202 = v168 + 1;
  v200 = v168;
  v169 = operator new(0x20uLL);
  v169[2] = 0;
  *v169 = &unk_24D92F200;
  v169[1] = 0;
  v169[3] = &unk_24D92F250;
  *(_QWORD *)&v176 = v169 + 3;
  *((_QWORD *)&v176 + 1) = v169;
  v197 = 0;
  v198 = 0;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v200, &v176);
  v170 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  if (*((_QWORD *)&v176 + 1))
  {
    v171 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = v198;
  if (v198)
  {
    v174 = (unint64_t *)&v198->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
}

void sub_2180F48A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v6;
  va_list va;

  va_start(va, a4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v4 - 88);
  v6 = *(void **)(v4 - 56);
  if (v6)
  {
    *(_QWORD *)(v4 - 48) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void sub_2180F4CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

uint64_t *turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::registry_type::registry_type(uint64_t *a1)
{
  int v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *global_registry;
  uint64_t *v10[2];
  unsigned __int8 v11;

  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(0x80000002186DAF00 & 0x7FFFFFFFFFFFFFFFLL));
  v2 = (char)v11;
  v3 = v10[0];
  v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (uint64_t **)v10[0];
  if ((v11 & 0x80u) == 0)
    v4 = v11;
  if (v4)
  {
    v6 = 0;
    do
    {
      v7 = *(char *)v5;
      v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0)
    operator delete(v3);
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::deserialize;
  return a1;
}

_QWORD *turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::deserialize(turi::iarchive **a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::holder(v2, a1);
  return v2;
}

void sub_2180F4EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

_QWORD *turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::holder(_QWORD *a1, turi::iarchive **a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = &unk_24D92E358;
  a1[2] = 0;
  v4 = a1 + 2;
  a1[1] = a1 + 2;
  v5 = a1 + 1;
  a1[3] = 0;
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy((uint64_t)(a1 + 1), 0);
  *v5 = v4;
  a1[3] = 0;
  *v4 = 0;
  turi::deserialize_iterator<turi::iarchive_soft_fail,std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::insert_iterator<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>(a2, (uint64_t)v5, (uint64_t)v4);
  return a1;
}

void sub_2180F4F64(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::~holder(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D92E358;
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::~holder(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D92E358;
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x219A19A08);
}

void *turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::type()
{
}

_QWORD *turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_24D92E358;
  std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>::map[abi:ne180100](v2 + 1, a1 + 8);
  return v2;
}

void sub_2180F505C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::deserializer_id()
{
  return turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::registry;
}

uint64_t **turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::deep_op_equal(uint64_t **result, uint64_t a2)
{
  if (result != (uint64_t **)a2)
    return std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>(result + 1, *(_QWORD **)(a2 + 8), (_QWORD *)(a2 + 16));
  return result;
}

void turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::save(uint64_t a1, turi::oarchive **a2)
{
  turi::oarchive *v4;
  unint64_t v5;
  char *v6;
  size_t v7;
  char **v8;
  size_t v9;
  BOOL v10;
  std::vector<char>::size_type v11;

  v4 = *a2;
  if (*(_QWORD *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *((_QWORD *)v4 + 5);
    if (*((_QWORD *)v4 + 4) + 8 > v5)
    {
      v7 = 2 * v5 + 16;
      *((_QWORD *)v4 + 5) = v7;
      v8 = (char **)*((_QWORD *)v4 + 2);
      if (v8)
      {
        v6 = *v8;
        v9 = v8[1] - *v8;
        v10 = v7 >= v9;
        v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*((std::vector<char> **)v4 + 2), v11);
          v6 = (char *)**((_QWORD **)v4 + 2);
        }
        else if (!v10)
        {
          v8[1] = &v6[v7];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*((void **)v4 + 3), v7, 0xF6EA6B1uLL);
      }
      *((_QWORD *)v4 + 3) = v6;
    }
    else
    {
      v6 = (char *)*((_QWORD *)v4 + 3);
    }
    *(_QWORD *)&v6[*((_QWORD *)v4 + 4)] = turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::registry;
    *((_QWORD *)v4 + 4) += 8;
  }
  turi::serialize_iterator<turi::oarchive_soft_fail,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>>(a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

_QWORD *turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::print(uint64_t a1, _QWORD *a2)
{
  turi::operator<<<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>(a2, (_QWORD *)(a1 + 8));
  return a2;
}

void turi::deserialize_iterator<turi::iarchive_soft_fail,std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::insert_iterator<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>(turi::iarchive **a1, uint64_t a2, uint64_t a3)
{
  turi::iarchive *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17[2];
  std::__shared_weak_count *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  _QWORD v23[2];

  v23[0] = a2;
  v23[1] = a3;
  v22 = 0;
  v4 = *a1;
  v5 = *((_QWORD *)*a1 + 2);
  if (v5)
  {
    v6 = *((_QWORD *)v4 + 3);
    v7 = *(_QWORD *)(v5 + v6);
    v22 = v7;
    *((_QWORD *)v4 + 3) = v6 + 8;
    if (v7)
    {
      v8 = 0;
      do
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        turi::archive_detail::deserialize_impl<turi::iarchive_soft_fail,std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,false,void>::exec(a1, &v19);
        v17[0] = v19;
        v17[1] = v20;
        v18 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        std::insert_iterator<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::operator=[abi:ne180100]((uint64_t)v23, v17);
        v11 = v18;
        if (v18)
        {
          v12 = (unint64_t *)&v18->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v14 = v21;
        if (v21)
        {
          v15 = (unint64_t *)&v21->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        ++v8;
      }
      while (v8 < v22);
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_2180F5324(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(a1, a2[1]);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

uint64_t std::insert_iterator<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::operator=[abi:ne180100](uint64_t a1, unint64_t *a2)
{
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  v3 = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>>>(*(uint64_t ***)a1, *(_QWORD **)(a1 + 8), a2, (uint64_t)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (char *)*((_QWORD *)v3 + 1);
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = *(char **)v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (char *)*((_QWORD *)v3 + 2);
      v6 = *(_QWORD *)v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void turi::archive_detail::deserialize_impl<turi::iarchive_soft_fail,std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,false,void>::exec(turi::iarchive **a1, _QWORD *a2)
{
  turi::iarchive *v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *((_QWORD *)*a1 + 2);
  if (v5)
  {
    *a2 = *(_QWORD *)(v5 + *((_QWORD *)v4 + 3));
    *((_QWORD *)v4 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  turi::archive_detail::deserialize_impl<turi::iarchive_soft_fail,std::shared_ptr<turi::sarray<turi::flexible_type>>,false,void>::exec(a1, a2 + 1);
}

char *std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>>>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t a4)
{
  void **v6;
  char *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (void **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v13, &v12, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x38uLL);
    v10[1] = a1 + 1;
    *((_QWORD *)v7 + 4) = *(_QWORD *)a4;
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v11 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v13, v8, (uint64_t *)v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

uint64_t *std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_2180F5590(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>> const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v17, &v16, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x38uLL);
    v14[1] = a1 + 1;
    v9 = a4[1];
    v7[4] = *a4;
    v7[5] = v9;
    v10 = a4[2];
    v7[6] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v15 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v17, v8, v7);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
  }
  return v7;
}

uint64_t **std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v8 + 5, v9 + 5);
          std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__node_insert_multi(v5, v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_multi<std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>> const&>(v5, a2 + 4);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_2180F5850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

uint64_t std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_multi<std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>> const&>(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  _QWORD v14[2];
  char v15;

  v4 = a1 + 1;
  v5 = (uint64_t *)operator new(0x38uLL);
  v6 = v5;
  v14[0] = v5;
  v14[1] = v4;
  v7 = a2[1];
  v5[4] = *a2;
  v5[5] = v7;
  v8 = a2[2];
  v5[6] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v15 = 1;
  v11 = *v4;
  v12 = v4;
  if (*v4)
  {
    do
    {
      while (1)
      {
        v4 = (uint64_t **)v11;
        if (v5[4] >= (unint64_t)v11[4])
          break;
        v11 = (uint64_t *)*v11;
        v12 = v4;
        if (!*v4)
          goto LABEL_10;
      }
      v11 = (uint64_t *)v11[1];
    }
    while (v11);
    v12 = v4 + 1;
  }
LABEL_10:
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v4, v12, v5);
  v14[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
  return v6;
}

void turi::serialize_iterator<turi::oarchive_soft_fail,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>>(turi::oarchive **a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  turi::oarchive *v7;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  size_t v15;
  char **v16;
  size_t v17;
  BOOL v18;
  std::vector<char>::size_type v19;

  v7 = *a1;
  if (*(_QWORD *)*a1)
  {
    std::ostream::write();
  }
  else
  {
    v9 = *((_QWORD *)v7 + 5);
    if (*((_QWORD *)v7 + 4) + 8 > v9)
    {
      v15 = 2 * v9 + 16;
      *((_QWORD *)v7 + 5) = v15;
      v16 = (char **)*((_QWORD *)v7 + 2);
      if (v16)
      {
        v10 = *v16;
        v17 = v16[1] - *v16;
        v18 = v15 >= v17;
        v19 = v15 - v17;
        if (v19 != 0 && v18)
        {
          std::vector<char>::__append(*((std::vector<char> **)v7 + 2), v19);
          v10 = (char *)**((_QWORD **)v7 + 2);
        }
        else if (!v18)
        {
          v16[1] = &v10[v15];
        }
      }
      else
      {
        v10 = (char *)malloc_type_realloc(*((void **)v7 + 3), v15, 0xF6EA6B1uLL);
      }
      *((_QWORD *)v7 + 3) = v10;
    }
    else
    {
      v10 = (char *)*((_QWORD *)v7 + 3);
    }
    *(_QWORD *)&v10[*((_QWORD *)v7 + 4)] = a4;
    *((_QWORD *)v7 + 4) += 8;
  }
  if (a2 == a3)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      turi::archive_detail::serialize_impl<turi::oarchive_soft_fail,std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>>,false,void>::exec(a1, a2 + 4);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v14 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v14);
      }
      ++v11;
      a2 = v13;
    }
    while (v13 != a3);
  }
  if (v11 != a4)
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
}

void turi::archive_detail::serialize_impl<turi::oarchive_soft_fail,std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>>,false,void>::exec(turi::oarchive **a1, _QWORD *a2)
{
  turi::oarchive *v4;
  unint64_t v5;
  char *v6;
  size_t v7;
  char **v8;
  size_t v9;
  BOOL v10;
  std::vector<char>::size_type v11;

  v4 = *a1;
  if (*(_QWORD *)*a1)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *((_QWORD *)v4 + 5);
    if (*((_QWORD *)v4 + 4) + 8 > v5)
    {
      v7 = 2 * v5 + 16;
      *((_QWORD *)v4 + 5) = v7;
      v8 = (char **)*((_QWORD *)v4 + 2);
      if (v8)
      {
        v6 = *v8;
        v9 = v8[1] - *v8;
        v10 = v7 >= v9;
        v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*((std::vector<char> **)v4 + 2), v11);
          v6 = (char *)**((_QWORD **)v4 + 2);
        }
        else if (!v10)
        {
          v8[1] = &v6[v7];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*((void **)v4 + 3), v7, 0xF6EA6B1uLL);
      }
      *((_QWORD *)v4 + 3) = v6;
    }
    else
    {
      v6 = (char *)*((_QWORD *)v4 + 3);
    }
    *(_QWORD *)&v6[*((_QWORD *)v4 + 4)] = *a2;
    *((_QWORD *)v4 + 4) += 8;
  }
  turi::archive_detail::serialize_impl<turi::oarchive_soft_fail,std::shared_ptr<turi::sarray<turi::flexible_type>>,false,void>::exec(a1, a2 + 1);
}

_QWORD *turi::operator<<<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    while (1)
    {
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"-->", 3);
      std::ostream::operator<<();
      v8 = (_QWORD *)v5[1];
      v9 = v5;
      if (v8)
      {
        do
        {
          v5 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v9[2];
          v10 = *v5 == (_QWORD)v9;
          v9 = v5;
        }
        while (!v10);
      }
      if (v5 == v4)
        break;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

void std::__shared_ptr_emplace<turi::query_eval::opt_expand_generalized_union_project>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E3C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_expand_generalized_union_project>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E3C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_expand_generalized_union_project>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_expand_generalized_union_project::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "gen_union_proj(...) -> project(union(...), ...)");
}

BOOL turi::query_eval::opt_expand_generalized_union_project::transform_applies(uint64_t a1, int a2)
{
  return a2 == 12;
}

uint64_t turi::query_eval::opt_expand_generalized_union_project::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t size;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  std::runtime_error *v51;
  std::string *v52;
  __int128 v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t *v83;
  std::__shared_weak_count *v84;
  __int128 v85;
  void *v86[3];
  void *v87[3];
  uint64_t v88;
  unsigned int *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  std::string __p;
  std::string::size_type v94;
  void *v95;
  void *v96;
  std::string v97;
  size_t __idx[2];

  std::vector<unsigned long>::vector(v87, ((*a3)[6] - (*a3)[5]) >> 4);
  v5 = *a3;
  v6 = (*a3)[5];
  if ((*a3)[6] != v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      *((_QWORD *)v87[0] + v8) = v9;
      v9 += turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(v6 + v7));
      ++v8;
      v5 = *a3;
      v6 = (*a3)[5];
      v7 += 16;
    }
    while (v8 < ((*a3)[6] - v6) >> 4);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
  v10 = *(_QWORD *)turi::query_eval::node_info::p(v5, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = a2;
  std::vector<unsigned long>::vector(v86, (uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 5);
  v11 = *(_QWORD *)(v10 + 8);
  if (*(_QWORD *)(v10 + 16) != v11)
  {
    v12 = 0;
    while (2)
    {
      v13 = v11 + 32 * v12;
      size = 0;
      switch(*(_BYTE *)(v13 + 12))
      {
        case 0:
          size = *(_QWORD *)v13;
          goto LABEL_36;
        case 1:
          size = (uint64_t)*(double *)v13;
          goto LABEL_36;
        case 2:
          v18 = *(_QWORD *)v13;
          v19 = (char **)(*(_QWORD *)v13 + 8);
          __idx[0] = 0;
          v20 = (char *)v19;
          if (*(char *)(v18 + 31) < 0)
            v20 = *v19;
          std::string::basic_string[abi:ne180100]<0>(&__p, v20);
          size = std::stoll(&__p, __idx, 10);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (*(char *)(v18 + 31) < 0)
            v21 = *(_QWORD *)(v18 + 16);
          else
            v21 = *(unsigned __int8 *)(v18 + 31);
          if (__idx[0] != v21)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v78 = std::string::append(&v97, " cannot be interpreted as an integer");
            v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v79;
            v78->__r_.__value_.__l.__size_ = 0;
            v78->__r_.__value_.__r.__words[2] = 0;
            v78->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__p);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_36;
        case 3:
          v15 = *(_QWORD *)v13;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v15 + 8), *(_QWORD *)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_35;
        case 4:
          v22 = *(_QWORD *)v13;
          memset(&__p, 0, sizeof(__p));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v22 + 8), *(uint64_t **)(v22 + 16), (uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
          goto LABEL_35;
        case 5:
          v23 = *(_QWORD *)v13;
          memset(&__p, 0, sizeof(__p));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v23 + 8), *(uint64_t **)(v23 + 16), (uint64_t)(*(_QWORD *)(v23 + 16) - *(_QWORD *)(v23 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
          goto LABEL_35;
        case 6:
          size = (uint64_t)(*(_QWORD *)v13 << 8) >> 8;
          goto LABEL_36;
        case 7:
          goto LABEL_36;
        case 8:
          v24 = *(_QWORD *)v13;
          v25 = *(unsigned int **)(v24 + 16);
          v88 = *(_QWORD *)(v24 + 8);
          v89 = v25;
          if (v25)
          {
            v26 = v25 + 2;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          v28 = *(_OWORD *)(v24 + 24);
          v29 = *(_OWORD *)(v24 + 56);
          v91 = *(_OWORD *)(v24 + 40);
          v92 = v29;
          v90 = v28;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v89);
          goto LABEL_35;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v13 + 8);
          turi::flexible_type_fail(0);
          if (v95)
          {
            v96 = v95;
            operator delete(v95);
          }
          if (__p.__r_.__value_.__r.__words[2])
          {
            v94 = __p.__r_.__value_.__r.__words[2];
            operator delete((void *)__p.__r_.__value_.__r.__words[2]);
          }
          size = __p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_36;
          v16 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)size + 16))(size);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
          }
LABEL_35:
          size = 0;
LABEL_36:
          v30 = v11 + 32 * v12;
          v31 = *(unsigned __int8 *)(v30 + 28);
          v32 = 0;
          v33 = *((_QWORD *)v87[0] + size);
          v34 = (uint64_t *)(v30 + 16);
          switch(v31)
          {
            case 0:
              v32 = *v34;
              goto LABEL_64;
            case 1:
              v32 = (uint64_t)*(double *)v34;
              goto LABEL_64;
            case 2:
              v39 = *v34;
              v40 = (char **)(*v34 + 8);
              __idx[0] = 0;
              v41 = (char *)v40;
              if (*(char *)(v39 + 31) < 0)
                v41 = *v40;
              std::string::basic_string[abi:ne180100]<0>(&__p, v41);
              v32 = std::stoll(&__p, __idx, 10);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (*(char *)(v39 + 31) < 0)
                v42 = *(_QWORD *)(v39 + 16);
              else
                v42 = *(unsigned __int8 *)(v39 + 31);
              if (__idx[0] != v42)
              {
                v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v52 = std::string::append(&v97, " cannot be interpreted as an integer");
                v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v53;
                v52->__r_.__value_.__l.__size_ = 0;
                v52->__r_.__value_.__r.__words[2] = 0;
                v52->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v51, &__p);
                __cxa_throw(v51, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_64;
            case 3:
              v35 = *v34;
              memset(&__p, 0, sizeof(__p));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v35 + 8), *(_QWORD *)(v35 + 16), (uint64_t)(*(_QWORD *)(v35 + 16) - *(_QWORD *)(v35 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_63;
            case 4:
              v43 = *v34;
              memset(&__p, 0, sizeof(__p));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v43 + 8), *(uint64_t **)(v43 + 16), (uint64_t)(*(_QWORD *)(v43 + 16) - *(_QWORD *)(v43 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
              goto LABEL_63;
            case 5:
              v44 = *v34;
              memset(&__p, 0, sizeof(__p));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(_QWORD *)(v44 + 16) - *(_QWORD *)(v44 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
              goto LABEL_63;
            case 6:
              v32 = *v34 << 8 >> 8;
              goto LABEL_64;
            case 7:
              goto LABEL_64;
            case 8:
              v45 = *v34;
              v46 = *(unsigned int **)(v45 + 16);
              v88 = *(_QWORD *)(v45 + 8);
              v89 = v46;
              if (v46)
              {
                v47 = v46 + 2;
                do
                  v48 = __ldxr(v47);
                while (__stxr(v48 + 1, v47));
              }
              v49 = *(_OWORD *)(v45 + 24);
              v50 = *(_OWORD *)(v45 + 56);
              v91 = *(_OWORD *)(v45 + 40);
              v92 = v50;
              v90 = v49;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v89);
              goto LABEL_63;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *v34 + 8);
              turi::flexible_type_fail(0);
              if (v95)
              {
                v96 = v95;
                operator delete(v95);
              }
              if (__p.__r_.__value_.__r.__words[2])
              {
                v94 = __p.__r_.__value_.__r.__words[2];
                operator delete((void *)__p.__r_.__value_.__r.__words[2]);
              }
              v36 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_)
              {
                v37 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
              }
LABEL_63:
              v32 = 0;
LABEL_64:
              *((_QWORD *)v86[0] + v12++) = v32 + v33;
              v11 = *(_QWORD *)(v10 + 8);
              if (v12 >= (*(_QWORD *)(v10 + 16) - v11) >> 5)
                goto LABEL_72;
              continue;
            default:
              goto LABEL_111;
          }
        default:
LABEL_111:
          result = turi::flexible_type_fail(0);
          __break(1u);
          return result;
      }
    }
  }
LABEL_72:
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(**a3 + 56, &__p);
  v85 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v54 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t *)&v85, (uint64_t **)v86, &v88);
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)a3[1];
  v83 = *a3;
  v84 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(p_shared_owners);
    while (__stxr(v61 + 1, p_shared_owners));
  }
  v81 = v88;
  v82 = v89;
  if (v89)
  {
    v62 = (unint64_t *)(v89 + 2);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  turi::query_eval::optimization_engine::replace_node(v80, &v83, &v81);
  v64 = (std::__shared_weak_count *)v82;
  if (v82)
  {
    v65 = (unint64_t *)(v82 + 2);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v84;
  if (v84)
  {
    v68 = (unint64_t *)&v84->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)v89;
  if (v89)
  {
    v71 = (unint64_t *)(v89 + 2);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v74 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  return 1;
}

void sub_2180F6600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;
  uint64_t v38;

  if (a36 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 97) < 0)
  {
    operator delete(*(void **)(v38 - 120));
    if ((v37 & 1) == 0)
    {
LABEL_8:
      if (a17)
        operator delete(a17);
      if (a20)
        operator delete(a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

uint64_t turi::query_eval::node_info::num_columns(turi::query_eval::node_info *this)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  if (*((_QWORD *)this + 12) == -1)
  {
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    v9 = *(_QWORD *)this;
    v10 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    *((_QWORD *)this + 12) = turi::query_eval::infer_planner_node_num_output_columns(&v9);
    v6 = v10;
    if (v10)
    {
      v7 = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return *((_QWORD *)this + 12);
}

void sub_2180F6824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::node_info::p(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  const char *v17;
  void *__p[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  std::string v23;
  __int128 v24;
  int64_t v25;

  v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(*a1 + 8, (const void **)a2);
  v5 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v21, "Parameter ");
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v21, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v22, " not valid in node of type ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  turi::query_eval::planner_node_type_to_name(__p, *((unsigned int *)a1 + 4));
  if ((v20 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v14 = v20;
  else
    v14 = (std::string::size_type)__p[1];
  v15 = std::string::append(&v23, (const std::string::value_type *)v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v25 = v15->__r_.__value_.__r.__words[2];
  v24 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = (const char *)&v24;
  if (v25 < 0)
    v17 = (const char *)v24;
  assert_msg(v5 + 16 != v4, "%s", v17);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
  if ((char)v20 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return v4 + 56;
}

void sub_2180F69BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
    operator delete(*(void **)(v35 - 64));
  if (a16 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const void **v3;
  _QWORD *v4[2];
  uint64_t v5;
  _QWORD *v6[2];
  int v7;

  v2 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v5 = v2 >> 4;
  if (!v2)
  {
    v3 = (const void **)&v5;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&)::{lambda(void)#1}::operator()();
  }
  v6[0] = 0;
  v6[1] = 0;
  v4[1] = 0;
  v5 = (uint64_t)v6;
  v3 = (const void **)v4;
  v4[0] = 0;
  v7 = 11;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v7, (uint64_t)&v5, &v3, (_QWORD **)a1, a2);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v3, v4[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_2180F6AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, _QWORD *a14)
{
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"nodes.size()", 12);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 107, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180F6C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_identity_project>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_identity_project>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_identity_project>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_eliminate_identity_project::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project(a, {0,1,...,num_columns(a)}) -> a");
}

BOOL turi::query_eval::opt_project_transform::transform_applies(uint64_t a1, int a2)
{
  return a2 == 4;
}

uint64_t turi::query_eval::opt_eliminate_identity_project::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  void *__p[2];
  char v34;

  v5 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  v6 = *(_QWORD *)turi::query_eval::node_info::p(v5, (uint64_t)__p);
  if (v34 < 0)
    operator delete(__p[0]);
  v7 = turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(*a3)[5]);
  v8 = *(char **)(v6 + 8);
  v9 = *(char **)(v6 + 16);
  if (v7 != (v9 - v8) >> 4)
    return 0;
  if (v9 != v8)
  {
    v10 = 0;
    if (v7 <= 1)
      v11 = 1;
    else
      v11 = v7;
    do
    {
      v12 = *(_QWORD *)v8;
      v8 += 16;
      if (v10 != v12)
        return 0;
    }
    while (v11 != ++v10);
  }
  v13 = *a3;
  v14 = (std::__shared_weak_count *)a3[1];
  v31 = *a3;
  v32 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v13 = *a3;
  }
  v17 = *(uint64_t **)v13[5];
  v19 = *v17;
  v18 = (std::__shared_weak_count *)v17[1];
  v29 = v19;
  v30 = v18;
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  turi::query_eval::optimization_engine::replace_node(a2, &v31, &v29);
  v22 = v30;
  if (v30)
  {
    v23 = (unint64_t *)&v30->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return 1;
}

void sub_2180F6F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_split_contractive_expansive_projection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_split_contractive_expansive_projection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_split_contractive_expansive_projection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_split_contractive_expansive_projection::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project(a, ...) ?->? expanding_project(contracting_project(a, ...), ...)");
}

uint64_t turi::query_eval::opt_split_contractive_expansive_projection::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t size;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  char **v17;
  char *v18;
  const std::string *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD **v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  std::string::size_type v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t *v44;
  unint64_t v45;
  std::runtime_error *exception;
  std::string *v47;
  __int128 v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t result;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t *v83;
  std::__shared_weak_count *v84;
  __int128 v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t *v88;
  _QWORD *v89[2];
  void *v90[3];
  void *__p;
  char *v92;
  char *v93;
  char v94[8];
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  std::string v102;
  std::string::size_type v103;
  void *v104;
  void *v105;
  std::string v106;
  size_t __idx[2];

  v5 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v102, "indices");
  v6 = *(_QWORD *)turi::query_eval::node_info::p(v5, (uint64_t)&v102);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  std::set<unsigned long>::set[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>>((uint64_t)v94, *(_BYTE **)(v6 + 8), *(_BYTE **)(v6 + 16));
  v7 = turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(*a3)[5]);
  if (v96 < v7 && v7 <= (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 4)
  {
    __p = 0;
    v92 = 0;
    v93 = 0;
    std::vector<unsigned long>::reserve(&__p, v96);
    v80 = a2;
    std::vector<unsigned long>::vector(v90, (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 4);
    v89[0] = 0;
    v89[1] = 0;
    v88 = (uint64_t *)v89;
    v9 = *(_QWORD *)(v6 + 8);
    if (*(_QWORD *)(v6 + 16) != v9)
    {
      v10 = 0;
      while (2)
      {
        v11 = v9 + 16 * v10;
        size = 0;
        switch(*(_BYTE *)(v11 + 12))
        {
          case 0:
            size = *(_QWORD *)v11;
            goto LABEL_36;
          case 1:
            size = (uint64_t)*(double *)v11;
            goto LABEL_36;
          case 2:
            v16 = *(_QWORD *)v11;
            v17 = (char **)(*(_QWORD *)v11 + 8);
            __idx[0] = 0;
            v18 = (char *)v17;
            if (*(char *)(v16 + 31) < 0)
              v18 = *v17;
            v19 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v102, v18);
            size = std::stoll(v19, __idx, 10);
            if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v102.__r_.__value_.__l.__data_);
            if (*(char *)(v16 + 31) < 0)
              v20 = *(_QWORD *)(v16 + 16);
            else
              v20 = *(unsigned __int8 *)(v16 + 31);
            if (__idx[0] != v20)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v47 = std::string::append(&v106, " cannot be interpreted as an integer");
              v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
              v102.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v48;
              v47->__r_.__value_.__l.__size_ = 0;
              v47->__r_.__value_.__r.__words[2] = 0;
              v47->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, &v102);
              __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_36;
          case 3:
            v13 = *(_QWORD *)v11;
            memset(&v102, 0, sizeof(v102));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v102, *(const void **)(v13 + 8), *(_QWORD *)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (v102.__r_.__value_.__r.__words[0])
            {
              v102.__r_.__value_.__l.__size_ = v102.__r_.__value_.__r.__words[0];
              operator delete(v102.__r_.__value_.__l.__data_);
            }
            goto LABEL_35;
          case 4:
            v21 = *(_QWORD *)v11;
            memset(&v102, 0, sizeof(v102));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v102, *(uint64_t **)(v21 + 8), *(uint64_t **)(v21 + 16), (uint64_t)(*(_QWORD *)(v21 + 16) - *(_QWORD *)(v21 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
            goto LABEL_35;
          case 5:
            v22 = *(_QWORD *)v11;
            memset(&v102, 0, sizeof(v102));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v102, *(uint64_t **)(v22 + 8), *(uint64_t **)(v22 + 16), (uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
            goto LABEL_35;
          case 6:
            size = (uint64_t)(*(_QWORD *)v11 << 8) >> 8;
            goto LABEL_36;
          case 7:
            goto LABEL_36;
          case 8:
            v23 = *(_QWORD *)v11;
            v24 = *(unsigned int **)(v23 + 16);
            v97 = *(_QWORD *)(v23 + 8);
            v98 = v24;
            if (v24)
            {
              v25 = v24 + 2;
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
            }
            v27 = *(_OWORD *)(v23 + 24);
            v28 = *(_OWORD *)(v23 + 56);
            v100 = *(_OWORD *)(v23 + 40);
            v101 = v28;
            v99 = v27;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count(&v98);
            goto LABEL_35;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&v102, *(_QWORD *)v11 + 8);
            turi::flexible_type_fail(0);
            if (v104)
            {
              v105 = v104;
              operator delete(v104);
            }
            if (v102.__r_.__value_.__r.__words[2])
            {
              v103 = v102.__r_.__value_.__r.__words[2];
              operator delete((void *)v102.__r_.__value_.__r.__words[2]);
            }
            size = v102.__r_.__value_.__l.__size_;
            if (!v102.__r_.__value_.__l.__size_)
              goto LABEL_36;
            v14 = (unint64_t *)(v102.__r_.__value_.__l.__size_ + 8);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              (*(void (**)(unint64_t))(*(_QWORD *)size + 16))(size);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
            }
LABEL_35:
            size = 0;
LABEL_36:
            v29 = v89[0];
            v30 = v89;
            if (!v89[0])
              goto LABEL_49;
            v31 = v89;
            do
            {
              v32 = v29[4];
              v33 = v32 >= size;
              if (v32 >= size)
                v34 = v29;
              else
                v34 = v29 + 1;
              if (v33)
                v31 = (_QWORD **)v29;
              v29 = (_QWORD *)*v34;
            }
            while (*v34);
            v30 = v89;
            if (v31 == v89)
              goto LABEL_49;
            if (v31[4] == (_QWORD *)size)
            {
              v35 = (std::string::size_type)v31[5];
            }
            else
            {
              v30 = v31;
LABEL_49:
              v35 = (v92 - (_BYTE *)__p) >> 3;
              v102.__r_.__value_.__r.__words[0] = size;
              v102.__r_.__value_.__l.__size_ = v35;
              std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>(&v88, v30, (unint64_t *)&v102, &v102);
              v36 = v92;
              if (v92 >= v93)
              {
                v38 = (char *)__p;
                v39 = (v92 - (_BYTE *)__p) >> 3;
                v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 61)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v41 = v93 - (_BYTE *)__p;
                if ((v93 - (_BYTE *)__p) >> 2 > v40)
                  v40 = v41 >> 2;
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
                  v42 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v42 = v40;
                if (v42)
                {
                  v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v93, v42);
                  v38 = (char *)__p;
                  v36 = v92;
                }
                else
                {
                  v43 = 0;
                }
                v44 = (unint64_t *)&v43[8 * v39];
                *v44 = size;
                v37 = (char *)(v44 + 1);
                while (v36 != v38)
                {
                  v45 = *((_QWORD *)v36 - 1);
                  v36 -= 8;
                  *--v44 = v45;
                }
                __p = v44;
                v92 = v37;
                v93 = &v43[8 * v42];
                if (v38)
                  operator delete(v38);
              }
              else
              {
                *(_QWORD *)v92 = size;
                v37 = v36 + 8;
              }
              v92 = v37;
            }
            *((_QWORD *)v90[0] + v10++) = v35;
            v9 = *(_QWORD *)(v6 + 8);
            if (v10 >= (*(_QWORD *)(v6 + 16) - v9) >> 4)
              break;
            continue;
          default:
            result = turi::flexible_type_fail(0);
            __break(1u);
            return result;
        }
        break;
      }
    }
    v49 = *(uint64_t **)(*a3)[5];
    v51 = *v49;
    v50 = (std::__shared_weak_count *)v49[1];
    v86 = v51;
    v87 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v53 = __ldxr(p_shared_owners);
      while (__stxr(v53 + 1, p_shared_owners));
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v86, (uint64_t **)&__p, &v102);
    v54 = v87;
    if (v87)
    {
      v55 = (unint64_t *)&v87->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v85 = *(_OWORD *)&v102.__r_.__value_.__l.__data_;
    if (v102.__r_.__value_.__l.__size_)
    {
      v57 = (unint64_t *)(v102.__r_.__value_.__l.__size_ + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t *)&v85, (uint64_t **)v90, &v97);
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
    if (*((_QWORD *)&v85 + 1))
    {
      v60 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = (std::__shared_weak_count *)a3[1];
    v83 = *a3;
    v84 = v62;
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v81 = v97;
    v82 = v98;
    if (v98)
    {
      v65 = (unint64_t *)(v98 + 2);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    turi::query_eval::optimization_engine::replace_node(v80, &v83, &v81);
    v67 = (std::__shared_weak_count *)v82;
    if (v82)
    {
      v68 = (unint64_t *)(v82 + 2);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = v84;
    if (v84)
    {
      v71 = (unint64_t *)&v84->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v73 = (std::__shared_weak_count *)v98;
    if (v98)
    {
      v74 = (unint64_t *)(v98 + 2);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = (std::__shared_weak_count *)v102.__r_.__value_.__l.__size_;
    if (v102.__r_.__value_.__l.__size_)
    {
      v77 = (unint64_t *)(v102.__r_.__value_.__l.__size_ + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v88, v89[0]);
    if (v90[0])
    {
      v90[1] = v90[0];
      operator delete(v90[0]);
    }
    if (__p)
    {
      v92 = (char *)__p;
      operator delete(__p);
    }
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)v94, v95);
  return v8;
}

void sub_2180F76F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,_QWORD *a29,uint64_t a30,char a31)
{
  void *v31;
  int v32;
  uint64_t v33;

  if (*(char *)(v33 - 169) < 0)
    operator delete(*(void **)(v33 - 192));
  if (*(char *)(v33 - 97) < 0)
  {
    operator delete(*(void **)(v33 - 120));
    if ((v32 & 1) == 0)
    {
LABEL_8:
      std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a19, a20);
      if (__p)
      {
        a23 = (uint64_t)__p;
        operator delete(__p);
      }
      if (a25)
      {
        a26 = (uint64_t)a25;
        operator delete(a25);
      }
      std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a28, a29);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v31);
  goto LABEL_8;
}

uint64_t std::set<unsigned long>::set[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _QWORD *v4;
  _BYTE *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<unsigned long>::__emplace_hint_unique_impl<turi::flexible_type const&>((uint64_t **)a1, v4, v6);
      v6 += 16;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2180F78F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_impl<turi::flexible_type const&>(uint64_t **a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  void *__p;

  std::__tree<unsigned long>::__construct_node<turi::flexible_type const&>((uint64_t)a1, a3, (uint64_t)&__p);
  v5 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v10, &v9, (unint64_t *)__p + 4);
  v6 = *v5;
  if (*v5)
  {
    v7 = __p;
    __p = 0;
    if (v7)
      operator delete(v7);
  }
  else
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v5, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v6;
}

void sub_2180F7990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<unsigned long>::__construct_node<turi::flexible_type const&>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;

  v5 = a1 + 8;
  v6 = (uint64_t *)operator new(0x28uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  std::allocator<std::__tree_node<unsigned long,void *>>::construct[abi:ne180100]<unsigned long,turi::flexible_type const&>(v5, v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_2180F7A04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void std::allocator<std::__tree_node<unsigned long,void *>>::construct[abi:ne180100]<unsigned long,turi::flexible_type const&>(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  std::runtime_error *exception;
  std::string *v21;
  __int128 v22;
  void *__p[2];
  void *v24[2];
  __int128 v25;
  __int128 v26;
  std::string v27;
  size_t __idx;

  v4 = 0;
  switch(a3[12])
  {
    case 0:
      v4 = *(_QWORD *)a3;
      goto LABEL_29;
    case 1:
      v4 = (uint64_t)*(double *)a3;
      goto LABEL_29;
    case 2:
      v8 = *(_QWORD *)a3;
      v9 = (char **)(*(_QWORD *)a3 + 8);
      __idx = 0;
      v10 = (char *)v9;
      if (*(char *)(v8 + 31) < 0)
        v10 = *v9;
      std::string::basic_string[abi:ne180100]<0>(__p, v10);
      v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v24[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v8 + 31) < 0)
        v11 = *(_QWORD *)(v8 + 16);
      else
        v11 = *(unsigned __int8 *)(v8 + 31);
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v21 = std::string::append(&v27, " cannot be interpreted as an integer");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v24[0] = (void *)v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v5 = *(_QWORD *)a3;
      __p[1] = 0;
      v24[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(_QWORD *)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      v12 = *(_QWORD *)a3;
      __p[1] = 0;
      v24[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
      goto LABEL_28;
    case 5:
      v13 = *(_QWORD *)a3;
      __p[1] = 0;
      v24[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
      goto LABEL_28;
    case 6:
      v4 = (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v14 = *(_QWORD *)a3;
      v15 = *(unsigned int **)(*(_QWORD *)a3 + 16);
      __p[0] = *(void **)(*(_QWORD *)a3 + 8);
      __p[1] = v15;
      if (v15)
      {
        v16 = v15 + 2;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(_OWORD *)(v14 + 24);
      v19 = *(_OWORD *)(v14 + 56);
      v25 = *(_OWORD *)(v14 + 40);
      v26 = v19;
      *(_OWORD *)v24 = v18;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v25 + 1))
      {
        *(_QWORD *)&v26 = *((_QWORD *)&v25 + 1);
        operator delete(*((void **)&v25 + 1));
      }
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      v4 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_29;
      v6 = (unint64_t *)((char *)__p[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
      }
LABEL_28:
      v4 = 0;
LABEL_29:
      *a2 = v4;
      return;
    default:
      turi::apply_binary_op_ff();
  }
}

void sub_2180F7CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 41) < 0)
  {
    operator delete(*(void **)(v16 - 64));
    if ((v15 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>(uint64_t **a1, _QWORD *a2, unint64_t *a3, _OWORD *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (void **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_merge>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E5C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_merge>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E5C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_union_merge>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_union_merge::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "union(a, union(b,c)) -> union(a,b,c)");
}

BOOL turi::query_eval::opt_union_transform::transform_applies(uint64_t a1, int a2)
{
  return a2 == 11;
}

uint64_t turi::query_eval::opt_union_merge::apply_transform(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void ***v22;
  uint64_t v23;
  __int128 v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  _QWORD v28[3];
  void **v29[3];
  void ***v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*a3 + 40);
  v4 = *(_QWORD *)(*a3 + 48);
  if (v3 == v4)
    return 0;
  while (*(_DWORD *)(*(_QWORD *)v3 + 16) != 11)
  {
    v3 += 16;
    if (v3 == v4)
      return 0;
  }
  memset(v28, 0, sizeof(v28));
  v30 = 0;
  *(_QWORD *)&v27 = v29;
  *((_QWORD *)&v27 + 1) = v28;
  std::function<void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::operator=<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},void>(v29, &v27);
  if (!v30)
    std::__throw_bad_function_call[abi:ne180100]();
  ((void (*)(void ***, _QWORD *))(*v30)[6])(v30, a3);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node((uint64_t)v28, &v27);
  v8 = (std::__shared_weak_count *)a3[1];
  v25 = (uint64_t *)*a3;
  v26 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v24 = v27;
  if (*((_QWORD *)&v27 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  turi::query_eval::optimization_engine::replace_node(a2, &v25, (uint64_t *)&v24);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v26;
  if (v26)
  {
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v30;
  if (v30 == v29)
  {
    v23 = 4;
    v22 = v29;
    goto LABEL_31;
  }
  if (v30)
  {
    v23 = 5;
LABEL_31:
    ((void (*)(void ***))(*v22)[v23])(v22);
  }
  v29[0] = (void **)v28;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](v29);
  return 1;
}

void sub_2180F80D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  v17 = *(_QWORD **)(v15 - 32);
  if (v17 == (_QWORD *)(v15 - 56))
  {
    v18 = 4;
    v17 = (_QWORD *)(v15 - 56);
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  *(_QWORD *)(v15 - 56) = &a15;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 56));
  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::operator=<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},void>(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24D92E680;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

void std::__function::__func<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},std::allocator<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1}>,void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},std::allocator<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1}>,void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24D92E680;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},std::allocator<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1}>,void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D92E680;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},std::allocator<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1}>,void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__invoke[abi:ne180100]<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1} &,std::shared_ptr<turi::query_eval::node_info const> const&>((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},std::allocator<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1}>,void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},std::allocator<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1}>,void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::target_type()
{
}

void std::__invoke[abi:ne180100]<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1} &,std::shared_ptr<turi::query_eval::node_info const> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *a2;
  if (*(_DWORD *)(v3 + 16) == 11)
  {
    v4 = *(uint64_t **)(v3 + 40);
    v5 = *(uint64_t **)(v3 + 48);
    while (v4 != v5)
    {
      v6 = *a1;
      v7 = (std::__shared_weak_count *)v4[1];
      v14 = *v4;
      v15 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *(_QWORD *)(v6 + 24);
      if (!v10)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v14);
      v11 = v15;
      if (v15)
      {
        v12 = (unint64_t *)&v15->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v4 += 2;
    }
  }
  else
  {
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)a1[1], (__int128 *)v3);
  }
}

void sub_2180F839C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__value_func<void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2180F854C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_on_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_on_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_union_on_source>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_union_on_source::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "union(source, source) -> source");
}

uint64_t turi::query_eval::opt_union_on_source::apply_transform(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t size;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  uint64_t *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  std::runtime_error *v62;
  std::string *v63;
  __int128 v64;
  uint64_t *v65;
  unint64_t v66;
  BOOL v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  std::string::size_type v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  char **v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  __int128 v95;
  __int128 v96;
  uint64_t *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  char **v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  __int128 v113;
  __int128 v114;
  char *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  _OWORD *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  std::string::size_type v129;
  uint64_t *v130;
  const turi::sframe *v131;
  unint64_t i;
  uint64_t *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  std::string::size_type *v142;
  std::string::size_type v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::runtime_error *v149;
  std::string *v150;
  __int128 v151;
  uint64_t *v152;
  uint64_t *v153;
  std::string::size_type v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *p_shared_owners;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  std::string::size_type v181;
  unint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  unint64_t v185;
  int64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  _QWORD *v191;
  std::string::size_type v192;
  std::string::size_type v193;
  __int128 v194;
  int64x2_t v195;
  std::string::size_type v196;
  char *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  __int128 v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v235;
  __int128 v236;
  std::runtime_error *v237;
  std::string *v238;
  __int128 v239;
  unsigned int v240;
  uint64_t v241;
  __int128 v243;
  uint64_t *v244;
  std::__shared_weak_count *v245;
  __int128 v246;
  size_t v247[3];
  __int128 v248;
  __int128 v249;
  uint64_t *v250;
  std::__shared_weak_count *v251;
  size_t __idx[2];
  char v253;
  void *v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t *v258;
  unint64_t v259;
  void *v260[3];
  void *p_p;
  _BYTE v262[24];
  __int128 v263;
  __int128 v264;
  std::string v265;
  _BYTE v266[296];
  _BYTE v267[296];
  std::string __p;
  char *v269;
  std::string::value_type *v270;
  void *v271;
  void *v272;
  uint64_t v273;

  v273 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(*a3 + 40);
  v4 = *(_QWORD *)(*a3 + 48) - (_QWORD)v3;
  if (!v4)
    return 0;
  v6 = 0;
  v7 = v4 >> 4;
  v8 = (unint64_t)(v4 >> 4) <= 1 ? 1 : v4 >> 4;
  do
  {
    v9 = *v3;
    v3 += 2;
    if ((*(_DWORD *)(v9 + 16) & 0xFFFFFFFE) == 6)
      ++v6;
    --v8;
  }
  while (v8);
  if (v6 < 2)
    return 0;
  std::vector<std::array<unsigned long,3ul>>::vector(v260, v7);
  v258 = 0;
  v259 = 0;
  v257 = (uint64_t *)&v258;
  v11 = *a3;
  v12 = *(_QWORD *)(*a3 + 40);
  v241 = a2;
  if (*(_QWORD *)(*a3 + 48) == v12)
  {
    v65 = 0;
    v66 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)(v12 + 16 * v13);
      v15 = *(_DWORD *)(v14 + 16);
      if ((v15 & 0xFFFFFFFE) == 6)
      {
        std::string::basic_string[abi:ne180100]<0>(&v254, "begin_index");
        v16 = (_BYTE *)turi::query_eval::node_info::p((uint64_t *)v14, (uint64_t)&v254);
        size = 0;
        switch(v16[12])
        {
          case 0:
            size = *(_QWORD *)v16;
            goto LABEL_41;
          case 1:
            size = (uint64_t)*(double *)v16;
            goto LABEL_41;
          case 2:
            v21 = *(_QWORD *)v16;
            v22 = (char **)(*(_QWORD *)v16 + 8);
            __idx[0] = 0;
            v23 = (char *)v22;
            if (*(char *)(v21 + 31) < 0)
              v23 = *v22;
            std::string::basic_string[abi:ne180100]<0>(&__p, v23);
            size = std::stoll(&__p, __idx, 10);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (*(char *)(v21 + 31) < 0)
              v24 = *(_QWORD *)(v21 + 16);
            else
              v24 = *(unsigned __int8 *)(v21 + 31);
            if (__idx[0] != v24)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v235 = std::string::append(&v265, " cannot be interpreted as an integer");
              v236 = *(_OWORD *)&v235->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v235->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v236;
              v235->__r_.__value_.__l.__size_ = 0;
              v235->__r_.__value_.__r.__words[2] = 0;
              v235->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, &__p);
              __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_41;
          case 3:
            v18 = *(_QWORD *)v16;
            memset(&__p, 0, sizeof(__p));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v18 + 8), *(_QWORD *)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_40;
          case 4:
            v25 = *(_QWORD *)v16;
            memset(&__p, 0, sizeof(__p));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v265.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
            goto LABEL_40;
          case 5:
            v26 = *(_QWORD *)v16;
            memset(&__p, 0, sizeof(__p));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v26 + 8), *(uint64_t **)(v26 + 16), (uint64_t)(*(_QWORD *)(v26 + 16) - *(_QWORD *)(v26 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v265.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
            goto LABEL_40;
          case 6:
            size = (uint64_t)(*(_QWORD *)v16 << 8) >> 8;
            goto LABEL_41;
          case 7:
            goto LABEL_41;
          case 8:
            v27 = *(_QWORD *)v16;
            v28 = *(_QWORD *)(*(_QWORD *)v16 + 16);
            p_p = *(void **)(*(_QWORD *)v16 + 8);
            *(_QWORD *)v262 = v28;
            if (v28)
            {
              v29 = (unsigned int *)(v28 + 8);
              do
                v30 = __ldxr(v29);
              while (__stxr(v30 + 1, v29));
            }
            v31 = *(_OWORD *)(v27 + 24);
            v32 = *(_OWORD *)(v27 + 56);
            v263 = *(_OWORD *)(v27 + 40);
            v264 = v32;
            *(_OWORD *)&v262[8] = v31;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)v262);
            goto LABEL_40;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v16 + 8);
            turi::flexible_type_fail(0);
            if (v271)
            {
              v272 = v271;
              operator delete(v271);
            }
            if (__p.__r_.__value_.__r.__words[2])
            {
              v269 = (char *)__p.__r_.__value_.__r.__words[2];
              operator delete((void *)__p.__r_.__value_.__r.__words[2]);
            }
            size = __p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_)
              goto LABEL_41;
            v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)size + 16))(size);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
            }
LABEL_40:
            size = 0;
LABEL_41:
            if (SHIBYTE(v256) < 0)
              operator delete(v254);
            v33 = *(uint64_t **)(*(_QWORD *)(*a3 + 40) + 16 * v13);
            std::string::basic_string[abi:ne180100]<0>(&v254, "end_index");
            v34 = (_BYTE *)turi::query_eval::node_info::p(v33, (uint64_t)&v254);
            v35 = 0;
            switch(v34[12])
            {
              case 0:
                v35 = *(_QWORD *)v34;
                goto LABEL_71;
              case 1:
                v35 = (uint64_t)*(double *)v34;
                goto LABEL_71;
              case 2:
                v39 = *(_QWORD *)v34;
                v40 = (char **)(*(_QWORD *)v34 + 8);
                __idx[0] = 0;
                v41 = (char *)v40;
                if (*(char *)(v39 + 31) < 0)
                  v41 = *v40;
                std::string::basic_string[abi:ne180100]<0>(&__p, v41);
                v35 = std::stoll(&__p, __idx, 10);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (*(char *)(v39 + 31) < 0)
                  v42 = *(_QWORD *)(v39 + 16);
                else
                  v42 = *(unsigned __int8 *)(v39 + 31);
                if (__idx[0] != v42)
                {
                  v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v63 = std::string::append(&v265, " cannot be interpreted as an integer");
                  v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v64;
                  v63->__r_.__value_.__l.__size_ = 0;
                  v63->__r_.__value_.__r.__words[2] = 0;
                  v63->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v62, &__p);
                  __cxa_throw(v62, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                goto LABEL_71;
              case 3:
                v36 = *(_QWORD *)v34;
                memset(&__p, 0, sizeof(__p));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v36 + 8), *(_QWORD *)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                goto LABEL_70;
              case 4:
                v43 = *(_QWORD *)v34;
                memset(&__p, 0, sizeof(__p));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v43 + 8), *(uint64_t **)(v43 + 16), (uint64_t)(*(_QWORD *)(v43 + 16) - *(_QWORD *)(v43 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v265.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
                goto LABEL_70;
              case 5:
                v44 = *(_QWORD *)v34;
                memset(&__p, 0, sizeof(__p));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(_QWORD *)(v44 + 16) - *(_QWORD *)(v44 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v265.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
                goto LABEL_70;
              case 6:
                v35 = (uint64_t)(*(_QWORD *)v34 << 8) >> 8;
                goto LABEL_71;
              case 7:
                goto LABEL_71;
              case 8:
                v45 = *(_QWORD *)v34;
                v46 = *(_QWORD *)(*(_QWORD *)v34 + 16);
                p_p = *(void **)(*(_QWORD *)v34 + 8);
                *(_QWORD *)v262 = v46;
                if (v46)
                {
                  v47 = (unsigned int *)(v46 + 8);
                  do
                    v48 = __ldxr(v47);
                  while (__stxr(v48 + 1, v47));
                }
                v49 = *(_OWORD *)(v45 + 24);
                v50 = *(_OWORD *)(v45 + 56);
                v263 = *(_OWORD *)(v45 + 40);
                v264 = v50;
                *(_OWORD *)&v262[8] = v49;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((unsigned int **)v262);
                goto LABEL_70;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v34 + 8);
                turi::flexible_type_fail(0);
                if (v271)
                {
                  v272 = v271;
                  operator delete(v271);
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v269 = (char *)__p.__r_.__value_.__r.__words[2];
                  operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                }
                v35 = __p.__r_.__value_.__l.__size_;
                if (!__p.__r_.__value_.__l.__size_)
                  goto LABEL_71;
                v37 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v35);
                }
LABEL_70:
                v35 = 0;
LABEL_71:
                if (SHIBYTE(v256) < 0)
                  operator delete(v254);
                v51 = *(uint64_t **)(*(_QWORD *)(*a3 + 40) + 16 * v13);
                if (v15 == 7)
                {
                  std::string::basic_string[abi:ne180100]<0>(&__p, "sframe");
                  v52 = turi::query_eval::node_info::any_p<turi::sframe>(v51, (uint64_t)&__p);
                  if (*(_BYTE *)(v52 + 288))
                    v53 = *(_QWORD *)(v52 + 32);
                  else
                    v53 = 0;
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(&__p, "sarray");
                  v54 = turi::query_eval::node_info::any_p<turi::sframe>(v51, (uint64_t)&__p);
                  v55 = *(_QWORD *)v54;
                  if (*(_BYTE *)(*(_QWORD *)v54 + 248)
                    && (v57 = v55 + 80, v56 = *(uint64_t **)(v55 + 80), (v58 = *(_QWORD *)(v57 + 8) - (_QWORD)v56) != 0))
                  {
                    v53 = 0;
                    v59 = v58 >> 3;
                    if (v59 <= 1)
                      v59 = 1;
                    do
                    {
                      v60 = *v56++;
                      v53 += v60;
                      --v59;
                    }
                    while (v59);
                  }
                  else
                  {
                    v53 = 0;
                  }
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v61 = (uint64_t *)((char *)v260[0] + 24 * v13);
                *v61 = size;
                v61[1] = v35;
                v61[2] = v53;
                std::__tree<std::array<unsigned long,3ul>>::__emplace_unique_key_args<std::array<unsigned long,3ul>,std::array<unsigned long,3ul> const&>(&v257, (uint64_t)v260[0] + 24 * v13, (uint64_t)v260[0] + 24 * v13);
                v11 = *a3;
                break;
              default:
                goto LABEL_335;
            }
            break;
          default:
LABEL_335:
            result = turi::flexible_type_fail(0);
LABEL_338:
            __break(1u);
            return result;
        }
      }
      ++v13;
      v12 = *(_QWORD *)(v11 + 40);
    }
    while (v13 < (*(_QWORD *)(v11 + 48) - v12) >> 4);
    v65 = v258;
    v66 = v259;
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v257, v65);
  v67 = v66 == v6;
  v10 = v66 != v6;
  if (!v67)
  {
    v240 = v10;
    v257 = 0;
    v258 = 0;
    v259 = 0;
    v255 = 0;
    v256 = 0;
    v254 = &v255;
    v68 = *(_QWORD *)(*a3 + 40);
    if (*(_QWORD *)(*a3 + 48) == v68)
    {
      v153 = 0;
      v152 = 0;
      v70 = 0;
    }
    else
    {
      v69 = 0;
      v70 = 0;
      do
      {
        v71 = *(_QWORD *)(v68 + 16 * v69);
        v72 = *(_DWORD *)(v71 + 16);
        if ((v72 & 0xFFFFFFFE) == 6)
        {
          std::string::basic_string[abi:ne180100]<0>(__idx, "begin_index");
          v73 = (_BYTE *)turi::query_eval::node_info::p((uint64_t *)v71, (uint64_t)__idx);
          v74 = 0;
          switch(v73[12])
          {
            case 0:
              v74 = *(_QWORD *)v73;
              goto LABEL_141;
            case 1:
              v74 = (uint64_t)*(double *)v73;
              goto LABEL_141;
            case 2:
              v85 = *(_QWORD *)v73;
              v86 = (char **)(*(_QWORD *)v73 + 8);
              v247[0] = 0;
              v87 = (char *)v86;
              if (*(char *)(v85 + 31) < 0)
                v87 = *v86;
              std::string::basic_string[abi:ne180100]<0>(&__p, v87);
              v74 = std::stoll(&__p, v247, 10);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (*(char *)(v85 + 31) < 0)
                v88 = *(_QWORD *)(v85 + 16);
              else
                v88 = *(unsigned __int8 *)(v85 + 31);
              if (v247[0] != v88)
              {
                v237 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v238 = std::string::append(&v265, " cannot be interpreted as an integer");
                v239 = *(_OWORD *)&v238->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v238->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v239;
                v238->__r_.__value_.__l.__size_ = 0;
                v238->__r_.__value_.__r.__words[2] = 0;
                v238->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v237, &__p);
                __cxa_throw(v237, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_141;
            case 3:
              v82 = *(_QWORD *)v73;
              memset(&__p, 0, sizeof(__p));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v82 + 8), *(_QWORD *)(v82 + 16), (uint64_t)(*(_QWORD *)(v82 + 16) - *(_QWORD *)(v82 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_140;
            case 4:
              v89 = *(_QWORD *)v73;
              memset(&__p, 0, sizeof(__p));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v89 + 8), *(uint64_t **)(v89 + 16), (uint64_t)(*(_QWORD *)(v89 + 16) - *(_QWORD *)(v89 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v265.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
              goto LABEL_140;
            case 5:
              v90 = *(_QWORD *)v73;
              memset(&__p, 0, sizeof(__p));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v90 + 8), *(uint64_t **)(v90 + 16), (uint64_t)(*(_QWORD *)(v90 + 16) - *(_QWORD *)(v90 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v265.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
              goto LABEL_140;
            case 6:
              v74 = (uint64_t)(*(_QWORD *)v73 << 8) >> 8;
              goto LABEL_141;
            case 7:
              goto LABEL_141;
            case 8:
              v91 = *(_QWORD *)v73;
              v92 = *(_QWORD *)(*(_QWORD *)v73 + 16);
              p_p = *(void **)(*(_QWORD *)v73 + 8);
              *(_QWORD *)v262 = v92;
              if (v92)
              {
                v93 = (unsigned int *)(v92 + 8);
                do
                  v94 = __ldxr(v93);
                while (__stxr(v94 + 1, v93));
              }
              v95 = *(_OWORD *)(v91 + 24);
              v96 = *(_OWORD *)(v91 + 56);
              v263 = *(_OWORD *)(v91 + 40);
              v264 = v96;
              *(_OWORD *)&v262[8] = v95;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)v262);
              goto LABEL_140;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v73 + 8);
              turi::flexible_type_fail(0);
              if (v271)
              {
                v272 = v271;
                operator delete(v271);
              }
              if (__p.__r_.__value_.__r.__words[2])
              {
                v269 = (char *)__p.__r_.__value_.__r.__words[2];
                operator delete((void *)__p.__r_.__value_.__r.__words[2]);
              }
              v74 = __p.__r_.__value_.__l.__size_;
              if (!__p.__r_.__value_.__l.__size_)
                goto LABEL_141;
              v83 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v74);
              }
LABEL_140:
              v74 = 0;
LABEL_141:
              if (v253 < 0)
                operator delete((void *)__idx[0]);
              v97 = *(uint64_t **)(*(_QWORD *)(*a3 + 40) + 16 * v69);
              std::string::basic_string[abi:ne180100]<0>(__idx, "end_index");
              v98 = (_BYTE *)turi::query_eval::node_info::p(v97, (uint64_t)__idx);
              v99 = 0;
              switch(v98[12])
              {
                case 0:
                  v99 = *(_QWORD *)v98;
                  goto LABEL_171;
                case 1:
                  v99 = (uint64_t)*(double *)v98;
                  goto LABEL_171;
                case 2:
                  v103 = *(_QWORD *)v98;
                  v104 = (char **)(*(_QWORD *)v98 + 8);
                  v247[0] = 0;
                  v105 = (char *)v104;
                  if (*(char *)(v103 + 31) < 0)
                    v105 = *v104;
                  std::string::basic_string[abi:ne180100]<0>(&__p, v105);
                  v99 = std::stoll(&__p, v247, 10);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if (*(char *)(v103 + 31) < 0)
                    v106 = *(_QWORD *)(v103 + 16);
                  else
                    v106 = *(unsigned __int8 *)(v103 + 31);
                  if (v247[0] != v106)
                  {
                    v149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::operator+<char>();
                    v150 = std::string::append(&v265, " cannot be interpreted as an integer");
                    v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
                    __p.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v151;
                    v150->__r_.__value_.__l.__size_ = 0;
                    v150->__r_.__value_.__r.__words[2] = 0;
                    v150->__r_.__value_.__r.__words[0] = 0;
                    std::runtime_error::runtime_error(v149, &__p);
                    __cxa_throw(v149, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                  }
                  goto LABEL_171;
                case 3:
                  v100 = *(_QWORD *)v98;
                  memset(&__p, 0, sizeof(__p));
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v100 + 8), *(_QWORD *)(v100 + 16), (uint64_t)(*(_QWORD *)(v100 + 16) - *(_QWORD *)(v100 + 8)) >> 3);
                  turi::flexible_type_fail(0);
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_170;
                case 4:
                  v107 = *(_QWORD *)v98;
                  memset(&__p, 0, sizeof(__p));
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v107 + 8), *(uint64_t **)(v107 + 16), (uint64_t)(*(_QWORD *)(v107 + 16) - *(_QWORD *)(v107 + 8)) >> 4);
                  turi::flexible_type_fail(0);
                  v265.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
                  goto LABEL_170;
                case 5:
                  v108 = *(_QWORD *)v98;
                  memset(&__p, 0, sizeof(__p));
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v108 + 8), *(uint64_t **)(v108 + 16), (uint64_t)(*(_QWORD *)(v108 + 16) - *(_QWORD *)(v108 + 8)) >> 5);
                  turi::flexible_type_fail(0);
                  v265.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
                  goto LABEL_170;
                case 6:
                  v99 = (uint64_t)(*(_QWORD *)v98 << 8) >> 8;
                  goto LABEL_171;
                case 7:
                  goto LABEL_171;
                case 8:
                  v109 = *(_QWORD *)v98;
                  v110 = *(_QWORD *)(*(_QWORD *)v98 + 16);
                  p_p = *(void **)(*(_QWORD *)v98 + 8);
                  *(_QWORD *)v262 = v110;
                  if (v110)
                  {
                    v111 = (unsigned int *)(v110 + 8);
                    do
                      v112 = __ldxr(v111);
                    while (__stxr(v112 + 1, v111));
                  }
                  v113 = *(_OWORD *)(v109 + 24);
                  v114 = *(_OWORD *)(v109 + 56);
                  v263 = *(_OWORD *)(v109 + 40);
                  v264 = v114;
                  *(_OWORD *)&v262[8] = v113;
                  turi::flexible_type_fail(0);
                  boost::detail::shared_count::~shared_count((unsigned int **)v262);
                  goto LABEL_170;
                case 9:
                  turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v98 + 8);
                  turi::flexible_type_fail(0);
                  if (v271)
                  {
                    v272 = v271;
                    operator delete(v271);
                  }
                  if (__p.__r_.__value_.__r.__words[2])
                  {
                    v269 = (char *)__p.__r_.__value_.__r.__words[2];
                    operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                  }
                  v99 = __p.__r_.__value_.__l.__size_;
                  if (!__p.__r_.__value_.__l.__size_)
                    goto LABEL_171;
                  v101 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                  do
                    v102 = __ldaxr(v101);
                  while (__stlxr(v102 - 1, v101));
                  if (!v102)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 16))(v99);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v99);
                  }
LABEL_170:
                  v99 = 0;
LABEL_171:
                  if (v253 < 0)
                    operator delete((void *)__idx[0]);
                  v115 = (char *)v260[0] + 24 * v69;
                  v116 = std::__tree<std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::__map_value_compare<std::array<unsigned long,3ul>,std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::less<std::array<unsigned long,3ul>>,true>,std::allocator<std::__value_type<std::array<unsigned long,3ul>,unsigned long>>>::find<std::array<unsigned long,3ul>>((uint64_t)&v254, (uint64_t)v115);
                  if (&v255 == v116)
                  {
                    v118 = v74;
                    v120 = v257;
                    v119 = v258;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
                    v121 = std::__tree<std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::__map_value_compare<std::array<unsigned long,3ul>,std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::less<std::array<unsigned long,3ul>>,true>,std::allocator<std::__value_type<std::array<unsigned long,3ul>,unsigned long>>>::__emplace_unique_key_args<std::array<unsigned long,3ul>,std::piecewise_construct_t const&,std::tuple<std::array<unsigned long,3ul> const&>,std::tuple<>>((uint64_t **)&v254, (uint64_t)v115, (uint64_t)&std::piecewise_construct, &__p);
                    v117 = 0x8E38E38E38E38E39 * (v119 - v120);
                    *((_QWORD *)v121 + 7) = v117;
                    v122 = v258;
                    if ((unint64_t)v258 >= v259)
                    {
                      v125 = 0x8E38E38E38E38E39 * (v258 - v257);
                      v126 = v125 + 1;
                      if (v125 + 1 > 0x38E38E38E38E38ELL)
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      if (0x1C71C71C71C71C72 * ((uint64_t)(v259 - (_QWORD)v257) >> 3) > v126)
                        v126 = 0x1C71C71C71C71C72 * ((uint64_t)(v259 - (_QWORD)v257) >> 3);
                      if (0x8E38E38E38E38E39 * ((uint64_t)(v259 - (_QWORD)v257) >> 3) >= 0x1C71C71C71C71C7)
                        v127 = 0x38E38E38E38E38ELL;
                      else
                        v127 = v126;
                      v270 = (std::string::value_type *)&v259;
                      if (v127)
                      {
                        v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>((uint64_t)&v259, v127);
                        v124 = v118;
                      }
                      else
                      {
                        v124 = v118;
                        v128 = 0;
                      }
                      v129 = (std::string::size_type)&v128[72 * v125];
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
                      __p.__r_.__value_.__l.__size_ = v129;
                      v269 = &v128[72 * v127];
                      *(_OWORD *)v129 = 0u;
                      *(_OWORD *)(v129 + 16) = 0u;
                      *(_OWORD *)(v129 + 32) = 0u;
                      *(_OWORD *)(v129 + 48) = 0u;
                      *(_QWORD *)(v129 + 64) = 0;
                      __p.__r_.__value_.__r.__words[2] = v129 + 72;
                      std::vector<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>::__swap_out_circular_buffer((uint64_t *)&v257, &__p);
                      v123 = v258;
                      std::__split_buffer<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info> &>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
                    }
                    else
                    {
                      v258[8] = 0;
                      *((_OWORD *)v122 + 2) = 0u;
                      *((_OWORD *)v122 + 3) = 0u;
                      v123 = v122 + 9;
                      *(_OWORD *)v122 = 0u;
                      *((_OWORD *)v122 + 1) = 0u;
                      v124 = v118;
                    }
                    v258 = v123;
                    *((_BYTE *)v123 - 72) = 1;
                    *(v123 - 5) = v124;
                    *(v123 - 4) = v99;
                  }
                  else
                  {
                    v117 = v116[7];
                  }
                  if (v72 == 7)
                  {
                    v130 = *(uint64_t **)(*(_QWORD *)(*a3 + 40) + 16 * v69);
                    std::string::basic_string[abi:ne180100]<0>(&p_p, "sframe");
                    v131 = (const turi::sframe *)turi::query_eval::node_info::any_p<turi::sframe>(v130, (uint64_t)&p_p);
                    turi::sframe::sframe((turi::sframe *)&__p, v131);
                    if ((v262[15] & 0x80000000) != 0)
                      operator delete(p_p);
                    if (v269)
                    {
                      for (i = 0; i < (unint64_t)v269; ++i)
                      {
                        v133 = v257;
                        turi::sframe::select_column((uint64_t)&__p, i, &v265);
                        p_p = v70;
                        *(_OWORD *)v262 = *(_OWORD *)&v265.__r_.__value_.__l.__data_;
                        *(_OWORD *)&v265.__r_.__value_.__l.__data_ = 0uLL;
                        std::vector<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::push_back[abi:ne180100](&v133[9 * v117 + 6], (uint64_t)&p_p);
                        v134 = *(std::__shared_weak_count **)&v262[8];
                        if (*(_QWORD *)&v262[8])
                        {
                          v135 = (unint64_t *)(*(_QWORD *)&v262[8] + 8);
                          do
                            v136 = __ldaxr(v135);
                          while (__stlxr(v136 - 1, v135));
                          if (!v136)
                          {
                            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                            std::__shared_weak_count::__release_weak(v134);
                          }
                        }
                        v137 = (std::__shared_weak_count *)v265.__r_.__value_.__l.__size_;
                        if (v265.__r_.__value_.__l.__size_)
                        {
                          v138 = (unint64_t *)(v265.__r_.__value_.__l.__size_ + 8);
                          do
                            v139 = __ldaxr(v138);
                          while (__stlxr(v139 - 1, v138));
                          if (!v139)
                          {
                            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                            std::__shared_weak_count::__release_weak(v137);
                          }
                        }
                        ++v70;
                      }
                    }
                    turi::sframe::~sframe((turi::sframe *)&__p);
                  }
                  else
                  {
                    v140 = v257;
                    v141 = *(uint64_t **)(*(_QWORD *)(*a3 + 40) + 16 * v69);
                    std::string::basic_string[abi:ne180100]<0>(&p_p, "sarray");
                    v142 = (std::string::size_type *)turi::query_eval::node_info::any_p<turi::sframe>(v141, (uint64_t)&p_p);
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
                    __p.__r_.__value_.__l.__size_ = *v142;
                    v143 = v142[1];
                    __p.__r_.__value_.__r.__words[2] = v143;
                    if (v143)
                    {
                      v144 = (unint64_t *)(v143 + 8);
                      do
                        v145 = __ldxr(v144);
                      while (__stxr(v145 + 1, v144));
                    }
                    std::vector<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::push_back[abi:ne180100](&v140[9 * v117 + 6], (uint64_t)&__p);
                    v146 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                    if (__p.__r_.__value_.__r.__words[2])
                    {
                      v147 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                      do
                        v148 = __ldaxr(v147);
                      while (__stlxr(v148 - 1, v147));
                      if (!v148)
                      {
                        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                        std::__shared_weak_count::__release_weak(v146);
                      }
                    }
                    if ((v262[15] & 0x80000000) != 0)
                      operator delete(p_p);
                    ++v70;
                  }
                  break;
                default:
                  goto LABEL_337;
              }
              break;
            default:
LABEL_337:
              result = turi::flexible_type_fail(0);
              goto LABEL_338;
          }
        }
        else
        {
          v75 = v258;
          if ((unint64_t)v258 >= v259)
          {
            v77 = 0x8E38E38E38E38E39 * (v258 - v257);
            v78 = v77 + 1;
            if (v77 + 1 > 0x38E38E38E38E38ELL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x1C71C71C71C71C72 * ((uint64_t)(v259 - (_QWORD)v257) >> 3) > v78)
              v78 = 0x1C71C71C71C71C72 * ((uint64_t)(v259 - (_QWORD)v257) >> 3);
            if (0x8E38E38E38E38E39 * ((uint64_t)(v259 - (_QWORD)v257) >> 3) >= 0x1C71C71C71C71C7)
              v79 = 0x38E38E38E38E38ELL;
            else
              v79 = v78;
            v270 = (std::string::value_type *)&v259;
            if (v79)
              v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>((uint64_t)&v259, v79);
            else
              v80 = 0;
            v81 = (std::string::size_type)&v80[72 * v77];
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
            __p.__r_.__value_.__l.__size_ = v81;
            v269 = &v80[72 * v79];
            *(_OWORD *)v81 = 0u;
            *(_OWORD *)(v81 + 16) = 0u;
            *(_OWORD *)(v81 + 32) = 0u;
            *(_OWORD *)(v81 + 48) = 0u;
            *(_QWORD *)(v81 + 64) = 0;
            __p.__r_.__value_.__r.__words[2] = v81 + 72;
            std::vector<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>::__swap_out_circular_buffer((uint64_t *)&v257, &__p);
            v76 = v258;
            std::__split_buffer<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info> &>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v258[8] = 0;
            *((_OWORD *)v75 + 2) = 0u;
            *((_OWORD *)v75 + 3) = 0u;
            v76 = v75 + 9;
            *(_OWORD *)v75 = 0u;
            *((_OWORD *)v75 + 1) = 0u;
          }
          v258 = v76;
          *((_BYTE *)v76 - 72) = 0;
          *(v76 - 8) = v69;
          *(v76 - 7) = (uint64_t)v70;
          v70 += turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(*(_QWORD *)(*a3 + 40)
                                                                                          + 16 * v69));
          *(v258 - 6) = (uint64_t)v70;
        }
        ++v69;
        v68 = *(_QWORD *)(*a3 + 40);
      }
      while (v69 < (*(_QWORD *)(*a3 + 48) - v68) >> 4);
      v153 = v257;
      v152 = v258;
    }
    if ((char *)v152 - (char *)v153 == 72)
    {
      std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::vector(&__p, 0xAAAAAAAAAAAAAAABLL * ((v153[7] - v153[6]) >> 3));
      v154 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v155 = 0;
        v156 = 0;
        v157 = 8;
        do
        {
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v154 + v155), (uint64_t *)(v153[6] + v157));
          ++v156;
          v154 = __p.__r_.__value_.__r.__words[0];
          v155 += 16;
          v157 += 24;
        }
        while (v156 < (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
      }
      p_p = 0;
      *(_QWORD *)v262 = 0;
      *(_QWORD *)&v262[8] = 0;
      turi::sframe::sframe((uint64_t)v267, (uint64_t **)&__p, (const void ***)&p_p, 1);
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node((uint64_t)v267, (void *)v153[4], v153[5], &v265);
      turi::sframe::~sframe((turi::sframe *)v267);
      __idx[0] = (size_t)&p_p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__idx);
      v158 = (std::__shared_weak_count *)a3[1];
      v250 = (uint64_t *)*a3;
      v251 = v158;
      v10 = v240;
      if (v158)
      {
        p_shared_owners = (unint64_t *)&v158->__shared_owners_;
        do
          v160 = __ldxr(p_shared_owners);
        while (__stxr(v160 + 1, p_shared_owners));
      }
      v249 = *(_OWORD *)&v265.__r_.__value_.__l.__data_;
      if (v265.__r_.__value_.__l.__size_)
      {
        v161 = (unint64_t *)(v265.__r_.__value_.__l.__size_ + 8);
        do
          v162 = __ldxr(v161);
        while (__stxr(v162 + 1, v161));
      }
      turi::query_eval::optimization_engine::replace_node(v241, &v250, (uint64_t *)&v249);
      v163 = (std::__shared_weak_count *)*((_QWORD *)&v249 + 1);
      if (*((_QWORD *)&v249 + 1))
      {
        v164 = (unint64_t *)(*((_QWORD *)&v249 + 1) + 8);
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
      v166 = v251;
      if (v251)
      {
        v167 = (unint64_t *)&v251->__shared_owners_;
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      v169 = (std::__shared_weak_count *)v265.__r_.__value_.__l.__size_;
      if (v265.__r_.__value_.__l.__size_)
      {
        v170 = (unint64_t *)(v265.__r_.__value_.__l.__size_ + 8);
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
        }
      }
      p_p = &__p;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    }
    else
    {
      __p.__r_.__value_.__r.__words[0] = -1;
      std::vector<unsigned long>::vector(&p_p, (unint64_t)v70, &__p);
      memset(&v265, 0, sizeof(v265));
      std::vector<std::shared_ptr<turi::query_eval::node_info const>>::reserve(&v265.__r_.__value_.__l.__data_, 0x8E38E38E38E38E39 * (v258 - v257));
      v172 = v257;
      v173 = v258;
      if (v257 != v258)
      {
        v174 = 0;
        do
        {
          if (*(_BYTE *)v172)
          {
            v176 = v172[6];
            v175 = v172[7];
            v177 = 0xAAAAAAAAAAAAAAABLL * ((v175 - v176) >> 3);
            std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::vector(__idx, v177);
            if (v175 != v176)
            {
              v178 = 0;
              v179 = 0;
              if (v177 <= 1)
                v177 = 1;
              do
              {
                v180 = (_QWORD *)(v172[6] + v179);
                *((_QWORD *)p_p + *v180) = v174;
                std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(__idx[0] + v178), v180 + 1);
                ++v174;
                v179 += 24;
                v178 += 16;
                --v177;
              }
              while (v177);
            }
            memset(v247, 0, sizeof(v247));
            turi::sframe::sframe((uint64_t)v266, (uint64_t **)__idx, (const void ***)v247, 1);
            turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node((uint64_t)v266, (void *)v172[4], v172[5], &v248);
            v181 = v265.__r_.__value_.__l.__size_;
            if (v265.__r_.__value_.__l.__size_ >= v265.__r_.__value_.__r.__words[2])
            {
              v184 = (uint64_t)(v265.__r_.__value_.__l.__size_ - v265.__r_.__value_.__r.__words[0]) >> 4;
              v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 60)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v186 = v265.__r_.__value_.__r.__words[2] - v265.__r_.__value_.__r.__words[0];
              if ((uint64_t)(v265.__r_.__value_.__r.__words[2] - v265.__r_.__value_.__r.__words[0]) >> 3 > v185)
                v185 = v186 >> 3;
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF0)
                v187 = 0xFFFFFFFFFFFFFFFLL;
              else
                v187 = v185;
              v270 = &v265.__r_.__value_.__s.__data_[16];
              v188 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v265.__r_.__value_.__r.__words[2], v187);
              v190 = &v188[16 * v184];
              *(_OWORD *)v190 = v248;
              v248 = 0uLL;
              v191 = (_QWORD *)v265.__r_.__value_.__l.__size_;
              v192 = v265.__r_.__value_.__r.__words[0];
              if (v265.__r_.__value_.__l.__size_ == v265.__r_.__value_.__r.__words[0])
              {
                v195 = vdupq_n_s64(v265.__r_.__value_.__l.__size_);
                v193 = (std::string::size_type)&v188[16 * v184];
              }
              else
              {
                v193 = (std::string::size_type)&v188[16 * v184];
                do
                {
                  v194 = *((_OWORD *)v191 - 1);
                  v191 -= 2;
                  *(_OWORD *)(v193 - 16) = v194;
                  v193 -= 16;
                  *v191 = 0;
                  v191[1] = 0;
                }
                while (v191 != (_QWORD *)v192);
                v195 = *(int64x2_t *)&v265.__r_.__value_.__l.__data_;
              }
              v196 = (std::string::size_type)(v190 + 16);
              v265.__r_.__value_.__r.__words[0] = v193;
              v265.__r_.__value_.__l.__size_ = (std::string::size_type)(v190 + 16);
              *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v195;
              v197 = (char *)v265.__r_.__value_.__r.__words[2];
              v265.__r_.__value_.__r.__words[2] = (std::string::size_type)&v188[16 * v189];
              v269 = v197;
              __p.__r_.__value_.__r.__words[0] = v195.i64[0];
              std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&__p);
              v198 = (std::__shared_weak_count *)*((_QWORD *)&v248 + 1);
              v265.__r_.__value_.__l.__size_ = v196;
              if (*((_QWORD *)&v248 + 1))
              {
                v199 = (unint64_t *)(*((_QWORD *)&v248 + 1) + 8);
                do
                  v200 = __ldaxr(v199);
                while (__stlxr(v200 - 1, v199));
                if (!v200)
                {
                  ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                  std::__shared_weak_count::__release_weak(v198);
                }
              }
            }
            else
            {
              *(_OWORD *)v265.__r_.__value_.__l.__size_ = v248;
              v248 = 0uLL;
              v265.__r_.__value_.__l.__size_ = v181 + 16;
            }
            turi::sframe::~sframe((turi::sframe *)v266);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v247;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)__idx;
            std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          }
          else
          {
            std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](&v265.__r_.__value_.__l.__data_, *(__int128 **)(*(_QWORD *)(*a3 + 40) + 16 * v172[1]));
            v182 = v172[2];
            if (v182 < v172[3])
            {
              v183 = p_p;
              do
                v183[v182++] = v174++;
              while (v182 < v172[3]);
            }
          }
          v172 += 9;
        }
        while (v172 != v173);
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node((uint64_t)&v265, &__p);
      v201 = (uint64_t)(*(_QWORD *)v262 - (_QWORD)p_p) >> 3;
      if (v201 <= 1)
        v201 = 1;
      v202 = v201 - 1;
      v203 = (uint64_t *)((char *)p_p + 8);
      v204 = v241;
      v10 = v240;
      while (v202)
      {
        v205 = *v203;
        v206 = *(v203 - 1) + 1;
        --v202;
        ++v203;
        if (v206 != v205)
        {
          v246 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v207 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v208 = __ldxr(v207);
            while (__stxr(v208 + 1, v207));
          }
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t *)&v246, (uint64_t **)&p_p, __idx);
          v209 = *(_OWORD *)__idx;
          __idx[0] = 0;
          __idx[1] = 0;
          v210 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v209;
          if (v210)
          {
            v211 = (unint64_t *)&v210->__shared_owners_;
            do
              v212 = __ldaxr(v211);
            while (__stlxr(v212 - 1, v211));
            if (!v212)
            {
              ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
              std::__shared_weak_count::__release_weak(v210);
            }
          }
          v213 = (std::__shared_weak_count *)__idx[1];
          if (__idx[1])
          {
            v214 = (unint64_t *)(__idx[1] + 8);
            do
              v215 = __ldaxr(v214);
            while (__stlxr(v215 - 1, v214));
            if (!v215)
            {
              ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
              std::__shared_weak_count::__release_weak(v213);
            }
          }
          v216 = (std::__shared_weak_count *)*((_QWORD *)&v246 + 1);
          if (*((_QWORD *)&v246 + 1))
          {
            v217 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
            do
              v218 = __ldaxr(v217);
            while (__stlxr(v218 - 1, v217));
            if (!v218)
            {
              ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
              std::__shared_weak_count::__release_weak(v216);
            }
          }
          v204 = v241;
          break;
        }
      }
      v219 = (std::__shared_weak_count *)a3[1];
      v244 = (uint64_t *)*a3;
      v245 = v219;
      if (v219)
      {
        v220 = (unint64_t *)&v219->__shared_owners_;
        do
          v221 = __ldxr(v220);
        while (__stxr(v221 + 1, v220));
      }
      v243 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v222 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v223 = __ldxr(v222);
        while (__stxr(v223 + 1, v222));
      }
      turi::query_eval::optimization_engine::replace_node(v204, &v244, (uint64_t *)&v243);
      v224 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
      if (*((_QWORD *)&v243 + 1))
      {
        v225 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
        do
          v226 = __ldaxr(v225);
        while (__stlxr(v226 - 1, v225));
        if (!v226)
        {
          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
          std::__shared_weak_count::__release_weak(v224);
        }
      }
      v227 = v245;
      if (v245)
      {
        v228 = (unint64_t *)&v245->__shared_owners_;
        do
          v229 = __ldaxr(v228);
        while (__stlxr(v229 - 1, v228));
        if (!v229)
        {
          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
          std::__shared_weak_count::__release_weak(v227);
        }
      }
      v230 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v231 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v232 = __ldaxr(v231);
        while (__stlxr(v232 - 1, v231));
        if (!v232)
        {
          ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
          std::__shared_weak_count::__release_weak(v230);
        }
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v265;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (p_p)
      {
        *(_QWORD *)v262 = p_p;
        operator delete(p_p);
      }
    }
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v254, v255);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
    std::vector<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  if (v260[0])
  {
    v260[1] = v260[0];
    operator delete(v260[0]);
  }
  return v10;
}

void sub_2180FA02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, boost::detail::shared_count *a13, uint64_t a14, uint64_t a15, boost::detail::shared_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3D0]);
  a33 = (uint64_t)&a53;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (__p)
  {
    a46 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a36, (_QWORD *)a37);
  a53 = &a39;
  std::vector<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::node_info::any_p<turi::sframe>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  const char *v17;
  void *__p[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  std::string v23;
  __int128 v24;
  int64_t v25;

  v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(*a1 + 32, (const void **)a2);
  v5 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v21, "Any-parameter ");
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v21, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v22, " not valid in node of type ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  turi::query_eval::planner_node_type_to_name(__p, *((unsigned int *)a1 + 4));
  if ((v20 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v14 = v20;
  else
    v14 = (std::string::size_type)__p[1];
  v15 = std::string::append(&v23, (const std::string::value_type *)v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v25 = v15->__r_.__value_.__r.__words[2];
  v24 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = (const char *)&v24;
  if (v25 < 0)
    v17 = (const char *)v24;
  assert_msg(v5 + 40 != v4, "%s", v17);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
  if ((char)v20 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return *(_QWORD *)(v4 + 56) + 8;
}

void sub_2180FA600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
    operator delete(*(void **)(v35 - 64));
  if (a16 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(_QWORD *)v14 = *(_QWORD *)a2;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::__swap_out_circular_buffer(a1, v16);
    v8 = a1[1];
    result = std::__split_buffer<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_2180FA78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::array<unsigned long,3ul>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2180FA81C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::array<unsigned long,3ul>>::__emplace_unique_key_args<std::array<unsigned long,3ul>,std::array<unsigned long,3ul> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::array<unsigned long,3ul>>::__find_equal<std::array<unsigned long,3ul>>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::__tree<std::array<unsigned long,3ul>>::__find_equal<std::array<unsigned long,3ul>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
LABEL_2:
    while (2)
    {
      v6 = 0;
      v7 = v4;
      do
      {
        v8 = *(_QWORD *)(a3 + v6 * 8);
        v9 = v7[v6 + 4];
        if (v8 < v9)
        {
          v4 = (_QWORD *)*v7;
          result = v7;
          if (*v7)
            goto LABEL_2;
          goto LABEL_22;
        }
      }
      while (v9 >= v8 && v6++ != 2);
      v11 = 0;
      while (1)
      {
        v12 = v7[v11 + 4];
        v13 = *(_QWORD *)(a3 + v11 * 8);
        if (v12 < v13)
          break;
        if (v13 < v12 || v11++ == 2)
          goto LABEL_22;
      }
      result = v7 + 1;
      v4 = (_QWORD *)v7[1];
      if (v4)
        continue;
      break;
    }
  }
  else
  {
    v7 = result;
  }
LABEL_22:
  *a2 = v7;
  return result;
}

_QWORD *std::__tree<std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::__map_value_compare<std::array<unsigned long,3ul>,std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::less<std::array<unsigned long,3ul>>,true>,std::allocator<std::__value_type<std::array<unsigned long,3ul>,unsigned long>>>::find<std::array<unsigned long,3ul>>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t i;
  unint64_t v11;
  unint64_t v12;

  v4 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (v4)
  {
    v5 = result;
    do
    {
      v6 = 0;
      while (1)
      {
        v7 = v3[v6 + 4];
        v8 = *(_QWORD *)(a2 + v6 * 8);
        if (v7 < v8)
          break;
        if (v8 < v7 || v6++ == 2)
        {
          v5 = v3;
          break;
        }
      }
      if (v7 < v8)
        ++v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    if (v5 != result)
    {
      for (i = 0; ; ++i)
      {
        v11 = *(_QWORD *)(a2 + i * 8);
        v12 = v5[i + 4];
        if (v11 < v12)
          break;
        if (v12 < v11 || i == 2)
          return v5;
      }
    }
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::__map_value_compare<std::array<unsigned long,3ul>,std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::less<std::array<unsigned long,3ul>>,true>,std::allocator<std::__value_type<std::array<unsigned long,3ul>,unsigned long>>>::__emplace_unique_key_args<std::array<unsigned long,3ul>,std::piecewise_construct_t const&,std::tuple<std::array<unsigned long,3ul> const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v11;

  v6 = (void **)std::__tree<std::array<unsigned long,3ul>>::__find_equal<std::array<unsigned long,3ul>>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v9;
    *((_QWORD *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::vector<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 72);
      v9 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(_OWORD *)(v7 - 72) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 72;
      *((_QWORD *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = (void **)(v1 + 48);
    std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 72;
  }
}

void **std::__split_buffer<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info> &>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info> &>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info> &>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    v4 = (void **)(i - 24);
    std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

uint64_t *std::vector<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 24);
    v2 -= 24;
    *(_QWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 72;
        v7 = (void **)(v4 - 24);
        std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_on_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E7B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_on_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E7B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_project_on_source>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_project_on_source::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project(source) -> source");
}

uint64_t turi::query_eval::opt_project_on_source::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t *v7;
  const turi::sframe *v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _BOOL8 v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  _QWORD *v39;
  char *v40;
  __int128 v41;
  int64x2_t v42;
  _OWORD *v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::runtime_error *exception;
  std::string *v49;
  __int128 v50;
  uint64_t *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  __int128 v67;
  __int128 v68;
  uint64_t *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  char **v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  __int128 v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t result;
  std::runtime_error *v102;
  std::string *v103;
  __int128 v104;
  std::runtime_error *v105;
  std::string *v106;
  __int128 v107;
  uint64_t **v108;
  __int128 v109;
  uint64_t *v110;
  std::__shared_weak_count *v111;
  int64x2_t v112;
  char *v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  _OWORD v117[4];
  _BYTE __str[32];
  void *v119[2];
  __int128 v120;
  std::string v121;
  size_t __idx;
  _BYTE v123[296];
  void *__p[2];
  char v125;
  unint64_t v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  if (*(_DWORD *)(*(_QWORD *)(*a3)[5] + 16) != 7)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  v6 = *(_QWORD *)turi::query_eval::node_info::p(v3, (uint64_t)__p);
  v115 = 0;
  v116 = 0;
  v114 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v114, *(uint64_t **)(v6 + 8), *(uint64_t **)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 4);
  if (v125 < 0)
    operator delete(__p[0]);
  v7 = *(uint64_t **)(*a3)[5];
  std::string::basic_string[abi:ne180100]<0>(__str, "sframe");
  v8 = (const turi::sframe *)turi::query_eval::node_info::any_p<turi::sframe>(v7, (uint64_t)__str);
  turi::sframe::sframe((turi::sframe *)__p, v8);
  v108 = a3;
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v10 = v114;
  v9 = v115;
  v11 = (v115 - v114) >> 4;
  v12 = v11 <= v126;
  if (v11 <= v126)
  {
    v112 = 0uLL;
    v113 = 0;
    if (v114 != v115)
    {
      while (2)
      {
        v13 = 0;
        switch(v10[12])
        {
          case 0:
            v13 = *(_QWORD *)v10;
            goto LABEL_36;
          case 1:
            v13 = (uint64_t)*(double *)v10;
            goto LABEL_36;
          case 2:
            v18 = *(_QWORD *)v10;
            v19 = (char **)(*(_QWORD *)v10 + 8);
            __idx = 0;
            v20 = (char *)v19;
            if (*(char *)(v18 + 31) < 0)
              v20 = *v19;
            std::string::basic_string[abi:ne180100]<0>(__str, v20);
            v13 = std::stoll((const std::string *)__str, &__idx, 10);
            if ((__str[23] & 0x80000000) != 0)
              operator delete(*(void **)__str);
            if (*(char *)(v18 + 31) < 0)
              v21 = *(_QWORD *)(v18 + 16);
            else
              v21 = *(unsigned __int8 *)(v18 + 31);
            if (__idx != v21)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v49 = std::string::append(&v121, " cannot be interpreted as an integer");
              v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
              *(_QWORD *)&__str[16] = *((_QWORD *)&v49->__r_.__value_.__l + 2);
              *(_OWORD *)__str = v50;
              v49->__r_.__value_.__l.__size_ = 0;
              v49->__r_.__value_.__r.__words[2] = 0;
              v49->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, (const std::string *)__str);
              __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_36;
          case 3:
            v14 = *(_QWORD *)v10;
            memset(__str, 0, 24);
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v14 + 8), *(_QWORD *)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (*(_QWORD *)__str)
            {
              *(_QWORD *)&__str[8] = *(_QWORD *)__str;
              operator delete(*(void **)__str);
            }
            goto LABEL_35;
          case 4:
            v22 = *(_QWORD *)v10;
            memset(__str, 0, 24);
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v22 + 8), *(uint64_t **)(v22 + 16), (uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v121.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
            goto LABEL_35;
          case 5:
            v23 = *(_QWORD *)v10;
            memset(__str, 0, 24);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v23 + 8), *(uint64_t **)(v23 + 16), (uint64_t)(*(_QWORD *)(v23 + 16) - *(_QWORD *)(v23 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v121.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
            goto LABEL_35;
          case 6:
            v13 = (uint64_t)(*(_QWORD *)v10 << 8) >> 8;
            goto LABEL_36;
          case 7:
            goto LABEL_36;
          case 8:
            v24 = *(_QWORD *)v10;
            v25 = *(_QWORD *)(*(_QWORD *)v10 + 16);
            *(_QWORD *)&v117[0] = *(_QWORD *)(*(_QWORD *)v10 + 8);
            *((_QWORD *)&v117[0] + 1) = v25;
            if (v25)
            {
              v26 = (unsigned int *)(v25 + 8);
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 1, v26));
            }
            v28 = *(_OWORD *)(v24 + 24);
            v29 = *(_OWORD *)(v24 + 56);
            v117[2] = *(_OWORD *)(v24 + 40);
            v117[3] = v29;
            v117[1] = v28;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)v117 + 1);
            goto LABEL_35;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)v10 + 8);
            turi::flexible_type_fail(0);
            if (v119[1])
            {
              *(void **)&v120 = v119[1];
              operator delete(v119[1]);
            }
            if (*(_QWORD *)&__str[16])
            {
              *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
              operator delete(*(void **)&__str[16]);
            }
            v15 = *(std::__shared_weak_count **)&__str[8];
            if (*(_QWORD *)&__str[8])
            {
              v16 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
              do
                v17 = __ldaxr(v16);
              while (__stlxr(v17 - 1, v16));
              if (!v17)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
LABEL_35:
            v13 = 0;
LABEL_36:
            turi::sframe::select_column((uint64_t)__p, v13, v117);
            v30 = v112.i64[1];
            if (v112.i64[1] >= (unint64_t)v113)
            {
              v31 = (v112.i64[1] - v112.i64[0]) >> 4;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 60)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v33 = (uint64_t)&v113[-v112.i64[0]];
              if ((uint64_t)&v113[-v112.i64[0]] >> 3 > v32)
                v32 = v33 >> 3;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
                v34 = 0xFFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              v119[0] = &v113;
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v113, v34);
              v37 = &v35[16 * v31];
              *(_OWORD *)v37 = v117[0];
              v117[0] = 0uLL;
              v38 = (_QWORD *)v112.i64[1];
              v39 = (_QWORD *)v112.i64[0];
              if (v112.i64[1] == v112.i64[0])
              {
                v42 = vdupq_n_s64(v112.u64[1]);
                v40 = &v35[16 * v31];
              }
              else
              {
                v40 = &v35[16 * v31];
                do
                {
                  v41 = *((_OWORD *)v38 - 1);
                  v38 -= 2;
                  *((_OWORD *)v40 - 1) = v41;
                  v40 -= 16;
                  *v38 = 0;
                  v38[1] = 0;
                }
                while (v38 != v39);
                v42 = v112;
              }
              v43 = v37 + 16;
              v112.i64[0] = (uint64_t)v40;
              *(int64x2_t *)&__str[8] = v42;
              v44 = v113;
              v113 = &v35[16 * v36];
              *(_QWORD *)&__str[24] = v44;
              *(_QWORD *)__str = v42.i64[0];
              std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)__str);
              v45 = (std::__shared_weak_count *)*((_QWORD *)&v117[0] + 1);
              v112.i64[1] = (uint64_t)v43;
              if (*((_QWORD *)&v117[0] + 1))
              {
                v46 = (unint64_t *)(*((_QWORD *)&v117[0] + 1) + 8);
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 - 1, v46));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
              }
            }
            else
            {
              *(_OWORD *)v112.i64[1] = v117[0];
              v112.i64[1] = v30 + 16;
            }
            v10 += 16;
            if (v10 == v9)
              break;
            continue;
          default:
LABEL_151:
            result = turi::flexible_type_fail(0);
            __break(1u);
            return result;
        }
        break;
      }
    }
    v51 = *(uint64_t **)(*v108)[5];
    std::string::basic_string[abi:ne180100]<0>(&v121, "begin_index");
    v52 = (_BYTE *)turi::query_eval::node_info::p(v51, (uint64_t)&v121);
    v53 = 0;
    switch(v52[12])
    {
      case 0:
        v53 = *(_QWORD *)v52;
        goto LABEL_91;
      case 1:
        v53 = (uint64_t)*(double *)v52;
        goto LABEL_91;
      case 2:
        v57 = *(_QWORD *)v52;
        v58 = (char **)(*(_QWORD *)v52 + 8);
        __idx = 0;
        v59 = (char *)v58;
        if (*(char *)(v57 + 31) < 0)
          v59 = *v58;
        std::string::basic_string[abi:ne180100]<0>(__str, v59);
        v53 = std::stoll((const std::string *)__str, &__idx, 10);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        if (*(char *)(v57 + 31) < 0)
          v60 = *(_QWORD *)(v57 + 16);
        else
          v60 = *(unsigned __int8 *)(v57 + 31);
        if (__idx != v60)
        {
          v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v106 = std::string::append((std::string *)v117, " cannot be interpreted as an integer");
          v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
          *(_QWORD *)&__str[16] = *((_QWORD *)&v106->__r_.__value_.__l + 2);
          *(_OWORD *)__str = v107;
          v106->__r_.__value_.__l.__size_ = 0;
          v106->__r_.__value_.__r.__words[2] = 0;
          v106->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v105, (const std::string *)__str);
          __cxa_throw(v105, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        goto LABEL_91;
      case 3:
        v54 = *(_QWORD *)v52;
        memset(__str, 0, 24);
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v54 + 8), *(_QWORD *)(v54 + 16), (uint64_t)(*(_QWORD *)(v54 + 16) - *(_QWORD *)(v54 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (*(_QWORD *)__str)
        {
          *(_QWORD *)&__str[8] = *(_QWORD *)__str;
          operator delete(*(void **)__str);
        }
        goto LABEL_88;
      case 4:
        v61 = *(_QWORD *)v52;
        memset(__str, 0, 24);
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v61 + 8), *(uint64_t **)(v61 + 16), (uint64_t)(*(_QWORD *)(v61 + 16) - *(_QWORD *)(v61 + 8)) >> 4);
        turi::flexible_type_fail(0);
        *(_QWORD *)&v117[0] = __str;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v117);
        goto LABEL_83;
      case 5:
        v62 = *(_QWORD *)v52;
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v62 + 8), *(uint64_t **)(v62 + 16), (uint64_t)(*(_QWORD *)(v62 + 16) - *(_QWORD *)(v62 + 8)) >> 5);
        turi::flexible_type_fail(0);
        *(_QWORD *)&v117[0] = __str;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v117);
LABEL_83:
        v53 = 0;
        goto LABEL_91;
      case 6:
        v53 = (uint64_t)(*(_QWORD *)v52 << 8) >> 8;
        goto LABEL_91;
      case 7:
        goto LABEL_91;
      case 8:
        v63 = *(_QWORD *)v52;
        v64 = *(_QWORD *)(*(_QWORD *)v52 + 16);
        *(_QWORD *)__str = *(_QWORD *)(*(_QWORD *)v52 + 8);
        *(_QWORD *)&__str[8] = v64;
        if (v64)
        {
          v65 = (unsigned int *)(v64 + 8);
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        v67 = *(_OWORD *)(v63 + 24);
        v68 = *(_OWORD *)(v63 + 56);
        *(_OWORD *)v119 = *(_OWORD *)(v63 + 40);
        v120 = v68;
        *(_OWORD *)&__str[16] = v67;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
        goto LABEL_88;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)v52 + 8);
        turi::flexible_type_fail(0);
        if (v119[1])
        {
          *(void **)&v120 = v119[1];
          operator delete(v119[1]);
        }
        if (*(_QWORD *)&__str[16])
        {
          *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
          operator delete(*(void **)&__str[16]);
        }
        v53 = *(_QWORD *)&__str[8];
        if (!*(_QWORD *)&__str[8])
          goto LABEL_91;
        v55 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v53);
        }
LABEL_88:
        v53 = 0;
LABEL_91:
        if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v121.__r_.__value_.__l.__data_);
        v69 = *(uint64_t **)(*v108)[5];
        std::string::basic_string[abi:ne180100]<0>(&v121, "end_index");
        v70 = (_BYTE *)turi::query_eval::node_info::p(v69, (uint64_t)&v121);
        v71 = 0;
        switch(v70[12])
        {
          case 0:
            v71 = *(_QWORD *)v70;
            goto LABEL_121;
          case 1:
            v71 = (uint64_t)*(double *)v70;
            goto LABEL_121;
          case 2:
            v75 = *(_QWORD *)v70;
            v76 = (char **)(*(_QWORD *)v70 + 8);
            __idx = 0;
            v77 = (char *)v76;
            if (*(char *)(v75 + 31) < 0)
              v77 = *v76;
            std::string::basic_string[abi:ne180100]<0>(__str, v77);
            v71 = std::stoll((const std::string *)__str, &__idx, 10);
            if ((__str[23] & 0x80000000) != 0)
              operator delete(*(void **)__str);
            if (*(char *)(v75 + 31) < 0)
              v78 = *(_QWORD *)(v75 + 16);
            else
              v78 = *(unsigned __int8 *)(v75 + 31);
            if (__idx != v78)
            {
              v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v103 = std::string::append((std::string *)v117, " cannot be interpreted as an integer");
              v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
              *(_QWORD *)&__str[16] = *((_QWORD *)&v103->__r_.__value_.__l + 2);
              *(_OWORD *)__str = v104;
              v103->__r_.__value_.__l.__size_ = 0;
              v103->__r_.__value_.__r.__words[2] = 0;
              v103->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v102, (const std::string *)__str);
              __cxa_throw(v102, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_121;
          case 3:
            v72 = *(_QWORD *)v70;
            memset(__str, 0, 24);
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v72 + 8), *(_QWORD *)(v72 + 16), (uint64_t)(*(_QWORD *)(v72 + 16) - *(_QWORD *)(v72 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (*(_QWORD *)__str)
            {
              *(_QWORD *)&__str[8] = *(_QWORD *)__str;
              operator delete(*(void **)__str);
            }
            goto LABEL_120;
          case 4:
            v79 = *(_QWORD *)v70;
            memset(__str, 0, 24);
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v79 + 8), *(uint64_t **)(v79 + 16), (uint64_t)(*(_QWORD *)(v79 + 16) - *(_QWORD *)(v79 + 8)) >> 4);
            turi::flexible_type_fail(0);
            *(_QWORD *)&v117[0] = __str;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v117);
            goto LABEL_120;
          case 5:
            v80 = *(_QWORD *)v70;
            memset(__str, 0, 24);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v80 + 8), *(uint64_t **)(v80 + 16), (uint64_t)(*(_QWORD *)(v80 + 16) - *(_QWORD *)(v80 + 8)) >> 5);
            turi::flexible_type_fail(0);
            *(_QWORD *)&v117[0] = __str;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v117);
            goto LABEL_120;
          case 6:
            v71 = (uint64_t)(*(_QWORD *)v70 << 8) >> 8;
            goto LABEL_121;
          case 7:
            goto LABEL_121;
          case 8:
            v81 = *(_QWORD *)v70;
            v82 = *(_QWORD *)(*(_QWORD *)v70 + 16);
            *(_QWORD *)__str = *(_QWORD *)(*(_QWORD *)v70 + 8);
            *(_QWORD *)&__str[8] = v82;
            if (v82)
            {
              v83 = (unsigned int *)(v82 + 8);
              do
                v84 = __ldxr(v83);
              while (__stxr(v84 + 1, v83));
            }
            v85 = *(_OWORD *)(v81 + 24);
            v86 = *(_OWORD *)(v81 + 56);
            *(_OWORD *)v119 = *(_OWORD *)(v81 + 40);
            v120 = v86;
            *(_OWORD *)&__str[16] = v85;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
            goto LABEL_120;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)v70 + 8);
            turi::flexible_type_fail(0);
            if (v119[1])
            {
              *(void **)&v120 = v119[1];
              operator delete(v119[1]);
            }
            if (*(_QWORD *)&__str[16])
            {
              *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
              operator delete(*(void **)&__str[16]);
            }
            v71 = *(_QWORD *)&__str[8];
            if (!*(_QWORD *)&__str[8])
              goto LABEL_121;
            v73 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v71);
            }
LABEL_120:
            v71 = 0;
LABEL_121:
            if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v121.__r_.__value_.__l.__data_);
            memset(__str, 0, 24);
            turi::sframe::sframe((uint64_t)v123, (uint64_t **)&v112, (const void ***)__str, 1);
            turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node((uint64_t)v123, (void *)v53, v71, v117);
            turi::sframe::~sframe((turi::sframe *)v123);
            v121.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
            v87 = (std::__shared_weak_count *)v108[1];
            v110 = *v108;
            v111 = v87;
            if (v87)
            {
              p_shared_owners = (unint64_t *)&v87->__shared_owners_;
              do
                v89 = __ldxr(p_shared_owners);
              while (__stxr(v89 + 1, p_shared_owners));
            }
            v109 = v117[0];
            if (*((_QWORD *)&v117[0] + 1))
            {
              v90 = (unint64_t *)(*((_QWORD *)&v117[0] + 1) + 8);
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
            }
            turi::query_eval::optimization_engine::replace_node(a2, &v110, (uint64_t *)&v109);
            v92 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
            if (*((_QWORD *)&v109 + 1))
            {
              v93 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            v95 = v111;
            if (v111)
            {
              v96 = (unint64_t *)&v111->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
            v98 = (std::__shared_weak_count *)*((_QWORD *)&v117[0] + 1);
            if (*((_QWORD *)&v117[0] + 1))
            {
              v99 = (unint64_t *)(*((_QWORD *)&v117[0] + 1) + 8);
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
            }
            *(_QWORD *)__str = &v112;
            std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
            v12 = 1;
            break;
          default:
            goto LABEL_151;
        }
        break;
      default:
        goto LABEL_151;
    }
  }
  turi::sframe::~sframe((turi::sframe *)__p);
  __p[0] = &v114;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v12;
}

void sub_2180FBB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;
  int v53;

  if (a39 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v53 & 1) == 0)
    {
LABEL_8:
      if (a52 < 0)
        operator delete(a47);
      a47 = &a17;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
      turi::sframe::~sframe((turi::sframe *)&STACK[0x248]);
      STACK[0x248] = (unint64_t)&a20;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x248]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v53)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v52);
  goto LABEL_8;
}

void std::__shared_ptr_emplace<turi::query_eval::opt_append_on_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_append_on_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_append_on_source>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_append_on_source::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "append(source, source) -> source");
}

BOOL turi::query_eval::opt_append_transform::transform_applies(uint64_t a1, int a2)
{
  return a2 == 1;
}

BOOL turi::query_eval::opt_append_on_source::apply_transform(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _BOOL8 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t *v68;
  std::__shared_weak_count *v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t *v74;
  _QWORD v75[10];
  uint64_t *v76;
  _QWORD *v77;
  char v78;
  _BYTE v79[296];
  uint64_t v80;
  _QWORD v81[36];
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  v4 = *(_QWORD **)(*a3 + 40);
  v5 = *(_QWORD *)(*a3 + 48) - (_QWORD)v4;
  v80 = v5 >> 4;
  if (!v5)
  {
    v74 = &v80;
    turi::query_eval::opt_append_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(void)#1}::operator()();
  }
  if ((*(_DWORD *)(*v4 + 16) & 0xFFFFFFFE) != 6 || (*(_DWORD *)(v4[2] + 16) & 0xFFFFFFFE) != 6)
    return 0;
  v8 = (std::__shared_weak_count *)a3[1];
  v72 = v3;
  v73 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  turi::query_eval::opt_append_on_source::try_sframe_append((uint64_t)&v72, &v80);
  v11 = v73;
  if (v73)
  {
    v12 = (unint64_t *)&v73->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if ((_BYTE)v80)
  {
    turi::sframe::sframe((turi::sframe *)v79, (const turi::sframe *)v81);
    if (v82)
      v14 = v81[4];
    else
      v14 = 0;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node((uint64_t)v79, 0, v14, &v74);
    turi::sframe::~sframe((turi::sframe *)v79);
    v15 = (std::__shared_weak_count *)a3[1];
    v70 = (uint64_t *)*a3;
    v71 = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v68 = v74;
    v69 = (std::__shared_weak_count *)v75[0];
    if (v75[0])
    {
      v18 = (unint64_t *)(v75[0] + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    turi::query_eval::optimization_engine::replace_node(a2, &v70, (uint64_t *)&v68);
    v20 = v69;
    if (v69)
    {
      v21 = (unint64_t *)&v69->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v71;
    if (v71)
    {
      v24 = (unint64_t *)&v71->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)v75[0];
    if (v75[0])
    {
      v27 = (unint64_t *)(v75[0] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = 1;
  }
  else
  {
    v30 = (std::__shared_weak_count *)a3[1];
    v66 = *a3;
    v67 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    turi::query_eval::opt_append_on_source::try_sarray_append((uint64_t)&v66, &v74);
    v33 = v67;
    if (v67)
    {
      v34 = (unint64_t *)&v67->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v29 = (_BYTE)v74 != 0;
    if ((_BYTE)v74)
    {
      std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::sarray<turi::flexible_type>&,void>((uint64_t)v75, &v62);
      if (!v78 || (v36 = v76, v77 == v76))
      {
        v37 = 0;
      }
      else
      {
        v37 = 0;
        v38 = v77 - v76;
        if (v38 <= 1)
          v38 = 1;
        do
        {
          v39 = *v36++;
          v37 += v39;
          --v38;
        }
        while (v38);
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::make_planner_node(&v62, 0, v37, &v64);
      v40 = v63;
      if (v63)
      {
        v41 = (unint64_t *)&v63->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = (std::__shared_weak_count *)a3[1];
      v60 = (uint64_t *)*a3;
      v61 = v43;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      v58 = v64;
      v59 = v65;
      if (v65)
      {
        v46 = (unint64_t *)&v65->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      turi::query_eval::optimization_engine::replace_node(a2, &v60, &v58);
      v48 = v59;
      if (v59)
      {
        v49 = (unint64_t *)&v59->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v61;
      if (v61)
      {
        v52 = (unint64_t *)&v61->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = v65;
      if (v65)
      {
        v55 = (unint64_t *)&v65->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
    }
    turi::sarray<turi::flexible_type>::~sarray((uint64_t)v75);
  }
  turi::sframe::~sframe((turi::sframe *)v81);
  return v29;
}

void sub_2180FC2FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  turi::sarray<turi::flexible_type>::~sarray(v2);
  turi::sframe::~sframe((turi::sframe *)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void turi::query_eval::opt_append_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/optimizations/append_transforms.hpp", 136);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"n->inputs.size()", 16);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"!=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/optimizations/append_transforms.hpp", "operator()", 92, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::opt_append_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180FC534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::opt_append_on_source::try_sframe_append(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  double v7;
  int v8;
  unsigned int v9;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  double v14;
  int v15;
  unsigned int v16;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  void *v33;
  void *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t i;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  BOOL v49;
  char v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  size_t v85;
  double *v86;
  double *v87;
  unint64_t v88;
  double *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  unint64_t v101;
  unint64_t v102;
  BOOL v103;
  void *v104;
  unint64_t v105;
  unint64_t v106;
  BOOL v107;
  double v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v112;
  unint64_t v113;
  unint64_t v114;
  BOOL v115;
  void *v116;
  void *v117;
  unsigned int v118;
  unint64_t v119;
  unint64_t v120;
  BOOL v121;
  void *v122;
  unint64_t v123;
  unint64_t v124;
  BOOL v125;
  unint64_t v126;
  unint64_t v127;
  BOOL v128;
  BOOL v129;
  uint64_t *v130;
  uint64_t v131;
  double v132;
  double v133;
  _BYTE *v134;
  uint64_t v135;
  turi::sframe *v136;
  uint64_t **v137;
  char v138;
  uint64_t v139;
  std::string __p[12];
  _BYTE v141[24];
  unint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  turi::sframe::sframe((turi::sframe *)v141);
  v4 = *(uint64_t ***)(*(_QWORD *)a1 + 40);
  v137 = *(uint64_t ***)(*(_QWORD *)a1 + 48);
  if (v4 == v137)
    goto LABEL_260;
  v136 = (turi::sframe *)(a2 + 8);
  while (1)
  {
    v5 = *v4;
    if (*((_DWORD *)*v4 + 4) != 7)
      break;
    std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
    v6 = turi::query_eval::node_info::p(v5, (uint64_t)__p);
    v7 = *(double *)v6;
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(unsigned __int8 *)(v6 + 12);
    if (v9 <= 9 && ((1 << v9) & 0x33C) != 0)
    {
      do
        v11 = __ldaxr(*(unint64_t **)&v7);
      while (__stlxr(v11 + 1, *(unint64_t **)&v7));
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v12 = *v4;
    std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
    v13 = turi::query_eval::node_info::p(v12, (uint64_t)__p);
    v14 = *(double *)v13;
    v15 = *(_DWORD *)(v13 + 8);
    v16 = *(unsigned __int8 *)(v13 + 12);
    if (v16 <= 9 && ((1 << v16) & 0x33C) != 0)
    {
      do
        v18 = __ldaxr(*(unint64_t **)&v14);
      while (__stlxr(v18 + 1, *(unint64_t **)&v14));
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v19 = *v4;
    std::string::basic_string[abi:ne180100]<0>(__p, "sframe");
    v20 = turi::query_eval::node_info::any_p<turi::sframe>(v19, (uint64_t)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    switch(v9)
    {
      case 0u:
        if (v7 != 0.0)
          goto LABEL_21;
        goto LABEL_67;
      case 1u:
        if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFLL) == 0)
          goto LABEL_67;
        goto LABEL_21;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 7u:
      case 8u:
      case 9u:
        goto LABEL_21;
      case 6u:
        if ((*(_QWORD *)&v7 & 0xFFFFFFFFFFFFFFLL) != 0 || v8)
        {
LABEL_21:
          *a2 = 0;
          turi::sframe::sframe(v136, (const turi::sframe *)v141);
          v21 = 0;
          goto LABEL_22;
        }
LABEL_67:
        if (*(_BYTE *)(v20 + 288))
          v42 = *(_QWORD *)(v20 + 32);
        else
          v42 = 0;
        switch(v16)
        {
          case 0u:
            if (*(_QWORD *)&v14 != v42)
              goto LABEL_21;
            break;
          case 1u:
            if (v14 != (double)v42)
              goto LABEL_21;
            break;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_21;
          case 6u:
            if (v42 != (uint64_t)(*(_QWORD *)&v14 << 8) >> 8 || v15 != 0)
              goto LABEL_21;
            break;
          default:
            goto LABEL_271;
        }
        v134 = a2;
        v135 = a1;
        if (v142)
        {
          v44 = 0;
          for (i = 0; i < v142; ++i)
          {
            v46 = *(_QWORD *)(v20 + 40);
            if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v20 + 48) - v46) >> 3) <= i)
              turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
            v47 = (__int128 *)(v46 + v44);
            if (*((char *)v47 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v47, *((_QWORD *)v47 + 1));
            }
            else
            {
              v48 = *v47;
              __p[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v47 + 2);
              *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v48;
            }
            turi::sframe::set_column_name((uint64_t)v141, i, __p);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            v44 += 24;
          }
        }
        switch(v16)
        {
          case 0u:
            switch(v9)
            {
              case 0u:
                v49 = *(_QWORD *)&v7 == *(_QWORD *)&v14;
                goto LABEL_169;
              case 1u:
                v95 = v7;
                v96 = (double)*(uint64_t *)&v14;
                goto LABEL_168;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_158;
              case 6u:
                if (*(_QWORD *)&v14 != (uint64_t)(*(_QWORD *)&v7 << 8) >> 8)
                  goto LABEL_158;
                a2 = v134;
                a1 = v135;
                if (!v8)
                  goto LABEL_257;
                goto LABEL_159;
              default:
                goto LABEL_271;
            }
          case 1u:
            switch(v9)
            {
              case 0u:
                v95 = v14;
                v96 = (double)*(uint64_t *)&v7;
                goto LABEL_168;
              case 1u:
                v95 = v7;
                v96 = v14;
LABEL_168:
                v49 = v95 == v96;
                goto LABEL_169;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_158;
              case 6u:
                v97 = vabdd_f64((double)v8 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v7 << 8) >> 8), v14);
                goto LABEL_180;
              default:
                goto LABEL_271;
            }
          case 2u:
            if (v9 - 3 < 7 || v9 < 2)
              goto LABEL_158;
            if (v9 != 2)
              goto LABEL_271;
            if (*(char *)(*(_QWORD *)&v7 + 31) < 0)
              v85 = *(_QWORD *)(*(_QWORD *)&v7 + 16);
            else
              v85 = *(unsigned __int8 *)(*(_QWORD *)&v7 + 31);
            if (*(char *)(*(_QWORD *)&v14 + 31) < 0)
              v98 = *(_QWORD *)(*(_QWORD *)&v14 + 16);
            else
              v98 = *(unsigned __int8 *)(*(_QWORD *)&v14 + 31);
            if (v85 != v98)
              goto LABEL_158;
            v99 = (unsigned __int8 *)(*(_QWORD *)&v7 + 8);
            if ((*(_BYTE *)(*(_QWORD *)&v7 + 31) & 0x80) != 0)
              v99 = *(unsigned __int8 **)v99;
            v100 = (unsigned __int8 *)(*(_QWORD *)&v14 + 8);
            if ((*(_BYTE *)(*(_QWORD *)&v14 + 31) & 0x80) != 0)
              v100 = *(unsigned __int8 **)v100;
            a1 = v135;
            if ((*(_BYTE *)(*(_QWORD *)&v7 + 31) & 0x80) == 0)
            {
              for (; v85; --v85)
              {
                if (*v99 != *v100)
                {
LABEL_158:
                  a2 = v134;
                  a1 = v135;
                  goto LABEL_159;
                }
                ++v99;
                ++v100;
              }
              goto LABEL_178;
            }
            a2 = v134;
            if (memcmp(v99, v100, v85))
              goto LABEL_159;
            v21 = 1;
            do
            {
LABEL_23:
              v22 = __ldaxr(*(unint64_t **)&v14);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, *(unint64_t **)&v14));
            if (v23)
              v24 = 1;
            else
              v24 = *(_QWORD *)&v14 == 0;
            if (!v24)
            {
              if (*(char *)(*(_QWORD *)&v14 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v14 + 8));
              v25 = v14;
              v26 = 0x1012C404EF22A49;
              goto LABEL_207;
            }
            goto LABEL_208;
          case 3u:
            if (v9 > 9)
              goto LABEL_271;
            if (v9 != 3)
              goto LABEL_158;
            v86 = *(double **)(*(_QWORD *)&v7 + 8);
            v87 = *(double **)(*(_QWORD *)&v7 + 16);
            v88 = v87 - v86;
            v89 = *(double **)(*(_QWORD *)&v14 + 8);
            if (v88 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v14 + 16) - (_QWORD)v89) >> 3)
              goto LABEL_158;
            if (v87 == v86)
            {
              v21 = 1;
              a2 = v134;
              a1 = v135;
              do
              {
LABEL_199:
                v101 = __ldaxr(*(unint64_t **)&v14);
                v102 = v101 - 1;
              }
              while (__stlxr(v102, *(unint64_t **)&v14));
              if (v102)
                v103 = 1;
              else
                v103 = *(_QWORD *)&v14 == 0;
              if (!v103)
              {
                v104 = *(void **)(*(_QWORD *)&v14 + 8);
                if (v104)
                {
                  *(_QWORD *)(*(_QWORD *)&v14 + 16) = v104;
                  operator delete(v104);
                }
                v25 = v14;
                v26 = 0x1080C409938AC02;
                goto LABEL_207;
              }
              goto LABEL_208;
            }
            if (v88 <= 1)
              v90 = 1;
            else
              v90 = v87 - v86;
            a2 = v134;
            a1 = v135;
            if (*v86 != *v89)
              goto LABEL_159;
            v91 = 1;
            do
            {
              v92 = v91;
              if (v90 == v91)
                break;
              v93 = v86[v91];
              v94 = v89[v91++];
            }
            while (v93 == v94);
            v50 = v92 >= v88;
LABEL_165:
            if ((v50 & 1) == 0)
              goto LABEL_159;
            goto LABEL_160;
          case 4u:
            if (v9 > 9)
              goto LABEL_271;
            if (v9 != 4)
              goto LABEL_158;
            v50 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v138, (uint64_t *)(*(_QWORD *)&v7 + 8), (_QWORD *)(*(_QWORD *)&v14 + 8));
            goto LABEL_164;
          case 5u:
            if (v9 > 9)
              goto LABEL_271;
            if (v9 != 5)
              goto LABEL_158;
            v50 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v138, (uint64_t **)(*(_QWORD *)&v7 + 8), (uint64_t **)(*(_QWORD *)&v14 + 8));
            goto LABEL_164;
          case 6u:
            switch(v9)
            {
              case 0u:
                if (*(_QWORD *)&v7 != (uint64_t)(*(_QWORD *)&v14 << 8) >> 8)
                  goto LABEL_158;
                a2 = v134;
                a1 = v135;
                if (!v15)
                  goto LABEL_257;
                goto LABEL_159;
              case 1u:
                v97 = vabdd_f64(v7, (double)v15 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v14 << 8) >> 8));
LABEL_180:
                a2 = v134;
                a1 = v135;
                if (v97 < 0.0000005)
                  goto LABEL_257;
                goto LABEL_159;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_158;
              case 6u:
                if (((*(_QWORD *)&v14 ^ *(_QWORD *)&v7) & 0xFFFFFFFFFFFFFFLL) != 0)
                  goto LABEL_158;
                v49 = v8 == v15;
LABEL_169:
                a2 = v134;
                a1 = v135;
                if (!v49)
                  goto LABEL_159;
                goto LABEL_257;
              default:
                goto LABEL_271;
            }
          case 7u:
            if (v9 < 7 || v9 - 8 < 2)
              goto LABEL_158;
            if (v9 != 7)
              goto LABEL_271;
            goto LABEL_178;
          case 8u:
            if (v9 < 8 || v9 == 9)
              goto LABEL_158;
            if (v9 != 8)
              goto LABEL_271;
            v50 = turi::image_type::operator==(*(_QWORD *)&v7 + 8, *(_QWORD *)&v14 + 8);
LABEL_164:
            a2 = v134;
            a1 = v135;
            goto LABEL_165;
          case 9u:
            if (v9 < 9)
              goto LABEL_158;
            if (v9 != 9)
              goto LABEL_271;
            if (*(_QWORD *)&v14 == *(_QWORD *)&v7)
              goto LABEL_178;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v7 + 8, *(_QWORD *)&v14 + 8))
              goto LABEL_158;
            v52 = *(char **)(*(_QWORD *)&v7 + 24);
            v51 = *(char **)(*(_QWORD *)&v7 + 32);
            v53 = v51 - v52;
            if (v51 == v52)
              goto LABEL_178;
            if (!*(_QWORD *)(*(_QWORD *)&v7 + 8))
              goto LABEL_178;
            v54 = 1;
            do
            {
              v55 = *(_QWORD *)v52;
              v52 += 8;
              v54 *= v55;
            }
            while (v52 != v51);
            if (!v54)
              goto LABEL_178;
            v139 = 0;
            std::vector<unsigned long>::vector(__p, v53 >> 3, &v139);
            v56 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
            v57 = **(_QWORD **)(*(_QWORD *)&v14 + 8);
            v58 = __p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0];
            v59 = (uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 3;
            v60 = v59 - 1;
            if (v59 <= 1)
              v61 = 1;
            else
              v61 = (uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 3;
            break;
          default:
            goto LABEL_271;
        }
        break;
      default:
LABEL_271:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
    while (1)
    {
      if (*((_QWORD *)&v56 + 1) == (_QWORD)v56)
      {
        v69 = 0;
        v70 = *(double *)(**(_QWORD **)(*(_QWORD *)&v7 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v7 + 72));
      }
      else
      {
        v62 = 0;
        v63 = *(uint64_t **)(*(_QWORD *)&v7 + 48);
        v64 = (uint64_t *)v56;
        v65 = v61;
        do
        {
          v67 = *v64++;
          v66 = v67;
          v68 = *v63++;
          v62 += v68 * v66;
          --v65;
        }
        while (v65);
        v69 = 0;
        v70 = *(double *)(**(_QWORD **)(*(_QWORD *)&v7 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v7 + 72) + v62));
        v71 = *(uint64_t **)(*(_QWORD *)&v14 + 48);
        v72 = (uint64_t *)v56;
        v73 = v61;
        do
        {
          v75 = *v72++;
          v74 = v75;
          v76 = *v71++;
          v69 += v76 * v74;
          --v73;
        }
        while (v73);
      }
      v77 = *(double *)(v57 + 8 * (*(_QWORD *)(*(_QWORD *)&v14 + 72) + v69));
      if (v70 != v77)
      {
LABEL_123:
        v132 = v70;
        v133 = v77;
        if ((_QWORD)v56)
        {
          __p[0].__r_.__value_.__l.__size_ = v56;
          operator delete((void *)v56);
        }
        a2 = v134;
        a1 = v135;
        if (v132 != v133)
        {
LABEL_159:
          turi::sframe::append((turi::sframe *)v141, (const turi::sframe *)v20, (turi::sframe *)__p);
          turi::sframe::operator=((uint64_t)v141, (uint64_t)__p);
          turi::sframe::~sframe((turi::sframe *)__p);
        }
LABEL_160:
        v21 = 1;
        goto LABEL_22;
      }
      v78 = v59;
      v79 = v59 - 1;
      if (v58 >= 1)
        break;
LABEL_121:
      if (v79 < 0 || !v78)
        goto LABEL_123;
    }
    v80 = *(_QWORD *)(*(_QWORD *)&v7 + 24);
    v81 = *(_QWORD *)(v56 + 8 * v60) + 1;
    *(_QWORD *)(v56 + 8 * v60) = v81;
    v82 = (v58 & 0xFFFFFFFFFFFFFFF8) - 16;
    v79 = v59 - 1;
    if (v81 < *(_QWORD *)(v80 + 8 * v60))
    {
      v78 = 1;
      v79 = v59 - 1;
      goto LABEL_121;
    }
    while (1)
    {
      *(_QWORD *)(v56 + v82 + 8) = 0;
      if (v79 <= 0)
        break;
      --v79;
      v83 = *(_QWORD *)(v56 + v82) + 1;
      *(_QWORD *)(v56 + v82) = v83;
      v84 = *(_QWORD *)(v80 + v82);
      v82 -= 8;
      if (v83 < v84)
      {
        v78 = 1;
        goto LABEL_121;
      }
    }
    __p[0].__r_.__value_.__l.__size_ = v56;
    operator delete((void *)v56);
LABEL_178:
    v21 = 1;
    a2 = v134;
    a1 = v135;
LABEL_22:
    switch(v16)
    {
      case 2u:
        goto LABEL_23;
      case 3u:
        goto LABEL_199;
      case 4u:
        do
        {
          v27 = __ldaxr(*(unint64_t **)&v14);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, *(unint64_t **)&v14));
        if (v28)
          v29 = 1;
        else
          v29 = *(_QWORD *)&v14 == 0;
        if (v29)
          goto LABEL_208;
        __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)&v14 + 8;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        goto LABEL_53;
      case 5u:
        do
        {
          v36 = __ldaxr(*(unint64_t **)&v14);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, *(unint64_t **)&v14));
        if (v37)
          v38 = 1;
        else
          v38 = *(_QWORD *)&v14 == 0;
        if (v38)
          goto LABEL_208;
        __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)&v14 + 8;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_53:
        v25 = v14;
        v26 = 0x1020C405E66F15BLL;
        break;
      case 8u:
        do
        {
          v39 = __ldaxr(*(unint64_t **)&v14);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, *(unint64_t **)&v14));
        if (v40)
          v41 = 1;
        else
          v41 = *(_QWORD *)&v14 == 0;
        if (v41)
          goto LABEL_208;
        boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v14 + 16));
        v25 = v14;
        v35 = -235920773;
        goto LABEL_60;
      case 9u:
        do
        {
          v30 = __ldaxr(*(unint64_t **)&v14);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, *(unint64_t **)&v14));
        if (v31)
          v32 = 1;
        else
          v32 = *(_QWORD *)&v14 == 0;
        if (v32)
          goto LABEL_208;
        v33 = *(void **)(*(_QWORD *)&v14 + 48);
        if (v33)
        {
          *(_QWORD *)(*(_QWORD *)&v14 + 56) = v33;
          operator delete(v33);
        }
        v34 = *(void **)(*(_QWORD *)&v14 + 24);
        if (v34)
        {
          *(_QWORD *)(*(_QWORD *)&v14 + 32) = v34;
          operator delete(v34);
        }
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v14 + 8);
        v25 = v14;
        v35 = 2071181815;
LABEL_60:
        v26 = v35 | 0x1030C4000000000;
        break;
      default:
        goto LABEL_208;
    }
LABEL_207:
    MEMORY[0x219A19A08](*(_QWORD *)&v25, v26);
LABEL_208:
    switch(v9)
    {
      case 2u:
        do
        {
          v105 = __ldaxr(*(unint64_t **)&v7);
          v106 = v105 - 1;
        }
        while (__stlxr(v106, *(unint64_t **)&v7));
        if (v106)
          v107 = 1;
        else
          v107 = *(_QWORD *)&v7 == 0;
        if (!v107)
        {
          if (*(char *)(*(_QWORD *)&v7 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v7 + 8));
          v108 = v7;
          v109 = 0x1012C404EF22A49;
          goto LABEL_255;
        }
        break;
      case 3u:
        do
        {
          v119 = __ldaxr(*(unint64_t **)&v7);
          v120 = v119 - 1;
        }
        while (__stlxr(v120, *(unint64_t **)&v7));
        if (v120)
          v121 = 1;
        else
          v121 = *(_QWORD *)&v7 == 0;
        if (!v121)
        {
          v122 = *(void **)(*(_QWORD *)&v7 + 8);
          if (v122)
          {
            *(_QWORD *)(*(_QWORD *)&v7 + 16) = v122;
            operator delete(v122);
          }
          v108 = v7;
          v109 = 0x1080C409938AC02;
          goto LABEL_255;
        }
        break;
      case 4u:
        do
        {
          v110 = __ldaxr(*(unint64_t **)&v7);
          v111 = v110 - 1;
        }
        while (__stlxr(v111, *(unint64_t **)&v7));
        if (v111)
          v112 = 1;
        else
          v112 = *(_QWORD *)&v7 == 0;
        if (!v112)
        {
          __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)&v7 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_247;
        }
        break;
      case 5u:
        do
        {
          v123 = __ldaxr(*(unint64_t **)&v7);
          v124 = v123 - 1;
        }
        while (__stlxr(v124, *(unint64_t **)&v7));
        if (v124)
          v125 = 1;
        else
          v125 = *(_QWORD *)&v7 == 0;
        if (!v125)
        {
          __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)&v7 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_247:
          v108 = v7;
          v109 = 0x1020C405E66F15BLL;
          goto LABEL_255;
        }
        break;
      case 8u:
        do
        {
          v126 = __ldaxr(*(unint64_t **)&v7);
          v127 = v126 - 1;
        }
        while (__stlxr(v127, *(unint64_t **)&v7));
        if (v127)
          v128 = 1;
        else
          v128 = *(_QWORD *)&v7 == 0;
        if (!v128)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v7 + 16));
          v108 = v7;
          v118 = -235920773;
          goto LABEL_254;
        }
        break;
      case 9u:
        do
        {
          v113 = __ldaxr(*(unint64_t **)&v7);
          v114 = v113 - 1;
        }
        while (__stlxr(v114, *(unint64_t **)&v7));
        if (v114)
          v115 = 1;
        else
          v115 = *(_QWORD *)&v7 == 0;
        if (!v115)
        {
          v116 = *(void **)(*(_QWORD *)&v7 + 48);
          if (v116)
          {
            *(_QWORD *)(*(_QWORD *)&v7 + 56) = v116;
            operator delete(v116);
          }
          v117 = *(void **)(*(_QWORD *)&v7 + 24);
          if (v117)
          {
            *(_QWORD *)(*(_QWORD *)&v7 + 32) = v117;
            operator delete(v117);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v7 + 8);
          v108 = v7;
          v118 = 2071181815;
LABEL_254:
          v109 = v118 | 0x1030C4000000000;
LABEL_255:
          MEMORY[0x219A19A08](*(_QWORD *)&v108, v109);
        }
        break;
      default:
        break;
    }
    if ((v21 & 1) == 0)
      goto LABEL_269;
LABEL_257:
    v4 += 2;
    if (v4 == v137)
    {
LABEL_260:
      if (v144)
        v129 = v143 == 0;
      else
        v129 = 1;
      if (v129)
      {
        v130 = **(uint64_t ***)(*(_QWORD *)a1 + 40);
        std::string::basic_string[abi:ne180100]<0>(__p, "sframe");
        v131 = turi::query_eval::node_info::any_p<turi::sframe>(v130, (uint64_t)__p);
        turi::sframe::operator=((uint64_t)v141, v131);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      *a2 = 1;
      turi::sframe::sframe((turi::sframe *)(a2 + 8), (const turi::sframe *)v141);
      goto LABEL_269;
    }
  }
  *a2 = 0;
  turi::sframe::sframe(v136, (const turi::sframe *)v141);
LABEL_269:
  turi::sframe::~sframe((turi::sframe *)v141);
}

void sub_2180FD1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v65;
  unint64_t v66;
  BOOL v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  unint64_t v73;
  unint64_t v74;
  BOOL v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v83;
  unint64_t v84;
  unint64_t v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  BOOL v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  BOOL v94;
  unint64_t v95;
  unint64_t v96;
  BOOL v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  BOOL v101;
  void *v102;
  unint64_t v103;
  unint64_t v104;
  BOOL v105;
  unint64_t v106;
  unint64_t v107;
  BOOL v108;

  switch(v62)
  {
    case 2:
      do
      {
        v65 = __ldaxr((unint64_t *)v63);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, (unint64_t *)v63));
      if (v66)
        v67 = 1;
      else
        v67 = v63 == 0;
      if (v67)
        goto LABEL_45;
      if (*(char *)(v63 + 31) < 0)
        operator delete(*(void **)(v63 + 8));
      v68 = (_QWORD *)v63;
      v69 = 0x1012C404EF22A49;
      goto LABEL_44;
    case 3:
      do
      {
        v77 = __ldaxr((unint64_t *)v63);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, (unint64_t *)v63));
      if (v78)
        v79 = 1;
      else
        v79 = v63 == 0;
      if (v79)
        goto LABEL_45;
      v80 = *(void **)(v63 + 8);
      if (v80)
      {
        *(_QWORD *)(v63 + 16) = v80;
        operator delete(v80);
      }
      v68 = (_QWORD *)v63;
      v69 = 0x1080C409938AC02;
      goto LABEL_44;
    case 4:
      do
      {
        v70 = __ldaxr((unint64_t *)v63);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, (unint64_t *)v63));
      if (v71)
        v72 = 1;
      else
        v72 = v63 == 0;
      if (v72)
        goto LABEL_45;
      a18 = v63 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_36;
    case 5:
      do
      {
        v81 = __ldaxr((unint64_t *)v63);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, (unint64_t *)v63));
      if (v82)
        v83 = 1;
      else
        v83 = v63 == 0;
      if (v83)
        goto LABEL_45;
      a18 = v63 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_36:
      v68 = (_QWORD *)v63;
      v69 = 0x1020C405E66F15BLL;
      goto LABEL_44;
    case 8:
      do
      {
        v84 = __ldaxr((unint64_t *)v63);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, (unint64_t *)v63));
      if (v85)
        v86 = 1;
      else
        v86 = v63 == 0;
      if (v86)
        goto LABEL_45;
      boost::detail::shared_count::~shared_count((unsigned int **)(v63 + 16));
      v68 = (_QWORD *)v63;
      v76 = -235920773;
      goto LABEL_43;
    case 9:
      do
      {
        v73 = __ldaxr((unint64_t *)v63);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, (unint64_t *)v63));
      if (v74)
        v75 = 1;
      else
        v75 = v63 == 0;
      if (v75)
        goto LABEL_45;
      v68 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v63);
      v76 = 2071181815;
LABEL_43:
      v69 = v76 | 0x1030C4000000000;
LABEL_44:
      MEMORY[0x219A19A08](v68, v69);
LABEL_45:
      switch(v61)
      {
        case 2:
          do
          {
            v87 = __ldaxr((unint64_t *)v60);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, (unint64_t *)v60));
          if (v88)
            v89 = 1;
          else
            v89 = v60 == 0;
          if (v89)
            goto LABEL_89;
          if (*(char *)(v60 + 31) < 0)
            operator delete(*(void **)(v60 + 8));
          v90 = (_QWORD *)v60;
          v91 = 0x1012C404EF22A49;
          goto LABEL_88;
        case 3:
          do
          {
            v99 = __ldaxr((unint64_t *)v60);
            v100 = v99 - 1;
          }
          while (__stlxr(v100, (unint64_t *)v60));
          if (v100)
            v101 = 1;
          else
            v101 = v60 == 0;
          if (v101)
            goto LABEL_89;
          v102 = *(void **)(v60 + 8);
          if (v102)
          {
            *(_QWORD *)(v60 + 16) = v102;
            operator delete(v102);
          }
          v90 = (_QWORD *)v60;
          v91 = 0x1080C409938AC02;
          goto LABEL_88;
        case 4:
          do
          {
            v92 = __ldaxr((unint64_t *)v60);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, (unint64_t *)v60));
          if (v93)
            v94 = 1;
          else
            v94 = v60 == 0;
          if (v94)
            goto LABEL_89;
          a18 = v60 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
          goto LABEL_80;
        case 5:
          do
          {
            v103 = __ldaxr((unint64_t *)v60);
            v104 = v103 - 1;
          }
          while (__stlxr(v104, (unint64_t *)v60));
          if (v104)
            v105 = 1;
          else
            v105 = v60 == 0;
          if (v105)
            goto LABEL_89;
          a18 = v60 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_80:
          v90 = (_QWORD *)v60;
          v91 = 0x1020C405E66F15BLL;
          goto LABEL_88;
        case 8:
          do
          {
            v106 = __ldaxr((unint64_t *)v60);
            v107 = v106 - 1;
          }
          while (__stlxr(v107, (unint64_t *)v60));
          if (v107)
            v108 = 1;
          else
            v108 = v60 == 0;
          if (v108)
            goto LABEL_89;
          boost::detail::shared_count::~shared_count((unsigned int **)(v60 + 16));
          v90 = (_QWORD *)v60;
          v98 = -235920773;
          goto LABEL_87;
        case 9:
          do
          {
            v95 = __ldaxr((unint64_t *)v60);
            v96 = v95 - 1;
          }
          while (__stlxr(v96, (unint64_t *)v60));
          if (v96)
            v97 = 1;
          else
            v97 = v60 == 0;
          if (v97)
            goto LABEL_89;
          v90 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v60);
          v98 = 2071181815;
LABEL_87:
          v91 = v98 | 0x1030C4000000000;
LABEL_88:
          MEMORY[0x219A19A08](v90, v91);
LABEL_89:
          turi::sframe::~sframe((turi::sframe *)&a60);
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_89;
      }
    default:
      goto LABEL_45;
  }
}

uint64_t turi::query_eval::opt_append_on_source::try_sarray_append@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  double v8;
  int v9;
  unsigned int v10;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  double v15;
  int v16;
  unsigned int v17;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  char v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  void *v40;
  void *v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  double v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  void *v64;
  void *v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v85;
  double v86;
  double v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t result;
  uint64_t v95;
  uint64_t v96;
  BOOL v97[8];
  std::__shared_weak_count *v98;
  void *__p[2];
  char v100;
  _BYTE v101[80];
  uint64_t *v102;
  uint64_t *v103;
  char v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  turi::sarray<turi::flexible_type>::sarray((uint64_t)v101);
  v95 = a1;
  v4 = *(uint64_t ***)(*(_QWORD *)a1 + 40);
  v5 = *(uint64_t ***)(*(_QWORD *)a1 + 48);
  if (v4 == v5)
  {
LABEL_175:
    if (!v104)
      goto LABEL_181;
    v88 = v102;
    if (v103 == v102)
      goto LABEL_181;
    v89 = 0;
    v90 = v103 - v102;
    if (v90 <= 1)
      v90 = 1;
    do
    {
      v91 = *v88++;
      v89 += v91;
      --v90;
    }
    while (v90);
    if (!v89)
    {
LABEL_181:
      v92 = **(uint64_t ***)(*(_QWORD *)v95 + 40);
      std::string::basic_string[abi:ne180100]<0>(__p, "sarray");
      v93 = (uint64_t *)turi::query_eval::node_info::any_p<turi::sframe>(v92, (uint64_t)__p);
      turi::sarray<turi::flexible_type>::operator=((uint64_t)v101, *v93);
      if (v100 < 0)
        operator delete(__p[0]);
    }
    *a2 = 1;
    turi::sarray<turi::flexible_type>::sarray((uint64_t)(a2 + 8), (uint64_t)v101);
  }
  else
  {
    v96 = (uint64_t)(a2 + 8);
    while (2)
    {
      v6 = *v4;
      if (*((_DWORD *)*v4 + 4) == 6)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
        v7 = turi::query_eval::node_info::p(v6, (uint64_t)__p);
        v8 = *(double *)v7;
        v9 = *(_DWORD *)(v7 + 8);
        v10 = *(unsigned __int8 *)(v7 + 12);
        if (v10 <= 9 && ((1 << v10) & 0x33C) != 0)
        {
          do
            v12 = __ldaxr(*(unint64_t **)&v8);
          while (__stlxr(v12 + 1, *(unint64_t **)&v8));
        }
        if (v100 < 0)
          operator delete(__p[0]);
        v13 = *v4;
        std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
        v14 = turi::query_eval::node_info::p(v13, (uint64_t)__p);
        v15 = *(double *)v14;
        v16 = *(_DWORD *)(v14 + 8);
        v17 = *(unsigned __int8 *)(v14 + 12);
        if (v17 <= 9 && ((1 << v17) & 0x33C) != 0)
        {
          do
            v19 = __ldaxr(*(unint64_t **)&v15);
          while (__stlxr(v19 + 1, *(unint64_t **)&v15));
        }
        if (v100 < 0)
          operator delete(__p[0]);
        v20 = *v4;
        std::string::basic_string[abi:ne180100]<0>(__p, "sarray");
        v21 = (uint64_t *)turi::query_eval::node_info::any_p<turi::sframe>(v20, (uint64_t)__p);
        v22 = *v21;
        v23 = (std::__shared_weak_count *)v21[1];
        *(_QWORD *)v97 = *v21;
        v98 = v23;
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }
        if (v100 < 0)
        {
          operator delete(__p[0]);
          v22 = *(_QWORD *)v97;
        }
        switch(v10)
        {
          case 0u:
            if (v8 != 0.0)
              goto LABEL_24;
            goto LABEL_135;
          case 1u:
            if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFLL) == 0)
              goto LABEL_135;
            goto LABEL_24;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_24;
          case 6u:
            if ((*(_QWORD *)&v8 & 0xFFFFFFFFFFFFFFLL) != 0 || v9)
            {
LABEL_24:
              *a2 = 0;
              turi::sarray<turi::flexible_type>::sarray(v96, (uint64_t)v101);
              v26 = 0;
            }
            else
            {
LABEL_135:
              if (!*(_BYTE *)(v22 + 248)
                || (v78 = *(char **)(v22 + 80), v77 = *(char **)(v22 + 88), v79 = v77 - v78, v77 == v78))
              {
                v80 = 0;
              }
              else
              {
                v80 = 0;
                v81 = v79 >> 3;
                if (v81 <= 1)
                  v81 = 1;
                do
                {
                  v82 = *(_QWORD *)v78;
                  v78 += 8;
                  v80 += v82;
                  --v81;
                }
                while (v81);
              }
              switch(v17)
              {
                case 0u:
                  if (*(_QWORD *)&v15 == v80)
                  {
                    switch(v10)
                    {
                      case 0u:
                        if (*(_QWORD *)&v8 != *(_QWORD *)&v15)
                          goto LABEL_157;
                        goto LABEL_158;
                      case 1u:
                        v85 = v8;
                        v87 = (double)*(uint64_t *)&v15;
                        goto LABEL_173;
                      case 2u:
                      case 3u:
                      case 4u:
                      case 5u:
                      case 7u:
                      case 8u:
                      case 9u:
                        goto LABEL_157;
                      case 6u:
                        if (*(_QWORD *)&v15 != (uint64_t)(*(_QWORD *)&v8 << 8) >> 8 || v9)
                          goto LABEL_157;
                        goto LABEL_158;
                      default:
                        goto LABEL_186;
                    }
                  }
                  goto LABEL_24;
                case 1u:
                  v85 = v15;
                  if (v15 == (double)v80)
                  {
                    switch(v10)
                    {
                      case 0u:
                        v87 = (double)*(uint64_t *)&v8;
LABEL_173:
                        if (v85 != v87)
                          goto LABEL_157;
                        goto LABEL_158;
                      case 1u:
                        if (v8 == v15)
                          goto LABEL_158;
                        goto LABEL_157;
                      case 2u:
                      case 3u:
                      case 4u:
                      case 5u:
                      case 7u:
                      case 8u:
                      case 9u:
                        goto LABEL_157;
                      case 6u:
                        v86 = vabdd_f64((double)v9 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v8 << 8) >> 8), v15);
                        goto LABEL_170;
                      default:
                        goto LABEL_186;
                    }
                  }
                  goto LABEL_24;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  goto LABEL_24;
                case 6u:
                  v83 = (uint64_t)(*(_QWORD *)&v15 << 8) >> 8;
                  if (v83 != v80 || v16 != 0)
                    goto LABEL_24;
                  switch(v10)
                  {
                    case 0u:
                      if (v83 == *(_QWORD *)&v8)
                        goto LABEL_158;
                      goto LABEL_157;
                    case 1u:
                      v86 = vabdd_f64(v8, (double)v16 / 1000000.0 + (double)v83);
LABEL_170:
                      if (v86 < 0.0000005)
                        goto LABEL_158;
                      goto LABEL_157;
                    case 2u:
                    case 3u:
                    case 4u:
                    case 5u:
                    case 7u:
                    case 8u:
                    case 9u:
                      goto LABEL_157;
                    case 6u:
                      if (((*(_QWORD *)&v15 ^ *(_QWORD *)&v8) & 0xFFFFFFFFFFFFFFLL) != 0 || v9 != v16)
                      {
LABEL_157:
                        turi::sarray<turi::flexible_type>::append((uint64_t)v101, v22, (uint64_t)__p);
                        turi::sarray<turi::flexible_type>::operator=((uint64_t)v101, (uint64_t)__p);
                        turi::sarray<turi::flexible_type>::~sarray((uint64_t)__p);
                      }
LABEL_158:
                      v26 = 1;
                      break;
                    default:
                      goto LABEL_186;
                  }
                  break;
                default:
                  goto LABEL_186;
              }
            }
            if (v98)
            {
              v27 = (unint64_t *)&v98->__shared_owners_;
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 - 1, v27));
              if (!v28)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
            }
            switch(v17)
            {
              case 2u:
                do
                {
                  v29 = __ldaxr(*(unint64_t **)&v15);
                  v30 = v29 - 1;
                }
                while (__stlxr(v30, *(unint64_t **)&v15));
                if (v30)
                  v31 = 1;
                else
                  v31 = *(_QWORD *)&v15 == 0;
                if (!v31)
                {
                  if (*(char *)(*(_QWORD *)&v15 + 31) < 0)
                    operator delete(*(void **)(*(_QWORD *)&v15 + 8));
                  v32 = v15;
                  v33 = 0x1012C404EF22A49;
                  goto LABEL_77;
                }
                break;
              case 3u:
                do
                {
                  v43 = __ldaxr(*(unint64_t **)&v15);
                  v44 = v43 - 1;
                }
                while (__stlxr(v44, *(unint64_t **)&v15));
                if (v44)
                  v45 = 1;
                else
                  v45 = *(_QWORD *)&v15 == 0;
                if (!v45)
                {
                  v46 = *(void **)(*(_QWORD *)&v15 + 8);
                  if (v46)
                  {
                    *(_QWORD *)(*(_QWORD *)&v15 + 16) = v46;
                    operator delete(v46);
                  }
                  v32 = v15;
                  v33 = 0x1080C409938AC02;
                  goto LABEL_77;
                }
                break;
              case 4u:
                do
                {
                  v34 = __ldaxr(*(unint64_t **)&v15);
                  v35 = v34 - 1;
                }
                while (__stlxr(v35, *(unint64_t **)&v15));
                if (v35)
                  v36 = 1;
                else
                  v36 = *(_QWORD *)&v15 == 0;
                if (!v36)
                {
                  __p[0] = (void *)(*(_QWORD *)&v15 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_69;
                }
                break;
              case 5u:
                do
                {
                  v47 = __ldaxr(*(unint64_t **)&v15);
                  v48 = v47 - 1;
                }
                while (__stlxr(v48, *(unint64_t **)&v15));
                if (v48)
                  v49 = 1;
                else
                  v49 = *(_QWORD *)&v15 == 0;
                if (!v49)
                {
                  __p[0] = (void *)(*(_QWORD *)&v15 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_69:
                  v32 = v15;
                  v33 = 0x1020C405E66F15BLL;
                  goto LABEL_77;
                }
                break;
              case 8u:
                do
                {
                  v50 = __ldaxr(*(unint64_t **)&v15);
                  v51 = v50 - 1;
                }
                while (__stlxr(v51, *(unint64_t **)&v15));
                if (v51)
                  v52 = 1;
                else
                  v52 = *(_QWORD *)&v15 == 0;
                if (!v52)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v15 + 16));
                  v32 = v15;
                  v42 = -235920773;
                  goto LABEL_76;
                }
                break;
              case 9u:
                do
                {
                  v37 = __ldaxr(*(unint64_t **)&v15);
                  v38 = v37 - 1;
                }
                while (__stlxr(v38, *(unint64_t **)&v15));
                if (v38)
                  v39 = 1;
                else
                  v39 = *(_QWORD *)&v15 == 0;
                if (!v39)
                {
                  v40 = *(void **)(*(_QWORD *)&v15 + 48);
                  if (v40)
                  {
                    *(_QWORD *)(*(_QWORD *)&v15 + 56) = v40;
                    operator delete(v40);
                  }
                  v41 = *(void **)(*(_QWORD *)&v15 + 24);
                  if (v41)
                  {
                    *(_QWORD *)(*(_QWORD *)&v15 + 32) = v41;
                    operator delete(v41);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v15 + 8);
                  v32 = v15;
                  v42 = 2071181815;
LABEL_76:
                  v33 = v42 | 0x1030C4000000000;
LABEL_77:
                  MEMORY[0x219A19A08](*(_QWORD *)&v32, v33);
                }
                break;
              default:
                break;
            }
            switch(v10)
            {
              case 2u:
                do
                {
                  v53 = __ldaxr(*(unint64_t **)&v8);
                  v54 = v53 - 1;
                }
                while (__stlxr(v54, *(unint64_t **)&v8));
                if (v54)
                  v55 = 1;
                else
                  v55 = *(_QWORD *)&v8 == 0;
                if (!v55)
                {
                  if (*(char *)(*(_QWORD *)&v8 + 31) < 0)
                    operator delete(*(void **)(*(_QWORD *)&v8 + 8));
                  v56 = v8;
                  v57 = 0x1012C404EF22A49;
                  goto LABEL_125;
                }
                break;
              case 3u:
                do
                {
                  v67 = __ldaxr(*(unint64_t **)&v8);
                  v68 = v67 - 1;
                }
                while (__stlxr(v68, *(unint64_t **)&v8));
                if (v68)
                  v69 = 1;
                else
                  v69 = *(_QWORD *)&v8 == 0;
                if (!v69)
                {
                  v70 = *(void **)(*(_QWORD *)&v8 + 8);
                  if (v70)
                  {
                    *(_QWORD *)(*(_QWORD *)&v8 + 16) = v70;
                    operator delete(v70);
                  }
                  v56 = v8;
                  v57 = 0x1080C409938AC02;
                  goto LABEL_125;
                }
                break;
              case 4u:
                do
                {
                  v58 = __ldaxr(*(unint64_t **)&v8);
                  v59 = v58 - 1;
                }
                while (__stlxr(v59, *(unint64_t **)&v8));
                if (v59)
                  v60 = 1;
                else
                  v60 = *(_QWORD *)&v8 == 0;
                if (!v60)
                {
                  __p[0] = (void *)(*(_QWORD *)&v8 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_117;
                }
                break;
              case 5u:
                do
                {
                  v71 = __ldaxr(*(unint64_t **)&v8);
                  v72 = v71 - 1;
                }
                while (__stlxr(v72, *(unint64_t **)&v8));
                if (v72)
                  v73 = 1;
                else
                  v73 = *(_QWORD *)&v8 == 0;
                if (!v73)
                {
                  __p[0] = (void *)(*(_QWORD *)&v8 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_117:
                  v56 = v8;
                  v57 = 0x1020C405E66F15BLL;
                  goto LABEL_125;
                }
                break;
              case 8u:
                do
                {
                  v74 = __ldaxr(*(unint64_t **)&v8);
                  v75 = v74 - 1;
                }
                while (__stlxr(v75, *(unint64_t **)&v8));
                if (v75)
                  v76 = 1;
                else
                  v76 = *(_QWORD *)&v8 == 0;
                if (!v76)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v8 + 16));
                  v56 = v8;
                  v66 = -235920773;
                  goto LABEL_124;
                }
                break;
              case 9u:
                do
                {
                  v61 = __ldaxr(*(unint64_t **)&v8);
                  v62 = v61 - 1;
                }
                while (__stlxr(v62, *(unint64_t **)&v8));
                if (v62)
                  v63 = 1;
                else
                  v63 = *(_QWORD *)&v8 == 0;
                if (!v63)
                {
                  v64 = *(void **)(*(_QWORD *)&v8 + 48);
                  if (v64)
                  {
                    *(_QWORD *)(*(_QWORD *)&v8 + 56) = v64;
                    operator delete(v64);
                  }
                  v65 = *(void **)(*(_QWORD *)&v8 + 24);
                  if (v65)
                  {
                    *(_QWORD *)(*(_QWORD *)&v8 + 32) = v65;
                    operator delete(v65);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v8 + 8);
                  v56 = v8;
                  v66 = 2071181815;
LABEL_124:
                  v57 = v66 | 0x1030C4000000000;
LABEL_125:
                  MEMORY[0x219A19A08](*(_QWORD *)&v56, v57);
                }
                break;
              default:
                break;
            }
            if ((v26 & 1) == 0)
              return turi::sarray<turi::flexible_type>::~sarray((uint64_t)v101);
            v4 += 2;
            if (v4 == v5)
              goto LABEL_175;
            continue;
          default:
LABEL_186:
            result = turi::flexible_type_fail(0);
            __break(1u);
            return result;
        }
      }
      break;
    }
    *a2 = 0;
    turi::sarray<turi::flexible_type>::sarray(v96, (uint64_t)v101);
  }
  return turi::sarray<turi::flexible_type>::~sarray((uint64_t)v101);
}

void sub_2180FDDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v70;
  void *v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  BOOL v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v99;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  switch(v52)
  {
    case 2:
      do
      {
        v56 = __ldaxr((unint64_t *)v53);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, (unint64_t *)v53));
      if (v57)
        v58 = 1;
      else
        v58 = v53 == 0;
      if (v58)
        goto LABEL_45;
      if (*(char *)(v53 + 31) < 0)
        operator delete(*(void **)(v53 + 8));
      v59 = (_QWORD *)v53;
      v60 = 0x1012C404EF22A49;
      goto LABEL_44;
    case 3:
      do
      {
        v68 = __ldaxr((unint64_t *)v53);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, (unint64_t *)v53));
      if (v69)
        v70 = 1;
      else
        v70 = v53 == 0;
      if (v70)
        goto LABEL_45;
      v71 = *(void **)(v53 + 8);
      if (v71)
      {
        *(_QWORD *)(v53 + 16) = v71;
        operator delete(v71);
      }
      v59 = (_QWORD *)v53;
      v60 = 0x1080C409938AC02;
      goto LABEL_44;
    case 4:
      do
      {
        v61 = __ldaxr((unint64_t *)v53);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, (unint64_t *)v53));
      if (v62)
        v63 = 1;
      else
        v63 = v53 == 0;
      if (v63)
        goto LABEL_45;
      __p = (void *)(v53 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_36;
    case 5:
      do
      {
        v72 = __ldaxr((unint64_t *)v53);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, (unint64_t *)v53));
      if (v73)
        v74 = 1;
      else
        v74 = v53 == 0;
      if (v74)
        goto LABEL_45;
      __p = (void *)(v53 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_36:
      v59 = (_QWORD *)v53;
      v60 = 0x1020C405E66F15BLL;
      goto LABEL_44;
    case 8:
      do
      {
        v75 = __ldaxr((unint64_t *)v53);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, (unint64_t *)v53));
      if (v76)
        v77 = 1;
      else
        v77 = v53 == 0;
      if (v77)
        goto LABEL_45;
      boost::detail::shared_count::~shared_count((unsigned int **)(v53 + 16));
      v59 = (_QWORD *)v53;
      v67 = -235920773;
      goto LABEL_43;
    case 9:
      do
      {
        v64 = __ldaxr((unint64_t *)v53);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, (unint64_t *)v53));
      if (v65)
        v66 = 1;
      else
        v66 = v53 == 0;
      if (v66)
        goto LABEL_45;
      v59 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v53);
      v67 = 2071181815;
LABEL_43:
      v60 = v67 | 0x1030C4000000000;
LABEL_44:
      MEMORY[0x219A19A08](v59, v60);
LABEL_45:
      switch(v54)
      {
        case 2:
          do
          {
            v78 = __ldaxr((unint64_t *)v51);
            v79 = v78 - 1;
          }
          while (__stlxr(v79, (unint64_t *)v51));
          if (v79)
            v80 = 1;
          else
            v80 = v51 == 0;
          if (v80)
            goto LABEL_89;
          if (*(char *)(v51 + 31) < 0)
            operator delete(*(void **)(v51 + 8));
          v81 = (_QWORD *)v51;
          v82 = 0x1012C404EF22A49;
          goto LABEL_88;
        case 3:
          do
          {
            v90 = __ldaxr((unint64_t *)v51);
            v91 = v90 - 1;
          }
          while (__stlxr(v91, (unint64_t *)v51));
          if (v91)
            v92 = 1;
          else
            v92 = v51 == 0;
          if (v92)
            goto LABEL_89;
          v93 = *(void **)(v51 + 8);
          if (v93)
          {
            *(_QWORD *)(v51 + 16) = v93;
            operator delete(v93);
          }
          v81 = (_QWORD *)v51;
          v82 = 0x1080C409938AC02;
          goto LABEL_88;
        case 4:
          do
          {
            v83 = __ldaxr((unint64_t *)v51);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, (unint64_t *)v51));
          if (v84)
            v85 = 1;
          else
            v85 = v51 == 0;
          if (v85)
            goto LABEL_89;
          __p = (void *)(v51 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_80;
        case 5:
          do
          {
            v94 = __ldaxr((unint64_t *)v51);
            v95 = v94 - 1;
          }
          while (__stlxr(v95, (unint64_t *)v51));
          if (v95)
            v96 = 1;
          else
            v96 = v51 == 0;
          if (v96)
            goto LABEL_89;
          __p = (void *)(v51 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_80:
          v81 = (_QWORD *)v51;
          v82 = 0x1020C405E66F15BLL;
          goto LABEL_88;
        case 8:
          do
          {
            v97 = __ldaxr((unint64_t *)v51);
            v98 = v97 - 1;
          }
          while (__stlxr(v98, (unint64_t *)v51));
          if (v98)
            v99 = 1;
          else
            v99 = v51 == 0;
          if (v99)
            goto LABEL_89;
          boost::detail::shared_count::~shared_count((unsigned int **)(v51 + 16));
          v81 = (_QWORD *)v51;
          v89 = -235920773;
          goto LABEL_87;
        case 9:
          do
          {
            v86 = __ldaxr((unint64_t *)v51);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, (unint64_t *)v51));
          if (v87)
            v88 = 1;
          else
            v88 = v51 == 0;
          if (v88)
            goto LABEL_89;
          v81 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v51);
          v89 = 2071181815;
LABEL_87:
          v82 = v89 | 0x1030C4000000000;
LABEL_88:
          MEMORY[0x219A19A08](v81, v82);
LABEL_89:
          turi::sarray<turi::flexible_type>::~sarray((uint64_t)&a51);
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_89;
      }
    default:
      goto LABEL_45;
  }
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::make_planner_node@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  std::string *v8;
  int type;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t i;
  uint64_t v22;
  _QWORD *v24[3];
  _QWORD *v25;
  const void **v26[3];
  __int128 v27;
  char v28;
  _BYTE v29[8];
  _QWORD *v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD v36[11];
  char v37;
  uint64_t v38;
  int v39;
  void **v40;
  void *__p[2];
  char v42;
  uint64_t v43;
  std::string v44;
  _QWORD v45[3];
  uint64_t v46;
  void *v47;
  void *v48;
  _QWORD v49[2];
  int v50;
  char v51;
  _QWORD v52[4];
  int v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v35);
  v32 = 0u;
  v33 = 0u;
  v31 = v36;
  v34 = 0;
  v8 = turi::index_file_information::index_file_information(&v44, (const turi::index_file_information *)(*a1 + 8));
  turi::index_file_information::save((turi::index_file_information *)v8, (turi::oarchive *)&v31);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v52, (_QWORD *)v52[1]);
  __p[0] = v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (SHIBYTE(v46) < 0)
    operator delete((void *)v45[1]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  type = turi::sarray<turi::flexible_type>::get_type(*a1);
  if (a3 == -1)
  {
    v10 = *a1;
    if (*(_BYTE *)(*a1 + 248)
      && (v12 = v10 + 80, v11 = *(uint64_t **)(v10 + 80), (v13 = *(_QWORD *)(v12 + 8) - (_QWORD)v11) != 0))
    {
      a3 = 0;
      v14 = v13 >> 3;
      if (v14 <= 1)
        v14 = 1;
      do
      {
        v15 = *v11++;
        a3 += v15;
        --v14;
      }
      while (v14);
    }
    else
    {
      a3 = 0;
    }
  }
  std::stringbuf::str();
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],std::string,0>(&v44, "index", &v27);
  std::string::basic_string[abi:ne180100]<0>(v45, "type");
  BYTE4(v47) = 0;
  LODWORD(v47) = 0;
  v46 = type;
  std::string::basic_string[abi:ne180100]<0>(&v48, "begin_index");
  v51 = 0;
  v50 = 0;
  v49[1] = a2;
  std::string::basic_string[abi:ne180100]<0>(v52, "end_index");
  v54 = 0;
  v53 = 0;
  v52[3] = a3;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v29, &v44, 4);
  v16 = (_QWORD *)operator new();
  v18 = *a1;
  v17 = a1[1];
  *v16 = &unk_24D92C680;
  v16[1] = v18;
  v16[2] = v17;
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v25 = v16;
  std::pair<std::string const,turi::any>::pair[abi:ne180100]<char const(&)[7],turi::any,0>(__p, "sarray", (uint64_t *)&v25);
  std::map<std::string,turi::any>::map[abi:ne180100]((uint64_t)v26, (const void **)__p, 1);
  memset(v24, 0, sizeof(v24));
  v39 = 6;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v39, (uint64_t)v29, v26, v24, a4);
  v40 = (void **)v24;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v40);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)v26, v26[1]);
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  if (v42 < 0)
    operator delete(__p[0]);
  if (v25)
    (*(void (**)(_QWORD *))(*v25 + 8))(v25);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v29, v30);
  for (i = 120; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v44 + i);
  if (v28 < 0)
    operator delete((void *)v27);
  v35[0] = *MEMORY[0x24BEDB7F0];
  v22 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v35 + *(_QWORD *)(v35[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v36[0] = v22;
  v36[1] = MEMORY[0x24BEDB848] + 16;
  if (v37 < 0)
    operator delete((void *)v36[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v38);
}

void sub_2180FE500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;
  char a71;
  uint64_t v71;
  uint64_t i;

  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a15, (_QWORD *)a16);
  std::pair<std::string const,turi::any>::~pair((uint64_t)&a71);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a25, (_QWORD *)a26);
  for (i = 120; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair(v71 - 232 + i);
  if (a24 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::append(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  char *v11;
  const std::vector<std::string>::value_type *v12;
  const std::vector<std::string>::value_type *v13;
  std::vector<std::string>::const_iterator v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;

  LOBYTE(v19) = *(_BYTE *)(a1 + 249);
  if ((_BYTE)v19)
  {
    v20 = &v19;
    turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#1}::operator()();
  }
  LOBYTE(v19) = *(_BYTE *)(a2 + 249);
  if ((_BYTE)v19)
  {
    v20 = &v19;
    turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#2}::operator()();
  }
  v5 = a1;
  if (!*(_BYTE *)(a2 + 248))
    goto LABEL_10;
  if (!*(_BYTE *)(a1 + 248))
  {
    v5 = a2;
LABEL_10:
    turi::sarray<turi::flexible_type>::sarray(a3, v5);
    return;
  }
  v6 = (_OWORD *)(a1 + 32);
  LODWORD(v19) = *(_DWORD *)(a1 + 32);
  LODWORD(v18) = *(_DWORD *)(a2 + 32);
  if ((_DWORD)v19 != (_DWORD)v18)
  {
    v20 = &v19;
    v21 = &v18;
    turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#3}::operator()();
  }
  v7 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a2 + 48);
  v19 = v7;
  if (v7 != v18)
  {
    v20 = &v19;
    v21 = &v18;
    turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#4}::operator()();
  }
  turi::sarray<turi::flexible_type>::sarray(a3);
  *(_BYTE *)(a3 + 248) = 1;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v5 + 8));
  *(_OWORD *)(a3 + 32) = *v6;
  *(_QWORD *)(a3 + 48) = *(_QWORD *)(v5 + 48);
  std::string::operator=((std::string *)(a3 + 56), (const std::string *)(v5 + 56));
  if (a3 == v5)
  {
    v8 = (_QWORD *)(a3 + 256);
  }
  else
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a3 + 80), *(char **)(v5 + 80), *(_QWORD *)(v5 + 88), (uint64_t)(*(_QWORD *)(v5 + 88) - *(_QWORD *)(v5 + 80)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a3 + 104), *(std::string **)(v5 + 104), *(__int128 **)(v5 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 112) - *(_QWORD *)(v5 + 104)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a3 + 128), *(__int128 **)(v5 + 128), (__int128 *)(v5 + 136));
    v8 = (_QWORD *)(a3 + 256);
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(a3 + 256, *(uint64_t **)(v5 + 256), *(uint64_t **)(v5 + 264), (uint64_t)(*(_QWORD *)(v5 + 264) - *(_QWORD *)(v5 + 256)) >> 4);
  }
  *(_QWORD *)(a3 + 40) += *(_QWORD *)(a2 + 40);
  v9 = *(char **)(a2 + 80);
  v10 = *(char **)(a2 + 88);
  if (v9 != v10)
  {
    v11 = *(char **)(a3 + 88);
    do
    {
      v11 = std::vector<unsigned long>::insert(a3 + 80, v11, v9) + 8;
      v9 += 8;
    }
    while (v9 != v10);
  }
  v12 = *(const std::vector<std::string>::value_type **)(a2 + 104);
  v13 = *(const std::vector<std::string>::value_type **)(a2 + 112);
  if (v12 != v13)
  {
    v14.__i_ = *(std::__wrap_iter<const std::string *>::iterator_type *)(a3 + 112);
    do
      v14.__i_ = std::vector<std::string>::insert((std::vector<std::string> *)(a3 + 104), v14, v12++).__i_ + 1;
    while (v12 != v13);
  }
  v16 = *(uint64_t **)(a2 + 256);
  v15 = *(uint64_t **)(a2 + 264);
  if (v16 != v15)
  {
    v17 = *(uint64_t **)(a3 + 264);
    do
    {
      v17 = std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::insert(v8, (uint64_t)v17, v16) + 2;
      v16 += 2;
    }
    while (v16 != v15);
  }
  turi::sarray<turi::flexible_type>::try_compact(a3);
}

void sub_2180FE86C(_Unwind_Exception *a1)
{
  uint64_t v1;

  turi::sarray<turi::flexible_type>::~sarray(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray<turi::flexible_type>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void **v8;
  __int128 v9;
  void **v10;
  void **v11;
  __int128 v12;
  void **v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  _QWORD *v22;
  _OWORD v23[2];
  void *__p[3];
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  void **v30;

  v4 = (__int128 *)(a2 + 8);
  v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v5);
  v6 = *v4;
  *(_QWORD *)(v5 + 16) = *((_QWORD *)v4 + 2);
  *(_OWORD *)v5 = v6;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v7 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v8);
  v9 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a2 + 79) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  v10 = (void **)(a2 + 80);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 80, (__n128 *)(a2 + 80));
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 104));
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v22 = (_QWORD *)(a2 + 128);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1 + 128, (_QWORD *)(a2 + 128));
  v11 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0)
    operator delete(*v11);
  v12 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)v11 = v12;
  *(_BYTE *)(a2 + 175) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate((void **)(a1 + 256));
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 249);
  memset(v23, 0, 24);
  DWORD2(v23[0]) = -1;
  v28 = 0;
  v29 = 0;
  memset(__p, 0, sizeof(__p));
  v25 = 0u;
  v26 = 0;
  v27 = &v28;
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)v4);
  v13 = (void **)(a2 + 56);
  *v4 = 0u;
  *((_QWORD *)v4 + 2) = *(_QWORD *)&v23[0];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)v23 + 8);
  *(_QWORD *)(a2 + 48) = 0;
  if (*(char *)(a2 + 79) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = 0u;
  *(void **)(a2 + 72) = __p[0];
  v14 = *v10;
  if (*v10)
  {
    *(_QWORD *)(a2 + 88) = v14;
    operator delete(v14);
  }
  *(_OWORD *)(a2 + 80) = *(_OWORD *)&__p[1];
  *(_QWORD *)(a2 + 96) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + 104));
  v16 = a2 + 136;
  v15 = *(_QWORD **)(a2 + 136);
  *(_OWORD *)(a2 + 104) = v25;
  *(_QWORD *)(a2 + 120) = v26;
  v26 = 0;
  v25 = 0uLL;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v22, v15);
  v17 = v28;
  *(_QWORD *)(a2 + 128) = v27;
  *(_QWORD *)(a2 + 136) = v17;
  v18 = v29;
  *(_QWORD *)(a2 + 144) = v29;
  if (v18)
  {
    v17[2] = v16;
    v17 = 0;
    v27 = &v28;
    v28 = 0;
    v29 = 0;
  }
  else
  {
    *v22 = v16;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v27, v17);
  v30 = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
  MEMORY[0x219A19390](a2 + 152, "");
  *(_QWORD *)(a2 + 176) = 0;
  v20 = *(_QWORD *)(a2 + 256);
  for (i = *(_QWORD *)(a2 + 264); i != v20; i = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *(_QWORD *)(a2 + 264) = v20;
  *(_WORD *)(a2 + 248) = 0;
  return a1;
}

{
  BOOL v2;
  uint64_t v5;
  _QWORD *exception;
  const char *v8;

  if (*(_BYTE *)(a2 + 248))
    v2 = *(_BYTE *)(a2 + 249) == 0;
  else
    v2 = 1;
  if (!v2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot copy an array which is writing";
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 249))
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot copy over an array which is writing";
LABEL_12:
    *exception = v8;
    __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
  }
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  v5 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v5;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 152), (const std::string *)(a2 + 152));
  }
  else
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(a2 + 104), *(__int128 **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(__int128 **)(a2 + 128), (__int128 *)(a2 + 136));
    std::string::operator=((std::string *)(a1 + 152), (const std::string *)(a2 + 152));
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(a1 + 256, *(uint64_t **)(a2 + 256), *(uint64_t **)(a2 + 264), (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 4);
  }
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  return a1;
}

uint64_t turi::sarray<turi::flexible_type>::sarray(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = &unk_24D91E658;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v4 = pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  assert_msg(v4 == 0, "Mutex create error %d", v4);
  *(_WORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  turi::sarray<turi::flexible_type>::operator=(a1, a2);
  return a1;
}

{
  uint64_t v4;

  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = turi::sarray<turi::flexible_type>::sarray(a1);
  turi::sarray<turi::flexible_type>::operator=(v4, a2);
  return a1;
}

{
  int v4;
  std::string v6;

  *(_QWORD *)a1 = &unk_24D91E658;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v4 = pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  assert_msg(v4 == 0, "Mutex create error %d", v4);
  *(_WORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  turi::sarray<turi::flexible_type>::open_for_read(a1, &v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return a1;
}

void sub_2180FEDA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  turi::index_file_information *v2;
  uint64_t v3;
  pthread_mutex_t *v4;
  void **v5;
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::mutex::~mutex(v4);
  if (*(char *)(v3 + 175) < 0)
    operator delete(*v5);
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writing", 7);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"false", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 460, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180FEF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"other.writing", 13);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"false", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 461, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180FF178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"index_info.version", 18);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"other.index_info.version", 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 467, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180FF38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#4}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"index_info.block_size", 21);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"other.index_info.block_size", 27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 468, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180FF5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::try_compact(uint64_t a1)
{
  if (turi::SFRAME_COMPACTION_THRESHOLD)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 3) > turi::SFRAME_COMPACTION_THRESHOLD)
      turi::sarray_compact<turi::flexible_type>(a1, turi::SFRAME_COMPACTION_THRESHOLD);
  }
}

uint64_t *std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::insert(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v36;
  __int128 v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  int64x2_t v41;
  char *v42;
  uint64_t v43;

  v4 = (uint64_t *)a2;
  v6 = a1[1];
  v8 = (uint64_t)(a1 + 2);
  v7 = a1[2];
  if (v6 >= v7)
  {
    v9 = (uint64_t *)*a1;
    v10 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if (v10 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = a2 - (_QWORD)v9;
    v12 = (a2 - (uint64_t)v9) >> 4;
    v13 = v7 - (_QWORD)v9;
    if (v13 >> 3 > v10)
      v10 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v10;
    v39 = a1 + 2;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(a1 + 2), v14);
    else
      v15 = 0;
    v19 = (uint64_t *)&v15[16 * v12];
    v36 = v15;
    *(_QWORD *)&v37 = v19;
    *((_QWORD *)&v37 + 1) = v19;
    v38 = &v15[16 * v14];
    if (v12 == v14)
    {
      if (v11 < 1)
      {
        if (v9 == v4)
          v21 = 1;
        else
          v21 = v11 >> 3;
        v43 = v8;
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v8, v21);
        v24 = v37;
        v25 = *((_QWORD *)&v37 + 1) - v37;
        if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
        {
          v30 = vdupq_n_s64(v37);
          v27 = (unint64_t)&v22[16 * (v21 >> 2)];
        }
        else
        {
          v26 = v25 >> 4;
          v27 = (unint64_t)&v22[16 * (v21 >> 2) + (v25 & 0xFFFFFFFFFFFFFFF0)];
          v28 = 16 * v26;
          v29 = &v22[16 * (v21 >> 2)];
          do
          {
            *(_OWORD *)v29 = *(_OWORD *)v24;
            v29 += 16;
            *(_QWORD *)v24 = 0;
            *(_QWORD *)(v24 + 8) = 0;
            v24 += 16;
            v28 -= 16;
          }
          while (v28);
          v30 = (int64x2_t)v37;
        }
        v31 = v38;
        v40 = v36;
        v36 = v22;
        *(_QWORD *)&v37 = &v22[16 * (v21 >> 2)];
        v41 = v30;
        *((_QWORD *)&v37 + 1) = v27;
        v38 = &v22[16 * v23];
        v42 = v31;
        std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v40);
        v19 = (uint64_t *)*((_QWORD *)&v37 + 1);
      }
      else
      {
        v20 = v12 + 2;
        if (v12 >= -1)
          v20 = v12 + 1;
        v19 -= 2 * (v20 >> 1);
        *(_QWORD *)&v37 = v19;
        *((_QWORD *)&v37 + 1) = v19;
      }
    }
    *v19 = *a3;
    v32 = a3[1];
    v19[1] = v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v19 = (uint64_t *)*((_QWORD *)&v37 + 1);
    }
    *((_QWORD *)&v37 + 1) = v19 + 2;
    v4 = (uint64_t *)std::vector<std::shared_ptr<turi::query_eval::node_info>>::__swap_out_circular_buffer(a1, &v36, v4);
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v36);
  }
  else if (a2 == v6)
  {
    v16 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((_QWORD *)&v16 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    a1[1] = a2 + 16;
  }
  else
  {
    std::vector<std::shared_ptr<turi::query_eval::node_info>>::__move_range((uint64_t)a1, a2, v6, (char *)(a2 + 16));
    if (v4 <= a3)
      a3 += 2 * (a1[1] > (unint64_t)a3);
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v4, a3);
  }
  return v4;
}

void sub_2180FF8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::sarray_compact<turi::flexible_type>(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  cppipc *v7;
  file_logger *v8;
  file_logger *started;
  _QWORD *v10;
  const std::locale::facet *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *exception;
  std::string v18[2];
  void *v19;
  char v20;
  void *__p;
  void *v22;
  _QWORD v23[3];
  _QWORD *v24[3];
  void **v25;

  turi::sarray_fast_compact<turi::flexible_type>(a1);
  turi::index_file_information::index_file_information(v18, (const turi::index_file_information *)(a1 + 8));
  v4 = v23[1] - v23[0];
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, v24[1]);
  v25 = (void **)v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  v5 = v4 >> 3;
  if (v20 < 0)
    operator delete(v19);
  v6 = 0xAAAAAAAAAAAAAAABLL * v5;
  if (SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18[0].__r_.__value_.__l.__data_);
  if (v6 > a2)
  {
    v7 = (cppipc *)global_logger();
    if (*((int *)v7 + 169) <= 2)
    {
      if (cppipc::must_cancel(v7))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v8 = (file_logger *)global_logger();
      started = file_logger::start_stream(v8, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", "sarray_compact", 127, 1);
      v10 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v10 && *((_BYTE *)v10 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Slow compaction triggered because fast compact did not achieve target", 69);
      v7 = (cppipc *)pthread_getspecific(*((_QWORD *)started + 74));
      if (v7)
      {
        if (*((_BYTE *)v7 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*((_QWORD *)v7 + 2) - 24) + 16));
          v11 = std::locale::use_facet((const std::locale *)v18, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
          std::locale::~locale((std::locale *)v18);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    v12 = turi::thread::cpu_count(v7);
    if (v12 >= a2)
      v13 = a2;
    else
      v13 = v12;
    turi::sarray<turi::flexible_type>::clone(a1, v13, (uint64_t *)v18);
    turi::sarray<turi::flexible_type>::operator=(a1, (uint64_t)v18[0].__r_.__value_.__l.__data_);
    size = (std::__shared_weak_count *)v18[0].__r_.__value_.__l.__size_;
    if (v18[0].__r_.__value_.__l.__size_)
    {
      v15 = (unint64_t *)(v18[0].__r_.__value_.__l.__size_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
}

void sub_2180FFAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_fast_compact<turi::flexible_type>(uint64_t a1)
{
  turi::v2_block_impl::block_manager *v2;
  std::string *v3;
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  turi::v2_block_impl::block_manager *instance;
  __int128 *v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  turi::v2_block_impl::block_manager *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  unint64_t v20;
  turi::v2_block_impl::block_manager *v21;
  const std::string::value_type **v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  std::string *v39;
  __int128 v40;
  unint64_t v41;
  int *v42;
  file_logger *v43;
  file_logger *started;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  const std::locale::facet *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::string *v58;
  uint64_t v59;
  void ***v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  void ***v69;
  void **v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  char v77;
  uint64_t *v78;
  void **v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void **v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *exception;
  uint64_t v90;
  char v91;
  std::string v92;
  void *v93;
  char v94;
  void *v95;
  void *v96;
  uint64_t v97;
  _QWORD *v98[3];
  __int128 v99;
  char *v100[3];
  std::string v101;
  unint64_t v102;
  void *v103;
  char v104;
  void *__p;
  char *v106;
  char *v107;
  std::string *v108;
  std::string *v109;
  unint64_t v110;
  _QWORD *v111[3];
  std::string v112;
  void *v113;
  char v114;
  void *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119[3];
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  char v123;
  void **v124;
  void **v125;
  std::string v126;
  std::string *v127;
  _BYTE v128[16];
  void *v129;
  _BYTE *v130;
  _BYTE v131[8];
  void *v132;
  uint64_t *v133;
  uint64_t *v134;
  __int128 *v135;
  uint64_t v136;
  _QWORD *v137[16];
  char v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  turi::index_file_information::index_file_information(&v112, (const turi::index_file_information *)(a1 + 8));
  v2 = (turi::v2_block_impl::block_manager *)turi::index_file_information::index_file_information(&v101, (const turi::index_file_information *)&v112);
  v3 = v108;
  v4 = v109;
  v106 = (char *)__p;
  while (v4 != v3)
  {
    if (SHIBYTE(v4[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4[-1].__r_.__value_.__l.__data_);
    --v4;
  }
  v109 = v3;
  memset(v100, 0, sizeof(v100));
  v5 = v117;
  if (v118 == v117)
    goto LABEL_138;
  v90 = a1;
  v6 = 0;
  v91 = 0;
  v7 = 0;
  do
  {
    instance = (turi::v2_block_impl::block_manager *)turi::v2_block_impl::block_manager::get_instance(v2);
    v9 = (__int128 *)(v5 + 24 * v6);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v126.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v10;
    }
    v11 = turi::v2_block_impl::block_manager::open_column((uint64_t)instance, (uint64_t)&v126);
    v13 = v12;
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    v14 = (turi::v2_block_impl::block_manager *)turi::v2_block_impl::block_manager::num_blocks_in_column(instance, v11, v13);
    v15 = v115;
    if ((unint64_t)v14 >= turi::FAST_COMPACT_BLOCKS_IN_SMALL_SEGMENT)
      goto LABEL_25;
    v16 = v6 + 1;
    v17 = v117;
    if (v6 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((v118 - v117) >> 3))
      goto LABEL_24;
    v18 = (void **)*((_QWORD *)v115 + v6);
    v19 = 24 * v6;
    v20 = 1;
    do
    {
      v21 = (turi::v2_block_impl::block_manager *)turi::v2_block_impl::block_manager::get_instance(v14);
      v22 = (const std::string::value_type **)(v17 + v19 + 24);
      if (*(char *)(v17 + v19 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v126, *v22, *(_QWORD *)(v17 + v19 + 32));
      }
      else
      {
        v23 = *(_OWORD *)v22;
        v126.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + v19 + 40);
        *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v23;
      }
      v24 = turi::v2_block_impl::block_manager::open_column((uint64_t)v21, (uint64_t)&v126);
      v26 = v25;
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
      v14 = (turi::v2_block_impl::block_manager *)turi::v2_block_impl::block_manager::num_blocks_in_column(v21, v24, v26);
      if ((unint64_t)v14 >= 2)
        break;
      v18 = (void **)((char *)v18 + *((_QWORD *)v115 + v16));
      ++v20;
      ++v16;
      v17 = v117;
      v19 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((v118 - v117) >> 3));
    if (v20 <= 1)
    {
LABEL_24:
      v15 = v115;
LABEL_25:
      v27 = v15[v6];
      v28 = v106;
      if (v106 >= v107)
      {
        v30 = (char *)__p;
        v31 = (v106 - (_BYTE *)__p) >> 3;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v33 = v107 - (_BYTE *)__p;
        if ((v107 - (_BYTE *)__p) >> 2 > v32)
          v32 = v33 >> 2;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v107, v34);
          v30 = (char *)__p;
          v28 = v106;
        }
        else
        {
          v35 = 0;
        }
        v36 = &v35[8 * v31];
        *(_QWORD *)v36 = v15[v6];
        v29 = v36 + 8;
        while (v28 != v30)
        {
          v37 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *((_QWORD *)v36 - 1) = v37;
          v36 -= 8;
        }
        __p = v36;
        v106 = v29;
        v107 = &v35[8 * v34];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *(_QWORD *)v106 = v27;
        v29 = v28 + 8;
      }
      v106 = v29;
      v38 = v117 + 24 * v6;
      v39 = v109;
      if ((unint64_t)v109 >= v110)
      {
        v2 = (turi::v2_block_impl::block_manager *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v108, (__int128 *)v38);
      }
      else
      {
        if (*(char *)(v38 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v109, *(const std::string::value_type **)v38, *(_QWORD *)(v38 + 8));
        }
        else
        {
          v40 = *(_OWORD *)v38;
          v109->__r_.__value_.__r.__words[2] = *(_QWORD *)(v38 + 16);
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        }
        v2 = (turi::v2_block_impl::block_manager *)&v39[1];
      }
      v41 = v27 + v7;
      v109 = (std::string *)v2;
      goto LABEL_48;
    }
    v42 = (int *)global_logger();
    if (v42[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v42))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v43 = (file_logger *)global_logger();
      started = file_logger::start_stream(v43, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", "sarray_fast_compact", 83, 1);
      v45 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v45 && *((_BYTE *)v45 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45 + 2, (uint64_t)"Compacting range of ", 20);
      v46 = file_logger::operator<<<unsigned long>((uint64_t)started);
      v47 = pthread_getspecific(*(_QWORD *)(v46 + 592));
      if (v47 && *((_BYTE *)v47 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47 + 2, (uint64_t)" blocks, ", 9);
      v48 = file_logger::operator<<<unsigned long>(v46);
      v49 = pthread_getspecific(*(_QWORD *)(v48 + 592));
      if (v49 && *((_BYTE *)v49 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49 + 2, (uint64_t)" rows", 5);
      v50 = pthread_getspecific(*(_QWORD *)(v48 + 592));
      if (v50)
      {
        if (*((_BYTE *)v50 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(_QWORD *)(v50[2] - 24) + 16));
          v51 = std::locale::use_facet((const std::locale *)&v126, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
          std::locale::~locale((std::locale *)&v126);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v48);
          if (*(_DWORD *)(v48 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v99);
    turi::sarray<turi::flexible_type>::open_for_write(v99, 1, 0);
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)v99 + 32))(&v126, v99, 0);
    turi::sarray<turi::flexible_type>::get_reader(v90, (uint64_t *)&v124);
    v41 = (unint64_t)v18 + v7;
    v121 = 0;
    v120 = 0;
    v122 = 0;
    v123 = 1;
    while (v7 < v41)
    {
      if (v7 + 1024 >= v41)
        v52 = v41;
      else
        v52 = v7 + 1024;
      if (!(*(uint64_t (**)(void *, unint64_t, unint64_t, unint64_t *))(*(_QWORD *)v124[1] + 80))(v124[1], v7, v52, &v120))
      if (!v134)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t *, unint64_t *))(*v134 + 48))(v134, &v120);
      v7 = v52;
    }
    (*(void (**)(_QWORD))(*(_QWORD *)v99 + 40))(v99);
    v125 = (void **)&v120;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v125);
    v53 = (uint64_t)v124;
    v124 = 0;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    v54 = v134;
    if (v134 == (uint64_t *)v131)
    {
      v54 = (uint64_t *)v131;
      v55 = 4;
    }
    else
    {
      if (!v134)
        goto LABEL_79;
      v55 = 5;
    }
    (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_79:
    v56 = v130;
    if (v130 == v128)
    {
      v56 = v128;
      v57 = 4;
    }
    else
    {
      if (!v130)
        goto LABEL_84;
      v57 = 5;
    }
    (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_84:
    v58 = v127;
    if (v127 == &v126)
    {
      v58 = &v126;
      v59 = 4;
      goto LABEL_88;
    }
    if (v127)
    {
      v59 = 5;
LABEL_88:
      (*(void (**)(void))(v58->__r_.__value_.__r.__words[0] + 8 * v59))();
    }
    turi::index_file_information::index_file_information(&v126, (const turi::index_file_information *)(v99 + 8));
    v120 = 0xAAAAAAAAAAAAAAABLL * ((v136 - (uint64_t)v135) >> 3);
    if (v136 - (_QWORD)v135 != 24)
    {
      v125 = (void **)&v120;
      turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()();
    }
    v60 = (void ***)v132;
    v125 = *(void ***)v132;
    v124 = v18;
    if (v125 != v18)
    {
      v120 = (unint64_t)&v125;
      v121 = (uint64_t *)&v124;
      turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#2}::operator()();
    }
    v61 = v106;
    if (v106 >= v107)
    {
      v63 = (char *)__p;
      v64 = (v106 - (_BYTE *)__p) >> 3;
      v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v66 = v107 - (_BYTE *)__p;
      if ((v107 - (_BYTE *)__p) >> 2 > v65)
        v65 = v66 >> 2;
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
        v67 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v67 = v65;
      if (v67)
      {
        v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v107, v67);
        v63 = (char *)__p;
        v61 = v106;
        v18 = *v60;
      }
      else
      {
        v68 = 0;
      }
      v69 = (void ***)&v68[8 * v64];
      *v69 = v18;
      v62 = (char *)(v69 + 1);
      while (v61 != v63)
      {
        v70 = (void **)*((_QWORD *)v61 - 1);
        v61 -= 8;
        *--v69 = v70;
      }
      __p = v69;
      v106 = v62;
      v107 = &v68[8 * v67];
      if (v63)
        operator delete(v63);
    }
    else
    {
      *(_QWORD *)v106 = v18;
      v62 = v61 + 8;
    }
    v106 = v62;
    v71 = v109;
    if ((unint64_t)v109 >= v110)
    {
      v73 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v108, v135);
    }
    else
    {
      if (*((char *)v135 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v109, *(const std::string::value_type **)v135, *((_QWORD *)v135 + 1));
      }
      else
      {
        v72 = *v135;
        v109->__r_.__value_.__r.__words[2] = *((_QWORD *)v135 + 2);
        *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
      }
      v73 = v71 + 1;
    }
    v109 = v73;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](v100, &v99);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v137, v137[1]);
    v120 = (unint64_t)&v135;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
    v2 = (turi::v2_block_impl::block_manager *)v132;
    if (v132)
    {
      v133 = (uint64_t *)v132;
      operator delete(v132);
    }
    if ((v131[7] & 0x80000000) != 0)
      operator delete(v129);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
    if (*((_QWORD *)&v99 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v6 = v6 + v20 - 1;
    v91 = 1;
LABEL_48:
    ++v6;
    v5 = v117;
    v7 = v41;
  }
  while (v6 < 0xAAAAAAAAAAAAAAABLL * ((v118 - v117) >> 3));
  v77 = v91;
  if ((v91 & 1) == 0)
  {
LABEL_138:
    v77 = 0;
    goto LABEL_149;
  }
  turi::sarray<turi::flexible_type>::sarray((uint64_t)&v126);
  v102 = 0xAAAAAAAAAAAAAAABLL * (((char *)v109 - (char *)v108) >> 3);
  turi::index_file_information::index_file_information(&v92, (const turi::index_file_information *)&v101);
  turi::sarray<turi::flexible_type>::open_for_read((uint64_t)&v126, (uint64_t)&v92);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v98, v98[1]);
  v120 = (unint64_t)&v97;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
  if (v94 < 0)
    operator delete(v93);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (!v138 || (v78 = v133, v134 == v133))
  {
    v79 = 0;
  }
  else
  {
    v79 = 0;
    v80 = v134 - v133;
    if (v80 <= 1)
      v80 = 1;
    do
    {
      v81 = *v78++;
      v79 = (void **)((char *)v79 + v81);
      --v80;
    }
    while (v80);
  }
  *(_QWORD *)&v99 = v79;
  if (!*(_BYTE *)(v90 + 248) || (v83 = *(char **)(v90 + 80), v82 = *(char **)(v90 + 88), v84 = v82 - v83, v82 == v83))
  {
    v85 = 0;
  }
  else
  {
    v85 = 0;
    v86 = v84 >> 3;
    if (v86 <= 1)
      v86 = 1;
    do
    {
      v87 = *(_QWORD *)v83;
      v83 += 8;
      v85 = (void **)((char *)v85 + v87);
      --v86;
    }
    while (v86);
  }
  v125 = v85;
  if (v79 != v85)
  {
    v120 = (unint64_t)&v99;
    v121 = (uint64_t *)&v125;
    turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#3}::operator()();
  }
  turi::sarray<turi::flexible_type>::operator=(v90, (uint64_t)&v126);
  turi::sarray<turi::flexible_type>::~sarray((uint64_t)&v126);
LABEL_149:
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v111, v111[1]);
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (__p)
  {
    v106 = (char *)__p;
    operator delete(__p);
  }
  if (v104 < 0)
    operator delete(v103);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v119, v119[1]);
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
  if (v114 < 0)
    operator delete(v113);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  return v77 & 1;
}

void sub_21810064C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  turi::index_file_information::~index_file_information((turi::index_file_information *)&a18);
  turi::sarray<turi::flexible_type>::~sarray((uint64_t)&STACK[0x250]);
  STACK[0x220] = (unint64_t)&a38;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  turi::index_file_information::~index_file_information((turi::index_file_information *)&a41);
  turi::index_file_information::~index_file_information((turi::index_file_information *)&a59);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray<turi::flexible_type>::clone@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  int type;
  uint64_t result;
  _QWORD *v9[2];
  uint64_t v10;

  v3 = a2;
  if (!a2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a3);
  turi::sarray<turi::flexible_type>::open_for_write(*a3, v3, 0);
  v6 = *a3;
  type = turi::sarray<turi::flexible_type>::get_type(a1);
  turi::sarray<turi::flexible_type>::set_type(v6, type);
  turi::sarray<turi::flexible_type>::get_reader(a1, v3, &v10);
  v9[0] = &v10;
  v9[1] = a3;
  turi::parallel_for<turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1}>(0, v3, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)*a3 + 40))(*a3);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_218100928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"new_sarray_index.segment_files.size()", 37);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", "operator()", 91, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  BOOL turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218100AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"new_sarray_index.segment_sizes[0]", 33);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"runlength_in_rows", 17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", "operator()", 92, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  BOOL turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218100D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::open_for_read(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  file_logger *v6;
  pthread_key_t *started;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  assert_msg(*(_BYTE *)(a1 + 248) == 0, "Attempting to init an SArray which has already been inited");
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 48) = v4;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 48));
  if (a1 + 8 != a2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(a2 + 96), *(__int128 **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(__int128 **)(a2 + 120), (__int128 *)(a2 + 128));
  }
  turi::sarray<turi::flexible_type>::keep_array_file_ref((turi::fileio::file_handle_pool *)a1);
  *(_WORD *)(a1 + 248) = 1;
  if (!*(_DWORD *)(a1 + 32))
  {
    v5 = (int *)global_logger();
    if (v5[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v5))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v6 = (file_logger *)global_logger();
      started = (pthread_key_t *)file_logger::start_stream(v6, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "open_for_read", 241, 1);
      v8 = pthread_getspecific(started[74]);
      if (v8 && *((_BYTE *)v8 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Version 0 file format has been deprecated. ", 43);
      v9 = pthread_getspecific(started[74]);
      if (v9 && *((_BYTE *)v9 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Operations may not work as expected, or will be slow.", 53);
      v10 = pthread_getspecific(started[74]);
      if (v10 && *((_BYTE *)v10 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Please re-save the SFrame/SArray to update it to ", 49);
      v11 = pthread_getspecific(started[74]);
      if (v11 && *((_BYTE *)v11 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"the latest version which has substantial ", 41);
      v12 = pthread_getspecific(started[74]);
      if (v12)
      {
        if (*((_BYTE *)v12 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"performance optimizations\n", 26);
          file_logger::stream_flush((file_logger *)started);
        }
      }
    }
  }
}

void turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"final_array.size()", 18);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"column.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", "operator()", 116, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  BOOL turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218101114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::`anonymous namespace'::compact_rows<turi::flexible_type>(turi::sarray<turi::flexible_type>&,unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"read_ok", 7);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", "operator()", 36, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
}

void sub_218101294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::get_reader(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;

  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(_BYTE *)(a1 + 249) == 0, "Cannot open an SArray which is still writing.");
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_QWORD *)(v6 + 176) = 0;
  turi::sarray_reader<turi::flexible_type>::sarray_reader(v6);
  *a3 = v6;
  turi::sarray_reader<turi::flexible_type>::init(v6, a1, a2);
}

void sub_2181013C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void turi::parallel_for<turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, _QWORD **a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      turi::sarray<turi::flexible_type>::clone(unsigned long)const::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_218101554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray<turi::flexible_type>::clone(unsigned long)const::{lambda(unsigned long)#1}::operator()(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  _QWORD v17[6];
  _QWORD v18[2];
  _QWORD v19[5];

  v19[4] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)**a1 + 32))(v18);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)**a1 + 40))(v17, **a1, a2);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1[1] + 32))(v11, *a1[1], a2);
  while (v18[0] != v17[0] || v18[1] != v17[1] || v19[2] != v17[4])
  {
    if (!v12)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, _QWORD *))(*v12 + 48))(v12, v19);
    turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)v18);
  }
  v4 = v16;
  if (v16 == v15)
  {
    v5 = 4;
    v4 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_12;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_12:
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_17;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_17:
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_21;
  }
  if (v12)
  {
    v9 = 5;
LABEL_21:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v17);
  return turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v18);
}

void sub_218101730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)va);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v14 - 72);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_iterator<turi::flexible_type>::operator++(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t **v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void **v34;

  v2 = *(uint64_t **)a1;
  if (v2[11] >= (unint64_t)v2[9])
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
    turi::sarray_reader_buffer<turi::flexible_type>::clear(v2);
  }
  else
  {
    v3 = turi::sarray_reader_buffer<turi::flexible_type>::next(v2);
    v4 = (unint64_t **)(a1 + 16);
    if (v3 != a1 + 16)
    {
      v5 = v3;
      switch(*(_BYTE *)(a1 + 28))
      {
        case 2:
          v6 = *v4;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            v9 = *v4;
            if (!*v4)
              goto LABEL_42;
            if (*((char *)v9 + 31) < 0)
              operator delete((void *)v9[1]);
            v10 = v9;
            v11 = 0x1012C404EF22A49;
            goto LABEL_41;
          }
          break;
        case 3:
          v12 = *v4;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            v15 = *v4;
            if (!*v4)
              goto LABEL_42;
            v16 = (void *)v15[1];
            if (v16)
            {
              v15[2] = (unint64_t)v16;
              operator delete(v16);
            }
            v10 = v15;
            v11 = 0x1080C409938AC02;
            goto LABEL_41;
          }
          break;
        case 4:
          v17 = *v4;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = *v4;
            if (!*v4)
              goto LABEL_42;
            v34 = (void **)(v20 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v34);
            goto LABEL_29;
          }
          break;
        case 5:
          v21 = *v4;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v20 = *v4;
            if (!*v4)
              goto LABEL_42;
            v34 = (void **)(v20 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_29:
            v10 = v20;
            v11 = 0x1020C405E66F15BLL;
            goto LABEL_41;
          }
          break;
        case 8:
          v24 = *v4;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            v27 = *v4;
            if (!*v4)
              goto LABEL_42;
            boost::detail::shared_count::~shared_count((unsigned int **)v27 + 2);
            v10 = v27;
            v28 = -235920773;
            goto LABEL_40;
          }
          break;
        case 9:
          v29 = *v4;
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            if (*v4)
            {
              v10 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v4);
              v28 = 2071181815;
LABEL_40:
              v11 = v28 | 0x1030C4000000000;
LABEL_41:
              MEMORY[0x219A19A08](v10, v11);
            }
LABEL_42:
            *v4 = 0;
          }
          break;
        default:
          break;
      }
      v32 = *(unint64_t **)v5;
      *(_QWORD *)(a1 + 21) = *(_QWORD *)(v5 + 5);
      *v4 = v32;
      *(_BYTE *)(a1 + 28) = *(_BYTE *)(v5 + 12);
      *(_BYTE *)(v5 + 12) = 0;
    }
    ++*(_QWORD *)(a1 + 32);
  }
  return a1;
}

uint64_t turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 28))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 16);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 16);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 16);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 16);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 16);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 16);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 16);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 16);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 16);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 16);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 16);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 16);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  return a1;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186DF92ALL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186DF92ALL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1 < *(_QWORD *)(result + 16))
  {
    v2 = result;
    do
      result = turi::sarray<turi::flexible_type>::clone(unsigned long)const::{lambda(unsigned long)#1}::operator()(*(_QWORD ***)v2, v1++);
    while (v1 < *(_QWORD *)(v2 + 16));
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::sarray<turi::flexible_type>&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x130uLL);
  result = std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<turi::sarray<turi::flexible_type>&,std::allocator<turi::sarray<turi::flexible_type>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_218101CD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<turi::sarray<turi::flexible_type>&,std::allocator<turi::sarray<turi::flexible_type>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24D91E608;
  a1[1] = 0;
  turi::sarray<turi::flexible_type>::sarray((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_218101D24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_projects>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_projects>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_merge_projects>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_merge_projects::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project1(project2(a)) -> project3(a)");
}

uint64_t turi::query_eval::opt_merge_projects::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char **v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  std::runtime_error *v58;
  std::string *v59;
  __int128 v60;
  uint64_t result;
  uint64_t *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *size;
  unint64_t *v82;
  unint64_t v83;
  std::runtime_error *exception;
  std::string *v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t *v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  void *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unsigned int *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  std::string __p;
  std::string::size_type v102;
  void *v103;
  void *v104;
  std::string v105;
  size_t __idx[3];

  v3 = *(_QWORD *)(*a3)[5];
  if (*(_DWORD *)(v3 + 16) != 4)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  v6 = *(_QWORD *)turi::query_eval::node_info::p((uint64_t *)v3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  v8 = *(_QWORD *)turi::query_eval::node_info::p(v7, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = turi::query_eval::node_info::num_columns(**(turi::query_eval::node_info ***)(*(_QWORD *)(*a3)[5] + 40));
  v10 = (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 4;
  if (v9 > v10 && (uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 4 > v10)
    return 0;
  v87 = a2;
  v94 = 0;
  v95 = 0;
  v93 = 0;
  v12 = *(_BYTE **)(v8 + 8);
  v13 = *(_BYTE **)(v8 + 16);
  if (v12 == v13)
  {
LABEL_92:
    v62 = **(uint64_t ***)(*(_QWORD *)(*a3)[5] + 40);
    v64 = *v62;
    v63 = (std::__shared_weak_count *)v62[1];
    v91 = v64;
    v92 = v63;
    if (v63)
    {
      p_shared_owners = (unint64_t *)&v63->__shared_owners_;
      do
        v66 = __ldxr(p_shared_owners);
      while (__stxr(v66 + 1, p_shared_owners));
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v91, (uint64_t **)&v93, &__p);
    v67 = v92;
    if (v92)
    {
      v68 = (unint64_t *)&v92->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = (std::__shared_weak_count *)a3[1];
    v89 = *a3;
    v90 = v70;
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    v88 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v73 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    turi::query_eval::optimization_engine::replace_node(v87, &v89, (uint64_t *)&v88);
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
    if (*((_QWORD *)&v88 + 1))
    {
      v76 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = v90;
    if (v90)
    {
      v79 = (unint64_t *)&v90->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v82 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (v93)
    {
      v94 = (char *)v93;
      operator delete(v93);
    }
    return 1;
  }
  else
  {
    while (2)
    {
      v14 = 0;
      switch(v12[12])
      {
        case 0:
          v14 = *(_QWORD *)v12;
          goto LABEL_39;
        case 1:
          v14 = (uint64_t)*(double *)v12;
          goto LABEL_39;
        case 2:
          v19 = *(_QWORD *)v12;
          v20 = (char **)(*(_QWORD *)v12 + 8);
          __idx[0] = 0;
          v21 = (char *)v20;
          if (*(char *)(v19 + 31) < 0)
            v21 = *v20;
          std::string::basic_string[abi:ne180100]<0>(&__p, v21);
          v14 = std::stoll(&__p, __idx, 10);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (*(char *)(v19 + 31) < 0)
            v22 = *(_QWORD *)(v19 + 16);
          else
            v22 = *(unsigned __int8 *)(v19 + 31);
          if (__idx[0] != v22)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v85 = std::string::append(&v105, " cannot be interpreted as an integer");
            v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v86;
            v85->__r_.__value_.__l.__size_ = 0;
            v85->__r_.__value_.__r.__words[2] = 0;
            v85->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__p);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_39;
        case 3:
          v15 = *(_QWORD *)v12;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v15 + 8), *(_QWORD *)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_38;
        case 4:
          v23 = *(_QWORD *)v12;
          memset(&__p, 0, sizeof(__p));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v23 + 8), *(uint64_t **)(v23 + 16), (uint64_t)(*(_QWORD *)(v23 + 16) - *(_QWORD *)(v23 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
          goto LABEL_38;
        case 5:
          v24 = *(_QWORD *)v12;
          memset(&__p, 0, sizeof(__p));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v24 + 8), *(uint64_t **)(v24 + 16), (uint64_t)(*(_QWORD *)(v24 + 16) - *(_QWORD *)(v24 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
          goto LABEL_38;
        case 6:
          v14 = (uint64_t)(*(_QWORD *)v12 << 8) >> 8;
          goto LABEL_39;
        case 7:
          goto LABEL_39;
        case 8:
          v25 = *(_QWORD *)v12;
          v26 = *(unsigned int **)(*(_QWORD *)v12 + 16);
          v96 = *(_QWORD *)(*(_QWORD *)v12 + 8);
          v97 = v26;
          if (v26)
          {
            v27 = v26 + 2;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          v29 = *(_OWORD *)(v25 + 24);
          v30 = *(_OWORD *)(v25 + 56);
          v99 = *(_OWORD *)(v25 + 40);
          v100 = v30;
          v98 = v29;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v97);
          goto LABEL_38;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v12 + 8);
          turi::flexible_type_fail(0);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (__p.__r_.__value_.__r.__words[2])
          {
            v102 = __p.__r_.__value_.__r.__words[2];
            operator delete((void *)__p.__r_.__value_.__r.__words[2]);
          }
          v16 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
LABEL_38:
          v14 = 0;
LABEL_39:
          v31 = *(_QWORD *)(v6 + 8) + 16 * v14;
          v32 = 0;
          switch(*(_BYTE *)(v31 + 12))
          {
            case 0:
              v32 = *(_QWORD *)v31;
              goto LABEL_67;
            case 1:
              v32 = (uint64_t)*(double *)v31;
              goto LABEL_67;
            case 2:
              v36 = *(_QWORD *)v31;
              v37 = (char **)(*(_QWORD *)v31 + 8);
              __idx[0] = 0;
              v38 = (char *)v37;
              if (*(char *)(v36 + 31) < 0)
                v38 = *v37;
              std::string::basic_string[abi:ne180100]<0>(&__p, v38);
              v32 = std::stoll(&__p, __idx, 10);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (*(char *)(v36 + 31) < 0)
                v39 = *(_QWORD *)(v36 + 16);
              else
                v39 = *(unsigned __int8 *)(v36 + 31);
              if (__idx[0] != v39)
              {
                v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v59 = std::string::append(&v105, " cannot be interpreted as an integer");
                v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
                v59->__r_.__value_.__l.__size_ = 0;
                v59->__r_.__value_.__r.__words[2] = 0;
                v59->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v58, &__p);
                __cxa_throw(v58, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_67;
            case 3:
              v33 = *(_QWORD *)v31;
              memset(&__p, 0, sizeof(__p));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v33 + 8), *(_QWORD *)(v33 + 16), (uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_66;
            case 4:
              v40 = *(_QWORD *)v31;
              memset(&__p, 0, sizeof(__p));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v40 + 8), *(uint64_t **)(v40 + 16), (uint64_t)(*(_QWORD *)(v40 + 16) - *(_QWORD *)(v40 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
              goto LABEL_66;
            case 5:
              v41 = *(_QWORD *)v31;
              memset(&__p, 0, sizeof(__p));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v41 + 8), *(uint64_t **)(v41 + 16), (uint64_t)(*(_QWORD *)(v41 + 16) - *(_QWORD *)(v41 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
              goto LABEL_66;
            case 6:
              v32 = (uint64_t)(*(_QWORD *)v31 << 8) >> 8;
              goto LABEL_67;
            case 7:
              goto LABEL_67;
            case 8:
              v42 = *(_QWORD *)v31;
              v43 = *(unsigned int **)(v42 + 16);
              v96 = *(_QWORD *)(v42 + 8);
              v97 = v43;
              if (v43)
              {
                v44 = v43 + 2;
                do
                  v45 = __ldxr(v44);
                while (__stxr(v45 + 1, v44));
              }
              v46 = *(_OWORD *)(v42 + 24);
              v47 = *(_OWORD *)(v42 + 56);
              v99 = *(_OWORD *)(v42 + 40);
              v100 = v47;
              v98 = v46;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v97);
              goto LABEL_66;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v31 + 8);
              turi::flexible_type_fail(0);
              if (v103)
              {
                v104 = v103;
                operator delete(v103);
              }
              if (__p.__r_.__value_.__r.__words[2])
              {
                v102 = __p.__r_.__value_.__r.__words[2];
                operator delete((void *)__p.__r_.__value_.__r.__words[2]);
              }
              v32 = __p.__r_.__value_.__l.__size_;
              if (!__p.__r_.__value_.__l.__size_)
                goto LABEL_67;
              v34 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v32);
              }
LABEL_66:
              v32 = 0;
LABEL_67:
              v48 = v94;
              if (v94 >= v95)
              {
                v50 = (char *)v93;
                v51 = (v94 - (_BYTE *)v93) >> 3;
                v52 = v51 + 1;
                if ((unint64_t)(v51 + 1) >> 61)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v53 = v95 - (_BYTE *)v93;
                if ((v95 - (_BYTE *)v93) >> 2 > v52)
                  v52 = v53 >> 2;
                if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
                  v54 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v54 = v52;
                if (v54)
                {
                  v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v95, v54);
                  v50 = (char *)v93;
                  v48 = v94;
                }
                else
                {
                  v55 = 0;
                }
                v56 = (uint64_t *)&v55[8 * v51];
                *v56 = v32;
                v49 = (char *)(v56 + 1);
                while (v48 != v50)
                {
                  v57 = *((_QWORD *)v48 - 1);
                  v48 -= 8;
                  *--v56 = v57;
                }
                v93 = v56;
                v94 = v49;
                v95 = &v55[8 * v54];
                if (v50)
                  operator delete(v50);
              }
              else
              {
                *(_QWORD *)v94 = v32;
                v49 = v48 + 8;
              }
              v94 = v49;
              v12 += 16;
              if (v12 == v13)
                goto LABEL_92;
              continue;
            default:
              goto LABEL_125;
          }
        default:
LABEL_125:
          result = turi::flexible_type_fail(0);
          __break(1u);
          break;
      }
      break;
    }
  }
  return result;
}

void sub_218102688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  int v35;
  uint64_t v36;

  if (a34 < 0)
    operator delete(__p);
  if (*(char *)(v36 - 105) < 0)
  {
    operator delete(*(void **)(v36 - 128));
    if ((v35 & 1) == 0)
    {
LABEL_8:
      if (a18)
        operator delete(a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_project_merge>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_project_merge>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_union_project_merge>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_union_project_merge::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "union(project1(a), ..., project2(a)) -> union(project3(a...), ...)");
}

uint64_t turi::query_eval::opt_union_project_merge::apply_transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  turi::query_eval::node_info *v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  turi::query_eval::node_info *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD **v40;
  _QWORD *v41;
  _QWORD **v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD **v53;
  char *v54;
  void **v55;
  _QWORD *v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD **v67;
  _QWORD *v68;
  _QWORD **v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t **v101;
  void **v102;
  unint64_t **v103;
  _QWORD *v104;
  void **v105;
  char **v106;
  _QWORD *v107;
  unint64_t *v108;
  unint64_t *v109;
  unint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t **v134;
  uint64_t **v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  turi::query_eval::node_info *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  char *v152;
  int64_t v153;
  unint64_t v154;
  int64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  _QWORD *v160;
  _QWORD *v161;
  char *v162;
  __int128 v163;
  int64x2_t v164;
  void *v165;
  void *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  __int128 v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  void *v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  turi::query_eval::node_info *v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  __int128 v210;
  turi::query_eval::node_info *v211;
  turi::query_eval::node_info *v212;
  void *v213[2];
  _QWORD v214[2];
  void *__p[4];
  void *v216[5];
  uint64_t *v217;
  _QWORD *v218[2];
  uint64_t **v219;
  std::__shared_weak_count *v220;
  unint64_t v221;

  v3 = *(_QWORD *)(*(_QWORD *)a3 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)a3 + 48);
  if (v3 == v4)
    return 0;
  v5 = a3;
  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)a3 + 40);
  while (*(_DWORD *)(*(_QWORD *)v7 + 16) != 4 || (unint64_t)++v6 <= 1)
  {
    v7 += 16;
    if (v7 == v4)
      return 0;
  }
  __p[1] = 0;
  __p[2] = 0;
  __p[0] = &__p[1];
  while (2)
  {
    if (*(_DWORD *)(*(_QWORD *)v3 + 16) != 4)
      goto LABEL_33;
    v8 = *(unint64_t **)(*(_QWORD *)v3 + 40);
    v9 = *v8;
    v10 = (std::__shared_weak_count *)v8[1];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = __p[1];
    if (!__p[1])
    {
LABEL_17:
      v15 = 1;
      if (v10)
        goto LABEL_20;
      goto LABEL_24;
    }
    while (1)
    {
      v14 = v13[4];
      if (v9 >= v14)
        break;
LABEL_16:
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_17;
    }
    if (v14 < v9)
    {
      ++v13;
      goto LABEL_16;
    }
    v15 = 0;
    if (v10)
    {
LABEL_20:
      v16 = (unint64_t *)&v10->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
LABEL_24:
    if ((v15 & 1) != 0)
    {
      v18 = *(uint64_t **)(*(_QWORD *)v3 + 40);
      v20 = *v18;
      v19 = (std::__shared_weak_count *)v18[1];
      v219 = (uint64_t **)v20;
      v220 = v19;
      if (v19)
      {
        v21 = (unint64_t *)&v19->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      std::__tree<std::shared_ptr<turi::query_eval::node_info const>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::node_info const>,std::shared_ptr<turi::query_eval::node_info const>>((uint64_t **)__p, (unint64_t *)&v219, (uint64_t)&v219);
      v23 = v220;
      if (v220)
      {
        v24 = (unint64_t *)&v220->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
LABEL_33:
      v3 += 16;
      if (v3 == v4)
      {
        std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
        return 0;
      }
      continue;
    }
    break;
  }
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
  v219 = 0;
  v220 = 0;
  v221 = 0;
  std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::reserve((uint64_t *)&v219, (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 48) - *(_QWORD *)(*(_QWORD *)v5 + 40)) >> 4);
  v218[0] = 0;
  v218[1] = 0;
  v217 = (uint64_t *)v218;
  v27 = *(_QWORD *)(*(_QWORD *)v5 + 40);
  v199 = *(_QWORD *)(*(_QWORD *)v5 + 48);
  if (v27 != v199)
  {
    v28 = 0;
    v198 = v5;
    do
    {
      v29 = *(turi::query_eval::node_info **)v27;
      v30 = *(unint64_t **)(v27 + 8);
      v211 = *(turi::query_eval::node_info **)v27;
      v212 = (turi::query_eval::node_info *)v30;
      if (v30)
      {
        v31 = v30 + 1;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v200 = v27;
      v201 = turi::query_eval::node_info::num_columns(v29) + v28;
      v33 = v211;
      if (*((_DWORD *)v211 + 4) == 4)
      {
        v34 = (unint64_t *)*((_QWORD *)v211 + 5);
        v35 = *v34;
        v36 = (std::__shared_weak_count *)v34[1];
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v39 = v218[0];
        if (!v218[0])
          goto LABEL_54;
        v40 = v218;
        do
        {
          v41 = v39;
          v42 = v40;
          v43 = v39[4];
          v44 = v39 + 1;
          if (v43 >= v35)
          {
            v44 = v41;
            v40 = (_QWORD **)v41;
          }
          v39 = (_QWORD *)*v44;
        }
        while (v39);
        if (v40 == v218)
          goto LABEL_54;
        if (v43 < v35)
          v41 = v42;
        if (v35 < v41[4])
LABEL_54:
          v40 = v218;
        if (v36)
        {
          v45 = (unint64_t *)&v36->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (v40 == v218)
        {
          memset(v216, 0, 32);
          memset(__p, 0, sizeof(__p));
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](__p, *((uint64_t **)v211 + 5));
          v84 = (uint64_t *)v211;
          std::string::basic_string[abi:ne180100]<0>(v213, "indices");
          v85 = *(_QWORD *)turi::query_eval::node_info::p(v84, (uint64_t)v213);
          if (SHIBYTE(v214[0]) < 0)
            operator delete(v213[0]);
          std::vector<unsigned long>::__assign_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((uint64_t **)&__p[2], *(_BYTE **)(v85 + 8), *(_BYTE **)(v85 + 16), (uint64_t)(*(_QWORD *)(v85 + 16) - *(_QWORD *)(v85 + 8)) >> 4);
          v86 = turi::query_eval::node_info::num_columns(v211);
          std::vector<unsigned long>::resize((uint64_t)&v216[1], v86);
          v87 = v216[1];
          v88 = v216[2];
          while (v87 != v88)
            *v87++ = v28++;
          v90 = (uint64_t)v219;
          v89 = v220;
          v91 = *((_QWORD *)v211 + 5);
          v93 = *(void **)v91;
          v92 = *(unint64_t **)(v91 + 8);
          v213[0] = v93;
          v213[1] = v92;
          if (v92)
          {
            v94 = v92 + 1;
            do
              v95 = __ldxr(v94);
            while (__stxr(v95 + 1, v94));
          }
          *(_QWORD *)&v210 = v213;
          std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::node_info const>,unsigned long>,std::__map_value_compare<std::shared_ptr<turi::query_eval::node_info const>,std::__value_type<std::shared_ptr<turi::query_eval::node_info const>,unsigned long>,std::less<std::shared_ptr<turi::query_eval::node_info const>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::node_info const>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::node_info const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::node_info const>&&>,std::tuple<>>(&v217, (unint64_t *)v213, (uint64_t)&std::piecewise_construct, (_OWORD **)&v210)[6] = (uint64_t *)(((uint64_t)v89 - v90) >> 6);
          v96 = (std::__shared_weak_count *)v213[1];
          if (v213[1])
          {
            v97 = (unint64_t *)((char *)v213[1] + 8);
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          v99 = &v220->__vftable;
          if ((unint64_t)v220 >= v221)
          {
            v220 = (std::__shared_weak_count *)std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::__push_back_slow_path<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>((uint64_t *)&v219, (uint64_t)__p);
            if (v216[1])
            {
              v216[2] = v216[1];
              operator delete(v216[1]);
            }
          }
          else
          {
            v220->std::__shared_count = *(std::__shared_count *)__p;
            __p[0] = 0;
            __p[1] = 0;
            v99[2] = 0;
            v99[3] = 0;
            v99[4] = 0;
            v99[5] = 0;
            *((_OWORD *)v99 + 1) = *(_OWORD *)&__p[2];
            v99[4] = v216[0];
            __p[2] = 0;
            __p[3] = 0;
            v216[0] = 0;
            v99[6] = 0;
            v99[7] = 0;
            *(_OWORD *)(v99 + 5) = *(_OWORD *)&v216[1];
            v99[7] = v216[3];
            memset(&v216[1], 0, 24);
            v220 = (std::__shared_weak_count *)(v99 + 8);
          }
          if (__p[2])
          {
            __p[3] = __p[2];
            operator delete(__p[2]);
          }
          v81 = (std::__shared_weak_count *)__p[1];
          if (!__p[1])
            goto LABEL_168;
          v129 = (unint64_t *)((char *)__p[1] + 8);
          do
            v83 = __ldaxr(v129);
          while (__stlxr(v83 - 1, v129));
          goto LABEL_166;
        }
        v47 = v40[6];
        v48 = (uint64_t)v219;
        v49 = (uint64_t *)v211;
        std::string::basic_string[abi:ne180100]<0>(__p, "indices");
        v50 = *(_QWORD *)turi::query_eval::node_info::p(v49, (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(v48 + ((_QWORD)v47 << 6) + 16, *(char **)(v48 + ((_QWORD)v47 << 6) + 24), *(_BYTE **)(v50 + 8), *(_BYTE **)(v50 + 16), (uint64_t)(*(_QWORD *)(v50 + 16) - *(_QWORD *)(v50 + 8)) >> 4);
        if (v28 < v201)
        {
          v51 = v48 + ((_QWORD)v47 << 6);
          v54 = *(char **)(v51 + 48);
          v53 = (_QWORD **)(v51 + 48);
          v52 = v54;
          v55 = (void **)(v53 - 1);
          v56 = v53 + 1;
          do
          {
            if ((unint64_t)v52 >= *v56)
            {
              v58 = (char *)*v55;
              v59 = (v52 - (_BYTE *)*v55) >> 3;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v61 = *v56 - (_QWORD)v58;
              if (v61 >> 2 > v60)
                v60 = v61 >> 2;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
                v62 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v53 + 1), v62);
                v52 = (char *)*v53;
                v58 = (char *)*v55;
              }
              else
              {
                v63 = 0;
              }
              v64 = &v63[8 * v59];
              *(_QWORD *)v64 = v28;
              v57 = v64 + 8;
              while (v52 != v58)
              {
                v65 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v64 - 1) = v65;
                v64 -= 8;
              }
              *v55 = v64;
              *v53 = v57;
              *v56 = &v63[8 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *(_QWORD *)v52 = v28;
              v57 = v52 + 8;
            }
            *v53 = v57;
            ++v28;
            v52 = (char *)v57;
          }
          while (v28 != v201);
        }
      }
      else
      {
        v66 = v218[0];
        if (v218[0])
        {
          v67 = v218;
          do
          {
            v68 = v66;
            v69 = v67;
            v70 = v66[4];
            if (v70 >= (unint64_t)v211)
              v67 = (_QWORD **)v66;
            else
              ++v66;
            v66 = (_QWORD *)*v66;
          }
          while (v66);
          if (v67 != v218)
          {
            if (v70 < (unint64_t)v211)
              v68 = v69;
            if ((unint64_t)v211 >= v68[4])
            {
              v100 = 0;
              v101 = &v219[8 * (_QWORD)v67[6]];
              v102 = (void **)(v101 + 2);
              v103 = (unint64_t **)(v101 + 3);
              v104 = v101 + 4;
              v105 = (void **)(v101 + 5);
              v106 = (char **)(v101 + 6);
              v107 = v101 + 7;
              while (v100 < turi::query_eval::node_info::num_columns(v33))
              {
                v108 = *v103;
                if ((unint64_t)*v103 >= *v104)
                {
                  v110 = (unint64_t *)*v102;
                  v111 = ((char *)v108 - (_BYTE *)*v102) >> 3;
                  v112 = v111 + 1;
                  if ((unint64_t)(v111 + 1) >> 61)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v113 = *v104 - (_QWORD)v110;
                  if (v113 >> 2 > v112)
                    v112 = v113 >> 2;
                  if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
                    v114 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v114 = v112;
                  if (v114)
                  {
                    v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v104, v114);
                    v108 = *v103;
                    v110 = (unint64_t *)*v102;
                  }
                  else
                  {
                    v115 = 0;
                  }
                  v116 = (unint64_t *)&v115[8 * v111];
                  *v116 = v100;
                  v109 = v116 + 1;
                  while (v108 != v110)
                  {
                    v117 = *--v108;
                    *--v116 = v117;
                  }
                  *v102 = v116;
                  *v103 = v109;
                  *v104 = &v115[8 * v114];
                  if (v110)
                    operator delete(v110);
                }
                else
                {
                  *v108 = v100;
                  v109 = v108 + 1;
                }
                *v103 = v109;
                v118 = v100 + v28;
                v119 = *v106;
                if ((unint64_t)*v106 >= *v107)
                {
                  v121 = (char *)*v105;
                  v122 = (v119 - (_BYTE *)*v105) >> 3;
                  v123 = v122 + 1;
                  if ((unint64_t)(v122 + 1) >> 61)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v124 = *v107 - (_QWORD)v121;
                  if (v124 >> 2 > v123)
                    v123 = v124 >> 2;
                  if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
                    v125 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v125 = v123;
                  if (v125)
                  {
                    v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v107, v125);
                    v119 = *v106;
                    v121 = (char *)*v105;
                  }
                  else
                  {
                    v126 = 0;
                  }
                  v127 = &v126[8 * v122];
                  *(_QWORD *)v127 = v118;
                  v120 = v127 + 8;
                  while (v119 != v121)
                  {
                    v128 = *((_QWORD *)v119 - 1);
                    v119 -= 8;
                    *((_QWORD *)v127 - 1) = v128;
                    v127 -= 8;
                  }
                  *v105 = v127;
                  *v106 = v120;
                  *v107 = &v126[8 * v125];
                  if (v121)
                    operator delete(v121);
                }
                else
                {
                  *(_QWORD *)v119 = v118;
                  v120 = v119 + 8;
                }
                *v106 = v120;
                ++v100;
                v33 = v211;
              }
              goto LABEL_168;
            }
          }
        }
        memset(v216, 0, 32);
        memset(__p, 0, sizeof(__p));
        std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](__p, (uint64_t *)&v211);
        v71 = turi::query_eval::node_info::num_columns(v211);
        std::vector<unsigned long>::resize((uint64_t)&__p[2], v71);
        v72 = __p[2];
        v73 = __p[3];
        if (__p[2] != __p[3])
        {
          v74 = 0;
          do
            *v72++ = v74++;
          while (v72 != v73);
        }
        v75 = turi::query_eval::node_info::num_columns(v211);
        std::vector<unsigned long>::resize((uint64_t)&v216[1], v75);
        v76 = v216[1];
        v77 = v216[2];
        while (v76 != v77)
          *v76++ = v28++;
        v79 = (uint64_t)v219;
        v78 = v220;
        v213[0] = &v211;
        std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(&v217, (unint64_t *)&v211, (uint64_t)&std::piecewise_construct, (uint64_t **)v213)[6] = (uint64_t *)(((uint64_t)v78 - v79) >> 6);
        v80 = &v220->__vftable;
        if ((unint64_t)v220 >= v221)
        {
          v220 = (std::__shared_weak_count *)std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::__push_back_slow_path<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>((uint64_t *)&v219, (uint64_t)__p);
          if (v216[1])
          {
            v216[2] = v216[1];
            operator delete(v216[1]);
          }
        }
        else
        {
          v220->std::__shared_count = *(std::__shared_count *)__p;
          __p[0] = 0;
          __p[1] = 0;
          v80[2] = 0;
          v80[3] = 0;
          v80[4] = 0;
          v80[5] = 0;
          *((_OWORD *)v80 + 1) = *(_OWORD *)&__p[2];
          v80[4] = v216[0];
          __p[2] = 0;
          __p[3] = 0;
          v216[0] = 0;
          v80[6] = 0;
          v80[7] = 0;
          *(_OWORD *)(v80 + 5) = *(_OWORD *)&v216[1];
          v80[7] = v216[3];
          memset(&v216[1], 0, 24);
          v220 = (std::__shared_weak_count *)(v80 + 8);
        }
        if (__p[2])
        {
          __p[3] = __p[2];
          operator delete(__p[2]);
        }
        v81 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v82 = (unint64_t *)((char *)__p[1] + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
LABEL_166:
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
      }
LABEL_168:
      v130 = (std::__shared_weak_count *)v212;
      v5 = v198;
      if (v212)
      {
        v131 = (unint64_t *)((char *)v212 + 8);
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      v27 = v200 + 16;
      v28 = v201;
    }
    while (v200 + 16 != v199);
  }
  v213[0] = 0;
  v213[1] = 0;
  v214[0] = 0;
  std::vector<std::shared_ptr<turi::query_eval::node_info const>>::reserve((char **)v213, ((char *)v220 - (char *)v219) >> 6);
  v133 = turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)v5);
  __p[0] = (void *)-1;
  std::vector<unsigned long>::vector(&v211, v133, __p);
  v134 = v219;
  v135 = (uint64_t **)v220;
  if (v219 != (uint64_t **)v220)
  {
    v136 = 0;
    do
    {
      v137 = v134[5];
      v138 = v134[6];
      if (v137 != v138)
      {
        v139 = v211;
        do
        {
          v140 = *v137++;
          *((_QWORD *)v139 + v140) = v136++;
        }
        while (v137 != v138);
      }
      v141 = v134[2];
      v142 = v134[3];
      if (turi::query_eval::node_info::num_columns((turi::query_eval::node_info *)*v134) == v142 - v141)
      {
        v143 = v134[2];
        v144 = v134[3] - v143;
        if (v144 <= 1)
          v144 = 1;
        v145 = v144 - 1;
        v146 = v143 + 1;
        while (v145)
        {
          v147 = *v146;
          v148 = *(v146 - 1) + 1;
          --v145;
          ++v146;
          if (v148 != v147)
            goto LABEL_185;
        }
        std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)v213, (__int128 *)*v134);
      }
      else
      {
LABEL_185:
        v149 = (*v134)[1];
        v208 = **v134;
        v209 = (std::__shared_weak_count *)v149;
        if (v149)
        {
          v150 = (unint64_t *)(v149 + 8);
          do
            v151 = __ldxr(v150);
          while (__stxr(v151 + 1, v150));
        }
        turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v208, v134 + 2, &v210);
        v152 = (char *)v213[1];
        if (v213[1] >= (void *)v214[0])
        {
          v153 = ((char *)v213[1] - (char *)v213[0]) >> 4;
          v154 = v153 + 1;
          if ((unint64_t)(v153 + 1) >> 60)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v155 = v214[0] - (unint64_t)v213[0];
          if ((uint64_t)(v214[0] - (unint64_t)v213[0]) >> 3 > v154)
            v154 = v155 >> 3;
          if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF0)
            v156 = 0xFFFFFFFFFFFFFFFLL;
          else
            v156 = v154;
          v216[0] = v214;
          v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)v214, v156);
          v159 = &v157[16 * v153];
          *(_OWORD *)v159 = v210;
          v210 = 0uLL;
          v161 = v213[0];
          v160 = v213[1];
          if (v213[1] == v213[0])
          {
            v164 = vdupq_n_s64((unint64_t)v213[1]);
            v162 = &v157[16 * v153];
          }
          else
          {
            v162 = &v157[16 * v153];
            do
            {
              v163 = *((_OWORD *)v160 - 1);
              v160 -= 2;
              *((_OWORD *)v162 - 1) = v163;
              v162 -= 16;
              *v160 = 0;
              v160[1] = 0;
            }
            while (v160 != v161);
            v164 = *(int64x2_t *)v213;
          }
          v165 = v159 + 16;
          v213[0] = v162;
          v213[1] = v159 + 16;
          *(int64x2_t *)&__p[1] = v164;
          v166 = (void *)v214[0];
          v214[0] = &v157[16 * v158];
          __p[3] = v166;
          __p[0] = (void *)v164.i64[0];
          std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)__p);
          v167 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
          v213[1] = v165;
          if (*((_QWORD *)&v210 + 1))
          {
            v168 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
            do
              v169 = __ldaxr(v168);
            while (__stlxr(v169 - 1, v168));
            if (!v169)
            {
              ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
              std::__shared_weak_count::__release_weak(v167);
            }
          }
        }
        else
        {
          *(_OWORD *)v213[1] = v210;
          v210 = 0uLL;
          v213[1] = v152 + 16;
        }
        v170 = v209;
        if (v209)
        {
          v171 = (unint64_t *)&v209->__shared_owners_;
          do
            v172 = __ldaxr(v171);
          while (__stlxr(v172 - 1, v171));
          if (!v172)
          {
            ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
            std::__shared_weak_count::__release_weak(v170);
          }
        }
      }
      v134 += 8;
    }
    while (v134 != v135);
  }
  __p[0] = 0;
  __p[1] = 0;
  if ((void *)((char *)v213[1] - (char *)v213[0]) == (void *)16)
  {
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](__p, (uint64_t *)v213[0]);
  }
  else
  {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node((uint64_t)v213, &v210);
    v173 = v210;
    v210 = 0uLL;
    v174 = (std::__shared_weak_count *)__p[1];
    *(_OWORD *)__p = v173;
    if (v174)
    {
      v175 = (unint64_t *)&v174->__shared_owners_;
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
    v177 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
    if (*((_QWORD *)&v210 + 1))
    {
      v178 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
  }
  v180 = *(std::__shared_weak_count **)(v5 + 8);
  v206 = *(turi::query_eval::node_info **)v5;
  v207 = v180;
  if (v180)
  {
    v181 = (unint64_t *)&v180->__shared_owners_;
    do
      v182 = __ldxr(v181);
    while (__stxr(v182 + 1, v181));
  }
  v202 = __p[0];
  v203 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v183 = (unint64_t *)((char *)__p[1] + 8);
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 1, v183));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t *)&v202, (uint64_t **)&v211, &v204);
  turi::query_eval::optimization_engine::replace_node(a2, (uint64_t **)&v206, &v204);
  v185 = v205;
  if (v205)
  {
    v186 = (unint64_t *)&v205->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = v203;
  if (v203)
  {
    v189 = (unint64_t *)&v203->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = v207;
  if (v207)
  {
    v192 = (unint64_t *)&v207->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v195 = (unint64_t *)((char *)__p[1] + 8);
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  __p[0] = v213;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&v217, v218[0]);
  __p[0] = &v219;
  std::vector<turi::neural_net::labeled_image>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return 1;
}

void sub_218103718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void **__p,void **a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  if (__p)
  {
    a29 = __p;
    operator delete(__p);
  }
  __p = &a31;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&__p);
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy(v43 - 152, *(_QWORD **)(v43 - 144));
  *(_QWORD *)(v43 - 152) = v43 - 128;
  std::vector<turi::neural_net::labeled_image>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 152));
  _Unwind_Resume(a1);
}

void **std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 64 * v6;
    std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer(v7);
  }
  return result;
}

void sub_2181038F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::shared_ptr<turi::query_eval::node_info const>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::node_info const>,std::shared_ptr<turi::query_eval::node_info const>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD v13[2];
  char v14;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = v5[4];
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v13[1] = v6;
    *((_OWORD *)v11 + 2) = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v14 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v7, v11);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

uint64_t std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 64);
      a3 -= 64;
      *(_OWORD *)(v7 - 64) = v8;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 56);
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 64;
      *((_QWORD *)&v14 + 1) -= 64;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>::operator()[abi:ne180100](uint64_t *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(result[2] + 8);
  v2 = *(_QWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)std::allocator<turi::neural_net::labeled_image>::destroy[abi:ne180100](v3, v1);
      v1 += 8;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 64;
      result = std::allocator<turi::neural_net::labeled_image>::destroy[abi:ne180100](v4, (_QWORD *)(v1 - 64));
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(uint64_t a1, char *a2, _BYTE *a3, _BYTE *a4, uint64_t a5)
{
  char *v5;
  _BYTE *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  void *__p;
  uint64_t *v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = *(_QWORD *)(a1 + 16);
    v9 = a1 + 16;
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      v19 = v12 - (_QWORD)a2;
      if (a5 <= (uint64_t)(v12 - (_QWORD)a2) >> 3)
      {
        v20 = &a3[16 * a5];
        v21 = *(char **)(v9 - 8);
      }
      else
      {
        v20 = &a3[16 * (v19 >> 3)];
        std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(a1, v20, a4);
        if (v19 < 1)
          return v5;
        v21 = *(char **)(a1 + 8);
      }
      v22 = &v5[8 * a5];
      v23 = &v21[-8 * a5];
      v24 = v21;
      if ((unint64_t)v23 < v12)
      {
        v24 = v21;
        do
        {
          v25 = *(_QWORD *)v23;
          v23 += 8;
          *(_QWORD *)v24 = v25;
          v24 += 8;
        }
        while ((unint64_t)v23 < v12);
      }
      *(_QWORD *)(a1 + 8) = v24;
      if (v21 != v22)
        memmove(&v21[-8 * ((v21 - v22) >> 3)], v5, v21 - v22);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,unsigned long *>((uint64_t)&__p, v7, v20, (uint64_t *)v5);
    }
    else
    {
      v13 = *(_BYTE **)a1;
      v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
      if (v14 >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v15 = (a2 - v13) >> 3;
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 2 > v14)
        v14 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v34 = v9;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v17);
      else
        v18 = 0;
      v26 = (uint64_t *)&v18[8 * v15];
      __p = v18;
      v31 = v26;
      v32 = v26;
      v33 = &v18[8 * v17];
      v27 = 8 * a5;
      v28 = &v26[a5];
      do
      {
        std::allocator<unsigned long>::construct[abi:ne180100]<unsigned long,turi::flexible_type const&>(v34, v26++, v7);
        v7 += 16;
        v27 -= 8;
      }
      while (v27);
      v32 = v28;
      v5 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
      if (v32 != v31)
        v32 = (uint64_t *)((char *)v32 + (((char *)v31 - (char *)v32 + 7) & 0xFFFFFFFFFFFFFFF8));
      if (__p)
        operator delete(__p);
    }
  }
  return v5;
}

void sub_218103DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v5;
  uint64_t *v6;

  if (a2 == a3)
  {
    v6 = *(uint64_t **)(a1 + 8);
  }
  else
  {
    v5 = a2;
    v6 = *(uint64_t **)(a1 + 8);
    do
    {
      std::allocator<unsigned long>::construct[abi:ne180100]<unsigned long,turi::flexible_type const&>(a1 + 16, v6, v5);
      v5 += 16;
      ++v6;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(a1 + 8) = v6;
}

void sub_218103EB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::allocator<unsigned long>::construct[abi:ne180100]<unsigned long,turi::flexible_type const&>(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  std::runtime_error *exception;
  std::string *v21;
  __int128 v22;
  void *__p[2];
  void *v24[2];
  __int128 v25;
  __int128 v26;
  std::string v27;
  size_t __idx;

  v4 = 0;
  switch(a3[12])
  {
    case 0:
      v4 = *(_QWORD *)a3;
      goto LABEL_29;
    case 1:
      v4 = (uint64_t)*(double *)a3;
      goto LABEL_29;
    case 2:
      v8 = *(_QWORD *)a3;
      v9 = (char **)(*(_QWORD *)a3 + 8);
      __idx = 0;
      v10 = (char *)v9;
      if (*(char *)(v8 + 31) < 0)
        v10 = *v9;
      std::string::basic_string[abi:ne180100]<0>(__p, v10);
      v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v24[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v8 + 31) < 0)
        v11 = *(_QWORD *)(v8 + 16);
      else
        v11 = *(unsigned __int8 *)(v8 + 31);
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v21 = std::string::append(&v27, " cannot be interpreted as an integer");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v24[0] = (void *)v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v5 = *(_QWORD *)a3;
      __p[1] = 0;
      v24[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(_QWORD *)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      v12 = *(_QWORD *)a3;
      __p[1] = 0;
      v24[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
      goto LABEL_28;
    case 5:
      v13 = *(_QWORD *)a3;
      __p[1] = 0;
      v24[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
      goto LABEL_28;
    case 6:
      v4 = (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v14 = *(_QWORD *)a3;
      v15 = *(unsigned int **)(*(_QWORD *)a3 + 16);
      __p[0] = *(void **)(*(_QWORD *)a3 + 8);
      __p[1] = v15;
      if (v15)
      {
        v16 = v15 + 2;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(_OWORD *)(v14 + 24);
      v19 = *(_OWORD *)(v14 + 56);
      v25 = *(_OWORD *)(v14 + 40);
      v26 = v19;
      *(_OWORD *)v24 = v18;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v25 + 1))
      {
        *(_QWORD *)&v26 = *((_QWORD *)&v25 + 1);
        operator delete(*((void **)&v25 + 1));
      }
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      v4 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_29;
      v6 = (unint64_t *)((char *)__p[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
      }
LABEL_28:
      v4 = 0;
LABEL_29:
      *a2 = v4;
      return;
    default:
      turi::apply_binary_op_ff();
  }
}

void sub_218104198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 41) < 0)
  {
    operator delete(*(void **)(v16 - 64));
    if ((v15 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

_BYTE *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,unsigned long *>(uint64_t a1, _BYTE *a2, _BYTE *a3, uint64_t *a4)
{
  _BYTE *v5;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  std::runtime_error *exception;
  std::string *v25;
  __int128 v26;
  unsigned int *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::string __p;
  std::string::size_type v33;
  void *v34;
  void *v35;
  std::string v36;
  size_t __idx[2];

  v5 = a2;
  if (a2 != a3)
  {
    while (2)
    {
      v7 = 0;
      switch(v5[12])
      {
        case 0:
          v7 = *(_QWORD *)v5;
          goto LABEL_30;
        case 1:
          v7 = (uint64_t)*(double *)v5;
          goto LABEL_30;
        case 2:
          v12 = *(_QWORD *)v5;
          v13 = (char **)(*(_QWORD *)v5 + 8);
          __idx[0] = 0;
          v14 = (char *)v13;
          if (*(char *)(v12 + 31) < 0)
            v14 = *v13;
          std::string::basic_string[abi:ne180100]<0>(&__p, v14);
          v7 = std::stoll(&__p, __idx, 10);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (*(char *)(v12 + 31) < 0)
            v15 = *(_QWORD *)(v12 + 16);
          else
            v15 = *(unsigned __int8 *)(v12 + 31);
          if (__idx[0] != v15)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v25 = std::string::append(&v36, " cannot be interpreted as an integer");
            v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__p);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_30;
        case 3:
          v8 = *(_QWORD *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v8 + 8), *(_QWORD *)(v8 + 16), (uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_29;
        case 4:
          v16 = *(_QWORD *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
          goto LABEL_29;
        case 5:
          v17 = *(_QWORD *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
          goto LABEL_29;
        case 6:
          v7 = (uint64_t)(*(_QWORD *)v5 << 8) >> 8;
          goto LABEL_30;
        case 7:
          goto LABEL_30;
        case 8:
          v18 = *(_QWORD *)v5;
          v19 = *(unsigned int **)(*(_QWORD *)v5 + 16);
          v28 = v19;
          if (v19)
          {
            v20 = v19 + 2;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v22 = *(_OWORD *)(v18 + 24);
          v23 = *(_OWORD *)(v18 + 56);
          v30 = *(_OWORD *)(v18 + 40);
          v31 = v23;
          v29 = v22;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v28);
          goto LABEL_29;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v5 + 8);
          turi::flexible_type_fail(0);
          if (v34)
          {
            v35 = v34;
            operator delete(v34);
          }
          if (__p.__r_.__value_.__r.__words[2])
          {
            v33 = __p.__r_.__value_.__r.__words[2];
            operator delete((void *)__p.__r_.__value_.__r.__words[2]);
          }
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
LABEL_29:
          v7 = 0;
LABEL_30:
          *a4++ = v7;
          v5 += 16;
          if (v5 != a3)
            continue;
          v5 = a3;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      break;
    }
  }
  return v5;
}

void sub_218104588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;
  uint64_t v24;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v24 - 97) < 0)
  {
    operator delete(*(void **)(v24 - 120));
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void std::vector<unsigned long>::__assign_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(uint64_t **a1, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t *v14;
  char v15;
  char v16;

  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (a4 <= (v8 - (uint64_t)*a1) >> 3)
  {
    v12 = a1[1] - v9;
    if (v12 >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,unsigned long *>((uint64_t)&v16, a2, a3, v9);
      a1[1] = v14;
    }
    else
    {
      v13 = &a2[16 * v12];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,unsigned long *>((uint64_t)&v15, a2, v13, v9);
      std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((uint64_t)a1, v13, a3);
    }
  }
  else
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, v11);
    std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((uint64_t)a1, a2, a3);
  }
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::node_info const>,unsigned long>,std::__map_value_compare<std::shared_ptr<turi::query_eval::node_info const>,std::__value_type<std::shared_ptr<turi::query_eval::node_info const>,unsigned long>,std::less<std::shared_ptr<turi::query_eval::node_info const>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::node_info const>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::node_info const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::node_info const>&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  _QWORD v15[2];
  char v16;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x38uLL);
    v15[1] = v7;
    v13 = *a4;
    v12[2] = **a4;
    *v13 = 0;
    v13[1] = 0;
    *((_QWORD *)v12 + 6) = 0;
    v16 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>>>>::reset[abi:ne180100]((uint64_t)v15, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::__push_back_slow_path<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>(v7, v9);
  v11 = &v10[64 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[64 * v12];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v15[2] = v11 + 64;
  std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer(v15);
  return v13;
}

void sub_218104974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_empty_append>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EA68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_empty_append>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EA68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_empty_append>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_eliminate_empty_append::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "append(source, empty_source) -> source");
}

uint64_t turi::query_eval::opt_eliminate_empty_append::apply_transform(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;

  v5 = turi::query_eval::node_info::length(*(turi::query_eval::node_info **)(*(_QWORD *)(*a3 + 40) + 16));
  v6 = *a3;
  if (!v5)
  {
    v8 = (std::__shared_weak_count *)a3[1];
    v41 = (uint64_t *)*a3;
    v42 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v6 = *a3;
    }
    v11 = **(uint64_t ***)(v6 + 40);
    v13 = *v11;
    v12 = (std::__shared_weak_count *)v11[1];
    v39 = v13;
    v40 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    turi::query_eval::optimization_engine::replace_node(a2, &v41, &v39);
    v16 = v40;
    if (v40)
    {
      v17 = (unint64_t *)&v40->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v42;
    if (!v42)
      return 1;
    v20 = (unint64_t *)&v42->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    goto LABEL_35;
  }
  if (turi::query_eval::node_info::length(**(turi::query_eval::node_info ***)(v6 + 40)))
    return 0;
  v22 = *a3;
  v23 = (std::__shared_weak_count *)a3[1];
  v37 = (uint64_t *)*a3;
  v38 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v22 = *a3;
  }
  v26 = *(uint64_t **)(*(_QWORD *)(v22 + 40) + 16);
  v28 = *v26;
  v27 = (std::__shared_weak_count *)v26[1];
  v35 = v28;
  v36 = v27;
  if (v27)
  {
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  turi::query_eval::optimization_engine::replace_node(a2, &v37, &v35);
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v19 = v38;
  if (v38)
  {
    v34 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v34);
    while (__stlxr(v21 - 1, v34));
LABEL_35:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return 1;
}

void sub_218104BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::node_info::length(turi::query_eval::node_info *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v9 = *(_QWORD *)this;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::infer_planner_node_length((uint64_t)&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_218104C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_project_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EB08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_project_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EB08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_union_project_exchange>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_union_project_exchange::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "partitionable_project(union(a,...)) ?->? union(project1(a), ...)");
}

uint64_t turi::query_eval::opt_union_project_exchange::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  turi::query_eval::node_info **v4;
  turi::query_eval::node_info *v5;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::vector<int>::size_type v12;
  uint64_t *v13;
  uint64_t *v14;
  int *i;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t j;
  uint64_t v29;
  _QWORD *v30;
  _QWORD **v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *size;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  const std::string *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  __int128 v79;
  __int128 v80;
  std::runtime_error *exception;
  std::string *v82;
  __int128 v83;
  __int128 *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  uint64_t **v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t *v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t *v123;
  std::__shared_weak_count *v124;
  void *__p[3];
  uint64_t v126;
  std::__shared_weak_count *v127;
  __int128 *v128;
  __int128 *v129;
  void *v130;
  _QWORD v131[3];
  void *v132[3];
  std::vector<int> v133;
  turi::query_eval::node_info *v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  unsigned int *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  std::string __x;
  std::string::size_type v142;
  void *v143;
  void *v144;
  std::string v145;
  size_t __idx[2];

  v3 = *a3;
  v4 = (turi::query_eval::node_info **)(*a3)[5];
  v5 = *v4;
  if (*((_DWORD *)*v4 + 4) == 11)
  {
    v8 = (std::__shared_weak_count *)v4[1];
    v134 = v5;
    v135 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v3 = *a3;
    }
    std::string::basic_string[abi:ne180100]<0>(&__x, "indices");
    v11 = *(_QWORD *)turi::query_eval::node_info::p(v3, (uint64_t)&__x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__x.__r_.__value_.__l.__data_);
    v12 = turi::query_eval::node_info::num_columns(v5);
    LODWORD(__x.__r_.__value_.__l.__data_) = 0;
    std::vector<int>::vector(&v133, v12, (const std::vector<int>::value_type *)&__x);
    v13 = *(uint64_t **)(v11 + 8);
    v14 = *(uint64_t **)(v11 + 16);
    for (i = v133.__begin_; v13 != v14; i[v16] = 1)
    {
      v16 = *v13;
      v13 += 2;
    }
    if (i == v133.__end_)
    {
LABEL_14:
      v18 = 0;
      if (!i)
        goto LABEL_16;
      goto LABEL_15;
    }
    v17 = i;
    while (*v17)
    {
      if (++v17 == v133.__end_)
        goto LABEL_14;
    }
    v23 = turi::query_eval::node_info::num_columns(v5);
    __x.__r_.__value_.__r.__words[0] = -1;
    std::vector<unsigned long>::vector(v132, v23, &__x);
    std::vector<std::vector<unsigned long>>::vector(v131, (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 4);
    v111 = a3;
    v112 = a2;
    v24 = (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 4;
    __x.__r_.__value_.__s.__data_[0] = 0;
    std::vector<BOOL>::vector(&v130, v24, (unsigned __int8 *)&__x);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    for (j = 0; j < turi::query_eval::node_info::num_columns(v5); ++j)
    {
      if (v133.__begin_[j])
      {
        v29 = v131[0] + 24 * v27;
        v31 = (_QWORD **)(v29 + 8);
        v30 = *(_QWORD **)(v29 + 8);
        v33 = (_QWORD *)(v29 + 16);
        v32 = *(_QWORD *)(v29 + 16);
        if ((unint64_t)v30 >= v32)
        {
          v35 = *(_QWORD **)v29;
          v36 = ((uint64_t)v30 - *(_QWORD *)v29) >> 3;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v38 = v32 - (_QWORD)v35;
          if (v38 >> 2 > v37)
            v37 = v38 >> 2;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
            v39 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v33, v39);
            v30 = *v31;
            v35 = *(_QWORD **)v29;
          }
          else
          {
            v40 = 0;
          }
          v41 = &v40[8 * v36];
          *(_QWORD *)v41 = v25;
          v34 = v41 + 8;
          while (v30 != v35)
          {
            v42 = *--v30;
            *((_QWORD *)v41 - 1) = v42;
            v41 -= 8;
          }
          *(_QWORD *)v29 = v41;
          *v31 = v34;
          *v33 = &v40[8 * v39];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *v30 = v25;
          v34 = v30 + 1;
        }
        *v31 = v34;
        *((_QWORD *)v132[0] + j) = j - v26;
      }
      else
      {
        ++v26;
        *(_QWORD *)((char *)v130 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      }
      v43 = turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(*((_QWORD *)v5 + 5) + 16 * v27));
      v44 = v25 + 1 == v43;
      if (v25 + 1 == v43)
        v25 = 0;
      else
        ++v25;
      if (v44)
        ++v27;
    }
    std::vector<std::shared_ptr<turi::query_eval::planner_node>>::vector(&v128, (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 4);
    v45 = *((_QWORD *)v5 + 5);
    if (*((_QWORD *)v5 + 6) != v45)
    {
      v46 = 0;
      do
      {
        v47 = v131[0] + 24 * v46;
        if (*(_QWORD *)v47 == *(_QWORD *)(v47 + 8))
        {
          std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](&v128[v46]);
        }
        else if (((*(_QWORD *)((char *)v130 + ((v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v46) & 1) != 0)
        {
          v48 = *(uint64_t **)(v45 + 16 * v46);
          v50 = *v48;
          v49 = (std::__shared_weak_count *)v48[1];
          v126 = v50;
          v127 = v49;
          if (v49)
          {
            v51 = (unint64_t *)&v49->__shared_owners_;
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
          }
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v126, (uint64_t **)v47, &__x);
          std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)&v128[v46], (__int128 *)&__x);
          size = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
          if (__x.__r_.__value_.__l.__size_)
          {
            v54 = (unint64_t *)(__x.__r_.__value_.__l.__size_ + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          v56 = v127;
          if (v127)
          {
            v57 = (unint64_t *)&v127->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v5 = v134;
        }
        else
        {
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v128[v46], *(uint64_t **)(v45 + 16 * v46));
        }
        ++v46;
        v45 = *((_QWORD *)v5 + 5);
      }
      while (v46 < (*((_QWORD *)v5 + 6) - v45) >> 4);
    }
    v59 = std::remove_if[abi:ne180100]<std::__wrap_iter<std::shared_ptr<turi::query_eval::planner_node> *>,turi::query_eval::opt_union_project_exchange::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::planner_node> const&)#1}>(v128, v129);
    std::vector<std::shared_ptr<turi::sframe_rows const>>::resize((uint64_t)&v128, v59 - v128);
    std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 4);
    v60 = *(_QWORD *)(v11 + 8);
    if (*(_QWORD *)(v11 + 16) != v60)
    {
      v61 = 0;
      while (2)
      {
        v62 = v60 + 16 * v61;
        v63 = 0;
        switch(*(_BYTE *)(v62 + 12))
        {
          case 0:
            v63 = *(_QWORD *)v62;
            goto LABEL_101;
          case 1:
            v63 = (uint64_t)*(double *)v62;
            goto LABEL_101;
          case 2:
            v68 = *(_QWORD *)v62;
            v69 = (char **)(*(_QWORD *)v62 + 8);
            __idx[0] = 0;
            v70 = (char *)v69;
            if (*(char *)(v68 + 31) < 0)
              v70 = *v69;
            v71 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&__x, v70);
            v63 = std::stoll(v71, __idx, 10);
            if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__x.__r_.__value_.__l.__data_);
            if (*(char *)(v68 + 31) < 0)
              v72 = *(_QWORD *)(v68 + 16);
            else
              v72 = *(unsigned __int8 *)(v68 + 31);
            if (__idx[0] != v72)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v82 = std::string::append(&v145, " cannot be interpreted as an integer");
              v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
              __x.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v83;
              v82->__r_.__value_.__l.__size_ = 0;
              v82->__r_.__value_.__r.__words[2] = 0;
              v82->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, &__x);
              __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_101;
          case 3:
            v64 = *(_QWORD *)v62;
            memset(&__x, 0, sizeof(__x));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__x, *(const void **)(v64 + 8), *(_QWORD *)(v64 + 16), (uint64_t)(*(_QWORD *)(v64 + 16) - *(_QWORD *)(v64 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__x.__r_.__value_.__r.__words[0])
            {
              __x.__r_.__value_.__l.__size_ = __x.__r_.__value_.__r.__words[0];
              operator delete(__x.__r_.__value_.__l.__data_);
            }
            goto LABEL_100;
          case 4:
            v73 = *(_QWORD *)v62;
            memset(&__x, 0, sizeof(__x));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__x, *(uint64_t **)(v73 + 8), *(uint64_t **)(v73 + 16), (uint64_t)(*(_QWORD *)(v73 + 16) - *(_QWORD *)(v73 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&__x;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v145);
            goto LABEL_100;
          case 5:
            v74 = *(_QWORD *)v62;
            memset(&__x, 0, sizeof(__x));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__x, *(uint64_t **)(v74 + 8), *(uint64_t **)(v74 + 16), (uint64_t)(*(_QWORD *)(v74 + 16) - *(_QWORD *)(v74 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&__x;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v145);
            goto LABEL_100;
          case 6:
            v63 = (uint64_t)(*(_QWORD *)v62 << 8) >> 8;
            goto LABEL_101;
          case 7:
            goto LABEL_101;
          case 8:
            v75 = *(_QWORD *)v62;
            v76 = *(unsigned int **)(v75 + 16);
            v136 = *(_QWORD *)(v75 + 8);
            v137 = v76;
            if (v76)
            {
              v77 = v76 + 2;
              do
                v78 = __ldxr(v77);
              while (__stxr(v78 + 1, v77));
            }
            v79 = *(_OWORD *)(v75 + 24);
            v80 = *(_OWORD *)(v75 + 56);
            v139 = *(_OWORD *)(v75 + 40);
            v140 = v80;
            v138 = v79;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count(&v137);
            goto LABEL_100;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__x, *(_QWORD *)v62 + 8);
            turi::flexible_type_fail(0);
            if (v143)
            {
              v144 = v143;
              operator delete(v143);
            }
            if (__x.__r_.__value_.__r.__words[2])
            {
              v142 = __x.__r_.__value_.__r.__words[2];
              operator delete((void *)__x.__r_.__value_.__r.__words[2]);
            }
            v65 = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
            if (__x.__r_.__value_.__l.__size_)
            {
              v66 = (unint64_t *)(__x.__r_.__value_.__l.__size_ + 8);
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
LABEL_100:
            v63 = 0;
LABEL_101:
            *((_QWORD *)__p[0] + v61++) = *((_QWORD *)v132[0] + v63);
            v60 = *(_QWORD *)(v11 + 8);
            if (v61 >= (*(_QWORD *)(v11 + 16) - v60) >> 4)
              break;
            continue;
          default:
            result = turi::flexible_type_fail(0);
            __break(1u);
            return result;
        }
        break;
      }
    }
    v84 = v128;
    if ((char *)v129 - (char *)v128 == 16)
    {
      v85 = (std::__shared_weak_count *)v111[1];
      v123 = *v111;
      v124 = v85;
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      v89 = *(_QWORD *)v84;
      v88 = (std::__shared_weak_count *)*((_QWORD *)v84 + 1);
      v119 = v89;
      v120 = v88;
      if (v88)
      {
        v90 = (unint64_t *)&v88->__shared_owners_;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v119, (uint64_t **)__p, &v121);
      turi::query_eval::optimization_engine::replace_node(v112, &v123, &v121);
      v92 = v122;
      if (v122)
      {
        v93 = (unint64_t *)&v122->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v95 = v120;
      if (v120)
      {
        v96 = (unint64_t *)&v120->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v98 = v124;
      if (v124)
      {
        v99 = (unint64_t *)&v124->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        goto LABEL_143;
      }
    }
    else
    {
      v101 = (std::__shared_weak_count *)v111[1];
      v117 = *v111;
      v118 = v101;
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node((uint64_t)&v128, &v113);
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v113, (uint64_t **)__p, &v115);
      turi::query_eval::optimization_engine::replace_node(v112, &v117, &v115);
      v104 = v116;
      if (v116)
      {
        v105 = (unint64_t *)&v116->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v107 = v114;
      if (v114)
      {
        v108 = (unint64_t *)&v114->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v98 = v118;
      if (v118)
      {
        v110 = (unint64_t *)&v118->__shared_owners_;
        do
          v100 = __ldaxr(v110);
        while (__stlxr(v100 - 1, v110));
LABEL_143:
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
    if (v130)
      operator delete(v130);
    __x.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
    if (v132[0])
    {
      v132[1] = v132[0];
      operator delete(v132[0]);
    }
    v18 = 1;
    i = v133.__begin_;
    if (!v133.__begin_)
      goto LABEL_16;
LABEL_15:
    v133.__end_ = i;
    operator delete(i);
LABEL_16:
    v19 = v135;
    if (v135)
    {
      v20 = (unint64_t *)&v135->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    return v18;
  }
  return 0;
}

void sub_2181056D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v43 - 120) = &a28;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 120));
  if (a31)
    operator delete(a31);
  *(_QWORD *)(v43 - 120) = &a34;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 120));
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  _Unwind_Resume(a1);
}

__int128 *std::remove_if[abi:ne180100]<std::__wrap_iter<std::shared_ptr<turi::query_eval::planner_node> *>,turi::query_eval::opt_union_project_exchange::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::planner_node> const&)#1}>(__int128 *a1, __int128 *a2)
{
  __int128 *v3;
  __int128 *i;

  if (a1 == a2)
    return a2;
  v3 = a1;
  while (*(_QWORD *)v3)
  {
    if (++v3 == a2)
      return a2;
  }
  if (v3 != a2)
  {
    for (i = v3 + 1; i != a2; ++i)
    {
      if (*(_QWORD *)i)
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v3++, i);
    }
  }
  return v3;
}

_QWORD *std::vector<std::vector<unsigned long>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2181059F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<turi::query_eval::planner_node>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_218105A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_append_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EBA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_append_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EBA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_project_append_exchange>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_project_append_exchange::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project(append(a,b)) -> append(project(a), project(b))");
}

uint64_t turi::query_eval::opt_project_append_exchange::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;

  v3 = *a3;
  if (*(_DWORD *)(*(_QWORD *)(*a3)[5] + 16) != 1)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&v61, "indices");
  v6 = *(_QWORD *)turi::query_eval::node_info::p(v3, (uint64_t)&v61);
  if (SHIBYTE(v63) < 0)
    operator delete(v61);
  v7 = *(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8);
  if (turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(*a3)[5]) < (unint64_t)(v7 >> 4))
    return 0;
  v9 = *(_BYTE **)(v6 + 8);
  v10 = *(_BYTE **)(v6 + 16);
  v61 = 0;
  v62 = 0;
  v63 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(&v61, v9, v10, (v10 - v9) >> 4);
  v11 = **(uint64_t ***)(*(_QWORD *)(*a3)[5] + 40);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v55 = v13;
  v56 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v55, &v61, &v57);
  v16 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*a3)[5] + 40) + 16);
  v18 = *v16;
  v17 = (std::__shared_weak_count *)v16[1];
  v51 = v18;
  v52 = v17;
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v51, &v61, &v53);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::make_planner_node(&v57, &v53, &v59);
  v21 = v54;
  if (v54)
  {
    v22 = (unint64_t *)&v54->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v52;
  if (v52)
  {
    v25 = (unint64_t *)&v52->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v58;
  if (v58)
  {
    v28 = (unint64_t *)&v58->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v56;
  if (v56)
  {
    v31 = (unint64_t *)&v56->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)a3[1];
  v49 = *a3;
  v50 = v33;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v47 = v59;
  v48 = v60;
  if (v60)
  {
    v36 = (unint64_t *)&v60->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  turi::query_eval::optimization_engine::replace_node(a2, &v49, &v47);
  v38 = v48;
  if (v48)
  {
    v39 = (unint64_t *)&v48->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v50;
  if (v50)
  {
    v42 = (unint64_t *)&v50->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v60;
  if (v60)
  {
    v45 = (unint64_t *)&v60->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  return 1;
}

void sub_218105E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2 - 72);
  v4 = *(void **)(v2 - 56);
  if (v4)
  {
    *(_QWORD *)(v2 - 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::make_planner_node(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t i;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  const void **v19;
  _QWORD *v20[2];
  _QWORD **v21;
  _QWORD *v22[2];
  void **v23;
  char v24;
  int v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x24BDAC8D0];
  v22[0] = 0;
  v22[1] = 0;
  v20[1] = 0;
  v21 = v22;
  v19 = (const void **)v20;
  v20[0] = 0;
  v4 = a1[1];
  v26[0] = *a1;
  v26[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[1];
  v26[2] = *a2;
  v26[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v23 = (void **)&v16;
  v24 = 0;
  v10 = operator new(0x20uLL);
  v11 = 0;
  v16 = v10;
  v17 = v10;
  v18 = v10 + 4;
  do
  {
    v12 = *(_OWORD *)&v26[2 * v11];
    *(_OWORD *)v10 = v12;
    if (*((_QWORD *)&v12 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ++v11;
    v10 += 2;
  }
  while (v11 != 2);
  v17 = v10;
  v25 = 1;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v25, (uint64_t)&v21, &v19, &v16, a3);
  v23 = (void **)&v16;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v23);
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v26[i]);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v19, v20[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v21, v22[0]);
}

void sub_218106028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v8;
  va_list va;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  _QWORD *v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD *);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD *);
  v15 = va_arg(va2, _QWORD);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v5 - 72 + i);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)va, v10);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va1, v14);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(_QWORD *a1, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a4);
    std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((uint64_t)a1, a2, a3);
  }
}

void sub_2181060CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_singleton_union>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EC48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_singleton_union>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EC48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_singleton_union>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_eliminate_singleton_union::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "union(a) -> a");
}

BOOL turi::query_eval::opt_eliminate_singleton_union::apply_transform(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t **v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;

  v3 = *(uint64_t ***)(*a3 + 40);
  v4 = *(_QWORD *)(*a3 + 48) - (_QWORD)v3;
  if (v4 == 16)
  {
    v5 = (std::__shared_weak_count *)a3[1];
    v22 = (uint64_t *)*a3;
    v23 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v3 = *(uint64_t ***)(*a3 + 40);
    }
    v8 = *v3;
    v10 = *v8;
    v9 = (std::__shared_weak_count *)v8[1];
    v20 = v10;
    v21 = v9;
    if (v9)
    {
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    turi::query_eval::optimization_engine::replace_node(a2, &v22, &v20);
    v13 = v21;
    if (v21)
    {
      v14 = (unint64_t *)&v21->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v23;
    if (v23)
    {
      v17 = (unint64_t *)&v23->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  return v4 == 16;
}

void sub_218106258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_logical_filter_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92ECE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_logical_filter_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92ECE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_project_logical_filter_exchange>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_project_logical_filter_exchange::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project(logical_filter(a), mask) -> logical_filter(project(a), mask)");
}

uint64_t turi::query_eval::opt_project_logical_filter_exchange::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;

  v3 = *a3;
  if (*(_DWORD *)(*(_QWORD *)(*a3)[5] + 16) != 3)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&v56, "indices");
  v6 = *(_QWORD *)turi::query_eval::node_info::p(v3, (uint64_t)&v56);
  if (SHIBYTE(v58) < 0)
    operator delete(v56);
  v7 = *(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8);
  if (turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(*a3)[5]) < (unint64_t)(v7 >> 4))
    return 0;
  v9 = *(_BYTE **)(v6 + 8);
  v10 = *(_BYTE **)(v6 + 16);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(&v56, v9, v10, (v10 - v9) >> 4);
  v11 = **(uint64_t ***)(*(_QWORD *)(*a3)[5] + 40);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v50 = v13;
  v51 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v50, &v56, &v52);
  v16 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*a3)[5] + 40) + 16);
  v18 = *v16;
  v17 = (std::__shared_weak_count *)v16[1];
  v48 = v18;
  v49 = v17;
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::make_planner_node(&v52, &v48, &v54);
  v21 = v49;
  if (v49)
  {
    v22 = (unint64_t *)&v49->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v53;
  if (v53)
  {
    v25 = (unint64_t *)&v53->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v51;
  if (v51)
  {
    v28 = (unint64_t *)&v51->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)a3[1];
  v46 = *a3;
  v47 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v44 = v54;
  v45 = v55;
  if (v55)
  {
    v33 = (unint64_t *)&v55->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  turi::query_eval::optimization_engine::replace_node(a2, &v46, &v44);
  v35 = v45;
  if (v45)
  {
    v36 = (unint64_t *)&v45->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v47;
  if (v47)
  {
    v39 = (unint64_t *)&v47->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v55;
  if (v55)
  {
    v42 = (unint64_t *)&v55->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  return 1;
}

void sub_2181065D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2 - 72);
  v4 = *(void **)(v2 - 56);
  if (v4)
  {
    *(_QWORD *)(v2 - 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::make_planner_node(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t i;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  const void **v19;
  _QWORD *v20[2];
  _QWORD **v21;
  _QWORD *v22[2];
  void **v23;
  char v24;
  int v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x24BDAC8D0];
  v22[0] = 0;
  v22[1] = 0;
  v20[1] = 0;
  v21 = v22;
  v19 = (const void **)v20;
  v20[0] = 0;
  v4 = a1[1];
  v26[0] = *a1;
  v26[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[1];
  v26[2] = *a2;
  v26[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v23 = (void **)&v16;
  v24 = 0;
  v10 = operator new(0x20uLL);
  v11 = 0;
  v16 = v10;
  v17 = v10;
  v18 = v10 + 4;
  do
  {
    v12 = *(_OWORD *)&v26[2 * v11];
    *(_OWORD *)v10 = v12;
    if (*((_QWORD *)&v12 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ++v11;
    v10 += 2;
  }
  while (v11 != 2);
  v17 = v10;
  v25 = 3;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v25, (uint64_t)&v21, &v19, &v16, a3);
  v23 = (void **)&v16;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v23);
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v26[i]);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v19, v20[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v21, v22[0]);
}

void sub_2181067C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v8;
  va_list va;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  _QWORD *v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD *);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD *);
  v15 = va_arg(va2, _QWORD);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v5 - 72 + i);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)va, v10);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va1, v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_logical_filter_linear_transform_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92ED88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_logical_filter_linear_transform_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92ED88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_logical_filter_linear_transform_exchange>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_logical_filter_linear_transform_exchange::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "logical_filter(linear_transform(a), b) -> linear_transform(logical_filter(a, b))");
}

BOOL turi::query_eval::opt_logical_filter_transform::transform_applies(uint64_t a1, int a2)
{
  return a2 == 3;
}

uint64_t turi::query_eval::opt_logical_filter_linear_transform_exchange::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  const void ***v8;
  _QWORD **v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;

  result = turi::query_eval::is_linear_transform(*(_QWORD *)(*a3)[5] + 24);
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(*a3)[5];
    if (*(_QWORD *)(v6 + 72) - *(_QWORD *)(v6 + 64) > 0x10uLL || *(_DWORD *)(v6 + 16) == 4)
    {
      return 0;
    }
    else
    {
      v7 = *(_QWORD *)v6 + 8;
      v8 = (const void ***)(*(_QWORD *)v6 + 32);
      v9 = (_QWORD **)(*(_QWORD *)v6 + 56);
      LODWORD(v59) = **(_DWORD **)v6;
      std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>((int *)&v59, v7, v8, v9, &v61);
      std::vector<std::shared_ptr<turi::sframe_rows const>>::resize(v61 + 56, (uint64_t)(*(_QWORD *)(**(_QWORD **)(*a3)[5] + 64) - *(_QWORD *)(**(_QWORD **)(*a3)[5] + 56)) >> 4);
      v10 = *a3;
      v11 = (_QWORD *)(*a3)[5];
      v12 = (uint64_t *)v11[2];
      v14 = *v12;
      v13 = (std::__shared_weak_count *)v12[1];
      v59 = v14;
      v60 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        v10 = *a3;
        v11 = (_QWORD *)(*a3)[5];
      }
      v18 = (uint64_t *)(*(_QWORD *)*v11 + 56);
      v17 = *v18;
      if (v18[1] != *v18)
      {
        v19 = 0;
        do
        {
          v20 = *(_OWORD *)(v17 + 16 * v19);
          v57 = v20;
          if (*((_QWORD *)&v20 + 1))
          {
            v21 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v55 = v59;
          v56 = v60;
          if (v60)
          {
            v23 = (unint64_t *)&v60->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::make_planner_node(&v57, &v55, &v58);
          std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*(_QWORD *)(v61 + 56) + 16 * v19, &v58);
          v25 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
          if (*((_QWORD *)&v58 + 1))
          {
            v26 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v28 = v56;
          if (v56)
          {
            v29 = (unint64_t *)&v56->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          v31 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
          if (*((_QWORD *)&v57 + 1))
          {
            v32 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          ++v19;
          v10 = *a3;
          v17 = *(_QWORD *)(**(_QWORD **)(*a3)[5] + 56);
        }
        while (v19 < (*(_QWORD *)(**(_QWORD **)(*a3)[5] + 64) - v17) >> 4);
      }
      v34 = (std::__shared_weak_count *)a3[1];
      v53 = v10;
      v54 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v51 = v61;
      v52 = v62;
      if (v62)
      {
        v37 = (unint64_t *)&v62->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      turi::query_eval::optimization_engine::replace_node(a2, &v53, &v51);
      v39 = v52;
      if (v52)
      {
        v40 = (unint64_t *)&v52->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = v54;
      if (v54)
      {
        v43 = (unint64_t *)&v54->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = v60;
      if (v60)
      {
        v46 = (unint64_t *)&v60->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = v62;
      if (v62)
      {
        v49 = (unint64_t *)&v62->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_218106C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v11 - 64);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v11 - 48);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_logical_filter_expanding_project_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EE40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_logical_filter_expanding_project_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EE40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_logical_filter_expanding_project_exchange>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_logical_filter_expanding_project_exchange::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "logical_filter(expanding_project(a), b) -> expanding_project(logical_filter(a, b))");
}

uint64_t turi::query_eval::opt_logical_filter_expanding_project_exchange::apply_transform(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  void *__p;
  uint64_t v59;
  char v60;
  uint64_t v61[2];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v3 = **(_QWORD **)(*a3 + 40);
  if (*(_DWORD *)(v3 + 16) != 4)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  v6 = *(_QWORD *)turi::query_eval::node_info::p((uint64_t *)v3, (uint64_t)&__p);
  if (v60 < 0)
    operator delete(__p);
  v9 = v6 + 8;
  v8 = *(_QWORD *)(v6 + 8);
  v7 = *(_QWORD *)(v9 + 8);
  if ((v7 - v8) >> 4 <= (unint64_t)turi::query_eval::node_info::num_columns(**(turi::query_eval::node_info ***)(**(_QWORD **)(*a3 + 40) + 40)))
    return 0;
  v10 = *(_QWORD **)(*a3 + 40);
  v11 = **(uint64_t ***)(*v10 + 40);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v56 = v13;
  v57 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v10 = *(_QWORD **)(*a3 + 40);
  }
  v16 = (uint64_t *)v10[2];
  v18 = *v16;
  v17 = (std::__shared_weak_count *)v16[1];
  v54 = v18;
  v55 = v17;
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::make_planner_node(&v56, &v54, &__p);
  v21 = v55;
  if (v55)
  {
    v22 = (unint64_t *)&v55->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v57;
  if (v57)
  {
    v25 = (unint64_t *)&v57->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = ***(_QWORD ***)(*a3 + 40);
  LODWORD(v61[0]) = *(_DWORD *)v27;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>((int *)v61, v27 + 8, (const void ***)(v27 + 32), (_QWORD **)(v27 + 56), &v52);
  v61[0] = (uint64_t)__p;
  v61[1] = v59;
  if (v59)
  {
    v28 = (unint64_t *)(v59 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(v52 + 56, v61, &v62, 1uLL);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v61);
  v30 = (std::__shared_weak_count *)a3[1];
  v50 = (uint64_t *)*a3;
  v51 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v48 = v52;
  v49 = v53;
  if (v53)
  {
    v33 = (unint64_t *)&v53->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  turi::query_eval::optimization_engine::replace_node(a2, &v50, &v48);
  v35 = v49;
  if (v49)
  {
    v36 = (unint64_t *)&v49->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v51;
  if (v51)
  {
    v39 = (unint64_t *)&v51->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v53;
  if (v53)
  {
    v42 = (unint64_t *)&v53->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)v59;
  if (v59)
  {
    v45 = (unint64_t *)(v59 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  return 1;
}

void sub_218107018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_identical_logical_filters>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EEE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_identical_logical_filters>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EEE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_merge_identical_logical_filters>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_merge_identical_logical_filters::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "logical_filter(b, a), ..., logical_filter(c, a) -> logical_filter(..., a)");
}

uint64_t turi::query_eval::opt_merge_identical_logical_filters::apply_transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  turi::query_eval::node_info **v10;
  turi::query_eval::node_info **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  void **v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void **v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  void ***v75;
  std::__shared_weak_count *v76;
  void **v77[3];
  void **v78[3];
  _QWORD v79[3];

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 16);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v3 + 72);
  if (v4 == v5)
    return 0;
  v8 = 0;
  do
  {
    if (*(_DWORD *)(*(_QWORD *)v4 + 16) == 3 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 40) + 16) == v3)
      ++v8;
    v4 += 16;
  }
  while (v4 != v5);
  if (v8 <= 1)
    return 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::vector(v79, v8);
  std::vector<std::vector<unsigned long>>::vector(v78, v8);
  std::vector<std::shared_ptr<turi::query_eval::node_info const>>::vector(v77, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 16);
  v10 = *(turi::query_eval::node_info ***)(v9 + 64);
  v11 = *(turi::query_eval::node_info ***)(v9 + 72);
  if (v10 != v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (*((_DWORD *)*v10 + 4) == 3)
      {
        v14 = *((_QWORD *)*v10 + 5);
        if (*(_QWORD *)(v14 + 16) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 16))
        {
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v79[0] + 16 * v13), *(uint64_t **)v14);
          v15 = v78[0];
          v16 = turi::query_eval::node_info::num_columns(*v10);
          std::vector<unsigned long>::resize((uint64_t)&v15[3 * v13], v16);
          v17 = &v78[0][3 * v13];
          v18 = *v17;
          v19 = v17[1];
          if (v18 != v19)
          {
            v20 = v12;
            do
              *v18++ = v20++;
            while (v18 != v19);
          }
          v12 += turi::query_eval::node_info::num_columns(*v10);
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v77[0][2 * v13++], (uint64_t *)v10);
        }
      }
      v10 += 2;
    }
    while (v10 != v11);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node((uint64_t)v79, &v75);
  v71 = (void **)v75;
  v72 = v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 16);
  v25 = *v23;
  v24 = (std::__shared_weak_count *)v23[1];
  v69 = v25;
  v70 = v24;
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::make_planner_node(&v71, &v69, &v73);
  v28 = v70;
  if (v70)
  {
    v29 = (unint64_t *)&v70->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v72;
  if (v72)
  {
    v32 = (unint64_t *)&v72->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = 0;
  v35 = v8;
  do
  {
    v65 = v73;
    v66 = v74;
    if (v74)
    {
      v36 = (unint64_t *)&v74->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v65, (uint64_t **)&v78[0][3 * v34], &v67);
    v38 = v66;
    if (v66)
    {
      v39 = (unint64_t *)&v66->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = *(_OWORD *)&v77[0][2 * v34];
    v64 = v41;
    if (*((_QWORD *)&v41 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v62 = v67;
    v63 = v68;
    if (v68)
    {
      v44 = (unint64_t *)&v68->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    turi::query_eval::optimization_engine::replace_node(a2, (uint64_t **)&v64, &v62);
    v46 = v63;
    if (v63)
    {
      v47 = (unint64_t *)&v63->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v68;
    if (v68)
    {
      v53 = (unint64_t *)&v68->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    ++v34;
  }
  while (v34 != v35);
  v55 = v74;
  if (v74)
  {
    v56 = (unint64_t *)&v74->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v76;
  if (v76)
  {
    v59 = (unint64_t *)&v76->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v75 = v77;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  v77[0] = (void **)v78;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v77);
  v78[0] = (void **)v79;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](v78);
  return 1;
}

void sub_21810758C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void ***a24,uint64_t a25,void **a26)
{
  uint64_t v26;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  a24 = &a26;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a26 = (void **)(v26 - 128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a26);
  *(_QWORD *)(v26 - 128) = v26 - 104;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 128));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<turi::query_eval::node_info const>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_218107694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_all_same_sarrays>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EF80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_all_same_sarrays>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92EF80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_merge_all_same_sarrays>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_merge_all_same_sarrays::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "source_a, ..., source_a -> source_a");
}

BOOL turi::query_eval::opt_merge_all_same_sarrays::transform_applies(uint64_t a1, int a2)
{
  return a2 == 15;
}

uint64_t turi::query_eval::opt_merge_all_same_sarrays::apply_transform(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  _BYTE *v7;
  std::string::size_type v8;
  uint64_t v9;
  unint64_t *v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  __int128 v40;
  __int128 v41;
  uint64_t *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  BOOL v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  char **v55;
  char *v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  _QWORD *v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  __int128 v76;
  __int128 v77;
  uint64_t *v78;
  _BYTE *v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  char **v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  __int128 v101;
  __int128 v102;
  uint64_t *v103;
  const turi::sframe *v104;
  unint64_t i;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  void **v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  void **v122;
  std::__shared_weak_count *v123;
  unint64_t *p_shared_owners;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  char **v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int *v140;
  unsigned int v141;
  __int128 v142;
  __int128 v143;
  _QWORD *v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  void **v157;
  char *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  _QWORD *v168;
  unint64_t v169;
  BOOL v170;
  _QWORD *v171;
  unint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t *v175;
  _QWORD *v176;
  uint64_t v177;
  unint64_t v178;
  BOOL v179;
  double v180;
  unint64_t *v181;
  _QWORD *v182;
  unint64_t v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  double *v187;
  uint64_t v188;
  unint64_t v189;
  double *v190;
  double v191;
  _QWORD *v192;
  unint64_t v193;
  double v194;
  unint64_t *v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  std::string::size_type v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t *v213;
  uint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  double v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t *v237;
  _QWORD *v238;
  unint64_t v239;
  BOOL v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t *v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  void *v247;
  double *v248;
  uint64_t v249;
  unint64_t v250;
  double v251;
  unint64_t *v252;
  _QWORD *v253;
  unint64_t v254;
  unint64_t v255;
  void *v256;
  double *v257;
  uint64_t v258;
  double v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  unint64_t v265;
  _QWORD *v266;
  unint64_t v267;
  void *v268;
  _QWORD *v269;
  uint64_t v270;
  _QWORD *v271;
  unint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t *v276;
  _QWORD *v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  _QWORD *v281;
  uint64_t *v282;
  uint64_t *v283;
  uint64_t *v284;
  double v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  std::string::size_type size;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t *v306;
  _QWORD *v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  _QWORD *v311;
  uint64_t *v312;
  uint64_t *v313;
  uint64_t *v314;
  double v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  std::string::size_type v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  _QWORD *v336;
  unint64_t v337;
  double v338;
  _QWORD *v339;
  unint64_t v340;
  BOOL v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int *v346;
  unsigned int v347;
  __int128 v348;
  __int128 v349;
  unint64_t v350;
  BOOL v351;
  _QWORD *v352;
  uint64_t v353;
  unint64_t v354;
  _QWORD *v355;
  unint64_t v356;
  _QWORD *v357;
  unint64_t v358;
  _QWORD *v359;
  unint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  unint64_t v363;
  _QWORD *v364;
  unint64_t v365;
  _QWORD *v366;
  unint64_t v367;
  unint64_t v368;
  double v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unsigned int *v376;
  unsigned int v377;
  __int128 v378;
  __int128 v379;
  unint64_t v380;
  _QWORD *v381;
  uint64_t v382;
  unint64_t v383;
  unsigned int v384;
  _QWORD *v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int *v390;
  unsigned int v391;
  __int128 v392;
  __int128 v393;
  unint64_t v394;
  _QWORD *v395;
  unint64_t v396;
  _QWORD *v397;
  unint64_t v398;
  _QWORD *v399;
  unint64_t v400;
  _QWORD *v401;
  unint64_t v402;
  _QWORD *v403;
  unint64_t v404;
  _QWORD *v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned int *v410;
  unsigned int v411;
  __int128 v412;
  __int128 v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unsigned int *v418;
  unsigned int v419;
  __int128 v420;
  __int128 v421;
  unint64_t v422;
  _QWORD *v423;
  unint64_t v424;
  _QWORD *v425;
  unint64_t v426;
  _QWORD *v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unsigned int *v432;
  unsigned int v433;
  __int128 v434;
  __int128 v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unsigned int *v440;
  unsigned int v441;
  __int128 v442;
  __int128 v443;
  unint64_t v444;
  _QWORD *v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unsigned int *v450;
  unsigned int v451;
  __int128 v452;
  __int128 v453;
  unint64_t v454;
  _QWORD *v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unsigned int *v460;
  unsigned int v461;
  __int128 v462;
  __int128 v463;
  unint64_t v464;
  _QWORD *v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unsigned int *v470;
  unsigned int v471;
  __int128 v472;
  __int128 v473;
  unint64_t v474;
  uint64_t v475;
  unint64_t *v476;
  unint64_t v477;
  uint64_t v478;
  char *v479;
  uint64_t v480;
  uint64_t v481;
  unsigned int *v482;
  unsigned int *v483;
  unsigned int v484;
  __int128 v485;
  __int128 v486;
  unint64_t *v487;
  unint64_t v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t *v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t *v497;
  unint64_t v498;
  unint64_t v499;
  uint64_t v500;
  void *v501;
  void *v502;
  unint64_t *v503;
  unint64_t v504;
  unint64_t v505;
  uint64_t v506;
  void *v507;
  unint64_t *v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t *v511;
  unint64_t v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t *v515;
  uint64_t v516;
  uint64_t *v517;
  uint64_t v518;
  uint64_t *v519;
  uint64_t v520;
  unint64_t *v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  _QWORD *v525;
  unint64_t v526;
  BOOL v527;
  _QWORD *v528;
  unint64_t v529;
  double v530;
  uint64_t v531;
  _QWORD *v532;
  unint64_t v533;
  unint64_t v534;
  int v535;
  const std::string::value_type *v536;
  std::string::size_type v537;
  _QWORD *v538;
  unint64_t v539;
  _QWORD *v540;
  unint64_t v541;
  _QWORD *v542;
  unint64_t v543;
  _QWORD *v544;
  unint64_t v545;
  _QWORD *v546;
  unint64_t v547;
  unint64_t *v548;
  _QWORD *v549;
  unint64_t v550;
  BOOL v551;
  _QWORD *v552;
  unint64_t v553;
  _QWORD *v554;
  unint64_t v555;
  unint64_t *v556;
  _QWORD *v557;
  uint64_t v558;
  unint64_t v559;
  BOOL v560;
  double v561;
  unint64_t *v562;
  _QWORD *v563;
  unint64_t v564;
  unint64_t v565;
  void *v566;
  uint64_t v567;
  double *v568;
  uint64_t v569;
  unint64_t v570;
  double *v571;
  double v572;
  _QWORD *v573;
  unint64_t v574;
  double v575;
  unint64_t *v576;
  _QWORD *v577;
  uint64_t v578;
  unint64_t v579;
  unint64_t v580;
  _QWORD *v581;
  uint64_t v582;
  uint64_t *v583;
  uint64_t *v584;
  uint64_t *v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  std::string::size_type v589;
  uint64_t *v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t *v594;
  uint64_t *v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  double v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  unint64_t v609;
  unint64_t *v610;
  uint64_t v611;
  uint64_t v612;
  unint64_t v613;
  unint64_t v614;
  _QWORD *v615;
  uint64_t v616;
  unint64_t v617;
  unint64_t *v618;
  _QWORD *v619;
  unint64_t v620;
  BOOL v621;
  _QWORD *v622;
  unint64_t v623;
  unint64_t *v624;
  _QWORD *v625;
  unint64_t v626;
  unint64_t v627;
  void *v628;
  double *v629;
  uint64_t v630;
  unint64_t v631;
  double v632;
  unint64_t *v633;
  _QWORD *v634;
  unint64_t v635;
  unint64_t v636;
  void *v637;
  double *v638;
  uint64_t v639;
  double v640;
  unint64_t v641;
  _QWORD *v642;
  unint64_t v643;
  _QWORD *v644;
  uint64_t v645;
  unint64_t v646;
  _QWORD *v647;
  unint64_t v648;
  void *v649;
  _QWORD *v650;
  uint64_t v651;
  _QWORD *v652;
  unint64_t v653;
  _QWORD *v654;
  uint64_t v655;
  unint64_t v656;
  unint64_t *v657;
  _QWORD *v658;
  uint64_t v659;
  unint64_t v660;
  unint64_t v661;
  _QWORD *v662;
  uint64_t *v663;
  uint64_t *v664;
  uint64_t *v665;
  double v666;
  uint64_t v667;
  uint64_t v668;
  unint64_t v669;
  std::string::size_type v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  unint64_t *v682;
  uint64_t v683;
  uint64_t v684;
  unint64_t v685;
  unint64_t v686;
  unint64_t *v687;
  _QWORD *v688;
  uint64_t v689;
  unint64_t v690;
  unint64_t v691;
  _QWORD *v692;
  uint64_t *v693;
  uint64_t *v694;
  uint64_t *v695;
  double v696;
  uint64_t v697;
  uint64_t v698;
  unint64_t v699;
  std::string::size_type v700;
  uint64_t v701;
  uint64_t v702;
  unint64_t v703;
  uint64_t *v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  unint64_t v711;
  unint64_t *v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  unint64_t v716;
  _QWORD *v717;
  unint64_t v718;
  double v719;
  _QWORD *v720;
  unint64_t v721;
  BOOL v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  unsigned int *v727;
  unsigned int v728;
  __int128 v729;
  __int128 v730;
  unint64_t v731;
  BOOL v732;
  _QWORD *v733;
  uint64_t v734;
  unint64_t v735;
  _QWORD *v736;
  unint64_t v737;
  _QWORD *v738;
  unint64_t v739;
  _QWORD *v740;
  unint64_t v741;
  _QWORD *v742;
  uint64_t v743;
  unint64_t v744;
  _QWORD *v745;
  unint64_t v746;
  _QWORD *v747;
  unint64_t v748;
  unint64_t v749;
  double v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  unsigned int *v757;
  unsigned int v758;
  __int128 v759;
  __int128 v760;
  unint64_t v761;
  _QWORD *v762;
  uint64_t v763;
  unint64_t v764;
  unsigned int v765;
  _QWORD *v766;
  unint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  unsigned int *v771;
  unsigned int v772;
  __int128 v773;
  __int128 v774;
  unint64_t v775;
  _QWORD *v776;
  unint64_t v777;
  _QWORD *v778;
  unint64_t v779;
  _QWORD *v780;
  unint64_t v781;
  _QWORD *v782;
  unint64_t v783;
  _QWORD *v784;
  unint64_t v785;
  _QWORD *v786;
  unint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  unsigned int *v791;
  unsigned int v792;
  __int128 v793;
  __int128 v794;
  unint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  unsigned int *v799;
  unsigned int v800;
  __int128 v801;
  __int128 v802;
  unint64_t v803;
  _QWORD *v804;
  unint64_t v805;
  _QWORD *v806;
  unint64_t v807;
  _QWORD *v808;
  unint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  unsigned int *v813;
  unsigned int v814;
  __int128 v815;
  __int128 v816;
  unint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  unsigned int *v821;
  unsigned int v822;
  __int128 v823;
  __int128 v824;
  unint64_t v825;
  _QWORD *v826;
  unint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  unsigned int *v831;
  unsigned int v832;
  __int128 v833;
  __int128 v834;
  unint64_t v835;
  _QWORD *v836;
  unint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  unsigned int *v841;
  unsigned int v842;
  __int128 v843;
  __int128 v844;
  unint64_t v845;
  _QWORD *v846;
  unint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unsigned int *v851;
  unsigned int v852;
  __int128 v853;
  __int128 v854;
  unint64_t v855;
  uint64_t v856;
  unint64_t *v857;
  unint64_t v858;
  uint64_t v859;
  char *v860;
  uint64_t v861;
  uint64_t v862;
  unsigned int *v863;
  unsigned int *v864;
  unsigned int v865;
  __int128 v866;
  __int128 v867;
  unint64_t *v868;
  unint64_t v869;
  unint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  unint64_t *v874;
  unint64_t v875;
  unint64_t v876;
  uint64_t v877;
  unint64_t *v878;
  unint64_t v879;
  unint64_t v880;
  uint64_t v881;
  void *v882;
  void *v883;
  unint64_t *v884;
  unint64_t v885;
  unint64_t v886;
  uint64_t v887;
  void *v888;
  unint64_t *v889;
  unint64_t v890;
  unint64_t v891;
  unint64_t *v892;
  unint64_t v893;
  unint64_t v894;
  uint64_t v895;
  _QWORD *v896;
  unint64_t v897;
  unint64_t v898;
  char *v899;
  unint64_t *v900;
  unint64_t v901;
  unint64_t v902;
  uint64_t v903;
  unint64_t v904;
  unint64_t v905;
  unint64_t v906;
  unint64_t v907;
  _QWORD *v908;
  void **v909;
  char *v910;
  unint64_t *v911;
  unint64_t v912;
  unint64_t *v913;
  std::runtime_error *v914;
  std::string *v915;
  __int128 v916;
  uint64_t *v917;
  char v918;
  _QWORD *v919;
  turi::query_eval::node_info **v920;
  turi::query_eval::node_info **v921;
  uint64_t v922;
  uint64_t v923;
  int v924;
  uint64_t **v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  unint64_t v929;
  turi::query_eval::node_info *v930;
  unint64_t v931;
  uint64_t *v932;
  std::__shared_weak_count *v933;
  uint64_t v934;
  unint64_t *v935;
  unint64_t v936;
  uint64_t v937;
  _QWORD *v938;
  std::__shared_weak_count *v939;
  unint64_t *v940;
  unint64_t v941;
  uint64_t v942;
  unint64_t v943;
  uint64_t v944;
  std::__shared_weak_count *v945;
  unint64_t *v946;
  unint64_t v947;
  unint64_t *v948;
  unint64_t v949;
  std::__shared_weak_count *v950;
  unint64_t *v951;
  unint64_t v952;
  std::__shared_weak_count *v953;
  unint64_t *v954;
  unint64_t v955;
  std::__shared_weak_count *v956;
  unint64_t *v957;
  unint64_t v958;
  uint64_t **v959;
  unint64_t v960;
  uint64_t **v961;
  std::__shared_weak_count *v962;
  unint64_t *v963;
  unint64_t v964;
  uint64_t *v965;
  std::__shared_weak_count *v966;
  uint64_t v967;
  unint64_t *v968;
  unint64_t v969;
  std::__shared_weak_count *v970;
  unint64_t *v971;
  unint64_t v972;
  std::__shared_weak_count *v973;
  unint64_t *v974;
  unint64_t v975;
  char *v976;
  char **v977;
  uint64_t result;
  std::__shared_weak_count *v979;
  unint64_t *v980;
  unint64_t v981;
  uint64_t *v982;
  std::__shared_weak_count *v983;
  uint64_t v984;
  unint64_t *v985;
  unint64_t v986;
  std::__shared_weak_count *v987;
  unint64_t *v988;
  unint64_t v989;
  std::__shared_weak_count *v990;
  unint64_t *v991;
  unint64_t v992;
  uint64_t v993;
  uint64_t v994;
  unint64_t v995;
  uint64_t v996;
  int v997;
  const turi::sframe *v998;
  unint64_t j;
  std::string *v1000;
  std::string::size_type *v1001;
  std::string *v1002;
  std::string *v1003;
  std::string *v1004;
  unint64_t v1005;
  std::string *v1006;
  std::string::size_type v1007;
  std::__shared_weak_count *v1008;
  unint64_t *v1009;
  unint64_t v1010;
  std::string *v1011;
  void **v1012;
  void *v1013;
  unint64_t *v1014;
  unint64_t *v1015;
  unint64_t v1016;
  std::string *v1017;
  std::string::size_type *p_size;
  std::string *v1019;
  std::string *v1020;
  std::string *v1021;
  unint64_t v1022;
  std::string *v1023;
  std::string::size_type v1024;
  std::__shared_weak_count *v1025;
  unint64_t *v1026;
  unint64_t v1027;
  std::string *v1028;
  unint64_t v1029;
  unint64_t *v1030;
  unint64_t v1031;
  std::__shared_weak_count *v1032;
  unint64_t *v1033;
  unint64_t v1034;
  uint64_t v1035;
  std::__shared_weak_count *v1036;
  unint64_t *v1037;
  unint64_t v1038;
  unint64_t *v1039;
  unint64_t v1040;
  std::__shared_weak_count *v1041;
  unint64_t *v1042;
  unint64_t v1043;
  std::__shared_weak_count *v1044;
  unint64_t *v1045;
  unint64_t v1046;
  std::__shared_weak_count *v1047;
  unint64_t *v1048;
  unint64_t v1049;
  std::__shared_weak_count *v1050;
  unint64_t *v1051;
  unint64_t v1052;
  std::runtime_error *v1053;
  std::string *v1054;
  __int128 v1055;
  std::runtime_error *v1056;
  std::string *v1057;
  __int128 v1058;
  std::runtime_error *v1059;
  std::string *v1060;
  __int128 v1061;
  std::runtime_error *v1062;
  std::string *v1063;
  __int128 v1064;
  std::runtime_error *exception;
  std::string *v1066;
  __int128 v1067;
  uint64_t *v1068;
  __int128 v1069;
  uint64_t *v1070;
  std::__shared_weak_count *v1071;
  void *v1072;
  std::__shared_weak_count *v1073;
  __int128 v1074;
  uint64_t *v1075;
  std::__shared_weak_count *v1076;
  uint64_t v1077;
  std::__shared_weak_count *v1078;
  uint64_t v1079;
  std::__shared_weak_count *v1080;
  uint64_t *v1081;
  std::__shared_weak_count *v1082;
  uint64_t v1083;
  std::__shared_weak_count *v1084;
  uint64_t *v1085;
  std::__shared_weak_count *v1086;
  void *v1087[2];
  char v1088;
  size_t __idx[2];
  uint64_t v1090;
  void *v1091;
  std::__shared_weak_count *v1092;
  uint64_t v1093;
  char **v1094;
  char *v1095[2];
  _QWORD **v1096;
  _QWORD *v1097[2];
  char *v1098;
  char *v1099;
  uint64_t v1100;
  void *v1101[2];
  __int128 v1102;
  __int128 v1103;
  __int128 v1104;
  std::string v1105;
  size_t v1106;
  _BYTE v1107[296];
  __int128 __src;
  std::string __p;
  _QWORD *v1110;
  _QWORD *v1111;
  void *v1112;
  void *v1113;
  uint64_t v1114;

  v1114 = *MEMORY[0x24BDAC8D0];
  v1098 = 0;
  v1099 = 0;
  v1100 = 0;
  v1097[0] = 0;
  v1097[1] = 0;
  v1096 = v1097;
  turi::query_eval::opt_merge_all_same_sarrays::fill_source_sets(a1, a3, (uint64_t)&v1096, &v1098);
  v1095[0] = 0;
  v1095[1] = 0;
  v1094 = v1095;
  v4 = (uint64_t *)v1098;
  v1068 = (uint64_t *)v1099;
  if (v1098 == v1099)
    goto LABEL_1314;
  do
  {
    v5 = (uint64_t *)*v4;
    v6 = *(_DWORD *)(*v4 + 16);
    switch(v6)
    {
      case 5:
        v1091 = (void *)5;
        std::string::basic_string[abi:ne180100]<0>(__idx, "start");
        v17 = turi::query_eval::node_info::p(v5, (uint64_t)__idx);
        v18 = (uint64_t *)*v4;
        std::string::basic_string[abi:ne180100]<0>(v1087, "begin_index");
        v19 = turi::query_eval::node_info::p(v18, (uint64_t)v1087);
        v20 = (uint64_t *)v19;
        *(_QWORD *)&__src = 0;
        DWORD2(__src) = 0;
        BYTE12(__src) = 0;
        if ((__int128 *)v17 != &__src)
        {
          v21 = *(_QWORD *)v17;
          *(_QWORD *)((char *)&__src + 5) = *(_QWORD *)(v17 + 5);
          *(_QWORD *)&__src = v21;
          BYTE12(__src) = *(_BYTE *)(v17 + 12);
          v22 = BYTE12(__src) > 9u || ((1 << SBYTE12(__src)) & 0x33C) == 0;
          if (!v22)
          {
            v23 = (unint64_t *)__src;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 + 1, v23));
          }
        }
        switch(*(_BYTE *)(v19 + 12))
        {
          case 0:
            switch(BYTE12(__src))
            {
              case 0:
                v25 = __src + *(_QWORD *)v19;
                goto LABEL_110;
              case 1:
                v338 = *(double *)&__src + (double)*(uint64_t *)v19;
                goto LABEL_507;
              case 2:
                v48 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v364 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v364, __src);
                *(_QWORD *)&__src = v364;
                *v364 = 1;
                do
                {
                  v365 = __ldaxr((unint64_t *)v48);
                  v51 = --v365 == 0;
                }
                while (__stlxr(v365, (unint64_t *)v48));
                goto LABEL_483;
              case 3:
                v243 = (unint64_t *)__src;
                if (*(_QWORD *)__src != 1)
                {
                  v244 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v244, __src);
                  *(_QWORD *)&__src = v244;
                  *v244 = 1;
                  do
                  {
                    v245 = __ldaxr(v243);
                    v246 = v245 - 1;
                  }
                  while (__stlxr(v246, v243));
                  if (!v246)
                  {
                    v247 = (void *)v243[1];
                    if (v247)
                    {
                      v243[2] = (unint64_t)v247;
                      operator delete(v247);
                    }
                    MEMORY[0x219A19A08](v243, 0x1080C409938AC02);
                  }
                }
                v248 = *(double **)(__src + 8);
                v249 = *(_QWORD *)(__src + 16) - (_QWORD)v248;
                if (v249)
                {
                  v250 = v249 >> 3;
                  v251 = (double)*v20;
                  if (v250 <= 1)
                    v250 = 1;
                  do
                  {
                    *v248 = *v248 + v251;
                    ++v248;
                    --v250;
                  }
                  while (v250);
                }
                goto LABEL_626;
              case 4:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v399 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v399, __src);
                *(_QWORD *)&__src = v399;
                *v399 = 1;
                do
                {
                  v400 = __ldaxr(v237);
                  v341 = --v400 == 0;
                }
                while (__stlxr(v400, v237));
                goto LABEL_610;
              case 5:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v425 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v425, __src);
                *(_QWORD *)&__src = v425;
                *v425 = 1;
                do
                {
                  v426 = __ldaxr(v237);
                  v240 = --v426 == 0;
                }
                while (__stlxr(v426, v237));
                goto LABEL_568;
              case 6:
                *(_QWORD *)&__src = __src & 0xFF00000000000000 | (__src + *(_QWORD *)v19) & 0xFFFFFFFFFFFFFFLL;
                goto LABEL_626;
              case 7:
                goto LABEL_625;
              case 8:
                v342 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v429 = operator new();
                v430 = __src;
                *(_QWORD *)v429 = *(_QWORD *)__src;
                *(_QWORD *)(v429 + 8) = *(_QWORD *)(v430 + 8);
                v431 = *(_QWORD *)(v430 + 16);
                *(_QWORD *)(v429 + 16) = v431;
                if (v431)
                {
                  v432 = (unsigned int *)(v431 + 8);
                  do
                    v433 = __ldxr(v432);
                  while (__stxr(v433 + 1, v432));
                }
                v434 = *(_OWORD *)(v430 + 24);
                v435 = *(_OWORD *)(v430 + 40);
                *(_OWORD *)(v429 + 56) = *(_OWORD *)(v430 + 56);
                *(_OWORD *)(v429 + 40) = v435;
                *(_OWORD *)(v429 + 24) = v434;
                *(_QWORD *)&__src = v429;
                *(_QWORD *)v429 = 1;
                do
                {
                  v436 = __ldaxr((unint64_t *)v342);
                  v351 = --v436 == 0;
                }
                while (__stlxr(v436, (unint64_t *)v342));
                goto LABEL_620;
              case 9:
                v276 = (unint64_t *)__src;
                if (*(_QWORD *)__src != 1)
                {
                  v277 = (_QWORD *)operator new();
                  v278 = __src + 8;
                  *v277 = *(_QWORD *)__src;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v277 + 1, v278);
                  *(_QWORD *)&__src = v277;
                  *v277 = 1;
                  do
                  {
                    v279 = __ldaxr(v276);
                    v280 = v279 - 1;
                  }
                  while (__stlxr(v280, v276));
                  if (!v280)
                  {
                    v281 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v276);
                    MEMORY[0x219A19A08](v281, 0x1030C407B73B9F7);
                  }
                }
                v282 = (uint64_t *)__src;
                v284 = *(uint64_t **)(__src + 24);
                v283 = *(uint64_t **)(__src + 32);
                if (v283 == v284)
                  goto LABEL_626;
                if (!*(_QWORD *)(__src + 8))
                  goto LABEL_626;
                v285 = (double)*v20;
                v286 = 1;
                do
                {
                  v287 = *v284++;
                  v286 *= v287;
                }
                while (v284 != v283);
                if (!v286)
                  goto LABEL_626;
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(__src + 8));
                v288 = (v282[4] - v282[3]) >> 3;
                v1106 = 0;
                std::vector<unsigned long>::vector(&__p, v288, &v1106);
                size = __p.__r_.__value_.__l.__size_;
                v209 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                break;
              default:
                goto LABEL_1437;
            }
            do
            {
              v290 = 0;
              v291 = size - (_QWORD)v209;
              if (v291)
              {
                v292 = v291 >> 3;
                v293 = (uint64_t *)v282[6];
                if (v292 <= 1)
                  v292 = 1;
                do
                {
                  v295 = *v209++;
                  v294 = v295;
                  v296 = *v293++;
                  v290 += v296 * v294;
                  --v292;
                }
                while (v292);
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v282 + 1);
              *(double *)(*(_QWORD *)v282[1] + 8 * (v282[9] + v290)) = *(double *)(*(_QWORD *)v282[1]
                                                                                 + 8 * (v282[9] + v290))
                                                                     + v285;
              size = __p.__r_.__value_.__l.__size_;
              v209 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
              v297 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
              v298 = v297 - 1;
              if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >= 1)
              {
                v299 = v282[3];
                v300 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v298) + 1;
                *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v298) = v300;
                if (v300 >= *(_QWORD *)(v299 + 8 * v298))
                {
                  v301 = (unint64_t *)&v209[v297 - 2];
                  v302 = v299 - 16;
                  do
                  {
                    v303 = v297 - 1;
                    v301[1] = 0;
                    if (v297 - 1 <= 0)
                      goto LABEL_439;
                    v304 = *v301 + 1;
                    *v301-- = v304;
                    v305 = *(_QWORD *)(v302 + 8 * v297--);
                  }
                  while (v304 >= v305);
                  v298 = v303 - 1;
                }
                v297 = 1;
              }
            }
            while ((v298 & 0x8000000000000000) == 0 && v297);
            goto LABEL_438;
          case 1:
            switch(BYTE12(__src))
            {
              case 0:
                v25 = (uint64_t)(*(double *)v19 + (double)(uint64_t)__src);
LABEL_110:
                *(_QWORD *)&__src = v25;
                goto LABEL_626;
              case 1:
                v338 = *(double *)v19 + *(double *)&__src;
LABEL_507:
                *(double *)&__src = v338;
                goto LABEL_626;
              case 2:
                v48 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v366 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v366, __src);
                *(_QWORD *)&__src = v366;
                *v366 = 1;
                do
                {
                  v367 = __ldaxr((unint64_t *)v48);
                  v51 = --v367 == 0;
                }
                while (__stlxr(v367, (unint64_t *)v48));
                goto LABEL_483;
              case 3:
                v252 = (unint64_t *)__src;
                if (*(_QWORD *)__src != 1)
                {
                  v253 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v253, __src);
                  *(_QWORD *)&__src = v253;
                  *v253 = 1;
                  do
                  {
                    v254 = __ldaxr(v252);
                    v255 = v254 - 1;
                  }
                  while (__stlxr(v255, v252));
                  if (!v255)
                  {
                    v256 = (void *)v252[1];
                    if (v256)
                    {
                      v252[2] = (unint64_t)v256;
                      operator delete(v256);
                    }
                    MEMORY[0x219A19A08](v252, 0x1080C409938AC02);
                  }
                }
                v257 = *(double **)(__src + 8);
                v258 = *(_QWORD *)(__src + 16) - (_QWORD)v257;
                if (v258)
                {
                  v259 = *(double *)v20;
                  v260 = v258 >> 3;
                  if (v260 <= 1)
                    v260 = 1;
                  do
                  {
                    *v257 = v259 + *v257;
                    ++v257;
                    --v260;
                  }
                  while (v260);
                }
                goto LABEL_626;
              case 4:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v401 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v401, __src);
                *(_QWORD *)&__src = v401;
                *v401 = 1;
                do
                {
                  v402 = __ldaxr(v237);
                  v341 = --v402 == 0;
                }
                while (__stlxr(v402, v237));
                goto LABEL_610;
              case 5:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v427 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v427, __src);
                *(_QWORD *)&__src = v427;
                *v427 = 1;
                do
                {
                  v428 = __ldaxr(v237);
                  v240 = --v428 == 0;
                }
                while (__stlxr(v428, v237));
                goto LABEL_568;
              case 6:
                v368 = vcvtmd_s64_f64(*(double *)v19);
                v369 = (*(double *)v19 - (double)(uint64_t)floor(*(double *)v19)) * 1000000.0;
                v370 = __src;
                v371 = __src + v368;
                *(_QWORD *)&__src = __src & 0xFF00000000000000 | (__src + v368) & 0xFFFFFFFFFFFFFFLL;
                v372 = (uint64_t)v369 + SDWORD2(__src);
                if (v372 > 999999)
                {
                  *(_QWORD *)&__src = (v371 + 1) & 0xFFFFFFFFFFFFFFLL | v370 & 0xFF00000000000000;
                  LODWORD(v372) = v372 - 1000000;
                }
                if (v372 > 0xF423F)
                  turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                DWORD2(__src) = v372;
                goto LABEL_626;
              case 7:
                goto LABEL_625;
              case 8:
                v342 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v437 = operator new();
                v438 = __src;
                *(_QWORD *)v437 = *(_QWORD *)__src;
                *(_QWORD *)(v437 + 8) = *(_QWORD *)(v438 + 8);
                v439 = *(_QWORD *)(v438 + 16);
                *(_QWORD *)(v437 + 16) = v439;
                if (v439)
                {
                  v440 = (unsigned int *)(v439 + 8);
                  do
                    v441 = __ldxr(v440);
                  while (__stxr(v441 + 1, v440));
                }
                v442 = *(_OWORD *)(v438 + 24);
                v443 = *(_OWORD *)(v438 + 40);
                *(_OWORD *)(v437 + 56) = *(_OWORD *)(v438 + 56);
                *(_OWORD *)(v437 + 40) = v443;
                *(_OWORD *)(v437 + 24) = v442;
                *(_QWORD *)&__src = v437;
                *(_QWORD *)v437 = 1;
                do
                {
                  v444 = __ldaxr((unint64_t *)v342);
                  v351 = --v444 == 0;
                }
                while (__stlxr(v444, (unint64_t *)v342));
                goto LABEL_620;
              case 9:
                v306 = (unint64_t *)__src;
                if (*(_QWORD *)__src != 1)
                {
                  v307 = (_QWORD *)operator new();
                  v308 = __src + 8;
                  *v307 = *(_QWORD *)__src;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v307 + 1, v308);
                  *(_QWORD *)&__src = v307;
                  *v307 = 1;
                  do
                  {
                    v309 = __ldaxr(v306);
                    v310 = v309 - 1;
                  }
                  while (__stlxr(v310, v306));
                  if (!v310)
                  {
                    v311 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v306);
                    MEMORY[0x219A19A08](v311, 0x1030C407B73B9F7);
                  }
                }
                v312 = (uint64_t *)__src;
                v314 = *(uint64_t **)(__src + 24);
                v313 = *(uint64_t **)(__src + 32);
                if (v313 == v314)
                  goto LABEL_626;
                if (!*(_QWORD *)(__src + 8))
                  goto LABEL_626;
                v315 = *(double *)v20;
                v316 = 1;
                do
                {
                  v317 = *v314++;
                  v316 *= v317;
                }
                while (v314 != v313);
                if (!v316)
                  goto LABEL_626;
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(__src + 8));
                v318 = (v312[4] - v312[3]) >> 3;
                v1106 = 0;
                std::vector<unsigned long>::vector(&__p, v318, &v1106);
                v319 = __p.__r_.__value_.__l.__size_;
                v209 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                break;
              default:
                goto LABEL_1437;
            }
            do
            {
              v320 = 0;
              v321 = v319 - (_QWORD)v209;
              if (v321)
              {
                v322 = v321 >> 3;
                v323 = (uint64_t *)v312[6];
                if (v322 <= 1)
                  v322 = 1;
                do
                {
                  v325 = *v209++;
                  v324 = v325;
                  v326 = *v323++;
                  v320 += v326 * v324;
                  --v322;
                }
                while (v322);
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v312 + 1);
              *(double *)(*(_QWORD *)v312[1] + 8 * (v312[9] + v320)) = v315
                                                                     + *(double *)(*(_QWORD *)v312[1]
                                                                                 + 8 * (v312[9] + v320));
              v319 = __p.__r_.__value_.__l.__size_;
              v209 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
              v327 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
              v328 = v327 - 1;
              if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >= 1)
              {
                v329 = v312[3];
                v330 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v328) + 1;
                *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v328) = v330;
                if (v330 >= *(_QWORD *)(v329 + 8 * v328))
                {
                  v331 = (unint64_t *)&v209[v327 - 2];
                  v332 = v329 - 16;
                  do
                  {
                    v333 = v327 - 1;
                    v331[1] = 0;
                    if (v327 - 1 <= 0)
                      goto LABEL_438;
                    v334 = *v331 + 1;
                    *v331-- = v334;
                    v335 = *(_QWORD *)(v332 + 8 * v327--);
                  }
                  while (v334 >= v335);
                  v328 = v333 - 1;
                }
                v327 = 1;
              }
            }
            while ((v328 & 0x8000000000000000) == 0 && v327);
            goto LABEL_438;
          case 2:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_625;
              case 2:
                v58 = *(double *)v19;
                v59 = __src;
                if (*(_QWORD *)__src != 1)
                {
                  v60 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v60, __src);
                  *(_QWORD *)&__src = v60;
                  *v60 = 1;
                  do
                  {
                    v61 = __ldaxr((unint64_t *)v59);
                    v62 = v61 - 1;
                  }
                  while (__stlxr(v62, (unint64_t *)v59));
                  if (!v62)
                  {
                    if (*(char *)(v59 + 31) < 0)
                      operator delete(*(void **)(v59 + 8));
                    MEMORY[0x219A19A08](v59, 0x1012C404EF22A49);
                  }
                }
                v63 = *(char *)(*(_QWORD *)&v58 + 31);
                if (v63 >= 0)
                  v64 = (const std::string::value_type *)(*(_QWORD *)&v58 + 8);
                else
                  v64 = *(const std::string::value_type **)(*(_QWORD *)&v58 + 8);
                if (v63 >= 0)
                  v65 = *(unsigned __int8 *)(*(_QWORD *)&v58 + 31);
                else
                  v65 = *(_QWORD *)(*(_QWORD *)&v58 + 16);
                std::string::append((std::string *)(__src + 8), v64, v65);
                goto LABEL_626;
              case 3:
                v167 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v173 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v173, __src);
                *(_QWORD *)&__src = v173;
                *v173 = 1;
                do
                {
                  v174 = __ldaxr(v167);
                  v170 = --v174 == 0;
                }
                while (__stlxr(v174, v167));
                goto LABEL_376;
              case 4:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v385 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v385, __src);
                *(_QWORD *)&__src = v385;
                *v385 = 1;
                do
                {
                  v386 = __ldaxr(v237);
                  v341 = --v386 == 0;
                }
                while (__stlxr(v386, v237));
                goto LABEL_610;
              case 5:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v336 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v336, __src);
                *(_QWORD *)&__src = v336;
                *v336 = 1;
                do
                {
                  v337 = __ldaxr(v237);
                  v240 = --v337 == 0;
                }
                while (__stlxr(v337, v237));
                goto LABEL_568;
              case 8:
                v342 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v387 = operator new();
                v388 = __src;
                *(_QWORD *)v387 = *(_QWORD *)__src;
                *(_QWORD *)(v387 + 8) = *(_QWORD *)(v388 + 8);
                v389 = *(_QWORD *)(v388 + 16);
                *(_QWORD *)(v387 + 16) = v389;
                if (v389)
                {
                  v390 = (unsigned int *)(v389 + 8);
                  do
                    v391 = __ldxr(v390);
                  while (__stxr(v391 + 1, v390));
                }
                v392 = *(_OWORD *)(v388 + 24);
                v393 = *(_OWORD *)(v388 + 40);
                *(_OWORD *)(v387 + 56) = *(_OWORD *)(v388 + 56);
                *(_OWORD *)(v387 + 40) = v393;
                *(_OWORD *)(v387 + 24) = v392;
                *(_QWORD *)&__src = v387;
                *(_QWORD *)v387 = 1;
                do
                {
                  v394 = __ldaxr((unint64_t *)v342);
                  v351 = --v394 == 0;
                }
                while (__stlxr(v394, (unint64_t *)v342));
                goto LABEL_620;
              case 9:
                v175 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v234 = (_QWORD *)operator new();
                v235 = __src + 8;
                *v234 = *(_QWORD *)__src;
                turi::flexible_type_impl::ndarray<double>::ndarray(v234 + 1, v235);
                *(_QWORD *)&__src = v234;
                *v234 = 1;
                do
                {
                  v236 = __ldaxr(v175);
                  v179 = --v236 == 0;
                }
                while (__stlxr(v236, v175));
                goto LABEL_503;
              default:
                goto LABEL_1437;
            }
          case 3:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_625;
              case 2:
                v48 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v66 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v66, __src);
                *(_QWORD *)&__src = v66;
                *v66 = 1;
                do
                {
                  v67 = __ldaxr((unint64_t *)v48);
                  v51 = --v67 == 0;
                }
                while (__stlxr(v67, (unint64_t *)v48));
                goto LABEL_483;
              case 3:
                v180 = *(double *)v19;
                v181 = (unint64_t *)__src;
                if (*(_QWORD *)__src != 1)
                {
                  v182 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v182, __src);
                  *(_QWORD *)&__src = v182;
                  *v182 = 1;
                  do
                  {
                    v183 = __ldaxr(v181);
                    v184 = v183 - 1;
                  }
                  while (__stlxr(v184, v181));
                  if (!v184)
                  {
                    v185 = (void *)v181[1];
                    if (v185)
                    {
                      v181[2] = (unint64_t)v185;
                      operator delete(v185);
                    }
                    MEMORY[0x219A19A08](v181, 0x1080C409938AC02);
                  }
                }
                v186 = __src;
                turi::flexible_type_fail(*(_QWORD *)(__src + 16) - *(_QWORD *)(__src + 8) == *(_QWORD *)(*(_QWORD *)&v180 + 16)
                                                                                           - *(_QWORD *)(*(_QWORD *)&v180 + 8));
                v187 = *(double **)(v186 + 8);
                v188 = *(_QWORD *)(v186 + 16) - (_QWORD)v187;
                if (v188)
                {
                  v189 = v188 >> 3;
                  v190 = *(double **)(*(_QWORD *)&v180 + 8);
                  if (v189 <= 1)
                    v189 = 1;
                  do
                  {
                    v191 = *v190++;
                    *v187 = v191 + *v187;
                    ++v187;
                    --v189;
                  }
                  while (v189);
                }
                goto LABEL_626;
              case 4:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v397 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v397, __src);
                *(_QWORD *)&__src = v397;
                *v397 = 1;
                do
                {
                  v398 = __ldaxr(v237);
                  v341 = --v398 == 0;
                }
                while (__stlxr(v398, v237));
                goto LABEL_610;
              case 5:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v355 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v355, __src);
                *(_QWORD *)&__src = v355;
                *v355 = 1;
                do
                {
                  v356 = __ldaxr(v237);
                  v240 = --v356 == 0;
                }
                while (__stlxr(v356, v237));
                goto LABEL_568;
              case 8:
                v342 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v407 = operator new();
                v408 = __src;
                *(_QWORD *)v407 = *(_QWORD *)__src;
                *(_QWORD *)(v407 + 8) = *(_QWORD *)(v408 + 8);
                v409 = *(_QWORD *)(v408 + 16);
                *(_QWORD *)(v407 + 16) = v409;
                if (v409)
                {
                  v410 = (unsigned int *)(v409 + 8);
                  do
                    v411 = __ldxr(v410);
                  while (__stxr(v411 + 1, v410));
                }
                v412 = *(_OWORD *)(v408 + 24);
                v413 = *(_OWORD *)(v408 + 40);
                *(_OWORD *)(v407 + 56) = *(_OWORD *)(v408 + 56);
                *(_OWORD *)(v407 + 40) = v413;
                *(_OWORD *)(v407 + 24) = v412;
                *(_QWORD *)&__src = v407;
                *(_QWORD *)v407 = 1;
                do
                {
                  v414 = __ldaxr((unint64_t *)v342);
                  v351 = --v414 == 0;
                }
                while (__stlxr(v414, (unint64_t *)v342));
                goto LABEL_620;
              case 9:
                v175 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v263 = (_QWORD *)operator new();
                v264 = __src + 8;
                *v263 = *(_QWORD *)__src;
                turi::flexible_type_impl::ndarray<double>::ndarray(v263 + 1, v264);
                *(_QWORD *)&__src = v263;
                *v263 = 1;
                do
                {
                  v265 = __ldaxr(v175);
                  v179 = --v265 == 0;
                }
                while (__stlxr(v265, v175));
                goto LABEL_503;
              default:
                goto LABEL_1437;
            }
          case 4:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_625;
              case 2:
                v48 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v49 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v49, __src);
                *(_QWORD *)&__src = v49;
                *v49 = 1;
                do
                {
                  v50 = __ldaxr((unint64_t *)v48);
                  v51 = --v50 == 0;
                }
                while (__stlxr(v50, (unint64_t *)v48));
                goto LABEL_483;
              case 3:
                v167 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v168 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v168, __src);
                *(_QWORD *)&__src = v168;
                *v168 = 1;
                do
                {
                  v169 = __ldaxr(v167);
                  v170 = --v169 == 0;
                }
                while (__stlxr(v169, v167));
                goto LABEL_376;
              case 4:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v339 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v339, __src);
                *(_QWORD *)&__src = v339;
                *v339 = 1;
                do
                {
                  v340 = __ldaxr(v237);
                  v341 = --v340 == 0;
                }
                while (__stlxr(v340, v237));
                goto LABEL_610;
              case 5:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v238 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v238, __src);
                *(_QWORD *)&__src = v238;
                *v238 = 1;
                do
                {
                  v239 = __ldaxr(v237);
                  v240 = --v239 == 0;
                }
                while (__stlxr(v239, v237));
                goto LABEL_568;
              case 8:
                v342 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v343 = operator new();
                v344 = __src;
                *(_QWORD *)v343 = *(_QWORD *)__src;
                *(_QWORD *)(v343 + 8) = *(_QWORD *)(v344 + 8);
                v345 = *(_QWORD *)(v344 + 16);
                *(_QWORD *)(v343 + 16) = v345;
                if (v345)
                {
                  v346 = (unsigned int *)(v345 + 8);
                  do
                    v347 = __ldxr(v346);
                  while (__stxr(v347 + 1, v346));
                }
                v348 = *(_OWORD *)(v344 + 24);
                v349 = *(_OWORD *)(v344 + 40);
                *(_OWORD *)(v343 + 56) = *(_OWORD *)(v344 + 56);
                *(_OWORD *)(v343 + 40) = v349;
                *(_OWORD *)(v343 + 24) = v348;
                *(_QWORD *)&__src = v343;
                *(_QWORD *)v343 = 1;
                do
                {
                  v350 = __ldaxr((unint64_t *)v342);
                  v351 = --v350 == 0;
                }
                while (__stlxr(v350, (unint64_t *)v342));
                goto LABEL_620;
              case 9:
                v175 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v176 = (_QWORD *)operator new();
                v177 = __src + 8;
                *v176 = *(_QWORD *)__src;
                turi::flexible_type_impl::ndarray<double>::ndarray(v176 + 1, v177);
                *(_QWORD *)&__src = v176;
                *v176 = 1;
                do
                {
                  v178 = __ldaxr(v175);
                  v179 = --v178 == 0;
                }
                while (__stlxr(v178, v175));
                goto LABEL_503;
              default:
                goto LABEL_1437;
            }
          case 5:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_625;
              case 2:
                v48 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v81 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v81, __src);
                *(_QWORD *)&__src = v81;
                *v81 = 1;
                do
                {
                  v82 = __ldaxr((unint64_t *)v48);
                  v51 = --v82 == 0;
                }
                while (__stlxr(v82, (unint64_t *)v48));
                goto LABEL_483;
              case 3:
                v167 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v241 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v241, __src);
                *(_QWORD *)&__src = v241;
                *v241 = 1;
                do
                {
                  v242 = __ldaxr(v167);
                  v170 = --v242 == 0;
                }
                while (__stlxr(v242, v167));
                goto LABEL_376;
              case 4:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v445 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v445, __src);
                *(_QWORD *)&__src = v445;
                *v445 = 1;
                do
                {
                  v446 = __ldaxr(v237);
                  v341 = --v446 == 0;
                }
                while (__stlxr(v446, v237));
                goto LABEL_610;
              case 5:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v395 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v395, __src);
                *(_QWORD *)&__src = v395;
                *v395 = 1;
                do
                {
                  v396 = __ldaxr(v237);
                  v240 = --v396 == 0;
                }
                while (__stlxr(v396, v237));
                goto LABEL_568;
              case 8:
                v342 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v447 = operator new();
                v448 = __src;
                *(_QWORD *)v447 = *(_QWORD *)__src;
                *(_QWORD *)(v447 + 8) = *(_QWORD *)(v448 + 8);
                v449 = *(_QWORD *)(v448 + 16);
                *(_QWORD *)(v447 + 16) = v449;
                if (v449)
                {
                  v450 = (unsigned int *)(v449 + 8);
                  do
                    v451 = __ldxr(v450);
                  while (__stxr(v451 + 1, v450));
                }
                v452 = *(_OWORD *)(v448 + 24);
                v453 = *(_OWORD *)(v448 + 40);
                *(_OWORD *)(v447 + 56) = *(_OWORD *)(v448 + 56);
                *(_OWORD *)(v447 + 40) = v453;
                *(_OWORD *)(v447 + 24) = v452;
                *(_QWORD *)&__src = v447;
                *(_QWORD *)v447 = 1;
                do
                {
                  v454 = __ldaxr((unint64_t *)v342);
                  v351 = --v454 == 0;
                }
                while (__stlxr(v454, (unint64_t *)v342));
                goto LABEL_620;
              case 9:
                v175 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v352 = (_QWORD *)operator new();
                v353 = __src + 8;
                *v352 = *(_QWORD *)__src;
                turi::flexible_type_impl::ndarray<double>::ndarray(v352 + 1, v353);
                *(_QWORD *)&__src = v352;
                *v352 = 1;
                do
                {
                  v354 = __ldaxr(v175);
                  v179 = --v354 == 0;
                }
                while (__stlxr(v354, v175));
                goto LABEL_503;
              default:
                goto LABEL_1437;
            }
          case 6:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_625;
              case 2:
                v48 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v83 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v83, __src);
                *(_QWORD *)&__src = v83;
                *v83 = 1;
                do
                {
                  v84 = __ldaxr((unint64_t *)v48);
                  v51 = --v84 == 0;
                }
                while (__stlxr(v84, (unint64_t *)v48));
                goto LABEL_483;
              case 3:
                v167 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v261 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v261, __src);
                *(_QWORD *)&__src = v261;
                *v261 = 1;
                do
                {
                  v262 = __ldaxr(v167);
                  v170 = --v262 == 0;
                }
                while (__stlxr(v262, v167));
                goto LABEL_376;
              case 4:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v455 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v455, __src);
                *(_QWORD *)&__src = v455;
                *v455 = 1;
                do
                {
                  v456 = __ldaxr(v237);
                  v341 = --v456 == 0;
                }
                while (__stlxr(v456, v237));
                goto LABEL_610;
              case 5:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v405 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v405, __src);
                *(_QWORD *)&__src = v405;
                *v405 = 1;
                do
                {
                  v406 = __ldaxr(v237);
                  v240 = --v406 == 0;
                }
                while (__stlxr(v406, v237));
                goto LABEL_568;
              case 8:
                v342 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v457 = operator new();
                v458 = __src;
                *(_QWORD *)v457 = *(_QWORD *)__src;
                *(_QWORD *)(v457 + 8) = *(_QWORD *)(v458 + 8);
                v459 = *(_QWORD *)(v458 + 16);
                *(_QWORD *)(v457 + 16) = v459;
                if (v459)
                {
                  v460 = (unsigned int *)(v459 + 8);
                  do
                    v461 = __ldxr(v460);
                  while (__stxr(v461 + 1, v460));
                }
                v462 = *(_OWORD *)(v458 + 24);
                v463 = *(_OWORD *)(v458 + 40);
                *(_OWORD *)(v457 + 56) = *(_OWORD *)(v458 + 56);
                *(_OWORD *)(v457 + 40) = v463;
                *(_OWORD *)(v457 + 24) = v462;
                *(_QWORD *)&__src = v457;
                *(_QWORD *)v457 = 1;
                do
                {
                  v464 = __ldaxr((unint64_t *)v342);
                  v351 = --v464 == 0;
                }
                while (__stlxr(v464, (unint64_t *)v342));
                goto LABEL_620;
              case 9:
                v175 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v361 = (_QWORD *)operator new();
                v362 = __src + 8;
                *v361 = *(_QWORD *)__src;
                turi::flexible_type_impl::ndarray<double>::ndarray(v361 + 1, v362);
                *(_QWORD *)&__src = v361;
                *v361 = 1;
                do
                {
                  v363 = __ldaxr(v175);
                  v179 = --v363 == 0;
                }
                while (__stlxr(v363, v175));
                goto LABEL_503;
              default:
                goto LABEL_1437;
            }
          case 7:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_625;
              case 2:
                v48 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v68 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v68, __src);
                *(_QWORD *)&__src = v68;
                *v68 = 1;
                do
                {
                  v69 = __ldaxr((unint64_t *)v48);
                  v51 = --v69 == 0;
                }
                while (__stlxr(v69, (unint64_t *)v48));
                goto LABEL_483;
              case 3:
                v167 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v192 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v192, __src);
                *(_QWORD *)&__src = v192;
                *v192 = 1;
                do
                {
                  v193 = __ldaxr(v167);
                  v170 = --v193 == 0;
                }
                while (__stlxr(v193, v167));
                goto LABEL_376;
              case 4:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v403 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v403, __src);
                *(_QWORD *)&__src = v403;
                *v403 = 1;
                do
                {
                  v404 = __ldaxr(v237);
                  v341 = --v404 == 0;
                }
                while (__stlxr(v404, v237));
                goto LABEL_610;
              case 5:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v357 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v357, __src);
                *(_QWORD *)&__src = v357;
                *v357 = 1;
                do
                {
                  v358 = __ldaxr(v237);
                  v240 = --v358 == 0;
                }
                while (__stlxr(v358, v237));
                goto LABEL_568;
              case 8:
                v342 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v415 = operator new();
                v416 = __src;
                *(_QWORD *)v415 = *(_QWORD *)__src;
                *(_QWORD *)(v415 + 8) = *(_QWORD *)(v416 + 8);
                v417 = *(_QWORD *)(v416 + 16);
                *(_QWORD *)(v415 + 16) = v417;
                if (v417)
                {
                  v418 = (unsigned int *)(v417 + 8);
                  do
                    v419 = __ldxr(v418);
                  while (__stxr(v419 + 1, v418));
                }
                v420 = *(_OWORD *)(v416 + 24);
                v421 = *(_OWORD *)(v416 + 40);
                *(_OWORD *)(v415 + 56) = *(_OWORD *)(v416 + 56);
                *(_OWORD *)(v415 + 40) = v421;
                *(_OWORD *)(v415 + 24) = v420;
                *(_QWORD *)&__src = v415;
                *(_QWORD *)v415 = 1;
                do
                {
                  v422 = __ldaxr((unint64_t *)v342);
                  v351 = --v422 == 0;
                }
                while (__stlxr(v422, (unint64_t *)v342));
                goto LABEL_620;
              case 9:
                v175 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v273 = (_QWORD *)operator new();
                v274 = __src + 8;
                *v273 = *(_QWORD *)__src;
                turi::flexible_type_impl::ndarray<double>::ndarray(v273 + 1, v274);
                *(_QWORD *)&__src = v273;
                *v273 = 1;
                do
                {
                  v275 = __ldaxr(v175);
                  v179 = --v275 == 0;
                }
                while (__stlxr(v275, v175));
                goto LABEL_503;
              default:
                goto LABEL_1437;
            }
          case 8:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_625;
              case 2:
                v48 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v85 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v85, __src);
                *(_QWORD *)&__src = v85;
                *v85 = 1;
                do
                {
                  v86 = __ldaxr((unint64_t *)v48);
                  v51 = --v86 == 0;
                }
                while (__stlxr(v86, (unint64_t *)v48));
                goto LABEL_483;
              case 3:
                v167 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v266 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v266, __src);
                *(_QWORD *)&__src = v266;
                *v266 = 1;
                do
                {
                  v267 = __ldaxr(v167);
                  v170 = --v267 == 0;
                }
                while (__stlxr(v267, v167));
                goto LABEL_376;
              case 4:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v465 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v465, __src);
                *(_QWORD *)&__src = v465;
                *v465 = 1;
                do
                {
                  v466 = __ldaxr(v237);
                  v341 = --v466 == 0;
                }
                while (__stlxr(v466, v237));
                goto LABEL_610;
              case 5:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v423 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v423, __src);
                *(_QWORD *)&__src = v423;
                *v423 = 1;
                do
                {
                  v424 = __ldaxr(v237);
                  v240 = --v424 == 0;
                }
                while (__stlxr(v424, v237));
                goto LABEL_568;
              case 8:
                v342 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v467 = operator new();
                v468 = __src;
                *(_QWORD *)v467 = *(_QWORD *)__src;
                *(_QWORD *)(v467 + 8) = *(_QWORD *)(v468 + 8);
                v469 = *(_QWORD *)(v468 + 16);
                *(_QWORD *)(v467 + 16) = v469;
                if (v469)
                {
                  v470 = (unsigned int *)(v469 + 8);
                  do
                    v471 = __ldxr(v470);
                  while (__stxr(v471 + 1, v470));
                }
                v472 = *(_OWORD *)(v468 + 24);
                v473 = *(_OWORD *)(v468 + 40);
                *(_OWORD *)(v467 + 56) = *(_OWORD *)(v468 + 56);
                *(_OWORD *)(v467 + 40) = v473;
                *(_OWORD *)(v467 + 24) = v472;
                *(_QWORD *)&__src = v467;
                *(_QWORD *)v467 = 1;
                do
                {
                  v474 = __ldaxr((unint64_t *)v342);
                  v351 = --v474 == 0;
                }
                while (__stlxr(v474, (unint64_t *)v342));
                goto LABEL_620;
              case 9:
                v175 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v381 = (_QWORD *)operator new();
                v382 = __src + 8;
                *v381 = *(_QWORD *)__src;
                turi::flexible_type_impl::ndarray<double>::ndarray(v381 + 1, v382);
                *(_QWORD *)&__src = v381;
                *v381 = 1;
                do
                {
                  v383 = __ldaxr(v175);
                  v179 = --v383 == 0;
                }
                while (__stlxr(v383, v175));
LABEL_503:
                if (!v179)
                  goto LABEL_625;
                v269 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v175);
                v384 = 2071181815;
                goto LABEL_623;
              default:
                goto LABEL_1437;
            }
          case 9:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_625;
              case 2:
                v48 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v52 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v52, __src);
                *(_QWORD *)&__src = v52;
                *v52 = 1;
                do
                {
                  v53 = __ldaxr((unint64_t *)v48);
                  v51 = --v53 == 0;
                }
                while (__stlxr(v53, (unint64_t *)v48));
LABEL_483:
                if (!v51)
                  goto LABEL_625;
                if (*(char *)(v48 + 31) < 0)
                  operator delete(*(void **)(v48 + 8));
                v269 = (_QWORD *)v48;
                v270 = 0x1012C404EF22A49;
                goto LABEL_624;
              case 3:
                v167 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v171 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v171, __src);
                *(_QWORD *)&__src = v171;
                *v171 = 1;
                do
                {
                  v172 = __ldaxr(v167);
                  v170 = --v172 == 0;
                }
                while (__stlxr(v172, v167));
LABEL_376:
                if (!v170)
                  goto LABEL_625;
                v268 = (void *)v167[1];
                if (v268)
                {
                  v167[2] = (unint64_t)v268;
                  operator delete(v268);
                }
                v269 = v167;
                v270 = 0x1080C409938AC02;
                goto LABEL_624;
              case 4:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v359 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v359, __src);
                *(_QWORD *)&__src = v359;
                *v359 = 1;
                do
                {
                  v360 = __ldaxr(v237);
                  v341 = --v360 == 0;
                }
                while (__stlxr(v360, v237));
LABEL_610:
                if (!v341)
                  goto LABEL_625;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v237 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                goto LABEL_613;
              case 5:
                v237 = (unint64_t *)__src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v271 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v271, __src);
                *(_QWORD *)&__src = v271;
                *v271 = 1;
                do
                {
                  v272 = __ldaxr(v237);
                  v240 = --v272 == 0;
                }
                while (__stlxr(v272, v237));
LABEL_568:
                if (!v240)
                  goto LABEL_625;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v237 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_613:
                v269 = v237;
                v270 = 0x1020C405E66F15BLL;
                goto LABEL_624;
              case 8:
                v342 = __src;
                if (*(_QWORD *)__src == 1)
                  goto LABEL_625;
                v373 = operator new();
                v374 = __src;
                *(_QWORD *)v373 = *(_QWORD *)__src;
                *(_QWORD *)(v373 + 8) = *(_QWORD *)(v374 + 8);
                v375 = *(_QWORD *)(v374 + 16);
                *(_QWORD *)(v373 + 16) = v375;
                if (v375)
                {
                  v376 = (unsigned int *)(v375 + 8);
                  do
                    v377 = __ldxr(v376);
                  while (__stxr(v377 + 1, v376));
                }
                v378 = *(_OWORD *)(v374 + 24);
                v379 = *(_OWORD *)(v374 + 40);
                *(_OWORD *)(v373 + 56) = *(_OWORD *)(v374 + 56);
                *(_OWORD *)(v373 + 40) = v379;
                *(_OWORD *)(v373 + 24) = v378;
                *(_QWORD *)&__src = v373;
                *(_QWORD *)v373 = 1;
                do
                {
                  v380 = __ldaxr((unint64_t *)v342);
                  v351 = --v380 == 0;
                }
                while (__stlxr(v380, (unint64_t *)v342));
LABEL_620:
                if (!v351)
                  goto LABEL_625;
                boost::detail::shared_count::~shared_count((unsigned int **)(v342 + 16));
                v269 = (_QWORD *)v342;
                v384 = -235920773;
LABEL_623:
                v270 = v384 | 0x1030C4000000000;
LABEL_624:
                MEMORY[0x219A19A08](v269, v270);
LABEL_625:
                turi::flexible_type_fail(0);
                goto LABEL_626;
              case 9:
                v194 = *(double *)v19;
                v195 = (unint64_t *)__src;
                if (*(_QWORD *)__src != 1)
                {
                  v196 = (_QWORD *)operator new();
                  v197 = __src + 8;
                  *v196 = *(_QWORD *)__src;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v196 + 1, v197);
                  *(_QWORD *)&__src = v196;
                  *v196 = 1;
                  do
                  {
                    v198 = __ldaxr(v195);
                    v199 = v198 - 1;
                  }
                  while (__stlxr(v199, v195));
                  if (!v199)
                  {
                    v200 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v195);
                    MEMORY[0x219A19A08](v200, 0x1030C407B73B9F7);
                  }
                }
                v201 = __src;
                v202 = (uint64_t *)(__src + 8);
                if (!turi::flexible_type_impl::ndarray<double>::same_shape(__src + 8, *(_QWORD *)&v194 + 8))
                  turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                v204 = *(uint64_t **)(v201 + 24);
                v203 = *(uint64_t **)(v201 + 32);
                if (v203 == v204)
                  goto LABEL_626;
                if (!*v202)
                  goto LABEL_626;
                v205 = 1;
                do
                {
                  v206 = *v204++;
                  v205 *= v206;
                }
                while (v204 != v203);
                if (!v205)
                  goto LABEL_626;
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v202);
                v207 = (uint64_t)(*(_QWORD *)(v201 + 32) - *(_QWORD *)(v201 + 24)) >> 3;
                v1106 = 0;
                std::vector<unsigned long>::vector(&__p, v207, &v1106);
                v208 = __p.__r_.__value_.__l.__size_;
                v209 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                break;
              default:
                goto LABEL_1437;
            }
            break;
          default:
            goto LABEL_1437;
        }
        while (1)
        {
          v210 = v208 - (_QWORD)v209;
          if (v210)
          {
            v211 = 0;
            v212 = v210 >> 3;
            v213 = *(uint64_t **)(*(_QWORD *)&v194 + 48);
            if (v212 <= 1)
              v212 = 1;
            v214 = v209;
            v215 = v212;
            do
            {
              v217 = *v214++;
              v216 = v217;
              v218 = *v213++;
              v211 += v218 * v216;
              --v215;
            }
            while (v215);
            v219 = 0;
            v220 = *(double *)(**(_QWORD **)(*(_QWORD *)&v194 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v194 + 72) + v211));
            v221 = *(uint64_t **)(v201 + 48);
            do
            {
              v223 = *v209++;
              v222 = v223;
              v224 = *v221++;
              v219 += v224 * v222;
              --v212;
            }
            while (v212);
          }
          else
          {
            v219 = 0;
            v220 = *(double *)(**(_QWORD **)(*(_QWORD *)&v194 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v194 + 72));
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v202);
          *(double *)(**(_QWORD **)(v201 + 8) + 8 * (*(_QWORD *)(v201 + 72) + v219)) = v220
                                                                                     + *(double *)(**(_QWORD **)(v201 + 8)
                                                                                                 + 8
                                                                                                 * (*(_QWORD *)(v201 + 72)
                                                                                                  + v219));
          v208 = __p.__r_.__value_.__l.__size_;
          v209 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          v225 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
          v226 = v225 - 1;
          if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >= 1)
          {
            v227 = *(_QWORD *)(v201 + 24);
            v228 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v226) + 1;
            *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v226) = v228;
            if (v228 >= *(_QWORD *)(v227 + 8 * v226))
            {
              v229 = (unint64_t *)&v209[v225 - 2];
              v230 = v227 - 16;
              do
              {
                v231 = v225 - 1;
                v229[1] = 0;
                if (v225 - 1 <= 0)
                  goto LABEL_438;
                v232 = *v229 + 1;
                *v229-- = v232;
                v233 = *(_QWORD *)(v230 + 8 * v225--);
              }
              while (v232 >= v233);
              v226 = v231 - 1;
            }
            v225 = 1;
          }
          if (v226 < 0 || !v225)
          {
LABEL_438:
            if (v209)
            {
LABEL_439:
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v209;
              operator delete(v209);
            }
LABEL_626:
            v475 = 0;
            switch(BYTE12(__src))
            {
              case 0:
                v475 = __src;
                goto LABEL_654;
              case 1:
                v475 = (uint64_t)*(double *)&__src;
                goto LABEL_654;
              case 2:
                v478 = __src;
                v1106 = 0;
                v479 = (char *)(__src + 8);
                if (*(char *)(__src + 31) < 0)
                  v479 = *(char **)(__src + 8);
                std::string::basic_string[abi:ne180100]<0>(&__p, v479);
                v475 = std::stoll(&__p, &v1106, 10);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (*(char *)(v478 + 31) < 0)
                  v480 = *(_QWORD *)(v478 + 16);
                else
                  v480 = *(unsigned __int8 *)(v478 + 31);
                if (v1106 != v480)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v1066 = std::string::append(&v1105, " cannot be interpreted as an integer");
                  v1067 = *(_OWORD *)&v1066->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v1066->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1067;
                  v1066->__r_.__value_.__l.__size_ = 0;
                  v1066->__r_.__value_.__r.__words[2] = 0;
                  v1066->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(exception, &__p);
                  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                goto LABEL_654;
              case 3:
                memset(&__p, 0, sizeof(__p));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(__src + 8), *(_QWORD *)(__src + 16), (uint64_t)(*(_QWORD *)(__src + 16) - *(_QWORD *)(__src + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                goto LABEL_653;
              case 4:
                memset(&__p, 0, sizeof(__p));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(__src + 8), *(uint64_t **)(__src + 16), (uint64_t)(*(_QWORD *)(__src + 16) - *(_QWORD *)(__src + 8)) >> 4);
                turi::flexible_type_fail(0);
                v1105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1105);
                goto LABEL_653;
              case 5:
                memset(&__p, 0, sizeof(__p));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(__src + 8), *(uint64_t **)(__src + 16), (uint64_t)(*(_QWORD *)(__src + 16) - *(_QWORD *)(__src + 8)) >> 5);
                turi::flexible_type_fail(0);
                v1105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1105);
                goto LABEL_653;
              case 6:
                v475 = (uint64_t)((_QWORD)__src << 8) >> 8;
                goto LABEL_654;
              case 7:
                goto LABEL_654;
              case 8:
                v481 = __src;
                v482 = *(unsigned int **)(__src + 16);
                v1101[0] = *(void **)(__src + 8);
                v1101[1] = v482;
                if (v482)
                {
                  v483 = v482 + 2;
                  do
                    v484 = __ldxr(v483);
                  while (__stxr(v484 + 1, v483));
                }
                v485 = *(_OWORD *)(v481 + 24);
                v486 = *(_OWORD *)(v481 + 56);
                v1103 = *(_OWORD *)(v481 + 40);
                v1104 = v486;
                v1102 = v485;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((unsigned int **)&v1101[1]);
                goto LABEL_653;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&__p, __src + 8);
                turi::flexible_type_fail(0);
                if (v1112)
                {
                  v1113 = v1112;
                  operator delete(v1112);
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v1110 = (_QWORD *)__p.__r_.__value_.__r.__words[2];
                  operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                }
                v475 = __p.__r_.__value_.__l.__size_;
                if (!__p.__r_.__value_.__l.__size_)
                  goto LABEL_654;
                v476 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v477 = __ldaxr(v476);
                while (__stlxr(v477 - 1, v476));
                if (!v477)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v475 + 16))(v475);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v475);
                }
LABEL_653:
                v475 = 0;
LABEL_654:
                v1092 = (std::__shared_weak_count *)v475;
                switch(BYTE12(__src))
                {
                  case 2:
                    v487 = (unint64_t *)__src;
                    do
                    {
                      v488 = __ldaxr(v487);
                      v489 = v488 - 1;
                    }
                    while (__stlxr(v489, v487));
                    if (!v489)
                    {
                      v490 = __src;
                      if ((_QWORD)__src)
                      {
                        if (*(char *)(__src + 31) < 0)
                          operator delete(*(void **)(__src + 8));
                        v491 = v490;
                        v492 = 0x1012C404EF22A49;
                        goto LABEL_689;
                      }
                    }
                    break;
                  case 3:
                    v503 = (unint64_t *)__src;
                    do
                    {
                      v504 = __ldaxr(v503);
                      v505 = v504 - 1;
                    }
                    while (__stlxr(v505, v503));
                    if (!v505)
                    {
                      v506 = __src;
                      if ((_QWORD)__src)
                      {
                        v507 = *(void **)(__src + 8);
                        if (v507)
                        {
                          *(_QWORD *)(__src + 16) = v507;
                          operator delete(v507);
                        }
                        v491 = v506;
                        v492 = 0x1080C409938AC02;
                        goto LABEL_689;
                      }
                    }
                    break;
                  case 4:
                    v493 = (unint64_t *)__src;
                    do
                    {
                      v494 = __ldaxr(v493);
                      v495 = v494 - 1;
                    }
                    while (__stlxr(v495, v493));
                    if (!v495)
                    {
                      v496 = __src;
                      if ((_QWORD)__src)
                      {
                        __p.__r_.__value_.__r.__words[0] = __src + 8;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        goto LABEL_688;
                      }
                    }
                    break;
                  case 5:
                    v508 = (unint64_t *)__src;
                    do
                    {
                      v509 = __ldaxr(v508);
                      v510 = v509 - 1;
                    }
                    while (__stlxr(v510, v508));
                    if (!v510)
                    {
                      v496 = __src;
                      if ((_QWORD)__src)
                      {
                        __p.__r_.__value_.__r.__words[0] = __src + 8;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_688:
                        v491 = v496;
                        v492 = 0x1020C405E66F15BLL;
                        goto LABEL_689;
                      }
                    }
                    break;
                  case 8:
                    v511 = (unint64_t *)__src;
                    do
                    {
                      v512 = __ldaxr(v511);
                      v513 = v512 - 1;
                    }
                    while (__stlxr(v513, v511));
                    if (!v513)
                    {
                      v514 = __src;
                      if ((_QWORD)__src)
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)(__src + 16));
                        MEMORY[0x219A19A08](v514, 0x1030C40F1F0227BLL);
                      }
                      *(_QWORD *)&__src = 0;
                    }
                    break;
                  case 9:
                    v497 = (unint64_t *)__src;
                    do
                    {
                      v498 = __ldaxr(v497);
                      v499 = v498 - 1;
                    }
                    while (__stlxr(v499, v497));
                    if (!v499)
                    {
                      v500 = __src;
                      if ((_QWORD)__src)
                      {
                        v501 = *(void **)(__src + 48);
                        if (v501)
                        {
                          *(_QWORD *)(__src + 56) = v501;
                          operator delete(v501);
                        }
                        v502 = *(void **)(v500 + 24);
                        if (v502)
                        {
                          *(_QWORD *)(v500 + 32) = v502;
                          operator delete(v502);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v500 + 8);
                        v491 = v500;
                        v492 = 0x1030C407B73B9F7;
LABEL_689:
                        MEMORY[0x219A19A08](v491, v492);
                      }
                    }
                    break;
                  default:
                    break;
                }
                *(_QWORD *)&__src = 0;
                DWORD2(__src) = 0;
                BYTE12(__src) = 0;
                if (v1088 < 0)
                  operator delete(v1087[0]);
                if (SHIBYTE(v1090) < 0)
                  operator delete((void *)__idx[0]);
                v515 = (uint64_t *)*v4;
                std::string::basic_string[abi:ne180100]<0>(__idx, "start");
                v516 = turi::query_eval::node_info::p(v515, (uint64_t)__idx);
                v517 = (uint64_t *)*v4;
                std::string::basic_string[abi:ne180100]<0>(v1087, "end_index");
                v518 = turi::query_eval::node_info::p(v517, (uint64_t)v1087);
                v519 = (uint64_t *)v518;
                *(_QWORD *)&__src = 0;
                DWORD2(__src) = 0;
                BYTE12(__src) = 0;
                if ((__int128 *)v516 != &__src)
                {
                  v520 = *(_QWORD *)v516;
                  *(_QWORD *)((char *)&__src + 5) = *(_QWORD *)(v516 + 5);
                  *(_QWORD *)&__src = v520;
                  BYTE12(__src) = *(_BYTE *)(v516 + 12);
                  if (BYTE12(__src) <= 9u && ((1 << SBYTE12(__src)) & 0x33C) != 0)
                  {
                    v521 = (unint64_t *)__src;
                    do
                      v522 = __ldaxr(v521);
                    while (__stlxr(v522 + 1, v521));
                  }
                }
                break;
              default:
                goto LABEL_1437;
            }
            switch(*(_BYTE *)(v518 + 12))
            {
              case 0:
                switch(BYTE12(__src))
                {
                  case 0:
                    v523 = __src + *(_QWORD *)v518;
                    goto LABEL_745;
                  case 1:
                    v719 = *(double *)&__src + (double)*(uint64_t *)v518;
                    goto LABEL_1005;
                  case 2:
                    v524 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v745 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v745, __src);
                    *(_QWORD *)&__src = v745;
                    *v745 = 1;
                    do
                    {
                      v746 = __ldaxr((unint64_t *)v524);
                      v527 = --v746 == 0;
                    }
                    while (__stlxr(v746, (unint64_t *)v524));
                    goto LABEL_981;
                  case 3:
                    v624 = (unint64_t *)__src;
                    if (*(_QWORD *)__src != 1)
                    {
                      v625 = (_QWORD *)operator new();
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v625, __src);
                      *(_QWORD *)&__src = v625;
                      *v625 = 1;
                      do
                      {
                        v626 = __ldaxr(v624);
                        v627 = v626 - 1;
                      }
                      while (__stlxr(v627, v624));
                      if (!v627)
                      {
                        v628 = (void *)v624[1];
                        if (v628)
                        {
                          v624[2] = (unint64_t)v628;
                          operator delete(v628);
                        }
                        MEMORY[0x219A19A08](v624, 0x1080C409938AC02);
                      }
                    }
                    v629 = *(double **)(__src + 8);
                    v630 = *(_QWORD *)(__src + 16) - (_QWORD)v629;
                    if (v630)
                    {
                      v631 = v630 >> 3;
                      v632 = (double)*v519;
                      if (v631 <= 1)
                        v631 = 1;
                      do
                      {
                        *v629 = *v629 + v632;
                        ++v629;
                        --v631;
                      }
                      while (v631);
                    }
                    goto LABEL_1124;
                  case 4:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v780 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v780, __src);
                    *(_QWORD *)&__src = v780;
                    *v780 = 1;
                    do
                    {
                      v781 = __ldaxr(v618);
                      v722 = --v781 == 0;
                    }
                    while (__stlxr(v781, v618));
                    goto LABEL_1108;
                  case 5:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v806 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v806, __src);
                    *(_QWORD *)&__src = v806;
                    *v806 = 1;
                    do
                    {
                      v807 = __ldaxr(v618);
                      v621 = --v807 == 0;
                    }
                    while (__stlxr(v807, v618));
                    goto LABEL_1066;
                  case 6:
                    *(_QWORD *)&__src = __src & 0xFF00000000000000 | (__src + *(_QWORD *)v518) & 0xFFFFFFFFFFFFFFLL;
                    goto LABEL_1124;
                  case 7:
                    goto LABEL_1123;
                  case 8:
                    v723 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v810 = operator new();
                    v811 = __src;
                    *(_QWORD *)v810 = *(_QWORD *)__src;
                    *(_QWORD *)(v810 + 8) = *(_QWORD *)(v811 + 8);
                    v812 = *(_QWORD *)(v811 + 16);
                    *(_QWORD *)(v810 + 16) = v812;
                    if (v812)
                    {
                      v813 = (unsigned int *)(v812 + 8);
                      do
                        v814 = __ldxr(v813);
                      while (__stxr(v814 + 1, v813));
                    }
                    v815 = *(_OWORD *)(v811 + 24);
                    v816 = *(_OWORD *)(v811 + 40);
                    *(_OWORD *)(v810 + 56) = *(_OWORD *)(v811 + 56);
                    *(_OWORD *)(v810 + 40) = v816;
                    *(_OWORD *)(v810 + 24) = v815;
                    *(_QWORD *)&__src = v810;
                    *(_QWORD *)v810 = 1;
                    do
                    {
                      v817 = __ldaxr((unint64_t *)v723);
                      v732 = --v817 == 0;
                    }
                    while (__stlxr(v817, (unint64_t *)v723));
                    goto LABEL_1118;
                  case 9:
                    v657 = (unint64_t *)__src;
                    if (*(_QWORD *)__src != 1)
                    {
                      v658 = (_QWORD *)operator new();
                      v659 = __src + 8;
                      *v658 = *(_QWORD *)__src;
                      turi::flexible_type_impl::ndarray<double>::ndarray(v658 + 1, v659);
                      *(_QWORD *)&__src = v658;
                      *v658 = 1;
                      do
                      {
                        v660 = __ldaxr(v657);
                        v661 = v660 - 1;
                      }
                      while (__stlxr(v661, v657));
                      if (!v661)
                      {
                        v662 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v657);
                        MEMORY[0x219A19A08](v662, 0x1030C407B73B9F7);
                      }
                    }
                    v663 = (uint64_t *)__src;
                    v665 = *(uint64_t **)(__src + 24);
                    v664 = *(uint64_t **)(__src + 32);
                    if (v664 == v665)
                      goto LABEL_1124;
                    if (!*(_QWORD *)(__src + 8))
                      goto LABEL_1124;
                    v666 = (double)*v519;
                    v667 = 1;
                    do
                    {
                      v668 = *v665++;
                      v667 *= v668;
                    }
                    while (v665 != v664);
                    if (!v667)
                      goto LABEL_1124;
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(__src + 8));
                    v669 = (v663[4] - v663[3]) >> 3;
                    v1106 = 0;
                    std::vector<unsigned long>::vector(&__p, v669, &v1106);
                    v670 = __p.__r_.__value_.__l.__size_;
                    v590 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                    break;
                  default:
                    goto LABEL_1437;
                }
                while (2)
                {
                  v671 = 0;
                  v672 = v670 - (_QWORD)v590;
                  if (v672)
                  {
                    v673 = v672 >> 3;
                    v674 = (uint64_t *)v663[6];
                    if (v673 <= 1)
                      v673 = 1;
                    do
                    {
                      v676 = *v590++;
                      v675 = v676;
                      v677 = *v674++;
                      v671 += v677 * v675;
                      --v673;
                    }
                    while (v673);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v663 + 1);
                  *(double *)(*(_QWORD *)v663[1] + 8 * (v663[9] + v671)) = *(double *)(*(_QWORD *)v663[1]
                                                                                     + 8 * (v663[9] + v671))
                                                                         + v666;
                  v670 = __p.__r_.__value_.__l.__size_;
                  v590 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                  v678 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                  v679 = v678 - 1;
                  if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) < 1)
                    goto LABEL_909;
                  v680 = v663[3];
                  v681 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v679) + 1;
                  *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v679) = v681;
                  if (v681 < *(_QWORD *)(v680 + 8 * v679))
                  {
LABEL_908:
                    v678 = 1;
LABEL_909:
                    if (v679 < 0 || !v678)
                      goto LABEL_936;
                    continue;
                  }
                  break;
                }
                v682 = (unint64_t *)&v590[v678 - 2];
                v683 = v680 - 16;
                while (1)
                {
                  v684 = v678 - 1;
                  v682[1] = 0;
                  if (v678 - 1 <= 0)
                    goto LABEL_937;
                  v685 = *v682 + 1;
                  *v682-- = v685;
                  v686 = *(_QWORD *)(v683 + 8 * v678--);
                  if (v685 < v686)
                  {
                    v679 = v684 - 1;
                    goto LABEL_908;
                  }
                }
              case 1:
                switch(BYTE12(__src))
                {
                  case 0:
                    v523 = (uint64_t)(*(double *)v518 + (double)(uint64_t)__src);
LABEL_745:
                    *(_QWORD *)&__src = v523;
                    goto LABEL_1124;
                  case 1:
                    v719 = *(double *)v518 + *(double *)&__src;
LABEL_1005:
                    *(double *)&__src = v719;
                    goto LABEL_1124;
                  case 2:
                    v524 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v747 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v747, __src);
                    *(_QWORD *)&__src = v747;
                    *v747 = 1;
                    do
                    {
                      v748 = __ldaxr((unint64_t *)v524);
                      v527 = --v748 == 0;
                    }
                    while (__stlxr(v748, (unint64_t *)v524));
                    goto LABEL_981;
                  case 3:
                    v633 = (unint64_t *)__src;
                    if (*(_QWORD *)__src != 1)
                    {
                      v634 = (_QWORD *)operator new();
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v634, __src);
                      *(_QWORD *)&__src = v634;
                      *v634 = 1;
                      do
                      {
                        v635 = __ldaxr(v633);
                        v636 = v635 - 1;
                      }
                      while (__stlxr(v636, v633));
                      if (!v636)
                      {
                        v637 = (void *)v633[1];
                        if (v637)
                        {
                          v633[2] = (unint64_t)v637;
                          operator delete(v637);
                        }
                        MEMORY[0x219A19A08](v633, 0x1080C409938AC02);
                      }
                    }
                    v638 = *(double **)(__src + 8);
                    v639 = *(_QWORD *)(__src + 16) - (_QWORD)v638;
                    if (v639)
                    {
                      v640 = *(double *)v519;
                      v641 = v639 >> 3;
                      if (v641 <= 1)
                        v641 = 1;
                      do
                      {
                        *v638 = v640 + *v638;
                        ++v638;
                        --v641;
                      }
                      while (v641);
                    }
                    goto LABEL_1124;
                  case 4:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v782 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v782, __src);
                    *(_QWORD *)&__src = v782;
                    *v782 = 1;
                    do
                    {
                      v783 = __ldaxr(v618);
                      v722 = --v783 == 0;
                    }
                    while (__stlxr(v783, v618));
                    goto LABEL_1108;
                  case 5:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v808 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v808, __src);
                    *(_QWORD *)&__src = v808;
                    *v808 = 1;
                    do
                    {
                      v809 = __ldaxr(v618);
                      v621 = --v809 == 0;
                    }
                    while (__stlxr(v809, v618));
                    goto LABEL_1066;
                  case 6:
                    v749 = vcvtmd_s64_f64(*(double *)v518);
                    v750 = (*(double *)v518 - (double)(uint64_t)floor(*(double *)v518)) * 1000000.0;
                    v751 = __src;
                    v752 = __src + v749;
                    *(_QWORD *)&__src = __src & 0xFF00000000000000 | (__src + v749) & 0xFFFFFFFFFFFFFFLL;
                    v753 = (uint64_t)v750 + SDWORD2(__src);
                    if (v753 > 999999)
                    {
                      *(_QWORD *)&__src = (v752 + 1) & 0xFFFFFFFFFFFFFFLL | v751 & 0xFF00000000000000;
                      LODWORD(v753) = v753 - 1000000;
                    }
                    if (v753 > 0xF423F)
                      turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                    DWORD2(__src) = v753;
                    goto LABEL_1124;
                  case 7:
                    goto LABEL_1123;
                  case 8:
                    v723 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v818 = operator new();
                    v819 = __src;
                    *(_QWORD *)v818 = *(_QWORD *)__src;
                    *(_QWORD *)(v818 + 8) = *(_QWORD *)(v819 + 8);
                    v820 = *(_QWORD *)(v819 + 16);
                    *(_QWORD *)(v818 + 16) = v820;
                    if (v820)
                    {
                      v821 = (unsigned int *)(v820 + 8);
                      do
                        v822 = __ldxr(v821);
                      while (__stxr(v822 + 1, v821));
                    }
                    v823 = *(_OWORD *)(v819 + 24);
                    v824 = *(_OWORD *)(v819 + 40);
                    *(_OWORD *)(v818 + 56) = *(_OWORD *)(v819 + 56);
                    *(_OWORD *)(v818 + 40) = v824;
                    *(_OWORD *)(v818 + 24) = v823;
                    *(_QWORD *)&__src = v818;
                    *(_QWORD *)v818 = 1;
                    do
                    {
                      v825 = __ldaxr((unint64_t *)v723);
                      v732 = --v825 == 0;
                    }
                    while (__stlxr(v825, (unint64_t *)v723));
                    goto LABEL_1118;
                  case 9:
                    v687 = (unint64_t *)__src;
                    if (*(_QWORD *)__src != 1)
                    {
                      v688 = (_QWORD *)operator new();
                      v689 = __src + 8;
                      *v688 = *(_QWORD *)__src;
                      turi::flexible_type_impl::ndarray<double>::ndarray(v688 + 1, v689);
                      *(_QWORD *)&__src = v688;
                      *v688 = 1;
                      do
                      {
                        v690 = __ldaxr(v687);
                        v691 = v690 - 1;
                      }
                      while (__stlxr(v691, v687));
                      if (!v691)
                      {
                        v692 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v687);
                        MEMORY[0x219A19A08](v692, 0x1030C407B73B9F7);
                      }
                    }
                    v693 = (uint64_t *)__src;
                    v695 = *(uint64_t **)(__src + 24);
                    v694 = *(uint64_t **)(__src + 32);
                    if (v694 == v695)
                      goto LABEL_1124;
                    if (!*(_QWORD *)(__src + 8))
                      goto LABEL_1124;
                    v696 = *(double *)v519;
                    v697 = 1;
                    do
                    {
                      v698 = *v695++;
                      v697 *= v698;
                    }
                    while (v695 != v694);
                    if (!v697)
                      goto LABEL_1124;
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(__src + 8));
                    v699 = (v693[4] - v693[3]) >> 3;
                    v1106 = 0;
                    std::vector<unsigned long>::vector(&__p, v699, &v1106);
                    v700 = __p.__r_.__value_.__l.__size_;
                    v590 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                    break;
                  default:
                    goto LABEL_1437;
                }
                while (2)
                {
                  v701 = 0;
                  v702 = v700 - (_QWORD)v590;
                  if (v702)
                  {
                    v703 = v702 >> 3;
                    v704 = (uint64_t *)v693[6];
                    if (v703 <= 1)
                      v703 = 1;
                    do
                    {
                      v706 = *v590++;
                      v705 = v706;
                      v707 = *v704++;
                      v701 += v707 * v705;
                      --v703;
                    }
                    while (v703);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v693 + 1);
                  *(double *)(*(_QWORD *)v693[1] + 8 * (v693[9] + v701)) = v696
                                                                         + *(double *)(*(_QWORD *)v693[1]
                                                                                     + 8 * (v693[9] + v701));
                  v700 = __p.__r_.__value_.__l.__size_;
                  v590 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                  v708 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                  v709 = v708 - 1;
                  if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) < 1)
                    goto LABEL_934;
                  v710 = v693[3];
                  v711 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v709) + 1;
                  *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v709) = v711;
                  if (v711 < *(_QWORD *)(v710 + 8 * v709))
                  {
LABEL_933:
                    v708 = 1;
LABEL_934:
                    if (v709 < 0 || !v708)
                      goto LABEL_936;
                    continue;
                  }
                  break;
                }
                v712 = (unint64_t *)&v590[v708 - 2];
                v713 = v710 - 16;
                while (1)
                {
                  v714 = v708 - 1;
                  v712[1] = 0;
                  if (v708 - 1 <= 0)
                    goto LABEL_937;
                  v715 = *v712 + 1;
                  *v712-- = v715;
                  v716 = *(_QWORD *)(v713 + 8 * v708--);
                  if (v715 < v716)
                  {
                    v709 = v714 - 1;
                    goto LABEL_933;
                  }
                }
              case 2:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1123;
                  case 2:
                    v530 = *(double *)v518;
                    v531 = __src;
                    if (*(_QWORD *)__src != 1)
                    {
                      v532 = (_QWORD *)operator new();
                      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v532, __src);
                      *(_QWORD *)&__src = v532;
                      *v532 = 1;
                      do
                      {
                        v533 = __ldaxr((unint64_t *)v531);
                        v534 = v533 - 1;
                      }
                      while (__stlxr(v534, (unint64_t *)v531));
                      if (!v534)
                      {
                        if (*(char *)(v531 + 31) < 0)
                          operator delete(*(void **)(v531 + 8));
                        MEMORY[0x219A19A08](v531, 0x1012C404EF22A49);
                      }
                    }
                    v535 = *(char *)(*(_QWORD *)&v530 + 31);
                    if (v535 >= 0)
                      v536 = (const std::string::value_type *)(*(_QWORD *)&v530 + 8);
                    else
                      v536 = *(const std::string::value_type **)(*(_QWORD *)&v530 + 8);
                    if (v535 >= 0)
                      v537 = *(unsigned __int8 *)(*(_QWORD *)&v530 + 31);
                    else
                      v537 = *(_QWORD *)(*(_QWORD *)&v530 + 16);
                    std::string::append((std::string *)(__src + 8), v536, v537);
                    goto LABEL_1124;
                  case 3:
                    v548 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v554 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v554, __src);
                    *(_QWORD *)&__src = v554;
                    *v554 = 1;
                    do
                    {
                      v555 = __ldaxr(v548);
                      v551 = --v555 == 0;
                    }
                    while (__stlxr(v555, v548));
                    goto LABEL_874;
                  case 4:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v766 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v766, __src);
                    *(_QWORD *)&__src = v766;
                    *v766 = 1;
                    do
                    {
                      v767 = __ldaxr(v618);
                      v722 = --v767 == 0;
                    }
                    while (__stlxr(v767, v618));
                    goto LABEL_1108;
                  case 5:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v717 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v717, __src);
                    *(_QWORD *)&__src = v717;
                    *v717 = 1;
                    do
                    {
                      v718 = __ldaxr(v618);
                      v621 = --v718 == 0;
                    }
                    while (__stlxr(v718, v618));
                    goto LABEL_1066;
                  case 8:
                    v723 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v768 = operator new();
                    v769 = __src;
                    *(_QWORD *)v768 = *(_QWORD *)__src;
                    *(_QWORD *)(v768 + 8) = *(_QWORD *)(v769 + 8);
                    v770 = *(_QWORD *)(v769 + 16);
                    *(_QWORD *)(v768 + 16) = v770;
                    if (v770)
                    {
                      v771 = (unsigned int *)(v770 + 8);
                      do
                        v772 = __ldxr(v771);
                      while (__stxr(v772 + 1, v771));
                    }
                    v773 = *(_OWORD *)(v769 + 24);
                    v774 = *(_OWORD *)(v769 + 40);
                    *(_OWORD *)(v768 + 56) = *(_OWORD *)(v769 + 56);
                    *(_OWORD *)(v768 + 40) = v774;
                    *(_OWORD *)(v768 + 24) = v773;
                    *(_QWORD *)&__src = v768;
                    *(_QWORD *)v768 = 1;
                    do
                    {
                      v775 = __ldaxr((unint64_t *)v723);
                      v732 = --v775 == 0;
                    }
                    while (__stlxr(v775, (unint64_t *)v723));
                    goto LABEL_1118;
                  case 9:
                    v556 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v615 = (_QWORD *)operator new();
                    v616 = __src + 8;
                    *v615 = *(_QWORD *)__src;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v615 + 1, v616);
                    *(_QWORD *)&__src = v615;
                    *v615 = 1;
                    do
                    {
                      v617 = __ldaxr(v556);
                      v560 = --v617 == 0;
                    }
                    while (__stlxr(v617, v556));
                    goto LABEL_1001;
                  default:
                    goto LABEL_1437;
                }
              case 3:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1123;
                  case 2:
                    v524 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v538 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v538, __src);
                    *(_QWORD *)&__src = v538;
                    *v538 = 1;
                    do
                    {
                      v539 = __ldaxr((unint64_t *)v524);
                      v527 = --v539 == 0;
                    }
                    while (__stlxr(v539, (unint64_t *)v524));
                    goto LABEL_981;
                  case 3:
                    v561 = *(double *)v518;
                    v562 = (unint64_t *)__src;
                    if (*(_QWORD *)__src != 1)
                    {
                      v563 = (_QWORD *)operator new();
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v563, __src);
                      *(_QWORD *)&__src = v563;
                      *v563 = 1;
                      do
                      {
                        v564 = __ldaxr(v562);
                        v565 = v564 - 1;
                      }
                      while (__stlxr(v565, v562));
                      if (!v565)
                      {
                        v566 = (void *)v562[1];
                        if (v566)
                        {
                          v562[2] = (unint64_t)v566;
                          operator delete(v566);
                        }
                        MEMORY[0x219A19A08](v562, 0x1080C409938AC02);
                      }
                    }
                    v567 = __src;
                    turi::flexible_type_fail(*(_QWORD *)(__src + 16) - *(_QWORD *)(__src + 8) == *(_QWORD *)(*(_QWORD *)&v561 + 16)
                                                                                               - *(_QWORD *)(*(_QWORD *)&v561 + 8));
                    v568 = *(double **)(v567 + 8);
                    v569 = *(_QWORD *)(v567 + 16) - (_QWORD)v568;
                    if (v569)
                    {
                      v570 = v569 >> 3;
                      v571 = *(double **)(*(_QWORD *)&v561 + 8);
                      if (v570 <= 1)
                        v570 = 1;
                      do
                      {
                        v572 = *v571++;
                        *v568 = v572 + *v568;
                        ++v568;
                        --v570;
                      }
                      while (v570);
                    }
                    goto LABEL_1124;
                  case 4:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v778 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v778, __src);
                    *(_QWORD *)&__src = v778;
                    *v778 = 1;
                    do
                    {
                      v779 = __ldaxr(v618);
                      v722 = --v779 == 0;
                    }
                    while (__stlxr(v779, v618));
                    goto LABEL_1108;
                  case 5:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v736 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v736, __src);
                    *(_QWORD *)&__src = v736;
                    *v736 = 1;
                    do
                    {
                      v737 = __ldaxr(v618);
                      v621 = --v737 == 0;
                    }
                    while (__stlxr(v737, v618));
                    goto LABEL_1066;
                  case 8:
                    v723 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v788 = operator new();
                    v789 = __src;
                    *(_QWORD *)v788 = *(_QWORD *)__src;
                    *(_QWORD *)(v788 + 8) = *(_QWORD *)(v789 + 8);
                    v790 = *(_QWORD *)(v789 + 16);
                    *(_QWORD *)(v788 + 16) = v790;
                    if (v790)
                    {
                      v791 = (unsigned int *)(v790 + 8);
                      do
                        v792 = __ldxr(v791);
                      while (__stxr(v792 + 1, v791));
                    }
                    v793 = *(_OWORD *)(v789 + 24);
                    v794 = *(_OWORD *)(v789 + 40);
                    *(_OWORD *)(v788 + 56) = *(_OWORD *)(v789 + 56);
                    *(_OWORD *)(v788 + 40) = v794;
                    *(_OWORD *)(v788 + 24) = v793;
                    *(_QWORD *)&__src = v788;
                    *(_QWORD *)v788 = 1;
                    do
                    {
                      v795 = __ldaxr((unint64_t *)v723);
                      v732 = --v795 == 0;
                    }
                    while (__stlxr(v795, (unint64_t *)v723));
                    goto LABEL_1118;
                  case 9:
                    v556 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v644 = (_QWORD *)operator new();
                    v645 = __src + 8;
                    *v644 = *(_QWORD *)__src;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v644 + 1, v645);
                    *(_QWORD *)&__src = v644;
                    *v644 = 1;
                    do
                    {
                      v646 = __ldaxr(v556);
                      v560 = --v646 == 0;
                    }
                    while (__stlxr(v646, v556));
                    goto LABEL_1001;
                  default:
                    goto LABEL_1437;
                }
              case 4:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1123;
                  case 2:
                    v524 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v525 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v525, __src);
                    *(_QWORD *)&__src = v525;
                    *v525 = 1;
                    do
                    {
                      v526 = __ldaxr((unint64_t *)v524);
                      v527 = --v526 == 0;
                    }
                    while (__stlxr(v526, (unint64_t *)v524));
                    goto LABEL_981;
                  case 3:
                    v548 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v549 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v549, __src);
                    *(_QWORD *)&__src = v549;
                    *v549 = 1;
                    do
                    {
                      v550 = __ldaxr(v548);
                      v551 = --v550 == 0;
                    }
                    while (__stlxr(v550, v548));
                    goto LABEL_874;
                  case 4:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v720 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v720, __src);
                    *(_QWORD *)&__src = v720;
                    *v720 = 1;
                    do
                    {
                      v721 = __ldaxr(v618);
                      v722 = --v721 == 0;
                    }
                    while (__stlxr(v721, v618));
                    goto LABEL_1108;
                  case 5:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v619 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v619, __src);
                    *(_QWORD *)&__src = v619;
                    *v619 = 1;
                    do
                    {
                      v620 = __ldaxr(v618);
                      v621 = --v620 == 0;
                    }
                    while (__stlxr(v620, v618));
                    goto LABEL_1066;
                  case 8:
                    v723 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v724 = operator new();
                    v725 = __src;
                    *(_QWORD *)v724 = *(_QWORD *)__src;
                    *(_QWORD *)(v724 + 8) = *(_QWORD *)(v725 + 8);
                    v726 = *(_QWORD *)(v725 + 16);
                    *(_QWORD *)(v724 + 16) = v726;
                    if (v726)
                    {
                      v727 = (unsigned int *)(v726 + 8);
                      do
                        v728 = __ldxr(v727);
                      while (__stxr(v728 + 1, v727));
                    }
                    v729 = *(_OWORD *)(v725 + 24);
                    v730 = *(_OWORD *)(v725 + 40);
                    *(_OWORD *)(v724 + 56) = *(_OWORD *)(v725 + 56);
                    *(_OWORD *)(v724 + 40) = v730;
                    *(_OWORD *)(v724 + 24) = v729;
                    *(_QWORD *)&__src = v724;
                    *(_QWORD *)v724 = 1;
                    do
                    {
                      v731 = __ldaxr((unint64_t *)v723);
                      v732 = --v731 == 0;
                    }
                    while (__stlxr(v731, (unint64_t *)v723));
                    goto LABEL_1118;
                  case 9:
                    v556 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v557 = (_QWORD *)operator new();
                    v558 = __src + 8;
                    *v557 = *(_QWORD *)__src;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v557 + 1, v558);
                    *(_QWORD *)&__src = v557;
                    *v557 = 1;
                    do
                    {
                      v559 = __ldaxr(v556);
                      v560 = --v559 == 0;
                    }
                    while (__stlxr(v559, v556));
                    goto LABEL_1001;
                  default:
                    goto LABEL_1437;
                }
              case 5:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1123;
                  case 2:
                    v524 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v542 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v542, __src);
                    *(_QWORD *)&__src = v542;
                    *v542 = 1;
                    do
                    {
                      v543 = __ldaxr((unint64_t *)v524);
                      v527 = --v543 == 0;
                    }
                    while (__stlxr(v543, (unint64_t *)v524));
                    goto LABEL_981;
                  case 3:
                    v548 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v622 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v622, __src);
                    *(_QWORD *)&__src = v622;
                    *v622 = 1;
                    do
                    {
                      v623 = __ldaxr(v548);
                      v551 = --v623 == 0;
                    }
                    while (__stlxr(v623, v548));
                    goto LABEL_874;
                  case 4:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v826 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v826, __src);
                    *(_QWORD *)&__src = v826;
                    *v826 = 1;
                    do
                    {
                      v827 = __ldaxr(v618);
                      v722 = --v827 == 0;
                    }
                    while (__stlxr(v827, v618));
                    goto LABEL_1108;
                  case 5:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v776 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v776, __src);
                    *(_QWORD *)&__src = v776;
                    *v776 = 1;
                    do
                    {
                      v777 = __ldaxr(v618);
                      v621 = --v777 == 0;
                    }
                    while (__stlxr(v777, v618));
                    goto LABEL_1066;
                  case 8:
                    v723 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v828 = operator new();
                    v829 = __src;
                    *(_QWORD *)v828 = *(_QWORD *)__src;
                    *(_QWORD *)(v828 + 8) = *(_QWORD *)(v829 + 8);
                    v830 = *(_QWORD *)(v829 + 16);
                    *(_QWORD *)(v828 + 16) = v830;
                    if (v830)
                    {
                      v831 = (unsigned int *)(v830 + 8);
                      do
                        v832 = __ldxr(v831);
                      while (__stxr(v832 + 1, v831));
                    }
                    v833 = *(_OWORD *)(v829 + 24);
                    v834 = *(_OWORD *)(v829 + 40);
                    *(_OWORD *)(v828 + 56) = *(_OWORD *)(v829 + 56);
                    *(_OWORD *)(v828 + 40) = v834;
                    *(_OWORD *)(v828 + 24) = v833;
                    *(_QWORD *)&__src = v828;
                    *(_QWORD *)v828 = 1;
                    do
                    {
                      v835 = __ldaxr((unint64_t *)v723);
                      v732 = --v835 == 0;
                    }
                    while (__stlxr(v835, (unint64_t *)v723));
                    goto LABEL_1118;
                  case 9:
                    v556 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v733 = (_QWORD *)operator new();
                    v734 = __src + 8;
                    *v733 = *(_QWORD *)__src;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v733 + 1, v734);
                    *(_QWORD *)&__src = v733;
                    *v733 = 1;
                    do
                    {
                      v735 = __ldaxr(v556);
                      v560 = --v735 == 0;
                    }
                    while (__stlxr(v735, v556));
                    goto LABEL_1001;
                  default:
                    goto LABEL_1437;
                }
              case 6:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1123;
                  case 2:
                    v524 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v544 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v544, __src);
                    *(_QWORD *)&__src = v544;
                    *v544 = 1;
                    do
                    {
                      v545 = __ldaxr((unint64_t *)v524);
                      v527 = --v545 == 0;
                    }
                    while (__stlxr(v545, (unint64_t *)v524));
                    goto LABEL_981;
                  case 3:
                    v548 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v642 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v642, __src);
                    *(_QWORD *)&__src = v642;
                    *v642 = 1;
                    do
                    {
                      v643 = __ldaxr(v548);
                      v551 = --v643 == 0;
                    }
                    while (__stlxr(v643, v548));
                    goto LABEL_874;
                  case 4:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v836 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v836, __src);
                    *(_QWORD *)&__src = v836;
                    *v836 = 1;
                    do
                    {
                      v837 = __ldaxr(v618);
                      v722 = --v837 == 0;
                    }
                    while (__stlxr(v837, v618));
                    goto LABEL_1108;
                  case 5:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v786 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v786, __src);
                    *(_QWORD *)&__src = v786;
                    *v786 = 1;
                    do
                    {
                      v787 = __ldaxr(v618);
                      v621 = --v787 == 0;
                    }
                    while (__stlxr(v787, v618));
                    goto LABEL_1066;
                  case 8:
                    v723 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v838 = operator new();
                    v839 = __src;
                    *(_QWORD *)v838 = *(_QWORD *)__src;
                    *(_QWORD *)(v838 + 8) = *(_QWORD *)(v839 + 8);
                    v840 = *(_QWORD *)(v839 + 16);
                    *(_QWORD *)(v838 + 16) = v840;
                    if (v840)
                    {
                      v841 = (unsigned int *)(v840 + 8);
                      do
                        v842 = __ldxr(v841);
                      while (__stxr(v842 + 1, v841));
                    }
                    v843 = *(_OWORD *)(v839 + 24);
                    v844 = *(_OWORD *)(v839 + 40);
                    *(_OWORD *)(v838 + 56) = *(_OWORD *)(v839 + 56);
                    *(_OWORD *)(v838 + 40) = v844;
                    *(_OWORD *)(v838 + 24) = v843;
                    *(_QWORD *)&__src = v838;
                    *(_QWORD *)v838 = 1;
                    do
                    {
                      v845 = __ldaxr((unint64_t *)v723);
                      v732 = --v845 == 0;
                    }
                    while (__stlxr(v845, (unint64_t *)v723));
                    goto LABEL_1118;
                  case 9:
                    v556 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v742 = (_QWORD *)operator new();
                    v743 = __src + 8;
                    *v742 = *(_QWORD *)__src;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v742 + 1, v743);
                    *(_QWORD *)&__src = v742;
                    *v742 = 1;
                    do
                    {
                      v744 = __ldaxr(v556);
                      v560 = --v744 == 0;
                    }
                    while (__stlxr(v744, v556));
                    goto LABEL_1001;
                  default:
                    goto LABEL_1437;
                }
              case 7:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1123;
                  case 2:
                    v524 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v540 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v540, __src);
                    *(_QWORD *)&__src = v540;
                    *v540 = 1;
                    do
                    {
                      v541 = __ldaxr((unint64_t *)v524);
                      v527 = --v541 == 0;
                    }
                    while (__stlxr(v541, (unint64_t *)v524));
                    goto LABEL_981;
                  case 3:
                    v548 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v573 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v573, __src);
                    *(_QWORD *)&__src = v573;
                    *v573 = 1;
                    do
                    {
                      v574 = __ldaxr(v548);
                      v551 = --v574 == 0;
                    }
                    while (__stlxr(v574, v548));
                    goto LABEL_874;
                  case 4:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v784 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v784, __src);
                    *(_QWORD *)&__src = v784;
                    *v784 = 1;
                    do
                    {
                      v785 = __ldaxr(v618);
                      v722 = --v785 == 0;
                    }
                    while (__stlxr(v785, v618));
                    goto LABEL_1108;
                  case 5:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v738 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v738, __src);
                    *(_QWORD *)&__src = v738;
                    *v738 = 1;
                    do
                    {
                      v739 = __ldaxr(v618);
                      v621 = --v739 == 0;
                    }
                    while (__stlxr(v739, v618));
                    goto LABEL_1066;
                  case 8:
                    v723 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v796 = operator new();
                    v797 = __src;
                    *(_QWORD *)v796 = *(_QWORD *)__src;
                    *(_QWORD *)(v796 + 8) = *(_QWORD *)(v797 + 8);
                    v798 = *(_QWORD *)(v797 + 16);
                    *(_QWORD *)(v796 + 16) = v798;
                    if (v798)
                    {
                      v799 = (unsigned int *)(v798 + 8);
                      do
                        v800 = __ldxr(v799);
                      while (__stxr(v800 + 1, v799));
                    }
                    v801 = *(_OWORD *)(v797 + 24);
                    v802 = *(_OWORD *)(v797 + 40);
                    *(_OWORD *)(v796 + 56) = *(_OWORD *)(v797 + 56);
                    *(_OWORD *)(v796 + 40) = v802;
                    *(_OWORD *)(v796 + 24) = v801;
                    *(_QWORD *)&__src = v796;
                    *(_QWORD *)v796 = 1;
                    do
                    {
                      v803 = __ldaxr((unint64_t *)v723);
                      v732 = --v803 == 0;
                    }
                    while (__stlxr(v803, (unint64_t *)v723));
                    goto LABEL_1118;
                  case 9:
                    v556 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v654 = (_QWORD *)operator new();
                    v655 = __src + 8;
                    *v654 = *(_QWORD *)__src;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v654 + 1, v655);
                    *(_QWORD *)&__src = v654;
                    *v654 = 1;
                    do
                    {
                      v656 = __ldaxr(v556);
                      v560 = --v656 == 0;
                    }
                    while (__stlxr(v656, v556));
                    goto LABEL_1001;
                  default:
                    goto LABEL_1437;
                }
              case 8:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1123;
                  case 2:
                    v524 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v546 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v546, __src);
                    *(_QWORD *)&__src = v546;
                    *v546 = 1;
                    do
                    {
                      v547 = __ldaxr((unint64_t *)v524);
                      v527 = --v547 == 0;
                    }
                    while (__stlxr(v547, (unint64_t *)v524));
                    goto LABEL_981;
                  case 3:
                    v548 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v647 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v647, __src);
                    *(_QWORD *)&__src = v647;
                    *v647 = 1;
                    do
                    {
                      v648 = __ldaxr(v548);
                      v551 = --v648 == 0;
                    }
                    while (__stlxr(v648, v548));
                    goto LABEL_874;
                  case 4:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v846 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v846, __src);
                    *(_QWORD *)&__src = v846;
                    *v846 = 1;
                    do
                    {
                      v847 = __ldaxr(v618);
                      v722 = --v847 == 0;
                    }
                    while (__stlxr(v847, v618));
                    goto LABEL_1108;
                  case 5:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v804 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v804, __src);
                    *(_QWORD *)&__src = v804;
                    *v804 = 1;
                    do
                    {
                      v805 = __ldaxr(v618);
                      v621 = --v805 == 0;
                    }
                    while (__stlxr(v805, v618));
                    goto LABEL_1066;
                  case 8:
                    v723 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v848 = operator new();
                    v849 = __src;
                    *(_QWORD *)v848 = *(_QWORD *)__src;
                    *(_QWORD *)(v848 + 8) = *(_QWORD *)(v849 + 8);
                    v850 = *(_QWORD *)(v849 + 16);
                    *(_QWORD *)(v848 + 16) = v850;
                    if (v850)
                    {
                      v851 = (unsigned int *)(v850 + 8);
                      do
                        v852 = __ldxr(v851);
                      while (__stxr(v852 + 1, v851));
                    }
                    v853 = *(_OWORD *)(v849 + 24);
                    v854 = *(_OWORD *)(v849 + 40);
                    *(_OWORD *)(v848 + 56) = *(_OWORD *)(v849 + 56);
                    *(_OWORD *)(v848 + 40) = v854;
                    *(_OWORD *)(v848 + 24) = v853;
                    *(_QWORD *)&__src = v848;
                    *(_QWORD *)v848 = 1;
                    do
                    {
                      v855 = __ldaxr((unint64_t *)v723);
                      v732 = --v855 == 0;
                    }
                    while (__stlxr(v855, (unint64_t *)v723));
                    goto LABEL_1118;
                  case 9:
                    v556 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v762 = (_QWORD *)operator new();
                    v763 = __src + 8;
                    *v762 = *(_QWORD *)__src;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v762 + 1, v763);
                    *(_QWORD *)&__src = v762;
                    *v762 = 1;
                    do
                    {
                      v764 = __ldaxr(v556);
                      v560 = --v764 == 0;
                    }
                    while (__stlxr(v764, v556));
LABEL_1001:
                    if (!v560)
                      goto LABEL_1123;
                    v650 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v556);
                    v765 = 2071181815;
                    goto LABEL_1121;
                  default:
                    goto LABEL_1437;
                }
              case 9:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1123;
                  case 2:
                    v524 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v528 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v528, __src);
                    *(_QWORD *)&__src = v528;
                    *v528 = 1;
                    do
                    {
                      v529 = __ldaxr((unint64_t *)v524);
                      v527 = --v529 == 0;
                    }
                    while (__stlxr(v529, (unint64_t *)v524));
LABEL_981:
                    if (!v527)
                      goto LABEL_1123;
                    if (*(char *)(v524 + 31) < 0)
                      operator delete(*(void **)(v524 + 8));
                    v650 = (_QWORD *)v524;
                    v651 = 0x1012C404EF22A49;
                    goto LABEL_1122;
                  case 3:
                    v548 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v552 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v552, __src);
                    *(_QWORD *)&__src = v552;
                    *v552 = 1;
                    do
                    {
                      v553 = __ldaxr(v548);
                      v551 = --v553 == 0;
                    }
                    while (__stlxr(v553, v548));
LABEL_874:
                    if (!v551)
                      goto LABEL_1123;
                    v649 = (void *)v548[1];
                    if (v649)
                    {
                      v548[2] = (unint64_t)v649;
                      operator delete(v649);
                    }
                    v650 = v548;
                    v651 = 0x1080C409938AC02;
                    goto LABEL_1122;
                  case 4:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v740 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v740, __src);
                    *(_QWORD *)&__src = v740;
                    *v740 = 1;
                    do
                    {
                      v741 = __ldaxr(v618);
                      v722 = --v741 == 0;
                    }
                    while (__stlxr(v741, v618));
LABEL_1108:
                    if (!v722)
                      goto LABEL_1123;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v618 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                    goto LABEL_1111;
                  case 5:
                    v618 = (unint64_t *)__src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v652 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v652, __src);
                    *(_QWORD *)&__src = v652;
                    *v652 = 1;
                    do
                    {
                      v653 = __ldaxr(v618);
                      v621 = --v653 == 0;
                    }
                    while (__stlxr(v653, v618));
LABEL_1066:
                    if (!v621)
                      goto LABEL_1123;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v618 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_1111:
                    v650 = v618;
                    v651 = 0x1020C405E66F15BLL;
                    goto LABEL_1122;
                  case 8:
                    v723 = __src;
                    if (*(_QWORD *)__src == 1)
                      goto LABEL_1123;
                    v754 = operator new();
                    v755 = __src;
                    *(_QWORD *)v754 = *(_QWORD *)__src;
                    *(_QWORD *)(v754 + 8) = *(_QWORD *)(v755 + 8);
                    v756 = *(_QWORD *)(v755 + 16);
                    *(_QWORD *)(v754 + 16) = v756;
                    if (v756)
                    {
                      v757 = (unsigned int *)(v756 + 8);
                      do
                        v758 = __ldxr(v757);
                      while (__stxr(v758 + 1, v757));
                    }
                    v759 = *(_OWORD *)(v755 + 24);
                    v760 = *(_OWORD *)(v755 + 40);
                    *(_OWORD *)(v754 + 56) = *(_OWORD *)(v755 + 56);
                    *(_OWORD *)(v754 + 40) = v760;
                    *(_OWORD *)(v754 + 24) = v759;
                    *(_QWORD *)&__src = v754;
                    *(_QWORD *)v754 = 1;
                    do
                    {
                      v761 = __ldaxr((unint64_t *)v723);
                      v732 = --v761 == 0;
                    }
                    while (__stlxr(v761, (unint64_t *)v723));
LABEL_1118:
                    if (!v732)
                      goto LABEL_1123;
                    boost::detail::shared_count::~shared_count((unsigned int **)(v723 + 16));
                    v650 = (_QWORD *)v723;
                    v765 = -235920773;
LABEL_1121:
                    v651 = v765 | 0x1030C4000000000;
LABEL_1122:
                    MEMORY[0x219A19A08](v650, v651);
LABEL_1123:
                    turi::flexible_type_fail(0);
                    goto LABEL_1124;
                  case 9:
                    v575 = *(double *)v518;
                    v576 = (unint64_t *)__src;
                    if (*(_QWORD *)__src != 1)
                    {
                      v577 = (_QWORD *)operator new();
                      v578 = __src + 8;
                      *v577 = *(_QWORD *)__src;
                      turi::flexible_type_impl::ndarray<double>::ndarray(v577 + 1, v578);
                      *(_QWORD *)&__src = v577;
                      *v577 = 1;
                      do
                      {
                        v579 = __ldaxr(v576);
                        v580 = v579 - 1;
                      }
                      while (__stlxr(v580, v576));
                      if (!v580)
                      {
                        v581 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v576);
                        MEMORY[0x219A19A08](v581, 0x1030C407B73B9F7);
                      }
                    }
                    v582 = __src;
                    v583 = (uint64_t *)(__src + 8);
                    if (!turi::flexible_type_impl::ndarray<double>::same_shape(__src + 8, *(_QWORD *)&v575 + 8))
                      turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                    v585 = *(uint64_t **)(v582 + 24);
                    v584 = *(uint64_t **)(v582 + 32);
                    if (v584 == v585)
                      goto LABEL_1124;
                    if (!*v583)
                      goto LABEL_1124;
                    v586 = 1;
                    do
                    {
                      v587 = *v585++;
                      v586 *= v587;
                    }
                    while (v585 != v584);
                    if (!v586)
                      goto LABEL_1124;
                    turi::flexible_type_impl::ndarray<double>::ensure_unique(v583);
                    v588 = (uint64_t)(*(_QWORD *)(v582 + 32) - *(_QWORD *)(v582 + 24)) >> 3;
                    v1106 = 0;
                    std::vector<unsigned long>::vector(&__p, v588, &v1106);
                    v589 = __p.__r_.__value_.__l.__size_;
                    v590 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                    break;
                  default:
                    goto LABEL_1437;
                }
                break;
              default:
                goto LABEL_1437;
            }
            while (1)
            {
              v591 = v589 - (_QWORD)v590;
              if (v591)
              {
                v592 = 0;
                v593 = v591 >> 3;
                v594 = *(uint64_t **)(*(_QWORD *)&v575 + 48);
                if (v593 <= 1)
                  v593 = 1;
                v595 = v590;
                v596 = v593;
                do
                {
                  v598 = *v595++;
                  v597 = v598;
                  v599 = *v594++;
                  v592 += v599 * v597;
                  --v596;
                }
                while (v596);
                v600 = 0;
                v601 = *(double *)(**(_QWORD **)(*(_QWORD *)&v575 + 8)
                                 + 8 * (*(_QWORD *)(*(_QWORD *)&v575 + 72) + v592));
                v602 = *(uint64_t **)(v582 + 48);
                do
                {
                  v604 = *v590++;
                  v603 = v604;
                  v605 = *v602++;
                  v600 += v605 * v603;
                  --v593;
                }
                while (v593);
              }
              else
              {
                v600 = 0;
                v601 = *(double *)(**(_QWORD **)(*(_QWORD *)&v575 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v575 + 72));
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v583);
              *(double *)(**(_QWORD **)(v582 + 8) + 8 * (*(_QWORD *)(v582 + 72) + v600)) = v601
                                                                                         + *(double *)(**(_QWORD **)(v582 + 8) + 8 * (*(_QWORD *)(v582 + 72) + v600));
              v589 = __p.__r_.__value_.__l.__size_;
              v590 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
              v606 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
              v607 = v606 - 1;
              if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >= 1)
              {
                v608 = *(_QWORD *)(v582 + 24);
                v609 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v607) + 1;
                *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v607) = v609;
                if (v609 >= *(_QWORD *)(v608 + 8 * v607))
                {
                  v610 = (unint64_t *)&v590[v606 - 2];
                  v611 = v608 - 16;
                  while (1)
                  {
                    v612 = v606 - 1;
                    v610[1] = 0;
                    if (v606 - 1 <= 0)
                      break;
                    v613 = *v610 + 1;
                    *v610-- = v613;
                    v614 = *(_QWORD *)(v611 + 8 * v606--);
                    if (v613 < v614)
                    {
                      v607 = v612 - 1;
                      goto LABEL_823;
                    }
                  }
LABEL_936:
                  if (v590)
                  {
LABEL_937:
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v590;
                    operator delete(v590);
                  }
LABEL_1124:
                  v856 = 0;
                  switch(BYTE12(__src))
                  {
                    case 0:
                      v856 = __src;
                      goto LABEL_1152;
                    case 1:
                      v856 = (uint64_t)*(double *)&__src;
                      goto LABEL_1152;
                    case 2:
                      v859 = __src;
                      v1106 = 0;
                      v860 = (char *)(__src + 8);
                      if (*(char *)(__src + 31) < 0)
                        v860 = *(char **)(__src + 8);
                      std::string::basic_string[abi:ne180100]<0>(&__p, v860);
                      v856 = std::stoll(&__p, &v1106, 10);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      if (*(char *)(v859 + 31) < 0)
                        v861 = *(_QWORD *)(v859 + 16);
                      else
                        v861 = *(unsigned __int8 *)(v859 + 31);
                      if (v1106 != v861)
                      {
                        v914 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::operator+<char>();
                        v915 = std::string::append(&v1105, " cannot be interpreted as an integer");
                        v916 = *(_OWORD *)&v915->__r_.__value_.__l.__data_;
                        __p.__r_.__value_.__r.__words[2] = v915->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v916;
                        v915->__r_.__value_.__l.__size_ = 0;
                        v915->__r_.__value_.__r.__words[2] = 0;
                        v915->__r_.__value_.__r.__words[0] = 0;
                        std::runtime_error::runtime_error(v914, &__p);
                        __cxa_throw(v914, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                      }
                      goto LABEL_1152;
                    case 3:
                      memset(&__p, 0, sizeof(__p));
                      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(__src + 8), *(_QWORD *)(__src + 16), (uint64_t)(*(_QWORD *)(__src + 16) - *(_QWORD *)(__src + 8)) >> 3);
                      turi::flexible_type_fail(0);
                      if (__p.__r_.__value_.__r.__words[0])
                      {
                        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      goto LABEL_1151;
                    case 4:
                      memset(&__p, 0, sizeof(__p));
                      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(__src + 8), *(uint64_t **)(__src + 16), (uint64_t)(*(_QWORD *)(__src + 16) - *(_QWORD *)(__src + 8)) >> 4);
                      turi::flexible_type_fail(0);
                      v1105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1105);
                      goto LABEL_1151;
                    case 5:
                      memset(&__p, 0, sizeof(__p));
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(__src + 8), *(uint64_t **)(__src + 16), (uint64_t)(*(_QWORD *)(__src + 16) - *(_QWORD *)(__src + 8)) >> 5);
                      turi::flexible_type_fail(0);
                      v1105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1105);
                      goto LABEL_1151;
                    case 6:
                      v856 = (uint64_t)((_QWORD)__src << 8) >> 8;
                      goto LABEL_1152;
                    case 7:
                      goto LABEL_1152;
                    case 8:
                      v862 = __src;
                      v863 = *(unsigned int **)(__src + 16);
                      v1101[0] = *(void **)(__src + 8);
                      v1101[1] = v863;
                      if (v863)
                      {
                        v864 = v863 + 2;
                        do
                          v865 = __ldxr(v864);
                        while (__stxr(v865 + 1, v864));
                      }
                      v866 = *(_OWORD *)(v862 + 24);
                      v867 = *(_OWORD *)(v862 + 56);
                      v1103 = *(_OWORD *)(v862 + 40);
                      v1104 = v867;
                      v1102 = v866;
                      turi::flexible_type_fail(0);
                      boost::detail::shared_count::~shared_count((unsigned int **)&v1101[1]);
                      goto LABEL_1151;
                    case 9:
                      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, __src + 8);
                      turi::flexible_type_fail(0);
                      if (v1112)
                      {
                        v1113 = v1112;
                        operator delete(v1112);
                      }
                      if (__p.__r_.__value_.__r.__words[2])
                      {
                        v1110 = (_QWORD *)__p.__r_.__value_.__r.__words[2];
                        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                      }
                      v856 = __p.__r_.__value_.__l.__size_;
                      if (!__p.__r_.__value_.__l.__size_)
                        goto LABEL_1152;
                      v857 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                      do
                        v858 = __ldaxr(v857);
                      while (__stlxr(v858 - 1, v857));
                      if (!v858)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v856 + 16))(v856);
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v856);
                      }
LABEL_1151:
                      v856 = 0;
LABEL_1152:
                      v1093 = v856;
                      switch(BYTE12(__src))
                      {
                        case 2:
                          v868 = (unint64_t *)__src;
                          do
                          {
                            v869 = __ldaxr(v868);
                            v870 = v869 - 1;
                          }
                          while (__stlxr(v870, v868));
                          if (!v870)
                          {
                            v871 = __src;
                            if ((_QWORD)__src)
                            {
                              if (*(char *)(__src + 31) < 0)
                                operator delete(*(void **)(__src + 8));
                              v872 = v871;
                              v873 = 0x1012C404EF22A49;
                              goto LABEL_1187;
                            }
                          }
                          break;
                        case 3:
                          v884 = (unint64_t *)__src;
                          do
                          {
                            v885 = __ldaxr(v884);
                            v886 = v885 - 1;
                          }
                          while (__stlxr(v886, v884));
                          if (!v886)
                          {
                            v887 = __src;
                            if ((_QWORD)__src)
                            {
                              v888 = *(void **)(__src + 8);
                              if (v888)
                              {
                                *(_QWORD *)(__src + 16) = v888;
                                operator delete(v888);
                              }
                              v872 = v887;
                              v873 = 0x1080C409938AC02;
                              goto LABEL_1187;
                            }
                          }
                          break;
                        case 4:
                          v874 = (unint64_t *)__src;
                          do
                          {
                            v875 = __ldaxr(v874);
                            v876 = v875 - 1;
                          }
                          while (__stlxr(v876, v874));
                          if (!v876)
                          {
                            v877 = __src;
                            if ((_QWORD)__src)
                            {
                              __p.__r_.__value_.__r.__words[0] = __src + 8;
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              goto LABEL_1186;
                            }
                          }
                          break;
                        case 5:
                          v889 = (unint64_t *)__src;
                          do
                          {
                            v890 = __ldaxr(v889);
                            v891 = v890 - 1;
                          }
                          while (__stlxr(v891, v889));
                          if (!v891)
                          {
                            v877 = __src;
                            if ((_QWORD)__src)
                            {
                              __p.__r_.__value_.__r.__words[0] = __src + 8;
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_1186:
                              v872 = v877;
                              v873 = 0x1020C405E66F15BLL;
                              goto LABEL_1187;
                            }
                          }
                          break;
                        case 8:
                          v892 = (unint64_t *)__src;
                          do
                          {
                            v893 = __ldaxr(v892);
                            v894 = v893 - 1;
                          }
                          while (__stlxr(v894, v892));
                          if (!v894)
                          {
                            v895 = __src;
                            if ((_QWORD)__src)
                            {
                              boost::detail::shared_count::~shared_count((unsigned int **)(__src + 16));
                              MEMORY[0x219A19A08](v895, 0x1030C40F1F0227BLL);
                            }
                            *(_QWORD *)&__src = 0;
                          }
                          break;
                        case 9:
                          v878 = (unint64_t *)__src;
                          do
                          {
                            v879 = __ldaxr(v878);
                            v880 = v879 - 1;
                          }
                          while (__stlxr(v880, v878));
                          if (!v880)
                          {
                            v881 = __src;
                            if ((_QWORD)__src)
                            {
                              v882 = *(void **)(__src + 48);
                              if (v882)
                              {
                                *(_QWORD *)(__src + 56) = v882;
                                operator delete(v882);
                              }
                              v883 = *(void **)(v881 + 24);
                              if (v883)
                              {
                                *(_QWORD *)(v881 + 32) = v883;
                                operator delete(v883);
                              }
                              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v881 + 8);
                              v872 = v881;
                              v873 = 0x1030C407B73B9F7;
LABEL_1187:
                              MEMORY[0x219A19A08](v872, v873);
                            }
                          }
                          break;
                        default:
                          break;
                      }
                      *(_QWORD *)&__src = 0;
                      DWORD2(__src) = 0;
                      BYTE12(__src) = 0;
                      if (v1088 < 0)
                        operator delete(v1087[0]);
                      if (SHIBYTE(v1090) < 0)
                        operator delete((void *)__idx[0]);
                      v1101[0] = 0;
                      v1101[1] = 0;
                      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v1101, v4);
                      *(_QWORD *)&v1102 = 0;
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1091;
                      v896 = std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::__emplace_unique_key_args<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::piecewise_construct_t const&,std::tuple<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id const&>,std::tuple<>>((uint64_t **)&v1094, (uint64_t *)&v1091, (uint64_t)&std::piecewise_construct, &__p);
                      v897 = v896[8];
                      v898 = v896[9];
                      if (v897 >= v898)
                      {
                        v903 = v896[7];
                        v904 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v897 - v903) >> 3);
                        v905 = v904 + 1;
                        if (v904 + 1 > 0xAAAAAAAAAAAAAAALL)
                          std::vector<float>::__throw_length_error[abi:ne180100]();
                        v906 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v898 - v903) >> 3);
                        if (2 * v906 > v905)
                          v905 = 2 * v906;
                        if (v906 >= 0x555555555555555)
                          v907 = 0xAAAAAAAAAAAAAAALL;
                        else
                          v907 = v905;
                        v1111 = v896 + 9;
                        if (v907)
                          v908 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(v896 + 9), v907);
                        else
                          v908 = 0;
                        v909 = (void **)&v908[3 * v904];
                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v908;
                        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v909;
                        v1110 = &v908[3 * v907];
                        *v909 = v1101[0];
                        v910 = (char *)v1101[1];
                        v909[1] = v1101[1];
                        if (v910)
                        {
                          v911 = (unint64_t *)(v910 + 8);
                          do
                            v912 = __ldxr(v911);
                          while (__stxr(v912 + 1, v911));
                        }
                        v908[3 * v904 + 2] = v1102;
                        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v909 + 3);
                        std::vector<turi::query_eval::execution_node::input_node>::__swap_out_circular_buffer(v896 + 7, &__p);
                        v902 = v896[8];
                        std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer((uint64_t)&__p);
                      }
                      else
                      {
                        *(void **)v897 = v1101[0];
                        v899 = (char *)v1101[1];
                        *(void **)(v897 + 8) = v1101[1];
                        if (v899)
                        {
                          v900 = (unint64_t *)(v899 + 8);
                          do
                            v901 = __ldxr(v900);
                          while (__stxr(v901 + 1, v900));
                        }
                        *(_QWORD *)(v897 + 16) = v1102;
                        v902 = v897 + 24;
                      }
                      v896[8] = v902;
                      v164 = (std::__shared_weak_count *)v1101[1];
                      if (!v1101[1])
                        goto LABEL_1221;
                      v913 = (unint64_t *)((char *)v1101[1] + 8);
                      do
                        v166 = __ldaxr(v913);
                      while (__stlxr(v166 - 1, v913));
                      break;
                    default:
                      goto LABEL_1437;
                  }
LABEL_1219:
                  if (!v166)
                  {
                    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                    std::__shared_weak_count::__release_weak(v164);
                  }
                  goto LABEL_1221;
                }
LABEL_823:
                v606 = 1;
              }
              if (v607 < 0 || !v606)
                goto LABEL_936;
            }
          }
        }
      case 6:
        std::string::basic_string[abi:ne180100]<0>(&__p, "sarray");
        v9 = turi::query_eval::node_info::any_p<turi::sframe>(v5, (uint64_t)&__p);
        v11 = *(void **)v9;
        v10 = *(unint64_t **)(v9 + 8);
        v1087[0] = *(void **)v9;
        v1087[1] = v10;
        if (v10)
        {
          v12 = v10 + 1;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v1091 = v11;
        v14 = (uint64_t *)*v4;
        std::string::basic_string[abi:ne180100]<0>(__idx, "begin_index");
        v15 = (_BYTE *)turi::query_eval::node_info::p(v14, (uint64_t)__idx);
        v16 = 0;
        switch(v15[12])
        {
          case 0:
            v16 = *(_QWORD *)v15;
            goto LABEL_118;
          case 1:
            v16 = (uint64_t)*(double *)v15;
            goto LABEL_118;
          case 2:
            v54 = *(_QWORD *)v15;
            v55 = (char **)(*(_QWORD *)v15 + 8);
            *(_QWORD *)&__src = 0;
            v56 = (char *)v55;
            if (*(char *)(v54 + 31) < 0)
              v56 = *v55;
            std::string::basic_string[abi:ne180100]<0>(&__p, v56);
            v16 = std::stoll(&__p, (size_t *)&__src, 10);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (*(char *)(v54 + 31) < 0)
              v57 = *(_QWORD *)(v54 + 16);
            else
              v57 = *(unsigned __int8 *)(v54 + 31);
            if ((_QWORD)__src != v57)
            {
              v1056 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v1057 = std::string::append(&v1105, " cannot be interpreted as an integer");
              v1058 = *(_OWORD *)&v1057->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v1057->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1058;
              v1057->__r_.__value_.__l.__size_ = 0;
              v1057->__r_.__value_.__r.__words[2] = 0;
              v1057->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v1056, &__p);
              __cxa_throw(v1056, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_118;
          case 3:
            v45 = *(_QWORD *)v15;
            memset(&__p, 0, sizeof(__p));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v45 + 8), *(_QWORD *)(v45 + 16), (uint64_t)(*(_QWORD *)(v45 + 16) - *(_QWORD *)(v45 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_117;
          case 4:
            v70 = *(_QWORD *)v15;
            memset(&__p, 0, sizeof(__p));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v70 + 8), *(uint64_t **)(v70 + 16), (uint64_t)(*(_QWORD *)(v70 + 16) - *(_QWORD *)(v70 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v1105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1105);
            goto LABEL_117;
          case 5:
            v71 = *(_QWORD *)v15;
            memset(&__p, 0, sizeof(__p));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v71 + 8), *(uint64_t **)(v71 + 16), (uint64_t)(*(_QWORD *)(v71 + 16) - *(_QWORD *)(v71 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v1105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1105);
            goto LABEL_117;
          case 6:
            v16 = (uint64_t)(*(_QWORD *)v15 << 8) >> 8;
            goto LABEL_118;
          case 7:
            goto LABEL_118;
          case 8:
            v72 = *(_QWORD *)v15;
            v73 = *(unsigned int **)(*(_QWORD *)v15 + 16);
            v1101[0] = *(void **)(*(_QWORD *)v15 + 8);
            v1101[1] = v73;
            if (v73)
            {
              v74 = v73 + 2;
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 1, v74));
            }
            v76 = *(_OWORD *)(v72 + 24);
            v77 = *(_OWORD *)(v72 + 56);
            v1103 = *(_OWORD *)(v72 + 40);
            v1104 = v77;
            v1102 = v76;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&v1101[1]);
            goto LABEL_117;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v15 + 8);
            turi::flexible_type_fail(0);
            if (v1112)
            {
              v1113 = v1112;
              operator delete(v1112);
            }
            if (__p.__r_.__value_.__r.__words[2])
            {
              v1110 = (_QWORD *)__p.__r_.__value_.__r.__words[2];
              operator delete((void *)__p.__r_.__value_.__r.__words[2]);
            }
            v16 = __p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_)
              goto LABEL_118;
            v46 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v16);
            }
LABEL_117:
            v16 = 0;
LABEL_118:
            v1092 = (std::__shared_weak_count *)v16;
            if (SHIBYTE(v1090) < 0)
              operator delete((void *)__idx[0]);
            v78 = (uint64_t *)*v4;
            std::string::basic_string[abi:ne180100]<0>(__idx, "end_index");
            v79 = (_BYTE *)turi::query_eval::node_info::p(v78, (uint64_t)__idx);
            v80 = 0;
            switch(v79[12])
            {
              case 0:
                v80 = *(_QWORD *)v79;
                goto LABEL_225;
              case 1:
                v80 = (uint64_t)*(double *)v79;
                goto LABEL_225;
              case 2:
                v132 = *(_QWORD *)v79;
                v133 = (char **)(*(_QWORD *)v79 + 8);
                *(_QWORD *)&__src = 0;
                v134 = (char *)v133;
                if (*(char *)(v132 + 31) < 0)
                  v134 = *v133;
                std::string::basic_string[abi:ne180100]<0>(&__p, v134);
                v80 = std::stoll(&__p, (size_t *)&__src, 10);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (*(char *)(v132 + 31) < 0)
                  v135 = *(_QWORD *)(v132 + 16);
                else
                  v135 = *(unsigned __int8 *)(v132 + 31);
                if ((_QWORD)__src != v135)
                {
                  v1059 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v1060 = std::string::append(&v1105, " cannot be interpreted as an integer");
                  v1061 = *(_OWORD *)&v1060->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v1060->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1061;
                  v1060->__r_.__value_.__l.__size_ = 0;
                  v1060->__r_.__value_.__r.__words[2] = 0;
                  v1060->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v1059, &__p);
                  __cxa_throw(v1059, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                goto LABEL_225;
              case 3:
                v129 = *(_QWORD *)v79;
                memset(&__p, 0, sizeof(__p));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v129 + 8), *(_QWORD *)(v129 + 16), (uint64_t)(*(_QWORD *)(v129 + 16) - *(_QWORD *)(v129 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                goto LABEL_224;
              case 4:
                v136 = *(_QWORD *)v79;
                memset(&__p, 0, sizeof(__p));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v136 + 8), *(uint64_t **)(v136 + 16), (uint64_t)(*(_QWORD *)(v136 + 16) - *(_QWORD *)(v136 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v1105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1105);
                goto LABEL_224;
              case 5:
                v137 = *(_QWORD *)v79;
                memset(&__p, 0, sizeof(__p));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v137 + 8), *(uint64_t **)(v137 + 16), (uint64_t)(*(_QWORD *)(v137 + 16) - *(_QWORD *)(v137 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v1105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1105);
                goto LABEL_224;
              case 6:
                v80 = (uint64_t)(*(_QWORD *)v79 << 8) >> 8;
                goto LABEL_225;
              case 7:
                goto LABEL_225;
              case 8:
                v138 = *(_QWORD *)v79;
                v139 = *(unsigned int **)(*(_QWORD *)v79 + 16);
                v1101[0] = *(void **)(*(_QWORD *)v79 + 8);
                v1101[1] = v139;
                if (v139)
                {
                  v140 = v139 + 2;
                  do
                    v141 = __ldxr(v140);
                  while (__stxr(v141 + 1, v140));
                }
                v142 = *(_OWORD *)(v138 + 24);
                v143 = *(_OWORD *)(v138 + 56);
                v1103 = *(_OWORD *)(v138 + 40);
                v1104 = v143;
                v1102 = v142;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((unsigned int **)&v1101[1]);
                goto LABEL_224;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v79 + 8);
                turi::flexible_type_fail(0);
                if (v1112)
                {
                  v1113 = v1112;
                  operator delete(v1112);
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v1110 = (_QWORD *)__p.__r_.__value_.__r.__words[2];
                  operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                }
                v80 = __p.__r_.__value_.__l.__size_;
                if (!__p.__r_.__value_.__l.__size_)
                  goto LABEL_225;
                v130 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v131 = __ldaxr(v130);
                while (__stlxr(v131 - 1, v130));
                if (!v131)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v80 + 16))(v80);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v80);
                }
LABEL_224:
                v80 = 0;
LABEL_225:
                v1093 = v80;
                if (SHIBYTE(v1090) < 0)
                  operator delete((void *)__idx[0]);
                v1101[0] = 0;
                v1101[1] = 0;
                std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v1101, v4);
                *(_QWORD *)&v1102 = 0;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1091;
                v144 = std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::__emplace_unique_key_args<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::piecewise_construct_t const&,std::tuple<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id const&>,std::tuple<>>((uint64_t **)&v1094, (uint64_t *)&v1091, (uint64_t)&std::piecewise_construct, &__p);
                v145 = v144[8];
                v146 = v144[9];
                if (v145 >= v146)
                {
                  v151 = v144[7];
                  v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145 - v151) >> 3);
                  v153 = v152 + 1;
                  if (v152 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v154 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - v151) >> 3);
                  if (2 * v154 > v153)
                    v153 = 2 * v154;
                  if (v154 >= 0x555555555555555)
                    v155 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v155 = v153;
                  v1111 = v144 + 9;
                  if (v155)
                    v156 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(v144 + 9), v155);
                  else
                    v156 = 0;
                  v157 = (void **)&v156[3 * v152];
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v156;
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v157;
                  v1110 = &v156[3 * v155];
                  *v157 = v1101[0];
                  v158 = (char *)v1101[1];
                  v157[1] = v1101[1];
                  if (v158)
                  {
                    v159 = (unint64_t *)(v158 + 8);
                    do
                      v160 = __ldxr(v159);
                    while (__stxr(v160 + 1, v159));
                  }
                  v156[3 * v152 + 2] = v1102;
                  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v157 + 3);
                  std::vector<turi::query_eval::execution_node::input_node>::__swap_out_circular_buffer(v144 + 7, &__p);
                  v150 = v144[8];
                  std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer((uint64_t)&__p);
                }
                else
                {
                  *(void **)v145 = v1101[0];
                  v147 = (char *)v1101[1];
                  *(void **)(v145 + 8) = v1101[1];
                  if (v147)
                  {
                    v148 = (unint64_t *)(v147 + 8);
                    do
                      v149 = __ldxr(v148);
                    while (__stxr(v149 + 1, v148));
                  }
                  *(_QWORD *)(v145 + 16) = v1102;
                  v150 = v145 + 24;
                }
                v144[8] = v150;
                v161 = (std::__shared_weak_count *)v1101[1];
                if (v1101[1])
                {
                  v162 = (unint64_t *)((char *)v1101[1] + 8);
                  do
                    v163 = __ldaxr(v162);
                  while (__stlxr(v163 - 1, v162));
                  if (!v163)
                  {
                    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                    std::__shared_weak_count::__release_weak(v161);
                  }
                }
                v164 = (std::__shared_weak_count *)v1087[1];
                if (!v1087[1])
                  goto LABEL_1221;
                v165 = (unint64_t *)((char *)v1087[1] + 8);
                do
                  v166 = __ldaxr(v165);
                while (__stlxr(v166 - 1, v165));
                break;
              default:
                goto LABEL_1437;
            }
            break;
          default:
            goto LABEL_1437;
        }
        goto LABEL_1219;
      case 7:
        std::string::basic_string[abi:ne180100]<0>(&v1091, "begin_index");
        v7 = (_BYTE *)turi::query_eval::node_info::p(v5, (uint64_t)&v1091);
        v8 = 0;
        switch(v7[12])
        {
          case 0:
            v8 = *(_QWORD *)v7;
            goto LABEL_50;
          case 1:
            v8 = (uint64_t)*(double *)v7;
            goto LABEL_50;
          case 2:
            v30 = *(_QWORD *)v7;
            v31 = (char **)(*(_QWORD *)v7 + 8);
            __idx[0] = 0;
            v32 = (char *)v31;
            if (*(char *)(v30 + 31) < 0)
              v32 = *v31;
            std::string::basic_string[abi:ne180100]<0>(&__p, v32);
            v8 = std::stoll(&__p, __idx, 10);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (*(char *)(v30 + 31) < 0)
              v33 = *(_QWORD *)(v30 + 16);
            else
              v33 = *(unsigned __int8 *)(v30 + 31);
            if (__idx[0] != v33)
            {
              v1053 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v1054 = std::string::append(&v1105, " cannot be interpreted as an integer");
              v1055 = *(_OWORD *)&v1054->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v1054->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1055;
              v1054->__r_.__value_.__l.__size_ = 0;
              v1054->__r_.__value_.__r.__words[2] = 0;
              v1054->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v1053, &__p);
              __cxa_throw(v1053, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_50;
          case 3:
            v26 = *(_QWORD *)v7;
            memset(&__p, 0, sizeof(__p));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v26 + 8), *(_QWORD *)(v26 + 16), (uint64_t)(*(_QWORD *)(v26 + 16) - *(_QWORD *)(v26 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_49;
          case 4:
            v34 = *(_QWORD *)v7;
            memset(&__p, 0, sizeof(__p));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v34 + 8), *(uint64_t **)(v34 + 16), (uint64_t)(*(_QWORD *)(v34 + 16) - *(_QWORD *)(v34 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v1105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1105);
            goto LABEL_49;
          case 5:
            v35 = *(_QWORD *)v7;
            memset(&__p, 0, sizeof(__p));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v35 + 8), *(uint64_t **)(v35 + 16), (uint64_t)(*(_QWORD *)(v35 + 16) - *(_QWORD *)(v35 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v1105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1105);
            goto LABEL_49;
          case 6:
            v8 = (uint64_t)(*(_QWORD *)v7 << 8) >> 8;
            goto LABEL_50;
          case 7:
            goto LABEL_50;
          case 8:
            v36 = *(_QWORD *)v7;
            v37 = *(unsigned int **)(*(_QWORD *)v7 + 16);
            v1101[0] = *(void **)(*(_QWORD *)v7 + 8);
            v1101[1] = v37;
            if (v37)
            {
              v38 = v37 + 2;
              do
                v39 = __ldxr(v38);
              while (__stxr(v39 + 1, v38));
            }
            v40 = *(_OWORD *)(v36 + 24);
            v41 = *(_OWORD *)(v36 + 56);
            v1103 = *(_OWORD *)(v36 + 40);
            v1104 = v41;
            v1102 = v40;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&v1101[1]);
            goto LABEL_49;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v7 + 8);
            turi::flexible_type_fail(0);
            if (v1112)
            {
              v1113 = v1112;
              operator delete(v1112);
            }
            if (__p.__r_.__value_.__r.__words[2])
            {
              v1110 = (_QWORD *)__p.__r_.__value_.__r.__words[2];
              operator delete((void *)__p.__r_.__value_.__r.__words[2]);
            }
            v27 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
LABEL_49:
            v8 = 0;
LABEL_50:
            if (SHIBYTE(v1093) < 0)
              operator delete(v1091);
            v42 = (uint64_t *)*v4;
            std::string::basic_string[abi:ne180100]<0>(&v1091, "end_index");
            v43 = (_BYTE *)turi::query_eval::node_info::p(v42, (uint64_t)&v1091);
            v44 = 0;
            switch(v43[12])
            {
              case 0:
                v44 = *(_QWORD *)v43;
                goto LABEL_163;
              case 1:
                v44 = (uint64_t)*(double *)v43;
                goto LABEL_163;
              case 2:
                v91 = *(_QWORD *)v43;
                v92 = (char **)(*(_QWORD *)v43 + 8);
                __idx[0] = 0;
                v93 = (char *)v92;
                if (*(char *)(v91 + 31) < 0)
                  v93 = *v92;
                std::string::basic_string[abi:ne180100]<0>(&__p, v93);
                v44 = std::stoll(&__p, __idx, 10);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (*(char *)(v91 + 31) < 0)
                  v94 = *(_QWORD *)(v91 + 16);
                else
                  v94 = *(unsigned __int8 *)(v91 + 31);
                if (__idx[0] != v94)
                {
                  v1062 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v1063 = std::string::append(&v1105, " cannot be interpreted as an integer");
                  v1064 = *(_OWORD *)&v1063->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v1063->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1064;
                  v1063->__r_.__value_.__l.__size_ = 0;
                  v1063->__r_.__value_.__r.__words[2] = 0;
                  v1063->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v1062, &__p);
                  __cxa_throw(v1062, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                goto LABEL_163;
              case 3:
                v87 = *(_QWORD *)v43;
                memset(&__p, 0, sizeof(__p));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v87 + 8), *(_QWORD *)(v87 + 16), (uint64_t)(*(_QWORD *)(v87 + 16) - *(_QWORD *)(v87 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                goto LABEL_162;
              case 4:
                v95 = *(_QWORD *)v43;
                memset(&__p, 0, sizeof(__p));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v95 + 8), *(uint64_t **)(v95 + 16), (uint64_t)(*(_QWORD *)(v95 + 16) - *(_QWORD *)(v95 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v1105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1105);
                goto LABEL_162;
              case 5:
                v96 = *(_QWORD *)v43;
                memset(&__p, 0, sizeof(__p));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v96 + 8), *(uint64_t **)(v96 + 16), (uint64_t)(*(_QWORD *)(v96 + 16) - *(_QWORD *)(v96 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v1105.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1105);
                goto LABEL_162;
              case 6:
                v44 = (uint64_t)(*(_QWORD *)v43 << 8) >> 8;
                goto LABEL_163;
              case 7:
                goto LABEL_163;
              case 8:
                v97 = *(_QWORD *)v43;
                v98 = *(unsigned int **)(*(_QWORD *)v43 + 16);
                v1101[0] = *(void **)(*(_QWORD *)v43 + 8);
                v1101[1] = v98;
                if (v98)
                {
                  v99 = v98 + 2;
                  do
                    v100 = __ldxr(v99);
                  while (__stxr(v100 + 1, v99));
                }
                v101 = *(_OWORD *)(v97 + 24);
                v102 = *(_OWORD *)(v97 + 56);
                v1103 = *(_OWORD *)(v97 + 40);
                v1104 = v102;
                v1102 = v101;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((unsigned int **)&v1101[1]);
                goto LABEL_162;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v43 + 8);
                turi::flexible_type_fail(0);
                if (v1112)
                {
                  v1113 = v1112;
                  operator delete(v1112);
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v1110 = (_QWORD *)__p.__r_.__value_.__r.__words[2];
                  operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                }
                v88 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                if (__p.__r_.__value_.__l.__size_)
                {
                  v89 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                  do
                    v90 = __ldaxr(v89);
                  while (__stlxr(v90 - 1, v89));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                    std::__shared_weak_count::__release_weak(v88);
                  }
                }
LABEL_162:
                v44 = 0;
LABEL_163:
                if (SHIBYTE(v1093) < 0)
                  operator delete(v1091);
                v103 = (uint64_t *)*v4;
                std::string::basic_string[abi:ne180100]<0>(v1101, "sframe");
                v104 = (const turi::sframe *)turi::query_eval::node_info::any_p<turi::sframe>(v103, (uint64_t)v1101);
                turi::sframe::sframe((turi::sframe *)&__p, v104);
                if (SBYTE7(v1102) < 0)
                  operator delete(v1101[0]);
                if (v1110)
                {
                  for (i = 0; i < (unint64_t)v1110; ++i)
                  {
                    turi::sframe::select_column((uint64_t)&__p, i, v1101);
                    v106 = (std::__shared_weak_count *)v1101[1];
                    v1105.__r_.__value_.__l.__data_ = (std::string::pointer)v1101[0];
                    if (v1101[1])
                    {
                      v107 = (unint64_t *)((char *)v1101[1] + 8);
                      do
                        v108 = __ldaxr(v107);
                      while (__stlxr(v108 - 1, v107));
                      if (!v108)
                      {
                        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                        std::__shared_weak_count::__release_weak(v106);
                      }
                    }
                    v1105.__r_.__value_.__l.__size_ = v8;
                    v1105.__r_.__value_.__r.__words[2] = v44;
                    v1091 = 0;
                    v1092 = 0;
                    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v1091, v4);
                    v1093 = i;
                    v1101[0] = &v1105;
                    v109 = std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::__emplace_unique_key_args<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::piecewise_construct_t const&,std::tuple<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id const&>,std::tuple<>>((uint64_t **)&v1094, (uint64_t *)&v1105, (uint64_t)&std::piecewise_construct, (_OWORD **)v1101);
                    v110 = (void **)v109[8];
                    v111 = v109[9];
                    if ((unint64_t)v110 >= v111)
                    {
                      v116 = v109[7];
                      v117 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v110 - v116) >> 3);
                      v118 = v117 + 1;
                      if (v117 + 1 > 0xAAAAAAAAAAAAAAALL)
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - v116) >> 3);
                      if (2 * v119 > v118)
                        v118 = 2 * v119;
                      if (v119 >= 0x555555555555555)
                        v120 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v120 = v118;
                      *(_QWORD *)&v1103 = v109 + 9;
                      if (v120)
                        v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(v109 + 9), v120);
                      else
                        v121 = 0;
                      v122 = (void **)&v121[24 * v117];
                      v1101[0] = v121;
                      v1101[1] = v122;
                      *((_QWORD *)&v1102 + 1) = &v121[24 * v120];
                      *v122 = v1091;
                      v123 = v1092;
                      v122[1] = v1092;
                      if (v123)
                      {
                        p_shared_owners = (unint64_t *)&v123->__shared_owners_;
                        do
                          v125 = __ldxr(p_shared_owners);
                        while (__stxr(v125 + 1, p_shared_owners));
                      }
                      *(_QWORD *)&v121[24 * v117 + 16] = v1093;
                      *(_QWORD *)&v1102 = v122 + 3;
                      std::vector<turi::query_eval::execution_node::input_node>::__swap_out_circular_buffer(v109 + 7, v1101);
                      v115 = (_QWORD *)v109[8];
                      std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer((uint64_t)v1101);
                    }
                    else
                    {
                      *v110 = v1091;
                      v112 = v1092;
                      v110[1] = v1092;
                      if (v112)
                      {
                        v113 = (unint64_t *)&v112->__shared_owners_;
                        do
                          v114 = __ldxr(v113);
                        while (__stxr(v114 + 1, v113));
                      }
                      v110[2] = (void *)v1093;
                      v115 = v110 + 3;
                    }
                    v109[8] = v115;
                    v126 = v1092;
                    if (v1092)
                    {
                      v127 = (unint64_t *)&v1092->__shared_owners_;
                      do
                        v128 = __ldaxr(v127);
                      while (__stlxr(v128 - 1, v127));
                      if (!v128)
                      {
                        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                        std::__shared_weak_count::__release_weak(v126);
                      }
                    }
                  }
                }
                turi::sframe::~sframe((turi::sframe *)&__p);
                goto LABEL_1221;
              default:
                goto LABEL_1437;
            }
          default:
            break;
        }
LABEL_1437:
        result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
LABEL_1221:
    v4 += 2;
  }
  while (v4 != v1068);
  v917 = (uint64_t *)v1094;
  if (v1094 == v1095)
  {
LABEL_1314:
    v918 = 0;
    goto LABEL_1315;
  }
  v918 = 0;
  while (1)
  {
    *(_OWORD *)v1101 = *((_OWORD *)v917 + 2);
    v919 = (_QWORD *)v917[7];
    v1102 = (unint64_t)v917[6];
    v1103 = 0uLL;
    std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>::__init_with_size[abi:ne180100]<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>((char *)&v1102 + 8, v919, (_QWORD *)v917[8], 0xAAAAAAAAAAAAAAABLL * ((v917[8] - (uint64_t)v919) >> 3));
    v921 = (turi::query_eval::node_info **)*((_QWORD *)&v1102 + 1);
    v920 = (turi::query_eval::node_info **)v1103;
    if ((_QWORD)v1103 - *((_QWORD *)&v1102 + 1) == 24)
      goto LABEL_1307;
    if (*((_QWORD *)&v1102 + 1) == (_QWORD)v1103)
      goto LABEL_1286;
    v922 = 0;
    v923 = 0;
    do
    {
      v924 = *((_DWORD *)*v921 + 4);
      if (v924 == 5)
      {
        ++v922;
      }
      else if (v924 == 7 && turi::query_eval::node_info::num_columns(*v921) != 1)
      {
        ++v923;
      }
      v921 += 3;
    }
    while (v921 != v920);
    if (!v922)
      break;
    v925 = (uint64_t **)*((_QWORD *)&v1102 + 1);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1103 - *((_QWORD *)&v1102 + 1)) >> 3) >= 2)
    {
      v979 = *(std::__shared_weak_count **)(*((_QWORD *)&v1102 + 1) + 32);
      v1085 = *(uint64_t **)(*((_QWORD *)&v1102 + 1) + 24);
      v1086 = v979;
      if (v979)
      {
        v980 = (unint64_t *)&v979->__shared_owners_;
        do
          v981 = __ldxr(v980);
        while (__stxr(v981 + 1, v980));
        v925 = (uint64_t **)*((_QWORD *)&v1102 + 1);
      }
      v982 = *v925;
      v984 = *v982;
      v983 = (std::__shared_weak_count *)v982[1];
      v1083 = v984;
      v1084 = v983;
      if (v983)
      {
        v985 = (unint64_t *)&v983->__shared_owners_;
        do
          v986 = __ldxr(v985);
        while (__stxr(v986 + 1, v985));
      }
      turi::query_eval::optimization_engine::replace_node(a2, &v1085, &v1083);
      v987 = v1084;
      if (v1084)
      {
        v988 = (unint64_t *)&v1084->__shared_owners_;
        do
          v989 = __ldaxr(v988);
        while (__stlxr(v989 - 1, v988));
        if (!v989)
        {
          ((void (*)(std::__shared_weak_count *))v987->__on_zero_shared)(v987);
          std::__shared_weak_count::__release_weak(v987);
        }
      }
      v990 = v1086;
      if (v1086)
      {
        v991 = (unint64_t *)&v1086->__shared_owners_;
        do
          v992 = __ldaxr(v991);
        while (__stlxr(v992 - 1, v991));
        if (!v992)
        {
          ((void (*)(std::__shared_weak_count *))v990->__on_zero_shared)(v990);
          std::__shared_weak_count::__release_weak(v990);
        }
      }
      goto LABEL_1431;
    }
LABEL_1307:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1102 + 8;
    std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v976 = (char *)v917[1];
    if (v976)
    {
      do
      {
        v977 = (char **)v976;
        v976 = *(char **)v976;
      }
      while (v976);
    }
    else
    {
      do
      {
        v977 = (char **)v917[2];
        v22 = *v977 == (char *)v917;
        v917 = (uint64_t *)v977;
      }
      while (!v22);
    }
    v917 = (uint64_t *)v977;
    if (v977 == v1095)
      goto LABEL_1315;
  }
  if (!v923)
  {
LABEL_1286:
    v959 = (uint64_t **)*((_QWORD *)&v1102 + 1);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1103 - *((_QWORD *)&v1102 + 1)) >> 3) >= 2)
    {
      v960 = 1;
      do
      {
        v961 = &v959[3 * v960];
        v1081 = *v961;
        v962 = (std::__shared_weak_count *)v961[1];
        v1082 = v962;
        if (v962)
        {
          v963 = (unint64_t *)&v962->__shared_owners_;
          do
            v964 = __ldxr(v963);
          while (__stxr(v964 + 1, v963));
          v959 = (uint64_t **)*((_QWORD *)&v1102 + 1);
        }
        v965 = *v959;
        v967 = *v965;
        v966 = (std::__shared_weak_count *)v965[1];
        v1079 = v967;
        v1080 = v966;
        if (v966)
        {
          v968 = (unint64_t *)&v966->__shared_owners_;
          do
            v969 = __ldxr(v968);
          while (__stxr(v969 + 1, v968));
        }
        turi::query_eval::optimization_engine::replace_node(a2, &v1081, &v1079);
        v970 = v1080;
        if (v1080)
        {
          v971 = (unint64_t *)&v1080->__shared_owners_;
          do
            v972 = __ldaxr(v971);
          while (__stlxr(v972 - 1, v971));
          if (!v972)
          {
            ((void (*)(std::__shared_weak_count *))v970->__on_zero_shared)(v970);
            std::__shared_weak_count::__release_weak(v970);
          }
        }
        v973 = v1082;
        if (v1082)
        {
          v974 = (unint64_t *)&v1082->__shared_owners_;
          do
            v975 = __ldaxr(v974);
          while (__stlxr(v975 - 1, v974));
          if (!v975)
          {
            ((void (*)(std::__shared_weak_count *))v973->__on_zero_shared)(v973);
            std::__shared_weak_count::__release_weak(v973);
          }
        }
        ++v960;
        v959 = (uint64_t **)*((_QWORD *)&v1102 + 1);
      }
      while (v960 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1103 - *((_QWORD *)&v1102 + 1)) >> 3));
    }
LABEL_1306:
    v918 = 1;
    goto LABEL_1307;
  }
  if (v923 == 1)
  {
    v926 = *((_QWORD *)&v1102 + 1);
    v927 = v1103;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1103 - *((_QWORD *)&v1102 + 1)) >> 3) >= 2)
    {
      v928 = 24;
      v929 = 1;
      do
      {
        v930 = *(turi::query_eval::node_info **)(v926 + v928);
        if (*((_DWORD *)v930 + 4) == 7)
        {
          v931 = turi::query_eval::node_info::num_columns(v930);
          v926 = *((_QWORD *)&v1102 + 1);
          if (v931 > 1)
            goto LABEL_1250;
          v927 = v1103;
        }
        ++v929;
        v928 += 24;
      }
      while (v929 < 0xAAAAAAAAAAAAAAABLL * ((v927 - v926) >> 3));
    }
    v929 = 0;
LABEL_1250:
    v932 = *(uint64_t **)(v926 + 24 * v929);
    v934 = *v932;
    v933 = (std::__shared_weak_count *)v932[1];
    v1077 = v934;
    v1078 = v933;
    if (v933)
    {
      v935 = (unint64_t *)&v933->__shared_owners_;
      do
        v936 = __ldxr(v935);
      while (__stxr(v936 + 1, v935));
      v926 = *((_QWORD *)&v1102 + 1);
    }
    v937 = *(_QWORD *)(v926 + 24 * v929 + 16);
    v938 = operator new(8uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v938;
    *v938 = v937;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v938 + 1);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v938 + 1);
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v1077, (uint64_t **)&__p, &v1105);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v939 = v1078;
    if (v1078)
    {
      v940 = (unint64_t *)&v1078->__shared_owners_;
      do
        v941 = __ldaxr(v940);
      while (__stlxr(v941 - 1, v940));
      if (!v941)
      {
        ((void (*)(std::__shared_weak_count *))v939->__on_zero_shared)(v939);
        std::__shared_weak_count::__release_weak(v939);
      }
    }
    v942 = *((_QWORD *)&v1102 + 1);
    if ((_QWORD)v1103 != *((_QWORD *)&v1102 + 1))
    {
      v943 = 0;
      do
      {
        if (v943 != v929)
        {
          v944 = v942 + 24 * v943;
          v1075 = *(uint64_t **)v944;
          v945 = *(std::__shared_weak_count **)(v944 + 8);
          v1076 = v945;
          if (v945)
          {
            v946 = (unint64_t *)&v945->__shared_owners_;
            do
              v947 = __ldxr(v946);
            while (__stxr(v947 + 1, v946));
          }
          v1074 = *(_OWORD *)&v1105.__r_.__value_.__l.__data_;
          if (v1105.__r_.__value_.__l.__size_)
          {
            v948 = (unint64_t *)(v1105.__r_.__value_.__l.__size_ + 8);
            do
              v949 = __ldxr(v948);
            while (__stxr(v949 + 1, v948));
          }
          turi::query_eval::optimization_engine::replace_node(a2, &v1075, (uint64_t *)&v1074);
          v950 = (std::__shared_weak_count *)*((_QWORD *)&v1074 + 1);
          if (*((_QWORD *)&v1074 + 1))
          {
            v951 = (unint64_t *)(*((_QWORD *)&v1074 + 1) + 8);
            do
              v952 = __ldaxr(v951);
            while (__stlxr(v952 - 1, v951));
            if (!v952)
            {
              ((void (*)(std::__shared_weak_count *))v950->__on_zero_shared)(v950);
              std::__shared_weak_count::__release_weak(v950);
            }
          }
          v953 = v1076;
          if (v1076)
          {
            v954 = (unint64_t *)&v1076->__shared_owners_;
            do
              v955 = __ldaxr(v954);
            while (__stlxr(v955 - 1, v954));
            if (!v955)
            {
              ((void (*)(std::__shared_weak_count *))v953->__on_zero_shared)(v953);
              std::__shared_weak_count::__release_weak(v953);
            }
          }
        }
        ++v943;
        v942 = *((_QWORD *)&v1102 + 1);
      }
      while (v943 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1103 - *((_QWORD *)&v1102 + 1)) >> 3));
    }
    v956 = (std::__shared_weak_count *)v1105.__r_.__value_.__l.__size_;
    if (v1105.__r_.__value_.__l.__size_)
    {
      v957 = (unint64_t *)(v1105.__r_.__value_.__l.__size_ + 8);
      do
        v958 = __ldaxr(v957);
      while (__stlxr(v958 - 1, v957));
      if (!v958)
      {
        ((void (*)(std::__shared_weak_count *))v956->__on_zero_shared)(v956);
        std::__shared_weak_count::__release_weak(v956);
      }
    }
    goto LABEL_1306;
  }
  *(_OWORD *)&v1105.__r_.__value_.__r.__words[1] = 0uLL;
  v1105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1105.__r_.__value_.__l.__size_;
  std::vector<std::vector<unsigned long>>::vector(&v1091, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1103 - *((_QWORD *)&v1102 + 1)) >> 3));
  v993 = a2;
  __idx[0] = 0;
  __idx[1] = 0;
  v1090 = 0;
  v994 = *((_QWORD *)&v1102 + 1);
  if ((_QWORD)v1103 != *((_QWORD *)&v1102 + 1))
  {
    v995 = 0;
    do
    {
      v996 = *(_QWORD *)(v994 + 24 * v995);
      v997 = *(_DWORD *)(v996 + 16);
      if (v997 == 6)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "sarray");
        v1012 = (void **)turi::query_eval::node_info::any_p<turi::sframe>((uint64_t *)v996, (uint64_t)&__p);
        v1013 = *v1012;
        v1014 = (unint64_t *)v1012[1];
        v1087[0] = *v1012;
        v1087[1] = v1014;
        if (v1014)
        {
          v1015 = v1014 + 1;
          do
            v1016 = __ldxr(v1015);
          while (__stxr(v1016 + 1, v1015));
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          v1013 = v1087[0];
        }
        v1017 = (std::string *)v1105.__r_.__value_.__l.__size_;
        p_size = &v1105.__r_.__value_.__l.__size_;
        if (!v1105.__r_.__value_.__l.__size_)
          goto LABEL_1380;
        v1019 = (std::string *)&v1105.__r_.__value_.__r.__words[1];
        do
        {
          v1020 = v1017;
          v1021 = v1019;
          v1022 = v1017[1].__r_.__value_.__l.__size_;
          if (v1022 >= (unint64_t)v1013)
            v1019 = v1017;
          else
            v1017 = (std::string *)((char *)v1017 + 8);
          v1017 = (std::string *)v1017->__r_.__value_.__r.__words[0];
        }
        while (v1017);
        p_size = &v1105.__r_.__value_.__l.__size_;
        if (v1019 != (std::string *)&v1105.__r_.__value_.__r.__words[1]
          && (v1022 >= (unint64_t)v1013 ? (v1023 = v1020) : (v1023 = v1021),
              p_size = (std::string::size_type *)v1019,
              (void *)v1023[1].__r_.__value_.__l.__size_ == v1013))
        {
          if (v1022 >= (unint64_t)v1013)
            v1028 = v1020;
          else
            v1028 = v1021;
          v1024 = v1028[1].__r_.__value_.__r.__words[2];
        }
        else
        {
LABEL_1380:
          v1024 = v1105.__r_.__value_.__r.__words[2];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v1013;
          __p.__r_.__value_.__l.__size_ = v1105.__r_.__value_.__r.__words[2];
          std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>((uint64_t **)&v1105, p_size, (unint64_t *)&__p, &__p);
          std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)__idx, (__int128 *)v1087);
        }
        *(_QWORD *)&__src = v1024;
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v1091 + 24 * v995, (char *)&__src, (uint64_t)&__src + 8, 1uLL);
        v1025 = (std::__shared_weak_count *)v1087[1];
        if (v1087[1])
        {
          v1026 = (unint64_t *)((char *)v1087[1] + 8);
          do
            v1027 = __ldaxr(v1026);
          while (__stlxr(v1027 - 1, v1026));
          if (!v1027)
          {
            ((void (*)(std::__shared_weak_count *))v1025->__on_zero_shared)(v1025);
            std::__shared_weak_count::__release_weak(v1025);
          }
        }
      }
      else if (v997 == 7)
      {
        std::string::basic_string[abi:ne180100]<0>(v1087, "sframe");
        v998 = (const turi::sframe *)turi::query_eval::node_info::any_p<turi::sframe>((uint64_t *)v996, (uint64_t)v1087);
        turi::sframe::sframe((turi::sframe *)&__p, v998);
        if (v1088 < 0)
          operator delete(v1087[0]);
        std::vector<unsigned long>::resize((uint64_t)v1091 + 24 * v995, (unint64_t)v1110);
        if (v1110)
        {
          for (j = 0; j < (unint64_t)v1110; ++j)
          {
            turi::sframe::select_column((uint64_t)&__p, j, &__src);
            v1000 = (std::string *)v1105.__r_.__value_.__l.__size_;
            v1001 = &v1105.__r_.__value_.__l.__size_;
            if (!v1105.__r_.__value_.__l.__size_)
              goto LABEL_1352;
            v1002 = (std::string *)&v1105.__r_.__value_.__r.__words[1];
            do
            {
              v1003 = v1000;
              v1004 = v1002;
              v1005 = v1000[1].__r_.__value_.__l.__size_;
              if (v1005 >= (unint64_t)__src)
                v1002 = v1000;
              else
                v1000 = (std::string *)((char *)v1000 + 8);
              v1000 = (std::string *)v1000->__r_.__value_.__r.__words[0];
            }
            while (v1000);
            v1001 = &v1105.__r_.__value_.__l.__size_;
            if (v1002 != (std::string *)&v1105.__r_.__value_.__r.__words[1]
              && (v1005 >= (unint64_t)__src ? (v1006 = v1003) : (v1006 = v1004),
                  v1001 = (std::string::size_type *)v1002,
                  v1006[1].__r_.__value_.__l.__size_ == (_QWORD)__src))
            {
              if (v1005 >= (unint64_t)__src)
                v1011 = v1003;
              else
                v1011 = v1004;
              v1007 = v1011[1].__r_.__value_.__r.__words[2];
            }
            else
            {
LABEL_1352:
              v1007 = v1105.__r_.__value_.__r.__words[2];
              v1087[0] = (void *)__src;
              v1087[1] = (void *)v1105.__r_.__value_.__r.__words[2];
              std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>((uint64_t **)&v1105, v1001, (unint64_t *)v1087, v1087);
              std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)__idx, &__src);
            }
            *(_QWORD *)(*((_QWORD *)v1091 + 3 * v995) + 8 * j) = v1007;
            v1008 = (std::__shared_weak_count *)*((_QWORD *)&__src + 1);
            if (*((_QWORD *)&__src + 1))
            {
              v1009 = (unint64_t *)(*((_QWORD *)&__src + 1) + 8);
              do
                v1010 = __ldaxr(v1009);
              while (__stlxr(v1010 - 1, v1009));
              if (!v1010)
              {
                ((void (*)(std::__shared_weak_count *))v1008->__on_zero_shared)(v1008);
                std::__shared_weak_count::__release_weak(v1008);
              }
            }
            v993 = a2;
          }
        }
        turi::sframe::~sframe((turi::sframe *)&__p);
      }
      ++v995;
      v994 = *((_QWORD *)&v1102 + 1);
    }
    while (v995 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1103 - *((_QWORD *)&v1102 + 1)) >> 3));
  }
  memset(&__p, 0, sizeof(__p));
  turi::sframe::sframe((uint64_t)v1107, (uint64_t **)__idx, (const void ***)&__p, 1);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node((uint64_t)v1107, v1101[1], v1102, v1087);
  turi::sframe::~sframe((turi::sframe *)v1107);
  *(_QWORD *)&__src = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
  if ((_QWORD)v1103 != *((_QWORD *)&v1102 + 1))
  {
    v1029 = 0;
    do
    {
      v1072 = v1087[0];
      v1073 = (std::__shared_weak_count *)v1087[1];
      if (v1087[1])
      {
        v1030 = (unint64_t *)((char *)v1087[1] + 8);
        do
          v1031 = __ldxr(v1030);
        while (__stxr(v1031 + 1, v1030));
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t *)&v1072, (uint64_t **)v1091 + 3 * v1029, &__p);
      v1032 = v1073;
      if (v1073)
      {
        v1033 = (unint64_t *)&v1073->__shared_owners_;
        do
          v1034 = __ldaxr(v1033);
        while (__stlxr(v1034 - 1, v1033));
        if (!v1034)
        {
          ((void (*)(std::__shared_weak_count *))v1032->__on_zero_shared)(v1032);
          std::__shared_weak_count::__release_weak(v1032);
        }
      }
      v1035 = *((_QWORD *)&v1102 + 1) + 24 * v1029;
      v1070 = *(uint64_t **)v1035;
      v1036 = *(std::__shared_weak_count **)(v1035 + 8);
      v1071 = v1036;
      if (v1036)
      {
        v1037 = (unint64_t *)&v1036->__shared_owners_;
        do
          v1038 = __ldxr(v1037);
        while (__stxr(v1038 + 1, v1037));
      }
      v1069 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v1039 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v1040 = __ldxr(v1039);
        while (__stxr(v1040 + 1, v1039));
      }
      turi::query_eval::optimization_engine::replace_node(v993, &v1070, (uint64_t *)&v1069);
      v1041 = (std::__shared_weak_count *)*((_QWORD *)&v1069 + 1);
      if (*((_QWORD *)&v1069 + 1))
      {
        v1042 = (unint64_t *)(*((_QWORD *)&v1069 + 1) + 8);
        do
          v1043 = __ldaxr(v1042);
        while (__stlxr(v1043 - 1, v1042));
        if (!v1043)
        {
          ((void (*)(std::__shared_weak_count *))v1041->__on_zero_shared)(v1041);
          std::__shared_weak_count::__release_weak(v1041);
        }
      }
      v1044 = v1071;
      if (v1071)
      {
        v1045 = (unint64_t *)&v1071->__shared_owners_;
        do
          v1046 = __ldaxr(v1045);
        while (__stlxr(v1046 - 1, v1045));
        if (!v1046)
        {
          ((void (*)(std::__shared_weak_count *))v1044->__on_zero_shared)(v1044);
          std::__shared_weak_count::__release_weak(v1044);
        }
      }
      v1047 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v1048 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v1049 = __ldaxr(v1048);
        while (__stlxr(v1049 - 1, v1048));
        if (!v1049)
        {
          ((void (*)(std::__shared_weak_count *))v1047->__on_zero_shared)(v1047);
          std::__shared_weak_count::__release_weak(v1047);
        }
      }
      ++v1029;
    }
    while (v1029 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1103 - *((_QWORD *)&v1102 + 1)) >> 3));
  }
  v1050 = (std::__shared_weak_count *)v1087[1];
  if (v1087[1])
  {
    v1051 = (unint64_t *)((char *)v1087[1] + 8);
    do
      v1052 = __ldaxr(v1051);
    while (__stlxr(v1052 - 1, v1051));
    if (!v1052)
    {
      ((void (*)(std::__shared_weak_count *))v1050->__on_zero_shared)(v1050);
      std::__shared_weak_count::__release_weak(v1050);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)__idx;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1091;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v1105, (_QWORD *)v1105.__r_.__value_.__l.__size_);
LABEL_1431:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1102 + 8;
  std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v918 = 1;
LABEL_1315:
  std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::destroy((uint64_t)&v1094, v1095[0]);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v1096, v1097[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1098;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v918 & 1;
}

void sub_21810DFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a66;

  turi::sframe::~sframe((turi::sframe *)&a66);
  STACK[0x2F0] = (unint64_t)&STACK[0x300];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  STACK[0x2F0] = (unint64_t)&a38;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  a38 = &a41;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a62, (_QWORD *)a63);
  std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::destroy((uint64_t)&a44, (char *)a45);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a47, (_QWORD *)a48);
  a62 = &a50;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  _Unwind_Resume(a1);
}

void turi::query_eval::opt_merge_all_same_sarrays::fill_source_sets(uint64_t a1, __int128 *a2, uint64_t a3, char **a4)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;

  v8 = *(_QWORD *)a2;
  v9 = (_QWORD *)(a3 + 8);
  v10 = *(_QWORD **)(a3 + 8);
  if (!v10)
    goto LABEL_12;
  v11 = (_QWORD *)(a3 + 8);
  do
  {
    v12 = v10[4];
    v13 = v12 >= v8;
    if (v12 >= v8)
      v14 = v10;
    else
      v14 = v10 + 1;
    if (v13)
      v11 = v10;
    v10 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 == v9 || (v9 = v11, v11[4] != v8))
  {
LABEL_12:
    v23 = v8;
    std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)a3, v9, &v23, (uint64_t *)&v23);
    if (turi::query_eval::is_source_node((unsigned __int8 *)(*(_QWORD *)a2 + 24)))
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](a4, a2);
    v15 = *(uint64_t **)(*(_QWORD *)a2 + 40);
    v16 = *(uint64_t **)(*(_QWORD *)a2 + 48);
    while (v15 != v16)
    {
      v17 = v15[1];
      v23 = *v15;
      v24 = (std::__shared_weak_count *)v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      turi::query_eval::opt_merge_all_same_sarrays::fill_source_sets(a1, &v23, a3, a4);
      v20 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v15 += 2;
    }
  }
}

void sub_21810EEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::__emplace_unique_key_args<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::piecewise_construct_t const&,std::tuple<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::__find_equal<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v9 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v9;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::__find_equal<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v7 = a3[1];
    v6 = a3[2];
    v8 = *a3;
    while (1)
    {
      while (1)
      {
        v9 = v4;
        v10 = v4[4];
        if (v8 >= v10)
          break;
LABEL_4:
        v4 = (_QWORD *)*v9;
        result = v9;
        if (!*v9)
          goto LABEL_20;
      }
      if (v10 >= v8)
      {
        v11 = v9[5];
        if (v7 < v11)
          goto LABEL_4;
        v12 = v9[6];
        if (v11 >= v7 && v6 < v12)
          goto LABEL_4;
        if (v11 >= v7 && (v7 < v11 || v12 >= v6))
          goto LABEL_20;
      }
      result = v9 + 1;
      v4 = (_QWORD *)v9[1];
      if (!v4)
        goto LABEL_20;
    }
  }
  v9 = result;
LABEL_20:
  *a2 = v9;
  return result;
}

char *std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>::__init_with_size[abi:ne180100]<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v7[2] = a2[2];
      a2 += 3;
      v7 += 3;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_21810F064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 56);
    std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_to_generalized_union_project>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92F020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_to_generalized_union_project>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92F020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_union_to_generalized_union_project>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_union_to_generalized_union_project::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "union(...) -> gen_union_proj(...)");
}

uint64_t turi::query_eval::opt_union_to_generalized_union_project::apply_transform(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t i;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p;
  char *v40;
  char *v41;

  __p = 0;
  v40 = 0;
  v41 = 0;
  v5 = (_QWORD *)*a3;
  if (*(_QWORD *)(*a3 + 48) != *(_QWORD *)(*a3 + 40))
  {
    v6 = 0;
    do
    {
      for (i = 0; i < turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(v5[5] + 16 * v6)); ++i)
      {
        v8 = v40;
        if (v40 >= v41)
        {
          v10 = (char *)__p;
          v11 = (v40 - (_BYTE *)__p) >> 4;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 60)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v13 = v41 - (_BYTE *)__p;
          if ((v41 - (_BYTE *)__p) >> 3 > v12)
            v12 = v13 >> 3;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
            v14 = 0xFFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v41, v14);
            v10 = (char *)__p;
            v8 = v40;
          }
          else
          {
            v15 = 0;
          }
          v16 = (unint64_t *)&v15[16 * v11];
          *v16 = v6;
          v16[1] = i;
          v17 = v16;
          if (v8 != v10)
          {
            do
            {
              *((_OWORD *)v17 - 1) = *((_OWORD *)v8 - 1);
              v17 -= 2;
              v8 -= 16;
            }
            while (v8 != v10);
            v10 = (char *)__p;
          }
          v9 = (char *)(v16 + 2);
          __p = v17;
          v40 = (char *)(v16 + 2);
          v41 = &v15[16 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v40 = v6;
          *((_QWORD *)v8 + 1) = i;
          v9 = v8 + 16;
        }
        v40 = v9;
        v5 = (_QWORD *)*a3;
      }
      ++v6;
      v5 = (_QWORD *)*a3;
    }
    while (v6 < (uint64_t)(*(_QWORD *)(*a3 + 48) - *(_QWORD *)(*a3 + 40)) >> 4);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node(*v5 + 56, (uint64_t)&__p, &v37);
  v18 = (std::__shared_weak_count *)a3[1];
  v35 = (uint64_t *)*a3;
  v36 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v33 = v37;
  v34 = v38;
  if (v38)
  {
    v21 = (unint64_t *)&v38->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  turi::query_eval::optimization_engine::replace_node(a2, &v35, &v33);
  v23 = v34;
  if (v34)
  {
    v24 = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v38;
  if (v38)
  {
    v30 = (unint64_t *)&v38->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v40 = (char *)__p;
    operator delete(__p);
  }
  return 1;
}

void sub_21810F3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  void ***v9;
  const void **v10;
  _QWORD *v11[2];
  _BYTE v12[8];
  _QWORD *v13;
  uint64_t *v14[3];
  int v15;
  std::string v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v16.__r_.__value_.__r.__words[0] = v4 >> 4;
  if (!v4)
  {
    v14[0] = (uint64_t *)&v16;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,std::vector<std::pair<unsigned long,unsigned long>> const&)::{lambda(void)#1}::operator()();
  }
  v7 = *(_QWORD **)a2;
  v6 = *(_QWORD **)(a2 + 8);
  v8 = ((uint64_t)v6 - *(_QWORD *)a2) >> 4;
  memset(v14, 0, sizeof(v14));
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::pair<unsigned long,unsigned long> const*>,std::__wrap_iter<std::pair<unsigned long,unsigned long> const*>>((char *)v14, v7, v6, v8);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[10],std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,0>((uint64_t)&v16, "index_map", v14);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v12, &v16, 1);
  v11[0] = 0;
  v11[1] = 0;
  v10 = (const void **)v11;
  v15 = 12;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v15, (uint64_t)v12, &v10, (_QWORD **)a1, a3);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v10, v11[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v12, v13);
  v9 = (void ***)std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v16);
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v9);
}

void sub_21810F530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, char a17)
{
  uint64_t v17;

  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a14, a15);
  std::pair<std::string const,turi::flexible_type>::~pair(v17 - 64);
  *(_QWORD *)(v17 - 64) = &a17;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 64));
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,std::vector<std::pair<unsigned long,unsigned long>> const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"inputs.size()", 13);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 112, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,std::vector<std::pair<unsigned long,unsigned long>> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21810F70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::pair<unsigned long,unsigned long> const*>,std::__wrap_iter<std::pair<unsigned long,unsigned long> const*>>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_QWORD *)((char *)v7 + 5) = 0;
      *v7 = 0;
      *v7 = *a2;
      v7[2] = 0;
      *(_QWORD *)((char *)v7 + 21) = 0;
      v7[2] = a2[1];
      v7 += 4;
      a2 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_21810F818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[10],std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,0>(uint64_t a1, char *a2, uint64_t **a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char **v45;
  void **v47;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  v5[3] = 0;
  v6 = v5 + 3;
  *(_QWORD *)((char *)v5 + 29) = 0;
  *((_BYTE *)v5 + 36) = 5;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = 0;
  v9 = (void **)(v7 + 1);
  v7[2] = 0;
  v7[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *v7 = 1;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      if (*v7 != 1)
      {
        v10 = (_QWORD *)operator new();
        v11 = (_QWORD *)*v6;
        *v10 = *(_QWORD *)*v6;
        v12 = (std::string *)(v10 + 1);
        if (*((char *)v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v11[1], v11[2]);
        }
        else
        {
          v13 = *(_OWORD *)(v11 + 1);
          v10[3] = v11[3];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *v6 = (uint64_t)v10;
        *v10 = 1;
        do
        {
          v43 = __ldaxr(v8);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v8));
        if (!v44)
        {
          if (*((char *)v8 + 31) < 0)
            operator delete(*v9);
          v19 = v8;
          v20 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v7 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (_QWORD *)*v6;
        *v14 = *(_QWORD *)*v6;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, (const void *)v15[1], v15[2], (uint64_t)(v15[2] - v15[1]) >> 3);
        *v6 = (uint64_t)v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v8);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v8));
        if (!v17)
        {
          v18 = *v9;
          if (*v9)
          {
            v8[2] = v18;
            operator delete(v18);
          }
          v19 = v8;
          v20 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v7 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = (_QWORD *)*v6;
        *v21 = *(_QWORD *)*v6;
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v21 + 1, (uint64_t *)v22[1], (uint64_t *)v22[2], (uint64_t)(v22[2] - v22[1]) >> 4);
        *v6 = (uint64_t)v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v8);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v8));
        if (!v24)
        {
          v47 = v9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v47);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v7 != 1)
      {
        v25 = (_QWORD *)operator new();
        v26 = (_QWORD *)*v6;
        *v25 = *(_QWORD *)*v6;
        v25[2] = 0;
        v25[3] = 0;
        v25[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 5);
        *v6 = (uint64_t)v25;
        *v25 = 1;
        do
        {
          v27 = __ldaxr(v8);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v8));
        if (!v28)
        {
          v47 = v9;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v47);
LABEL_22:
          v19 = v8;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v7 != 1)
      {
        v29 = operator new();
        v30 = (_QWORD *)*v6;
        *(_QWORD *)v29 = *(_QWORD *)*v6;
        *(_QWORD *)(v29 + 8) = v30[1];
        v31 = v30[2];
        *(_QWORD *)(v29 + 16) = v31;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(_OWORD *)(v30 + 3);
        v35 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 7);
        *(_OWORD *)(v29 + 40) = v35;
        *(_OWORD *)(v29 + 24) = v34;
        *v6 = v29;
        *(_QWORD *)v29 = 1;
        do
        {
          v36 = __ldaxr(v8);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v8));
        if (!v37)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v8 + 2);
          v19 = v8;
          v38 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v7 != 1)
      {
        v39 = (_QWORD *)operator new();
        v40 = *v6 + 8;
        *v39 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v41 = __ldaxr(v8);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v8));
        if (!v42)
        {
          v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v8);
          v38 = 2071181815;
LABEL_36:
          v20 = v38 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  v45 = (char **)(*v6 + 8);
  if (v45 != (char **)a3)
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v45, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 5);
  return a1;
}

void sub_21810FC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v10 + 36))
  {
    case 2:
      v14 = *v12;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (v16)
        goto LABEL_40;
      v17 = *v12;
      if (!*v12)
        goto LABEL_39;
      if (*((char *)v17 + 31) < 0)
        operator delete((void *)v17[1]);
      v18 = v17;
      v19 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v20 = *v12;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_40;
      v23 = *v12;
      if (!*v12)
        goto LABEL_39;
      v24 = (void *)v23[1];
      if (v24)
      {
        v23[2] = (unint64_t)v24;
        operator delete(v24);
      }
      v18 = v23;
      v19 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v29 = *v12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v18 = v28;
      v19 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v32 = *v12;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v35 = *v12;
      if (!*v12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
      v18 = v35;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = *v12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      if (!*v12)
        goto LABEL_39;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v36 = 2071181815;
LABEL_37:
      v19 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v18, v19);
LABEL_39:
      *v12 = 0;
LABEL_40:
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_to_generalized_union_project>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92F0C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_to_generalized_union_project>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92F0C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_project_to_generalized_union_project>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_project_to_generalized_union_project::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project(...) -> gen_union_proj(...)");
}

uint64_t turi::query_eval::opt_project_to_generalized_union_project::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void *__p[2];
  char v44;
  void **v45;
  char v46;
  _QWORD v47[3];

  v47[2] = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  v6 = *(_QWORD *)turi::query_eval::node_info::p(v5, (uint64_t)__p);
  if (v44 < 0)
    operator delete(__p[0]);
  std::vector<std::pair<unsigned long,unsigned long>>::vector(__p, (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 4);
  v7 = *(_QWORD *)(v6 + 8);
  if (*(_QWORD *)(v6 + 16) != v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      LODWORD(v45) = 0;
      std::pair<unsigned long,unsigned long>::pair[abi:ne180100]<int,turi::flexible_type const&,0>(&v38, (int *)&v45, (_BYTE *)(v7 + v8));
      v10 = (char *)__p[0] + v8;
      *v10 = v38;
      v10[1] = v39;
      ++v9;
      v7 = *(_QWORD *)(v6 + 8);
      v8 += 16;
    }
    while (v9 < (*(_QWORD *)(v6 + 16) - v7) >> 4);
  }
  v11 = *(uint64_t **)(*a3)[5];
  v13 = *v11;
  v12 = v11[1];
  v47[0] = *v11;
  v47[1] = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v45 = (void **)&v38;
  v46 = 0;
  v16 = operator new(0x10uLL);
  v38 = v16;
  v40 = v16 + 2;
  *v16 = v13;
  v16[1] = v12;
  if (v12)
  {
    v17 = (unint64_t *)(v12 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v39 = v16 + 2;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node((uint64_t)&v38, (uint64_t)__p, &v41);
  v45 = (void **)&v38;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v45);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v47);
  v19 = (std::__shared_weak_count *)a3[1];
  v36 = *a3;
  v37 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v34 = v41;
  v35 = v42;
  if (v42)
  {
    v22 = (unint64_t *)&v42->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  turi::query_eval::optimization_engine::replace_node(a2, &v36, &v34);
  v24 = v35;
  if (v35)
  {
    v25 = (unint64_t *)&v35->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v37;
  if (v37)
  {
    v28 = (unint64_t *)&v37->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v42;
  if (v42)
  {
    v31 = (unint64_t *)&v42->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 1;
}

void sub_2181101C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::pair<unsigned long,unsigned long>::pair[abi:ne180100]<int,turi::flexible_type const&,0>(_QWORD *a1, int *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  std::runtime_error *exception;
  std::string *v22;
  __int128 v23;
  void *__p[2];
  void *v25[2];
  __int128 v26;
  __int128 v27;
  std::string v28;
  size_t __idx;

  *a1 = *a2;
  v4 = 0;
  switch(a3[12])
  {
    case 0:
      v4 = *(_QWORD *)a3;
      goto LABEL_29;
    case 1:
      v4 = (uint64_t)*(double *)a3;
      goto LABEL_29;
    case 2:
      v8 = *(_QWORD *)a3;
      v9 = (char **)(*(_QWORD *)a3 + 8);
      __idx = 0;
      v10 = (char *)v9;
      if (*(char *)(v8 + 31) < 0)
        v10 = *v9;
      std::string::basic_string[abi:ne180100]<0>(__p, v10);
      v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v25[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v8 + 31) < 0)
        v11 = *(_QWORD *)(v8 + 16);
      else
        v11 = *(unsigned __int8 *)(v8 + 31);
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v22 = std::string::append(&v28, " cannot be interpreted as an integer");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v25[0] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v5 = *(_QWORD *)a3;
      __p[1] = 0;
      v25[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(_QWORD *)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      v12 = *(_QWORD *)a3;
      __p[1] = 0;
      v25[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
      goto LABEL_28;
    case 5:
      v13 = *(_QWORD *)a3;
      __p[1] = 0;
      v25[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
      goto LABEL_28;
    case 6:
      v4 = (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v14 = *(_QWORD *)a3;
      v15 = *(unsigned int **)(*(_QWORD *)a3 + 16);
      __p[0] = *(void **)(*(_QWORD *)a3 + 8);
      __p[1] = v15;
      if (v15)
      {
        v16 = v15 + 2;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(_OWORD *)(v14 + 24);
      v19 = *(_OWORD *)(v14 + 56);
      v26 = *(_OWORD *)(v14 + 40);
      v27 = v19;
      *(_OWORD *)v25 = v18;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v26 + 1))
      {
        *(_QWORD *)&v27 = *((_QWORD *)&v26 + 1);
        operator delete(*((void **)&v26 + 1));
      }
      if (v25[0])
      {
        v25[1] = v25[0];
        operator delete(v25[0]);
      }
      v4 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_29;
      v6 = (unint64_t *)((char *)__p[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
      }
LABEL_28:
      v4 = 0;
LABEL_29:
      a1[1] = v4;
      return a1;
    default:
      turi::apply_binary_op_ff();
  }
}

void sub_218110524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 41) < 0)
  {
    operator delete(*(void **)(v16 - 64));
    if ((v15 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_generalized_union_projects>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92F160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_generalized_union_projects>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92F160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_merge_generalized_union_projects>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_merge_generalized_union_projects::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "gen_union_proj(..., gen_union_proj(...), ...) -> gen_union_proj(...)");
}

uint64_t turi::query_eval::opt_merge_generalized_union_projects::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD **v26;
  _QWORD *v27;
  _QWORD **v28;
  unint64_t v29;
  _QWORD *v30;
  std::string::size_type v31;
  uint64_t v32;
  std::__shared_weak_count *size;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char **v37;
  char *v38;
  const std::string *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD **v55;
  _QWORD *v56;
  _QWORD **v57;
  unint64_t v58;
  _QWORD *v59;
  std::string::size_type v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char **v71;
  char *v72;
  const std::string *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  __int128 v81;
  __int128 v82;
  unint64_t *v83;
  unint64_t v84;
  std::runtime_error *v85;
  std::string *v86;
  __int128 v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::runtime_error *exception;
  std::string *v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  uint64_t *v107;
  std::__shared_weak_count *v108;
  size_t v109[2];
  __int128 v110;
  void *__p;
  _QWORD *v112;
  uint64_t v113;
  uint64_t *v114;
  _QWORD *v115;
  std::string::size_type v116;
  char *v117[3];
  uint64_t v118;
  unsigned int *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  std::string v123;
  std::string::size_type v124;
  void *v125;
  void *v126;
  size_t __idx;
  std::string v128;

  v3 = *a3;
  v4 = (*a3)[5];
  v5 = (*a3)[6];
  if (v4 == v5)
    return 0;
  while (*(_DWORD *)(*(_QWORD *)v4 + 16) != 12)
  {
    v4 += 16;
    if (v4 == v5)
      return 0;
  }
  memset(v117, 0, sizeof(v117));
  v115 = 0;
  v116 = 0;
  v114 = (uint64_t *)&v115;
  std::string::basic_string[abi:ne180100]<0>(&v123, "index_map");
  v9 = *(_QWORD *)turi::query_eval::node_info::p(v3, (uint64_t)&v123);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  v105 = a2;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 16);
  __p = 0;
  v112 = 0;
  v113 = 0;
  std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t *)&__p, v10, v11, (v11 - v10) >> 5);
  v13 = __p;
  v12 = v112;
  if (__p != v112)
  {
    do
    {
      v14 = v13[1];
      v15 = *(_OWORD *)((*a3)[5] + 16 * *v13);
      v110 = v15;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
      if (*((_QWORD *)&v15 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = (uint64_t *)v15;
      if (*(_DWORD *)(v15 + 16) == 12)
      {
        std::string::basic_string[abi:ne180100]<0>(&v123, "index_map");
        v20 = *(_QWORD *)turi::query_eval::node_info::p(v19, (uint64_t)&v123);
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v123.__r_.__value_.__l.__data_);
        v21 = *(_QWORD *)(v20 + 8);
        v22 = v21 + 32 * v14;
        v23 = 0;
        switch(*(_BYTE *)(v22 + 12))
        {
          case 0:
            v23 = *(_QWORD *)v22;
            goto LABEL_57;
          case 1:
            v23 = (uint64_t)*(double *)v22;
            goto LABEL_57;
          case 2:
            v36 = *(_QWORD *)v22;
            v37 = (char **)(*(_QWORD *)v22 + 8);
            __idx = 0;
            v38 = (char *)v37;
            if (*(char *)(v36 + 31) < 0)
              v38 = *v37;
            v39 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v123, v38);
            v23 = std::stoll(v39, &__idx, 10);
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v123.__r_.__value_.__l.__data_);
            if (*(char *)(v36 + 31) < 0)
              v40 = *(_QWORD *)(v36 + 16);
            else
              v40 = *(unsigned __int8 *)(v36 + 31);
            if (__idx != v40)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v103 = std::string::append(&v128, " cannot be interpreted as an integer");
              v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
              v123.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v104;
              v103->__r_.__value_.__l.__size_ = 0;
              v103->__r_.__value_.__r.__words[2] = 0;
              v103->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, &v123);
              __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_57;
          case 3:
            v32 = *(_QWORD *)v22;
            memset(&v123, 0, sizeof(v123));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v123, *(const void **)(v32 + 8), *(_QWORD *)(v32 + 16), (uint64_t)(*(_QWORD *)(v32 + 16) - *(_QWORD *)(v32 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (v123.__r_.__value_.__r.__words[0])
            {
              v123.__r_.__value_.__l.__size_ = v123.__r_.__value_.__r.__words[0];
              operator delete(v123.__r_.__value_.__l.__data_);
            }
            goto LABEL_56;
          case 4:
            v41 = *(_QWORD *)v22;
            memset(&v123, 0, sizeof(v123));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v123, *(uint64_t **)(v41 + 8), *(uint64_t **)(v41 + 16), (uint64_t)(*(_QWORD *)(v41 + 16) - *(_QWORD *)(v41 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
            goto LABEL_56;
          case 5:
            v42 = *(_QWORD *)v22;
            memset(&v123, 0, sizeof(v123));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v123, *(uint64_t **)(v42 + 8), *(uint64_t **)(v42 + 16), (uint64_t)(*(_QWORD *)(v42 + 16) - *(_QWORD *)(v42 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
            goto LABEL_56;
          case 6:
            v23 = (uint64_t)(*(_QWORD *)v22 << 8) >> 8;
            goto LABEL_57;
          case 7:
            goto LABEL_57;
          case 8:
            v43 = *(_QWORD *)v22;
            v44 = *(unsigned int **)(v43 + 16);
            v118 = *(_QWORD *)(v43 + 8);
            v119 = v44;
            if (v44)
            {
              v45 = v44 + 2;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
            }
            v47 = *(_OWORD *)(v43 + 24);
            v48 = *(_OWORD *)(v43 + 56);
            v121 = *(_OWORD *)(v43 + 40);
            v122 = v48;
            v120 = v47;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count(&v119);
            goto LABEL_56;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&v123, *(_QWORD *)v22 + 8);
            turi::flexible_type_fail(0);
            if (v125)
            {
              v126 = v125;
              operator delete(v125);
            }
            if (v123.__r_.__value_.__r.__words[2])
            {
              v124 = v123.__r_.__value_.__r.__words[2];
              operator delete((void *)v123.__r_.__value_.__r.__words[2]);
            }
            size = (std::__shared_weak_count *)v123.__r_.__value_.__l.__size_;
            if (v123.__r_.__value_.__l.__size_)
            {
              v34 = (unint64_t *)(v123.__r_.__value_.__l.__size_ + 8);
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
LABEL_56:
            v23 = 0;
LABEL_57:
            v49 = *(_OWORD *)(v19[5] + 16 * v23);
            *(_OWORD *)v109 = v49;
            v50 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
            if (*((_QWORD *)&v49 + 1))
            {
              v51 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
            }
            v53 = v115;
            v54 = &v115;
            if (!v115)
              goto LABEL_71;
            v55 = &v115;
            do
            {
              v56 = v53;
              v57 = v55;
              v58 = v53[4];
              if (v58 >= (unint64_t)v49)
                v55 = (_QWORD **)v53;
              else
                ++v53;
              v53 = (_QWORD *)*v53;
            }
            while (v53);
            v54 = &v115;
            if (v55 != &v115
              && (v58 >= (unint64_t)v49 ? (v59 = v56) : (v59 = v57), v54 = v55, v59[4] == (_QWORD)v49))
            {
              if (v58 >= (unint64_t)v49)
                v66 = v56;
              else
                v66 = v57;
              v31 = v66[5];
              if (!*((_QWORD *)&v49 + 1))
                goto LABEL_76;
            }
            else
            {
LABEL_71:
              v31 = v116;
              v60 = v49;
              std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](v117, (__int128 *)v49);
              v123.__r_.__value_.__r.__words[0] = v60;
              v123.__r_.__value_.__l.__size_ = v31;
              std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>(&v114, v54, (unint64_t *)&v123, &v123);
              if (!v50)
                goto LABEL_76;
            }
            p_shared_owners = (unint64_t *)&v50->__shared_owners_;
            do
              v62 = __ldaxr(p_shared_owners);
            while (__stlxr(v62 - 1, p_shared_owners));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
LABEL_76:
            v63 = v21 + 32 * v14;
            v64 = *(unsigned __int8 *)(v63 + 28);
            v14 = 0;
            v65 = (uint64_t *)(v63 + 16);
            switch(v64)
            {
              case 0:
                v14 = *v65;
                goto LABEL_109;
              case 1:
                v14 = (uint64_t)*(double *)v65;
                goto LABEL_109;
              case 2:
                v70 = *v65;
                v71 = (char **)(*v65 + 8);
                v109[0] = 0;
                v72 = (char *)v71;
                if (*(char *)(v70 + 31) < 0)
                  v72 = *v71;
                v73 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v123, v72);
                v14 = std::stoll(v73, v109, 10);
                if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v123.__r_.__value_.__l.__data_);
                if (*(char *)(v70 + 31) < 0)
                  v74 = *(_QWORD *)(v70 + 16);
                else
                  v74 = *(unsigned __int8 *)(v70 + 31);
                if (v109[0] != v74)
                {
                  v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v86 = std::string::append(&v128, " cannot be interpreted as an integer");
                  v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
                  v123.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v87;
                  v86->__r_.__value_.__l.__size_ = 0;
                  v86->__r_.__value_.__r.__words[2] = 0;
                  v86->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v85, &v123);
                  __cxa_throw(v85, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                goto LABEL_109;
              case 3:
                v67 = *v65;
                memset(&v123, 0, sizeof(v123));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v123, *(const void **)(v67 + 8), *(_QWORD *)(v67 + 16), (uint64_t)(*(_QWORD *)(v67 + 16) - *(_QWORD *)(v67 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (v123.__r_.__value_.__r.__words[0])
                {
                  v123.__r_.__value_.__l.__size_ = v123.__r_.__value_.__r.__words[0];
                  operator delete(v123.__r_.__value_.__l.__data_);
                }
                goto LABEL_108;
              case 4:
                v75 = *v65;
                memset(&v123, 0, sizeof(v123));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v123, *(uint64_t **)(v75 + 8), *(uint64_t **)(v75 + 16), (uint64_t)(*(_QWORD *)(v75 + 16) - *(_QWORD *)(v75 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
                goto LABEL_108;
              case 5:
                v76 = *v65;
                memset(&v123, 0, sizeof(v123));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v123, *(uint64_t **)(v76 + 8), *(uint64_t **)(v76 + 16), (uint64_t)(*(_QWORD *)(v76 + 16) - *(_QWORD *)(v76 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
                goto LABEL_108;
              case 6:
                v14 = *v65 << 8 >> 8;
                goto LABEL_109;
              case 7:
                goto LABEL_109;
              case 8:
                v77 = *v65;
                v78 = *(unsigned int **)(v77 + 16);
                v118 = *(_QWORD *)(v77 + 8);
                v119 = v78;
                if (v78)
                {
                  v79 = v78 + 2;
                  do
                    v80 = __ldxr(v79);
                  while (__stxr(v80 + 1, v79));
                }
                v81 = *(_OWORD *)(v77 + 24);
                v82 = *(_OWORD *)(v77 + 56);
                v121 = *(_OWORD *)(v77 + 40);
                v122 = v82;
                v120 = v81;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count(&v119);
                goto LABEL_108;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&v123, *v65 + 8);
                turi::flexible_type_fail(0);
                if (v125)
                {
                  v126 = v125;
                  operator delete(v125);
                }
                if (v123.__r_.__value_.__r.__words[2])
                {
                  v124 = v123.__r_.__value_.__r.__words[2];
                  operator delete((void *)v123.__r_.__value_.__r.__words[2]);
                }
                v14 = v123.__r_.__value_.__l.__size_;
                if (!v123.__r_.__value_.__l.__size_)
                  goto LABEL_109;
                v68 = (unint64_t *)(v123.__r_.__value_.__l.__size_ + 8);
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v14);
                }
LABEL_108:
                v14 = 0;
LABEL_109:
                v16 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
                break;
              default:
                goto LABEL_147;
            }
            break;
          default:
LABEL_147:
            result = turi::flexible_type_fail(0);
            __break(1u);
            return result;
        }
      }
      else
      {
        v24 = v115;
        v25 = &v115;
        if (!v115)
          goto LABEL_27;
        v26 = &v115;
        do
        {
          v27 = v24;
          v28 = v26;
          v29 = v24[4];
          if (v29 >= (unint64_t)v15)
            v26 = (_QWORD **)v24;
          else
            ++v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
        v25 = &v115;
        if (v26 != &v115
          && (v29 >= (unint64_t)v15 ? (v30 = v27) : (v30 = v28), v25 = v26, v30[4] == (_QWORD)v15))
        {
          if (v29 < (unint64_t)v15)
            v27 = v28;
          v31 = v27[5];
        }
        else
        {
LABEL_27:
          v31 = v116;
          std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](v117, (__int128 *)v15);
          v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
          v123.__r_.__value_.__l.__size_ = v31;
          std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>(&v114, v25, (unint64_t *)&v123, &v123);
        }
      }
      *v13 = v31;
      v13[1] = v14;
      if (v16)
      {
        v83 = (unint64_t *)&v16->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v13 += 2;
    }
    while (v13 != v12);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node((uint64_t)v117, (uint64_t)&__p, &v123);
  v88 = (std::__shared_weak_count *)a3[1];
  v107 = *a3;
  v108 = v88;
  if (v88)
  {
    v89 = (unint64_t *)&v88->__shared_owners_;
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
  }
  v106 = *(_OWORD *)&v123.__r_.__value_.__l.__data_;
  if (v123.__r_.__value_.__l.__size_)
  {
    v91 = (unint64_t *)(v123.__r_.__value_.__l.__size_ + 8);
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  turi::query_eval::optimization_engine::replace_node(v105, &v107, (uint64_t *)&v106);
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v108;
  if (v108)
  {
    v97 = (unint64_t *)&v108->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = (std::__shared_weak_count *)v123.__r_.__value_.__l.__size_;
  if (v123.__r_.__value_.__l.__size_)
  {
    v100 = (unint64_t *)(v123.__r_.__value_.__l.__size_ + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v114, v115);
  v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
  return 1;
}

void sub_218111044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,_QWORD *a26,uint64_t a27,char a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  if (*(char *)(v30 - 169) < 0)
    operator delete(*(void **)(v30 - 192));
  if (*(char *)(v30 - 89) < 0)
  {
    operator delete(*(void **)(v30 - 112));
    if ((v29 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
      if (__p)
      {
        a23 = (uint64_t)__p;
        operator delete(__p);
      }
      std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a25, a26);
      *(_QWORD *)(v30 - 112) = &a28;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 112));
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

uint64_t *std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    return std::vector<std::pair<unsigned long,unsigned long>>::__construct_at_end<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(v6, a2, a3);
  }
  return result;
}

void sub_218111240(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_add_direct_source_tags>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92F200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_add_direct_source_tags>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92F200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_project_add_direct_source_tags>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::opt_project_add_direct_source_tags::description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "add_source_metadata(gen_union_proj(...))");
}

uint64_t turi::query_eval::opt_project_add_direct_source_tags::apply_transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  char **v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  unint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  BOOL v94;
  BOOL v95;
  uint64_t v96;
  uint64_t **v97;
  _OWORD *v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::runtime_error *exception;
  std::string *v114;
  __int128 v115;
  std::runtime_error *v116;
  std::string *v117;
  __int128 v118;
  uint64_t v119;
  void *v120;
  unsigned int *v121;
  uint64_t *v122;
  std::__shared_weak_count *v123;
  __int128 __idx;
  unint64_t v125;
  uint64_t *v126;
  _QWORD *v127[2];
  void *v128;
  unsigned int *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  std::string __p;
  std::string::size_type v134;
  void *v135;
  void *v136;
  std::string v137;

  v3 = *(_QWORD **)a3;
  v5 = *(_QWORD *)(*(_QWORD *)a3 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)a3 + 48);
  if (v5 == v4)
    return 0;
  v8 = v5 + 16;
  while (1)
  {
    v9 = *(_DWORD *)(*(_QWORD *)(v8 - 16) + 16);
    if (v9 == 7)
      break;
    v10 = v9 == 6 || v8 == v4;
    v8 += 16;
    if (v10)
    {
      if (v9 != 6)
        return 0;
      break;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "direct_source_mapping");
  v11 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(*v3 + 32, (const void **)&__p.__r_.__value_.__l.__data_);
  v12 = *v3 + 40;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 != v11)
    return 0;
  v127[0] = 0;
  v127[1] = 0;
  v126 = (uint64_t *)v127;
  v14 = *(uint64_t **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
  v119 = a2;
  v15 = *(_QWORD *)turi::query_eval::node_info::p(v14, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v125 = 0;
  v16 = *(_QWORD *)(v15 + 8);
  if (*(_QWORD *)(v15 + 16) == v16)
  {
LABEL_171:
    v96 = operator new();
    turi::query_eval::planner_node::planner_node(v96, **(_QWORD **)a3);
    std::shared_ptr<turi::query_eval::planner_node>::shared_ptr[abi:ne180100]<turi::query_eval::planner_node,void>(&v128, v96);
    v97 = (uint64_t **)v128;
    std::string::basic_string[abi:ne180100]<0>(&__p, "direct_source_mapping");
    v137.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v98 = std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v97 + 4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v137);
    turi::any::operator=<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>((_QWORD *)v98 + 7, (uint64_t)&v126);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v99 = *(std::__shared_weak_count **)(a3 + 8);
    v122 = *(uint64_t **)a3;
    v123 = v99;
    if (v99)
    {
      p_shared_owners = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldxr(p_shared_owners);
      while (__stxr(v101 + 1, p_shared_owners));
    }
    v120 = v128;
    v121 = v129;
    if (v129)
    {
      v102 = (unint64_t *)(v129 + 2);
      do
        v103 = __ldxr(v102);
      while (__stxr(v103 + 1, v102));
    }
    turi::query_eval::optimization_engine::replace_node(v119, &v122, (uint64_t *)&v120);
    v104 = (std::__shared_weak_count *)v121;
    if (v121)
    {
      v105 = (unint64_t *)(v121 + 2);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v107 = v123;
    if (v123)
    {
      v108 = (unint64_t *)&v123->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v110 = (std::__shared_weak_count *)v129;
    if (v129)
    {
      v111 = (unint64_t *)(v129 + 2);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy((uint64_t)&v126, v127[0]);
    return 1;
  }
  else
  {
    v17 = 0;
    while (2)
    {
      v18 = v16 + 32 * v17;
      v19 = 0;
      switch(*(_BYTE *)(v18 + 12))
      {
        case 0:
          v19 = *(_QWORD *)v18;
          goto LABEL_46;
        case 1:
          v19 = (uint64_t)*(double *)v18;
          goto LABEL_46;
        case 2:
          v24 = *(_QWORD *)v18;
          v25 = (char **)(*(_QWORD *)v18 + 8);
          *(_QWORD *)&__idx = 0;
          v26 = (char *)v25;
          if (*(char *)(v24 + 31) < 0)
            v26 = *v25;
          std::string::basic_string[abi:ne180100]<0>(&__p, v26);
          v19 = std::stoll(&__p, (size_t *)&__idx, 10);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (*(char *)(v24 + 31) < 0)
            v27 = *(_QWORD *)(v24 + 16);
          else
            v27 = *(unsigned __int8 *)(v24 + 31);
          if ((_QWORD)__idx != v27)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v114 = std::string::append(&v137, " cannot be interpreted as an integer");
            v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v115;
            v114->__r_.__value_.__l.__size_ = 0;
            v114->__r_.__value_.__r.__words[2] = 0;
            v114->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__p);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_46;
        case 3:
          v20 = *(_QWORD *)v18;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v20 + 8), *(_QWORD *)(v20 + 16), (uint64_t)(*(_QWORD *)(v20 + 16) - *(_QWORD *)(v20 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_45;
        case 4:
          v28 = *(_QWORD *)v18;
          memset(&__p, 0, sizeof(__p));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v28 + 8), *(uint64_t **)(v28 + 16), (uint64_t)(*(_QWORD *)(v28 + 16) - *(_QWORD *)(v28 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v137.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
          goto LABEL_45;
        case 5:
          v29 = *(_QWORD *)v18;
          memset(&__p, 0, sizeof(__p));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v29 + 8), *(uint64_t **)(v29 + 16), (uint64_t)(*(_QWORD *)(v29 + 16) - *(_QWORD *)(v29 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v137.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
          goto LABEL_45;
        case 6:
          v19 = (uint64_t)(*(_QWORD *)v18 << 8) >> 8;
          goto LABEL_46;
        case 7:
          goto LABEL_46;
        case 8:
          v30 = *(_QWORD *)v18;
          v31 = *(unsigned int **)(v30 + 16);
          v128 = *(void **)(v30 + 8);
          v129 = v31;
          if (v31)
          {
            v32 = v31 + 2;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          v34 = *(_OWORD *)(v30 + 24);
          v35 = *(_OWORD *)(v30 + 56);
          v131 = *(_OWORD *)(v30 + 40);
          v132 = v35;
          v130 = v34;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v129);
          goto LABEL_45;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v18 + 8);
          turi::flexible_type_fail(0);
          if (v135)
          {
            v136 = v135;
            operator delete(v135);
          }
          if (__p.__r_.__value_.__r.__words[2])
          {
            v134 = __p.__r_.__value_.__r.__words[2];
            operator delete((void *)__p.__r_.__value_.__r.__words[2]);
          }
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
LABEL_45:
          v19 = 0;
LABEL_46:
          v36 = *(_QWORD *)(v15 + 8) + 32 * v125;
          v37 = *(unsigned __int8 *)(v36 + 28);
          v38 = 0;
          v39 = (unint64_t *)(v36 + 16);
          switch(v37)
          {
            case 0:
              v38 = *v39;
              goto LABEL_74;
            case 1:
              v38 = (uint64_t)*(double *)v39;
              goto LABEL_74;
            case 2:
              v44 = *v39;
              v45 = (char **)(*v39 + 8);
              *(_QWORD *)&__idx = 0;
              v46 = (char *)v45;
              if (*(char *)(v44 + 31) < 0)
                v46 = *v45;
              std::string::basic_string[abi:ne180100]<0>(&__p, v46);
              v38 = std::stoll(&__p, (size_t *)&__idx, 10);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (*(char *)(v44 + 31) < 0)
                v47 = *(_QWORD *)(v44 + 16);
              else
                v47 = *(unsigned __int8 *)(v44 + 31);
              if ((_QWORD)__idx != v47)
              {
                v116 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v117 = std::string::append(&v137, " cannot be interpreted as an integer");
                v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v118;
                v117->__r_.__value_.__l.__size_ = 0;
                v117->__r_.__value_.__r.__words[2] = 0;
                v117->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v116, &__p);
                __cxa_throw(v116, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_74;
            case 3:
              v40 = *v39;
              memset(&__p, 0, sizeof(__p));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v40 + 8), *(_QWORD *)(v40 + 16), (uint64_t)(*(_QWORD *)(v40 + 16) - *(_QWORD *)(v40 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_73;
            case 4:
              v48 = *v39;
              memset(&__p, 0, sizeof(__p));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v48 + 8), *(uint64_t **)(v48 + 16), (uint64_t)(*(_QWORD *)(v48 + 16) - *(_QWORD *)(v48 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v137.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
              goto LABEL_73;
            case 5:
              v49 = *v39;
              memset(&__p, 0, sizeof(__p));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v49 + 8), *(uint64_t **)(v49 + 16), (uint64_t)(*(_QWORD *)(v49 + 16) - *(_QWORD *)(v49 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v137.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
              goto LABEL_73;
            case 6:
              v38 = (uint64_t)(*v39 << 8) >> 8;
              goto LABEL_74;
            case 7:
              goto LABEL_74;
            case 8:
              v50 = *v39;
              v51 = *(unsigned int **)(v50 + 16);
              v128 = *(void **)(v50 + 8);
              v129 = v51;
              if (v51)
              {
                v52 = v51 + 2;
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }
              v54 = *(_OWORD *)(v50 + 24);
              v55 = *(_OWORD *)(v50 + 56);
              v131 = *(_OWORD *)(v50 + 40);
              v132 = v55;
              v130 = v54;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v129);
              goto LABEL_73;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *v39 + 8);
              turi::flexible_type_fail(0);
              if (v135)
              {
                v136 = v135;
                operator delete(v135);
              }
              if (__p.__r_.__value_.__r.__words[2])
              {
                v134 = __p.__r_.__value_.__r.__words[2];
                operator delete((void *)__p.__r_.__value_.__r.__words[2]);
              }
              v41 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_)
              {
                v42 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v43 = __ldaxr(v42);
                while (__stlxr(v43 - 1, v42));
                if (!v43)
                {
                  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                  std::__shared_weak_count::__release_weak(v41);
                }
              }
LABEL_73:
              v38 = 0;
LABEL_74:
              v56 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * v19);
              *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v56;
              if (*((_QWORD *)&v56 + 1))
              {
                v57 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
                do
                  v58 = __ldxr(v57);
                while (__stxr(v58 + 1, v57));
              }
              v59 = (uint64_t *)v56;
              v60 = *(_DWORD *)(v56 + 16);
              if (v60 == 6)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "sarray");
                v64 = (_QWORD *)turi::query_eval::node_info::any_p<turi::sframe>(v59, (uint64_t)&__p);
                v65 = v64[1];
                *(_QWORD *)&__idx = *v64;
                *((_QWORD *)&__idx + 1) = v65;
                if (v65)
                {
                  v66 = (unint64_t *)(v65 + 8);
                  do
                    v67 = __ldxr(v66);
                  while (__stxr(v67 + 1, v66));
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                std::string::basic_string[abi:ne180100]<0>(&__p, "begin_index");
                v68 = turi::query_eval::node_info::p(v59, (uint64_t)&__p);
                v69 = 0;
                switch(*(_BYTE *)(v68 + 12))
                {
                  case 0:
                    if (*(_QWORD *)v68)
                      goto LABEL_127;
                    goto LABEL_129;
                  case 1:
                    if (*(double *)v68 == 0.0)
                      goto LABEL_129;
                    goto LABEL_127;
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                    goto LABEL_91;
                  case 6:
                    if ((*(_QWORD *)v68 & 0xFFFFFFFFFFFFFFLL) == 0 && *(_DWORD *)(v68 + 8) == 0)
                    {
LABEL_129:
                      v80 = (uint64_t *)v137.__r_.__value_.__r.__words[0];
                      std::string::basic_string[abi:ne180100]<0>(&v128, "end_index");
                      v81 = turi::query_eval::node_info::p(v80, (uint64_t)&v128);
                      if (*(_BYTE *)(__idx + 248)
                        && (v82 = *(uint64_t **)(__idx + 80), (v83 = *(_QWORD *)(__idx + 88) - (_QWORD)v82) != 0))
                      {
                        v84 = 0;
                        v85 = v83 >> 3;
                        if (v85 <= 1)
                          v85 = 1;
                        do
                        {
                          v86 = *v82++;
                          v84 += v86;
                          --v85;
                        }
                        while (v85);
                      }
                      else
                      {
                        v84 = 0;
                      }
                      v69 = 0;
                      switch(*(_BYTE *)(v81 + 12))
                      {
                        case 0:
                          v94 = *(_QWORD *)v81 == v84;
                          goto LABEL_157;
                        case 1:
                          v94 = *(double *)v81 == (double)v84;
                          goto LABEL_157;
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 7:
                        case 8:
                        case 9:
                          goto LABEL_160;
                        case 6:
                          v94 = v84 == (uint64_t)(*(_QWORD *)v81 << 8) >> 8 && *(_DWORD *)(v81 + 8) == 0;
LABEL_157:
                          v69 = v94;
LABEL_160:
                          if (SBYTE7(v130) < 0)
                            operator delete(v128);
                          goto LABEL_91;
                        default:
                          goto LABEL_195;
                      }
                    }
LABEL_127:
                    v69 = 0;
LABEL_91:
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__p.__r_.__value_.__l.__data_);
                      if (!v69)
                        goto LABEL_96;
                    }
                    else if (!v69)
                    {
                      goto LABEL_96;
                    }
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v125;
                    v70 = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v126, &v125, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
                    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v70 + 5, (uint64_t *)&__idx);
LABEL_96:
                    v71 = (std::__shared_weak_count *)*((_QWORD *)&__idx + 1);
                    if (!*((_QWORD *)&__idx + 1))
                      goto LABEL_107;
                    v72 = (unint64_t *)(*((_QWORD *)&__idx + 1) + 8);
                    do
                      v73 = __ldaxr(v72);
                    while (__stlxr(v73 - 1, v72));
                    break;
                  default:
                    goto LABEL_195;
                }
              }
              else
              {
                if (v60 != 7)
                  goto LABEL_107;
                std::string::basic_string[abi:ne180100]<0>(&__p, "sframe");
                v61 = turi::query_eval::node_info::any_p<turi::sframe>(v59, (uint64_t)&__p);
                turi::sframe::select_column(v61, v38, &__idx);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                std::string::basic_string[abi:ne180100]<0>(&__p, "begin_index");
                v62 = turi::query_eval::node_info::p(v59, (uint64_t)&__p);
                v63 = 0;
                switch(*(_BYTE *)(v62 + 12))
                {
                  case 0:
                    if (*(_QWORD *)v62)
                      goto LABEL_139;
                    goto LABEL_141;
                  case 1:
                    if (*(double *)v62 == 0.0)
                      goto LABEL_141;
LABEL_139:
                    v63 = 0;
                    goto LABEL_82;
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                    goto LABEL_82;
                  case 6:
                    v63 = 0;
                    if ((*(_QWORD *)v62 & 0xFFFFFFFFFFFFFFLL) == 0 && !*(_DWORD *)(v62 + 8))
                    {
LABEL_141:
                      v87 = (uint64_t *)v137.__r_.__value_.__r.__words[0];
                      std::string::basic_string[abi:ne180100]<0>(&v128, "end_index");
                      v88 = turi::query_eval::node_info::p(v87, (uint64_t)&v128);
                      if (*(_BYTE *)(__idx + 248)
                        && (v89 = *(uint64_t **)(__idx + 80), (v90 = *(_QWORD *)(__idx + 88) - (_QWORD)v89) != 0))
                      {
                        v91 = 0;
                        v92 = v90 >> 3;
                        if (v92 <= 1)
                          v92 = 1;
                        do
                        {
                          v93 = *v89++;
                          v91 += v93;
                          --v92;
                        }
                        while (v92);
                      }
                      else
                      {
                        v91 = 0;
                      }
                      v63 = 0;
                      switch(*(_BYTE *)(v88 + 12))
                      {
                        case 0:
                          v95 = *(_QWORD *)v88 == v91;
                          goto LABEL_166;
                        case 1:
                          v95 = *(double *)v88 == (double)v91;
                          goto LABEL_166;
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 7:
                        case 8:
                        case 9:
                          goto LABEL_169;
                        case 6:
                          v95 = v91 == (uint64_t)(*(_QWORD *)v88 << 8) >> 8 && *(_DWORD *)(v88 + 8) == 0;
LABEL_166:
                          v63 = v95;
LABEL_169:
                          if (SBYTE7(v130) < 0)
                            operator delete(v128);
                          break;
                        default:
                          goto LABEL_195;
                      }
                    }
LABEL_82:
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__p.__r_.__value_.__l.__data_);
                      if (!v63)
                        goto LABEL_102;
                    }
                    else if (!v63)
                    {
                      goto LABEL_102;
                    }
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v125;
                    v74 = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v126, &v125, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
                    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v74 + 5, (uint64_t *)&__idx);
LABEL_102:
                    v71 = (std::__shared_weak_count *)*((_QWORD *)&__idx + 1);
                    if (!*((_QWORD *)&__idx + 1))
                      goto LABEL_107;
                    v75 = (unint64_t *)(*((_QWORD *)&__idx + 1) + 8);
                    do
                      v73 = __ldaxr(v75);
                    while (__stlxr(v73 - 1, v75));
                    break;
                  default:
                    goto LABEL_195;
                }
              }
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
LABEL_107:
              v76 = (std::__shared_weak_count *)v137.__r_.__value_.__l.__size_;
              if (v137.__r_.__value_.__l.__size_)
              {
                v77 = (unint64_t *)(v137.__r_.__value_.__l.__size_ + 8);
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              v17 = v125 + 1;
              v125 = v17;
              v16 = *(_QWORD *)(v15 + 8);
              if (v17 >= (*(_QWORD *)(v15 + 16) - v16) >> 5)
                goto LABEL_171;
              continue;
            default:
              goto LABEL_195;
          }
        default:
LABEL_195:
          result = turi::flexible_type_fail(0);
          __break(1u);
          break;
      }
      break;
    }
  }
  return result;
}

void sub_218111FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a26 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v37 - 112);
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

_QWORD *turi::any::operator=<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *a1;
  if (v4
    && (v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4),
  {
    v6 = (uint64_t **)(*a1 + 8);
    if (v6 != (uint64_t **)a2)
      std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>(v6, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  }
  else
  {
    turi::any::any<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>(&v10, a2);
    v7 = v10;
    v10 = *a1;
    v8 = v10;
    *a1 = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x38uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = 0;
    v12[6] = 0;
    v15 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

_QWORD *turi::any::any<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D92E358;
  std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>::map[abi:ne180100](v4 + 1, a2);
  *a1 = v4;
  return a1;
}

void sub_2181123FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

uint64_t *__cxx_global_var_init_17_0()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

void __cxx_global_var_init_18()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t *__cxx_global_var_init_19()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_20()
{
  uint64_t *result;

  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_21()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_22()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_23()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_24()
{
  uint64_t *result;

  {
    return turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::registry_type::registry_type(&turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::registry);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_optimization_transforms_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::query_eval::naive_partial_materialize(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[296];
  _BYTE v34[296];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 56);
  if (*(_QWORD *)(*a1 + 64) != v6)
  {
    v8 = 0;
    do
    {
      if ((turi::query_eval::planner_node_type_to_attributes(**(unsigned int **)(v6 + 16 * v8)) & 4) == 0)
      {
        v9 = *(_OWORD *)(*(_QWORD *)(*a1 + 56) + 16 * v8);
        v30 = v9;
        if (*((_QWORD *)&v9 + 1))
        {
          v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        turi::query_eval::naive_partial_materialize(&v31, &v30, a2);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
        if (*((_QWORD *)&v30 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v28 = v31;
        v29 = v32;
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }
        turi::query_eval::execute_node((uint64_t)&v28, a2, (uint64_t)v34);
        v17 = v29;
        if (v29)
        {
          v18 = (unint64_t *)&v29->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        turi::sframe::sframe((turi::sframe *)v33, (const turi::sframe *)v34);
        turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node((uint64_t)v33, 0, -1, &v27);
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*(_QWORD *)(*a1 + 56) + 16 * v8, &v27);
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
        if (*((_QWORD *)&v27 + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        turi::sframe::~sframe((turi::sframe *)v33);
        turi::sframe::~sframe((turi::sframe *)v34);
        v23 = v32;
        if (v32)
        {
          v24 = (unint64_t *)&v32->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
      ++v8;
      v5 = *a1;
      v6 = *(_QWORD *)(*a1 + 56);
    }
    while (v8 < (*(_QWORD *)(*a1 + 64) - v6) >> 4);
  }
  v26 = a1[1];
  *a3 = v5;
  a3[1] = v26;
  *a1 = 0;
  a1[1] = 0;
}

void sub_218112864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  turi::sframe::~sframe((turi::sframe *)&a18);
  turi::sframe::~sframe((turi::sframe *)&a55);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void turi::query_eval::execute_node(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  int *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t i;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::string **v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::string *v63;
  std::string *v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  std::string::size_type v81;
  std::string::size_type size;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  file_logger *v101;
  pthread_key_t *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  BOOL v118;
  int *v119;
  std::__shared_weak_count *v120;
  __int128 v121;
  int *v122;
  std::__shared_weak_count *v123;
  uint64_t v124[2];
  int *v125;
  std::__shared_weak_count *v126;
  int *v127;
  std::__shared_weak_count *v128;
  void *p_p_p;
  char *v130;
  char *v131;
  int *v132;
  std::__shared_weak_count *v133;
  std::string v134;
  std::string v135;
  __int128 __p;
  _QWORD *v137;
  std::string *p_p;
  std::string *v139;
  void **p_data;
  std::string **v141;
  int v142;
  std::string v143;
  std::string v144;
  uint64_t *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;

  *(_QWORD *)&v149 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 32))
    goto LABEL_2;
  v12 = *(int **)a1;
  v13 = **(_DWORD **)a1;
  if (v13 == 6)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sarray");
    v50 = *(_QWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v12 + 8), (const void **)&__p);
    if (SHIBYTE(v137) < 0)
      operator delete((void *)__p);
    v51 = *(int **)a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "begin_index");
    v52 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v51 + 2), (const void **)&__p);
    v53 = 0;
    switch(*(_BYTE *)(v52 + 12))
    {
      case 0:
        if (!*(_QWORD *)v52)
          goto LABEL_120;
        goto LABEL_118;
      case 1:
        if (*(double *)v52 == 0.0)
          goto LABEL_120;
        goto LABEL_118;
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
        goto LABEL_76;
      case 6:
        if ((*(_QWORD *)v52 & 0xFFFFFFFFFFFFFFLL) == 0 && *(_DWORD *)(v52 + 8) == 0)
        {
LABEL_120:
          v69 = *(int **)a1;
          std::string::basic_string[abi:ne180100]<0>(&p_p, "end_index");
          v70 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v69 + 2), (const void **)&p_p);
          v71 = *(_QWORD *)(v50 + 8);
          if (*(_BYTE *)(v71 + 248)
            && (v72 = *(uint64_t **)(v71 + 80), (v73 = *(_QWORD *)(v71 + 88) - (_QWORD)v72) != 0))
          {
            v74 = 0;
            v75 = v73 >> 3;
            if (v75 <= 1)
              v75 = 1;
            do
            {
              v76 = *v72++;
              v74 += v76;
              --v75;
            }
            while (v75);
          }
          else
          {
            v74 = 0;
          }
          v53 = 0;
          switch(*(_BYTE *)(v70 + 12))
          {
            case 0:
              v118 = *(_QWORD *)v70 == v74;
              goto LABEL_207;
            case 1:
              v118 = *(double *)v70 == (double)v74;
              goto LABEL_207;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_210;
            case 6:
              v118 = v74 == (uint64_t)(*(_QWORD *)v70 << 8) >> 8 && *(_DWORD *)(v70 + 8) == 0;
LABEL_207:
              v53 = v118;
LABEL_210:
              if (SHIBYTE(p_data) < 0)
                operator delete(p_p);
              break;
            default:
              goto LABEL_224;
          }
        }
        else
        {
LABEL_118:
          v53 = 0;
        }
LABEL_76:
        if (SHIBYTE(v137) < 0)
          operator delete((void *)__p);
        if (!v53)
          goto LABEL_2;
        v55 = *(uint64_t **)(v50 + 8);
        v54 = *(_QWORD *)(v50 + 16);
        v145 = v55;
        v146 = v54;
        if (v54)
        {
          v56 = (unint64_t *)(v54 + 8);
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
        }
        __p = 0uLL;
        v137 = 0;
        p_p = (std::string *)&__p;
        LOBYTE(v139) = 0;
        v58 = operator new(0x10uLL);
        *(_QWORD *)&__p = v58;
        *((_QWORD *)&__p + 1) = v58;
        v137 = v58 + 2;
        v59 = v146;
        *v58 = v55;
        v58[1] = v59;
        if (v59)
        {
          v60 = (unint64_t *)(v59 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        *((_QWORD *)&__p + 1) = v58 + 2;
        std::string::basic_string[abi:ne180100]<0>(&v147, "X1");
        p_p = 0;
        v139 = 0;
        p_data = 0;
        LOBYTE(v130) = 0;
        p_p = (std::string *)operator new(0x18uLL);
        v139 = p_p;
        p_data = (void **)&p_p[1].__r_.__value_.__l.__data_;
        v139 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, &v147, &v149, p_p);
        turi::sframe::sframe(a3, (uint64_t **)&__p, (const void ***)&p_p, 1);
        p_p_p = &p_p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
        if (SHIBYTE(v148) < 0)
          operator delete((void *)v147);
        p_p = (std::string *)&__p;
        std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v145);
        v62 = *(unsigned __int8 *)(a2 + 71);
        if ((v62 & 0x80u) != 0)
          v62 = *(_QWORD *)(a2 + 56);
        if (!v62)
          return;
        v63 = *(std::string **)(a2 + 72);
        v64 = *(std::string **)(a2 + 80);
        if (v63 == v64)
          std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
        *(_QWORD *)&__p = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (char *)v63) >> 3);
        if ((_DWORD)__p != 1)
        {
          p_p = (std::string *)&__p;
          turi::query_eval::execute_node(std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::materialize_options const&)::$_1::operator()();
        }
        turi::sframe::set_column_name(a3, 0, v63);
        if (*(char *)(a2 + 71) < 0)
          std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
        else
          v134 = *(std::string *)(a2 + 48);
        turi::sframe::save((turi *)a3, (uint64_t)&v134);
        if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v67 = (void *)v134.__r_.__value_.__r.__words[0];
        break;
      default:
LABEL_224:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
    goto LABEL_110;
  }
  if (v13 == 12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "direct_source_mapping");
    v23 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v12 + 8), (const void **)&__p);
    if (SHIBYTE(v137) < 0)
      operator delete((void *)__p);
    if (!v23)
      goto LABEL_2;
    v24 = *(int **)a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "direct_source_mapping");
    v25 = (_QWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v24 + 8), (const void **)&__p);
    std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>::map[abi:ne180100]((uint64_t *)&v147, *v25 + 8);
    if (SHIBYTE(v137) < 0)
      operator delete((void *)__p);
    if (!v148)
    {
      std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy((uint64_t)&v147, *((_QWORD **)&v147 + 1));
      goto LABEL_2;
    }
    v26 = *(std::__shared_weak_count **)(a1 + 8);
    v132 = *(int **)a1;
    v133 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
    v29 = turi::query_eval::infer_planner_node_num_output_columns((uint64_t *)&v132);
    v30 = v133;
    if (v133)
    {
      v31 = (unint64_t *)&v133->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    p_p_p = 0;
    v130 = 0;
    v131 = 0;
    std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::vector(&v145, v29);
    if (v29)
    {
      for (i = 0; i != v29; ++i)
      {
        v34 = (uint64_t *)*((_QWORD *)&v147 + 1);
        if (!*((_QWORD *)&v147 + 1))
          goto LABEL_51;
        v35 = (uint64_t *)&v147 + 1;
        do
        {
          v36 = v34;
          v37 = v35;
          v38 = v34[4];
          if (v38 >= i)
            v35 = v34;
          else
            ++v34;
          v34 = (uint64_t *)*v34;
        }
        while (v34);
        if (v35 == (uint64_t *)((char *)&v147 + 8))
          goto LABEL_51;
        if (v38 < i)
          v36 = v37;
        if (i >= v36[4])
        {
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v145[2 * i], v35 + 5);
        }
        else
        {
LABEL_51:
          v39 = v130;
          if (v130 >= v131)
          {
            v41 = (char *)p_p_p;
            v42 = (v130 - (_BYTE *)p_p_p) >> 3;
            v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v44 = v131 - (_BYTE *)p_p_p;
            if ((v131 - (_BYTE *)p_p_p) >> 2 > v43)
              v43 = v44 >> 2;
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
              v45 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v45 = v43;
            if (v45)
            {
              v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v131, v45);
              v41 = (char *)p_p_p;
              v39 = v130;
            }
            else
            {
              v46 = 0;
            }
            v47 = &v46[8 * v42];
            *(_QWORD *)v47 = i;
            v40 = v47 + 8;
            while (v39 != v41)
            {
              v48 = *((_QWORD *)v39 - 1);
              v39 -= 8;
              *((_QWORD *)v47 - 1) = v48;
              v47 -= 8;
            }
            p_p_p = v47;
            v130 = v40;
            v131 = &v46[8 * v45];
            if (v41)
              operator delete(v41);
          }
          else
          {
            *(_QWORD *)v130 = i;
            v40 = v39 + 8;
          }
          v130 = v40;
        }
      }
    }
    if (p_p_p != v130)
    {
      p_p = *(std::string **)a2;
      v49 = &v139;
      std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)&v139, a2 + 8);
      v142 = *(_DWORD *)(a2 + 40);
      if (*(char *)(a2 + 71) < 0)
        std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
      else
        v143 = *(std::string *)(a2 + 48);
      memset(&v144, 0, sizeof(v144));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v144, *(__int128 **)(a2 + 72), *(__int128 **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
      size = v144.__r_.__value_.__l.__size_;
      v81 = v144.__r_.__value_.__r.__words[0];
      while (size != v81)
      {
        if (*(char *)(size - 1) < 0)
          operator delete(*(void **)(size - 24));
        size -= 24;
      }
      v144.__r_.__value_.__l.__size_ = v81;
      v83 = *(std::__shared_weak_count **)(a1 + 8);
      v127 = *(int **)a1;
      v128 = v83;
      if (v83)
      {
        v84 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t *)&v127, (uint64_t **)&p_p_p, &__p);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1, &__p);
      v86 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v89 = v128;
      if (v128)
      {
        v90 = (unint64_t *)&v128->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      v92 = *(std::__shared_weak_count **)(a1 + 8);
      v125 = *(int **)a1;
      v126 = v92;
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      turi::query_eval::optimization_engine::optimize_planner_graph((uint64_t *)&v125, (uint64_t)&p_p, &__p);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1, &__p);
      v95 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v96 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v98 = v126;
      if (v126)
      {
        v99 = (unint64_t *)&v126->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      if (*((int *)global_logger() + 169) <= 2)
      {
        v101 = log_stream_dispatch<true>::exec((cppipc *)2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "execute_node", 126, 1);
        v102 = file_logger::operator<<((pthread_key_t *)v101, "Materializing only column subset: ");
        v103 = *(_QWORD *)(a1 + 8);
        v124[0] = *(_QWORD *)a1;
        v124[1] = v103;
        if (v103)
        {
          v104 = (unint64_t *)(v103 + 8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
        }
        v106 = file_logger::operator<<<std::shared_ptr<turi::query_eval::planner_node>>((uint64_t)v102, v124);
        file_logger::operator<<(v106, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v124);
      }
      v107 = *(std::__shared_weak_count **)(a1 + 8);
      v122 = *(int **)a1;
      v123 = v107;
      if (v107)
      {
        v108 = (unint64_t *)&v107->__shared_owners_;
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }
      turi::query_eval::execute_node_impl((uint64_t *)&v122, (unint64_t *)&p_p, (turi::sframe *)&__p);
      v110 = v123;
      if (v123)
      {
        v111 = (unint64_t *)&v123->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      if (v130 != p_p_p)
      {
        v113 = 0;
        do
        {
          turi::sframe::select_column((uint64_t)&__p, v113, &v121);
          std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)&v145[2 * *((_QWORD *)p_p_p + v113)], &v121);
          v114 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
          if (*((_QWORD *)&v121 + 1))
          {
            v115 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 - 1, v115));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
          ++v113;
        }
        while (v113 < (v130 - (_BYTE *)p_p_p) >> 3);
      }
      turi::sframe::~sframe((turi::sframe *)&__p);
      *(_QWORD *)&__p = &v144;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v143.__r_.__value_.__l.__data_);
      if (v141 == &v139)
      {
        v117 = 4;
        goto LABEL_196;
      }
      if (v141)
      {
        v117 = 5;
        v49 = v141;
LABEL_196:
        (*((void (**)(std::string **))&(*v49)->__r_.__value_.__l.__data_ + v117))(v49);
      }
    }
    turi::sframe::sframe(a3, &v145, (const void ***)(a2 + 72), 1);
    *(_QWORD *)&__p = &v145;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (p_p_p)
    {
      v130 = (char *)p_p_p;
      operator delete(p_p_p);
    }
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy((uint64_t)&v147, *((_QWORD **)&v147 + 1));
    return;
  }
  if (v13 != 7)
  {
LABEL_2:
    v6 = *(std::__shared_weak_count **)(a1 + 8);
    v119 = *(int **)a1;
    v120 = v6;
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    turi::query_eval::execute_node_impl((uint64_t *)&v119, (unint64_t *)a2, (turi::sframe *)a3);
    v9 = v120;
    if (v120)
    {
      v10 = (unint64_t *)&v120->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sframe");
  v14 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v12 + 8), (const void **)&__p);
  turi::sframe::sframe((turi::sframe *)a3, (const turi::sframe *)(*(_QWORD *)v14 + 8));
  if (SHIBYTE(v137) < 0)
    operator delete((void *)__p);
  v15 = *(int **)a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "begin_index");
  v16 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v15 + 2), (const void **)&__p);
  v17 = 0;
  switch(*(_BYTE *)(v16 + 12))
  {
    case 0:
      if (*(_QWORD *)v16)
        goto LABEL_130;
      goto LABEL_132;
    case 1:
      if (*(double *)v16 == 0.0)
        goto LABEL_132;
LABEL_130:
      v17 = 0;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
      break;
    case 6:
      v17 = 0;
      if ((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFLL) == 0 && !*(_DWORD *)(v16 + 8))
      {
LABEL_132:
        v77 = *(int **)a1;
        std::string::basic_string[abi:ne180100]<0>(&p_p, "end_index");
        v78 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v77 + 2), (const void **)&p_p);
        if (*(_BYTE *)(a3 + 288))
          v79 = *(_QWORD *)(a3 + 32);
        else
          v79 = 0;
        v17 = 0;
        switch(*(_BYTE *)(v78 + 12))
        {
          case 0:
            v80 = *(_QWORD *)v78 == v79;
            goto LABEL_216;
          case 1:
            v80 = *(double *)v78 == (double)v79;
            goto LABEL_216;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_219;
          case 6:
            v80 = v79 == (uint64_t)(*(_QWORD *)v78 << 8) >> 8 && *(_DWORD *)(v78 + 8) == 0;
LABEL_216:
            v17 = v80;
LABEL_219:
            if (SHIBYTE(p_data) < 0)
              operator delete(p_p);
            break;
          default:
            goto LABEL_224;
        }
      }
      break;
    default:
      goto LABEL_224;
  }
  if ((SHIBYTE(v137) & 0x80000000) == 0)
  {
    if (v17)
      goto LABEL_19;
    goto LABEL_95;
  }
  operator delete((void *)__p);
  if (!v17)
  {
LABEL_95:
    turi::sframe::~sframe((turi::sframe *)a3);
    goto LABEL_2;
  }
LABEL_19:
  v18 = *(unsigned __int8 *)(a2 + 71);
  v19 = v18;
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a2 + 56);
  if (v18)
  {
    v20 = *(_QWORD *)(a2 + 72);
    v21 = *(_QWORD *)(a2 + 80);
    if (v20 == v21)
    {
      v22 = *(void ***)(a3 + 24);
    }
    else
    {
      v22 = *(void ***)(a3 + 24);
      p_p = (std::string *)v22;
      *(_QWORD *)&v147 = 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3);
      if (v22 != (void **)v147)
      {
        *(_QWORD *)&__p = &p_p;
        *((_QWORD *)&__p + 1) = &v147;
        turi::query_eval::execute_node(std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::materialize_options const&)::$_0::operator()();
      }
    }
    if (v22)
    {
      v65 = 0;
      v66 = 0;
      do
      {
        turi::sframe::set_column_name(a3, v66++, (std::string *)(*(_QWORD *)(a2 + 72) + v65));
        v65 += 24;
      }
      while (v66 < *(_QWORD *)(a3 + 24));
      v19 = *(_BYTE *)(a2 + 71);
    }
    if (v19 < 0)
      std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
    else
      v135 = *(std::string *)(a2 + 48);
    turi::sframe::save((turi *)a3, (uint64_t)&v135);
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    {
      v67 = (void *)v135.__r_.__value_.__r.__words[0];
LABEL_110:
      operator delete(v67);
    }
  }
}

void sub_2181135F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  turi::sframe *v46;
  uint64_t v47;

  if (*(char *)(v47 - 225) < 0)
    operator delete(*(void **)(v47 - 248));
  if (a46 < 0)
    operator delete(__p);
  turi::sframe::~sframe(v46);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::planner::materialize@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, const turi::sframe *a3@<X8>)
{
  turi::thread *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *locale;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int *v32;
  file_logger *v33;
  file_logger *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::locale *v48;
  std::string *v49;
  std::locale *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  int *v65;
  file_logger *v66;
  file_logger *v67;
  _QWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  const std::locale::facet *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v97;
  _QWORD *exception;
  _QWORD *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  int *v103;
  std::__shared_weak_count *v104;
  __int128 v105;
  __int128 v106;
  int *v107;
  std::__shared_weak_count *v108;
  int *v109;
  std::__shared_weak_count *v110;
  int *v111;
  std::__shared_weak_count *v112;
  int *v113;
  std::__shared_weak_count *v114;
  _BYTE v115[296];
  std::locale v116[4];
  std::locale *v117;
  int v118;
  std::string v119;
  std::string v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v6 = (turi::thread *)pthread_mutex_lock(&turi::query_eval::global_query_lock);
  if (!*(_QWORD *)a2)
    *(_QWORD *)a2 = turi::thread::cpu_count(v6);
  v7 = *(std::__shared_weak_count **)(a1 + 8);
  v113 = *(int **)a1;
  v114 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if ((turi::query_eval::is_source_node((int **)a1) & 1) == 0)
  {
    v10 = (int *)global_logger();
    if (v10[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v10))
        goto LABEL_142;
      v11 = (file_logger *)global_logger();
      started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "materialize", 251, 1);
      v13 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v13 && *((_BYTE *)v13 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Materializing: ", 15);
      v14 = *(std::__shared_weak_count **)(a1 + 8);
      v111 = *(int **)a1;
      v112 = v14;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = file_logger::operator<<<std::shared_ptr<turi::query_eval::planner_node>>((uint64_t)started, (uint64_t *)&v111);
      v18 = pthread_getspecific(*(_QWORD *)(v17 + 592));
      if (v18)
      {
        if (*((_BYTE *)v18 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(v18[2] - 24) + 16));
          v19 = std::locale::use_facet(v116, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
          std::locale::~locale(v116);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v17);
          if (*(_DWORD *)(v17 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      v20 = v112;
      if (v112)
      {
        v21 = (unint64_t *)&v112->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
  if (!*(_BYTE *)(a2 + 40))
  {
    v23 = *(std::__shared_weak_count **)(a1 + 8);
    v109 = *(int **)a1;
    v110 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    turi::query_eval::optimization_engine::optimize_planner_graph((uint64_t *)&v109, a2, v116);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1, (__int128 *)v116);
    locale = (std::__shared_weak_count *)v116[1].__locale_;
    if (v116[1].__locale_)
    {
      v27 = (unint64_t *)((char *)v116[1].__locale_ + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
        std::__shared_weak_count::__release_weak(locale);
      }
    }
    v29 = v110;
    if (v110)
    {
      v30 = (unint64_t *)&v110->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if ((turi::query_eval::is_source_node((int **)a1) & 1) == 0)
    {
      v32 = (int *)global_logger();
      if (v32[169] <= 2)
      {
        if (!cppipc::must_cancel((cppipc *)v32))
        {
          v33 = (file_logger *)global_logger();
          v34 = file_logger::start_stream(v33, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "materialize", 256, 1);
          v35 = pthread_getspecific(*((_QWORD *)v34 + 74));
          if (v35 && *((_BYTE *)v35 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35 + 2, (uint64_t)"Optimized As: ", 14);
          v36 = *(std::__shared_weak_count **)(a1 + 8);
          v107 = *(int **)a1;
          v108 = v36;
          if (v36)
          {
            v37 = (unint64_t *)&v36->__shared_owners_;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          v39 = file_logger::operator<<<std::shared_ptr<turi::query_eval::planner_node>>((uint64_t)v34, (uint64_t *)&v107);
          v40 = pthread_getspecific(*(_QWORD *)(v39 + 592));
          if (v40)
          {
            if (*((_BYTE *)v40 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(v40[2] - 24) + 16));
              v41 = std::locale::use_facet(v116, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
              std::locale::~locale(v116);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v39);
              if (*(_DWORD *)(v39 + 600) == 7)
              {
                __print_back_trace();
                v99 = __cxa_allocate_exception(8uLL);
                *v99 = "LOG_FATAL encountered";
                __cxa_throw(v99, MEMORY[0x24BEDB718], 0);
              }
            }
          }
          v42 = v108;
          if (v108)
          {
            v43 = (unint64_t *)&v108->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          goto LABEL_54;
        }
LABEL_142:
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
    }
  }
LABEL_54:
  v45 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)&v106 = *(_QWORD *)a1;
  *((_QWORD *)&v106 + 1) = v45;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  if (!*(_BYTE *)(a2 + 43))
    goto LABEL_91;
  v116[0] = *(std::locale *)a2;
  v48 = &v116[1];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)&v116[1], a2 + 8);
  v118 = *(_DWORD *)(a2 + 40);
  if (*(char *)(a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  else
    v119 = *(std::string *)(a2 + 48);
  memset(&v120, 0, sizeof(v120));
  v49 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v120, *(__int128 **)(a2 + 72), *(__int128 **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
  v116[0].__locale_ = (std::locale::__imp *)turi::thread::cpu_count((turi::thread *)v49);
  MEMORY[0x219A19390](&v119, "");
  v50 = v117;
  v117 = 0;
  if (v50 == &v116[1])
  {
    v51 = 4;
    v50 = &v116[1];
    goto LABEL_65;
  }
  if (v50)
  {
    v51 = 5;
LABEL_65:
    (*((void (**)(void))v50->__locale_ + v51))();
  }
  v52 = *(std::__shared_weak_count **)(a1 + 8);
  v103 = *(int **)a1;
  v104 = v52;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  turi::query_eval::partial_materialize((unint64_t *)&v103, (uint64_t)v116, &v105);
  v55 = v105;
  v105 = 0uLL;
  v106 = v55;
  if (v45)
  {
    v56 = (unint64_t *)&v45->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v104;
  if (v104)
  {
    v62 = (unint64_t *)&v104->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  *(_QWORD *)&v105 = &v120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  if (v117 == &v116[1])
  {
    v64 = 4;
  }
  else
  {
    if (!v117)
      goto LABEL_91;
    v64 = 5;
    v48 = v117;
  }
  (*((void (**)(std::locale *))v48->__locale_ + v64))(v48);
LABEL_91:
  v65 = (int *)global_logger();
  if (v65[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v65))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v66 = (file_logger *)global_logger();
    v67 = file_logger::start_stream(v66, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "materialize", 274, 1);
    v68 = pthread_getspecific(*((_QWORD *)v67 + 74));
    if (v68 && *((_BYTE *)v68 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68 + 2, (uint64_t)"Reduced plan: ", 14);
    v102 = v106;
    if (*((_QWORD *)&v106 + 1))
    {
      v69 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = file_logger::operator<<<std::shared_ptr<turi::query_eval::planner_node>>((uint64_t)v67, (uint64_t *)&v102);
    v72 = pthread_getspecific(*(_QWORD *)(v71 + 592));
    if (v72)
    {
      if (*((_BYTE *)v72 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v72 + *(_QWORD *)(v72[2] - 24) + 16));
        v73 = std::locale::use_facet(v116, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10);
        std::locale::~locale(v116);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v71);
        if (*(_DWORD *)(v71 + 600) == 7)
        {
          __print_back_trace();
          v97 = __cxa_allocate_exception(8uLL);
          *v97 = "LOG_FATAL encountered";
          __cxa_throw(v97, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
    if (*((_QWORD *)&v102 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
  }
  if (*(_QWORD *)(a2 + 32))
  {
    v100 = v106;
    if (*((_QWORD *)&v106 + 1))
    {
      v77 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }
    turi::query_eval::execute_node((uint64_t)&v100, a2, (uint64_t)a3);
    v79 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
    if (*((_QWORD *)&v100 + 1))
    {
      v80 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
  }
  else
  {
    v101 = v106;
    if (*((_QWORD *)&v106 + 1))
    {
      v82 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    turi::query_eval::execute_node((uint64_t)&v101, a2, (uint64_t)a3);
    v84 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
    if (*((_QWORD *)&v101 + 1))
    {
      v85 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    turi::sframe::sframe((turi::sframe *)v115, a3);
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node((uint64_t)v115, 0, -1, v116);
    turi::query_eval::planner_node::operator=((uint64_t)v113, (uint64_t)v116[0].__locale_);
    v87 = (std::__shared_weak_count *)v116[1].__locale_;
    if (v116[1].__locale_)
    {
      v88 = (unint64_t *)((char *)v116[1].__locale_ + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    turi::sframe::~sframe((turi::sframe *)v115);
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v114;
  if (v114)
  {
    v94 = (unint64_t *)&v114->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  return pthread_mutex_unlock(&turi::query_eval::global_query_lock);
}

void sub_21811422C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::locale::~locale((std::locale *)(v27 - 168));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  pthread_mutex_unlock(&turi::query_eval::global_query_lock);
  _Unwind_Resume(a1);
}

uint64_t file_logger::operator<<<std::shared_ptr<turi::query_eval::planner_node>>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;

  v4 = pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v4 && *((_BYTE *)v4 + 280))
    turi::query_eval::operator<<(v4 + 2, a2);
  return a1;
}

void turi::query_eval::partial_materialize(unint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  _QWORD **v17;
  _QWORD *v18[2];
  unint64_t v19;
  std::__shared_weak_count *v20;

  if (*(_BYTE *)(a2 + 42))
  {
    v3 = (std::__shared_weak_count *)a1[1];
    v19 = *a1;
    v20 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    turi::query_eval::naive_partial_materialize(&v19, a2, a3);
    v6 = v20;
    if (v20)
    {
      v7 = (unint64_t *)&v20->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v18[0] = 0;
    v18[1] = 0;
    v9 = (std::__shared_weak_count *)a1[1];
    v15 = *a1;
    v16 = v9;
    v17 = v18;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    turi::query_eval::partial_materialize_impl(&v15, a2, (uint64_t)&v17, a3);
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)&v17, v18[0]);
  }
}

void sub_2181144F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::planner_node::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (a1 != a2)
  {
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>((uint64_t **)(a1 + 8), *(_QWORD **)(a2 + 8), (_QWORD *)(a2 + 16));
    std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::any>,std::__tree_node<std::__value_type<std::string,turi::any>,void *> *,long>>((uint64_t **)(a1 + 32), *(__int128 **)(a2 + 32), (__int128 *)(a2 + 40));
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(a1 + 56, *(uint64_t **)(a2 + 56), *(uint64_t **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
  }
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(a1 + 80), (uint64_t *)(a2 + 80));
  return a1;
}

void turi::query_eval::planner::materialize(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::string *v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  int v22;
  std::string __p;
  std::string v24;
  _BYTE v25[296];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *a5 = a4;
  v7 = (uint64_t)(a5 + 1);
  std::function<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator=(a5 + 1, a3);
  v8 = (std::__shared_weak_count *)a2[1];
  v16 = *a2;
  v17 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v19 = *a5;
  v11 = v20;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v20, v7);
  v22 = *((_DWORD *)a5 + 10);
  if (*((char *)a5 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)a5[6], a5[7]);
  else
    __p = *(std::string *)((_BYTE *)a5 + 2);
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, (__int128 *)a5[9], (__int128 *)a5[10], 0xAAAAAAAAAAAAAAABLL * ((a5[10] - a5[9]) >> 3));
  turi::query_eval::planner::materialize((uint64_t)&v16, (uint64_t)&v19, (const turi::sframe *)v25);
  turi::sframe::~sframe((turi::sframe *)v25);
  v18 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v21 == v20)
  {
    v12 = 4;
  }
  else
  {
    if (!v21)
      goto LABEL_14;
    v12 = 5;
    v11 = v21;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
LABEL_14:
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_21811474C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _QWORD *v24;
  uint64_t v26;

  if (a17 == v24)
  {
    v26 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v26 = 5;
    v24 = a17;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v26))(v24);
LABEL_6:
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::function<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

BOOL turi::query_eval::planner::online_materialization_recommended(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = turi::query_eval::infer_planner_node_num_dependency_nodes(&v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5 >= turi::query_eval::SFRAME_MAX_LAZY_NODE_SIZE;
}

void sub_2181148EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::planner::materialize_as_planner_node(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::string *v15;
  _BYTE v16[296];
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  int v20;
  std::string __p;
  std::string v22;
  _BYTE v23[296];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = (std::__shared_weak_count *)a1[1];
  v13 = *a1;
  v14 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v17 = *a2;
  v8 = v18;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)(a2 + 1));
  v20 = *((_DWORD *)a2 + 10);
  if (*((char *)a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)a2[6], a2[7]);
  else
    __p = *(std::string *)((_BYTE *)a2 + 2);
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, (__int128 *)a2[9], (__int128 *)a2[10], 0xAAAAAAAAAAAAAAABLL * ((a2[10] - a2[9]) >> 3));
  turi::query_eval::planner::materialize((uint64_t)&v13, (uint64_t)&v17, (const turi::sframe *)v23);
  v15 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v19 == v18)
  {
    v9 = 4;
    goto LABEL_13;
  }
  if (v19)
  {
    v9 = 5;
    v8 = v19;
LABEL_13:
    (*(void (**)(_QWORD *))(*v8 + 8 * v9))(v8);
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  turi::sframe::sframe((turi::sframe *)v16, (const turi::sframe *)v23);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node((uint64_t)v16, 0, -1, a3);
  turi::sframe::~sframe((turi::sframe *)v16);
  turi::sframe::~sframe((turi::sframe *)v23);
}

void sub_218114AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  _QWORD *v53;
  uint64_t v55;

  if ((_QWORD *)a53 == v53)
  {
    v55 = 4;
  }
  else
  {
    if (!a53)
      goto LABEL_6;
    v55 = 5;
    v53 = (_QWORD *)a53;
  }
  (*(void (**)(_QWORD *))(*v53 + 8 * v55))(v53);
LABEL_6:
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::planner::slice(unint64_t *a1@<X1>, std::string::size_type a2@<X2>, char *a3@<X3>, uint64_t *a4@<X8>)
{
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  _QWORD **v43;
  _QWORD *v44[2];
  void **v45;
  _OWORD v46[2];
  __int128 v47;
  void *__p[2];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _BYTE v52[40];
  void *v53;
  char v54;
  _QWORD v55[4];

  v55[3] = *MEMORY[0x24BDAC8D0];
  v44[0] = 0;
  v44[1] = 0;
  v43 = v44;
  if (turi::query_eval::is_linear_graph(a1))
    goto LABEL_43;
  v51 = 0;
  memset(&v52[24], 0, 11);
  v52[35] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v53, "");
  memset(v55, 0, 24);
  v8 = a1[1];
  v40 = *a1;
  v41 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  turi::query_eval::partial_materialize(&v40, (uint64_t)&v51, &v42);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a1, &v42);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!turi::query_eval::is_linear_graph(a1))
  {
    v17 = a1[1];
    v38 = *a1;
    v39 = (std::__shared_weak_count *)v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    *(_OWORD *)__p = 0u;
    memset(v46, 0, sizeof(v46));
    BYTE11(v47) = 1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    *((_QWORD *)&v49 + 1) = 0;
    v50 = 0uLL;
    turi::query_eval::planner::materialize_as_planner_node((uint64_t *)&v38, (uint64_t *)v46, &v42);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a1, &v42);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v45 = (void **)&v49 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v45);
    if (SBYTE7(v49) < 0)
      operator delete(__p[0]);
    v23 = (_QWORD *)v47;
    if ((_OWORD *)v47 == (_OWORD *)((char *)v46 + 8))
    {
      v24 = 4;
      v23 = (_QWORD *)v46 + 1;
    }
    else
    {
      if (!(_QWORD)v47)
      {
LABEL_31:
        v25 = v39;
        if (v39)
        {
          v26 = (unint64_t *)&v39->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        goto LABEL_36;
      }
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
    goto LABEL_31;
  }
LABEL_36:
  *(_QWORD *)&v42 = v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (v54 < 0)
    operator delete(v53);
  v28 = *(_QWORD **)&v52[24];
  if (*(_BYTE **)&v52[24] == v52)
  {
    v29 = 4;
    v28 = v52;
  }
  else
  {
    if (!*(_QWORD *)&v52[24])
      goto LABEL_43;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_43:
  if (!turi::query_eval::is_linear_graph(a1))
    turi::query_eval::planner::slice(std::shared_ptr<turi::query_eval::planner_node> &,unsigned long,unsigned long)::$_0::operator()();
  v30 = a1[1];
  v36 = *a1;
  v37 = (std::__shared_weak_count *)v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  turi::query_eval::make_sliced_graph((uint64_t *)&v36, a2, a3, (uint64_t)&v43, a4);
  v33 = v37;
  if (v37)
  {
    v34 = (unint64_t *)&v37->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)&v43, v44[0]);
}

void sub_218114EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD *);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  turi::query_eval::materialize_options::~materialize_options((void **)va2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  turi::query_eval::materialize_options::~materialize_options((void **)(v3 - 168));
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)va1, v14);
  _Unwind_Resume(a1);
}

void turi::query_eval::planner::slice(std::shared_ptr<turi::query_eval::planner_node> &,unsigned long,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_linear_graph(tip)", 20);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "operator()", 330, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::planner::slice(std::shared_ptr<turi::query_eval::planner_node> &,unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181150B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

BOOL turi::query_eval::planner::test_equal_length(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  __int16 v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int *v21;
  file_logger *v22;
  file_logger *v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int *v32;
  file_logger *v33;
  file_logger *started;
  _QWORD *v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int16 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *exception;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  std::locale v61;
  _OWORD v62[2];
  __int128 v63;
  void *__p[2];
  __int128 v65;
  __int128 v66;
  _BYTE v67[296];
  _BYTE v68[32];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[296];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v5 = turi::query_eval::prove_equal_length(a2, a3);
  v6 = HIBYTE(v5);
  if ((_BYTE)v5)
    return v6 != 0;
  v7 = a3[1];
  v59 = *a3;
  v60 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = turi::query_eval::infer_planner_node_length((uint64_t)&v59);
  v11 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10 == -1)
  {
    v32 = (int *)global_logger();
    if (v32[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v32))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v33 = (file_logger *)global_logger();
      started = file_logger::start_stream(v33, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "test_equal_length", 341, 1);
      v35 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v35 && *((_BYTE *)v35 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35 + 2, (uint64_t)"Unable to prove equi-length. Materializing RHS", 46);
      v36 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v36)
      {
        if (*((_BYTE *)v36 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(v36[2] - 24) + 16));
          v37 = std::locale::use_facet(&v61, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
          std::locale::~locale(&v61);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    v38 = a3[1];
    v57 = *a3;
    v58 = (std::__shared_weak_count *)v38;
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    memset(v68, 0, sizeof(v68));
    BYTE11(v69) = 1;
    std::string::basic_string[abi:ne180100]<0>(&v70, "");
    v72 = 0uLL;
    *((_QWORD *)&v71 + 1) = 0;
    turi::query_eval::planner::materialize((uint64_t)&v57, (uint64_t)v68, (const turi::sframe *)v73);
    turi::sframe::~sframe((turi::sframe *)v73);
    v61.__locale_ = (std::locale::__imp *)((char *)&v71 + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    if (SBYTE7(v71) < 0)
      operator delete((void *)v70);
    v41 = (_QWORD *)v69;
    if ((_BYTE *)v69 == &v68[8])
    {
      v42 = 4;
      v41 = &v68[8];
    }
    else
    {
      if (!(_QWORD)v69)
      {
LABEL_54:
        v43 = v58;
        if (v58)
        {
          v44 = (unint64_t *)&v58->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = turi::query_eval::prove_equal_length(a2, a3);
        v6 = HIBYTE(v46);
        if ((_BYTE)v46)
          return v6 != 0;
        goto LABEL_11;
      }
      v42 = 5;
    }
    (*(void (**)(void))(*v41 + 8 * v42))();
    goto LABEL_54;
  }
LABEL_11:
  v14 = a2[1];
  v55 = *a2;
  v56 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = turi::query_eval::infer_planner_node_length((uint64_t)&v55);
  v18 = v56;
  if (v56)
  {
    v19 = (unint64_t *)&v56->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v17 == -1)
  {
    v21 = (int *)global_logger();
    if (v21[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v21))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v22 = (file_logger *)global_logger();
      v23 = file_logger::start_stream(v22, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "test_equal_length", 346, 1);
      v24 = pthread_getspecific(*((_QWORD *)v23 + 74));
      if (v24 && *((_BYTE *)v24 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"Still unable to prove equi-length. Materializing LHS", 52);
      v25 = pthread_getspecific(*((_QWORD *)v23 + 74));
      if (v25)
      {
        if (*((_BYTE *)v25 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(v25[2] - 24) + 16));
          v26 = std::locale::use_facet(&v61, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
          std::locale::~locale(&v61);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v23);
          if (*((_DWORD *)v23 + 150) == 7)
          {
            __print_back_trace();
            v52 = __cxa_allocate_exception(8uLL);
            *v52 = "LOG_FATAL encountered";
            __cxa_throw(v52, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    v27 = a2[1];
    v53 = *a2;
    v54 = (std::__shared_weak_count *)v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    *(_OWORD *)__p = 0u;
    memset(v62, 0, sizeof(v62));
    BYTE11(v63) = 1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    *((_QWORD *)&v65 + 1) = 0;
    v66 = 0uLL;
    turi::query_eval::planner::materialize((uint64_t)&v53, (uint64_t)v62, (const turi::sframe *)v67);
    turi::sframe::~sframe((turi::sframe *)v67);
    v61.__locale_ = (std::locale::__imp *)((char *)&v65 + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    if (SBYTE7(v65) < 0)
      operator delete(__p[0]);
    v30 = (_QWORD *)v63;
    if ((_OWORD *)v63 == (_OWORD *)((char *)v62 + 8))
    {
      v31 = 4;
      v30 = (_QWORD *)v62 + 1;
    }
    else
    {
      if (!(_QWORD)v63)
        goto LABEL_63;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_63:
    v47 = v54;
    if (v54)
    {
      v48 = (unint64_t *)&v54->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v6 = ((unsigned __int16)turi::query_eval::prove_equal_length(a2, a3) >> 8);
  }
  return v6 != 0;
}

void sub_218115704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::locale::~locale((std::locale *)va);
  _Unwind_Resume(a1);
}

void turi::query_eval::execute_node(std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::materialize_options const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sf.num_columns()", 16);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"exec_params.output_column_names.size()", 38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "operator()", 62, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::execute_node(std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::materialize_options const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218115964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::execute_node(std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::materialize_options const&)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"1", 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"exec_params.output_column_names.size()", 38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "operator()", 81, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::execute_node(std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::materialize_options const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218115B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::execute_node_impl(uint64_t *a1@<X0>, unint64_t *a2@<X1>, turi::sframe *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  void **v20;
  _QWORD *v21[2];
  uint64_t *v22[3];

  if (turi::query_eval::is_parallel_slicable((int **)a1) && (v6 = *a2) != 0)
  {
    std::vector<std::shared_ptr<turi::query_eval::planner_node>>::vector(v22, *a2);
    v7 = 0;
    do
    {
      v21[0] = 0;
      v21[1] = 0;
      v20 = (void **)v21;
      v8 = a1[1];
      v17 = *a1;
      v18 = (std::__shared_weak_count *)v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      turi::query_eval::make_segmented_graph(&v17, v7, v6, (uint64_t)&v20, (uint64_t *)&v19);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)&v22[0][2 * v7], &v19);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)&v20, v21[0]);
      ++v7;
    }
    while (v7 != v6);
    turi::query_eval::subplan_executor::run_concat((uint64_t)&v20, v22, (uint64_t)a2, a3);
    v20 = (void **)v22;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
  else
  {
    turi::query_eval::subplan_executor::run(a1, (uint64_t)a2, a3);
  }
}

void sub_218115D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void sub_218115F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::query_eval::partial_materialize_impl(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  unint64_t *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[296];
  _BYTE v81[296];
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD **)(a3 + 8);
  v9 = *a1;
  if (!v8)
  {
LABEL_6:
    v12 = v9 + 56;
    v11 = *(_QWORD *)(v9 + 56);
    if (*(_QWORD *)(v12 + 8) == v11)
      goto LABEL_27;
    v13 = 0;
    do
    {
      v14 = *(_OWORD *)(v11 + 16 * v13);
      v78 = v14;
      if (*((_QWORD *)&v14 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      turi::query_eval::partial_materialize_impl(&v79, &v78, a2, a3);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*(_QWORD *)(*a1 + 56) + 16 * v13, &v79);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
      if (*((_QWORD *)&v78 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      ++v13;
      v11 = *(_QWORD *)(*a1 + 56);
      v23 = *(_QWORD *)(*a1 + 64);
    }
    while (v13 < (v23 - v11) >> 4);
    if (v11 == v23)
    {
LABEL_27:
      *(_QWORD *)&v79 = a1;
      v24 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a3, a1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v79);
    }
    else
    {
      if ((turi::query_eval::consumes_inputs_at_same_rates((int **)a1) & 1) == 0)
      {
        v29 = *(uint64_t **)(*a1 + 56);
        v30 = *(uint64_t **)(*a1 + 64);
        while (v29 != v30)
        {
          v31 = v29[1];
          v76 = *v29;
          v77 = (std::__shared_weak_count *)v31;
          if (v31)
          {
            v32 = (unint64_t *)(v31 + 8);
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          turi::query_eval::optimization_engine::optimize_planner_graph(&v76, a2, &v79);
          v34 = v77;
          if (v77)
          {
            p_shared_owners = (unint64_t *)&v77->__shared_owners_;
            do
              v36 = __ldaxr(p_shared_owners);
            while (__stlxr(v36 - 1, p_shared_owners));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v73 = v79;
          if (*((_QWORD *)&v79 + 1))
          {
            v37 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          turi::query_eval::execute_node((uint64_t)&v73, a2, (uint64_t)v81);
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node((uint64_t)v81, 0, -1, &v74);
          turi::query_eval::planner_node::operator=(*v29, (uint64_t)v74);
          v39 = v75;
          if (v75)
          {
            v40 = (unint64_t *)&v75->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          turi::sframe::~sframe((turi::sframe *)v81);
          v42 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
          if (*((_QWORD *)&v73 + 1))
          {
            v43 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v45 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
          if (*((_QWORD *)&v79 + 1))
          {
            v46 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v29 += 2;
        }
      }
      if ((turi::query_eval::is_linear_transform((int **)a1) & 1) == 0
        && !turi::query_eval::is_sublinear_transform((int **)a1))
      {
        v48 = a1[1];
        v71 = *a1;
        v72 = (std::__shared_weak_count *)v48;
        if (v48)
        {
          v49 = (unint64_t *)(v48 + 8);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        turi::query_eval::optimization_engine::optimize_planner_graph((uint64_t *)&v71, a2, &v79);
        v51 = v72;
        if (v72)
        {
          v52 = (unint64_t *)&v72->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v70 = v79;
        if (*((_QWORD *)&v79 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        turi::query_eval::execute_node((uint64_t)&v70, a2, (uint64_t)v80);
        turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node((uint64_t)v80, 0, -1, &v74);
        turi::query_eval::planner_node::operator=(*a1, (uint64_t)v74);
        v56 = v75;
        if (v75)
        {
          v57 = (unint64_t *)&v75->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        turi::sframe::~sframe((turi::sframe *)v80);
        v59 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v60 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v74 = a1;
        v62 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a3, a1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v74);
        std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v62 + 6, (uint64_t *)a1);
        v74 = a1;
        v63 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a3, a1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v74);
        v64 = v63[7];
        *a4 = v63[6];
        a4[1] = v64;
        if (v64)
        {
          v65 = (unint64_t *)(v64 + 1);
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        v67 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (*((_QWORD *)&v79 + 1))
        {
          v68 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        return;
      }
      *(_QWORD *)&v79 = a1;
      v24 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a3, a1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v79);
    }
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v24 + 6, (uint64_t *)a1);
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  while (1)
  {
    v10 = v8[4];
    if (v9 >= v10)
      break;
LABEL_5:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_6;
  }
  if (v10 < v9)
  {
    ++v8;
    goto LABEL_5;
  }
  *(_QWORD *)&v79 = a1;
  v25 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a3, a1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v79);
  v26 = v25[7];
  *a4 = v25[6];
  a4[1] = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
}

void sub_218116584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  turi::sframe::~sframe((turi::sframe *)&a24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,turi::flexible_type &>::operator=[abi:ne180100]<std::string const,turi::flexible_type,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 4));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_multi<std::pair<std::string const,turi::flexible_type> const&>(v5, (std::string *)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_218116798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,turi::flexible_type &>::operator=[abi:ne180100]<std::string const,turi::flexible_type,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  unint64_t *v38;
  unint64_t v39;
  void **v41;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(_QWORD *)(a1 + 8);
  if (a2 + 24 != v4)
  {
    switch(*(_BYTE *)(v4 + 12))
    {
      case 2:
        v5 = *(unint64_t **)v4;
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          v8 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          if (*((char *)v8 + 31) < 0)
            operator delete((void *)v8[1]);
          v9 = v8;
          v10 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v11 = *(unint64_t **)v4;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          v14 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v15 = (void *)v14[1];
          if (v15)
          {
            v14[2] = (unint64_t)v15;
            operator delete(v15);
          }
          v9 = v14;
          v10 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v16 = *(unint64_t **)v4;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          v19 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v41 = (void **)(v19 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
          goto LABEL_27;
        }
        break;
      case 5:
        v20 = *(unint64_t **)v4;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v19 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v41 = (void **)(v19 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
LABEL_27:
          v9 = v19;
          v10 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v23 = *(unint64_t **)v4;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v26 + 2);
          v9 = v26;
          v27 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v28 = *(unint64_t **)v4;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = *(unint64_t **)v4;
          if (*(_QWORD *)v4)
          {
            v32 = (void *)v31[6];
            if (v32)
            {
              v31[7] = (unint64_t)v32;
              operator delete(v32);
            }
            v33 = (void *)v31[3];
            if (v33)
            {
              v31[4] = (unint64_t)v33;
              operator delete(v33);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
            v9 = v31;
            v27 = 2071181815;
LABEL_42:
            v10 = v27 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v9, v10);
          }
LABEL_44:
          *(_QWORD *)v4 = 0;
        }
        break;
      default:
        break;
    }
    v34 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(v4 + 5) = *(_QWORD *)(a2 + 29);
    *(_QWORD *)v4 = v34;
    LODWORD(v34) = *(unsigned __int8 *)(a2 + 36);
    *(_BYTE *)(v4 + 12) = v34;
    v35 = v34 > 9;
    v36 = (1 << v34) & 0x33C;
    if (!v35 && v36 != 0)
    {
      v38 = *(unint64_t **)v4;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 + 1, v38));
    }
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_multi<std::pair<std::string const,turi::flexible_type> const&>(uint64_t **a1, std::string *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string const,turi::flexible_type> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_218116AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::any>,std::__tree_node<std::__value_type<std::string,turi::any>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          turi::any::operator=(v8 + 7, (_QWORD *)v9 + 7);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_multi<std::pair<std::string const,turi::any> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_218116C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *turi::any::operator=(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (*a2)
  {
    if (!v4)
      goto LABEL_9;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(*a1);
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
    if (std::type_info::operator==[abi:ne180100](v6, v7))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *a2);
      return a1;
    }
    v3 = *a2;
    if (!*a2)
      v8 = 0;
    else
LABEL_9:
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    v9 = *a1;
    *a1 = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(*a1);
    *a1 = 0;
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_multi<std::pair<std::string const,turi::any> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__construct_node<std::pair<std::string const,turi::any> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::any>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_218116E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::any>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_218116F90(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void __cxx_global_var_init_12_2()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t *__cxx_global_var_init_13_1()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_14_0()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_15_0()
{
  uint64_t *result;

  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_16_1()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_17_1()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_18_0()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

void _GLOBAL__sub_I_planner_cpp()
{
  _QWORD *v0;
  uint64_t v1;
  void *__p[2];
  char v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_MAX_LAZY_NODE_SIZE");
  v5 = 0;
  turi::globals::register_global<long long>::register_global(&turi::query_eval::__SFRAME_MAX_LAZY_NODE_SIZE__register__instance, __p, &turi::query_eval::SFRAME_MAX_LAZY_NODE_SIZE, 1, v4);
  v0 = v5;
  if (v5 == v4)
  {
    v1 = 4;
    v0 = v4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v1 = 5;
  }
  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_6:
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_218117224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _GLOBAL__sub_I_planner_cpp_cold_1((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_planner_node_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::recursive_mutex::~recursive_mutex(pthread_mutex_t *this)
{
  pthread_mutex_destroy(this);
}

pthread_mutex_t *turi::recursive_mutex::recursive_mutex(pthread_mutex_t *this)
{
  pthread_mutexattr_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (pthread_mutexattr_init(&v3))
    turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#1}::operator()();
  if (pthread_mutexattr_settype(&v3, 2))
    turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#2}::operator()();
  if (pthread_mutex_init(this, &v3))
    turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#3}::operator()();
  pthread_mutexattr_destroy(&v3);
  return this;
}

void turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/mutex.hpp", 89);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!error", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/mutex.hpp", "operator()", 105, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218117478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/mutex.hpp", 89);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!error", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/mutex.hpp", "operator()", 107, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181175F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/mutex.hpp", 89);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!error", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/mutex.hpp", "operator()", 109, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218117778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_query_engine_lock_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  turi::recursive_mutex::recursive_mutex(&turi::query_eval::global_query_lock);
  return __cxa_atexit((void (*)(void *))turi::recursive_mutex::~recursive_mutex, &turi::query_eval::global_query_lock, &dword_217E69000);
}

void turi::dir_archive::~dir_archive(void **this)
{
  turi::dir_archive *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void **v6;

  turi::dir_archive::close((turi::dir_archive *)this);
  v2 = (turi::dir_archive *)this[18];
  if (v2 == (turi::dir_archive *)(this + 15))
  {
    v3 = 4;
    v2 = (turi::dir_archive *)(this + 15);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  std::unique_ptr<turi::dir_archive>::reset[abi:ne180100](this + 14, 0);
  v4 = this[11];
  this[11] = 0;
  if (v4)
    (*(void (**)(void *))(*(_QWORD *)v4 + 8))(v4);
  v5 = this[10];
  this[10] = 0;
  if (v5)
    (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 4), this[5]);
  v6 = this + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_21811792C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x218117880);
}

void **turi::dir_archive::close(turi::dir_archive *this)
{
  size_t v2;
  std::string *v3;
  char *v4;
  std::string *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  turi::dir_archive *v14;
  uint64_t v15;
  void **result;
  void ***v17;
  void **v18;
  std::string v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  std::string __p;
  std::string::size_type *p_size;

  if (*((_QWORD *)this + 10))
  {
    if (*((char *)this + 79) >= 0)
      v2 = *((unsigned __int8 *)this + 79);
    else
      v2 = *((_QWORD *)this + 8);
    v3 = &v19;
    std::string::basic_string[abi:ne180100]((uint64_t)&v19, v2 + 1);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v3 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if (v2)
    {
      if (*((char *)this + 79) >= 0)
        v4 = (char *)this + 56;
      else
        v4 = (char *)*((_QWORD *)this + 7);
      memmove(v3, v4, v2);
    }
    *(_WORD *)((char *)&v3->__r_.__value_.__l.__data_ + v2) = 47;
    v5 = std::string::append(&v19, (const std::string::value_type *)turi::DIR_ARCHIVE_INI_FILE);
    __p = *v5;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>((_DWORD *)(*((_QWORD *)this + 10) + 8), 8, (_DWORD *)(*((_QWORD *)this + 10) + 8), 16, (turi::fileio_impl::general_fstream_sink *)(*((_QWORD *)this + 10) + 80), (_DWORD *)(*((_QWORD *)this + 10) + 200));
    v6 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v7 = (_DWORD *)*((_QWORD *)this + 11);
  if (v7)
  {
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>>,boost::iostreams::detail::clear_flags_operation<int>>(v7 + 4, 8, v7 + 4, 16, (turi::fileio_impl::general_fstream_source *)(v7 + 22), v7 + 46);
    v8 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  MEMORY[0x219A19390]((char *)this + 56, "");
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = 0xFFFFFFFFFFFFFFFFLL;
  v19.__r_.__value_.__r.__words[2] = 0;
  v20 = 0;
  v22 = 0;
  v23 = 0;
  v21 = &v22;
  *(_QWORD *)this = -1;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)this + 8));
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v19.__r_.__value_.__r.__words[1];
  v10 = (char *)this + 40;
  v9 = (_QWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 3) = v20;
  v20 = 0;
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = 0uLL;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 32, v9);
  v11 = v22;
  *((_QWORD *)this + 4) = v21;
  *((_QWORD *)this + 5) = v11;
  v12 = v23;
  *((_QWORD *)this + 6) = v23;
  if (v12)
  {
    v11[2] = v10;
    v11 = 0;
    v21 = &v22;
    v22 = 0;
    v23 = 0;
  }
  else
  {
    *((_QWORD *)this + 4) = v10;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v21, v11);
  p_size = &v19.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
  *((_QWORD *)this + 12) = 0;
  v13 = *((_QWORD *)this + 18);
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
    v14 = (turi::dir_archive *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v14 == (turi::dir_archive *)((char *)this + 120))
    {
      v15 = 4;
      v14 = (turi::dir_archive *)((char *)this + 120);
    }
    else
    {
      if (!v14)
        goto LABEL_30;
      v15 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  }
LABEL_30:
  v18 = (void **)*((_QWORD *)this + 14);
  v17 = (void ***)((char *)this + 112);
  result = v18;
  if (v18)
  {
    turi::dir_archive::close((turi::dir_archive *)result);
    return std::unique_ptr<turi::dir_archive>::reset[abi:ne180100](v17, 0);
  }
  return result;
}

void sub_218117BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void turi::dir_archive_impl::archive_index_information::~archive_index_information(turi::dir_archive_impl::archive_index_information *this)
{
  void **v2;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void turi::check_directory_writable(uint64_t a1, int a2)
{
  BOOL is_writable_protocol;
  int v5;
  _BOOL4 has_existing_archive;
  std::string v7;
  void *v8;
  void *__p;
  char v10;
  std::string __s;
  void *v12[2];
  char v13;
  void **v14;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __s = *(std::string *)a1;
  turi::fileio::get_protocol(&__s, (std::string::size_type)v12);
  is_writable_protocol = turi::fileio::is_writable_protocol((uint64_t *)v12);
  if (v13 < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!is_writable_protocol)
  {
    v8 = (void *)a1;
    turi::check_directory_writable(std::string,BOOL)::$_0::operator()();
  }
  turi::fileio::get_file_status(a1, (uint64_t)&v8);
  v5 = (int)v8;
  if (v10 < 0)
    operator delete(__p);
  if (v5 == 2)
  {
    turi::fileio::get_directory_listing(a1, (uint64_t *)&v8);
    has_existing_archive = turi::dir_archive::directory_has_existing_archive(&v8);
    if ((has_existing_archive & a2) == 1)
      turi::check_directory_writable(std::string,BOOL)::$_2::operator()();
    if (has_existing_archive)
    {
      if ((a2 & 1) == 0)
      {
        if (*(char *)(a1 + 23) < 0)
          std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
        else
          v7 = *(std::string *)a1;
        turi::dir_archive::delete_archive((uint64_t)&v7);
        if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v7.__r_.__value_.__l.__data_);
      }
    }
    else if (__p != v8)
    {
      turi::check_directory_writable(std::string,BOOL)::$_3::operator()();
    }
    v14 = &v8;
    std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
  else if (v5 == 1)
  {
    v8 = (void *)a1;
    turi::check_directory_writable(std::string,BOOL)::$_1::operator()((uint64_t *)&v8);
  }
}

void sub_218117DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v25 - 40) = &a16;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  _Unwind_Resume(a1);
}

BOOL turi::dir_archive::directory_has_existing_archive(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  size_t v4;
  _BOOL8 v5;
  void *v6;
  char v7;
  std::string __p;
  std::string __s1;
  std::string v11;
  int v12;

  v1 = a1[1];
  if (*a1 == v1)
    return 0;
  v2 = *a1 + 32;
  do
  {
    if (*(char *)(v2 - 9) < 0)
    {
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(v2 - 32), *(_QWORD *)(v2 - 24));
    }
    else
    {
      v3 = *(_OWORD *)(v2 - 32);
      v11.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 - 16);
      *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v3;
    }
    v12 = *(_DWORD *)(v2 - 8);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    else
      __p = v11;
    turi::fileio::get_filename((uint64_t)&__p, &__s1);
    v4 = strlen((const char *)turi::DIR_ARCHIVE_INI_FILE);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v4 == __s1.__r_.__value_.__l.__size_)
      {
        if (v4 == -1)
LABEL_30:
          std::string::__throw_out_of_range[abi:ne180100]();
        v6 = (void *)__s1.__r_.__value_.__r.__words[0];
        v5 = memcmp(__s1.__r_.__value_.__l.__data_, (const void *)turi::DIR_ARCHIVE_INI_FILE, v4) == 0;
      }
      else
      {
        v5 = 0;
        v6 = (void *)__s1.__r_.__value_.__r.__words[0];
      }
      operator delete(v6);
    }
    else if (v4 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
    {
      if (v4 == -1)
        goto LABEL_30;
      v5 = memcmp(&__s1, (const void *)turi::DIR_ARCHIVE_INI_FILE, v4) == 0;
    }
    else
    {
      v5 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    v7 = v2 == v1 || v5;
    v2 += 32;
  }
  while ((v7 & 1) == 0);
  return v5;
}

void sub_218117F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::dir_archive::delete_archive(uint64_t a1)
{
  unint64_t v2;
  size_t v3;
  size_t v4;
  std::string *v5;
  const void *v6;
  std::string *v7;
  __int128 v8;
  __int128 v9;
  turi::thread_pool *v10;
  turi::thread_pool *instance;
  turi::thread *v12;
  turi::thread_pool *tls_data;
  uint64_t v14;
  turi::thread_pool *v15;
  uint64_t v16;
  double v17;
  turi::thread *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  std::string v22;
  const void **v23;
  const void *v24[2];
  void *__p[2];
  std::string::size_type v26;
  _BYTE v27[8];
  uint64_t v28[3];
  _QWORD *v29[3];
  void **v30[4];
  std::string v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  turi::fileio::convert_to_generic(a1, &v31);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
  v2 = v31.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v31.__r_.__value_.__l + 2);
  v3 = HIBYTE(v2);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = &v31;
  std::string::basic_string[abi:ne180100]((uint64_t)&v31, v4 + 1);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*(char *)(a1 + 23) >= 0)
      v6 = (const void *)a1;
    else
      v6 = *(const void **)a1;
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  v7 = std::string::append(&v31, (const std::string::value_type *)turi::DIR_ARCHIVE_INI_FILE);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v26 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  v24[0] = 0;
  v24[1] = 0;
  v23 = v24;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::insert_iterator<std::set<std::string>>,0>(v28[0], (const void **)v28[1], (const void **)&v23, v24, (const void ***)&v31);
  turi::fileio::get_directory_listing(a1, (uint64_t *)&v22);
  v9 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
  v21[0] = &v22;
  v21[1] = &v23;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v10);
  v12 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v12);
  v14 = (uint64_t)(*((_QWORD *)&v9 + 1) - v9) >> 5;
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v12 <= 1)
  {
    if (*((_QWORD *)&v9 + 1) != (_QWORD)v9)
    {
      v20 = 0;
      do
        turi::dir_archive::delete_archive(std::string)::$_0::operator()((uint64_t)v21, v20++);
      while (v14 != v20);
    }
  }
  else
  {
    v15 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v31, v15);
    v16 = 0;
    v17 = (double)(unint64_t)v14 / (double)(unint64_t)v12;
    do
    {
      v18 = (turi::thread *)(v16 + 1);
      v19 = (unint64_t)(v17 * (double)(unint64_t)(v16 + 1) + 0.0);
      if ((turi::thread *)v16 == (turi::thread *)((char *)v12 - 1))
        v19 = (uint64_t)(*((_QWORD *)&v9 + 1) - v9) >> 5;
      v30[2] = (void **)(v17 * (double)(unint64_t)v16 + 0.0);
      v30[3] = (void **)v19;
      v30[0] = (void **)((char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::dir_archive::delete_archive(std::string)::$_0>(unsigned long,unsigned long,turi::dir_archive::delete_archive(std::string)::$_0 const&)::{lambda(void)#1}>(turi::dir_archive::delete_archive(std::string)::$_0)::stored_vtable
                       + 1);
      v30[1] = (void **)v21;
      turi::parallel_task_queue::launch((uint64_t)&v31, (uint64_t)v30, v16);
      boost::function0<void>::~function0((uint64_t *)v30);
      v16 = (uint64_t)v18;
    }
    while (v18 != v12);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&v31);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v31);
  }
  turi::fileio::get_directory_listing(a1, (uint64_t *)&v31);
  std::vector<std::pair<std::string,turi::fileio::file_status>>::__vdeallocate((uint64_t *)&v22);
  v22 = v31;
  memset(&v31, 0, sizeof(v31));
  v30[0] = (void **)&v31;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v30);
  if (v22.__r_.__value_.__r.__words[0] == v22.__r_.__value_.__l.__size_)
    turi::fileio::delete_path(a1, 3);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v23, (char *)v24[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v29, v29[1]);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
}

void sub_2181182C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, char *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a2)
  {
    a30 = &a11;
    std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a14, a15);
    turi::dir_archive_impl::archive_index_information::~archive_index_information((turi::dir_archive_impl::archive_index_information *)&a23);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x218118284);
  }
  _Unwind_Resume(exception_object);
}

void turi::dir_archive::init_for_write(uint64_t a1, uint64_t a2)
{
  void **v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  size_t v8;
  char *first;
  const void *v10;
  std::string *v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  std::string *v15;
  std::string::size_type v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::string *v26;
  std::string *v27;
  std::string::size_type v28;
  size_t v29;
  std::string *v30;
  const void *v31;
  std::string *v32;
  std::string::size_type v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  std::string *v43;
  std::string *v44;
  std::string::size_type v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  std::string v50;
  std::string v51;
  std::string __p;
  std::__split_buffer<std::string> v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[3];

  v56[2] = *MEMORY[0x24BDAC8D0];
  turi::fileio::convert_to_generic(a2, (std::string *)&v53);
  v3 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = *(_OWORD *)&v53.__first_;
  *(_QWORD *)(a1 + 72) = v53.__end_;
  turi::fileio::create_directory_or_throw(a1 + 56);
  *(_OWORD *)&v53.__first_ = 0xFFFFFFFFFFFFFFFFLL;
  v53.__end_ = 0;
  v53.__end_cap_.__value_ = 0;
  v54 = 0;
  v55 = 0;
  v53.__end_cap_.__value_ = (std::allocator<std::string> *)&v54;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = -1;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v53.__begin_;
  *(_QWORD *)(a1 + 24) = v53.__end_cap_.__value_;
  memset(&v53.__begin_, 0, 24);
  v5 = a1 + 40;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 32, *(_QWORD **)(a1 + 40));
  v6 = v54;
  *(_QWORD *)(a1 + 32) = v53.__end_cap_.__value_;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = v55;
  *(_QWORD *)(a1 + 48) = v55;
  if (v7)
  {
    v6[2] = v5;
    v6 = 0;
    v53.__end_cap_.__value_ = (std::allocator<std::string> *)&v54;
    v54 = 0;
    v55 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v5;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v53.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>, v6);
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53.__begin_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  *(_QWORD *)a1 = 1;
  if (*(char *)(a1 + 79) >= 0)
    v8 = *(unsigned __int8 *)(a1 + 79);
  else
    v8 = *(_QWORD *)(a1 + 64);
  first = (char *)&v53;
  std::string::basic_string[abi:ne180100]((uint64_t)&v53, v8 + 1);
  if (SHIBYTE(v53.__end_) < 0)
    first = (char *)v53.__first_;
  if (v8)
  {
    if (*(char *)(a1 + 79) >= 0)
      v10 = (const void *)(a1 + 56);
    else
      v10 = *(const void **)(a1 + 56);
    memmove(first, v10, v8);
  }
  *(_WORD *)&first[v8] = 47;
  v11 = std::string::append((std::string *)&v53, (const std::string::value_type *)turi::DIR_ARCHIVE_INI_FILE);
  __p = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__end_) < 0)
    operator delete(v53.__first_);
  if (*(char *)(a1 + 79) >= 0)
    v12 = *(unsigned __int8 *)(a1 + 79);
  else
    v12 = *(_QWORD *)(a1 + 64);
  v13 = &v51;
  std::string::basic_string[abi:ne180100]((uint64_t)&v51, v12 + 1);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)v51.__r_.__value_.__r.__words[0];
  if (v12)
  {
    if (*(char *)(a1 + 79) >= 0)
      v14 = (const void *)(a1 + 56);
    else
      v14 = *(const void **)(a1 + 56);
    memmove(v13, v14, v12);
  }
  *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 47;
  v15 = std::string::append(&v51, (const std::string::value_type *)turi::DIR_ARCHIVE_INI_FILE);
  v16 = v15->__r_.__value_.__r.__words[0];
  v56[0] = v15->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v56 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  if (v18 >= v19)
  {
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v4) >> 3);
    v23 = v22 + 1;
    if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v4) >> 3);
    if (2 * v24 > v23)
      v23 = 2 * v24;
    if (v24 >= 0x555555555555555)
      v25 = 0xAAAAAAAAAAAAAAALL;
    else
      v25 = v23;
    v53.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 24);
    if (v25)
      v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 24, v25);
    else
      v26 = 0;
    v27 = v26 + v22;
    v53.__first_ = v26;
    v53.__begin_ = v27;
    v53.__end_cap_.__value_ = &v26[v25];
    v28 = v56[0];
    v27->__r_.__value_.__r.__words[0] = v16;
    v27->__r_.__value_.__l.__size_ = v28;
    *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v56 + 7);
    *((_BYTE *)&v27->__r_.__value_.__s + 23) = v17;
    v53.__end_ = v27 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 8), &v53);
    v21 = *(_QWORD *)(a1 + 16);
    std::__split_buffer<std::string>::~__split_buffer(&v53);
  }
  else
  {
    v20 = v56[0];
    *(_QWORD *)v18 = v16;
    *(_QWORD *)(v18 + 8) = v20;
    *(_QWORD *)(v18 + 15) = *(_QWORD *)((char *)v56 + 7);
    *(_BYTE *)(v18 + 23) = v17;
    v21 = v18 + 24;
    *(_QWORD *)(a1 + 16) = v18 + 24;
  }
  *(_QWORD *)(a1 + 16) = v21;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 79) >= 0)
    v29 = *(unsigned __int8 *)(a1 + 79);
  else
    v29 = *(_QWORD *)(a1 + 64);
  v30 = &v51;
  std::string::basic_string[abi:ne180100]((uint64_t)&v51, v29 + 1);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v30 = (std::string *)v51.__r_.__value_.__r.__words[0];
  if (v29)
  {
    if (*(char *)(a1 + 79) >= 0)
      v31 = (const void *)(a1 + 56);
    else
      v31 = *(const void **)(a1 + 56);
    memmove(v30, v31, v29);
  }
  *(_WORD *)((char *)&v30->__r_.__value_.__l.__data_ + v29) = 47;
  v32 = std::string::append(&v51, (const std::string::value_type *)turi::DIR_ARCHIVE_OBJECTS_BIN);
  v33 = v32->__r_.__value_.__r.__words[0];
  v56[0] = v32->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v56 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
  v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v35 = *(_QWORD *)(a1 + 16);
  v36 = *(_QWORD *)(a1 + 24);
  if (v35 >= v36)
  {
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *v4) >> 3);
    v40 = v39 + 1;
    if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *v4) >> 3);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0x555555555555555)
      v42 = 0xAAAAAAAAAAAAAAALL;
    else
      v42 = v40;
    v53.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 24);
    if (v42)
      v43 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 24, v42);
    else
      v43 = 0;
    v44 = v43 + v39;
    v53.__first_ = v43;
    v53.__begin_ = v44;
    v53.__end_cap_.__value_ = &v43[v42];
    v45 = v56[0];
    v44->__r_.__value_.__r.__words[0] = v33;
    v44->__r_.__value_.__l.__size_ = v45;
    *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v56 + 7);
    *((_BYTE *)&v44->__r_.__value_.__s + 23) = v34;
    v53.__end_ = v44 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 8), &v53);
    v38 = *(_QWORD *)(a1 + 16);
    std::__split_buffer<std::string>::~__split_buffer(&v53);
  }
  else
  {
    v37 = v56[0];
    *(_QWORD *)v35 = v33;
    *(_QWORD *)(v35 + 8) = v37;
    *(_QWORD *)(v35 + 15) = *(_QWORD *)((char *)v56 + 7);
    *(_BYTE *)(v35 + 23) = v34;
    v38 = v35 + 24;
    *(_QWORD *)(a1 + 16) = v35 + 24;
  }
  *(_QWORD *)(a1 + 16) = v38;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  v46 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (_QWORD *)operator new();
  v48 = *v4;
  if (*(char *)(*v4 + 47) < 0)
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(v48 + 24), *(_QWORD *)(v48 + 32));
  else
    v50 = *(std::string *)(v48 + 24);
  turi::general_ofstream::general_ofstream(v47, (uint64_t)&v50);
  v49 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v47;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
}

void sub_218118948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12, void *a13, uint64_t a14, int __pa, __int16 __p_4, char __p_6, char __p_7, uint64_t a19, std::__split_buffer<std::string> *a20)
{
  uint64_t v20;

  MEMORY[0x219A19A08](v20, 0x10B3C405FC8E1FCLL, a3, a4, a5, a6, __p);
  _Unwind_Resume(a1);
}

uint64_t turi::`anonymous namespace'::write_index_file(uint64_t a1, _QWORD *a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD *v12;
  std::allocator<std::string> *first;
  std::allocator<std::string> *v14;
  __int128 *v15;
  __int128 *i;
  __int128 v17;
  std::vector<std::string>::pointer end;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  _QWORD *exception;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::vector<std::string> v36;
  _QWORD v37[4];
  std::string v38;
  __n128 __p;
  char v40;
  std::__split_buffer<std::string> v41[2];
  uint64_t v42;
  int v43;
  void *v44;
  char v45;
  _QWORD v46[20];

  v46[19] = *MEMORY[0x24BDAC8D0];
  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "write_index_file", 80, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Writing to index file ", 22);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v38 = *(std::string *)a1;
    turi::sanitize_url((__n128 *)&v38, &__p);
    v8 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    v9 = pthread_getspecific(*(_QWORD *)(v8 + 592));
    if (v9)
    {
      if (*((_BYTE *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(v9[2] - 24) + 16));
        v10 = std::locale::use_facet((const std::locale *)v41, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale((std::locale *)v41);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v8);
        if (*(_DWORD *)(v8 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v40 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  memset(v37, 0, 24);
  v11 = operator new();
  v12 = operator new(0x60uLL);
  *(_QWORD *)(v11 + 8) = v12;
  v12[7] = 0;
  v12[8] = v12 + 7;
  v12[9] = v12 + 7;
  v12[10] = v12 + 10;
  v12[11] = v12 + 10;
  *(_QWORD *)(v11 + 24) = 0;
  v37[3] = v11;
  std::string::basic_string[abi:ne180100]<0>(v41, "archive.version");
  LOBYTE(v41[0].__end_cap_.__value_) = 46;
  if (SHIBYTE(v41[0].__end_) >= 0)
    first = (std::allocator<std::string> *)v41;
  else
    first = (std::allocator<std::string> *)v41[0].__first_;
  v41[0].__end_cap_.__value_ = first;
  MEMORY[0x219A19828](&v35);
  std::locale::locale((std::locale *)&v36, (const std::locale *)&v35);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<unsigned long,boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>>((uint64_t)v37, (uint64_t *)v41, (uint64_t)a2, (const std::locale *)&v36);
  std::locale::~locale((std::locale *)&v36);
  std::locale::~locale((std::locale *)&v35);
  if (SHIBYTE(v41[0].__end_) < 0)
    operator delete(v41[0].__first_);
  std::string::basic_string[abi:ne180100]<0>(v41, "archive.num_prefixes");
  LOBYTE(v41[0].__end_cap_.__value_) = 46;
  if (SHIBYTE(v41[0].__end_) >= 0)
    v14 = (std::allocator<std::string> *)v41;
  else
    v14 = (std::allocator<std::string> *)v41[0].__first_;
  v41[0].__end_cap_.__value_ = v14;
  v33.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[2] - a2[1]) >> 3);
  MEMORY[0x219A19828](&v35);
  std::locale::locale((std::locale *)&v36, (const std::locale *)&v35);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<unsigned long,boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>>((uint64_t)v37, (uint64_t *)v41, (uint64_t)&v33, (const std::locale *)&v36);
  std::locale::~locale((std::locale *)&v36);
  std::locale::~locale((std::locale *)&v35);
  if (SHIBYTE(v41[0].__end_) < 0)
    operator delete(v41[0].__first_);
  std::string::basic_string[abi:ne180100]<0>(v41, "metadata");
  turi::ini::write_dictionary_section<std::string>((uint64_t)v37, (const void **)&v41[0].__first_, a2 + 4);
  if (SHIBYTE(v41[0].__end_) < 0)
    operator delete(v41[0].__first_);
  memset(&v36, 0, sizeof(v36));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v34 = *(std::string *)a1;
  turi::fileio::get_dirname((uint64_t)&v34, &v35);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  v15 = (__int128 *)a2[1];
  for (i = (__int128 *)a2[2]; v15 != i; v15 = (__int128 *)((char *)v15 + 24))
  {
    if (*((char *)v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
    }
    else
    {
      v17 = *v15;
      v33.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v31, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    else
      v31 = v35;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v30, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    else
      v30 = v33;
    turi::fileio::make_relative_path((uint64_t)&v31, (uint64_t)&v30, &v32);
    end = v36.__end_;
    if (v36.__end_ >= v36.__end_cap_.__value_)
    {
      v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_ - (char *)v36.__begin_) >> 3);
      v21 = v20 + 1;
      if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3) > v21)
        v21 = 0x5555555555555556 * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3) >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v21;
      v41[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v36.__end_cap_;
      if (v22)
        v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v36.__end_cap_, v22);
      else
        v23 = 0;
      v24 = v23 + v20;
      v41[0].__first_ = v23;
      v41[0].__begin_ = v24;
      v41[0].__end_cap_.__value_ = &v23[v22];
      v25 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
      v24->__r_.__value_.__r.__words[2] = v32.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
      memset(&v32, 0, sizeof(v32));
      v41[0].__end_ = v24 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v36, v41);
      v26 = v36.__end_;
      std::__split_buffer<std::string>::~__split_buffer(v41);
      v36.__end_ = v26;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
    }
    else
    {
      v19 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
      v36.__end_->__r_.__value_.__r.__words[2] = v32.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v19;
      memset(&v32, 0, sizeof(v32));
      v36.__end_ = end + 1;
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v41, "prefixes");
  turi::ini::write_sequence_section<std::string>((uint64_t)v37, (const void **)&v41[0].__first_, &v36);
  if (SHIBYTE(v41[0].__end_) < 0)
    operator delete(v41[0].__first_);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v29 = *(std::string *)a1;
  turi::general_ofstream::general_ofstream(v41, (uint64_t)&v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  boost::property_tree::ini_parser::write_ini<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(v41, (uint64_t)v37);
  if (!turi::general_ofstream::good((turi::general_ofstream *)v41))
  boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(&v41[0].__begin_, 8, &v41[0].__begin_, 16, (turi::fileio_impl::general_fstream_sink *)&v42, &v43);
  v41[0].__first_ = (std::__split_buffer<std::string>::pointer)&unk_24D920F98;
  v46[0] = &unk_24D920FC0;
  if (v45 < 0)
    operator delete(v44);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)&v41[0].__begin_);
  MEMORY[0x219A198F4](v46);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v41[0].__first_ = (std::__split_buffer<std::string>::pointer)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
  return boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v37);
}

void sub_2181190E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,std::locale a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a36 < 0)
    operator delete(__p);
  __p = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void turi::dir_archive::init_for_read(uint64_t a1, const std::string *a2)
{
  void **v4;
  size_t v5;
  std::string *v6;
  const void *v7;
  std::string *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  void **v22;
  void **v23;
  turi::thread_pool *v24;
  turi::thread_pool *instance;
  turi::thread *v26;
  turi::thread_pool *tls_data;
  uint64_t v28;
  turi::thread_pool *v29;
  uint64_t v30;
  double v31;
  turi::thread *v32;
  uint64_t v33;
  uint64_t v34;
  void ***v35;
  void **v36[3];
  void *v37[2];
  std::string::size_type v38;
  void *__p[2];
  std::string::size_type v40;
  std::string v41;
  uint64_t v42;
  std::string v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  turi::fileio::convert_to_generic((uint64_t)a2, &v43);
  v4 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 72) = *((_QWORD *)&v43.__r_.__value_.__l + 2);
  std::string::operator=((std::string *)(a1 + 56), a2);
  if (*(char *)(a1 + 79) >= 0)
    v5 = *(unsigned __int8 *)(a1 + 79);
  else
    v5 = *(_QWORD *)(a1 + 64);
  v6 = &v41;
  std::string::basic_string[abi:ne180100]((uint64_t)&v41, v5 + 1);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*(char *)(a1 + 79) >= 0)
      v7 = (const void *)(a1 + 56);
    else
      v7 = *(const void **)(a1 + 56);
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
  v8 = std::string::append(&v41, (const std::string::value_type *)turi::DIR_ARCHIVE_INI_FILE);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v40 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a1 = v43.__r_.__value_.__r.__words[0];
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v43.__r_.__value_.__r.__words[1];
  v11 = a1 + 40;
  v10 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 24) = v44;
  v44 = 0;
  *(_OWORD *)&v43.__r_.__value_.__r.__words[1] = 0uLL;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 32, v10);
  v12 = v46;
  *(_QWORD *)(a1 + 32) = v45;
  *(_QWORD *)(a1 + 40) = v12;
  v13 = v47;
  *(_QWORD *)(a1 + 48) = v47;
  if (v13)
  {
    v12[2] = v11;
    v45 = &v46;
    v46 = 0;
    v47 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v11;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v45, v12);
  v36[0] = (void **)&v43.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (*(_QWORD *)a1 != 1)
    turi::dir_archive::init_for_read(std::string const&)::$_0::operator()();
  v14 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (std::string *)operator new();
  if (*(char *)(a1 + 79) >= 0)
    v16 = *(unsigned __int8 *)(a1 + 79);
  else
    v16 = *(_QWORD *)(a1 + 64);
  v17 = &v43;
  std::string::basic_string[abi:ne180100]((uint64_t)&v43, v16 + 1);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if (v16)
  {
    if (*(char *)(a1 + 79) >= 0)
      v18 = (const void *)(a1 + 56);
    else
      v18 = *(const void **)(a1 + 56);
    memmove(v17, v18, v16);
  }
  *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 47;
  v19 = std::string::append(&v43, (const std::string::value_type *)turi::DIR_ARCHIVE_OBJECTS_BIN);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v38 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)v37 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  turi::general_ifstream::general_ifstream(v15, (uint64_t)v37);
  v21 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v15;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 96) = 2;
  turi::fileio::get_directory_listing((uint64_t)a2, (uint64_t *)v36);
  v23 = v36[0];
  v22 = v36[1];
  v35 = v36;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v24);
  v26 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v26);
  v28 = ((char *)v22 - (char *)v23) >> 5;
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v26 <= 1)
  {
    if (v22 != v23)
    {
      v34 = 0;
      do
        turi::dir_archive::init_for_read(std::string const&)::$_1::operator()(&v35, v34++);
      while (v28 != v34);
    }
  }
  else
  {
    v29 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v43, v29);
    v30 = 0;
    v31 = (double)(unint64_t)v28 / (double)(unint64_t)v26;
    do
    {
      v32 = (turi::thread *)(v30 + 1);
      v33 = (unint64_t)(v31 * (double)(unint64_t)(v30 + 1) + 0.0);
      if ((turi::thread *)v30 == (turi::thread *)((char *)v26 - 1))
        v33 = ((char *)v22 - (char *)v23) >> 5;
      v41.__r_.__value_.__r.__words[2] = (unint64_t)(v31 * (double)(unint64_t)v30 + 0.0);
      v42 = v33;
      v41.__r_.__value_.__r.__words[0] = (std::string::size_type)boost::function0<void>::assign_to<void turi::parallel_for<turi::dir_archive::init_for_read(std::string const&)::$_1>(unsigned long,unsigned long,turi::dir_archive::init_for_read(std::string const&)::$_1 const&)::{lambda(void)#1}>(turi::dir_archive::init_for_read(std::string const&)::$_1)::stored_vtable
                                       + 1;
      v41.__r_.__value_.__l.__size_ = (std::string::size_type)&v35;
      turi::parallel_task_queue::launch((uint64_t)&v43, (uint64_t)&v41, v30);
      boost::function0<void>::~function0((uint64_t *)&v41);
      v30 = (uint64_t)v32;
    }
    while (v32 != v26);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&v43);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v43);
  }
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
}

void sub_2181196C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a33);
  a26 = &a10;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

uint64_t turi::`anonymous namespace'::read_index_file@<X0>(std::string::size_type a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::string *p_p;
  uint64_t child;
  std::string *v9;
  uint64_t v10;
  std::vector<std::string>::size_type v11;
  _QWORD *size;
  std::string::size_type v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  std::string v19;
  std::string v20;
  std::string v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  std::string __str;
  std::string __p;
  char v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  std::string v33;
  std::string v34[8];
  void *v35;
  char v36;
  _QWORD v37[20];

  v37[19] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v33 = *(std::string *)a1;
  turi::general_ifstream::general_ifstream(v34, (uint64_t)&v33);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if ((v34[1].__r_.__value_.__s.__data_[*(_QWORD *)(v34[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
  {
    __p.__r_.__value_.__r.__words[0] = a1;
  }
  v30 = 0uLL;
  v31 = 0;
  v4 = operator new();
  v5 = operator new(0x60uLL);
  *(_QWORD *)(v4 + 8) = v5;
  v5[7] = 0;
  v5[8] = v5 + 7;
  v5[9] = v5 + 7;
  v5[10] = v5 + 10;
  v5[11] = v5 + 10;
  *(_QWORD *)(v4 + 24) = 0;
  v32 = v4;
  boost::property_tree::ini_parser::read_ini<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(v34, &v30);
  *(_QWORD *)a2 = -1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v6 = a2 + 40;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(_QWORD *)(a2 + 48) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "archive.version");
  v28 = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v29 = p_p;
  child = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child((uint64_t)&v30, (uint64_t *)&__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(child, &__str);
  *(_QWORD *)a2 = std::stoi(&__str, 0, 10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "archive.num_prefixes");
  v28 = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &__p;
  else
    v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v29 = v9;
  v10 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child((uint64_t)&v30, (uint64_t *)&__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v10, &__str);
  v11 = std::stol(&__str, 0, 10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v24, "metadata");
  turi::ini::read_dictionary_section<std::string>((uint64_t)&v30, (uint64_t)v24, (uint64_t)&__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2 + 32, *(_QWORD **)(a2 + 40));
  size = (_QWORD *)__p.__r_.__value_.__l.__size_;
  *(_QWORD *)(a2 + 32) = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 40) = size;
  v13 = __p.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a2 + 48) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  if (v13)
  {
    size[2] = v6;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    size = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = v6;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, size);
  if (v25 < 0)
    operator delete(v24[0]);
  std::string::basic_string[abi:ne180100]<0>(v22, "prefixes");
  turi::ini::read_sequence_section<std::string>((uint64_t)&v30, (uint64_t)v22, v11, (std::vector<std::string> *)&__p);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + 8));
  *(std::string *)(a2 + 8) = __p;
  memset(&__p, 0, sizeof(__p));
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (v23 < 0)
    operator delete(v22[0]);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v21 = *(std::string *)a1;
  turi::fileio::get_dirname((uint64_t)&v21, &__p);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  v14 = *(__int128 **)(a2 + 8);
  v15 = *(__int128 **)(a2 + 16);
  while (v14 != v15)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v20 = __p;
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v16 = *v14;
      v19.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v16;
    }
    turi::fileio::make_absolute_path((uint64_t)&v20, (uint64_t)&v19, (uint64_t)&__str);
    if (*((char *)v14 + 23) < 0)
      operator delete(*(void **)v14);
    v17 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *((_QWORD *)v14 + 2) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
    *v14 = v17;
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    __str.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    v14 = (__int128 *)((char *)v14 + 24);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v30);
  v34[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
  v37[0] = &unk_24D91DA80;
  if (v36 < 0)
    operator delete(v35);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v34[0].__r_.__value_.__r.__words[2]);
  return MEMORY[0x219A198F4](v37);
}

void sub_218119CD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::runtime_error a29)
{
  boost::property_tree::file_parser_error::~file_parser_error(&a29);
  __cxa_end_catch();
  JUMPOUT(0x218119DA8);
}

void sub_218119CEC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x218119DB8);
}

void sub_218119CFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  MEMORY[0x219A19A08](v44, 0x1020C402FC1992ELL);
  if (a44 < 0)
    operator delete(__p);
  JUMPOUT(0x218119DB0);
}

void sub_218119D34()
{
  JUMPOUT(0x218119DB0);
}

void sub_218119D3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0)
    operator delete(__p);
  JUMPOUT(0x218119DB8);
}

void sub_218119D54()
{
  JUMPOUT(0x218119D90);
}

void sub_218119D64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    JUMPOUT(0x218119D8CLL);
  JUMPOUT(0x218119D90);
}

void turi::dir_archive::open_directory_for_write(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  std::string __p;
  std::string v14;
  char v15;

  if (*(_QWORD *)(a1 + 88))
    turi::dir_archive::open_directory_for_write(std::string,BOOL)::$_0::operator()();
  if (*(_QWORD *)(a1 + 80))
    turi::dir_archive::open_directory_for_write(std::string,BOOL)::$_1::operator()();
  turi::fileio::convert_to_generic(a2, &v14);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  v6 = 0;
  *(std::string *)a2 = v14;
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = (char *)a2;
  else
    v8 = *(char **)a2;
  v9 = *(unsigned __int8 *)(a2 + 23);
  if (v7 < 0)
    v9 = *(_QWORD *)(a2 + 8);
  while (-v9 != v6 && v6 != -1)
  {
    v10 = v8[v9 - 1 + v6];
    v11 = asc_2187C4E2A[v6--];
    if (v10 != v11)
      goto LABEL_15;
  }
  if (v6 == -1)
  {
    std::string::basic_string(&v14, (const std::string *)a2, 0, v9 - 1, (std::allocator<char> *)&v15);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    v12 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a2 + 16) = *((_QWORD *)&v14.__r_.__value_.__l + 2);
    if ((v12 & 0x80) == 0)
      goto LABEL_16;
  }
  else
  {
LABEL_15:
    if ((v7 & 0x80) == 0)
    {
LABEL_16:
      __p = *(std::string *)a2;
      goto LABEL_21;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_21:
  turi::check_directory_writable((uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  turi::dir_archive::init_for_write(a1, a2);
}

void turi::dir_archive::open_directory_for_write(std::string,BOOL)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_objects_in == nullptr", 23);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 224, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::dir_archive::open_directory_for_write(std::string,BOOL)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21811A038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::dir_archive::open_directory_for_write(std::string,BOOL)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_objects_out == nullptr", 24);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 225, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::dir_archive::open_directory_for_write(std::string,BOOL)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21811A1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::dir_archive::get_directory_metadata(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  int v7;
  size_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  std::string v23;
  void *__p[2];
  std::string::size_type v25;
  std::string v26;
  uint64_t v27;
  _QWORD *v28;

  turi::fileio::convert_to_generic(a1, &v26);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v6 = 0;
  *(std::string *)a1 = v26;
  v7 = *(char *)(a1 + 23);
  v8 = *(_QWORD *)(a1 + 8);
  if (v7 >= 0)
    v9 = (void *)a1;
  else
    v9 = *(void **)a1;
  v10 = *(unsigned __int8 *)(a1 + 23);
  if (v7 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 23);
  else
    v11 = *(_QWORD *)(a1 + 8);
  v12 = (uint64_t)v9 + v11 - 1;
  while (-v11 != v6 && v6 != -1)
  {
    v13 = *(unsigned __int8 *)(v12 + v6);
    v14 = asc_2187C4E2A[v6--];
    if (v13 != v14)
      goto LABEL_18;
  }
  if (v6 == -1)
  {
    std::string::basic_string(&v26, (const std::string *)a1, 0, v11 - 1, (std::allocator<char> *)&v23);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_OWORD *)a1 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    v15 = v26.__r_.__value_.__r.__words[2];
    *(_QWORD *)(a1 + 16) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
    v10 = HIBYTE(v15);
    v8 = *(_QWORD *)(a1 + 8);
    LOBYTE(v7) = v10;
  }
LABEL_18:
  if ((v7 & 0x80u) == 0)
    v16 = v10;
  else
    v16 = v8;
  v17 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, v16 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if (v16)
  {
    if (*(char *)(a1 + 23) >= 0)
      v18 = (const void *)a1;
    else
      v18 = *(const void **)a1;
    memmove(v17, v18, v16);
  }
  *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 47;
  v19 = std::string::append(&v23, (const std::string::value_type *)turi::DIR_ARCHIVE_INI_FILE);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v25 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (v26.__r_.__value_.__r.__words[0] != 1)
    turi::dir_archive::get_directory_metadata(std::string,std::string const&)::$_0::operator()();
  v21 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v27, a2);
  if (&v28 == (_QWORD **)v21)
  {
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    turi::dir_archive::get_directory_metadata(std::string,std::string const&)::$_1::operator()();
  }
  if (*(char *)(v21 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v21 + 56), *(_QWORD *)(v21 + 64));
  }
  else
  {
    v22 = *(_OWORD *)(v21 + 56);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v22;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v27, v28);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
}

void sub_21811A484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  turi::dir_archive_impl::archive_index_information::~archive_index_information((turi::dir_archive_impl::archive_index_information *)&a23);
  _Unwind_Resume(a1);
}

void turi::dir_archive::open_directory_for_read(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  std::string v12;
  char v13;

  turi::fileio::convert_to_generic(a2, &v12);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v12;
  if (*(_QWORD *)(a1 + 88))
    turi::dir_archive::open_directory_for_read(std::string)::$_0::operator()();
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    turi::dir_archive::open_directory_for_read(std::string)::$_1::operator()();
  v5 = *(char *)(a2 + 23);
  v6 = v5 < 0;
  v7 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = a2;
  v8 = *(unsigned __int8 *)(a2 + 23);
  if (v6)
    v8 = *(_QWORD *)(a2 + 8);
  v9 = v8 + v7 - 1;
  while (-v8 != v4 && v4 != -1)
  {
    v10 = *(unsigned __int8 *)(v9 + v4);
    v11 = asc_2187C4E2A[v4--];
    if (v10 != v11)
      goto LABEL_18;
  }
  if (v4 == -1)
  {
    std::string::basic_string(&v12, (const std::string *)a2, 0, v8 - 1, (std::allocator<char> *)&v13);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v12;
  }
LABEL_18:
  turi::dir_archive::init_for_read(a1, (const std::string *)a2);
}

void turi::dir_archive::open_directory_for_read(std::string)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_objects_in == nullptr", 23);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 260, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::dir_archive::open_directory_for_read(std::string)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21811A6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::dir_archive::open_directory_for_read(std::string)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_objects_out == nullptr", 24);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 261, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::dir_archive::open_directory_for_read(std::string)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21811A854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::get_next_random_number(turi *this)
{
  unsigned __int8 v1;
  uint64_t v2;

  {
    turi::random::generator::generator((turi::random::generator *)&turi::get_next_random_number(void)::gen);
    __cxa_atexit((void (*)(void *))turi::random::generator::~generator, &turi::get_next_random_number(void)::gen, &dword_217E69000);
  }
  if ((turi::get_next_random_number(void)::initialized & 1) == 0)
  {
    turi::random::generator::nondet_seed((turi::random::generator *)&turi::get_next_random_number(void)::gen);
    turi::get_next_random_number(void)::initialized = 1;
  }
  pthread_mutex_lock((pthread_mutex_t *)&qword_254FF05C0[1]);
  v2 = boost::random::detail::generate_uniform_int<boost::random::rand48,unsigned long>(qword_254FF05C0, 0, -1);
  pthread_mutex_unlock((pthread_mutex_t *)&qword_254FF05C0[1]);
  return v2;
}

void sub_21811A9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::random::generator::~generator(turi::random::generator *this)
{
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 6288));
}

uint64_t turi::dir_archive::get_next_write_prefix@<X0>(turi::dir_archive *this@<X0>, unsigned __int8 *a2@<X8>)
{
  turi::dir_archive *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  turi *v12;
  unsigned __int8 *v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t result;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[2];
  _QWORD v32[11];
  char v33;
  uint64_t v34;
  void **v35;

  do
  {
    v3 = this;
    this = (turi::dir_archive *)*((_QWORD *)this + 14);
  }
  while (this);
  if (!*((_QWORD *)v3 + 10))
    turi::dir_archive::get_next_write_prefix(void)::$_0::operator()();
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v4 = *MEMORY[0x24BEDB7F0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v7 = MEMORY[0x24BEDB848] + 16;
  do
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
    v8 = *((char *)v3 + 79);
    if (v8 >= 0)
      v9 = (uint64_t)v3 + 56;
    else
      v9 = *((_QWORD *)v3 + 7);
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)v3 + 79);
    else
      v10 = *((_QWORD *)v3 + 8);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v9, v10);
    v12 = (turi *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/m_", 3);
    *(_DWORD *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v12
                                                                                  + *(_QWORD *)(*(_QWORD *)v12 - 24)
                                                                                  + 8) & 0xFFFFFFB5 | 8;
    turi::get_next_random_number(v12);
    std::ostream::operator<<();
    std::stringbuf::str();
    if ((char)a2[23] < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v29;
    *((_QWORD *)a2 + 2) = v30;
    turi::fileio::get_directory_listing((uint64_t)v3 + 56, (uint64_t *)&v29);
    v13 = (unsigned __int8 *)v29;
    if ((_QWORD)v29 == *((_QWORD *)&v29 + 1))
    {
LABEL_31:
      v25 = 1;
      goto LABEL_33;
    }
    v14 = (char)a2[23];
    v15 = v14 < 0;
    v16 = *(unsigned __int8 **)a2;
    if (v14 >= 0)
      v16 = a2;
    v17 = a2[23];
    if (v15)
      v17 = *((_QWORD *)a2 + 1);
    while (1)
    {
      v18 = *(unsigned __int8 **)v13;
      v19 = *((_QWORD *)v13 + 1);
      if ((v13[23] & 0x80u) == 0)
      {
        v18 = v13;
        v19 = v13[23];
      }
      if (v19)
        v20 = v17 == 0;
      else
        v20 = 1;
      v21 = v16;
      if (!v20)
      {
        v22 = v19 - 1;
        v23 = v17 - 1;
        v21 = v16;
        while (*v18 == *v21)
        {
          ++v21;
          if (v22)
          {
            ++v18;
            v24 = v23--;
            --v22;
            if (v24)
              continue;
          }
          goto LABEL_24;
        }
        goto LABEL_25;
      }
LABEL_24:
      if (v21 == &v16[v17])
        break;
LABEL_25:
      v13 += 32;
      if (v13 == *((unsigned __int8 **)&v29 + 1))
        goto LABEL_31;
    }
    v25 = 0;
LABEL_33:
    v35 = (void **)&v29;
    std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v35);
    v31[0] = v4;
    *(_QWORD *)((char *)v31 + *(_QWORD *)(v4 - 24)) = v5;
    v32[0] = v6;
    v32[1] = v7;
    if (v33 < 0)
      operator delete((void *)v32[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x219A198F4](&v34);
  }
  while ((v25 & 1) == 0);
  v26 = (uint64_t *)((char *)v3 + 8);
  v27 = *((_QWORD *)v3 + 2);
  if (v27 >= *((_QWORD *)v3 + 3))
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v26, (__int128 *)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v26, (__int128 *)a2);
    result = v27 + 24;
  }
  *((_QWORD *)v3 + 2) = result;
  return result;
}

void turi::dir_archive::get_next_write_prefix(void)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_objects_out != nullptr", 24);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 289, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::dir_archive::get_next_write_prefix(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21811AD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::dir_archive::get_next_read_prefix(turi::dir_archive *this@<X0>, std::string *a2@<X8>)
{
  turi::dir_archive *v2;
  unint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;

  do
  {
    v2 = this;
    this = (turi::dir_archive *)*((_QWORD *)this + 14);
  }
  while (this);
  if (!*((_QWORD *)v2 + 11))
    turi::dir_archive::get_next_read_prefix(void)::$_0::operator()();
  v3 = *((_QWORD *)v2 + 12);
  v4 = *((_QWORD *)v2 + 1);
  if (v3 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v2 + 2) - v4) >> 3))
    turi::dir_archive::get_next_read_prefix(void)::$_1::operator()();
  *((_QWORD *)v2 + 12) = v3 + 1;
  v5 = (__int128 *)(v4 + 24 * v3);
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
}

void turi::dir_archive::get_next_read_prefix(void)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_objects_in != nullptr", 23);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 322, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::dir_archive::get_next_read_prefix(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21811AFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::dir_archive::get_next_read_prefix(void)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_read_prefix_index", 19);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_index_info.prefixes.size()", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 323, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::dir_archive::get_next_read_prefix(void)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21811B1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::dir_archive::get_input_stream(turi::dir_archive *this)
{
  turi::dir_archive *v1;

  do
  {
    v1 = this;
    this = (turi::dir_archive *)*((_QWORD *)this + 14);
  }
  while (this);
  return *((_QWORD *)v1 + 11);
}

uint64_t turi::dir_archive::get_output_stream(turi::dir_archive *this)
{
  turi::dir_archive *v1;

  do
  {
    v1 = this;
    this = (turi::dir_archive *)*((_QWORD *)this + 14);
  }
  while (this);
  return *((_QWORD *)v1 + 10);
}

void **std::unique_ptr<turi::dir_archive>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::dir_archive::~dir_archive(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

void turi::dir_archive::set_metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  std::string __p;
  std::string v7;
  __int128 *v8;

  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v7 = *(std::string *)a2;
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    turi::dir_archive::set_metadata(v4, &v7, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = (__int128 *)a2;
    v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)a2, (uint64_t)&std::piecewise_construct, &v8);
    std::string::operator=((std::string *)(v5 + 7), (const std::string *)a3);
  }
}

void sub_21811B394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::dir_archive::get_metadata(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t metadata;
  std::string __p;

  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    metadata = turi::dir_archive::get_metadata(v4, &__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1 + 32, (const void **)a2);
    if (a1 + 40 == v6)
    {
      return 0;
    }
    else
    {
      std::string::operator=(a3, (const std::string *)(v6 + 56));
      return 1;
    }
  }
  return metadata;
}

void sub_21811B484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::ini::write_dictionary_section<std::string>(uint64_t a1, const void **a2, _QWORD *a3)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *p_p;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  std::string __p;
  char v20;
  std::string *v21;
  std::string v22;
  std::string v23;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, v6 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 46;
  v11 = (_QWORD *)*a3;
  v9 = a3 + 1;
  v10 = v11;
  if (v11 != v9)
  {
    do
    {
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v22, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
      else
        v22 = v23;
      v12 = *((char *)v10 + 55);
      if (v12 >= 0)
        v13 = (const std::string::value_type *)(v10 + 4);
      else
        v13 = (const std::string::value_type *)v10[4];
      if (v12 >= 0)
        v14 = *((unsigned __int8 *)v10 + 55);
      else
        v14 = v10[5];
      std::string::append(&v22, v13, v14);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
      else
        __p = v22;
      v20 = 46;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v21 = p_p;
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<std::string,boost::property_tree::id_translator<std::string>>(a1, (uint64_t *)&__p, (uint64_t)(v10 + 7));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      v16 = (_QWORD *)v10[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v10[2];
          v18 = *v17 == (_QWORD)v10;
          v10 = v17;
        }
        while (!v18);
      }
      v10 = v17;
    }
    while (v17 != v9);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_21811B650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t turi::ini::write_sequence_section<std::string>(uint64_t result, const void **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const std::ios_base *v10;
  const std::locale::facet *v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type size;
  std::string::value_type *v19;
  int v20;
  std::string *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p[2];
  unsigned __int8 v27;
  std::string v28;
  _DWORD v29[2];
  std::string v30;
  char v31;
  std::string *v32;
  _QWORD v33[3];
  _QWORD v34[10];
  char v35;
  uint64_t v36;

  v25 = result;
  if (a3[1] != *a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = *MEMORY[0x24BEDB7F0];
    v23 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v8 = MEMORY[0x24BEDB848] + 16;
    do
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v33);
      v9 = v33[0];
      v10 = (const std::ios_base *)((char *)v33 + *(_QWORD *)(v33[0] - 24));
      if (v10[1].__fmtflags_ == -1)
      {
        std::ios_base::getloc(v10);
        v11 = std::locale::use_facet((const std::locale *)&v30, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
        std::locale::~locale((std::locale *)&v30);
        v9 = v33[0];
      }
      v10[1].__fmtflags_ = 48;
      *(_QWORD *)((char *)v34 + *(_QWORD *)(v9 - 24)) = 4;
      std::ostream::operator<<();
      if (*((char *)a2 + 23) >= 0)
        v12 = *((unsigned __int8 *)a2 + 23);
      else
        v12 = (size_t)a2[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v28, v12 + 1);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v28;
      else
        v13 = (std::string *)v28.__r_.__value_.__r.__words[0];
      if (v12)
      {
        if (*((char *)a2 + 23) >= 0)
          v14 = a2;
        else
          v14 = *a2;
        memmove(v13, v14, v12);
      }
      *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 46;
      std::stringbuf::str();
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (std::string::size_type)__p[1];
      v17 = std::string::append(&v28, (const std::string::value_type *)v15, v16);
      v19 = (std::string::value_type *)v17->__r_.__value_.__r.__words[0];
      size = v17->__r_.__value_.__l.__size_;
      v29[0] = v17->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v29 + 3) = *(_DWORD *)((char *)&v17->__r_.__value_.__r.__words[2] + 3);
      v20 = SHIBYTE(v17->__r_.__value_.__r.__words[2]);
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (v20 < 0)
      {
        std::string::__init_copy_ctor_external(&v30, v19, size);
        v22 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
        v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      else
      {
        v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        v30.__r_.__value_.__l.__size_ = size;
        LODWORD(v30.__r_.__value_.__r.__words[2]) = v29[0];
        *(_DWORD *)((char *)&v30.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v29 + 3);
        *((_BYTE *)&v30.__r_.__value_.__s + 23) = v20;
        v21 = (std::string *)v19;
        v22 = v20;
      }
      v31 = 46;
      if (v22 >= 0)
        v21 = &v30;
      v32 = v21;
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<std::string,boost::property_tree::id_translator<std::string>>(v25, (uint64_t *)&v30, *a3 + v5);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v30.__r_.__value_.__l.__data_);
        if (v20 < 0)
LABEL_38:
          operator delete(v19);
      }
      else if (v20 < 0)
      {
        goto LABEL_38;
      }
      if ((char)v27 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      v33[0] = v7;
      *(_QWORD *)((char *)v33 + *(_QWORD *)(v7 - 24)) = v24;
      v33[2] = v23;
      v34[0] = v8;
      if (v35 < 0)
        operator delete((void *)v34[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      result = MEMORY[0x219A198F4](&v36);
      ++v6;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3));
  }
  return result;
}

void sub_21811B994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::locale a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;

  operator delete(v36);
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void boost::property_tree::ini_parser::write_ini<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v5;
  _QWORD v6[3];
  _QWORD v7[9];

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "ptree has data on root");
    std::string::basic_string[abi:ne180100]<0>(&v5, "");
    boost::property_tree::file_parser_error::file_parser_error((uint64_t)v7, (uint64_t)v6, &v5, 0);
    v7[0] = &unk_24D92F818;
    boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)v7, (uint64_t)"void boost::property_tree::ini_parser::write_ini(std::basic_ostream<typename Ptree::key_type::value_type> &, const Ptree &, int) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 279);
  }
  boost::property_tree::ini_parser::detail::check_dupes<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a2);
  boost::property_tree::ini_parser::detail::write_keys<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, a2, 0);
  boost::property_tree::ini_parser::detail::write_sections<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, a2);
}

void sub_21811BADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22)
{
  boost::property_tree::file_parser_error::~file_parser_error(&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<unsigned long,boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>>(uint64_t a1, uint64_t *a2, uint64_t a3, const std::locale *a4)
{
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  _QWORD *v11;
  std::locale v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  std::locale v17;
  std::string *v18;

  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child_optional(a1, (uint64_t)a2, (uint64_t *)&v18);
  v8 = v18;
  if (v18)
  {
    std::locale::locale(&v17, a4);
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<unsigned long,boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>>(v8, a3, &v17);
    std::locale::~locale(&v17);
    return (uint64_t)v18;
  }
  else
  {
    v14 = 0uLL;
    v15 = 0;
    v10 = operator new();
    v11 = operator new(0x60uLL);
    *(_QWORD *)(v10 + 8) = v11;
    v11[7] = 0;
    v11[8] = v11 + 7;
    v11[9] = v11 + 7;
    v11[10] = v11 + 10;
    v11[11] = v11 + 10;
    *(_QWORD *)(v10 + 24) = 0;
    v16 = v10;
    v9 = (std::string *)boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_child(a1, a2, &v14);
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v14);
    std::locale::locale(&v13, a4);
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<unsigned long,boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>>(v9, a3, &v13);
    std::locale::~locale(&v13);
  }
  return (uint64_t)v9;
}

void sub_21811BC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child_optional(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _BOOL4 v6;
  std::string *p_p;
  const std::string::value_type *v8;
  std::string __p;
  char v10;
  char *v11;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v6 = *(char *)(a2 + 23) < 0;
  }
  else
  {
    v6 = 0;
    __p = *(std::string *)a2;
  }
  v10 = *(_BYTE *)(a2 + 24);
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v6)
    v8 = *(const std::string::value_type **)a2;
  else
    v8 = (const std::string::value_type *)a2;
  v11 = (char *)p_p + *(_QWORD *)(a2 + 32) - (_QWORD)v8;
  *a3 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_21811BD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<unsigned long,boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>>(std::string *a1, uint64_t a2, const std::locale *a3)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::runtime_error *v8;
  uint64_t v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::runtime_error v13;
  _BYTE v14[8];
  std::string v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>::put_value(a3, (uint64_t)v14);
  if (!v14[0])
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "conversion of type \"");
    v4 = std::string::append(&v10, (const std::string::value_type *)(*(_QWORD *)(MEMORY[0x24BEDB7B0] + 8) & 0x7FFFFFFFFFFFFFFFLL));
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v11, "\" to data failed");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v9 = 0;
    v8 = boost::property_tree::ptree_bad_data::ptree_bad_data<boost::any>(&v13, &v12, &v9);
    boost::exception_detail::throw_exception_<boost::property_tree::ptree_bad_data>(v8, (uint64_t)"void boost::property_tree::basic_ptree<std::string, std::string>::put_value(const Type &, Translator) [Key = std::string, Data = std::string, KeyCompare = std::less<std::string>, Type = unsigned long, Translator = boost::property_tree::stream_translator<char, std::char_traits<char>, std::allocator<char>, unsigned long>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/detail/ptree_implementation.hpp", 828);
  }
  std::string::operator=(a1, &v15);
  if (v14[0])
  {
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_21811BE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v30;

  *(_QWORD *)(v28 - 80) = &unk_24D92F660;
  v30 = *(_QWORD *)(v28 - 64);
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  std::runtime_error::~runtime_error((std::runtime_error *)(v28 - 80));
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(_BYTE *)(v28 - 56))
  {
    if (*(char *)(v28 - 25) < 0)
      operator delete(*(void **)(v28 - 48));
  }
  _Unwind_Resume(a1);
}

unint64_t *boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_child(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  _BOOL4 v6;
  std::string *v7;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;
  unint64_t *v11;
  std::string __p;
  uint64_t v14;
  std::string v15;
  std::string v16;
  char v17;
  char *v18;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)*a2, a2[1]);
    v6 = *((char *)a2 + 23) < 0;
  }
  else
  {
    v6 = 0;
    v16 = *(std::string *)a2;
  }
  v17 = *((_BYTE *)a2 + 24);
  v7 = &v16;
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if (v6)
    v8 = (uint64_t *)*a2;
  else
    v8 = a2;
  v18 = (char *)v7 + a2[4] - (_QWORD)v8;
  v9 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(a1, (uint64_t)&v16);
  boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)&v16, &v15);
  v10 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(*(_QWORD *)(v9 + 24) + 16, (const void **)&v15.__r_.__value_.__l.__data_);
  if (*(const void ***)(*(_QWORD *)(v9 + 24) + 8) == v10)
  {
    std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(&__p, (__int128 *)&v15, a3);
    v11 = boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(*(_QWORD *)(v9 + 24) + 16, *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8), (__int128 *)&__p)+ 3;
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = (unint64_t *)boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::operator=((uint64_t)(v10 + 3), (uint64_t)a3);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21811C0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair((uint64_t)&a9);
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const void **v6;
  std::string __p;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = a2;
  else
    v4 = *(_QWORD *)a2;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) != v4 + v3)
  {
    boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)a2, &__p);
    v6 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(*(_QWORD *)(a1 + 24) + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    if (*(const void ***)(*(_QWORD *)(a1 + 24) + 8) == v6)
      a1 = 0;
    else
      a1 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(v6 + 3, a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_21811C198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  std::string v11;
  char v12;
  std::string __p;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)a1[4];
  if (*((char *)a1 + 23) < 0)
  {
    v6 = (uint64_t *)*a1;
    v5 = a1[1];
  }
  else
  {
    v5 = *((unsigned __int8 *)a1 + 23);
    v6 = a1;
  }
  v7 = (char *)v6 + v5;
  v8 = (char *)memchr((void *)a1[4], *((char *)a1 + 24), (char *)v6 + v5 - v4);
  if (v8)
    v7 = v8;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v11, v4, v7, v7 - v4);
  a1[4] = (uint64_t)v7;
  if (*((char *)a1 + 23) < 0)
  {
    v10 = (uint64_t *)*a1;
    v9 = a1[1];
  }
  else
  {
    v9 = *((unsigned __int8 *)a1 + 23);
    v10 = a1;
  }
  if (v7 != (char *)v10 + v9)
    a1[4] = (uint64_t)(v7 + 1);
  v12 = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    __p = v11;
  v12 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (v12 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *a2 = __p;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_21811C318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 && a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void boost::exception_detail::throw_exception_<boost::property_tree::ptree_bad_path>(const std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD v7[7];
  int v8;

  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::error_info_injector((uint64_t)v7, a1);
  v7[5] = a2;
  v7[6] = a3;
  v8 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>((uint64_t)v7);
}

void sub_21811C39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::ptree_bad_path::ptree_bad_path<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(uint64_t a1, const void **a2, __int128 *a3)
{
  std::string v6;

  boost::property_tree::detail::prepare_bad_path_what<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(a2, (uint64_t)a3, &v6);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v6);
  *(_QWORD *)a1 = &unk_24D92F458;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &unk_24D92F430;
  boost::any::any<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>((uint64_t *)(a1 + 16), a3);
  return a1;
}

void sub_21811C434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::runtime_error *v15;

  std::runtime_error::~runtime_error(v15);
  _Unwind_Resume(a1);
}

void boost::property_tree::ptree_bad_path::~ptree_bad_path(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;

  this->__vftable = (std::runtime_error_vtbl *)&unk_24D92F430;
  v2 = this[1].__vftable;
  if (v2)
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  std::runtime_error::~runtime_error(this);
}

{
  std::runtime_error_vtbl *v2;

  this->__vftable = (std::runtime_error_vtbl *)&unk_24D92F430;
  v2 = this[1].__vftable;
  if (v2)
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x219A19A08);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>(uint64_t a1)
{
  void *exception;
  uint64_t v3;
  uint64_t v4;
  std::runtime_error v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  int v10;

  exception = __cxa_allocate_exception(0x48uLL);
  std::runtime_error::runtime_error(&v5, (const std::runtime_error *)a1);
  v5.__vftable = (std::runtime_error_vtbl *)&unk_24D92F430;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v6 = v3;
  v7 = &unk_24D918C48;
  v4 = *(_QWORD *)(a1 + 32);
  v8 = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v9 = *(_OWORD *)(a1 + 40);
  v10 = *(_DWORD *)(a1 + 56);
  v5.__vftable = (std::runtime_error_vtbl *)&unk_24D92F3E8;
  v7 = &unk_24D92F410;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::clone_impl((uint64_t)exception, (uint64_t)&v5);
}

void sub_21811C570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  a9.__vftable = (std::runtime_error_vtbl *)(v11 + 16);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  std::runtime_error::~runtime_error(&a9);
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 64) = &unk_24D918BA8;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&unk_24D92F430;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(a1 + 24) = &unk_24D918C48;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)a1 = &unk_24D92F348;
  *(_QWORD *)(a1 + 24) = &unk_24D92F380;
  *(_QWORD *)(a1 + 64) = &unk_24D92F3B8;
  boost::exception_detail::copy_boost_exception(a1 + 24, a2 + 24);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 64) = &unk_24D918BA8;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&unk_24D92F430;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = &unk_24D918C48;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)a1 = &unk_24D92F348;
  *(_QWORD *)(a1 + 24) = &unk_24D92F380;
  *(_QWORD *)(a1 + 64) = &unk_24D92F3B8;
  return a1;
}

void sub_21811C6A4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t v2;
  std::runtime_error_vtbl *v4;

  v1->__vftable = (std::runtime_error_vtbl *)(v2 + 16);
  v4 = v1[1].__vftable;
  if (v4)
    (*((void (**)(std::runtime_error_vtbl *))v4->~runtime_error + 1))(v4);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  *(_QWORD *)a1 = &unk_24D92F430;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(a1);
  JUMPOUT(0x219A19A08);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(a1);
  JUMPOUT(0x219A19A08);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_21811C7B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C4095DD773DLL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::clone_impl((uint64_t)exception, a1);
}

void sub_21811C818(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(a1 - 24);
}

{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(a1 - 24);
  JUMPOUT(0x219A19A08);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::~clone_impl(_QWORD *a1)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(a1 - 24);
  JUMPOUT(0x219A19A08);
}

void sub_21811CA1C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t v2;
  std::runtime_error_vtbl *v4;

  v1->__vftable = (std::runtime_error_vtbl *)(v2 + 16);
  v4 = v1[1].__vftable;
  if (v4)
    (*((void (**)(std::runtime_error_vtbl *))v4->~runtime_error + 1))(v4);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::error_info_injector(uint64_t a1, const std::runtime_error *a2)
{
  uint64_t v4;

  std::runtime_error::runtime_error((std::runtime_error *)a1, a2)->__vftable = (std::runtime_error_vtbl *)&unk_24D92F430;
  v4 = (uint64_t)a2[1].__vftable;
  if (v4)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_24D92F3E8;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = &unk_24D92F410;
  return a1;
}

void sub_21811CAC8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::property_tree::detail::prepare_bad_path_what<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string __p;
  std::string v15;
  std::string v16;

  if (*((char *)a1 + 23) >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  v7 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v6 + 2);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, " (");
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v16, ")");
  *a3 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_21811CC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *boost::any::any<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = operator new();
  boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::holder(v4, a2);
  *a1 = v4;
  return a1;
}

void sub_21811CCDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1093C40E70F46F0);
  _Unwind_Resume(a1);
}

uint64_t boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::holder(uint64_t a1, __int128 *a2)
{
  _OWORD *v4;
  __int128 v5;
  const std::string::value_type *v6;

  *(_QWORD *)a1 = &unk_24D92F480;
  v4 = (_OWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *v4 = v5;
  }
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 24);
  if (*(char *)(a1 + 31) < 0)
    v4 = *(_OWORD **)v4;
  *(_QWORD *)(a1 + 40) = v4;
  if (*((char *)a2 + 23) >= 0)
    v6 = (const std::string::value_type *)a2;
  else
    v6 = *(const std::string::value_type **)a2;
  *(_QWORD *)(a1 + 40) = (char *)v4 + *((_QWORD *)a2 + 4) - (_QWORD)v6;
  return a1;
}

uint64_t boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::~holder(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D92F480;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::~holder(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D92F480;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x219A19A08);
}

void *boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::type()
{
}

uint64_t boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::holder(v2, (__int128 *)(a1 + 8));
  return v2;
}

void sub_21811CE80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1093C40E70F46F0);
  _Unwind_Resume(a1);
}

const void **boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  const void **v6;
  const void **v7;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (v3)
  {
    v5 = a1 + 1;
    v6 = *(const void ***)(a1 - 8);
    do
    {
      while (1)
      {
        v7 = (const void **)(v3 - 56);
        if (std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 - 56), a2))
          break;
        v3 = *(_QWORD *)(v3 + 8);
        v6 = v7;
        if (!v3)
          goto LABEL_7;
      }
      v3 = *(_QWORD *)(v3 + 16);
    }
    while (v3);
    v7 = v6;
LABEL_7:
    if (v7 != (const void **)v2 && !std::less<std::string>::operator()[abi:ne180100](v5, a2, v7))
      return v7;
  }
  return (const void **)v2;
}

uint64_t boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>::put_value@<X0>(const std::locale *a1@<X0>, uint64_t a2@<X8>)
{
  std::ios_base *v4;
  std::locale *rdbuf;
  std::locale *v6;
  __int128 v8;
  uint64_t v9;
  std::locale v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;
  std::locale v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  v4 = (std::ios_base *)((char *)v11 + *(_QWORD *)(v11[0] - 24));
  std::ios_base::getloc(v4);
  std::ios_base::imbue(v4, a1);
  std::locale::~locale((std::locale *)&v8);
  rdbuf = (std::locale *)v4->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a1);
    v6 = rdbuf + 1;
    std::locale::locale(&v14, v6);
    std::locale::operator=(v6, a1);
    std::locale::~locale(&v14);
  }
  std::locale::~locale(&v10);
  std::ostream::operator<<();
  if ((*((_BYTE *)&v11[4] + *(_QWORD *)(v11[0] - 24)) & 5) != 0)
  {
    *(_BYTE *)a2 = 0;
  }
  else
  {
    std::stringbuf::str();
    *(_OWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 24) = v9;
    *(_BYTE *)a2 = 1;
  }
  v11[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v11[1] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v13);
}

void sub_21811D0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, char a13)
{
  std::ostringstream::~ostringstream((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void boost::exception_detail::throw_exception_<boost::property_tree::ptree_bad_data>(const std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD v7[7];
  int v8;

  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::error_info_injector((uint64_t)v7, a1);
  v7[5] = a2;
  v7[6] = a3;
  v8 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>((uint64_t)v7);
}

void sub_21811D128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::runtime_error *boost::property_tree::ptree_bad_data::ptree_bad_data<boost::any>(std::runtime_error *a1, const std::string *a2, uint64_t *a3)
{
  uint64_t v5;

  std::runtime_error::runtime_error(a1, a2)->__vftable = (std::runtime_error_vtbl *)&unk_24D92F660;
  v5 = *a3;
  if (*a3)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  a1[1].__vftable = (std::runtime_error_vtbl *)v5;
  return a1;
}

void sub_21811D18C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::property_tree::ptree_bad_data::~ptree_bad_data(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;

  this->__vftable = (std::runtime_error_vtbl *)&unk_24D92F660;
  v2 = this[1].__vftable;
  if (v2)
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  std::runtime_error::~runtime_error(this);
}

{
  std::runtime_error_vtbl *v2;

  this->__vftable = (std::runtime_error_vtbl *)&unk_24D92F660;
  v2 = this[1].__vftable;
  if (v2)
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x219A19A08);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>(uint64_t a1)
{
  void *exception;
  uint64_t v3;
  uint64_t v4;
  std::runtime_error v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  int v10;

  exception = __cxa_allocate_exception(0x48uLL);
  std::runtime_error::runtime_error(&v5, (const std::runtime_error *)a1);
  v5.__vftable = (std::runtime_error_vtbl *)&unk_24D92F660;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v6 = v3;
  v7 = &unk_24D918C48;
  v4 = *(_QWORD *)(a1 + 32);
  v8 = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v9 = *(_OWORD *)(a1 + 40);
  v10 = *(_DWORD *)(a1 + 56);
  v5.__vftable = (std::runtime_error_vtbl *)&unk_24D92F618;
  v7 = &unk_24D92F640;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::clone_impl((uint64_t)exception, (uint64_t)&v5);
}

void sub_21811D2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  a9.__vftable = (std::runtime_error_vtbl *)(v11 + 16);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  std::runtime_error::~runtime_error(&a9);
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 64) = &unk_24D918BA8;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&unk_24D92F660;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(a1 + 24) = &unk_24D918C48;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)a1 = &unk_24D92F578;
  *(_QWORD *)(a1 + 24) = &unk_24D92F5B0;
  *(_QWORD *)(a1 + 64) = &unk_24D92F5E8;
  boost::exception_detail::copy_boost_exception(a1 + 24, a2 + 24);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 64) = &unk_24D918BA8;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&unk_24D92F660;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = &unk_24D918C48;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)a1 = &unk_24D92F578;
  *(_QWORD *)(a1 + 24) = &unk_24D92F5B0;
  *(_QWORD *)(a1 + 64) = &unk_24D92F5E8;
  return a1;
}

void sub_21811D3E4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t v2;
  std::runtime_error_vtbl *v4;

  v1->__vftable = (std::runtime_error_vtbl *)(v2 + 16);
  v4 = v1[1].__vftable;
  if (v4)
    (*((void (**)(std::runtime_error_vtbl *))v4->~runtime_error + 1))(v4);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  *(_QWORD *)a1 = &unk_24D92F660;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(a1);
  JUMPOUT(0x219A19A08);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(a1);
  JUMPOUT(0x219A19A08);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_21811D4F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C4095DD773DLL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::clone_impl((uint64_t)exception, a1);
}

void sub_21811D558(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(a1 - 24);
}

{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(a1 - 24);
  JUMPOUT(0x219A19A08);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::~clone_impl(_QWORD *a1)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(a1 - 24);
  JUMPOUT(0x219A19A08);
}

void sub_21811D75C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t v2;
  std::runtime_error_vtbl *v4;

  v1->__vftable = (std::runtime_error_vtbl *)(v2 + 16);
  v4 = v1[1].__vftable;
  if (v4)
    (*((void (**)(std::runtime_error_vtbl *))v4->~runtime_error + 1))(v4);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::error_info_injector(uint64_t a1, const std::runtime_error *a2)
{
  uint64_t v4;

  std::runtime_error::runtime_error((std::runtime_error *)a1, a2)->__vftable = (std::runtime_error_vtbl *)&unk_24D92F660;
  v4 = (uint64_t)a2[1].__vftable;
  if (v4)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_24D92F618;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = &unk_24D92F640;
  return a1;
}

void sub_21811D808(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  uint64_t v19;
  std::string v20;

  v4 = *(_BYTE **)(a2 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    v8 = *(_QWORD *)a2;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = (_BYTE *)(*(_QWORD *)a2 + v5);
    v7 = v6 - v4;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
    v6 = (_BYTE *)(a2 + v5);
    v7 = a2 + v5 - (_QWORD)v4;
    v8 = a2;
  }
  v9 = memchr(v4, *(char *)(a2 + 24), v7);
  if (v9)
    v10 = v9;
  else
    v10 = v6;
  if (v10 != (void *)(v8 + v5))
  {
    boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)a2, &v20);
    v11 = (char *)boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(*(_QWORD *)(a1 + 24) + 16, (const void **)&v20.__r_.__value_.__l.__data_);
    if (*(char **)(*(_QWORD *)(a1 + 24) + 8) == v11)
    {
      v15 = 0uLL;
      v16 = 0;
      v12 = operator new();
      v13 = operator new(0x60uLL);
      *(_QWORD *)(v12 + 8) = v13;
      v13[7] = 0;
      v13[8] = v13 + 7;
      v13[9] = v13 + 7;
      v13[10] = v13 + 10;
      v13[11] = v13 + 10;
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v12;
      std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(&__p, (__int128 *)&v20, &v15);
      v11 = (char *)boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(*(_QWORD *)(a1 + 24) + 16, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), (__int128 *)&__p);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v15);
    }
    a1 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(v11 + 24, a2);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_21811D994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair((uint64_t)&a13);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a9);
  if (*(char *)(v13 - 49) < 0)
    operator delete(*(void **)(v13 - 72));
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string::size_type v5;
  __int128 v6;
  uint64_t v7;
  std::string v9;
  uint64_t v10;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v9 = *(std::string *)a2;
  v4 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v4, *(_QWORD *)(a2 + 24));
  v5 = v9.__r_.__value_.__r.__words[2];
  v6 = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *(_OWORD *)a1;
  *(_OWORD *)a1 = v6;
  v7 = *(_QWORD *)(a1 + 24);
  v9.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  v10 = v7;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v9);
  return a1;
}

void sub_21811DAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x219A19A08](v14, 0x1020C402FC1992ELL);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair(uint64_t a1)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v7, *((_QWORD *)a3 + 3));
  this[2].__r_.__value_.__r.__words[0] = v7;
  return this;
}

void sub_21811DBC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(uint64_t a1, uint64_t a2)
{
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t i;
  uint64_t v9;
  _QWORD v11[8];
  char v12;

  v4 = operator new(0x60uLL);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v11[1] = v5;
  v11[3] = v5;
  if (v5)
  {
    if (v5 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = operator new(16 * v5);
  }
  else
  {
    v7 = 0;
  }
  v11[4] = v7;
  v11[5] = 0;
  v11[6] = v6;
  v11[7] = v4;
  v12 = 0;
  for (i = *(_QWORD *)(v6 + 88); ; i = *(_QWORD *)(v9 + 88))
  {
    v9 = i ? i - 80 : 0;
    if (v9 == v6)
      break;
    boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::clone((uint64_t)v11, (__int128 *)v9);
  }
  boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::copy_(a1 + 16, a2 + 16, v11);
  v12 = 1;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~copy_map((uint64_t)v11);
  return a1;
}

void sub_21811DCF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~copy_map((uint64_t)va);
  operator delete(*(void **)(v2 + 8));
  _Unwind_Resume(a1);
}

void boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::clone(uint64_t a1, __int128 *a2)
{
  __int128 **v4;
  std::string *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v4 = (__int128 **)(*(_QWORD *)(a1 + 32) + 16 * *(_QWORD *)(a1 + 40));
  *v4 = a2;
  v5 = (std::string *)operator new(0x60uLL);
  v4[1] = (__int128 *)v5;
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100](v5, a2);
  v6 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v6;
  if (v6 == *(_QWORD *)(a1 + 8))
  {
    v7 = 126 - 2 * __clz(v6);
    if (v6)
      v8 = v7;
    else
      v8 = 0;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,false>(*(unint64_t **)(a1 + 32), (unint64_t *)(*(_QWORD *)(a1 + 32) + 16 * v6), (uint64_t)&v9, v8, 1);
  }
}

void sub_21811DDA8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  operator delete(*(void **)(*(_QWORD *)(v1 + 32) + 16 * *(_QWORD *)(v1 + 40) + 8));
  __cxa_rethrow();
}

void sub_21811DDC4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::copy_(unint64_t result, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a2 - 8);
  v4 = *(_QWORD *)(result - 8);
  v5 = a3[5];
  do
  {
    v6 = *(_QWORD *)(v3 + 88);
    if (v6)
      v3 = v6 - 80;
    else
      v3 = 0;
    v7 = a3 + 7;
    if (a3[6] != v3)
    {
      v8 = (_QWORD *)a3[4];
      if (v5)
      {
        v9 = v5;
        do
        {
          v10 = v9 >> 1;
          v11 = &v8[2 * (v9 >> 1)];
          v13 = *v11;
          v12 = v11 + 2;
          v9 += ~(v9 >> 1);
          if (v13 < v3)
            v8 = v12;
          else
            v9 = v10;
        }
        while (v9);
      }
      v7 = v8 + 1;
    }
    v14 = *v7;
    *(_QWORD *)(v4 + 88) = v14 + 80;
    *(_QWORD *)(v14 + 80) = v4 + 80;
    v4 = v14;
  }
  while (v3 != *(_QWORD *)(a2 - 8));
  return boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::copy_(result, a2, a3);
}

std::string *std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v6, *((_QWORD *)a2 + 6));
  this[2].__r_.__value_.__r.__words[0] = v6;
  return this;
}

void sub_21811DF1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 *v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = v4[2];
        if (v6 < *v4)
        {
          v7 = v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = *(unint64_t *)((char *)result + v8 - 16);
            v8 -= 16;
            if (v6 >= v9)
            {
              v10 = (unint64_t *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(__int128 *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_QWORD *)a1)
  {
    if (v4 < v3)
    {
      v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 >= *a2)
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 >= *(_QWORD *)a1)
      return 1;
    v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  __int128 v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;

  v2 = *(_OWORD *)a1;
  v3 = *a1;
  if (*a1 >= *(a2 - 2))
  {
    v6 = a1 + 2;
    do
    {
      v4 = v6;
      if (v6 >= a2)
        break;
      v6 += 2;
    }
    while (v3 >= *v4);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = v4[2];
      v4 += 2;
    }
    while (v3 >= v5);
  }
  if (v4 < a2)
  {
    do
    {
      v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < v7);
  }
  while (v4 < a2)
  {
    v11 = *(_OWORD *)v4;
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v11;
    do
    {
      v8 = v4[2];
      v4 += 2;
    }
    while (v3 >= v8);
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < v9);
  }
  if (v4 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v4 - 1);
  *((_OWORD *)v4 - 1) = v2;
  return v4;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;

  v2 = 0;
  v3 = *a1;
  v4 = *(_QWORD *)a1;
  do
    v5 = *(_QWORD *)&a1[++v2];
  while (v5 < v4);
  v6 = &a1[v2];
  v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2)
        break;
      v9 = *((_QWORD *)a2-- - 2);
    }
    while (v9 >= v4);
  }
  else
  {
    do
      v8 = *((_QWORD *)a2-- - 2);
    while (v8 >= v4);
  }
  if (v6 < a2)
  {
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      v12 = *v10;
      *v10 = *v11;
      *v11 = v12;
      do
        v13 = *((_QWORD *)v10++ + 2);
      while (v13 < v4);
      do
        v14 = *((_QWORD *)v11-- - 2);
      while (v14 >= v4);
    }
    while (v10 < v11);
    v7 = v10 - 1;
  }
  if (v7 != a1)
    *a1 = *v7;
  *v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(__int128 *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(__int128 *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(_QWORD *)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  __int128 v30;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v30 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[2 * v17 + 2];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            v20 = v21;
          }
          *(_OWORD *)v18 = *(_OWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)v19 = v30;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v30;
          v22 = (char *)v19 - (char *)a1 + 16;
          if (v22 >= 17)
          {
            v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            v24 = &a1[2 * v23];
            v25 = *v19;
            if (*v24 < *v19)
            {
              v26 = v19[1];
              do
              {
                v27 = v19;
                v19 = v24;
                *(_OWORD *)v27 = *(_OWORD *)v24;
                if (!v23)
                  break;
                v23 = (v23 - 1) >> 1;
                v24 = &a1[2 * v23];
              }
              while (*v24 < v25);
              *v19 = v25;
              v19[1] = v26;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        if (*v8 < v8[2])
        {
          v10 = v8[2];
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *a4;
      if (v10 >= *a4)
      {
        v12 = a4[1];
        do
        {
          v13 = a4;
          a4 = v8;
          *(_OWORD *)v13 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v14 = (2 * v7) | 1;
          v8 = (unint64_t *)(result + 16 * v14);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v15 = *v8;
            v7 = v14;
          }
          else
          {
            v15 = *v8;
            if (*v8 >= v8[2])
            {
              v7 = v14;
            }
            else
            {
              v15 = v8[2];
              v8 += 2;
            }
          }
        }
        while (v15 >= v11);
        *a4 = v11;
        a4[1] = v12;
      }
    }
  }
  return result;
}

unint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::copy_(unint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;

  v3 = *(_QWORD *)(a2 - 8);
  v4 = *(_QWORD *)(v3 + 56);
  v5 = *(_QWORD *)(result - 8);
  v6 = (unint64_t *)(v5 + 56);
  if (v4 > 1)
  {
    *v6 = *v6 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v3 + 56) & 1;
    v7 = *(_QWORD *)(v3 + 56);
    v8 = (v7 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v9 = (v7 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v10 = v4 & 1;
    if (v9)
      v11 = 0;
    else
      v11 = v8;
    v12 = a3[6];
    if (v12 == v11)
    {
      v19 = a3 + 7;
    }
    else
    {
      v13 = (_QWORD *)a3[4];
      v14 = a3[5];
      while (v14)
      {
        v15 = v14 >> 1;
        v16 = &v13[2 * (v14 >> 1)];
        v18 = *v16;
        v17 = v16 + 2;
        v14 += ~(v14 >> 1);
        if (v18 < v11)
          v13 = v17;
        else
          v14 = v15;
      }
      v19 = v13 + 1;
    }
    *v6 = v10 | (*v19 + 56);
    v20 = *(_QWORD *)(v3 + 64);
    v21 = v20 - 56;
    if (!v20)
      v21 = 0;
    if (v12 == v21)
    {
      v28 = a3 + 7;
    }
    else
    {
      v22 = (_QWORD *)a3[4];
      v23 = a3[5];
      while (v23)
      {
        v24 = v23 >> 1;
        v25 = &v22[2 * (v23 >> 1)];
        v27 = *v25;
        v26 = v25 + 2;
        v23 += ~(v23 >> 1);
        if (v27 < v21)
          v22 = v26;
        else
          v23 = v24;
      }
      v28 = v22 + 1;
    }
    *(_QWORD *)(v5 + 64) = *v28 + 56;
    v29 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 72);
    if (v29)
      v30 = v29 - 56;
    else
      v30 = 0;
    if (a3[6] == v30)
    {
      v38 = a3 + 7;
      v32 = a3[5];
    }
    else
    {
      v31 = (_QWORD *)a3[4];
      v32 = a3[5];
      if (v32)
      {
        v33 = a3[5];
        do
        {
          v34 = v33 >> 1;
          v35 = &v31[2 * (v33 >> 1)];
          v37 = *v35;
          v36 = v35 + 2;
          v33 += ~(v33 >> 1);
          if (v37 < v30)
            v31 = v36;
          else
            v33 = v34;
        }
        while (v33);
      }
      v38 = v31 + 1;
    }
    *(_QWORD *)(*(_QWORD *)(result - 8) + 72) = *v38 + 56;
    if (v32)
    {
      v39 = (_QWORD *)a3[4];
      v40 = &v39[2 * v32];
      do
      {
        v42 = *v39;
        v41 = (_QWORD *)v39[1];
        v43 = (_QWORD *)(*v39 + 56);
        v44 = v41 + 7;
        v45 = *v43 & 1;
        result = v41[7] & 0xFFFFFFFFFFFFFFFELL | v45;
        v41[7] = result;
        v46 = *v43 & 0xFFFFFFFFFFFFFFFELL;
        if (v46)
        {
          v47 = a3 + 7;
          if (a3[6] != v46 - 56)
          {
            v48 = (_QWORD *)a3[4];
            v49 = a3[5];
            while (v49)
            {
              v50 = v49 >> 1;
              v51 = &v48[2 * (v49 >> 1)];
              v53 = *v51;
              v52 = v51 + 2;
              v49 += ~(v49 >> 1);
              if (v53 < v46 - 56)
                v48 = v52;
              else
                v49 = v50;
            }
            v47 = v48 + 1;
          }
          result = *v47;
          *v44 = v45 | (result + 56);
          if (*(_QWORD **)(v46 + 8) == v43)
          {
            *(_QWORD *)(result + 64) = v44;
          }
          else if (*(_QWORD **)(v46 + 16) == v43)
          {
            *(_QWORD *)(result + 72) = v44;
          }
        }
        else
        {
          *v44 = v45;
        }
        if (!*(_QWORD *)(v42 + 64))
          v41[8] = 0;
        if (!*(_QWORD *)(v42 + 72))
          v41[9] = 0;
        v39 += 2;
      }
      while (v39 != v40);
    }
  }
  else
  {
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 64) = v6;
    *(_QWORD *)(*(_QWORD *)(result - 8) + 72) = *(_QWORD *)(result - 8) + 56;
  }
  return result;
}

uint64_t boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~copy_map(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 64) && *(_QWORD *)(a1 + 40))
  {
    v2 = 0;
    v3 = 8;
    do
    {
      boost::detail::allocator::destroy<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v3));
      operator delete(*(void **)(*(_QWORD *)(a1 + 32) + v3));
      ++v2;
      v3 += 16;
    }
    while (v2 < *(_QWORD *)(a1 + 40));
  }
  if (*(_QWORD *)(a1 + 24))
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void boost::detail::allocator::destroy<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>(uint64_t a1)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unint64_t *boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t *result;
  char v6;
  _QWORD *v7;
  unint64_t v8;

  result = boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_<boost::multi_index::detail::lvalue_tag>(a1 - 16, a3);
  if (v6)
  {
    if (*(_QWORD *)(a1 - 8) != a2)
    {
      *(_QWORD *)(result[10] + 8) = result[11];
      *(_QWORD *)result[11] = result[10];
      v8 = *(_QWORD *)(a2 + 80);
      v7 = (_QWORD *)(a2 + 80);
      result[10] = v8;
      result[11] = (unint64_t)v7;
      *v7 = result + 10;
      *(_QWORD *)(result[10] + 8) = result + 10;
    }
  }
  return result;
}

unint64_t *boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, __int128 *a2)
{
  unint64_t *result;
  unint64_t *v4;

  v4 = 0;
  result = boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert_<boost::multi_index::detail::lvalue_tag>(a1 + 16, a2, &v4);
  if (result == v4)
    ++*(_QWORD *)(a1 + 24);
  return result;
}

unint64_t *boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, __int128 *a2, unint64_t **a3)
{
  unint64_t *result;
  _QWORD *v6;
  unint64_t v7;

  result = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::insert_<boost::multi_index::detail::lvalue_tag>(a1, a2, a3);
  if (result == *a3)
  {
    v6 = *(_QWORD **)(a1 - 8);
    v7 = v6[10];
    v6 += 10;
    result[10] = v7;
    result[11] = (unint64_t)v6;
    *v6 = result + 10;
    *(_QWORD *)(result[10] + 8) = result + 10;
  }
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unint64_t *v10;

  v9 = 0;
  if ((boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::link_point(a1, (const void **)a2, (uint64_t)&v9) & 1) != 0)
  {
    v6 = boost::multi_index::detail::index_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_(a1, a2, (uint64_t)a3);
    v7 = v6;
    if (v6 == *a3)
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link(v6 + 56, v9, v10, (unint64_t *)(*(_QWORD *)(a1 - 8) + 56));
  }
  else if (v10)
  {
    return v10 - 7;
  }
  else
  {
    return 0;
  }
  return (unint64_t *)v7;
}

uint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::link_point(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (v5)
  {
    v7 = a1 + 1;
    do
    {
      v4 = v5 - 56;
      v8 = std::less<std::string>::operator()[abi:ne180100](v7, a2, (const void **)(v5 - 56));
      if (v8)
        v9 = 64;
      else
        v9 = 72;
      v5 = *(_QWORD *)(v4 + v9);
    }
    while (v5);
    LODWORD(v5) = !v8;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v4 + 56;
  return 1;
}

uint64_t boost::multi_index::detail::index_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v5;

  v5 = (std::string *)operator new(0x60uLL);
  *(_QWORD *)a3 = v5;
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100](v5, a2);
  return *(_QWORD *)a3;
}

void sub_21811F110(void *a1)
{
  void **v1;

  __cxa_begin_catch(a1);
  operator delete(*v1);
  __cxa_rethrow();
}

void sub_21811F124(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link(unint64_t a1, int a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;

  if (a2)
  {
    a3[2] = a1;
    v4 = a4 + 2;
    v5 = (unint64_t *)a4[2];
  }
  else
  {
    a3[1] = a1;
    if (a3 == a4)
    {
      *a3 = *a3 & 1 | a1;
      v4 = a3 + 2;
LABEL_8:
      *v4 = a1;
      goto LABEL_9;
    }
    v4 = a4 + 1;
    v5 = (unint64_t *)a4[1];
  }
  if (v5 == a3)
    goto LABEL_8;
LABEL_9:
  v6 = *(_QWORD *)a1 & 1 | (unint64_t)a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v6;
  return boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance((unint64_t *)a1, a4);
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t i;
  unint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = result;
  v3 = *result & 0xFFFFFFFFFFFFFFFELL;
  *result = v3;
  v4 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  if ((unint64_t *)v4 != result)
  {
    v5 = (unint64_t *)(*result & 0xFFFFFFFFFFFFFFFELL);
    for (i = *v5; (*v5 & 1) == 0; i = *v5)
    {
      v8 = *(unint64_t **)((i & 0xFFFFFFFFFFFFFFFELL) + 8);
      if (v8 == v5)
      {
        v8 = *(unint64_t **)((i & 0xFFFFFFFFFFFFFFFELL) + 16);
        if (!v8 || (*(_BYTE *)v8 & 1) != 0)
        {
          if (v2 == (unint64_t *)v5[2])
          {
            boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v5, a2);
            v10 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
            v2 = v5;
          }
          else
          {
            v10 = v5;
            v5 = v2;
          }
          *v10 |= 1uLL;
          *(_QWORD *)(*(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
          result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right((unint64_t *)(*(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL), a2);
          goto LABEL_17;
        }
      }
      else if (!v8 || (*(_BYTE *)v8 & 1) != 0)
      {
        if (v2 == (unint64_t *)v5[1])
        {
          boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v5, a2);
          v9 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
          v2 = v5;
        }
        else
        {
          v9 = v5;
          v5 = v2;
        }
        *v9 |= 1uLL;
        *(_QWORD *)(*(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
        result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left((unint64_t *)(*(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL), a2);
        goto LABEL_17;
      }
      *v5 = i | 1;
      *v8 |= 1uLL;
      *(_QWORD *)(*(_QWORD *)(*v2 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
      v2 = (unint64_t *)(*(_QWORD *)(*v2 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
LABEL_17:
      v4 = *a2 & 0xFFFFFFFFFFFFFFFELL;
      if (v2 == (unint64_t *)v4)
        goto LABEL_20;
      v5 = (unint64_t *)(*v2 & 0xFFFFFFFFFFFFFFFELL);
    }
    v2 = (unint64_t *)v4;
LABEL_20:
    v3 = *v2;
  }
  *v2 = v3 | 1;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result[2];
  result[2] = *(_QWORD *)(v2 + 8);
  v3 = *(unint64_t **)(v2 + 8);
  if (v3)
    *v3 = *v3 & 1 | (unint64_t)result;
  *(_QWORD *)v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v2 & 1;
  if ((unint64_t *)(*a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    *a2 = *a2 & 1 | v2;
    v4 = *result;
  }
  else
  {
    v4 = *result;
    v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 8) == result)
      *(_QWORD *)(v5 + 8) = v2;
    else
      *(_QWORD *)(v5 + 16) = v2;
  }
  *(_QWORD *)(v2 + 8) = result;
  *result = v4 & 1 | v2;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result[1];
  result[1] = *(_QWORD *)(v2 + 16);
  v3 = *(unint64_t **)(v2 + 16);
  if (v3)
    *v3 = *v3 & 1 | (unint64_t)result;
  *(_QWORD *)v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v2 & 1;
  if ((unint64_t *)(*a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    *a2 = *a2 & 1 | v2;
    v4 = *result;
  }
  else
  {
    v4 = *result;
    v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 16) == result)
      *(_QWORD *)(v5 + 16) = v2;
    else
      *(_QWORD *)(v5 + 8) = v2;
  }
  *(_QWORD *)(v2 + 16) = result;
  *result = v4 & 1 | v2;
  return result;
}

std::string *boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<std::string,boost::property_tree::id_translator<std::string>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;

  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child_optional(a1, (uint64_t)a2, (uint64_t *)&v13);
  if (v13)
  {
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<std::string,boost::property_tree::id_translator<std::string>>(v13, a3);
    return v13;
  }
  else
  {
    v10 = 0uLL;
    v11 = 0;
    v7 = operator new();
    v8 = operator new(0x60uLL);
    *(_QWORD *)(v7 + 8) = v8;
    v8[7] = 0;
    v8[8] = v8 + 7;
    v8[9] = v8 + 7;
    v8[10] = v8 + 10;
    v8[11] = v8 + 10;
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v7;
    v6 = (std::string *)boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_child(a1, a2, &v10);
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v10);
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<std::string,boost::property_tree::id_translator<std::string>>(v6, a3);
  }
  return v6;
}

void sub_21811F55C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<std::string,boost::property_tree::id_translator<std::string>>(std::string *this, uint64_t a2)
{
  std::string __p;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  std::string::operator=(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_21811F644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD v7[13];
  int v8;

  boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::error_info_injector((uint64_t)v7, a1);
  v7[11] = a2;
  v7[12] = a3;
  v8 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>((uint64_t)v7);
}

void sub_21811F6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  a17 = &unk_24D918C48;
  if (a18)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a18 + 32))(a18))
      a18 = 0;
  }
  boost::property_tree::file_parser_error::~file_parser_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::ini_parser::detail::check_dupes<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[3];
  _QWORD v14[9];

  v1 = *(_QWORD *)(result + 24);
  if (*(_QWORD *)(v1 + 24) >= 2uLL)
  {
    v2 = *(_QWORD *)(v1 + 8);
    v3 = *(_QWORD *)(v2 + 64);
    v4 = v3 ? (unsigned __int8 *)(v3 - 56) : 0;
    v14[0] = v4 + 56;
    result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)v14);
    v5 = v14[0] ? v14[0] - 56 : 0;
    if (v5 != v2)
    {
      do
      {
        v6 = v4[23];
        if ((v6 & 0x80u) == 0)
          v7 = v4[23];
        else
          v7 = *((_QWORD *)v4 + 1);
        v8 = *(unsigned __int8 *)(v5 + 23);
        v9 = (char)v8;
        if ((v8 & 0x80u) != 0)
          v8 = *(_QWORD *)(v5 + 8);
        if (v7 == v8)
        {
          if (v9 >= 0)
            v10 = (unsigned __int8 *)v5;
          else
            v10 = *(unsigned __int8 **)v5;
          if ((v6 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
            {
LABEL_29:
              std::string::basic_string[abi:ne180100]<0>(v13, "duplicate key");
              std::string::basic_string[abi:ne180100]<0>(&v12, "");
              boost::property_tree::file_parser_error::file_parser_error((uint64_t)v14, (uint64_t)v13, &v12, 0);
              v14[0] = &unk_24D92F818;
              boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)v14, (uint64_t)"void boost::property_tree::ini_parser::detail::check_dupes(const Ptree &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 191);
            }
          }
          else
          {
            if (!v4[23])
              goto LABEL_29;
            while (*v4 == *v10)
            {
              ++v4;
              ++v10;
              if (!--v6)
                goto LABEL_29;
            }
          }
        }
        v14[0] = v5 + 56;
        result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)v14);
        v4 = (unsigned __int8 *)v5;
        if (v14[0])
          v11 = v14[0] - 56;
        else
          v11 = 0;
        v5 = v11;
      }
      while (v11 != v2);
    }
  }
  return result;
}

void sub_21811F878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22)
{
  boost::property_tree::file_parser_error::~file_parser_error(&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void boost::property_tree::ini_parser::detail::write_sections<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[3];
  _QWORD v15[9];

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  v3 = *(_QWORD *)(v2 + 88);
  if (v3)
    v4 = v3 - 80;
  else
    v4 = 0;
  while (v4 != v2)
  {
    if (*(_QWORD *)(*(_QWORD *)(v4 + 48) + 24))
    {
      boost::property_tree::ini_parser::detail::check_dupes<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(v4 + 24);
      if (*(char *)(v4 + 47) < 0)
      {
        if (*(_QWORD *)(v4 + 32))
        {
LABEL_22:
          std::string::basic_string[abi:ne180100]<0>(v14, "mixed data and children");
          std::string::basic_string[abi:ne180100]<0>(&v13, "");
          boost::property_tree::file_parser_error::file_parser_error((uint64_t)v15, (uint64_t)v14, &v13, 0);
          v15[0] = &unk_24D92F818;
          boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)v15, (uint64_t)"void boost::property_tree::ini_parser::detail::write_sections(std::basic_ostream<typename Ptree::key_type::value_type> &, const Ptree &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 244);
        }
      }
      else if (*(_BYTE *)(v4 + 47))
      {
        goto LABEL_22;
      }
      LOBYTE(v15[0]) = 91;
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v15, 1);
      v7 = *(char *)(v4 + 23);
      if (v7 >= 0)
        v8 = v4;
      else
        v8 = *(_QWORD *)v4;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(v4 + 23);
      else
        v9 = *(_QWORD *)(v4 + 8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      LOBYTE(v15[0]) = 93;
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v15, 1);
      LOBYTE(v15[0]) = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v15, 1);
      boost::property_tree::ini_parser::detail::write_keys<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, v4 + 24, 1);
    }
    v12 = *(_QWORD *)(v4 + 88);
    if (v12)
      v4 = v12 - 80;
    else
      v4 = 0;
  }
}

void sub_21811FA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22)
{
  boost::property_tree::file_parser_error::~file_parser_error(&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>(uint64_t a1)
{
  void *exception;
  _BYTE v3[112];

  exception = __cxa_allocate_exception(0x78uLL);
  boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::error_info_injector((uint64_t)v3, a1);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone_impl((uint64_t)exception, (uint64_t)v3);
}

void sub_21811FAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  void *v18;
  int v19;

  a17 = &unk_24D918C48;
  if (a18 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a18 + 32))(a18))
    a18 = 0;
  boost::property_tree::file_parser_error::~file_parser_error(&a9);
  if (v19)
    __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 72) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 72) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 112) = &unk_24D918BA8;
  v4 = (_QWORD *)boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::error_info_injector(a1, a2);
  *v4 = &unk_24D92F730;
  v4[9] = &unk_24D92F768;
  *(_QWORD *)(a1 + 112) = &unk_24D92F7A0;
  boost::exception_detail::copy_boost_exception((uint64_t)(v4 + 9), a2 + 72);
  return a1;
}

void sub_21811FBCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::error_info_injector(uint64_t a1, uint64_t a2)
{
  std::runtime_error *v4;
  std::runtime_error v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D92F840;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v4[1], *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(std::runtime_error *)(a2 + 16);
    v4[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
    v4[1] = v5;
  }
  v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)a1 = &unk_24D92F818;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = &unk_24D918C48;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v9;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v10 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v10;
  *(_QWORD *)a1 = &unk_24D92F7D0;
  *(_QWORD *)(a1 + 72) = &unk_24D92F7F8;
  return a1;
}

{
  std::runtime_error *v4;
  std::runtime_error v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;

  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D92F840;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v4[1], *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(std::runtime_error *)(a2 + 16);
    v4[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
    v4[1] = v5;
  }
  v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  *(_QWORD *)a1 = &unk_24D92F7D0;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = &unk_24D92F7F8;
  return a1;
}

void sub_21811FCF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 72) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_21811FDCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F3C4066575A4CLL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x78uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_21811FE2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::~clone_impl(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 9);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::property_tree::file_parser_error::~file_parser_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::~clone_impl(a1 - 72);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 9) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 10);
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::~error_info_injector(a1 - 72);
}

void boost::property_tree::ini_parser::ini_parser_error::~ini_parser_error(std::runtime_error *this)
{
  boost::property_tree::file_parser_error::~file_parser_error(this);
  JUMPOUT(0x219A19A08);
}

void boost::property_tree::file_parser_error::~file_parser_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_24D92F840;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
    operator delete((void *)this[2].__imp_.__imp_);
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::runtime_error::~runtime_error(this);
}

_QWORD *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 112) = &unk_24D918BA8;
  result = (_QWORD *)boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::error_info_injector(a1, a2);
  *result = &unk_24D92F730;
  result[9] = &unk_24D92F768;
  result[14] = &unk_24D92F7A0;
  return result;
}

void sub_2181200C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::file_parser_error::file_parser_error(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string v12;

  boost::property_tree::file_parser_error::format_what(a2, (const char *)a3, a4);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v12);
  *(_QWORD *)a1 = &unk_24D92F458;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &unk_24D92F840;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v8 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_QWORD *)(a1 + 64) = a4;
  return a1;
}

void sub_2181201D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;

  if (*(char *)(v15 + 39) < 0)
    operator delete(*v16);
  std::runtime_error::~runtime_error((std::runtime_error *)v15);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::file_parser_error::format_what(uint64_t a1, const char *a2, uint64_t a3)
{
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  char v18;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  if (a2[23] < 0)
  {
    if (*((_QWORD *)a2 + 1))
      a2 = *(const char **)a2;
    else
      a2 = "<unspecified file>";
  }
  else if (!a2[23])
  {
    a2 = "<unspecified file>";
  }
  v6 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)a2, v6);
  if (a3)
  {
    v18 = 40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v18, 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v18 = 41;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v18, 1);
  }
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
  v9 = *(char *)(a1 + 23);
  if (v9 >= 0)
    v10 = a1;
  else
    v10 = *(_QWORD *)a1;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 23);
  else
    v11 = *(_QWORD *)(a1 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15[0] = v12;
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v17);
}

void sub_21812038C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD **)result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v2)
  {
    do
    {
      *(_QWORD *)result = v2;
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  else
  {
    v3 = (_QWORD *)(*v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v1 == (_QWORD *)v3[2])
    {
      do
      {
        v5 = v3;
        *(_QWORD *)result = v3;
        v3 = (_QWORD *)(*v3 & 0xFFFFFFFFFFFFFFFELL);
      }
      while (v5 == (_QWORD *)v3[2]);
      v4 = (_QWORD *)v5[2];
    }
    else
    {
      v4 = 0;
    }
    if (v4 != v3)
      *(_QWORD *)result = v3;
  }
  return result;
}

void boost::property_tree::ini_parser::detail::write_keys<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type size;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[3];
  std::string __p[3];

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  v4 = *(_QWORD *)(v3 + 88);
  if (v4)
    v5 = v4 - 80;
  else
    v5 = 0;
  while (v5 != v3)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 48) + 24))
    {
      if (a3)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "ptree is too deep");
        std::string::basic_string[abi:ne180100]<0>(&v17, "");
        boost::property_tree::file_parser_error::file_parser_error((uint64_t)__p, (uint64_t)v18, &v17, 0);
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D92F818;
        boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)__p, (uint64_t)"void boost::property_tree::ini_parser::detail::write_keys(std::basic_ostream<typename Ptree::key_type::value_type> &, const Ptree &, BOOL) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 210);
      }
    }
    else
    {
      v8 = *(char *)(v5 + 23);
      if (v8 >= 0)
        v9 = v5;
      else
        v9 = *(_QWORD *)v5;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(v5 + 23);
      else
        v10 = *(_QWORD *)(v5 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v9, v10);
      __p[0].__r_.__value_.__s.__data_[0] = 61;
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, 1);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v5 + 24, __p);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = __p;
      else
        v13 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      else
        size = __p[0].__r_.__value_.__l.__size_;
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, size);
      LOBYTE(v18[0]) = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, 1);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    v16 = *(_QWORD *)(v5 + 88);
    if (v16)
      v5 = v16 - 80;
    else
      v5 = 0;
  }
}

void sub_218120590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,int a23,__int16 a24,char a25,char a26)
{
  boost::property_tree::file_parser_error::~file_parser_error(&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string __p;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *a2 = __p;
  }
}

void sub_2181206B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(uint64_t a1)
{
  uint64_t v2;

  v2 = boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~multi_index_container(*(_QWORD *)(a1 + 24));
  MEMORY[0x219A19A08](v2, 0x1020C402FC1992ELL);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~multi_index_container(uint64_t a1)
{
  boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::delete_all_nodes_(a1 + 16);
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::delete_all_nodes_(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD **)(a1 - 8);
  v2 = v1[11];
  if (v2)
    v3 = (_QWORD *)(v2 - 80);
  else
    v3 = 0;
  if (v3 != v1)
  {
    do
    {
      v5 = v3[11];
      if (v5)
        v6 = (_QWORD *)(v5 - 80);
      else
        v6 = 0;
      boost::detail::allocator::destroy<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>(v3);
      operator delete(v3);
      v3 = v6;
    }
    while (v6 != *(_QWORD **)(a1 - 8));
  }
}

uint64_t boost::property_tree::ini_parser::read_ini<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(_QWORD *a1, __int128 *a2)
{
  const std::locale::facet *v4;
  unsigned __int8 v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  const std::locale::facet *v8;
  uint64_t v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD *v12;
  const std::ios_base *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v19;
  uint64_t v20;
  const std::locale::facet *v21;
  unsigned __int8 v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  std::string::size_type v26;
  const void **v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  std::string::size_type v31;
  std::string::size_type v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 *v37;
  std::string::value_type __c;
  std::string v39;
  std::string v40;
  uint64_t v41;
  std::string v42;
  _BYTE v43[32];
  std::string __p;
  std::string v45;
  _BYTE v46[48];
  std::string __str;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v4 = std::locale::use_facet((const std::locale *)&v45, MEMORY[0x24BEDB350]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 59);
  std::locale::~locale((std::locale *)&v45);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v6 = std::locale::use_facet((const std::locale *)&v45, MEMORY[0x24BEDB350]);
  v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 35);
  std::locale::~locale((std::locale *)&v45);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v8 = std::locale::use_facet((const std::locale *)&v45, MEMORY[0x24BEDB350]);
  v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 91);
  std::locale::~locale((std::locale *)&v45);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v10 = std::locale::use_facet((const std::locale *)&v45, MEMORY[0x24BEDB350]);
  __c = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 93);
  std::locale::~locale((std::locale *)&v45);
  v48 = 0uLL;
  v49 = 0;
  v11 = operator new();
  v12 = operator new(0x60uLL);
  *(_QWORD *)(v11 + 8) = v12;
  v12[7] = 0;
  v12[8] = v12 + 7;
  v12[9] = v12 + 7;
  v12[10] = v12 + 10;
  v12[11] = v12 + 10;
  *(_QWORD *)(v11 + 24) = 0;
  v50 = v11;
  memset(&__str, 0, sizeof(__str));
  v13 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (v13->__rdstate_)
    goto LABEL_2;
  v37 = a2;
  v19 = 0;
  v20 = 1;
  do
  {
    std::ios_base::getloc(v13);
    v21 = std::locale::use_facet((const std::locale *)&v45, MEMORY[0x24BEDB350]);
    v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale((std::locale *)&v45);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&__str, v22);
    v23 = *(_QWORD *)(*a1 - 24);
    if (*(_DWORD *)((char *)a1 + v23 + 32))
      v24 = (*(_DWORD *)((_BYTE *)a1 + v23 + 32) & 2) == 0;
    else
      v24 = 0;
    if (v24)
    {
      std::string::basic_string[abi:ne180100]<0>(&v42, "read error");
      std::string::basic_string[abi:ne180100]<0>(&v40, "");
      boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v45, (uint64_t)&v42, (__int128 *)&v40, v20);
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D92F818;
      boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)&v45, (uint64_t)"void boost::property_tree::ini_parser::read_ini(std::basic_istream<typename Ptree::key_type::value_type> &, Ptree &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 90);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + v23));
    boost::property_tree::detail::trim<std::string>((std::locale *)&v42, (uint64_t)&__str, &v45);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v45;
    *((_BYTE *)&v45.__r_.__value_.__s + 23) = 0;
    v45.__r_.__value_.__s.__data_[0] = 0;
    std::locale::~locale((std::locale *)&v42);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__str.__r_.__value_.__l.__size_)
        goto LABEL_55;
      v25 = *__str.__r_.__value_.__l.__data_;
    }
    else
    {
      if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
        goto LABEL_55;
      v25 = __str.__r_.__value_.__s.__data_[0];
    }
    if (v25 != v5 && v25 != v7)
    {
      if (v25 == v9)
      {
        if (v19 && !*(_QWORD *)(v19[3] + 24))
          boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::pop_back(v50 + 16);
        v26 = std::string::find(&__str, __c, 0);
        if (v26 == -1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v42, "unmatched '['");
          std::string::basic_string[abi:ne180100]<0>(&v40, "");
          boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v45, (uint64_t)&v42, (__int128 *)&v40, v20);
          v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D92F818;
          boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)&v45, (uint64_t)"void boost::property_tree::ini_parser::read_ini(std::basic_istream<typename Ptree::key_type::value_type> &, Ptree &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 109);
        }
        std::string::basic_string(&v45, &__str, 1uLL, v26 - 1, (std::allocator<char> *)&v42);
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
        boost::property_tree::detail::trim<std::string>((std::locale *)&v42, (uint64_t)&v45, &__p);
        std::locale::~locale((std::locale *)&v42);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        v27 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(v50 + 16, (const void **)&__p.__r_.__value_.__l.__data_);
        if (*(const void ***)(v50 + 8) != v27)
        {
          std::string::basic_string[abi:ne180100]<0>(&v42, "duplicate section name");
          std::string::basic_string[abi:ne180100]<0>(&v40, "");
          boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v45, (uint64_t)&v42, (__int128 *)&v40, v20);
          v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D92F818;
          boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)&v45, (uint64_t)"void boost::property_tree::ini_parser::read_ini(std::basic_istream<typename Ptree::key_type::value_type> &, Ptree &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 114);
        }
        memset(&v40, 0, sizeof(v40));
        v28 = operator new();
        v29 = operator new(0x60uLL);
        *(_QWORD *)(v28 + 8) = v29;
        v29[7] = 0;
        v29[8] = v29 + 7;
        v29[9] = v29 + 7;
        v29[10] = v29 + 10;
        v29[11] = v29 + 10;
        *(_QWORD *)(v28 + 24) = 0;
        v41 = v28;
        std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(&v42, (__int128 *)&__p, (__int128 *)&v40);
        std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>((uint64_t)&v45, (__int128 *)&v42);
        v30 = boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(v50 + 16, *(_QWORD *)(v50 + 8), (__int128 *)&v45);
        boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v46);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v43);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v40);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v19 = v30 + 3;
      }
      else
      {
        v31 = std::string::find(&__str, 61, 0);
        if (!v31)
        {
          std::string::basic_string[abi:ne180100]<0>(&v42, "key expected");
          std::string::basic_string[abi:ne180100]<0>(&v40, "");
          boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v45, (uint64_t)&v42, (__int128 *)&v40, v20);
          v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D92F818;
          boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)&v45, (uint64_t)"void boost::property_tree::ini_parser::read_ini(std::basic_istream<typename Ptree::key_type::value_type> &, Ptree &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 127);
        }
        v32 = v31;
        if (v31 == -1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v42, "'=' character not found in line");
          std::string::basic_string[abi:ne180100]<0>(&v40, "");
          boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v45, (uint64_t)&v42, (__int128 *)&v40, v20);
          v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D92F818;
          boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)&v45, (uint64_t)"void boost::property_tree::ini_parser::read_ini(std::basic_istream<typename Ptree::key_type::value_type> &, Ptree &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 124);
        }
        std::string::basic_string(&v45, &__str, 0, v31, (std::allocator<char> *)&v42);
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
        boost::property_tree::detail::trim<std::string>((std::locale *)&v42, (uint64_t)&v45, &__p);
        std::locale::~locale((std::locale *)&v42);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        std::string::basic_string(&v45, &__str, v32 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v42);
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
        boost::property_tree::detail::trim<std::string>((std::locale *)&v42, (uint64_t)&v45, &v39);
        v33 = v9;
        std::locale::~locale((std::locale *)&v42);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        if (v19)
          v34 = v19;
        else
          v34 = (unint64_t *)&v48;
        if (*(const void ***)(v34[3] + 8) != boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(v34[3] + 16, (const void **)&__p.__r_.__value_.__l.__data_))
        {
          std::string::basic_string[abi:ne180100]<0>(&v42, "duplicate key name");
          std::string::basic_string[abi:ne180100]<0>(&v40, "");
          boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v45, (uint64_t)&v42, (__int128 *)&v40, v20);
          v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D92F818;
          boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)&v45, (uint64_t)"void boost::property_tree::ini_parser::read_ini(std::basic_istream<typename Ptree::key_type::value_type> &, Ptree &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 134);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v40, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
        else
          v40 = v39;
        v35 = operator new();
        v36 = operator new(0x60uLL);
        *(_QWORD *)(v35 + 8) = v36;
        v36[7] = 0;
        v36[8] = v36 + 7;
        v36[9] = v36 + 7;
        v36[10] = v36 + 10;
        v36[11] = v36 + 10;
        *(_QWORD *)(v35 + 24) = 0;
        v41 = v35;
        std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(&v42, (__int128 *)&__p, (__int128 *)&v40);
        std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>((uint64_t)&v45, (__int128 *)&v42);
        boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(v34[3] + 16, *(_QWORD *)(v34[3] + 8), (__int128 *)&v45);
        boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v46);
        v9 = v33;
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v43);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v40);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
LABEL_55:
    v13 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    ++v20;
  }
  while (!v13->__rdstate_);
  a2 = v37;
  if (v19 && !*(_QWORD *)(v19[3] + 24))
    boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::pop_back(v50 + 16);
LABEL_2:
  v14 = *a2;
  *a2 = v48;
  v48 = v14;
  v15 = *((_QWORD *)a2 + 2);
  v16 = *((_QWORD *)a2 + 3);
  v17 = v50;
  *((_QWORD *)a2 + 2) = v49;
  *((_QWORD *)a2 + 3) = v17;
  v49 = v15;
  v50 = v16;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v48);
}

void sub_2181210C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,std::locale a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,std::locale a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 169) < 0)
    operator delete(*(void **)(v47 - 192));
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(v47 - 160);
  _Unwind_Resume(a1);
}

std::runtime_error *boost::property_tree::ini_parser::ini_parser_error::ini_parser_error(std::runtime_error *a1, uint64_t a2)
{
  std::runtime_error *v4;
  std::runtime_error v5;
  std::string *p_imp;
  __int128 v7;

  v4 = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D92F840;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v4[1], *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(std::runtime_error *)(a2 + 16);
    v4[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
    v4[1] = v5;
  }
  p_imp = (std::string *)&a1[2].__imp_;
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(p_imp, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 40);
    a1[3].__imp_.__imp_ = *(const char **)(a2 + 56);
    *(_OWORD *)&p_imp->__r_.__value_.__l.__data_ = v7;
  }
  a1[4].__vftable = *(std::runtime_error_vtbl **)(a2 + 64);
  a1->__vftable = (std::runtime_error_vtbl *)&unk_24D92F818;
  return a1;
}

void sub_218121464(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

void turi::ini::read_dictionary_section<std::string>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  uint64_t child;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  std::string v13;
  std::string v14;
  std::string __p;

  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  if (boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::count<std::string,std::less<std::string>>(*(_QWORD *)(a1 + 24) + 16, (const void **)a2, *(_QWORD *)(a1 + 24) + 17))
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v14 = *(std::string *)a2;
    __p.__r_.__value_.__s.__data_[0] = 46;
    v6 = &v14;
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    child = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child(a1, (uint64_t *)&v14);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    v8 = *(_QWORD *)(*(_QWORD *)(child + 24) + 8);
    v9 = *(_QWORD *)(v8 + 88);
    if (v9)
      v10 = (__int128 *)(v9 - 80);
    else
      v10 = 0;
    while (v10 != (__int128 *)v8)
    {
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>((uint64_t)v10 + 24, &v13);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        v14.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v11;
      }
      __p = v13;
      memset(&v13, 0, sizeof(v13));
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>((uint64_t **)a3, (const void **)&v14.__r_.__value_.__l.__data_, (uint64_t)&v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      v12 = *((_QWORD *)v10 + 11);
      if (v12)
        v10 = (__int128 *)(v12 - 80);
      else
        v10 = 0;
    }
  }
}

void sub_218121618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v21, *(_QWORD **)(v21 + 8));
  _Unwind_Resume(a1);
}

void turi::ini::read_sequence_section<std::string>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::vector<std::string>::size_type a3@<X2>, std::vector<std::string> *a4@<X8>)
{
  std::string *v7;
  uint64_t child;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  std::string __str;
  std::string v19;
  char v20;
  std::string *v21;

  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  if (a3)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v19 = *(std::string *)a2;
    v20 = 46;
    v7 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v19.__r_.__value_.__r.__words[0];
    v21 = v7;
    child = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child(a1, (uint64_t *)&v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    std::vector<std::string>::resize(a4, a3);
    v9 = *(_QWORD *)(*(_QWORD *)(child + 24) + 8);
    v10 = *(_QWORD *)(v9 + 88);
    v11 = v10 ? v10 - 80 : 0;
    if (v11 != v9)
    {
      v12 = 0;
      do
      {
        if (*(char *)(v11 + 23) < 0)
        {
          if (!*(_QWORD *)(v11 + 8))
          {
LABEL_22:
            boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v11 + 24, &__str);
            memset(&v19, 0, sizeof(v19));
            std::string::operator=(&v19, &__str);
            v15 = (uint64_t)&a4->__begin_[v12];
            if (*(char *)(v15 + 23) < 0)
              operator delete(*(void **)v15);
            v16 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
            *(_QWORD *)(v15 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
            *(_OWORD *)v15 = v16;
            *((_BYTE *)&v19.__r_.__value_.__s + 23) = 0;
            v19.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            ++v12;
            goto LABEL_27;
          }
        }
        else if (!*(_BYTE *)(v11 + 23))
        {
          goto LABEL_22;
        }
        LODWORD(v12) = std::stoi((const std::string *)v11, 0, 10);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)a4->__end_ - (char *)a4->__begin_) >> 3) <= (int)v12)
        {
          v19.__r_.__value_.__r.__words[0] = v11;
          turi::ini::read_sequence_section<std::string>(boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>> const&,std::string,unsigned long)::{lambda(void)#1}::operator()((const std::string::value_type ***)&v19);
        }
        boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v11 + 24, &__str);
        memset(&v19, 0, sizeof(v19));
        std::string::operator=(&v19, &__str);
        v12 = (int)v12;
        v13 = (uint64_t)&a4->__begin_[(int)v12];
        if (*(char *)(v13 + 23) < 0)
          operator delete(*(void **)v13);
        v14 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
        *(_OWORD *)v13 = v14;
        *((_BYTE *)&v19.__r_.__value_.__s + 23) = 0;
        v19.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
LABEL_27:
        v17 = *(_QWORD *)(v11 + 88);
        if (v17)
          v11 = v17 - 80;
        else
          v11 = 0;
      }
      while (v11 != v9);
    }
  }
}

void sub_2181218A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void boost::property_tree::detail::trim<std::string>(std::locale *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  uint64_t v8;
  std::locale::id *v9;
  uint64_t v10;
  char *v11;
  int v12;
  const std::locale::facet *v13;
  uint64_t v14;
  std::locale::id *v15;
  uint64_t v16;
  int v17;
  const std::locale::facet *v18;
  int v19;
  char *v20;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v9 = (std::locale::id *)MEMORY[0x24BEDB350];
    v10 = v8;
    v11 = (char *)v7;
    while (1)
    {
      v12 = *v11;
      v13 = std::locale::use_facet(this, v9);
      if (v12 < 0 || (*((_DWORD *)&v13[1].~facet + v12) & 0x4000) == 0)
        break;
      ++v11;
      if (!--v10)
        goto LABEL_25;
    }
  }
  else
  {
    v11 = (char *)v7;
  }
  if (v11 == &v7[v8])
  {
LABEL_25:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v14 = 0;
    v15 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v16 = v14;
      v17 = v7[v8 - 1 + v14];
      v18 = std::locale::use_facet(this, v15);
      if (v17 < 0)
        break;
      v14 = v16 - 1;
    }
    while ((*((_DWORD *)&v18[1].~facet + v17) & 0x4000) != 0);
    v19 = *(char *)(a2 + 23);
    if (v19 >= 0)
      v20 = (char *)a2;
    else
      v20 = *(char **)a2;
    if (v16 || v11 != v20)
    {
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(a3, v11, (char *)&v7[v8 + v16], &v7[v8 + v16] - v11);
    }
    else if (v19 < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x219A194D4](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_218121BC0(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x218121B8CLL);
  }
  __cxa_rethrow();
}

void sub_218121C04(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::pop_back(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 80);
  if (v1)
    v2 = (unint64_t *)(v1 - 80);
  else
    v2 = 0;
  --*(_QWORD *)(a1 + 8);
  boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::erase_(a1, v2);
  operator delete(v2);
}

void boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::erase_(uint64_t a1, unint64_t *a2)
{
  *(_QWORD *)(a2[10] + 8) = a2[11];
  *(_QWORD *)a2[11] = a2[10];
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance_for_erase(a2 + 7, (unint64_t *)(*(_QWORD *)(a1 - 8) + 56), (unint64_t *)(*(_QWORD *)(a1 - 8) + 64), (unint64_t *)(*(_QWORD *)(a1 - 8) + 72));
  boost::detail::allocator::destroy<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>((uint64_t)a2);
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance_for_erase(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v6;
  _QWORD *v7;
  unint64_t **v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;

  v6 = (unint64_t *)a1[1];
  v7 = a1 + 2;
  v8 = (unint64_t **)(a1 + 2);
  if (!v6 || (v9 = (_QWORD *)*v7, v8 = (unint64_t **)(a1 + 1), !*v7))
  {
    v11 = *v8;
LABEL_9:
    v12 = *a1 & 0xFFFFFFFFFFFFFFFELL;
    if (v11)
      *v11 = *v11 & 1 | v12;
    if ((unint64_t *)(*a2 & 0xFFFFFFFFFFFFFFFELL) == a1)
    {
      *a2 = *a2 & 1 | (unint64_t)v11;
    }
    else
    {
      v13 = *a1 & 0xFFFFFFFFFFFFFFFELL;
      if (*(unint64_t **)(v13 + 8) == a1)
        *(_QWORD *)(v13 + 8) = v11;
      else
        *(_QWORD *)(v13 + 16) = v11;
    }
    if ((unint64_t *)*a3 == a1)
    {
      if (*v7)
      {
        v14 = v11;
        do
        {
          v15 = (unint64_t)v14;
          v14 = (_QWORD *)v14[1];
        }
        while (v14);
      }
      else
      {
        v15 = *a1 & 0xFFFFFFFFFFFFFFFELL;
      }
      *a3 = v15;
    }
    if ((unint64_t *)*a4 == a1)
    {
      if (a1[1])
      {
        v16 = v11;
        do
        {
          v17 = (unint64_t)v16;
          v16 = (_QWORD *)v16[2];
        }
        while (v16);
      }
      else
      {
        v17 = *a1 & 0xFFFFFFFFFFFFFFFELL;
      }
      *a4 = v17;
    }
    goto LABEL_37;
  }
  do
  {
    v10 = (unint64_t)v9;
    v9 = (_QWORD *)v9[1];
  }
  while (v9);
  v11 = *(unint64_t **)(v10 + 16);
  if ((unint64_t *)v10 == a1)
    goto LABEL_9;
  *v6 = *v6 & 1 | v10;
  *(_QWORD *)(v10 + 8) = v6;
  v12 = v10;
  if (v10 != *v7)
  {
    v12 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFELL;
    if (v11)
      *v11 = *v11 & 1 | v12;
    *(_QWORD *)((*(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFELL) + 8) = v11;
    *(_QWORD *)(v10 + 16) = *v7;
    *(_QWORD *)*v7 = *(_QWORD *)*v7 & 1 | v10;
  }
  if ((unint64_t *)(*a2 & 0xFFFFFFFFFFFFFFFELL) == a1)
  {
    *a2 = *a2 & 1 | v10;
    v18 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v18 = *a1 & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v18 + 8) == a1)
      *(_QWORD *)(v18 + 8) = v10;
    else
      *(_QWORD *)(v18 + 16) = v10;
  }
  v19 = *(_QWORD *)v10;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 1 | v18;
  *(_QWORD *)v10 = *a1 & 1 | v18;
  *a1 = *a1 & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
LABEL_37:
  if ((*(_BYTE *)a1 & 1) == 0)
    return a1;
  if (v11 == (unint64_t *)(*a2 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_73;
  while (1)
  {
    v20 = (unint64_t *)v12;
    if (v11)
    {
      v21 = *v11;
      if ((*v11 & 1) == 0)
        goto LABEL_75;
    }
    v22 = (unint64_t *)v20[1];
    if (v11 != v22)
    {
      if ((*v22 & 1) == 0)
      {
        *v22 |= 1uLL;
        *v20 &= ~1uLL;
        boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v20, a2);
        v22 = (unint64_t *)v20[1];
      }
      v23 = (_BYTE *)v22[2];
      if (!v23 || (*v23 & 1) != 0)
      {
        v24 = (_BYTE *)v22[1];
        if (v24 && (*v24 & 1) == 0)
          goto LABEL_58;
        goto LABEL_55;
      }
      v24 = (_BYTE *)v22[1];
      if (v24)
      {
LABEL_58:
        if ((*v24 & 1) == 0)
        {
LABEL_62:
          *v22 = *v22 & 0xFFFFFFFFFFFFFFFELL | *v20 & 1;
          *v20 |= 1uLL;
          if (v24)
            *(_QWORD *)v24 |= 1uLL;
          boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v20, a2);
          goto LABEL_73;
        }
        if (!v23)
        {
LABEL_61:
          *v22 &= ~1uLL;
          boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v22, a2);
          v22 = (unint64_t *)v20[1];
          v24 = (_BYTE *)v22[1];
          goto LABEL_62;
        }
      }
      *(_QWORD *)v23 |= 1uLL;
      goto LABEL_61;
    }
    v22 = (unint64_t *)v20[2];
    if ((*v22 & 1) == 0)
    {
      *v22 |= 1uLL;
      *v20 &= ~1uLL;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v20, a2);
      v22 = (unint64_t *)v20[2];
    }
    v25 = (_BYTE *)v22[1];
    if (v25)
    {
      if ((*v25 & 1) == 0)
        break;
    }
    v26 = (_BYTE *)v22[2];
    if (v26 && (*v26 & 1) == 0)
      goto LABEL_66;
LABEL_55:
    *v22 &= ~1uLL;
    v12 = *v20 & 0xFFFFFFFFFFFFFFFELL;
    v11 = v20;
    if (v20 == (unint64_t *)(*a2 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_74;
  }
  v26 = (_BYTE *)v22[2];
  if (!v26)
    goto LABEL_68;
LABEL_66:
  if ((*v26 & 1) != 0)
  {
    if (v25)
LABEL_68:
      *(_QWORD *)v25 |= 1uLL;
    *v22 &= ~1uLL;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v22, a2);
    v22 = (unint64_t *)v20[2];
    v26 = (_BYTE *)v22[2];
  }
  *v22 = *v22 & 0xFFFFFFFFFFFFFFFELL | *v20 & 1;
  *v20 |= 1uLL;
  if (v26)
    *(_QWORD *)v26 |= 1uLL;
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v20, a2);
LABEL_73:
  v20 = v11;
  if (v11)
  {
LABEL_74:
    v21 = *v20;
    v11 = v20;
LABEL_75:
    *v11 = v21 | 1;
  }
  return a1;
}

uint64_t std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  v6 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v6, *((_QWORD *)a2 + 6));
  *(_QWORD *)(a1 + 48) = v6;
  return a1;
}

void sub_21812215C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child(uint64_t a1, uint64_t *a2)
{
  _BOOL4 v4;
  std::string *v5;
  uint64_t *v6;
  uint64_t v7;
  const void *v9[3];
  std::runtime_error v10;
  std::string v11;
  char v12;
  char *v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)*a2, a2[1]);
    v4 = *((char *)a2 + 23) < 0;
  }
  else
  {
    v4 = 0;
    v11 = *(std::string *)a2;
  }
  v12 = *((_BYTE *)a2 + 24);
  v5 = &v11;
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if (v4)
    v6 = (uint64_t *)*a2;
  else
    v6 = a2;
  v13 = (char *)v5 + a2[4] - (_QWORD)v6;
  v7 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(a1, (uint64_t)&v11);
  if (!v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "No such node");
    boost::property_tree::ptree_bad_path::ptree_bad_path<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>((uint64_t)&v10, v9, (__int128 *)a2);
    boost::exception_detail::throw_exception_<boost::property_tree::ptree_bad_path>(&v10, (uint64_t)"basic_ptree<K, D, C> &boost::property_tree::basic_ptree<std::string, std::string>::get_child(const path_type &) [Key = std::string, Data = std::string, KeyCompare = std::less<std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/detail/ptree_implementation.hpp", 576);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v7;
}

void sub_2181222B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  a15.__vftable = (std::runtime_error_vtbl *)&unk_24D92F430;
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  std::runtime_error::~runtime_error(&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::count<std::string,std::less<std::string>>(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v3 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::equal_range<std::string,std::less<std::string>>(a1, a2, a3);
  if (v3 == v4)
    return 0;
  v5 = v4;
  v6 = 0;
  do
  {
    ++v6;
    v8 = v3 + 56;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v8);
    if (v8)
      v3 = v8 - 56;
    else
      v3 = 0;
  }
  while (v3 != v5);
  return v6;
}

unint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::equal_range<std::string,std::less<std::string>>(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  unint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = *(_QWORD *)(v3 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (!v4)
    return v3;
  while (1)
  {
    v7 = v4;
    while (1)
    {
      v8 = v7 - 56;
      if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(v7 - 56), a2))
        break;
      v7 = *(_QWORD *)(v7 + 16);
      if (!v7)
        return v3;
    }
    v9 = std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)(v7 - 56));
    v4 = *(_QWORD *)(v7 + 8);
    if (!v9)
      break;
    v3 = v7 - 56;
    if (!v4)
      return v8;
  }
  if (v4)
  {
    do
    {
      while (1)
      {
        v11 = v4 - 56;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(v4 - 56), a2))
          break;
        v4 = *(_QWORD *)(v4 + 16);
        if (!v4)
          goto LABEL_17;
      }
      v4 = *(_QWORD *)(v4 + 8);
      v8 = v11;
    }
    while (v4);
  }
  else
  {
LABEL_17:
    v11 = v8;
  }
  v12 = *(_QWORD *)(v7 + 16);
  if (!v12)
    return v11;
  do
  {
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)(v12 - 56)))
    {
      v12 = *(_QWORD *)(v12 + 16);
      if (!v12)
        return v11;
    }
    v12 = *(_QWORD *)(v12 + 8);
  }
  while (v12);
  return v11;
}

_QWORD **turi::dir_archive::init_for_read(std::string const&)::$_1::operator()(_QWORD **result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  const std::string::value_type *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  __int128 v14;
  std::string v15;
  std::string v16;
  void *v17;
  char v18;
  _QWORD v19[20];

  v2 = 0;
  v19[19] = *MEMORY[0x24BDAC8D0];
  v3 = **result + 32 * a2;
  v4 = *(char *)(v3 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)(**result + 32 * a2);
  else
    v5 = *(const std::string::value_type **)v3;
  v6 = *(unsigned __int8 *)(v3 + 23);
  if (v4 < 0)
    v6 = *(_QWORD *)(v3 + 8);
  while (-v6 != v2 && v2 != -5)
  {
    v7 = v5[v6 - 1 + v2];
    v8 = aSidx[v2-- + 4];
    if (v7 != v8)
      goto LABEL_11;
  }
  if (v2 == -5)
  {
LABEL_17:
    if (v4 < 0)
    {
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      v14 = *(_OWORD *)v3;
      v15.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v14;
    }
    turi::general_ifstream::general_ifstream(&v16, (uint64_t)&v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    std::istream::read();
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
    v19[0] = &unk_24D91DA80;
    if (v18 < 0)
      operator delete(v17);
    std::istream::~istream();
    boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v16.__r_.__value_.__r.__words[2]);
    return (_QWORD **)MEMORY[0x219A198F4](v19);
  }
LABEL_11:
  v9 = 0;
  v10 = (uint64_t)&v5[v6 - 1];
  v11 = -v6;
  while (v11 != v9 && v9 != -10)
  {
    v12 = *(unsigned __int8 *)(v10 + v9);
    v13 = aFrameIdx[v9-- + 9];
    if (v12 != v13)
      return result;
  }
  if (v9 == -10)
    goto LABEL_17;
  return result;
}

void sub_218122670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x218122640);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::dir_archive::init_for_read(std::string const&)::$_1>(unsigned long,unsigned long,turi::dir_archive::init_for_read(std::string const&)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_11dir_archive13init_for_readERKNSt3__112basic_stringIc"
                                        "NS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_11dir_archive13init_for_readERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD **boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::dir_archive::init_for_read(std::string const&)::$_1>(unsigned long,unsigned long,turi::dir_archive::init_for_read(std::string const&)::$_1 const&)::{lambda(void)#1},void>::invoke(_QWORD **result)
{
  unint64_t v1;
  _QWORD **v2;

  v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    v2 = result;
    do
      result = turi::dir_archive::init_for_read(std::string const&)::$_1::operator()((_QWORD **)*v2, v1++);
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::insert_iterator<std::set<std::string>>,0>@<X0>(uint64_t result@<X0>, const void **a2@<X1>, const void **a3@<X2>, const void **a4@<X3>, const void ***a5@<X8>)
{
  const void **v5;
  const void **v8;
  const void **v9;

  v5 = (const void **)result;
  v8 = a3;
  v9 = a4;
  if ((const void **)result != a2)
  {
    do
    {
      result = std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t)&v8, v5);
      v5 += 3;
    }
    while (v5 != a2);
    a3 = v8;
    a4 = v9;
    v5 = a2;
  }
  *a5 = v5;
  a5[1] = a3;
  a5[2] = a4;
  return result;
}

uint64_t std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t turi::dir_archive::delete_archive(std::string)::$_0::operator()(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;

  v3 = *(_QWORD **)(result + 8);
  v4 = **(_QWORD **)result;
  v5 = v4 + 32 * a2;
  v6 = v3[1];
  if (!v6)
  {
    v9 = (_QWORD *)*v3;
LABEL_22:
    v7 = v3 + 1;
    goto LABEL_25;
  }
  v7 = v3 + 1;
  do
  {
    result = std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v3 + 2), (const void **)(v6 + 32), (const void **)v5);
    v8 = (uint64_t *)(v6 + 8);
    if (!(_DWORD)result)
    {
      v8 = (uint64_t *)v6;
      v7 = (_QWORD *)v6;
    }
    v6 = *v8;
  }
  while (*v8);
  v9 = (_QWORD *)*v3;
  if (v7 == v3 + 1)
    goto LABEL_22;
  v10 = *(unsigned __int8 **)v5;
  if (*(char *)(v5 + 23) < 0)
  {
    v11 = *(_QWORD *)(v5 + 8);
  }
  else
  {
    v10 = (unsigned __int8 *)v5;
    v11 = *(unsigned __int8 *)(v5 + 23);
  }
  v12 = (unsigned __int8 *)v7[4];
  v13 = *((char *)v7 + 55);
  if (v13 >= 0)
    v12 = (unsigned __int8 *)(v7 + 4);
  v14 = v7[5];
  if (v13 >= 0)
    v14 = *((unsigned __int8 *)v7 + 55);
  if (v11 && v14)
  {
    v15 = v14 - 1;
    v16 = v11 - 1;
    v17 = v12;
    while (*v10 == *v17)
    {
      ++v17;
      if (v16)
      {
        ++v10;
        v18 = v15--;
        --v16;
        if (v18)
          continue;
      }
      goto LABEL_24;
    }
  }
  else
  {
    v17 = v12;
LABEL_24:
    if (v17 == &v12[v14])
      return turi::fileio::delete_path(v5, *(_DWORD *)(v4 + 32 * a2 + 24));
  }
LABEL_25:
  if (v7 == v9)
    return result;
  v19 = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v20 = v19;
      v19 = (_QWORD *)v19[1];
    }
    while (v19);
  }
  else
  {
    do
    {
      v20 = (_QWORD *)v7[2];
      v28 = *v20 == (_QWORD)v7;
      v7 = v20;
    }
    while (v28);
  }
  v21 = *(unsigned __int8 **)v5;
  v22 = *(_QWORD *)(v5 + 8);
  if (*(char *)(v5 + 23) >= 0)
  {
    v21 = (unsigned __int8 *)v5;
    v22 = *(unsigned __int8 *)(v5 + 23);
  }
  v25 = (unsigned __int8 *)v20[4];
  v24 = (unsigned __int8 *)(v20 + 4);
  v23 = v25;
  v26 = (char)v24[23];
  if (v26 >= 0)
    v23 = v24;
  v27 = *((_QWORD *)v24 + 1);
  if (v26 >= 0)
    v27 = v26;
  if (v22)
    v28 = v27 == 0;
  else
    v28 = 1;
  if (!v28)
  {
    v29 = v27 - 1;
    v30 = v22 - 1;
    v31 = v23;
    while (*v21 == *v31)
    {
      ++v31;
      if (v30)
      {
        ++v21;
        v32 = v29--;
        --v30;
        if (v32)
          continue;
      }
      goto LABEL_42;
    }
    return result;
  }
  v31 = v23;
LABEL_42:
  if (v31 == &v23[v27])
    return turi::fileio::delete_path(v5, *(_DWORD *)(v4 + 32 * a2 + 24));
  return result;
}

void sub_218122A64(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::dir_archive::delete_archive(std::string)::$_0>(unsigned long,unsigned long,turi::dir_archive::delete_archive(std::string)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_11dir_archive14delete_archiveENSt3__112basic_stringIcN"
                                        "S2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_11dir_archive14delete_archiveENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::dir_archive::delete_archive(std::string)::$_0>(unsigned long,unsigned long,turi::dir_archive::delete_archive(std::string)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1 < *(_QWORD *)(result + 16))
  {
    v2 = (uint64_t *)result;
    do
      result = turi::dir_archive::delete_archive(std::string)::$_0::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void std::vector<std::pair<std::string,turi::fileio::file_status>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *OUTLINED_FUNCTION_24_1(uint64_t a1, char *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return std::string::basic_string[abi:ne180100]<0>((uint64_t *)va, a2);
}

void OUTLINED_FUNCTION_25_1()
{
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

void OUTLINED_FUNCTION_36_2()
{
  void *v0;

  __cxa_free_exception(v0);
}

__n128 OUTLINED_FUNCTION_45(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

std::string *OUTLINED_FUNCTION_47(uint64_t a1, std::string *a2, std::string::size_type a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return std::string::append((std::string *)&a10, (const std::string::value_type *)a2, a3);
}

uint64_t _GLOBAL__sub_I_dir_archive_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

turi::csv_line_tokenizer *turi::csv_line_tokenizer::csv_line_tokenizer(turi::csv_line_tokenizer *this)
{
  _QWORD *v2;

  *(_DWORD *)this = 22806784;
  v2 = (_QWORD *)((char *)this + 32);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, ",");
  std::string::basic_string[abi:ne180100]<0>(v2, "\n");
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 14) = 570425635;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *((_BYTE *)this + 168) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 32) = -1;
  *((_QWORD *)this + 33) = 0;
  *((_WORD *)this + 140) = 0;
  *((_QWORD *)this + 34) = 0;
  *(_DWORD *)((char *)this + 283) = 16777472;
  std::string::resize((std::string *)((char *)this + 176), 0x400uLL, 0);
  return this;
}

void sub_218122D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  va_list va;

  va_start(va, a2);
  v9 = v6;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v9);
  if (*(char *)(v2 + 255) < 0)
    operator delete(*(void **)(v2 + 232));
  if (*(char *)(v2 + 231) < 0)
    operator delete(*(void **)(v2 + 208));
  if (*(char *)(v2 + 199) < 0)
    operator delete(*v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v5);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

uint64_t turi::csv_line_tokenizer::tokenize_line(unsigned __int8 *a1, char *i, size_t a3, uint64_t *a4)
{
  const char *v8;
  unsigned __int8 *v9;
  int64_t v10;
  int v12;
  int v13;
  char v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  std::vector<std::string> *v35;
  std::string *v36;
  std::string *v37;
  std::vector<std::string>::pointer v38;
  char *v39;
  char *v40;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  std::string *v48;
  unsigned __int8 *v49;
  _BOOL4 v50;
  unsigned __int8 *v51;
  unint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  std::string *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::string *v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  std::vector<std::string>::pointer v68;
  void **p_data;
  unint64_t v70;
  unsigned __int8 *v71;
  int64_t v72;
  unsigned __int8 *v73;
  char *v74;
  std::vector<std::string> *v75;
  std::string *v76;
  std::string *v77;
  std::string *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  std::string *v83;
  std::string *v84;
  uint64_t p_end_cap;
  std::vector<std::string> *v86;
  char *v87;
  std::vector<std::string> *v88[2];
  void *__p[2];
  std::string::size_type v90;
  std::__split_buffer<std::string> __v;
  _BYTE v92[24];
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  std::vector<std::string>::__clear[abi:ne180100](a4);
  v88[0] = (std::vector<std::string> *)a4;
  v88[1] = (std::vector<std::string> *)a1;
  if (!*((_QWORD *)a1 + 33))
    assert_msg(0, v8);
  v87 = i;
  if ((char)a1[31] < 0)
  {
    v9 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
    v10 = *((_QWORD *)a1 + 2);
  }
  else
  {
    v9 = a1 + 8;
    v10 = a1[31];
  }
  *((_QWORD *)a1 + 32) = -1;
  *((_QWORD *)a1 + 25) = 0;
  if (a1[280])
  {
    turi::csv_line_tokenizer::tokenize_line(char const*,unsigned long,std::vector<std::string> &)::$_0::operator()(v88, (unsigned __int8 *)i, a3);
    return 1;
  }
  v86 = (std::vector<std::string> *)a4;
  if (!a3)
    return 1;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = (unint64_t)&i[a3];
  v16 = a1 + 176;
  p_end_cap = (uint64_t)&v86->__end_cap_;
  do
  {
    if (!a1[284] || *i != a1[282])
      goto LABEL_16;
    if (!a1[283])
    {
      if (v10 > (uint64_t)(v15 - (_QWORD)i))
        goto LABEL_16;
      if (v10)
      {
        v31 = 0;
        while (i[v31] == v9[v31])
        {
          if (v10 == ++v31)
            goto LABEL_13;
        }
LABEL_16:
        v18 = 0;
        goto LABEL_19;
      }
    }
LABEL_13:
    if ((char)a1[31] < 0)
      v17 = *((_QWORD *)a1 + 2);
    else
      v17 = a1[31];
    i = &i[v17 - 1];
    v18 = 1;
LABEL_19:
    v87 = i + 1;
    v19 = *i;
    if (v12 == 2)
    {
      if ((a1[59] != v19) | v13 & 1)
      {
        v23 = *((_QWORD *)a1 + 25);
        if ((char)a1[199] < 0)
          v24 = *((_QWORD *)a1 + 23);
        else
          v24 = a1[199];
        if (v23 >= v24)
        {
          std::string::resize((std::string *)(a1 + 176), 2 * v24, 0);
          v23 = *((_QWORD *)a1 + 25);
        }
        *((_QWORD *)a1 + 25) = v23 + 1;
        v32 = a1 + 176;
        if ((char)a1[199] < 0)
          v32 = *(unsigned __int8 **)v16;
        v32[v23] = v19;
        if (a1[1])
          goto LABEL_106;
        goto LABEL_108;
      }
      if (a1[58] && (unint64_t)(i + 2) < v15)
      {
        v27 = *((_QWORD *)a1 + 25);
        if (i[1] == v19)
        {
          if ((char)a1[199] < 0)
            v28 = *((_QWORD *)a1 + 23);
          else
            v28 = a1[199];
          if (v27 >= v28)
          {
            std::string::resize((std::string *)(a1 + 176), 2 * v28, 0);
            v27 = *((_QWORD *)a1 + 25);
          }
          *((_QWORD *)a1 + 25) = v27 + 1;
          v51 = a1 + 176;
          if ((char)a1[199] < 0)
            v51 = *(unsigned __int8 **)v16;
          v51[v27] = v19;
          v52 = *((_QWORD *)a1 + 25);
          if ((char)a1[199] < 0)
            v53 = *((_QWORD *)a1 + 23);
          else
            v53 = a1[199];
          if (v52 >= v53)
          {
            std::string::resize((std::string *)(a1 + 176), 2 * v53, 0);
            v52 = *((_QWORD *)a1 + 25);
          }
          *((_QWORD *)a1 + 25) = v52 + 1;
          v54 = a1 + 176;
          if ((char)a1[199] < 0)
            v54 = *(unsigned __int8 **)v16;
          v54[v52] = v19;
          if (a1[1])
            v50 = a1[2] == v19;
          else
            v50 = 0;
          ++v87;
          goto LABEL_125;
        }
      }
      else
      {
        v27 = *((_QWORD *)a1 + 25);
      }
      if ((char)a1[199] < 0)
        v30 = *((_QWORD *)a1 + 23);
      else
        v30 = a1[199];
      if (v27 >= v30)
      {
LABEL_71:
        std::string::resize((std::string *)(a1 + 176), 2 * v30, 0);
        v27 = *((_QWORD *)a1 + 25);
      }
LABEL_72:
      *((_QWORD *)a1 + 25) = v27 + 1;
      v34 = a1 + 176;
      if ((char)a1[199] < 0)
        v34 = *(unsigned __int8 **)v16;
      v34[v27] = v19;
      if (!a1[1])
        goto LABEL_174;
      goto LABEL_172;
    }
    if (v12 == 1)
    {
      if (v18)
      {
        v22 = a1 + 176;
        if ((char)a1[199] < 0)
          v22 = *(unsigned __int8 **)v16;
        turi::csv_line_tokenizer::tokenize_line(char const*,unsigned long,std::vector<std::string> &)::$_0::operator()(v88, v22, *((_QWORD *)a1 + 25));
        v12 = 0;
        *((_QWORD *)a1 + 25) = 0;
        goto LABEL_129;
      }
      if (a1[57] && a1[56] == v19)
      {
        v25 = a1 + 176;
        if ((char)a1[199] < 0)
          v25 = *(unsigned __int8 **)v16;
        turi::csv_line_tokenizer::tokenize_line(char const*,unsigned long,std::vector<std::string> &)::$_0::operator()(v88, v25, *((_QWORD *)a1 + 25));
        v26 = 0;
        v12 = 0;
        *((_QWORD *)a1 + 25) = 0;
        goto LABEL_130;
      }
      v27 = *((_QWORD *)a1 + 25);
      if ((char)a1[199] < 0)
        v30 = *((_QWORD *)a1 + 23);
      else
        v30 = a1[199];
      if (v27 >= v30)
        goto LABEL_71;
      goto LABEL_72;
    }
    if (a1[59] != v19)
    {
      if (v19 != 9)
      {
        v29 = (v19 & 0x80000000) != 0
            ? __maskrune(*i, 0x4000uLL)
            : *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v19 + 60) & 0x4000;
        if (v29 && a1[3])
        {
          v12 = 0;
          v26 = 1;
          goto LABEL_130;
        }
      }
      if (!v18)
      {
        if (!a1[57] || a1[56] != v19)
        {
          if ((v19 & 0xFFFFFFDF) == 0x5B)
          {
            v39 = v87;
            v40 = v87 - 1;
            v87 = v40;
            turi::flexible_type_parser::general_flexible_type_parse(*((turi::flexible_type_parser **)a1 + 33), (const char **)&v87, v15 - (_QWORD)v40, (uint64_t)v92);
            std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)v92);
            if (v87 != v40)
            {
              std::string::basic_string[abi:ne180100](__p, v40, v87 - v40);
              end = v86->__end_;
              value = v86->__end_cap_.__value_;
              if (end >= value)
              {
                v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v86->__begin_) >> 3);
                v57 = v56 + 1;
                if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v58 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v86->__begin_) >> 3);
                if (2 * v58 > v57)
                  v57 = 2 * v58;
                if (v58 >= 0x555555555555555)
                  v59 = 0xAAAAAAAAAAAAAAALL;
                else
                  v59 = v57;
                __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v86->__end_cap_;
                if (v59)
                  v60 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(p_end_cap, v59);
                else
                  v60 = 0;
                v61 = v60 + v56;
                __v.__first_ = v60;
                __v.__begin_ = v61;
                __v.__end_cap_.__value_ = &v60[v59];
                v62 = *(_OWORD *)__p;
                v61->__r_.__value_.__r.__words[2] = v90;
                *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v62;
                __p[1] = 0;
                v90 = 0;
                __p[0] = 0;
                __v.__end_ = v61 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(v86, &__v);
                v63 = v86->__end_;
                std::__split_buffer<std::string>::~__split_buffer(&__v);
                v64 = SHIBYTE(v90);
                v86->__end_ = v63;
                if (v64 < 0)
                  operator delete(__p[0]);
              }
              else
              {
                v43 = *(_OWORD *)__p;
                end->__r_.__value_.__r.__words[2] = v90;
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v43;
                v86->__end_ = end + 1;
              }
              for (i = v87; (unint64_t)i < v15; v87 = i)
              {
                v65 = *i;
                if ((v65 & 0x80000000) != 0)
                {
                  v66 = __maskrune(v65, 0x4000uLL);
                  i = v87;
                  if (!v66)
                    break;
                }
                else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v65 + 60) & 0x4000) == 0)
                {
                  break;
                }
                ++i;
              }
              if (i == (char *)v15)
                return 1;
              if (a1[284] && *i == a1[282])
              {
                if (a1[283])
                  goto LABEL_153;
                if (v10 <= (uint64_t)(v15 - (_QWORD)i))
                {
                  if (!v10)
                  {
LABEL_153:
                    if ((char)a1[31] < 0)
                      v67 = *((_QWORD *)a1 + 2);
                    else
                      v67 = a1[31];
                    v12 = 0;
                    i += v67;
                    v87 = i;
                    v14 = 1;
                    continue;
                  }
                  v72 = v10;
                  v73 = v9;
                  v74 = i;
                  while (*v74 == *v73)
                  {
                    ++v74;
                    ++v73;
                    if (!--v72)
                      goto LABEL_153;
                  }
                }
              }
              if (a1[281])
              {
                v14 = 0;
                v12 = 0;
                continue;
              }
              v68 = v86->__end_;
              p_data = (void **)&v68[-1].__r_.__value_.__l.__data_;
              if (SHIBYTE(v68[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(*p_data);
              v86->__end_ = (std::vector<std::string>::pointer)p_data;
            }
            v87 = v39;
          }
          v21 = *((_QWORD *)a1 + 25);
          if ((char)a1[199] < 0)
            v70 = *((_QWORD *)a1 + 23);
          else
            v70 = a1[199];
          if (v21 < v70)
            goto LABEL_168;
          std::string::resize((std::string *)(a1 + 176), 2 * v70, 0);
          goto LABEL_167;
        }
        v26 = 0;
        v14 = 0;
        v12 = 0;
LABEL_130:
        v50 = v13;
        goto LABEL_176;
      }
      *((_QWORD *)a1 + 25) = 0;
      v35 = v86;
      v37 = v86->__end_;
      v36 = v86->__end_cap_.__value_;
      if (v37 >= v36)
      {
        v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v86->__begin_) >> 3);
        v45 = v44 + 1;
        if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v86->__begin_) >> 3);
        if (2 * v46 > v45)
          v45 = 2 * v46;
        if (v46 >= 0x555555555555555)
          v47 = 0xAAAAAAAAAAAAAAALL;
        else
          v47 = v45;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v86->__end_cap_;
        if (v47)
          v48 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(p_end_cap, v47);
        else
          v48 = 0;
        v55 = v48 + v44;
        __v.__first_ = v48;
        __v.__begin_ = v55;
        __v.__end_cap_.__value_ = &v48[v47];
        v55->__r_.__value_.__r.__words[0] = 0;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        __v.__end_ = v55 + 1;
        v35 = v86;
        std::vector<std::string>::__swap_out_circular_buffer(v86, &__v);
        v38 = v86->__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        v37->__r_.__value_.__r.__words[0] = 0;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v38 = v37 + 1;
        v86->__end_ = v37 + 1;
      }
      v12 = 0;
      v35->__end_ = v38;
      *((_QWORD *)a1 + 25) = 0;
LABEL_129:
      v26 = 1;
      v14 = 1;
      goto LABEL_130;
    }
    v20 = *a1;
    *((_QWORD *)a1 + 25) = 0;
    if (!v20)
    {
      if ((a1[199] & 0x80) != 0)
      {
        if (*((_QWORD *)a1 + 23))
          goto LABEL_65;
      }
      else if (a1[199])
      {
LABEL_65:
        v33 = 0;
LABEL_102:
        *((_QWORD *)a1 + 25) = v33 + 1;
        v49 = a1 + 176;
        if ((char)a1[199] < 0)
          v49 = *(unsigned __int8 **)v16;
        v49[v33] = v19;
        if (a1[1])
        {
          v14 = 0;
LABEL_106:
          v50 = a1[2] == v19;
LABEL_125:
          v12 = 2;
          v26 = 1;
          goto LABEL_176;
        }
        v14 = 0;
LABEL_108:
        v50 = 0;
        goto LABEL_125;
      }
      std::string::resize((std::string *)(a1 + 176), 0, 0);
      v33 = *((_QWORD *)a1 + 25);
      goto LABEL_102;
    }
    if ((a1[199] & 0x80) != 0)
    {
      if (*((_QWORD *)a1 + 23))
        goto LABEL_25;
LABEL_77:
      std::string::resize((std::string *)(a1 + 176), 0, 0);
LABEL_167:
      v21 = *((_QWORD *)a1 + 25);
      goto LABEL_168;
    }
    if (!a1[199])
      goto LABEL_77;
LABEL_25:
    v21 = 0;
LABEL_168:
    *((_QWORD *)a1 + 25) = v21 + 1;
    v71 = a1 + 176;
    if ((char)a1[199] < 0)
      v71 = *(unsigned __int8 **)v16;
    v71[v21] = v19;
    if (!a1[1])
    {
      v14 = 0;
LABEL_174:
      v50 = 0;
      goto LABEL_175;
    }
    v14 = 0;
LABEL_172:
    v50 = a1[2] == v19;
LABEL_175:
    v26 = 1;
    v12 = 1;
LABEL_176:
    v13 = (v13 ^ 1) & v50;
    i = v87;
    if (!v26)
      break;
  }
  while (i != (char *)v15);
  if (v12)
  {
    if ((char)a1[199] < 0)
      v16 = *(unsigned __int8 **)v16;
    turi::csv_line_tokenizer::tokenize_line(char const*,unsigned long,std::vector<std::string> &)::$_0::operator()(v88, v16, *((_QWORD *)a1 + 25));
  }
  else if ((v14 & 1) != 0)
  {
    v75 = v86;
    v77 = v86->__end_;
    v76 = v86->__end_cap_.__value_;
    if (v77 >= v76)
    {
      v79 = 0xAAAAAAAAAAAAAAABLL * (((char *)v77 - (char *)v86->__begin_) >> 3);
      v80 = v79 + 1;
      if (v79 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v86->__begin_) >> 3);
      if (2 * v81 > v80)
        v80 = 2 * v81;
      if (v81 >= 0x555555555555555)
        v82 = 0xAAAAAAAAAAAAAAALL;
      else
        v82 = v80;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v86->__end_cap_;
      if (v82)
      {
        v83 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(p_end_cap, v82);
        v75 = v86;
      }
      else
      {
        v83 = 0;
      }
      v84 = v83 + v79;
      __v.__first_ = v83;
      __v.__begin_ = v84;
      __v.__end_cap_.__value_ = &v83[v82];
      v84->__r_.__value_.__r.__words[0] = 0;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      __v.__end_ = v84 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(v75, &__v);
      v78 = v75->__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      v77->__r_.__value_.__r.__words[0] = 0;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v78 = v77 + 1;
      v86->__end_ = v77 + 1;
    }
    v75->__end_ = v78;
  }
  return 1;
}

void sub_2181237F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12, std::__split_buffer<std::string> *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__pa, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a21);
  _Unwind_Resume(a1);
}

unint64_t turi::csv_line_tokenizer::tokenize_line(unsigned __int8 *a1, char *a2, size_t a3, unint64_t *a4, char a5, _QWORD *a6)
{
  unsigned __int8 *v7;
  int64_t v8;
  unint64_t result;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *i;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  _BOOL4 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  std::string::pointer v39;
  unint64_t v40;
  turi::flexible_type *v41;
  char *v42;
  unsigned __int8 *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  int64_t v52;
  unsigned __int8 *v53;
  char *v54;
  BOOL v55;
  signed __int8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  size_t v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  const std::string::value_type *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  _QWORD *v74;
  std::string *p_str;
  std::string::size_type v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  turi::flexible_type_impl *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  std::string::size_type v85;
  std::string *v86;
  __int128 v87;
  std::string::size_type v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  std::string::size_type v92;
  char v93;
  _QWORD *v94;
  _QWORD *v95;
  std::string *v96;
  std::string::size_type v97;
  _QWORD *v98;
  void **v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  std::string::size_type v103;
  std::string::size_type v104;
  char v105;
  char v106;
  std::string::size_type v107;
  std::string::size_type v108;
  std::string v112;
  std::string v113;
  unint64_t *v114[6];
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  char v118;
  std::string __p;
  char v120;
  __int128 v121;
  unsigned __int8 v122;
  _QWORD v123[2];
  _QWORD v124[11];
  char v125;
  uint64_t v126;
  std::string __str;
  uint64_t v128;
  void *v129;
  char v130;
  _QWORD v131[22];

  v131[19] = *MEMORY[0x24BDAC8D0];
  v118 = a5;
  v116 = 0;
  v117 = a6;
  v115 = (uint64_t)(a4[1] - *a4) >> 4;
  if (a6)
    v115 = (uint64_t)(a6[1] - *a6) >> 3;
  if ((char)a1[255] < 0)
  {
    **((_BYTE **)a1 + 29) = 0;
    *((_QWORD *)a1 + 30) = 0;
  }
  else
  {
    a1[232] = 0;
    a1[255] = 0;
  }
  v114[0] = &v116;
  v114[1] = &v115;
  v114[2] = (unint64_t *)a1;
  v114[3] = (unint64_t *)&v117;
  v114[4] = a4;
  v114[5] = (unint64_t *)&v118;
  if (!*((_QWORD *)a1 + 33))
    assert_msg(0, a2);
  v113.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  if ((char)a1[31] < 0)
  {
    v7 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
    v8 = *((_QWORD *)a1 + 2);
  }
  else
  {
    v7 = a1 + 8;
    v8 = a1[31];
  }
  *((_QWORD *)a1 + 32) = -1;
  *((_QWORD *)a1 + 25) = 0;
  if (a1[280])
  {
    turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(v114, a2, a3, a2, a3);
    goto LABEL_12;
  }
  if (a3)
  {
    v11 = 0;
    v12 = 0;
    v106 = 0;
    v13 = (unint64_t)a2;
    v14 = (unint64_t)&a2[a3];
    v15 = (char *)(a1 + 176);
    v105 = 1;
    i = a2;
    while (1)
    {
      if (!a1[284] || *i != a1[282])
        goto LABEL_22;
      if (!a1[283])
      {
        if (v8 > (uint64_t)(v14 - (_QWORD)i))
          goto LABEL_22;
        if (v8)
          break;
      }
LABEL_19:
      if ((char)a1[31] < 0)
        v17 = *((_QWORD *)a1 + 2);
      else
        v17 = a1[31];
      v19 = (unint64_t)&i[v17 - 1];
      v18 = 1;
LABEL_25:
      v20 = (unsigned __int8 *)(v19 + 1);
      v113.__r_.__value_.__r.__words[0] = v19 + 1;
      v21 = *(char *)v19;
      if (v11 == 2)
      {
        if ((a1[59] != v21) | v12 & 1)
        {
          v25 = *((_QWORD *)a1 + 25);
          if ((char)a1[199] < 0)
            v26 = *((_QWORD *)a1 + 23);
          else
            v26 = a1[199];
          if (v25 >= v26)
          {
            std::string::resize((std::string *)(a1 + 176), 2 * v26, 0);
            v25 = *((_QWORD *)a1 + 25);
          }
          *((_QWORD *)a1 + 25) = v25 + 1;
          v34 = (char *)(a1 + 176);
          if ((char)a1[199] < 0)
            v34 = *(char **)v15;
          v34[v25] = v21;
          if (a1[1])
            v35 = a1[2] == v21;
          else
            v35 = 0;
LABEL_137:
          v11 = 2;
          v28 = 1;
          goto LABEL_173;
        }
        if (a1[58] && v19 + 2 < v14)
        {
          v29 = *((_QWORD *)a1 + 25);
          if (*v20 == v21)
          {
            if ((char)a1[199] < 0)
              v30 = *((_QWORD *)a1 + 23);
            else
              v30 = a1[199];
            if (v29 >= v30)
            {
              std::string::resize((std::string *)(a1 + 176), 2 * v30, 0);
              v29 = *((_QWORD *)a1 + 25);
            }
            *((_QWORD *)a1 + 25) = v29 + 1;
            v43 = a1 + 176;
            if ((char)a1[199] < 0)
              v43 = *(unsigned __int8 **)v15;
            v43[v29] = v21;
            v44 = *((_QWORD *)a1 + 25);
            if ((char)a1[199] < 0)
              v45 = *((_QWORD *)a1 + 23);
            else
              v45 = a1[199];
            if (v44 >= v45)
            {
              std::string::resize((std::string *)(a1 + 176), 2 * v45, 0);
              v44 = *((_QWORD *)a1 + 25);
            }
            *((_QWORD *)a1 + 25) = v44 + 1;
            v46 = a1 + 176;
            if ((char)a1[199] < 0)
              v46 = *(unsigned __int8 **)v15;
            v46[v44] = v21;
            if (a1[1])
              v35 = a1[2] == v21;
            else
              v35 = 0;
            ++v113.__r_.__value_.__r.__words[0];
            goto LABEL_137;
          }
        }
        else
        {
          v29 = *((_QWORD *)a1 + 25);
        }
        if ((char)a1[199] < 0)
          v32 = *((_QWORD *)a1 + 23);
        else
          v32 = a1[199];
        if (v29 >= v32)
          goto LABEL_81;
        goto LABEL_82;
      }
      if (v11 == 1)
      {
        if (v18)
        {
          v24 = (char *)(a1 + 176);
          if ((char)a1[199] < 0)
            v24 = *(char **)v15;
          if (turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(v114, v24, *((_QWORD *)a1 + 25), (char *)v13, (size_t)&v20[~v13]))
          {
LABEL_98:
            v13 = 0;
            v11 = 0;
            *((_QWORD *)a1 + 25) = 0;
            v28 = 1;
            v106 = 1;
            goto LABEL_112;
          }
LABEL_56:
          v105 = 0;
          v28 = 0;
          v11 = 1;
          goto LABEL_112;
        }
        if (a1[57] && a1[56] == v21)
        {
          v27 = (char *)(a1 + 176);
          if ((char)a1[199] < 0)
            v27 = *(char **)v15;
          if (turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(v114, v27, *((_QWORD *)a1 + 25), (char *)v13, (size_t)&v20[~v13]))
          {
            v13 = 0;
            v28 = 0;
            v11 = 0;
            *((_QWORD *)a1 + 25) = 0;
            goto LABEL_112;
          }
          goto LABEL_56;
        }
        v29 = *((_QWORD *)a1 + 25);
        if ((char)a1[199] < 0)
          v32 = *((_QWORD *)a1 + 23);
        else
          v32 = a1[199];
        if (v29 >= v32)
        {
LABEL_81:
          std::string::resize((std::string *)(a1 + 176), 2 * v32, 0);
          v29 = *((_QWORD *)a1 + 25);
        }
LABEL_82:
        *((_QWORD *)a1 + 25) = v29 + 1;
        v37 = (char *)(a1 + 176);
        if ((char)a1[199] < 0)
          v37 = *(char **)v15;
        v37[v29] = v21;
        if (a1[1])
          v35 = a1[2] == v21;
        else
          v35 = 0;
        v28 = 1;
        goto LABEL_172;
      }
      if (a1[59] == v21)
      {
        v22 = *a1;
        *((_QWORD *)a1 + 25) = 0;
        if (v22)
        {
          if ((a1[199] & 0x80) != 0)
          {
            if (*((_QWORD *)a1 + 23))
              goto LABEL_31;
          }
          else if (a1[199])
          {
LABEL_31:
            v23 = 0;
            goto LABEL_166;
          }
          std::string::resize((std::string *)(a1 + 176), 0, 0);
          goto LABEL_165;
        }
        if ((a1[199] & 0x80) != 0)
        {
          if (!*((_QWORD *)a1 + 23))
            goto LABEL_114;
LABEL_74:
          v36 = 0;
        }
        else
        {
          if (a1[199])
            goto LABEL_74;
LABEL_114:
          std::string::resize((std::string *)(a1 + 176), 0, 0);
          v36 = *((_QWORD *)a1 + 25);
        }
        *((_QWORD *)a1 + 25) = v36 + 1;
        v42 = (char *)(a1 + 176);
        if ((char)a1[199] < 0)
          v42 = *(char **)v15;
        v42[v36] = v21;
        v106 = 0;
        if (a1[1])
          v35 = a1[2] == v21;
        else
          v35 = 0;
        v11 = 2;
        v28 = 1;
        v13 = v19;
        goto LABEL_173;
      }
      if (v21 != 9)
      {
        v31 = (v21 & 0x80000000) != 0
            ? __maskrune(*(char *)v19, 0x4000uLL)
            : *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v21 + 60) & 0x4000;
        if (v31 && a1[3])
        {
          v11 = 0;
          v28 = 1;
          goto LABEL_111;
        }
      }
      if (v18)
      {
        *((_QWORD *)a1 + 25) = 0;
        v38 = (char *)(a1 + 176);
        if ((char)a1[199] < 0)
          v38 = *(char **)v15;
        if (turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(v114, v38, 0, (char *)v19, v113.__r_.__value_.__r.__words[0] + ~v19))
        {
          goto LABEL_98;
        }
        v105 = 0;
        v28 = 0;
        v11 = 0;
        v106 = 1;
LABEL_111:
        v13 = v19;
LABEL_112:
        v35 = v12;
LABEL_173:
        v12 = (v12 ^ 1) & v35;
        i = (char *)v113.__r_.__value_.__r.__words[0];
        v19 = v13;
        if (!v28)
          goto LABEL_183;
        goto LABEL_174;
      }
      if (a1[57] && a1[56] == v21)
      {
        v28 = 0;
        v106 = 0;
        v11 = 0;
        goto LABEL_111;
      }
      if ((v21 & 0xFFFFFFDF) != 0x5B)
        goto LABEL_160;
      v107 = v113.__r_.__value_.__r.__words[0];
      v39 = (std::string::pointer)--v113.__r_.__value_.__r.__words[0];
      v40 = v116;
      if (v116 >= v115)
        goto LABEL_159;
      if (v117 && (v40 = *(_QWORD *)(*v117 + 8 * v116), v40 == -1))
      {
        turi::flexible_type_parser::general_flexible_type_parse(*((turi::flexible_type_parser **)a1 + 33), (const char **)&v113.__r_.__value_.__l.__data_, v14 - (_QWORD)v39, (uint64_t)&__str);
        std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&__str);
        if (v113.__r_.__value_.__l.__data_ == v39)
          goto LABEL_159;
      }
      else
      {
        v41 = (turi::flexible_type *)(*a4 + 16 * v40);
        if (*((_BYTE *)v41 + 12) == 2)
        {
          turi::flexible_type_parser::general_flexible_type_parse(*((turi::flexible_type_parser **)a1 + 33), (const char **)&v113.__r_.__value_.__l.__data_, v14 - (_QWORD)v39, (uint64_t)v123);
          std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)v123);
          if (v113.__r_.__value_.__l.__data_ == v39)
            goto LABEL_159;
          std::string::basic_string[abi:ne180100](&__p, v39, v113.__r_.__value_.__r.__words[0] - (_QWORD)v39);
          turi::flexible_type::operator=<std::string>((uint64_t *)(*a4 + 16 * v40), (__int128 *)&__p);
          ++v116;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_142;
        }
        if (!turi::csv_line_tokenizer::parse_as((turi::csv_line_tokenizer *)a1, &v113.__r_.__value_.__l.__data_, v14 - (_QWORD)v39, v39, v14 - (_QWORD)v39, v41, 0))goto LABEL_159;
      }
      ++v116;
LABEL_142:
      for (i = (char *)v113.__r_.__value_.__r.__words[0];
            (unint64_t)i < v14;
            v113.__r_.__value_.__r.__words[0] = (std::string::size_type)i)
      {
        v47 = *i;
        if ((v47 & 0x80000000) != 0)
        {
          v48 = __maskrune(v47, 0x4000uLL);
          i = (char *)v113.__r_.__value_.__r.__words[0];
          if (!v48)
            break;
        }
        else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v47 + 60) & 0x4000) == 0)
        {
          break;
        }
        ++i;
      }
      if (i == (char *)v14)
      {
        if ((v105 & 1) == 0)
          goto LABEL_193;
        goto LABEL_12;
      }
      if (a1[284] && *i == a1[282])
      {
        if (a1[283])
          goto LABEL_153;
        if (v8 <= (uint64_t)(v14 - (_QWORD)i))
        {
          if (!v8)
          {
LABEL_153:
            if ((char)a1[31] < 0)
              v49 = *((_QWORD *)a1 + 2);
            else
              v49 = a1[31];
            v11 = 0;
            i += v49;
            v113.__r_.__value_.__r.__words[0] = (std::string::size_type)i;
            v106 = 1;
            goto LABEL_174;
          }
          v52 = v8;
          v53 = v7;
          v54 = i;
          while (*v54 == *v53)
          {
            ++v54;
            ++v53;
            if (!--v52)
              goto LABEL_153;
          }
        }
      }
      if (!a1[281])
      {
        --v116;
LABEL_159:
        v113.__r_.__value_.__r.__words[0] = v107;
LABEL_160:
        v23 = *((_QWORD *)a1 + 25);
        if ((char)a1[199] < 0)
          v50 = *((_QWORD *)a1 + 23);
        else
          v50 = a1[199];
        if (v23 >= v50)
        {
          std::string::resize((std::string *)(a1 + 176), 2 * v50, 0);
LABEL_165:
          v23 = *((_QWORD *)a1 + 25);
        }
LABEL_166:
        *((_QWORD *)a1 + 25) = v23 + 1;
        v51 = (char *)(a1 + 176);
        if ((char)a1[199] < 0)
          v51 = *(char **)v15;
        v51[v23] = v21;
        v106 = 0;
        if (a1[1])
          v35 = a1[2] == v21;
        else
          v35 = 0;
        v28 = 1;
        v13 = v19;
LABEL_172:
        v11 = 1;
        goto LABEL_173;
      }
      v106 = 0;
      v11 = 0;
LABEL_174:
      v13 = v19;
      if (i == (char *)v14)
      {
LABEL_183:
        if ((v105 & 1) != 0)
        {
          if (v11)
          {
            if ((char)a1[199] < 0)
              v15 = *(char **)v15;
            v55 = turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(v114, v15, *((_QWORD *)a1 + 25), (char *)v19, (size_t)&i[-v19]);
          }
          else
          {
            if ((v106 & 1) == 0)
              goto LABEL_12;
            v55 = turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(v114, 0, 0, 0, 0);
          }
          if (v55)
            goto LABEL_12;
          v14 = v113.__r_.__value_.__r.__words[0];
        }
        else
        {
          v14 = (unint64_t)i;
        }
LABEL_193:
        v10 = 0;
        *((_QWORD *)a1 + 32) = v14 - (_QWORD)a2;
        goto LABEL_194;
      }
    }
    v33 = 0;
    while (i[v33] == v7[v33])
    {
      if (v8 == ++v33)
        goto LABEL_19;
    }
LABEL_22:
    v18 = 0;
    v19 = (unint64_t)i;
    goto LABEL_25;
  }
LABEL_12:
  result = v116;
  if (v116 < (uint64_t)(a4[1] - *a4) >> 4)
  {
    v10 = 1;
LABEL_194:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v123);
    v56 = a1[255];
    if (v56 < 0)
      v57 = *((_QWORD *)a1 + 30);
    else
      v57 = a1[255];
    v101 = v10;
    if (v57)
    {
      if (v56 >= 0)
        v58 = (uint64_t)(a1 + 232);
      else
        v58 = *((_QWORD *)a1 + 29);
      if (v56 >= 0)
        v59 = a1[255];
      else
        v59 = *((_QWORD *)a1 + 30);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, v58, v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"\n", 1);
    }
    v61 = *((_QWORD *)a1 + 32);
    if ((v61 & 0x8000000000000000) == 0 && v61 <= a3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"Parse failed at token ending at: \n", 34);
      std::string::basic_string[abi:ne180100](&__str, a2, a3);
      v62 = *((_QWORD *)a1 + 32);
      textcolor(1, 1, &v112);
      v63 = std::string::append(&v112, "^");
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v113.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      reset_color(&v121);
      if ((v122 & 0x80u) == 0)
        v65 = (const std::string::value_type *)&v121;
      else
        v65 = (const std::string::value_type *)v121;
      if ((v122 & 0x80u) == 0)
        v66 = v122;
      else
        v66 = *((_QWORD *)&v121 + 1);
      v67 = std::string::append(&v113, v65, v66);
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::insert(&__str, v62, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((char)v122 < 0)
        operator delete((void *)v121);
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0x101)
      {
        v71 = *((_QWORD *)a1 + 32);
        v72 = 60;
        if (v71 > 60)
          v72 = *((_QWORD *)a1 + 32);
        v73 = v71 + 60;
        if (v73 >= (uint64_t)a3)
          v73 = a3;
        std::string::basic_string(&__p, &__str, v72 - 60, v73 - (v72 - 60), (std::allocator<char> *)&v113);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
      }
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"\t", 1);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v76 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v76 = __str.__r_.__value_.__l.__size_;
      v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)p_str, v76);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"\n", 1);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"Successfully parsed ", 20);
    v78 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)" tokens: \n", 10);
    if (v116)
    {
      v79 = 0;
      v80 = 0;
      v108 = *MEMORY[0x24BEDB7F0];
      v103 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v104 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v102 = MEMORY[0x24BEDB848] + 16;
      do
      {
        v81 = (turi::flexible_type_impl *)(*a4 + v79);
        switch(*((_BYTE *)v81 + 12))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
            std::ostream::operator<<();
            std::stringbuf::str();
            __str.__r_.__value_.__r.__words[0] = v108;
            *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + *(_QWORD *)(v108 - 24)) = v104;
            __str.__r_.__value_.__r.__words[2] = v103;
            v82 = v102;
            goto LABEL_255;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
            std::ostream::operator<<();
            std::stringbuf::str();
            __str.__r_.__value_.__r.__words[0] = v108;
            *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + *(_QWORD *)(v108 - 24)) = v104;
            v82 = MEMORY[0x24BEDB848] + 16;
            __str.__r_.__value_.__r.__words[2] = v103;
LABEL_255:
            v128 = v82;
            if (v130 < 0)
              operator delete(v129);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x219A198F4](v131);
            break;
          case 2:
            v83 = *(_QWORD *)v81;
            if (*(char *)(*(_QWORD *)v81 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v83 + 8), *(_QWORD *)(v83 + 16));
            }
            else
            {
              v84 = *(_OWORD *)(v83 + 8);
              __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v83 + 24);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v84;
            }
            break;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__str, (_QWORD *)(*(_QWORD *)v81 + 8));
            break;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__str, (uint64_t *)(*(_QWORD *)v81 + 8));
            break;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__str, (_QWORD *)(*(_QWORD *)v81 + 8));
            break;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(v81, &__p);
            break;
          case 7:
            memset(&__p, 0, sizeof(__p));
            break;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            break;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__str, (_QWORD *)(*(_QWORD *)v81 + 8));
            break;
          default:
            turi::flexible_type_fail(0);
            __break(1u);
            return result;
        }
        v85 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v85 = __p.__r_.__value_.__l.__size_;
        if (v85 >= 0x16)
        {
          std::string::basic_string(&v113, &__p, 0, 0xAuLL, (std::allocator<char> *)&v112);
          v86 = std::string::append(&v113, " ... ");
          v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v87;
          v86->__r_.__value_.__l.__size_ = 0;
          v86->__r_.__value_.__r.__words[2] = 0;
          v86->__r_.__value_.__r.__words[0] = 0;
          v88 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v88 = __p.__r_.__value_.__l.__size_;
          std::string::basic_string(&v112, &__p, v88 - 10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v120);
          if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v89 = &v112;
          else
            v89 = (std::string *)v112.__r_.__value_.__r.__words[0];
          if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v90 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
          else
            v90 = v112.__r_.__value_.__l.__size_;
          v91 = std::string::append(&__str, (const std::string::value_type *)v89, v90);
          v92 = v91->__r_.__value_.__r.__words[0];
          *(_QWORD *)&v121 = v91->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)&v121 + 7) = *(std::string::size_type *)((char *)&v91->__r_.__value_.__r.__words[1] + 7);
          v93 = HIBYTE(v91->__r_.__value_.__r.__words[2]);
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          v91->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p.__r_.__value_.__r.__words[0] = v92;
          __p.__r_.__value_.__l.__size_ = v121;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v121 + 7);
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v93;
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v112.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v113.__r_.__value_.__l.__data_);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"\t", 1);
        v94 = (_QWORD *)std::ostream::operator<<();
        v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)": ", 2);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v96 = &__p;
        else
          v96 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v97 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v97 = __p.__r_.__value_.__l.__size_;
        v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)v96, v97);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"\n", 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v80;
        v79 += 16;
      }
      while (v80 < v116);
    }
    std::stringbuf::str();
    v99 = (void **)(a1 + 208);
    if ((char)a1[231] < 0)
      operator delete(*v99);
    *(_OWORD *)v99 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *((_QWORD *)a1 + 28) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
    v123[0] = *MEMORY[0x24BEDB7F0];
    v100 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v123 + *(_QWORD *)(v123[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v124[0] = v100;
    v124[1] = MEMORY[0x24BEDB848] + 16;
    if (v125 < 0)
      operator delete((void *)v124[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x219A198F4](&v126);
    if (v101)
      return v116;
    else
      return 0;
  }
  return result;
}

void sub_218124928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t turi::csv_line_tokenizer::check_substitutions(turi::csv_line_tokenizer *this, char *__src, size_t __len, turi::flexible_type *a4)
{
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  size_t v18;
  unsigned int v19;
  int v20;
  uint64_t result;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  const char *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  void *__p[2];
  char v55;

  if (!__src)
    return 0;
  if (*((_QWORD *)this + 8) == *((_QWORD *)this + 9))
  {
LABEL_19:
    if (*((_QWORD *)this + 14))
    {
      std::string::basic_string[abi:ne180100](__p, __src, __len);
      v15 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>((_QWORD *)this + 11, (unsigned __int8 *)__p);
      v16 = v15;
      if (v55 < 0)
      {
        operator delete(__p[0]);
        if (v16)
        {
LABEL_22:
          v17 = MEMORY[0x24BDAC740];
          do
          {
            v18 = __len;
            if (!__len)
              break;
            v19 = __src[__len - 1];
            v20 = (v19 & 0x80000000) != 0 ? __maskrune(v19, 0x4000uLL) : *(_DWORD *)(v17 + 4 * v19 + 60) & 0x4000;
            --__len;
          }
          while (v20);
          if (!*((_BYTE *)a4 + 12))
          {
            *((_DWORD *)a4 + 2) = 0;
            *((_BYTE *)a4 + 12) = 0;
            result = 1;
            *(_QWORD *)a4 = 1;
            return result;
          }
          if (*((_BYTE *)a4 + 12) == 1)
          {
            *((_DWORD *)a4 + 2) = 0;
            result = 1;
            *((_BYTE *)a4 + 12) = 1;
            *(_QWORD *)a4 = 0x3FF0000000000000;
            return result;
          }
LABEL_33:
          if (*((_QWORD *)this + 19))
          {
            std::string::basic_string[abi:ne180100](__p, __src, v18);
            v22 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>((_QWORD *)this + 16, (unsigned __int8 *)__p);
            v23 = v22;
            if (v55 < 0)
            {
              operator delete(__p[0]);
              if (!v23)
                return 0;
            }
            else if (!v22)
            {
              return 0;
            }
            v24 = __src - 1;
            v25 = MEMORY[0x24BDAC740];
            do
            {
              if (!v18)
                break;
              v26 = v24[v18];
              v27 = (v26 & 0x80000000) != 0 ? __maskrune(v26, 0x4000uLL) : *(_DWORD *)(v25 + 4 * v26 + 60) & 0x4000;
              --v18;
            }
            while (v27);
            if (*((_BYTE *)a4 + 12) == 1)
            {
              *((_DWORD *)a4 + 2) = 0;
              result = 1;
              *((_BYTE *)a4 + 12) = 1;
              *(_QWORD *)a4 = 0;
              return result;
            }
            if (!*((_BYTE *)a4 + 12))
            {
              *(_QWORD *)((char *)a4 + 5) = 0;
              *(_QWORD *)a4 = 0;
              return 1;
            }
          }
          return 0;
        }
      }
      else if (v15)
      {
        goto LABEL_22;
      }
    }
    v18 = __len;
    goto LABEL_33;
  }
  v8 = MEMORY[0x24BDAC740];
  do
  {
    v9 = __len;
    if (!__len)
      break;
    v10 = __src[__len - 1];
    v11 = (v10 & 0x80000000) != 0 ? __maskrune(v10, 0x4000uLL) : *(_DWORD *)(v8 + 4 * v10 + 60) & 0x4000;
    --__len;
  }
  while (v11);
  v12 = *((_QWORD *)this + 8);
  v13 = *((_QWORD *)this + 9);
  while (1)
  {
    if (v12 == v13)
    {
      __len = v9;
      goto LABEL_19;
    }
    if (*(char *)(v12 + 23) < 0)
      break;
    v14 = (const char *)v12;
    if (*(unsigned __int8 *)(v12 + 23) == v9)
      goto LABEL_16;
LABEL_17:
    v12 += 24;
  }
  if (*(_QWORD *)(v12 + 8) != v9)
    goto LABEL_17;
  v14 = *(const char **)v12;
LABEL_16:
  if (strncmp(__src, v14, v9))
    goto LABEL_17;
  switch(*((_BYTE *)a4 + 12))
  {
    case 2:
      v28 = *(unint64_t **)a4;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = *(_QWORD *)a4;
        if (!*(_QWORD *)a4)
          goto LABEL_88;
        if (*(char *)(v31 + 31) < 0)
          operator delete(*(void **)(v31 + 8));
        v32 = (_QWORD *)v31;
        v33 = 0x1012C404EF22A49;
        goto LABEL_87;
      }
      break;
    case 3:
      v34 = *(unint64_t **)a4;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = *(_QWORD **)a4;
        if (!*(_QWORD *)a4)
          goto LABEL_88;
        v38 = (void *)v37[1];
        if (v38)
        {
          v37[2] = v38;
          operator delete(v38);
        }
        v32 = v37;
        v33 = 0x1080C409938AC02;
        goto LABEL_87;
      }
      break;
    case 4:
      v39 = *(unint64_t **)a4;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        v42 = *(_QWORD **)a4;
        if (!*(_QWORD *)a4)
          goto LABEL_88;
        __p[0] = v42 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        goto LABEL_75;
      }
      break;
    case 5:
      v43 = *(unint64_t **)a4;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        v42 = *(_QWORD **)a4;
        if (!*(_QWORD *)a4)
          goto LABEL_88;
        __p[0] = v42 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_75:
        v32 = v42;
        v33 = 0x1020C405E66F15BLL;
        goto LABEL_87;
      }
      break;
    case 8:
      v46 = *(unint64_t **)a4;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = *(_QWORD *)a4;
        if (!*(_QWORD *)a4)
          goto LABEL_88;
        boost::detail::shared_count::~shared_count((unsigned int **)(v49 + 16));
        v32 = (_QWORD *)v49;
        v50 = -235920773;
        goto LABEL_86;
      }
      break;
    case 9:
      v51 = *(unint64_t **)a4;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        if (*(_QWORD *)a4)
        {
          v32 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a4);
          v50 = 2071181815;
LABEL_86:
          v33 = v50 | 0x1030C4000000000;
LABEL_87:
          MEMORY[0x219A19A08](v32, v33);
        }
LABEL_88:
        *(_QWORD *)a4 = 0;
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a4 = 0;
  *((_DWORD *)a4 + 2) = 0;
  *((_BYTE *)a4 + 12) = 7;
  return 1;
}

void sub_218124E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::csv_line_tokenizer::parse_as(turi::csv_line_tokenizer *this, char **a2, size_t a3, char *a4, size_t a5, turi::flexible_type *a6, int a7)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unsigned int v24;
  int v25;
  size_t v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  unint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unint64_t *v88;
  const char *v89;
  size_t v90;
  const char *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  void *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  void *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  unsigned int v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t *v146;
  _QWORD *v147;
  unint64_t v148;
  unint64_t v149;
  void *v150;
  unint64_t *v151;
  _QWORD *v152;
  unint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  __int128 v164;
  __int128 v165;
  unint64_t v166;
  unint64_t v167;
  unsigned int v168;
  unint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t *v180;
  uint64_t v181;
  unint64_t *v182;
  _QWORD *v183;
  unint64_t v184;
  unint64_t v185;
  void *v186;
  unint64_t *v187;
  _QWORD *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t *v191;
  _QWORD *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unsigned int v196;
  _QWORD *v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  __int128 v206;
  __int128 v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t *v210[2];
  char v211;
  char *v212;
  unsigned __int8 v213;
  __int128 v214;
  __int128 __dst;
  uint64_t v216;
  uint64_t v217;

  v217 = *MEMORY[0x24BDAC8D0];
  if (a4 && *((_BYTE *)this + 168) && (turi::csv_line_tokenizer::check_substitutions(this, a4, a5, a6) & 1) != 0
    || !*((_BYTE *)this + 168) && (turi::csv_line_tokenizer::check_substitutions(this, *a2, a3, a6) & 1) != 0)
  {
    return 1;
  }
  v213 = 0;
  v13 = *((unsigned __int8 *)a6 + 12);
  v14 = MEMORY[0x24BDAC740];
  if (!a7)
    goto LABEL_21;
  if (v13 == 2)
  {
    do
    {
LABEL_23:
      v23 = *a2;
      if (!a3)
      {
        v26 = 0;
        goto LABEL_51;
      }
      v24 = v23[a3 - 1];
      if ((v24 & 0x80000000) != 0)
        v25 = __maskrune(v24, 0x4000uLL);
      else
        v25 = *(_DWORD *)(v14 + 4 * v24 + 60) & 0x4000;
      --a3;
    }
    while (v25);
    v26 = a3 + 1;
    v23 = *a2;
    if (a3 + 1 < 2)
    {
      v26 = 1;
    }
    else
    {
      v27 = *v23;
      if (v27 == *((unsigned __int8 *)this + 59) && v23[a3] == v27)
      {
        std::string::basic_string[abi:ne180100](&__dst, v23 + 1, a3 - 1);
        switch(*((_BYTE *)a6 + 12))
        {
          case 2:
            v28 = *(_QWORD *)a6;
            if (**(_QWORD **)a6 != 1)
            {
              v29 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v29, *(_QWORD *)a6);
              *(_QWORD *)a6 = v29;
              *v29 = 1;
              do
              {
                v30 = __ldaxr((unint64_t *)v28);
                v31 = v30 - 1;
              }
              while (__stlxr(v31, (unint64_t *)v28));
              if (!v31)
              {
                if (*(char *)(v28 + 31) < 0)
                  operator delete(*(void **)(v28 + 8));
                v32 = (unint64_t *)v28;
                v33 = 0x1012C404EF22A49;
                goto LABEL_248;
              }
            }
            break;
          case 3:
            v146 = *(unint64_t **)a6;
            if (**(_QWORD **)a6 != 1)
            {
              v147 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v147, *(_QWORD *)a6);
              *(_QWORD *)a6 = v147;
              *v147 = 1;
              do
              {
                v148 = __ldaxr(v146);
                v149 = v148 - 1;
              }
              while (__stlxr(v149, v146));
              if (!v149)
              {
                v150 = (void *)v146[1];
                if (v150)
                {
                  v146[2] = (unint64_t)v150;
                  operator delete(v150);
                }
                v32 = v146;
                v33 = 0x1080C409938AC02;
                goto LABEL_248;
              }
            }
            break;
          case 4:
            v151 = *(unint64_t **)a6;
            if (**(_QWORD **)a6 != 1)
            {
              v152 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v152, *(_QWORD *)a6);
              *(_QWORD *)a6 = v152;
              *v152 = 1;
              do
              {
                v153 = __ldaxr(v151);
                v154 = v153 - 1;
              }
              while (__stlxr(v154, v151));
              if (!v154)
              {
                *(_QWORD *)&v214 = v151 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v214);
                goto LABEL_233;
              }
            }
            break;
          case 5:
            v151 = *(unint64_t **)a6;
            if (**(_QWORD **)a6 != 1)
            {
              v155 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v155, *(_QWORD *)a6);
              *(_QWORD *)a6 = v155;
              *v155 = 1;
              do
              {
                v156 = __ldaxr(v151);
                v157 = v156 - 1;
              }
              while (__stlxr(v157, v151));
              if (!v157)
              {
                *(_QWORD *)&v214 = v151 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v214);
LABEL_233:
                v32 = v151;
                v33 = 0x1020C405E66F15BLL;
                goto LABEL_248;
              }
            }
            break;
          case 8:
            v158 = *(_QWORD *)a6;
            if (**(_QWORD **)a6 != 1)
            {
              v159 = operator new();
              v160 = *(_QWORD *)a6;
              *(_QWORD *)v159 = **(_QWORD **)a6;
              *(_QWORD *)(v159 + 8) = *(_QWORD *)(v160 + 8);
              v161 = *(_QWORD *)(v160 + 16);
              *(_QWORD *)(v159 + 16) = v161;
              if (v161)
              {
                v162 = (unsigned int *)(v161 + 8);
                do
                  v163 = __ldxr(v162);
                while (__stxr(v163 + 1, v162));
              }
              v164 = *(_OWORD *)(v160 + 24);
              v165 = *(_OWORD *)(v160 + 40);
              *(_OWORD *)(v159 + 56) = *(_OWORD *)(v160 + 56);
              *(_OWORD *)(v159 + 40) = v165;
              *(_OWORD *)(v159 + 24) = v164;
              *(_QWORD *)a6 = v159;
              *(_QWORD *)v159 = 1;
              do
              {
                v166 = __ldaxr((unint64_t *)v158);
                v167 = v166 - 1;
              }
              while (__stlxr(v167, (unint64_t *)v158));
              if (!v167)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v158 + 16));
                v32 = (unint64_t *)v158;
                v168 = -235920773;
                goto LABEL_247;
              }
            }
            break;
          case 9:
            v169 = *(unint64_t **)a6;
            if (**(_QWORD **)a6 != 1)
            {
              v170 = (_QWORD *)operator new();
              v171 = *(_QWORD *)a6 + 8;
              *v170 = **(_QWORD **)a6;
              turi::flexible_type_impl::ndarray<double>::ndarray(v170 + 1, v171);
              *(_QWORD *)a6 = v170;
              *v170 = 1;
              do
              {
                v172 = __ldaxr(v169);
                v173 = v172 - 1;
              }
              while (__stlxr(v173, v169));
              if (!v173)
              {
                v32 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v169);
                v168 = 2071181815;
LABEL_247:
                v33 = v168 | 0x1030C4000000000;
LABEL_248:
                MEMORY[0x219A19A08](v32, v33);
              }
            }
            break;
          default:
            break;
        }
        v174 = *(_QWORD *)a6 + 8;
        if (*(char *)(*(_QWORD *)a6 + 31) < 0)
          operator delete(*(void **)v174);
        v175 = __dst;
        *(_QWORD *)(v174 + 16) = v216;
        *(_OWORD *)v174 = v175;
        v213 = 1;
        switch(*((_BYTE *)a6 + 12))
        {
          case 2:
            v176 = *(_QWORD *)a6;
            if (**(_QWORD **)a6 != 1)
            {
              v177 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v177, *(_QWORD *)a6);
              *(_QWORD *)a6 = v177;
              *v177 = 1;
              do
              {
                v178 = __ldaxr((unint64_t *)v176);
                v179 = v178 - 1;
              }
              while (__stlxr(v179, (unint64_t *)v176));
              if (!v179)
              {
                if (*(char *)(v176 + 31) < 0)
                  operator delete(*(void **)(v176 + 8));
                v180 = (unint64_t *)v176;
                v181 = 0x1012C404EF22A49;
                goto LABEL_291;
              }
            }
            break;
          case 3:
            v182 = *(unint64_t **)a6;
            if (**(_QWORD **)a6 != 1)
            {
              v183 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v183, *(_QWORD *)a6);
              *(_QWORD *)a6 = v183;
              *v183 = 1;
              do
              {
                v184 = __ldaxr(v182);
                v185 = v184 - 1;
              }
              while (__stlxr(v185, v182));
              if (!v185)
              {
                v186 = (void *)v182[1];
                if (v186)
                {
                  v182[2] = (unint64_t)v186;
                  operator delete(v186);
                }
                v180 = v182;
                v181 = 0x1080C409938AC02;
                goto LABEL_291;
              }
            }
            break;
          case 4:
            v187 = *(unint64_t **)a6;
            if (**(_QWORD **)a6 != 1)
            {
              v188 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v188, *(_QWORD *)a6);
              *(_QWORD *)a6 = v188;
              *v188 = 1;
              do
              {
                v189 = __ldaxr(v187);
                v190 = v189 - 1;
              }
              while (__stlxr(v190, v187));
              if (!v190)
              {
                *(_QWORD *)&__dst = v187 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
                goto LABEL_281;
              }
            }
            break;
          case 5:
            v187 = *(unint64_t **)a6;
            if (**(_QWORD **)a6 != 1)
            {
              v197 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v197, *(_QWORD *)a6);
              *(_QWORD *)a6 = v197;
              *v197 = 1;
              do
              {
                v198 = __ldaxr(v187);
                v199 = v198 - 1;
              }
              while (__stlxr(v199, v187));
              if (!v199)
              {
                *(_QWORD *)&__dst = v187 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
LABEL_281:
                v180 = v187;
                v181 = 0x1020C405E66F15BLL;
                goto LABEL_291;
              }
            }
            break;
          case 8:
            v200 = *(_QWORD *)a6;
            if (**(_QWORD **)a6 != 1)
            {
              v201 = operator new();
              v202 = *(_QWORD *)a6;
              *(_QWORD *)v201 = **(_QWORD **)a6;
              *(_QWORD *)(v201 + 8) = *(_QWORD *)(v202 + 8);
              v203 = *(_QWORD *)(v202 + 16);
              *(_QWORD *)(v201 + 16) = v203;
              if (v203)
              {
                v204 = (unsigned int *)(v203 + 8);
                do
                  v205 = __ldxr(v204);
                while (__stxr(v205 + 1, v204));
              }
              v206 = *(_OWORD *)(v202 + 24);
              v207 = *(_OWORD *)(v202 + 40);
              *(_OWORD *)(v201 + 56) = *(_OWORD *)(v202 + 56);
              *(_OWORD *)(v201 + 40) = v207;
              *(_OWORD *)(v201 + 24) = v206;
              *(_QWORD *)a6 = v201;
              *(_QWORD *)v201 = 1;
              do
              {
                v208 = __ldaxr((unint64_t *)v200);
                v209 = v208 - 1;
              }
              while (__stlxr(v209, (unint64_t *)v200));
              if (!v209)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v200 + 16));
                v180 = (unint64_t *)v200;
                v196 = -235920773;
                goto LABEL_290;
              }
            }
            break;
          case 9:
            v191 = *(unint64_t **)a6;
            if (**(_QWORD **)a6 != 1)
            {
              v192 = (_QWORD *)operator new();
              v193 = *(_QWORD *)a6 + 8;
              *v192 = **(_QWORD **)a6;
              turi::flexible_type_impl::ndarray<double>::ndarray(v192 + 1, v193);
              *(_QWORD *)a6 = v192;
              *v192 = 1;
              do
              {
                v194 = __ldaxr(v191);
                v195 = v194 - 1;
              }
              while (__stlxr(v195, v191));
              if (!v195)
              {
                v180 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v191);
                v196 = 2071181815;
LABEL_290:
                v181 = v196 | 0x1030C4000000000;
LABEL_291:
                MEMORY[0x219A19A08](v180, v181);
              }
            }
            break;
          default:
            break;
        }
        turi::unescape_string((std::string *)(*(_QWORD *)a6 + 8), (unint64_t *)*((unsigned __int8 *)this + 1), *((_BYTE *)this + 2), *((_BYTE *)this + 59), *((unsigned __int8 *)this + 58));
        goto LABEL_113;
      }
    }
LABEL_51:
    std::string::basic_string[abi:ne180100](&__dst, v23, v26);
    switch(*((_BYTE *)a6 + 12))
    {
      case 2:
        v37 = *(_QWORD *)a6;
        if (**(_QWORD **)a6 != 1)
        {
          v38 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v38, *(_QWORD *)a6);
          *(_QWORD *)a6 = v38;
          *v38 = 1;
          do
          {
            v39 = __ldaxr((unint64_t *)v37);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, (unint64_t *)v37));
          if (!v40)
          {
            if (*(char *)(v37 + 31) < 0)
              operator delete(*(void **)(v37 + 8));
            v41 = (unint64_t *)v37;
            v42 = 0x1012C404EF22A49;
            goto LABEL_109;
          }
        }
        break;
      case 3:
        v54 = *(unint64_t **)a6;
        if (**(_QWORD **)a6 != 1)
        {
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *(_QWORD *)a6);
          *(_QWORD *)a6 = v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(v54);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v54));
          if (!v57)
          {
            v58 = (void *)v54[1];
            if (v58)
            {
              v54[2] = (unint64_t)v58;
              operator delete(v58);
            }
            v41 = v54;
            v42 = 0x1080C409938AC02;
            goto LABEL_109;
          }
        }
        break;
      case 4:
        v59 = *(unint64_t **)a6;
        if (**(_QWORD **)a6 != 1)
        {
          v60 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v60, *(_QWORD *)a6);
          *(_QWORD *)a6 = v60;
          *v60 = 1;
          do
          {
            v61 = __ldaxr(v59);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v59));
          if (!v62)
          {
            *(_QWORD *)&v214 = v59 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v214);
            goto LABEL_94;
          }
        }
        break;
      case 5:
        v59 = *(unint64_t **)a6;
        if (**(_QWORD **)a6 != 1)
        {
          v63 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v63, *(_QWORD *)a6);
          *(_QWORD *)a6 = v63;
          *v63 = 1;
          do
          {
            v64 = __ldaxr(v59);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v59));
          if (!v65)
          {
            *(_QWORD *)&v214 = v59 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v214);
LABEL_94:
            v41 = v59;
            v42 = 0x1020C405E66F15BLL;
            goto LABEL_109;
          }
        }
        break;
      case 8:
        v66 = *(_QWORD *)a6;
        if (**(_QWORD **)a6 != 1)
        {
          v67 = operator new();
          v68 = *(_QWORD *)a6;
          *(_QWORD *)v67 = **(_QWORD **)a6;
          *(_QWORD *)(v67 + 8) = *(_QWORD *)(v68 + 8);
          v69 = *(_QWORD *)(v68 + 16);
          *(_QWORD *)(v67 + 16) = v69;
          if (v69)
          {
            v70 = (unsigned int *)(v69 + 8);
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          v72 = *(_OWORD *)(v68 + 24);
          v73 = *(_OWORD *)(v68 + 40);
          *(_OWORD *)(v67 + 56) = *(_OWORD *)(v68 + 56);
          *(_OWORD *)(v67 + 40) = v73;
          *(_OWORD *)(v67 + 24) = v72;
          *(_QWORD *)a6 = v67;
          *(_QWORD *)v67 = 1;
          do
          {
            v74 = __ldaxr((unint64_t *)v66);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, (unint64_t *)v66));
          if (!v75)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v66 + 16));
            v41 = (unint64_t *)v66;
            v76 = -235920773;
            goto LABEL_108;
          }
        }
        break;
      case 9:
        v77 = *(unint64_t **)a6;
        if (**(_QWORD **)a6 != 1)
        {
          v78 = (_QWORD *)operator new();
          v79 = *(_QWORD *)a6 + 8;
          *v78 = **(_QWORD **)a6;
          turi::flexible_type_impl::ndarray<double>::ndarray(v78 + 1, v79);
          *(_QWORD *)a6 = v78;
          *v78 = 1;
          do
          {
            v80 = __ldaxr(v77);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, v77));
          if (!v81)
          {
            v41 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v77);
            v76 = 2071181815;
LABEL_108:
            v42 = v76 | 0x1030C4000000000;
LABEL_109:
            MEMORY[0x219A19A08](v41, v42);
          }
        }
        break;
      default:
        break;
    }
    v82 = *(_QWORD *)a6 + 8;
    if (*(char *)(*(_QWORD *)a6 + 31) < 0)
      operator delete(*(void **)v82);
    v83 = __dst;
    *(_QWORD *)(v82 + 16) = v216;
    *(_OWORD *)v82 = v83;
    v213 = 1;
    goto LABEL_113;
  }
  if (v13 != 7)
  {
    v15 = **a2;
    if (v15 == *((unsigned __int8 *)this + 59) && (*a2)[a3 - 1] == v15)
    {
      v16 = operator new();
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)v16 = 1;
      v17 = *a2;
      v18 = *a2 + 1;
      *a2 = v18;
      if (a3 <= 1)
        v19 = (char *)a3;
      else
        v19 = (char *)(a3 - 2);
      v20 = turi::unescape_string((turi *)v18, v19, (unint64_t *)*((unsigned __int8 *)this + 1), *((_BYTE *)this + 2), *((_BYTE *)this + 59), *((unsigned __int8 *)this + 58));
      v12 = turi::csv_line_tokenizer::parse_as(this, a2, v20, 0, 0, a6, 0);
      *a2 = &v17[a3];
      do
      {
        v21 = __ldaxr((unint64_t *)v16);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unint64_t *)v16));
      if (!v22)
      {
        if (*(char *)(v16 + 31) < 0)
          operator delete(*(void **)(v16 + 8));
        MEMORY[0x219A19A08](v16, 0x1012C404EF22A49);
      }
      return v12;
    }
LABEL_21:
    v12 = 0;
    switch(*((_BYTE *)a6 + 12))
    {
      case 0:
        turi::flexible_type_parser::int_parse((const char **)a2, a3, (uint64_t)&__dst);
        goto LABEL_49;
      case 1:
        turi::flexible_type_parser::double_parse((const char **)a2, a3, (uint64_t)&__dst);
        goto LABEL_49;
      case 2:
        goto LABEL_23;
      case 3:
        turi::flexible_type_parser::vector_parse(*((turi::flexible_type_parser **)this + 33), (const char **)a2, a3, (_QWORD **)&__dst);
        goto LABEL_49;
      case 4:
        turi::flexible_type_parser::recursive_parse(*((turi::flexible_type_parser **)this + 33), (const char **)a2, a3, (_QWORD **)&__dst);
        goto LABEL_49;
      case 5:
        turi::flexible_type_parser::dict_parse(*((turi::flexible_type_parser **)this + 33), (const char **)a2, a3, (_QWORD **)&__dst);
LABEL_49:
        *(_QWORD *)&v214 = a6;
        *((_QWORD *)&v214 + 1) = &v213;
        std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>((uint64_t **)&v214, (uint64_t *)&__dst);
        std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&__dst);
        goto LABEL_113;
      case 7:
        break;
      default:
        return v12;
    }
  }
  turi::flexible_type_parser::general_flexible_type_parse(*((turi::flexible_type_parser **)this + 33), (const char **)a2, a3, (uint64_t)&__dst);
  *(_QWORD *)&v214 = a6;
  *((_QWORD *)&v214 + 1) = &v213;
  std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>((uint64_t **)&v214, (uint64_t *)&__dst);
  std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&__dst);
  if (!a7 || !v213 || *((_BYTE *)a6 + 12) != 2)
    goto LABEL_113;
  v34 = *(_QWORD *)a6;
  if (*(char *)(*(_QWORD *)a6 + 31) < 0)
  {
    v35 = *(char **)(v34 + 8);
    v36 = *(_QWORD *)(v34 + 16);
  }
  else
  {
    v35 = (char *)(v34 + 8);
    v36 = *(unsigned __int8 *)(*(_QWORD *)a6 + 31);
  }
  v212 = v35;
  v43 = v36 << 32;
  do
  {
    v44 = v36;
    v45 = v43;
    if (!v36)
      break;
    v46 = v212[v36 - 1];
    v47 = (v46 & 0x80000000) != 0 ? __maskrune(v46, 0x4000uLL) : *(_DWORD *)(v14 + 4 * v46 + 60) & 0x4000;
    v43 = v45 - 0x100000000;
    v36 = v44 - 1;
  }
  while (v47);
  *(_QWORD *)((char *)&v214 + 5) = 0x700000000000000;
  *(_QWORD *)&v214 = 0;
  v211 = 0;
  turi::flexible_type_parser::non_string_flexible_type_parse(*((turi::flexible_type_parser **)this + 33), (const char **)&v212, v44, (char **)&__dst);
  v210[0] = (uint64_t *)&v214;
  v210[1] = (uint64_t *)&v211;
  std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>(v210, (uint64_t *)&__dst);
  std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&__dst);
  if (v211 && &v214 != (__int128 *)a6 && v212 - v35 == v45 >> 32)
  {
    switch(*((_BYTE *)a6 + 12))
    {
      case 2:
        v48 = *(unint64_t **)a6;
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          v51 = *(_QWORD *)a6;
          if (!*(_QWORD *)a6)
            goto LABEL_170;
          if (*(char *)(v51 + 31) < 0)
            operator delete(*(void **)(v51 + 8));
          v52 = (_QWORD *)v51;
          v53 = 0x1012C404EF22A49;
          goto LABEL_169;
        }
        break;
      case 3:
        v96 = *(unint64_t **)a6;
        do
        {
          v97 = __ldaxr(v96);
          v98 = v97 - 1;
        }
        while (__stlxr(v98, v96));
        if (!v98)
        {
          v99 = *(_QWORD **)a6;
          if (!*(_QWORD *)a6)
            goto LABEL_170;
          v100 = (void *)v99[1];
          if (v100)
          {
            v99[2] = v100;
            operator delete(v100);
          }
          v52 = v99;
          v53 = 0x1080C409938AC02;
          goto LABEL_169;
        }
        break;
      case 4:
        v101 = *(unint64_t **)a6;
        do
        {
          v102 = __ldaxr(v101);
          v103 = v102 - 1;
        }
        while (__stlxr(v103, v101));
        if (!v103)
        {
          v104 = *(_QWORD **)a6;
          if (!*(_QWORD *)a6)
            goto LABEL_170;
          *(_QWORD *)&__dst = v104 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
          goto LABEL_157;
        }
        break;
      case 5:
        v105 = *(unint64_t **)a6;
        do
        {
          v106 = __ldaxr(v105);
          v107 = v106 - 1;
        }
        while (__stlxr(v107, v105));
        if (!v107)
        {
          v104 = *(_QWORD **)a6;
          if (!*(_QWORD *)a6)
            goto LABEL_170;
          *(_QWORD *)&__dst = v104 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
LABEL_157:
          v52 = v104;
          v53 = 0x1020C405E66F15BLL;
          goto LABEL_169;
        }
        break;
      case 8:
        v108 = *(unint64_t **)a6;
        do
        {
          v109 = __ldaxr(v108);
          v110 = v109 - 1;
        }
        while (__stlxr(v110, v108));
        if (!v110)
        {
          v111 = *(_QWORD *)a6;
          if (!*(_QWORD *)a6)
            goto LABEL_170;
          boost::detail::shared_count::~shared_count((unsigned int **)(v111 + 16));
          v52 = (_QWORD *)v111;
          v112 = -235920773;
          goto LABEL_168;
        }
        break;
      case 9:
        v113 = *(unint64_t **)a6;
        do
        {
          v114 = __ldaxr(v113);
          v115 = v114 - 1;
        }
        while (__stlxr(v115, v113));
        if (!v115)
        {
          if (*(_QWORD *)a6)
          {
            v52 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a6);
            v112 = 2071181815;
LABEL_168:
            v53 = v112 | 0x1030C4000000000;
LABEL_169:
            MEMORY[0x219A19A08](v52, v53);
          }
LABEL_170:
          *(_QWORD *)a6 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)((char *)a6 + 5) = *(_QWORD *)((char *)&v214 + 5);
    *(_QWORD *)a6 = v214;
    v116 = BYTE12(v214);
    *((_BYTE *)a6 + 12) = BYTE12(v214);
    if (v116 > 9 || ((1 << v116) & 0x33C) == 0)
      goto LABEL_178;
    v118 = *(unint64_t **)a6;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 + 1, v118));
  }
  v116 = BYTE12(v214);
LABEL_178:
  switch(v116)
  {
    case 2u:
      v120 = (unint64_t *)v214;
      do
      {
        v121 = __ldaxr(v120);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v120));
      if (!v122)
      {
        v123 = (_QWORD *)v214;
        if ((_QWORD)v214)
        {
          if (*(char *)(v214 + 31) < 0)
            operator delete(*(void **)(v214 + 8));
          v124 = v123;
          v125 = 0x1012C404EF22A49;
          goto LABEL_215;
        }
      }
      break;
    case 3u:
      v126 = (unint64_t *)v214;
      do
      {
        v127 = __ldaxr(v126);
        v128 = v127 - 1;
      }
      while (__stlxr(v128, v126));
      if (!v128)
      {
        v129 = (_QWORD *)v214;
        if ((_QWORD)v214)
        {
          v130 = *(void **)(v214 + 8);
          if (v130)
          {
            *(_QWORD *)(v214 + 16) = v130;
            operator delete(v130);
          }
          v124 = v129;
          v125 = 0x1080C409938AC02;
          goto LABEL_215;
        }
      }
      break;
    case 4u:
      v131 = (unint64_t *)v214;
      do
      {
        v132 = __ldaxr(v131);
        v133 = v132 - 1;
      }
      while (__stlxr(v133, v131));
      if (!v133)
      {
        v134 = (_QWORD *)v214;
        if ((_QWORD)v214)
        {
          *(_QWORD *)&__dst = v214 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
          goto LABEL_203;
        }
      }
      break;
    case 5u:
      v135 = (unint64_t *)v214;
      do
      {
        v136 = __ldaxr(v135);
        v137 = v136 - 1;
      }
      while (__stlxr(v137, v135));
      if (!v137)
      {
        v134 = (_QWORD *)v214;
        if ((_QWORD)v214)
        {
          *(_QWORD *)&__dst = v214 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
LABEL_203:
          v124 = v134;
          v125 = 0x1020C405E66F15BLL;
          goto LABEL_215;
        }
      }
      break;
    case 8u:
      v138 = (unint64_t *)v214;
      do
      {
        v139 = __ldaxr(v138);
        v140 = v139 - 1;
      }
      while (__stlxr(v140, v138));
      if (!v140)
      {
        v141 = (_QWORD *)v214;
        if ((_QWORD)v214)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v214 + 16));
          v124 = v141;
          v142 = -235920773;
          goto LABEL_214;
        }
      }
      break;
    case 9u:
      v143 = (unint64_t *)v214;
      do
      {
        v144 = __ldaxr(v143);
        v145 = v144 - 1;
      }
      while (__stlxr(v145, v143));
      if (!v145 && (_QWORD)v214)
      {
        v124 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v214);
        v142 = 2071181815;
LABEL_214:
        v125 = v142 | 0x1030C4000000000;
LABEL_215:
        MEMORY[0x219A19A08](v124, v125);
      }
      break;
    default:
      break;
  }
LABEL_113:
  v84 = *((_QWORD *)this + 8);
  v85 = *((_QWORD *)this + 9);
  v86 = v213;
  if (v84 == v85 || v213 == 0)
    return v86 != 0;
  if (*((_BYTE *)a6 + 12) != 2)
    goto LABEL_137;
  v88 = *(unint64_t **)a6;
  if (*(char *)(*(_QWORD *)a6 + 31) < 0)
  {
    v89 = (const char *)v88[1];
    v90 = v88[2];
  }
  else
  {
    v89 = (const char *)(v88 + 1);
    v90 = *(unsigned __int8 *)(*(_QWORD *)a6 + 31);
  }
  while (*(char *)(v84 + 23) < 0)
  {
    if (*(_QWORD *)(v84 + 8) == v90)
    {
      v91 = *(const char **)v84;
      goto LABEL_126;
    }
LABEL_127:
    v84 += 24;
    if (v84 == v85)
      return v86 != 0;
  }
  v91 = (const char *)v84;
  if (v90 != *(unsigned __int8 *)(v84 + 23))
    goto LABEL_127;
LABEL_126:
  if (strncmp(v89, v91, v90))
    goto LABEL_127;
  do
  {
    v92 = __ldaxr(v88);
    v93 = v92 - 1;
  }
  while (__stlxr(v93, v88));
  if (!v93)
  {
    v94 = *(_QWORD *)a6;
    if (*(_QWORD *)a6)
    {
      if (*(char *)(v94 + 31) < 0)
        operator delete(*(void **)(v94 + 8));
      MEMORY[0x219A19A08](v94, 0x1012C404EF22A49);
    }
    *(_QWORD *)a6 = 0;
  }
  *(_QWORD *)a6 = 0;
  *((_DWORD *)a6 + 2) = 0;
  *((_BYTE *)a6 + 12) = 7;
LABEL_137:
  v86 = 1;
  return v86 != 0;
}

void sub_21812614C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, int a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  MEMORY[0x219A19A08](v24, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

uint64_t **std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void **v36;

  v4 = *a1;
  if (*a1 != a2)
  {
    switch(*((_BYTE *)v4 + 12))
    {
      case 2:
        v5 = (unint64_t *)*v4;
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          v8 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          if (*((char *)v8 + 31) < 0)
            operator delete((void *)v8[1]);
          v9 = v8;
          v10 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v11 = (unint64_t *)*v4;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          v14 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          v15 = (void *)v14[1];
          if (v15)
          {
            v14[2] = (unint64_t)v15;
            operator delete(v15);
          }
          v9 = v14;
          v10 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v16 = (unint64_t *)*v4;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          v19 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          v36 = (void **)(v19 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
          goto LABEL_27;
        }
        break;
      case 5:
        v20 = (unint64_t *)*v4;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v19 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          v36 = (void **)(v19 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_27:
          v9 = v19;
          v10 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v23 = (unint64_t *)*v4;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v26 + 2);
          v9 = v26;
          v27 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v28 = (unint64_t *)*v4;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = (unint64_t *)*v4;
          if (*v4)
          {
            v32 = (void *)v31[6];
            if (v32)
            {
              v31[7] = (unint64_t)v32;
              operator delete(v32);
            }
            v33 = (void *)v31[3];
            if (v33)
            {
              v31[4] = (unint64_t)v33;
              operator delete(v33);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
            v9 = v31;
            v27 = 2071181815;
LABEL_42:
            v10 = v27 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v9, v10);
          }
LABEL_44:
          *v4 = 0;
        }
        break;
      default:
        break;
    }
    v34 = *a2;
    *(uint64_t *)((char *)v4 + 5) = *(uint64_t *)((char *)a2 + 5);
    *v4 = v34;
    *((_BYTE *)v4 + 12) = *((_BYTE *)a2 + 12);
    *((_BYTE *)a2 + 12) = 0;
  }
  *(_BYTE *)a1[1] = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t turi::csv_line_tokenizer::get_last_parse_error_diagnosis(turi::csv_line_tokenizer *this)
{
  return (uint64_t)this + 208;
}

void turi::csv_line_tokenizer::init(turi::csv_line_tokenizer *this)
{
  uint64_t v2;
  const void **v3;
  int v4;
  char v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _BYTE v35[40];
  std::string v36;

  v2 = operator new();
  v3 = (const void **)((char *)this + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)v3;
    v36.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
  v4 = *((unsigned __int8 *)this + 1);
  v5 = *((_BYTE *)this + 2);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v35, *((unsigned __int8 **)this + 8), *((unsigned __int8 **)this + 9));
  turi::flexible_type_parser::flexible_type_parser(v2, &v36, v4 != 0, v5, v35, (char *)this + 88, (char *)this + 128, *((unsigned __int8 *)this + 168));
  std::shared_ptr<turi::flexible_type_parser>::reset[abi:ne180100]<turi::flexible_type_parser,void>((_QWORD *)this + 33, v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v35);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v6 = (unsigned __int8 **)((char *)this + 32);
  v7 = *((unsigned __int8 *)this + 55);
  if (*((char *)this + 55) < 0)
  {
    if (*((_QWORD *)this + 5) != 1)
    {
LABEL_17:
      *((_BYTE *)this + 286) = 0;
      goto LABEL_18;
    }
    v8 = *v6;
  }
  else
  {
    v8 = (unsigned __int8 *)this + 32;
    if ((_DWORD)v7 != 1)
      goto LABEL_17;
  }
  v23 = *v8 == 10;
  *((_BYTE *)this + 286) = v23;
  if (v23)
  {
    LODWORD(v9) = *((unsigned __int8 *)this + 31);
    if (*((char *)this + 31) < 0)
    {
      v24 = *((_QWORD *)this + 2);
      if (v24 == 1)
      {
        v26 = *(unsigned __int8 *)*v3;
        if (v26 == 10)
          goto LABEL_51;
        v22 = v26 == 13;
        if (v22)
          goto LABEL_52;
      }
      if (v24 != 2)
        goto LABEL_43;
      v10 = (unsigned __int16 *)*v3;
    }
    else
    {
      if ((_DWORD)v9 == 1)
      {
        v25 = *(unsigned __int8 *)v3;
        v23 = v25 == 10 || v25 == 13;
        goto LABEL_47;
      }
      v10 = (unsigned __int16 *)((char *)this + 8);
      if ((_DWORD)v9 != 2)
      {
LABEL_43:
        v22 = 0;
        goto LABEL_52;
      }
    }
    v23 = *v10 == 2573;
LABEL_47:
    v22 = v23;
    goto LABEL_52;
  }
LABEL_18:
  v9 = *((unsigned __int8 *)this + 31);
  if ((v9 & 0x80u) == 0)
    v11 = *((unsigned __int8 *)this + 31);
  else
    v11 = *((_QWORD *)this + 2);
  if ((v7 & 0x80u) == 0)
    v12 = v7;
  else
    v12 = *((_QWORD *)this + 5);
  if (v11 != v12)
    goto LABEL_43;
  if ((v7 & 0x80u) == 0)
    v13 = (unsigned __int8 *)this + 32;
  else
    v13 = *v6;
  if ((v9 & 0x80) != 0)
  {
    v23 = memcmp(*v3, v13, *((_QWORD *)this + 2)) == 0;
    goto LABEL_47;
  }
  if (!*((_BYTE *)this + 31))
  {
LABEL_51:
    v22 = 1;
    goto LABEL_52;
  }
  v14 = v9 - 1;
  v15 = (unsigned __int8 *)this + 8;
  do
  {
    v17 = *v15++;
    v16 = v17;
    v19 = *v13++;
    v18 = v19;
    v21 = v14-- != 0;
    v22 = v16 == v18;
  }
  while (v22 && v21);
LABEL_52:
  *((_BYTE *)this + 280) = v22;
  if ((v9 & 0x80) == 0)
  {
    *((_BYTE *)this + 284) = (_DWORD)v9 != 0;
    if ((_DWORD)v9)
    {
      v9 = v9;
      v27 = (char *)this + 8;
      goto LABEL_57;
    }
    LOBYTE(v30) = 0;
    *((_BYTE *)this + 281) = 0;
LABEL_68:
    v30 = v30;
    goto LABEL_71;
  }
  v9 = *((_QWORD *)this + 2);
  *((_BYTE *)this + 284) = v9 != 0;
  if (v9)
  {
    v27 = (char *)*v3;
LABEL_57:
    while (1)
    {
      v28 = *v27;
      if (v28 == 9)
        break;
      if ((v28 & 0x80000000) != 0)
      {
        if (!__maskrune(v28, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v28 + 60) & 0x4000) == 0)
      {
        break;
      }
      ++v27;
      if (!--v9)
      {
        v29 = 1;
        goto LABEL_65;
      }
    }
    v29 = 0;
LABEL_65:
    LODWORD(v30) = *((char *)this + 31);
    *((_BYTE *)this + 281) = v29;
    if ((v30 & 0x80000000) == 0)
      goto LABEL_68;
  }
  else
  {
    *((_BYTE *)this + 281) = 0;
  }
  v3 = (const void **)*((_QWORD *)this + 1);
  v30 = *((_QWORD *)this + 2);
LABEL_71:
  *((_BYTE *)this + 282) = *(_BYTE *)v3;
  *((_BYTE *)this + 283) = v30 == 1;
  *((_BYTE *)this + 285) = 0;
  v31 = *((_QWORD *)this + 8);
  v32 = *((_QWORD *)this + 9);
  if (v31 != v32)
  {
    v33 = 0;
    do
    {
      if (*(char *)(v31 + 23) < 0)
        v34 = *(_QWORD *)(v31 + 8);
      else
        v34 = *(unsigned __int8 *)(v31 + 23);
      v33 |= v34 == 0;
      *((_BYTE *)this + 285) = v33;
      v31 += 24;
    }
    while (v31 != v32);
  }
}

void sub_2181268B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  MEMORY[0x219A19A08](v20, 0x1020C404B39E143);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::flexible_type_parser>::reset[abi:ne180100]<turi::flexible_type_parser,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::flexible_type_parser>::shared_ptr[abi:ne180100]<turi::flexible_type_parser,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_218126B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::csv_line_tokenizer::tokenize_line(char const*,unsigned long,std::vector<std::string> &)::$_0::operator()(std::vector<std::string> **a1, unsigned __int8 *__src, size_t a3)
{
  size_t v4;
  unsigned __int8 *v5;
  std::vector<std::string> *v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  std::vector<std::string> *v10;
  std::string *end;
  std::allocator<std::string> *p_end_cap;
  unint64_t value;
  std::string *v14;
  int v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  size_t v25;
  void *v26;
  std::__split_buffer<std::string> __v;

  v25 = a3;
  v26 = __src;
  if (!a3)
  {
    v10 = *a1;
    end = (*a1)->__end_;
    p_end_cap = (std::allocator<std::string> *)&(*a1)->__end_cap_;
    value = (unint64_t)(*a1)->__end_cap_.__value_;
    if ((unint64_t)end >= value)
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v10->__begin_) >> 3);
      v20 = v19 + 1;
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(value - (unint64_t)v10->__begin_) >> 3);
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v20;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v22)
        v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v22);
      else
        v23 = 0;
      v24 = v23 + v19;
      __v.__first_ = v23;
      __v.__begin_ = v24;
      __v.__end_cap_.__value_ = &v23[v22];
      v24->__r_.__value_.__r.__words[0] = 0;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      __v.__end_ = v24 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
      v14 = v10->__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      end->__r_.__value_.__r.__words[0] = 0;
      end->__r_.__value_.__l.__size_ = 0;
      end->__r_.__value_.__r.__words[2] = 0;
      v14 = end + 1;
      v10->__end_ = end + 1;
    }
    v10->__end_ = v14;
    return;
  }
  v4 = a3;
  v5 = __src;
  v6 = a1[1];
  v7 = MEMORY[0x24BDAC740];
  while (1)
  {
    v8 = (char)v5[v4 - 1];
    if ((v8 & 0x80000000) != 0)
      break;
    if ((*(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000) == 0)
      goto LABEL_11;
LABEL_7:
    if (!--v4)
    {
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (__maskrune(v8, 0x4000uLL))
    goto LABEL_7;
LABEL_11:
  v9 = v4;
LABEL_12:
  v25 = v4;
  v15 = BYTE3(v6[2].__end_);
  if (*v5 == v15)
  {
    ++v5;
    v25 = --v9;
    v26 = v5;
  }
  if (v9 && v5[v9 - 1] == v15)
    v25 = --v9;
  v16 = (uint64_t *)*a1;
  v17 = v16[1];
  if (v17 >= v16[2])
  {
    v18 = std::vector<std::string>::__emplace_back_slow_path<char *&,unsigned long &>(v16, &v26, &v25);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((_QWORD *)v16[1], v5, v9);
    v18 = v17 + 24;
    v16[1] = v17 + 24;
  }
  v16[1] = v18;
}

void sub_218126D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__split_buffer<std::string> *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char *&,unsigned long &>(uint64_t *a1, void **a2, size_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v11)
    v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v9, v11);
  else
    v12 = 0;
  __v.__first_ = v12;
  __v.__begin_ = v12 + v5;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v12[v11];
  std::string::basic_string[abi:ne180100](__v.__begin_->__r_.__value_.__r.__words, *a2, *a3);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_218126EA8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

BOOL turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(unint64_t **a1, char *__src, size_t a3, char *a4, size_t a5)
{
  size_t v5;
  char *v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  unint64_t v28;
  const std::string::value_type *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string::size_type v39;
  char v40;
  std::string::size_type v41;
  void *v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type v46;
  char v47;
  std::string::size_type v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  void *v53;
  unint64_t *v54;
  uint64_t v55;
  std::string *v56;
  std::string::size_type v57;
  char v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  void *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unsigned int v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  std::string __p;
  std::string v108;
  char *v109;
  std::string __dst;
  _QWORD v111[3];

  v5 = a3;
  v6 = __src;
  v111[2] = *MEMORY[0x24BDAC8D0];
  v109 = __src;
  v7 = (uint64_t *)a1[2];
  v8 = *a1;
  v9 = **a1;
  if (v9 < *a1[1])
  {
    v13 = (_QWORD *)*a1[3];
    if (v13)
    {
      v14 = *(_QWORD *)(*v13 + 8 * v9);
      if (v14 == -1)
      {
LABEL_145:
        *v8 = v9 + 1;
        return 1;
      }
      if (a3)
        goto LABEL_5;
    }
    else
    {
      v14 = **a1;
      if (a3)
      {
LABEL_5:
        v15 = v109;
        v16 = MEMORY[0x24BDAC740];
        while (1)
        {
          v17 = *v6;
          v18 = (v17 & 0x80000000) != 0 ? __maskrune(v17, 0x4000uLL) : *(_DWORD *)(v16 + 4 * v17 + 60) & 0x4000;
          if (!v18 || v5 == 0)
            break;
          v15 = ++v6;
          --v5;
        }
        v109 = v15;
        if (!turi::csv_line_tokenizer::parse_as((turi::csv_line_tokenizer *)v7, &v109, v5, a4, a5, (turi::flexible_type *)(*a1[4] + 16 * v14), 1))
        {
          std::string::basic_string[abi:ne180100](&__dst, v6, v5);
          v24 = std::string::insert(&__dst, 0, "Unable to interpret \"");
          v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          v26 = std::string::append(&__p, "\" as a ");
          v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v108.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          v28 = *(char *)(*a1[4] + 16 * v14 + 12);
          if (v28 > 9)
            v29 = "undefined";
          else
            v29 = off_24D92F910[v28];
          v56 = std::string::append(&v108, v29);
          v57 = v56->__r_.__value_.__r.__words[0];
          v111[0] = v56->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v111 + 7) = *(std::string::size_type *)((char *)&v56->__r_.__value_.__r.__words[1] + 7);
          v58 = HIBYTE(v56->__r_.__value_.__r.__words[2]);
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          if (*((char *)v7 + 255) < 0)
            operator delete((void *)v7[29]);
          v59 = v111[0];
          v7[29] = v57;
          v7[30] = v59;
          *(uint64_t *)((char *)v7 + 247) = *(_QWORD *)((char *)v111 + 7);
          *((_BYTE *)v7 + 255) = v58;
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v108.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return 0;
          v42 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_66:
          operator delete(v42);
          return 0;
        }
        goto LABEL_144;
      }
    }
    v30 = (uint64_t *)a1[5];
    v31 = *a1[4] + 16 * v14;
    v32 = *(unsigned __int8 *)(v31 + 12);
    if (*(_BYTE *)v30)
      v33 = v32 == 2;
    else
      v33 = 1;
    if (!v33)
    {
      switch(*(_BYTE *)(v31 + 12))
      {
        case 3:
          v49 = *(unint64_t **)v31;
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (!v51)
          {
            v52 = *(unint64_t **)v31;
            if (!*(_QWORD *)v31)
              goto LABEL_110;
            v53 = (void *)v52[1];
            if (v53)
            {
              v52[2] = (unint64_t)v53;
              operator delete(v53);
            }
            v54 = v52;
            v55 = 0x1080C409938AC02;
            goto LABEL_109;
          }
          break;
        case 4:
          v71 = *(unint64_t **)v31;
          do
          {
            v72 = __ldaxr(v71);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, v71));
          if (!v73)
          {
            v74 = *(unint64_t **)v31;
            if (!*(_QWORD *)v31)
              goto LABEL_110;
            v108.__r_.__value_.__r.__words[0] = (std::string::size_type)(v74 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
            goto LABEL_97;
          }
          break;
        case 5:
          v75 = *(unint64_t **)v31;
          do
          {
            v76 = __ldaxr(v75);
            v77 = v76 - 1;
          }
          while (__stlxr(v77, v75));
          if (!v77)
          {
            v74 = *(unint64_t **)v31;
            if (!*(_QWORD *)v31)
              goto LABEL_110;
            v108.__r_.__value_.__r.__words[0] = (std::string::size_type)(v74 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
LABEL_97:
            v54 = v74;
            v55 = 0x1020C405E66F15BLL;
            goto LABEL_109;
          }
          break;
        case 8:
          v78 = *(unint64_t **)v31;
          do
          {
            v79 = __ldaxr(v78);
            v80 = v79 - 1;
          }
          while (__stlxr(v80, v78));
          if (!v80)
          {
            v81 = *(unint64_t **)v31;
            if (!*(_QWORD *)v31)
              goto LABEL_110;
            boost::detail::shared_count::~shared_count((unsigned int **)v81 + 2);
            v54 = v81;
            v82 = -235920773;
            goto LABEL_108;
          }
          break;
        case 9:
          v83 = *(unint64_t **)v31;
          do
          {
            v84 = __ldaxr(v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v83));
          if (!v85)
          {
            if (!*(_QWORD *)v31)
              goto LABEL_110;
            v54 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v31);
            v82 = 2071181815;
LABEL_108:
            v55 = v82 | 0x1030C4000000000;
            goto LABEL_109;
          }
          break;
        default:
          break;
      }
LABEL_111:
      *(_QWORD *)v31 = 0;
      *(_DWORD *)(v31 + 8) = 0;
      *(_BYTE *)(v31 + 12) = 7;
LABEL_144:
      v8 = *a1;
      v9 = **a1;
      goto LABEL_145;
    }
    if (*(_BYTE *)v30)
      v34 = v32 == 2;
    else
      v34 = 0;
    if (v34)
    {
      if (*((_BYTE *)v7 + 285))
      {
        v60 = *(unint64_t **)v31;
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          v63 = *(unint64_t **)v31;
          if (*(_QWORD *)v31)
          {
            if (*((char *)v63 + 31) < 0)
              operator delete((void *)v63[1]);
            v54 = v63;
            v55 = 0x1012C404EF22A49;
LABEL_109:
            MEMORY[0x219A19A08](v54, v55);
          }
LABEL_110:
          *(_QWORD *)v31 = 0;
        }
        goto LABEL_111;
      }
      LOBYTE(v32) = 2;
LABEL_77:
      v35 = operator new();
      *(_QWORD *)v35 = 0;
      *(_QWORD *)(v35 + 16) = 0;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 8) = 0;
LABEL_78:
      *(_QWORD *)v35 = 1;
    }
    else
    {
      v35 = 0;
      switch(*(_BYTE *)(v31 + 12))
      {
        case 2:
        case 3:
        case 4:
        case 5:
          goto LABEL_77;
        case 6:
          v35 = 0x1900000000000000;
          break;
        case 8:
          v35 = operator new();
          *(_QWORD *)v35 = 0;
          *(_OWORD *)(v35 + 8) = 0u;
          *(_OWORD *)(v35 + 24) = 0u;
          *(_OWORD *)(v35 + 40) = 0u;
          *(_QWORD *)(v35 + 56) = 0;
          *(_QWORD *)(v35 + 64) = 3;
          goto LABEL_78;
        case 9:
          v35 = operator new();
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v35);
          goto LABEL_78;
        default:
          break;
      }
    }
    v64 = *a1[4] + 16 * v14;
    switch(*(_BYTE *)(v64 + 12))
    {
      case 2:
        v65 = *(unint64_t **)v64;
        do
        {
          v66 = __ldaxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
        {
          v68 = *(unint64_t **)v64;
          if (!*(_QWORD *)v64)
            goto LABEL_142;
          if (*((char *)v68 + 31) < 0)
            operator delete((void *)v68[1]);
          v69 = v68;
          v70 = 0x1012C404EF22A49;
          goto LABEL_141;
        }
        break;
      case 3:
        v86 = *(unint64_t **)v64;
        do
        {
          v87 = __ldaxr(v86);
          v88 = v87 - 1;
        }
        while (__stlxr(v88, v86));
        if (!v88)
        {
          v89 = *(unint64_t **)v64;
          if (!*(_QWORD *)v64)
            goto LABEL_142;
          v90 = (void *)v89[1];
          if (v90)
          {
            v89[2] = (unint64_t)v90;
            operator delete(v90);
          }
          v69 = v89;
          v70 = 0x1080C409938AC02;
          goto LABEL_141;
        }
        break;
      case 4:
        v91 = *(unint64_t **)v64;
        do
        {
          v92 = __ldaxr(v91);
          v93 = v92 - 1;
        }
        while (__stlxr(v93, v91));
        if (!v93)
        {
          v94 = *(unint64_t **)v64;
          if (!*(_QWORD *)v64)
            goto LABEL_142;
          v108.__r_.__value_.__r.__words[0] = (std::string::size_type)(v94 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
          goto LABEL_129;
        }
        break;
      case 5:
        v95 = *(unint64_t **)v64;
        do
        {
          v96 = __ldaxr(v95);
          v97 = v96 - 1;
        }
        while (__stlxr(v97, v95));
        if (!v97)
        {
          v94 = *(unint64_t **)v64;
          if (!*(_QWORD *)v64)
            goto LABEL_142;
          v108.__r_.__value_.__r.__words[0] = (std::string::size_type)(v94 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
LABEL_129:
          v69 = v94;
          v70 = 0x1020C405E66F15BLL;
          goto LABEL_141;
        }
        break;
      case 8:
        v98 = *(unint64_t **)v64;
        do
        {
          v99 = __ldaxr(v98);
          v100 = v99 - 1;
        }
        while (__stlxr(v100, v98));
        if (!v100)
        {
          v101 = *(unint64_t **)v64;
          if (!*(_QWORD *)v64)
            goto LABEL_142;
          boost::detail::shared_count::~shared_count((unsigned int **)v101 + 2);
          v69 = v101;
          v102 = -235920773;
          goto LABEL_140;
        }
        break;
      case 9:
        v103 = *(unint64_t **)v64;
        do
        {
          v104 = __ldaxr(v103);
          v105 = v104 - 1;
        }
        while (__stlxr(v105, v103));
        if (!v105)
        {
          if (*(_QWORD *)v64)
          {
            v69 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v64);
            v102 = 2071181815;
LABEL_140:
            v70 = v102 | 0x1030C4000000000;
LABEL_141:
            MEMORY[0x219A19A08](v69, v70);
          }
LABEL_142:
          *(_QWORD *)v64 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v64 = v35;
    *(_DWORD *)(v64 + 8) = 0;
    *(_BYTE *)(v64 + 12) = v32;
    goto LABEL_144;
  }
  if (!*((_BYTE *)v7 + 281))
  {
    std::string::basic_string[abi:ne180100](&__p, __src, a3);
    v36 = std::string::insert(&__p, 0, "Unexpected characters after last column. \"");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v108.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append(&v108, "\"");
    v39 = v38->__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    v40 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)v7 + 255) < 0)
      operator delete((void *)v7[29]);
    v41 = __dst.__r_.__value_.__r.__words[0];
    v7[29] = v39;
    v7[30] = v41;
    *(uint64_t *)((char *)v7 + 247) = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
    *((_BYTE *)v7 + 255) = v40;
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 0;
    v42 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_66;
  }
  if (!a3)
    return 1;
  v20 = 0;
  v21 = 0;
  v22 = MEMORY[0x24BDAC740];
  while (1)
  {
    v23 = v6[v21];
    if ((v23 & 0x80000000) != 0)
      break;
    if ((*(_DWORD *)(v22 + 4 * v23 + 60) & 0x4000) == 0)
      goto LABEL_43;
LABEL_21:
    v20 = ++v21 >= v5;
    if (v5 == v21)
      return 1;
  }
  if (__maskrune(v23, 0x4000uLL))
    goto LABEL_21;
LABEL_43:
  std::string::basic_string[abi:ne180100](&__p, v6, v5);
  v43 = std::string::insert(&__p, 0, "Unexpected characters after last column. \"");
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v108.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  v45 = std::string::append(&v108, "\"");
  v46 = v45->__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = v45->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
  v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)v7 + 255) < 0)
    operator delete((void *)v7[29]);
  v48 = __dst.__r_.__value_.__r.__words[0];
  v7[29] = v46;
  v7[30] = v48;
  *(uint64_t *)((char *)v7 + 247) = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
  *((_BYTE *)v7 + 255) = v47;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v20;
}

void sub_2181277A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a2)
  {
    MEMORY[0x219A19A08](v28, 0x1030C407B73B9F7);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, v5, (uint64_t)v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2181278C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::flexible_type_parser>::shared_ptr[abi:ne180100]<turi::flexible_type_parser,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D92F8A8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  std::unique_ptr<turi::flexible_type_parser>::reset[abi:ne180100](&v6, 0);
  return a1;
}

void sub_218127950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<turi::flexible_type_parser>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<turi::flexible_type_parser *,std::shared_ptr<turi::flexible_type_parser>::__shared_ptr_default_delete<turi::flexible_type_parser,turi::flexible_type_parser>,std::allocator<turi::flexible_type_parser>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<turi::flexible_type_parser>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::flexible_type_parser *,std::shared_ptr<turi::flexible_type_parser>::__shared_ptr_default_delete<turi::flexible_type_parser,turi::flexible_type_parser>,std::allocator<turi::flexible_type_parser>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<turi::flexible_type_parser>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2 + 16);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x219A19A08);
  }
}

uint64_t *std::unique_ptr<turi::flexible_type_parser>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2 + 16);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_csv_line_tokenizer_cpp()
{
  uint64_t result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  boost::spirit::lit = 0;
  boost::spirit::bin = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::stream = 0;
  boost::spirit::wstream = 0;
  boost::spirit::left_align = 0;
  boost::spirit::right_align = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::token = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_token = 0;
  boost::spirit::tokenid_mask = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  parser_impl::restricted_string = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_HashOutputStreamBuf_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::csv_writer::write_verbatim(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void **v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if (a3[1] != *a3)
  {
    v7 = 0;
    do
    {
      turi::flexible_type::flexible_type<std::string>((uint64_t)&v49, (const std::string *)(v5 + 24 * v7));
      turi::csv_writer::csv_print(a1, a2, (turi::flexible_type_impl *)&v49, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > 1);
      switch(v50)
      {
        case 2:
          v8 = (unint64_t *)v49;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            v11 = v49;
            if (v49)
            {
              if (*(char *)(v49 + 31) < 0)
                operator delete(*(void **)(v49 + 8));
              v12 = v11;
              v13 = 0x1012C404EF22A49;
              goto LABEL_44;
            }
          }
          break;
        case 3:
          v14 = (unint64_t *)v49;
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            v17 = v49;
            if (v49)
            {
              v18 = *(void **)(v49 + 8);
              if (v18)
              {
                *(_QWORD *)(v49 + 16) = v18;
                operator delete(v18);
              }
              v12 = v17;
              v13 = 0x1080C409938AC02;
              goto LABEL_44;
            }
          }
          break;
        case 4:
          v19 = (unint64_t *)v49;
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = v49;
            if (v49)
            {
              v48 = (void **)(v49 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v48);
              goto LABEL_37;
            }
          }
          break;
        case 5:
          v30 = (unint64_t *)v49;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            v22 = v49;
            if (v49)
            {
              v48 = (void **)(v49 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v48);
LABEL_37:
              v12 = v22;
              v13 = 0x1020C405E66F15BLL;
              goto LABEL_44;
            }
          }
          break;
        case 8:
          v33 = (unint64_t *)v49;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v36 = v49;
            if (v49)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v49 + 16));
              v12 = v36;
              v29 = -235920773;
              goto LABEL_43;
            }
          }
          break;
        case 9:
          v23 = (unint64_t *)v49;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v26 = v49;
            if (v49)
            {
              v27 = *(void **)(v49 + 48);
              if (v27)
              {
                *(_QWORD *)(v49 + 56) = v27;
                operator delete(v27);
              }
              v28 = *(void **)(v26 + 24);
              if (v28)
              {
                *(_QWORD *)(v26 + 32) = v28;
                operator delete(v28);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v26 + 8);
              v12 = v26;
              v29 = 2071181815;
LABEL_43:
              v13 = v29 | 0x1030C4000000000;
LABEL_44:
              MEMORY[0x219A19A08](v12, v13);
            }
          }
          break;
        default:
          break;
      }
      ++v7;
      v5 = *a3;
      v37 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
      if (v7 < v37)
      {
        v38 = *(char *)(a1 + 23);
        if (v38 >= 0)
          v39 = a1;
        else
          v39 = *(_QWORD *)a1;
        if (v38 >= 0)
          v40 = *(unsigned __int8 *)(a1 + 23);
        else
          v40 = *(_QWORD *)(a1 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v39, v40);
        v5 = *a3;
        v37 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
      }
    }
    while (v7 < v37);
  }
  v43 = *(_QWORD *)(a1 + 32);
  v42 = a1 + 32;
  v41 = v43;
  v44 = *(char *)(v42 + 23);
  if (v44 >= 0)
    v45 = v42;
  else
    v45 = v41;
  if (v44 >= 0)
    v46 = *(unsigned __int8 *)(v42 + 23);
  else
    v46 = *(_QWORD *)(v42 + 8);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v45, v46);
}

void sub_218127FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::gl_sarray::clip(&a10);
      break;
    case 3:
      turi::gl_sarray::clip(&a10);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4(&a10);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5(&a10);
      break;
    case 8:
      turi::gl_sarray::clip(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void turi::csv_writer::csv_print(uint64_t a1, _QWORD *a2, turi::flexible_type_impl *this, char a4)
{
  _QWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::string::value_type v12;
  char v13;
  int v14;
  std::string *v15;
  _QWORD *v16;
  int v17;
  uint64_t *v18;
  int v19;
  _QWORD *v20;
  int v21;
  std::string *v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  char v42;
  int v43;
  void *v44;
  uint64_t v45;
  __int128 v46;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v49;
  std::string __p;
  std::string v51[11];

  switch(*((_BYTE *)this + 12))
  {
    case 0:
    case 1:
      if (*(_DWORD *)(a1 + 60) == 1)
      {
        v51[0].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 27);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v51, 1);
        switch(*((_BYTE *)this + 12))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_92;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_92:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v51);
            break;
          case 2:
            v37 = *(_QWORD *)this;
            if (*(char *)(*(_QWORD *)this + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v37 + 8), *(_QWORD *)(v37 + 16));
            }
            else
            {
              v38 = *(_OWORD *)(v37 + 8);
              __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v37 + 24);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
            }
            break;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(*(_QWORD *)this + 8));
            break;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (uint64_t *)(*(_QWORD *)this + 8));
            break;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(*(_QWORD *)this + 8));
            break;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(this, &__p);
            break;
          case 7:
            memset(&__p, 0, sizeof(__p));
            break;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            break;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(*(_QWORD *)this + 8));
            break;
          default:
            turi::apply_binary_op_ff();
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        goto LABEL_170;
      }
      if (*((_BYTE *)this + 12) == 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
        std::ostream::operator<<();
        std::stringbuf::str();
      }
      else
      {
        if (*((_BYTE *)this + 12))
          turi::apply_binary_op_ff();
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
        std::ostream::operator<<();
        std::stringbuf::str();
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v51);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &__p;
      else
        v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v33 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v32, v33);
      goto LABEL_171;
    case 2:
      v9 = *(_DWORD *)(a1 + 60);
      v10 = *(_QWORD *)this;
      v11 = *(_QWORD *)this + 8;
      if (v9 == 1)
      {
        v12 = *(_BYTE *)(a1 + 24);
        v13 = *(_BYTE *)(a1 + 25);
        v14 = *(char *)(a1 + 27);
        v15 = (std::string *)(a1 + 144);
        v16 = (_QWORD *)(a1 + 168);
        v17 = *(unsigned __int8 *)(a1 + 26);
        goto LABEL_13;
      }
      if (*(char *)(v10 + 31) < 0)
      {
        v25 = *(unsigned __int8 **)(v10 + 8);
        v26 = *(_QWORD *)(v10 + 16);
        if (v26)
          goto LABEL_35;
      }
      else
      {
        v25 = (unsigned __int8 *)(*(_QWORD *)this + 8);
        v26 = *(unsigned __int8 *)(v10 + 31);
        if (*(_BYTE *)(v10 + 31))
        {
LABEL_35:
          LOBYTE(v27) = 0;
          LOBYTE(v28) = 0;
          while (1)
          {
            v29 = *v25;
            if ((v27 & 1) != 0
              || (v29 - 8) < 6 && ((0x27u >> (v29 - 8)) & 1) != 0
              || v29 == *(unsigned __int8 *)(a1 + 24))
            {
LABEL_52:
              LODWORD(v27) = 1;
LABEL_53:
              if (v28)
                goto LABEL_54;
              goto LABEL_56;
            }
            if (*(char *)(a1 + 55) < 0)
            {
              if (!*(_QWORD *)(a1 + 40))
                goto LABEL_46;
              v30 = *(unsigned __int8 **)(a1 + 32);
            }
            else
            {
              v30 = (unsigned __int8 *)(a1 + 32);
              if (!*(_BYTE *)(a1 + 55))
                goto LABEL_46;
            }
            if (v29 == *v30)
              goto LABEL_52;
LABEL_46:
            if (*(char *)(a1 + 23) < 0)
            {
              v27 = *(_QWORD *)(a1 + 8);
              if (!v27)
                goto LABEL_53;
              v31 = *(unsigned __int8 **)a1;
            }
            else
            {
              v31 = (unsigned __int8 *)a1;
              if (!*(_BYTE *)(a1 + 23))
                goto LABEL_55;
            }
            if (v29 == *v31)
              goto LABEL_52;
LABEL_55:
            LODWORD(v27) = 0;
            if (v28)
            {
LABEL_54:
              v28 = 1;
              goto LABEL_57;
            }
LABEL_56:
            v28 = v29 == *(unsigned __int8 *)(a1 + 27);
LABEL_57:
            if ((v27 & v28) == 1)
            {
              v28 = 1;
              LODWORD(v27) = 1;
              if ((a4 & 1) == 0)
                goto LABEL_89;
LABEL_115:
              if (((v28 | v27) & 1) == 0)
                goto LABEL_119;
              if (((v27 | !v28) & 1) == 0 && *(_BYTE *)(a1 + 26))
              {
                v12 = *(_BYTE *)(a1 + 24);
                v14 = *(char *)(a1 + 27);
                v15 = (std::string *)(a1 + 144);
                v16 = (_QWORD *)(a1 + 168);
                v18 = (uint64_t *)(*(_QWORD *)this + 8);
                v13 = 0;
                v19 = 0;
                v17 = 1;
                goto LABEL_14;
              }
              v41 = *(unsigned __int8 *)(a1 + 25);
              v42 = *(_BYTE *)(a1 + 27);
              v15 = (std::string *)(a1 + 144);
              v16 = (_QWORD *)(a1 + 168);
              v43 = *(unsigned __int8 *)(a1 + 26);
              if (v9 == 3)
              {
                v17 = v43 != 0;
                v13 = v41 != 0;
                v12 = *(_BYTE *)(a1 + 24);
                v14 = v42;
                v18 = (uint64_t *)v11;
                v19 = 0;
LABEL_14:
                turi::escape_string(v18, v12, v13, v14, v19, v17, v15, v16);
LABEL_119:
                std::ostream::write();
                return;
              }
              v17 = v43 != 0;
              v13 = v41 != 0;
              v12 = *(_BYTE *)(a1 + 24);
              v14 = v42;
LABEL_13:
              v18 = (uint64_t *)v11;
              v19 = 1;
              goto LABEL_14;
            }
            ++v25;
            if (!--v26)
              goto LABEL_86;
          }
        }
      }
      v28 = 0;
      LODWORD(v27) = 0;
LABEL_86:
      if ((a4 & 1) != 0)
        goto LABEL_115;
LABEL_89:
      if ((*(_BYTE *)(v10 + 31) & 0x80) != 0)
        v36 = *(_QWORD *)(v10 + 16);
      else
        v36 = *(unsigned __int8 *)(v10 + 31);
      if (v36)
        goto LABEL_115;
      v51[0].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 27);
      v22 = v51;
      v20 = a2;
      v23 = 1;
LABEL_22:
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);
      v51[0].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v51, 1);
      return;
    case 3:
    case 6:
      if (*(_DWORD *)(a1 + 60) == 3)
      {
        switch(*((_BYTE *)this + 12))
        {
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)this + 8));
            break;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)this + 8));
            break;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)this + 8));
            break;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(this, v51);
            break;
          default:
            turi::apply_binary_op_ff();
        }
        if ((v51[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = v51;
        else
          v34 = (std::string *)v51[0].__r_.__value_.__r.__words[0];
        if ((v51[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = HIBYTE(v51[0].__r_.__value_.__r.__words[2]);
        else
          v35 = v51[0].__r_.__value_.__l.__size_;
        goto LABEL_135;
      }
      v51[0].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 27);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v51, 1);
      switch(*((_BYTE *)this + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_103;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_103:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v51);
          break;
        case 2:
          v39 = *(_QWORD *)this;
          if (*(char *)(*(_QWORD *)this + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v39 + 8), *(_QWORD *)(v39 + 16));
          }
          else
          {
            v40 = *(_OWORD *)(v39 + 8);
            __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v39 + 24);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(*(_QWORD *)this + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (uint64_t *)(*(_QWORD *)this + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(*(_QWORD *)this + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(this, &__p);
          break;
        case 7:
          memset(&__p, 0, sizeof(__p));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(*(_QWORD *)this + 8));
          break;
        default:
          turi::apply_binary_op_ff();
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      goto LABEL_170;
    case 4:
    case 5:
      v8 = *(char *)(a1 + 111);
      if (*(_DWORD *)(a1 + 60) == 3)
      {
        if (v8 < 0)
        {
          **(_BYTE **)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
        }
        else
        {
          *(_BYTE *)(a1 + 88) = 0;
          *(_BYTE *)(a1 + 111) = 0;
        }
        turi::csv_writer::csv_print_internal(a1, (std::string *)(a1 + 88), (unsigned __int8 *)this);
      }
      else
      {
        if (v8 < 0)
        {
          **(_BYTE **)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
        }
        else
        {
          *(_BYTE *)(a1 + 88) = 0;
          *(_BYTE *)(a1 + 111) = 0;
        }
        turi::csv_writer::csv_print_internal(a1, (std::string *)(a1 + 88), (unsigned __int8 *)this);
        turi::escape_string((uint64_t *)(a1 + 88), *(_BYTE *)(a1 + 24), *(_BYTE *)(a1 + 25), *(char *)(a1 + 27), 1, *(unsigned __int8 *)(a1 + 26), (std::string *)(a1 + 112), (_QWORD *)(a1 + 136));
      }
      goto LABEL_119;
    case 7:
      if (*(_DWORD *)(a1 + 60) != 1)
        goto LABEL_119;
      v51[0].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 27);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v51, 1);
      v21 = *(char *)(a1 + 87);
      if (v21 >= 0)
        v22 = (std::string *)(a1 + 64);
      else
        v22 = *(std::string **)(a1 + 64);
      if (v21 >= 0)
        v23 = *(unsigned __int8 *)(a1 + 87);
      else
        v23 = *(_QWORD *)(a1 + 72);
      goto LABEL_22;
    default:
      if (*(_DWORD *)(a1 + 60) == 3)
      {
        switch(*((_BYTE *)this + 12))
        {
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)this + 8));
            break;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)this + 8));
            break;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)this + 8));
            break;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(this, v51);
            break;
          case 7:
            memset(v51, 0, 24);
            break;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            break;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)this + 8));
            break;
          default:
            turi::apply_binary_op_ff();
        }
        if ((v51[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = v51;
        else
          v34 = (std::string *)v51[0].__r_.__value_.__r.__words[0];
        if ((v51[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = HIBYTE(v51[0].__r_.__value_.__r.__words[2]);
        else
          v35 = v51[0].__r_.__value_.__l.__size_;
LABEL_135:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v34, v35);
        if (SHIBYTE(v51[0].__r_.__value_.__r.__words[2]) < 0)
        {
          v44 = (void *)v51[0].__r_.__value_.__r.__words[0];
LABEL_173:
          operator delete(v44);
        }
      }
      else
      {
        v51[0].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 27);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v51, 1);
        switch(*((_BYTE *)this + 12))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_139;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_139:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v51);
            break;
          case 2:
            v45 = *(_QWORD *)this;
            if (*(char *)(*(_QWORD *)this + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v45 + 8), *(_QWORD *)(v45 + 16));
            }
            else
            {
              v46 = *(_OWORD *)(v45 + 8);
              __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v45 + 24);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
            }
            break;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(*(_QWORD *)this + 8));
            break;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (uint64_t *)(*(_QWORD *)this + 8));
            break;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(*(_QWORD *)this + 8));
            break;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(this, &__p);
            break;
          case 7:
            memset(&__p, 0, sizeof(__p));
            break;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            break;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(*(_QWORD *)this + 8));
            break;
          default:
            turi::apply_binary_op_ff();
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
LABEL_170:
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
        v51[0].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v51, 1);
LABEL_171:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v44 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_173;
        }
      }
      return;
  }
}

void sub_218128B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void turi::csv_writer::csv_print_internal(uint64_t a1, std::string *a2, unsigned __int8 *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::string::size_type v12;
  std::string::size_type v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::string::size_type v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::string::size_type v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::string::size_type v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::string::size_type v37;
  uint64_t v38;
  _QWORD *v39;
  std::string *p_dst;
  std::string::size_type size;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  std::string *v46;
  std::string::value_type v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  std::string::size_type v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  void **v55;
  std::string *v56;
  std::string::size_type v57;
  void **v58[2];
  unsigned __int8 v59;
  std::string __dst;
  uint64_t v61;
  void *__p;
  char v63;
  _QWORD v64[20];

  v64[19] = *MEMORY[0x24BDAC8D0];
  v5 = a3[12];
  switch(a3[12])
  {
    case 0u:
    case 1u:
      if (v5 == 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__dst);
        std::ostream::operator<<();
        std::stringbuf::str();
      }
      else
      {
        if (a3[12])
          turi::apply_binary_op_ff();
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__dst);
        std::ostream::operator<<();
        std::stringbuf::str();
      }
      __dst.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
      v52 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words
                                + *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      __dst.__r_.__value_.__r.__words[2] = v52;
      v61 = MEMORY[0x24BEDB848] + 16;
      if (v63 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](v64);
      if ((v59 & 0x80u) == 0)
        v53 = (const std::string::value_type *)v58;
      else
        v53 = (const std::string::value_type *)v58[0];
      if ((v59 & 0x80u) == 0)
        v54 = v59;
      else
        v54 = (std::string::size_type)v58[1];
      std::string::append(a2, v53, v54);
      if ((char)v59 < 0)
      {
        v55 = v58[0];
        goto LABEL_105;
      }
      return;
    case 2u:
      v39 = (_QWORD *)(a1 + 144);
      turi::escape_string((uint64_t *)(*(_QWORD *)a3 + 8), *(_BYTE *)(a1 + 24), *(_BYTE *)(a1 + 25), *(char *)(a1 + 27), 1, 0, (std::string *)(a1 + 144), (_QWORD *)(a1 + 168));
      if (*(char *)(a1 + 167) < 0)
        v39 = (_QWORD *)*v39;
      std::string::basic_string[abi:ne180100](&__dst, v39, *(_QWORD *)(a1 + 168));
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = &__dst;
      else
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
      goto LABEL_61;
    case 3u:
      std::string::push_back(a2, 91);
      v7 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      if (*(_QWORD *)(*(_QWORD *)a3 + 16) != v7)
      {
        v8 = 0;
        do
        {
          turi::flexible_type::flexible_type<double>((uint64_t)&__dst, (_QWORD *)(v7 + 8 * v8));
          turi::csv_writer::csv_print_internal(a1, a2, &__dst);
          switch(__dst.__r_.__value_.__s.__data_[12])
          {
            case 2:
              v9 = (unint64_t *)__dst.__r_.__value_.__r.__words[0];
              do
              {
                v10 = __ldaxr(v9);
                v11 = v10 - 1;
              }
              while (__stlxr(v11, v9));
              if (!v11)
              {
                v12 = __dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0])
                {
                  if (*(char *)(__dst.__r_.__value_.__r.__words[0] + 31) < 0)
                    operator delete(*(void **)(__dst.__r_.__value_.__r.__words[0] + 8));
                  v13 = v12;
                  v14 = 0x1012C404EF22A49;
                  goto LABEL_48;
                }
              }
              break;
            case 3:
              v26 = (unint64_t *)__dst.__r_.__value_.__r.__words[0];
              do
              {
                v27 = __ldaxr(v26);
                v28 = v27 - 1;
              }
              while (__stlxr(v28, v26));
              if (!v28)
              {
                v29 = __dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0])
                {
                  v30 = *(void **)(__dst.__r_.__value_.__r.__words[0] + 8);
                  if (v30)
                  {
                    *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 16) = v30;
                    operator delete(v30);
                  }
                  v13 = v29;
                  v14 = 0x1080C409938AC02;
                  goto LABEL_48;
                }
              }
              break;
            case 4:
              v15 = (unint64_t *)__dst.__r_.__value_.__r.__words[0];
              do
              {
                v16 = __ldaxr(v15);
                v17 = v16 - 1;
              }
              while (__stlxr(v17, v15));
              if (!v17)
              {
                v18 = __dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0])
                {
                  v58[0] = (void **)(__dst.__r_.__value_.__r.__words[0] + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v58);
                  goto LABEL_41;
                }
              }
              break;
            case 5:
              v31 = (unint64_t *)__dst.__r_.__value_.__r.__words[0];
              do
              {
                v32 = __ldaxr(v31);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, v31));
              if (!v33)
              {
                v18 = __dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0])
                {
                  v58[0] = (void **)(__dst.__r_.__value_.__r.__words[0] + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v58);
LABEL_41:
                  v13 = v18;
                  v14 = 0x1020C405E66F15BLL;
                  goto LABEL_48;
                }
              }
              break;
            case 8:
              v34 = (unint64_t *)__dst.__r_.__value_.__r.__words[0];
              do
              {
                v35 = __ldaxr(v34);
                v36 = v35 - 1;
              }
              while (__stlxr(v36, v34));
              if (!v36)
              {
                v37 = __dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0])
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(__dst.__r_.__value_.__r.__words[0] + 16));
                  v13 = v37;
                  v25 = -235920773;
                  goto LABEL_47;
                }
              }
              break;
            case 9:
              v19 = (unint64_t *)__dst.__r_.__value_.__r.__words[0];
              do
              {
                v20 = __ldaxr(v19);
                v21 = v20 - 1;
              }
              while (__stlxr(v21, v19));
              if (!v21)
              {
                v22 = __dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0])
                {
                  v23 = *(void **)(__dst.__r_.__value_.__r.__words[0] + 48);
                  if (v23)
                  {
                    *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 56) = v23;
                    operator delete(v23);
                  }
                  v24 = *(void **)(v22 + 24);
                  if (v24)
                  {
                    *(_QWORD *)(v22 + 32) = v24;
                    operator delete(v24);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
                  v13 = v22;
                  v25 = 2071181815;
LABEL_47:
                  v14 = v25 | 0x1030C4000000000;
LABEL_48:
                  MEMORY[0x219A19A08](v13, v14);
                }
              }
              break;
            default:
              break;
          }
          ++v8;
          v7 = *(_QWORD *)(*(_QWORD *)a3 + 8);
          v38 = *(_QWORD *)(*(_QWORD *)a3 + 16) - v7;
          if (v8 < v38 >> 3)
          {
            std::string::push_back(a2, 44);
            v7 = *(_QWORD *)(*(_QWORD *)a3 + 8);
            v38 = *(_QWORD *)(*(_QWORD *)a3 + 16) - v7;
          }
        }
        while (v8 < v38 >> 3);
      }
      std::string::push_back(a2, 93);
      return;
    case 4u:
      std::string::push_back(a2, 91);
      v42 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      if (*(_QWORD *)(*(_QWORD *)a3 + 16) != v42)
      {
        v43 = 0;
        v44 = 0;
        do
        {
          turi::csv_writer::csv_print_internal(a1, a2, v42 + v43);
          ++v44;
          v42 = *(_QWORD *)(*(_QWORD *)a3 + 8);
          v45 = *(_QWORD *)(*(_QWORD *)a3 + 16) - v42;
          if (v44 < v45 >> 4)
          {
            std::string::push_back(a2, 44);
            v42 = *(_QWORD *)(*(_QWORD *)a3 + 8);
            v45 = *(_QWORD *)(*(_QWORD *)a3 + 16) - v42;
          }
          v43 += 16;
        }
        while (v44 < v45 >> 4);
      }
      v46 = a2;
      v47 = 93;
      goto LABEL_80;
    case 5u:
      std::string::push_back(a2, 123);
      v48 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      if (*(_QWORD *)(*(_QWORD *)a3 + 16) != v48)
      {
        v49 = 0;
        v50 = 0;
        do
        {
          turi::csv_writer::csv_print_internal(a1, a2, v48 + v49);
          std::string::push_back(a2, 58);
          turi::csv_writer::csv_print_internal(a1, a2, *(_QWORD *)(*(_QWORD *)a3 + 8) + v49 + 16);
          ++v50;
          v48 = *(_QWORD *)(*(_QWORD *)a3 + 8);
          v51 = *(_QWORD *)(*(_QWORD *)a3 + 16) - v48;
          if (v50 < v51 >> 5)
          {
            std::string::push_back(a2, 44);
            v48 = *(_QWORD *)(*(_QWORD *)a3 + 8);
            v51 = *(_QWORD *)(*(_QWORD *)a3 + 16) - v48;
          }
          v49 += 32;
        }
        while (v50 < v51 >> 5);
      }
      v46 = a2;
      v47 = 125;
LABEL_80:
      std::string::push_back(v46, v47);
      return;
    case 6u:
      turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)a3, &__dst);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = &__dst;
      else
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
LABEL_61:
      std::string::append(a2, (const std::string::value_type *)p_dst, size);
      goto LABEL_103;
    case 7u:
      return;
    default:
      if (v5 == 8)
      {
        turi::flexible_type_impl::get_string_visitor::operator()();
      }
      else
      {
        if (v5 != 9)
          turi::apply_binary_op_ff();
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v58, (_QWORD *)(*(_QWORD *)a3 + 8));
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &__dst;
      else
        v56 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v57 = __dst.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)v56, v57);
LABEL_103:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        v55 = (void **)__dst.__r_.__value_.__r.__words[0];
LABEL_105:
        operator delete(v55);
      }
      return;
  }
}

void sub_218129288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, int a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *turi::csv_writer::write(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *a3;
  v6 = a3[1] - *a3;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      turi::csv_writer::csv_print(a1, a2, (turi::flexible_type_impl *)(v5 + v8), (unint64_t)v6 > 0x10);
      ++v9;
      v5 = *a3;
      v6 = a3[1] - *a3;
      if (v9 < v6 >> 4)
      {
        v10 = *(char *)(a1 + 23);
        if (v10 >= 0)
          v11 = a1;
        else
          v11 = *(_QWORD *)a1;
        if (v10 >= 0)
          v12 = *(unsigned __int8 *)(a1 + 23);
        else
          v12 = *(_QWORD *)(a1 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v11, v12);
        v5 = *a3;
        v6 = a3[1] - *a3;
      }
      v8 += 16;
    }
    while (v9 < v6 >> 4);
  }
  v15 = *(_QWORD *)(a1 + 32);
  v14 = a1 + 32;
  v13 = v15;
  v16 = *(char *)(v14 + 23);
  if (v16 >= 0)
    v17 = v14;
  else
    v17 = v13;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(v14 + 23);
  else
    v18 = *(_QWORD *)(v14 + 8);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v17, v18);
}

uint64_t _GLOBAL__sub_I_csv_writer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_21812957C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lcast_put_unsigned<std::char_traits<char>,unsigned long,char>::convert(uint64_t a1)
{
  const std::locale *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  unint64_t v8;
  char *p_p;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t *v13;
  int v14;
  char v15;
  void **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *__p;
  unint64_t v26;
  unsigned __int8 v27;
  std::locale v28;

  MEMORY[0x219A19828](&v28);
  v2 = std::locale::classic();
  if (std::locale::operator==(&v28, v2))
  {
    v3 = *(_QWORD *)a1;
    do
    {
      v4 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v4 - 1;
      *(_BYTE *)(v4 - 1) = *(_DWORD *)(a1 + 20)
                         + v3
                         - 10 * (((v3 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
      v5 = *(_QWORD *)a1;
      v3 = *(_QWORD *)a1 / 0xAuLL;
      *(_QWORD *)a1 = v3;
    }
    while (v5 > 9);
    v6 = *(_QWORD *)(a1 + 8);
    goto LABEL_28;
  }
  v7 = std::locale::use_facet(&v28, MEMORY[0x24BEDB588]);
  ((void (*)(void **__return_ptr))v7->__vftable[1].__on_zero_shared)(&__p);
  if ((char)v27 < 0)
  {
    v8 = v26;
    if (!v26)
      goto LABEL_24;
    p_p = (char *)__p;
  }
  else
  {
    v8 = v27;
    if (!v27)
      goto LABEL_24;
    p_p = (char *)&__p;
  }
  if (*p_p > 0)
  {
    v10 = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[1].~facet_0)(v7);
    v11 = 0;
    v12 = __p;
    if ((v27 & 0x80u) == 0)
      v12 = &__p;
    v13 = (uint64_t *)(a1 + 8);
    LOBYTE(v14) = *v12;
    v15 = *v12;
    do
    {
      if (!v15)
      {
        if (++v11 < v8)
        {
          v16 = (v27 & 0x80u) == 0 ? &__p : (void **)__p;
          v14 = *((char *)v16 + v11);
          if (v14 < 1)
            LOBYTE(v14) = 127;
        }
        v17 = (_BYTE *)(*v13 - 1);
        *v13 = (uint64_t)v17;
        *v17 = v10;
        v15 = v14;
      }
      --v15;
      v19 = *(_QWORD *)a1;
      v18 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v18 - 1;
      *(_BYTE *)(v18 - 1) = *(_DWORD *)(a1 + 20)
                          + v19
                          - 10 * (((v19 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
      v20 = *(_QWORD *)a1;
      *(_QWORD *)a1 /= 0xAuLL;
    }
    while (v20 > 9);
    goto LABEL_26;
  }
LABEL_24:
  v13 = (uint64_t *)(a1 + 8);
  v21 = *(_QWORD *)a1;
  do
  {
    v22 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v22 - 1;
    *(_BYTE *)(v22 - 1) = *(_DWORD *)(a1 + 20)
                        + v21
                        - 10 * (((v21 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
    v23 = *(_QWORD *)a1;
    v21 = *(_QWORD *)a1 / 0xAuLL;
    *(_QWORD *)a1 = v21;
  }
  while (v23 > 9);
LABEL_26:
  v6 = *v13;
  if ((char)v27 < 0)
    operator delete(__p);
LABEL_28:
  std::locale::~locale(&v28);
  return v6;
}

void sub_2181297C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_dataframe_cpp()
{
  uint64_t result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  boost::spirit::lit = 0;
  boost::spirit::bin = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::stream = 0;
  boost::spirit::wstream = 0;
  boost::spirit::left_align = 0;
  boost::spirit::right_align = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::token = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_token = 0;
  boost::spirit::tokenid_mask = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  return result;
}

void turi::get_builtin_group_aggregator(std::string *a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  BOOL v5;
  std::string::size_type size;
  BOOL v8;
  std::string::__raw *v15;
  std::string::size_type v18;
  std::string::size_type v19;
  uint64_t v20;
  _QWORD *v23;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::string::size_type v39;
  std::string *v40;
  _QWORD *v41;
  _QWORD *v42;
  double v43;
  double *v44;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _OWORD v49[2];
  int v50;
  _OWORD v51[2];
  int v52;
  void *__p[2];
  char v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  char *v58;
  char *v59;
  uint64_t v60;
  std::string v61;
  _OWORD v62[2];
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v4 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a1->__r_.__value_.__l.__size_;
    if (size != 16
      || (*(_QWORD *)a1->__r_.__value_.__l.__data_ == 0x69746C6975625F5FLL
        ? (v8 = *(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 8) == 0x5F5F6D75735F5F6ELL)
        : (v8 = 0),
          !v8))
    {
      if (size == 24)
      {
        if (*(_QWORD *)a1->__r_.__value_.__l.__data_ == 0x69746C6975625F5FLL
          && *(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 8) == 0x6F746365765F5F6ELL
          && *(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 16) == 0x5F5F6D75735F5F72)
        {
          goto LABEL_83;
        }
        size = a1->__r_.__value_.__l.__size_;
      }
      if (size == 16)
      {
        if (*(_QWORD *)a1->__r_.__value_.__l.__data_ == 0x69746C6975625F5FLL
          && *(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 8) == 0x5F5F78616D5F5F6ELL)
        {
          goto LABEL_86;
        }
        size = a1->__r_.__value_.__l.__size_;
        if (size == 16)
        {
          if (*(_QWORD *)a1->__r_.__value_.__l.__data_ == 0x69746C6975625F5FLL
            && *(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 8) == 0x5F5F6E696D5F5F6ELL)
          {
            goto LABEL_91;
          }
          if ((v4 & 0x80) == 0)
            goto LABEL_77;
        }
      }
      if (size != 19)
        goto LABEL_77;
      if (*(_QWORD *)a1->__r_.__value_.__l.__data_ != 0x69746C6975625F5FLL
        || *(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 8) != 0x696D6772615F5F6ELL
        || *(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 11) != 0x5F5F6E696D677261)
      {
        if (a1->__r_.__value_.__l.__size_ != 19)
          goto LABEL_77;
        v15 = (std::string::__raw *)a1->__r_.__value_.__r.__words[0];
LABEL_56:
        v18 = v15->__words[0];
        v19 = v15->__words[1];
        v20 = *(std::string::size_type *)((char *)&v15->__words[1] + 3);
        if (v18 == 0x69746C6975625F5FLL && v19 == 0x616D6772615F5F6ELL && v20 == 0x5F5F78616D677261)
        {
          v23 = operator new(0x40uLL);
          v23[2] = 0;
          *v23 = &unk_24D92FE30;
          v23[1] = 0;
          v23[6] = 0;
          v23[7] = 0;
          v23[4] = 0;
          v23[5] = 0;
          *((_BYTE *)v23 + 56) = 0;
          a2[1] = v23;
          v23[3] = &unk_24D92FE80;
          *a2 = v23 + 3;
          v55 = 0uLL;
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
          return;
        }
        goto LABEL_77;
      }
      goto LABEL_85;
    }
LABEL_84:
    v31 = operator new(0x30uLL);
    v31[2] = 0;
    *v31 = &unk_24D92F970;
    v31[1] = 0;
LABEL_92:
    v33 = v32 + 16;
    v31[4] = 0;
    v31[5] = 0;
    goto LABEL_93;
  }
  if (v4 != 16)
  {
    if (v4 != 19)
    {
      if (v4 != 24)
        goto LABEL_77;
      v5 = a1->__r_.__value_.__r.__words[0] == 0x69746C6975625F5FLL
        && a1->__r_.__value_.__l.__size_ == 0x6F746365765F5F6ELL;
      if (!v5 || a1->__r_.__value_.__r.__words[2] != 0x5F5F6D75735F5F72)
        goto LABEL_77;
LABEL_83:
      v30 = operator new(0x38uLL);
      v30[2] = 0;
      *v30 = &unk_24D92FA70;
      v30[1] = 0;
      std::allocator<turi::groupby_operators::vector_sum>::construct[abi:ne180100]<turi::groupby_operators::vector_sum>((uint64_t)&v55, (uint64_t)(v30 + 3));
      *a2 = v30 + 3;
      a2[1] = v30;
      return;
    }
    if (a1->__r_.__value_.__r.__words[0] != 0x69746C6975625F5FLL
      || a1->__r_.__value_.__l.__size_ != 0x696D6772615F5F6ELL
      || *(std::string::size_type *)((char *)&a1->__r_.__value_.__r.__words[1] + 3) != 0x5F5F6E696D677261)
    {
      v15 = (std::string::__raw *)a1;
      goto LABEL_56;
    }
LABEL_85:
    v31 = operator new(0x40uLL);
    v31[2] = 0;
    *v31 = &unk_24D92FD40;
    v31[1] = 0;
    v33 = &unk_24D92FD90;
    v31[6] = 0;
    v31[7] = 0;
    v31[4] = 0;
    v31[5] = 0;
    *((_BYTE *)v31 + 56) = 0;
LABEL_93:
    a2[1] = v31;
    v31[3] = v33;
    *a2 = v31 + 3;
    return;
  }
  if (a1->__r_.__value_.__r.__words[0] == 0x69746C6975625F5FLL && a1->__r_.__value_.__l.__size_ == 0x5F5F6D75735F5F6ELL)
    goto LABEL_84;
  if (a1->__r_.__value_.__r.__words[0] == 0x69746C6975625F5FLL && a1->__r_.__value_.__l.__size_ == 0x5F5F78616D5F5F6ELL)
  {
LABEL_86:
    v31 = operator new(0x38uLL);
    v31[2] = 0;
    *v31 = &unk_24D92FB60;
    v31[1] = 0;
    v31[6] = 0;
    goto LABEL_92;
  }
  if (a1->__r_.__value_.__r.__words[0] == 0x69746C6975625F5FLL && a1->__r_.__value_.__l.__size_ == 0x5F5F6E696D5F5F6ELL)
  {
LABEL_91:
    v31 = operator new(0x38uLL);
    v31[2] = 0;
    *v31 = &unk_24D92FC50;
    v31[1] = 0;
    v31[6] = 0;
    goto LABEL_92;
  }
LABEL_77:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__count__"))
  {
    v27 = operator new(0x28uLL);
    v27[2] = 0;
    *v27 = &unk_24D92FF20;
    v27[1] = 0;
    v27[4] = 0;
    a2[1] = v27;
    v27[3] = &unk_24D92FF70;
    *a2 = v27 + 3;
    v55 = 0uLL;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__nonnull__count__"))
  {
    v28 = operator new(0x28uLL);
    v28[2] = 0;
    *v28 = &unk_24D930010;
    v28[1] = 0;
    v28[4] = 0;
    a2[1] = v28;
    v28[3] = &unk_24D930060;
    *a2 = v28 + 3;
    v55 = 0uLL;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__avg__"))
  {
    v29 = operator new(0x30uLL);
    v29[2] = 0;
    *v29 = &unk_24D930100;
    v29[1] = 0;
    v29[4] = 0;
    v29[5] = 0;
    a2[1] = v29;
    v29[3] = &unk_24D930150;
    *a2 = v29 + 3;
    v55 = 0uLL;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__vector__avg__"))
  {
    _ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators14vector_averageEJEvEENS_10shared_ptrIT_EEDpOT0_(&v55);
    *(_OWORD *)a2 = v55;
    v55 = 0uLL;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__var__"))
  {
    v34 = operator new(0x38uLL);
    v34[2] = 0;
    *v34 = &unk_24D9302E0;
    v34[1] = 0;
    v34[5] = 0;
    v34[6] = 0;
    v34[4] = 0;
    a2[1] = v34;
    v34[3] = &unk_24D930330;
    *a2 = v34 + 3;
    v55 = 0uLL;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__stdv__"))
  {
    v35 = operator new(0x38uLL);
    v35[2] = 0;
    *v35 = &unk_24D9303D0;
    v35[1] = 0;
    v35[5] = 0;
    v35[6] = 0;
    v35[4] = 0;
    a2[1] = v35;
    v35[3] = &unk_24D930420;
    *a2 = v35 + 3;
    v55 = 0uLL;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__select_one__"))
  {
    v36 = operator new(0x38uLL);
    v36[2] = 0;
    *v36 = &unk_24D9304C0;
    v36[1] = 0;
    v36[6] = 0;
    v36[4] = 0;
    v36[5] = 0;
    a2[1] = v36;
    v36[3] = &unk_24D930510;
    *a2 = v36 + 3;
    v55 = 0uLL;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  }
  else if (boost::algorithm::starts_with<std::string,char [26]>((unsigned __int8 *)a1, "__builtin__concat__dict__"))
  {
    v37 = operator new(0x40uLL);
    v37[2] = 0;
    *v37 = &unk_24D9305B0;
    v37[1] = 0;
    v37[6] = 0;
    v37[7] = 0;
    v37[5] = 0;
    v37[4] = v37 + 5;
    a2[1] = v37;
    v37[3] = &unk_24D930600;
    *a2 = v37 + 3;
    v55 = 0uLL;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  }
  else if (boost::algorithm::starts_with<std::string,char [26]>((unsigned __int8 *)a1, "__builtin__concat__list__"))
  {
    v38 = operator new(0x40uLL);
    v38[2] = 0;
    *v38 = &unk_24D9306A0;
    v38[1] = 0;
    v38[6] = 0;
    v38[7] = 0;
    v38[4] = 0;
    v38[5] = 0;
    *((_BYTE *)v38 + 56) = 0;
    a2[1] = v38;
    v38[3] = &unk_24D9306F0;
    *a2 = v38 + 3;
    v55 = 0uLL;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  }
  else if (boost::algorithm::starts_with<std::string,char [26]>((unsigned __int8 *)a1, "__builtin__quantile__"))
  {
    std::string::basic_string(&v61, a1, 0x15uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v57 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, ",");
    memset(v62, 0, sizeof(v62));
    v63 = 1065353216;
    memset(v51, 0, sizeof(v51));
    v52 = 1065353216;
    memset(v49, 0, sizeof(v49));
    v50 = 1065353216;
    ((void (*)(__int128 *, void **, uint64_t, uint64_t, _OWORD *, _OWORD *, _OWORD *, _QWORD))turi::flexible_type_parser::flexible_type_parser)(&v55, __p, 1, 92, v62, v51, v49, 0);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v49);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v51);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v62);
    if (v54 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    {
      v39 = v61.__r_.__value_.__l.__size_;
      v40 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    else
    {
      v39 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      v40 = &v61;
    }
    *(_QWORD *)&v49[0] = v40;
    turi::flexible_type_parser::vector_parse((turi::flexible_type_parser *)&v55, (const char **)v49, v39, (_QWORD **)v62);
    *(_QWORD *)&v51[0] = &v58;
    *((_QWORD *)&v51[0] + 1) = &v57;
    std::tuple<std::vector<double> &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>((void ***)v51, (int *)v62, v43);
    std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)v62);
    if (!v57)
    {
      *(_QWORD *)&v62[0] = a1;
      turi::get_builtin_group_aggregator(std::string const&)::$_0::operator()();
    }
    v44 = (double *)v58;
    if (v58 != v59)
    {
      do
      {
        if (*v44 < 0.0 || *v44 > 1.0)
          turi::get_builtin_group_aggregator(std::string const&)::$_1::operator()();
        ++v44;
      }
      while (v44 != (double *)v59);
    }
    _ZNSt3__115allocate_sharedB8ne180100IN4turi17groupby_operators8quantileENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v62);
    v46 = *(_QWORD *)&v62[0];
    if ((char **)(*(_QWORD *)&v62[0] + 8) != &v58)
    {
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(*(_QWORD *)&v62[0] + 8), v58, (uint64_t)v59, (v59 - v58) >> 3);
      v46 = *(_QWORD *)&v62[0];
    }
    v47 = *((_QWORD *)&v62[0] + 1);
    *a2 = v46;
    a2[1] = v47;
    v62[0] = 0uLL;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v62);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v56);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
  }
  else if (boost::algorithm::starts_with<std::string,char [26]>((unsigned __int8 *)a1, "__builtin__count__distinct__"))
  {
    v41 = operator new(0x48uLL);
    v41[2] = 0;
    *v41 = &unk_24D930880;
    v41[1] = 0;
    v41[8] = 0;
    *((_OWORD *)v41 + 2) = 0u;
    *((_OWORD *)v41 + 3) = 0u;
    *((_DWORD *)v41 + 16) = 1065353216;
    a2[1] = v41;
    v41[3] = &unk_24D9308D0;
    *a2 = v41 + 3;
    v55 = 0uLL;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  }
  else if (boost::algorithm::starts_with<std::string,char [26]>((unsigned __int8 *)a1, "__builtin__distinct__"))
  {
    v42 = operator new(0x48uLL);
    v42[2] = 0;
    *v42 = &unk_24D930970;
    v42[1] = 0;
    v42[8] = 0;
    *((_OWORD *)v42 + 2) = 0u;
    *((_OWORD *)v42 + 3) = 0u;
    *((_DWORD *)v42 + 16) = 1065353216;
    a2[1] = v42;
    v42[3] = &unk_24D9309C0;
    *a2 = v42 + 3;
    v55 = 0uLL;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  }
  else
  {
    if (!boost::algorithm::starts_with<std::string,char [26]>((unsigned __int8 *)a1, "__builtin__freq_count__"))
    {
      *(_QWORD *)&v55 = a1;
      turi::get_builtin_group_aggregator(std::string const&)::$_2::operator()();
    }
    v48 = operator new(0x48uLL);
    v48[2] = 0;
    *v48 = &unk_24D930A60;
    v48[1] = 0;
    v48[8] = 0;
    *((_OWORD *)v48 + 2) = 0u;
    *((_OWORD *)v48 + 3) = 0u;
    *((_DWORD *)v48 + 16) = 1065353216;
    a2[1] = v48;
    v48[3] = &unk_24D930AB0;
    *a2 = v48 + 3;
    v55 = 0uLL;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  }
}

void sub_21812A4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v28 - 80);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  v30 = *(void **)(v28 - 128);
  if (v30)
  {
    *(_QWORD *)(v28 - 120) = v30;
    operator delete(v30);
  }
  if (*(char *)(v28 - 81) < 0)
    operator delete(*(void **)(v28 - 104));
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

_QWORD *_ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators14vector_averageEJEvEENS_10shared_ptrIT_EEDpOT0_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;
  char v4;

  v2 = operator new(0x40uLL);
  v2[2] = 0;
  *v2 = &unk_24D9301F0;
  v2[1] = 0;
  result = std::allocator<turi::groupby_operators::vector_average>::construct[abi:ne180100]<turi::groupby_operators::vector_average>((uint64_t)&v4, (uint64_t)(v2 + 3));
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

BOOL boost::algorithm::starts_with<std::string,char [26]>(unsigned __int8 *a1, char *__s)
{
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  char *v8;
  size_t v10;
  uint64_t v11;
  size_t v12;

  v3 = (char)a1[23];
  if (v3 >= 0)
    v4 = a1;
  else
    v4 = *(unsigned __int8 **)a1;
  if (v3 >= 0)
    v5 = a1[23];
  else
    v5 = *((_QWORD *)a1 + 1);
  v6 = strlen(__s);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  v8 = __s;
  if (v7)
    return v8 == &__s[v6];
  v10 = v6 - 1;
  v11 = v5 - 1;
  v8 = __s;
  while (*v4 == *v8)
  {
    ++v8;
    if (v11)
    {
      ++v4;
      v12 = v10--;
      --v11;
      if (v12)
        continue;
    }
    return v8 == &__s[v6];
  }
  return 0;
}

void ***std::tuple<std::vector<double> &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>(void ***a1, int *a2, double a3)
{
  uint64_t v5;
  double *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  std::string::size_type v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *size;
  unint64_t *v84;
  unint64_t v85;
  void **v86;
  void *v87;
  std::string __p;
  std::string::size_type v90;
  void *v91[5];
  void *v92;
  void *v93;
  uint64_t v94;
  void *p_p;
  uint64_t *v96;
  uint64_t v97;
  __int128 v98;
  double *v99;

  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v5 = *(_QWORD *)a2;
      v6 = (double *)operator new(8uLL);
      v7 = (double)v5;
      goto LABEL_19;
    case 1:
      v20 = *(_QWORD *)a2;
      v21 = operator new(8uLL);
      *(_QWORD *)&v98 = v21;
      *v21 = v20;
      v22 = (double *)(v21 + 1);
      goto LABEL_20;
    case 2:
      v15 = *(_QWORD *)a2;
      if (*(char *)(*(_QWORD *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
      }
      turi::flexible_type_fail(0);
      v98 = 0uLL;
      v99 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_93;
    case 3:
      v17 = *(_QWORD *)a2;
      v99 = 0;
      v98 = 0uLL;
      v18 = *(const void **)(v17 + 8);
      v19 = *(_QWORD *)(v17 + 16);
      goto LABEL_14;
    case 4:
      v8 = *(_QWORD *)a2;
      memset(&__p, 0, sizeof(__p));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v8 + 8), *(uint64_t **)(v8 + 16), (uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v98 = 0uLL;
      v99 = 0;
      p_p = &__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      goto LABEL_93;
    case 5:
      v23 = *(_QWORD *)a2;
      memset(&__p, 0, sizeof(__p));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v23 + 8), *(uint64_t **)(v23 + 16), (uint64_t)(*(_QWORD *)(v23 + 16) - *(_QWORD *)(v23 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v98 = 0uLL;
      v99 = 0;
      p_p = &__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      goto LABEL_93;
    case 6:
      v24 = *(_QWORD *)a2;
      v25 = a2[2];
      v6 = (double *)operator new(8uLL);
      v7 = (double)v25 / 1000000.0 + (double)(v24 << 8 >> 8);
LABEL_19:
      *(_QWORD *)&v98 = v6;
      *v6 = v7;
      v22 = v6 + 1;
LABEL_20:
      *((_QWORD *)&v98 + 1) = v22;
      v99 = v22;
      goto LABEL_93;
    case 7:
      v98 = 0uLL;
      v99 = 0;
      goto LABEL_93;
    case 8:
      turi::flexible_type_impl::get_vec_visitor::operator()((uint64_t *)(*(_QWORD *)a2 + 8), (double **)&v98, *(unint64_t *)&a3);
      goto LABEL_93;
    case 9:
      v9 = *(_QWORD *)a2;
      v10 = (_QWORD *)(*(_QWORD *)a2 + 8);
      if (*(_QWORD *)(*(_QWORD *)a2 + 72))
        goto LABEL_30;
      v12 = *(uint64_t **)(v9 + 24);
      v11 = *(uint64_t **)(v9 + 32);
      v13 = *(_QWORD **)(v9 + 8);
      if (v11 == v12 || v13 == 0)
      {
        v26 = 0;
      }
      else
      {
        v26 = 1;
        do
        {
          v27 = *v12++;
          v26 *= v27;
        }
        while (v12 != v11);
      }
      if (v26 != (uint64_t)(v13[1] - *v13) >> 3
        || turi::flexible_type_impl::ndarray<double>::last_index((_QWORD *)(*(_QWORD *)a2 + 8)) != (uint64_t)(*(_QWORD *)(*v10 + 8) - *(_QWORD *)*v10) >> 3)
      {
LABEL_30:
        if (!turi::flexible_type_impl::ndarray<double>::is_valid(v10))
          turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
        if (turi::flexible_type_impl::ndarray<double>::is_full(v10))
        {
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, (uint64_t)v10);
        }
        else
        {
          v98 = 0uLL;
          v99 = 0;
          p_p = 0;
          v96 = 0;
          v97 = 0;
          v92 = 0;
          v93 = 0;
          v94 = 0;
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, (uint64_t)&v98, (uint64_t)&p_p, (uint64_t)&v92, 0);
          if (v92)
          {
            v93 = v92;
            operator delete(v92);
          }
          if (p_p)
          {
            v96 = (uint64_t *)p_p;
            operator delete(p_p);
          }
          if ((_QWORD)v98)
          {
            *((_QWORD *)&v98 + 1) = v98;
            operator delete((void *)v98);
          }
          v91[3] = 0;
          if (&__p != (std::string *)(v9 + 8))
            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&__p.__r_.__value_.__s.__data_[16], *(char **)(v9 + 24), *(_QWORD *)(v9 + 32), (uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 3);
          v30 = *(uint64_t **)(v9 + 24);
          v29 = *(uint64_t **)(v9 + 32);
          if (v29 == v30 || !*v10)
          {
            v31 = 0;
          }
          else
          {
            v31 = 1;
            do
            {
              v32 = *v30++;
              v31 *= v32;
            }
            while (v30 != v29);
          }
          std::vector<double>::resize((uint64_t)__p.__r_.__value_.__l.__data_, v31);
          std::vector<unsigned long>::resize((uint64_t)v91, (uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 3);
          if (v90 != __p.__r_.__value_.__r.__words[2]
            && *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) != *(_QWORD *)__p.__r_.__value_.__l.__data_)
          {
            std::vector<std::pair<unsigned long,unsigned long>>::vector(&v98, (uint64_t)(*(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48)) >> 3);
            v33 = *(_QWORD *)(v9 + 48);
            v34 = *(_QWORD *)(v9 + 56);
            v35 = (unint64_t *)v98;
            v36 = v34 - v33;
            if (v34 != v33)
            {
              v37 = 0;
              v38 = v36 >> 3;
              if (v38 <= 1)
                v38 = 1;
              v39 = (_QWORD *)(v98 + 8);
              do
              {
                *(v39 - 1) = *(_QWORD *)(v33 + 8 * v37);
                *v39 = v37++;
                v39 += 2;
              }
              while (v38 != v37);
            }
            std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v98 + 1), *((unint64_t **)&v98 + 1), (uint64_t)v35, v35);
            v40 = v98;
            v41 = v91[0];
            *((_QWORD *)v91[0] + *(_QWORD *)(v98 + 8)) = 1;
            v42 = *(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48);
            if ((unint64_t)v42 >= 9)
            {
              v43 = v42 >> 3;
              v44 = __p.__r_.__value_.__r.__words[2];
              if (v43 <= 2)
                v43 = 2;
              v45 = (uint64_t *)(v40 + 24);
              v46 = v43 - 1;
              do
              {
                v47 = *(_QWORD *)(v44 + 8 * *(v45 - 2)) * v41[*(v45 - 2)];
                v48 = *v45;
                v45 += 2;
                v41[v48] = v47;
                --v46;
              }
              while (v46);
            }
            v49 = (uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 3;
            v92 = 0;
            std::vector<unsigned long>::vector(&p_p, v49, &v92);
            v50 = (uint64_t *)p_p;
            v51 = v96;
            v52 = (char *)v96 - (_BYTE *)p_p;
            v53 = ((char *)v96 - (_BYTE *)p_p) >> 3;
            v54 = v53 - 1;
            if (v53 <= 1)
              v55 = 1;
            else
              v55 = ((char *)v96 - (_BYTE *)p_p) >> 3;
            v56 = (uint64_t *)v91[0];
            v57 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
            do
            {
              if (v51 == v50)
              {
                v65 = 0;
                v66 = *(_QWORD *)(**(_QWORD **)(v9 + 8) + 8 * *(_QWORD *)(v9 + 72));
              }
              else
              {
                v58 = 0;
                v59 = *(uint64_t **)(v9 + 48);
                v60 = v50;
                v61 = v55;
                do
                {
                  v63 = *v60++;
                  v62 = v63;
                  v64 = *v59++;
                  v58 += v64 * v62;
                  --v61;
                }
                while (v61);
                v65 = 0;
                v66 = *(_QWORD *)(**(_QWORD **)(v9 + 8) + 8 * (*(_QWORD *)(v9 + 72) + v58));
                v67 = v50;
                v68 = v56;
                v69 = v55;
                do
                {
                  v71 = *v67++;
                  v70 = v71;
                  v72 = *v68++;
                  v65 += v72 * v70;
                  --v69;
                }
                while (v69);
              }
              *(_QWORD *)(v57 + 8 * v65) = v66;
              v73 = v53;
              v74 = v53 - 1;
              if (v52 >= 1)
              {
                v75 = *(_QWORD *)(v9 + 24);
                v76 = v50[v54] + 1;
                v50[v54] = v76;
                if (v76 >= *(_QWORD *)(v75 + 8 * v54))
                {
                  v77 = v75 - 16;
                  v78 = v53;
                  v79 = (unint64_t *)((char *)v50 + (v52 & 0xFFFFFFFFFFFFFFF8) - 16);
                  do
                  {
                    v80 = v78 - 1;
                    v79[1] = 0;
                    if ((uint64_t)(v78 - 1) <= 0)
                      goto LABEL_80;
                    v81 = *v79 + 1;
                    *v79-- = v81;
                    v82 = *(_QWORD *)(v77 + 8 * v78--);
                  }
                  while (v81 >= v82);
                  v74 = v80 - 1;
                  v73 = 1;
                }
                else
                {
                  v73 = 1;
                  v74 = v53 - 1;
                }
              }
            }
            while ((v74 & 0x8000000000000000) == 0 && v73);
            if (v50)
            {
LABEL_80:
              v96 = v50;
              operator delete(v50);
            }
            if ((_QWORD)v98)
            {
              *((_QWORD *)&v98 + 1) = v98;
              operator delete((void *)v98);
            }
          }
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)&__p);
        if (!turi::flexible_type_impl::ndarray<double>::is_full(&__p))
          turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
        v99 = 0;
        v98 = 0uLL;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v98, *(const void **)__p.__r_.__value_.__l.__data_, *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8), (uint64_t)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) - *(_QWORD *)__p.__r_.__value_.__l.__data_) >> 3);
        if (v91[0])
        {
          v91[1] = v91[0];
          operator delete(v91[0]);
        }
        if (__p.__r_.__value_.__r.__words[2])
        {
          v90 = __p.__r_.__value_.__r.__words[2];
          operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        }
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v84 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        goto LABEL_93;
      }
      if (!turi::flexible_type_impl::ndarray<double>::is_full(v10))
        turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
      v28 = *v10;
      v98 = 0uLL;
      v99 = 0;
      v18 = *(const void **)v28;
      v19 = *(_QWORD *)(v28 + 8);
LABEL_14:
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v98, v18, v19, (v19 - (uint64_t)v18) >> 3);
LABEL_93:
      v86 = *a1;
      v87 = **a1;
      if (v87)
      {
        v86[1] = v87;
        operator delete(v87);
        *v86 = 0;
        v86[1] = 0;
        v86[2] = 0;
      }
      *(_OWORD *)v86 = v98;
      v86[2] = v99;
      *(_BYTE *)a1[1] = *((_BYTE *)a2 + 16);
      return a1;
    default:
      turi::apply_binary_op_ff();
  }
}

void sub_21812AD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;

  v27 = *(void **)(v25 - 80);
  if (v27)
  {
    *(_QWORD *)(v25 - 72) = v27;
    operator delete(v27);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::groupby_operators::sum>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92F970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::sum>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92F970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::sum>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

uint64_t turi::groupby_operators::sum::new_instance(turi::groupby_operators::sum *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24D92F9C0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 20) = 0;
  turi::groupby_operators::sum::set_input_type(v2, *((char *)this + 20));
  return v2;
}

uint64_t turi::group_aggregate_value::add_element(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, *a2);
}

void turi::groupby_operators::sum::add_element_simple(turi::groupby_operators::sum *this, const turi::flexible_type *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  double v27;
  unint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void **v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  void **v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  BOOL v70;
  unint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  BOOL v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  _QWORD *v80;
  unint64_t v81;
  BOOL v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  void *v87;
  double *v88;
  uint64_t v89;
  double v90;
  unint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  BOOL v94;
  _QWORD *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  __int128 v106;
  __int128 v107;
  unint64_t v108;
  BOOL v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void **v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  unint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  double v148;
  unint64_t *v149;
  _QWORD *v150;
  unint64_t v151;
  unint64_t v152;
  void *v153;
  double *v154;
  uint64_t v155;
  unint64_t v156;
  double v157;
  _QWORD *v158;
  unint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int *v169;
  unsigned int v170;
  __int128 v171;
  __int128 v172;
  unint64_t v173;
  _QWORD *v174;
  unint64_t v175;
  _QWORD *v176;
  unint64_t v177;
  unint64_t *v178;
  _QWORD *v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t *v186;
  double v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  void **v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  unint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  double v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  unint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  _QWORD *v217;
  unsigned int v218;
  _QWORD *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  unsigned int v225;
  __int128 v226;
  __int128 v227;
  unint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  _QWORD *v231;
  unint64_t v232;
  _QWORD *v233;
  unint64_t v234;
  double v235;
  unint64_t *v236;
  _QWORD *v237;
  unint64_t v238;
  unint64_t v239;
  void *v240;
  uint64_t v241;
  double *v242;
  uint64_t v243;
  unint64_t v244;
  double *v245;
  double v246;
  _QWORD *v247;
  unint64_t v248;
  _QWORD *v249;
  unint64_t v250;
  _QWORD *v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int *v257;
  unsigned int v258;
  __int128 v259;
  __int128 v260;
  unint64_t v261;
  _QWORD *v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int *v267;
  unsigned int v268;
  __int128 v269;
  __int128 v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int *v275;
  unsigned int v276;
  __int128 v277;
  __int128 v278;
  unint64_t v279;
  _QWORD *v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int *v285;
  unsigned int v286;
  __int128 v287;
  __int128 v288;
  unint64_t v289;
  _QWORD *v290;
  unint64_t v291;
  _QWORD *v292;
  unint64_t v293;
  _QWORD *v294;
  unint64_t v295;
  _QWORD *v296;
  unint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  __int128 v304;
  __int128 v305;
  unint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int *v312;
  unsigned int v313;
  __int128 v314;
  __int128 v315;
  unint64_t v316;
  uint64_t v317;
  void **v318;
  void **v319;

  if (*((_BYTE *)a2 + 12) != 7)
  {
    v3 = (uint64_t *)((char *)this + 8);
    switch(*((_BYTE *)a2 + 12))
    {
      case 0:
        switch(*((_BYTE *)this + 20))
        {
          case 0:
            v4 = *v3 + *(_QWORD *)a2;
            goto LABEL_48;
          case 1:
            v148 = *(double *)v3 + (double)*(uint64_t *)a2;
            goto LABEL_335;
          case 2:
            v5 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v251 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v251, *v3);
            *v3 = (uint64_t)v251;
            *v251 = 1;
            do
            {
              v252 = __ldaxr((unint64_t *)v5);
              v8 = --v252 == 0;
            }
            while (__stlxr(v252, (unint64_t *)v5));
            goto LABEL_299;
          case 3:
            v149 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 != 1)
            {
              v150 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v150, *v3);
              *v3 = (uint64_t)v150;
              *v150 = 1;
              do
              {
                v151 = __ldaxr(v149);
                v152 = v151 - 1;
              }
              while (__stlxr(v152, v149));
              if (!v152)
              {
                v153 = (void *)v149[1];
                if (v153)
                {
                  v149[2] = (unint64_t)v153;
                  operator delete(v153);
                }
                MEMORY[0x219A19A08](v149, 0x1080C409938AC02);
              }
            }
            v154 = *(double **)(*v3 + 8);
            v155 = *(_QWORD *)(*v3 + 16) - (_QWORD)v154;
            if (v155)
            {
              v156 = v155 >> 3;
              v157 = (double)*(uint64_t *)a2;
              if (v156 <= 1)
                v156 = 1;
              do
              {
                *v154 = *v154 + v157;
                ++v154;
                --v156;
              }
              while (v156);
            }
            return;
          case 4:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v292 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v292, *v3);
            *v3 = (uint64_t)v292;
            *v292 = 1;
            do
            {
              v293 = __ldaxr((unint64_t *)v67);
              v94 = --v293 == 0;
            }
            while (__stlxr(v293, (unint64_t *)v67));
            goto LABEL_375;
          case 5:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v294 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v294, *v3);
            *v3 = (uint64_t)v294;
            *v294 = 1;
            do
            {
              v295 = __ldaxr((unint64_t *)v67);
              v70 = --v295 == 0;
            }
            while (__stlxr(v295, (unint64_t *)v67));
            goto LABEL_354;
          case 6:
            *v3 = *v3 & 0xFF00000000000000 | (*v3 + *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL;
            return;
          case 7:
            goto LABEL_391;
          case 8:
            v100 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v299 = operator new();
            v300 = *v3;
            *(_QWORD *)v299 = *(_QWORD *)*v3;
            *(_QWORD *)(v299 + 8) = *(_QWORD *)(v300 + 8);
            v301 = *(_QWORD *)(v300 + 16);
            *(_QWORD *)(v299 + 16) = v301;
            if (v301)
            {
              v302 = (unsigned int *)(v301 + 8);
              do
                v303 = __ldxr(v302);
              while (__stxr(v303 + 1, v302));
            }
            v304 = *(_OWORD *)(v300 + 24);
            v305 = *(_OWORD *)(v300 + 40);
            *(_OWORD *)(v299 + 56) = *(_OWORD *)(v300 + 56);
            *(_OWORD *)(v299 + 40) = v305;
            *(_OWORD *)(v299 + 24) = v304;
            *v3 = v299;
            *(_QWORD *)v299 = 1;
            do
            {
              v306 = __ldaxr((unint64_t *)v100);
              v109 = --v306 == 0;
            }
            while (__stlxr(v306, (unint64_t *)v100));
            goto LABEL_386;
          case 9:
            v178 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 != 1)
            {
              v179 = (_QWORD *)operator new();
              v180 = *v3 + 8;
              *v179 = *(_QWORD *)*v3;
              turi::flexible_type_impl::ndarray<double>::ndarray(v179 + 1, v180);
              *v3 = (uint64_t)v179;
              *v179 = 1;
              do
              {
                v181 = __ldaxr(v178);
                v182 = v181 - 1;
              }
              while (__stlxr(v182, v178));
              if (!v182)
              {
                v183 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v178);
                MEMORY[0x219A19A08](v183, 0x1030C407B73B9F7);
              }
            }
            v184 = (uint64_t *)*v3;
            v186 = *(uint64_t **)(*v3 + 24);
            v185 = *(uint64_t **)(*v3 + 32);
            if (v185 == v186)
              return;
            if (!v184[1])
              return;
            v187 = (double)*(uint64_t *)a2;
            v188 = 1;
            do
            {
              v189 = *v186++;
              v188 *= v189;
            }
            while (v186 != v185);
            if (!v188)
              return;
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v184 + 1);
            v190 = (v184[4] - v184[3]) >> 3;
            v317 = 0;
            std::vector<unsigned long>::vector(&v318, v190, &v317);
            v41 = v318;
            v191 = v319;
            break;
          default:
            turi::apply_binary_op_ff();
        }
        while (2)
        {
          v192 = 0;
          v193 = (char *)v191 - (char *)v41;
          if (v193)
          {
            v194 = v193 >> 3;
            v195 = (uint64_t *)v184[6];
            if (v194 <= 1)
              v194 = 1;
            do
            {
              v197 = (uint64_t)*v41++;
              v196 = v197;
              v198 = *v195++;
              v192 += v198 * v196;
              --v194;
            }
            while (v194);
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v184 + 1);
          *(double *)(*(_QWORD *)v184[1] + 8 * (v184[9] + v192)) = *(double *)(*(_QWORD *)v184[1] + 8 * (v184[9] + v192))
                                                                 + v187;
          v41 = v318;
          v191 = v319;
          v199 = v319 - v318;
          v200 = v199 - 1;
          if ((char *)v319 - (char *)v318 < 1)
            goto LABEL_235;
          v201 = v184[3];
          v202 = (char *)v318[v200] + 1;
          v318[v200] = v202;
          if ((unint64_t)v202 < *(_QWORD *)(v201 + 8 * v200))
          {
LABEL_234:
            v199 = 1;
LABEL_235:
            if (v200 < 0 || !v199)
              goto LABEL_237;
            continue;
          }
          break;
        }
        v203 = (unint64_t *)&v41[v199 - 2];
        v204 = v201 - 16;
        while (1)
        {
          v205 = v199 - 1;
          v203[1] = 0;
          if (v199 - 1 <= 0)
            goto LABEL_238;
          v206 = *v203 + 1;
          *v203-- = v206;
          v207 = *(_QWORD *)(v204 + 8 * v199--);
          if (v206 < v207)
          {
            v200 = v205 - 1;
            goto LABEL_234;
          }
        }
      case 1:
        switch(*((_BYTE *)this + 20))
        {
          case 0:
            v4 = (uint64_t)(*(double *)a2 + (double)*v3);
LABEL_48:
            *v3 = v4;
            return;
          case 1:
            v148 = *(double *)a2 + *(double *)v3;
LABEL_335:
            *(double *)v3 = v148;
            return;
          case 2:
            v5 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v176 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v176, *v3);
            *v3 = (uint64_t)v176;
            *v176 = 1;
            do
            {
              v177 = __ldaxr((unint64_t *)v5);
              v8 = --v177 == 0;
            }
            while (__stlxr(v177, (unint64_t *)v5));
            goto LABEL_299;
          case 3:
            v83 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 != 1)
            {
              v84 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v84, *v3);
              *v3 = (uint64_t)v84;
              *v84 = 1;
              do
              {
                v85 = __ldaxr(v83);
                v86 = v85 - 1;
              }
              while (__stlxr(v86, v83));
              if (!v86)
              {
                v87 = (void *)v83[1];
                if (v87)
                {
                  v83[2] = (unint64_t)v87;
                  operator delete(v87);
                }
                MEMORY[0x219A19A08](v83, 0x1080C409938AC02);
              }
            }
            v88 = *(double **)(*v3 + 8);
            v89 = *(_QWORD *)(*v3 + 16) - (_QWORD)v88;
            if (v89)
            {
              v90 = *(double *)a2;
              v91 = v89 >> 3;
              if (v91 <= 1)
                v91 = 1;
              do
              {
                *v88 = v90 + *v88;
                ++v88;
                --v91;
              }
              while (v91);
            }
            return;
          case 4:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v249 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v249, *v3);
            *v3 = (uint64_t)v249;
            *v249 = 1;
            do
            {
              v250 = __ldaxr((unint64_t *)v67);
              v94 = --v250 == 0;
            }
            while (__stlxr(v250, (unint64_t *)v67));
            goto LABEL_375;
          case 5:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v280 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v280, *v3);
            *v3 = (uint64_t)v280;
            *v280 = 1;
            do
            {
              v281 = __ldaxr((unint64_t *)v67);
              v70 = --v281 == 0;
            }
            while (__stlxr(v281, (unint64_t *)v67));
            goto LABEL_354;
          case 6:
            v208 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
            v209 = *((_QWORD *)this + 1);
            v210 = v209 + vcvtmd_s64_f64(*(double *)a2);
            *((_QWORD *)this + 1) = v209 & 0xFF00000000000000 | v210 & 0xFFFFFFFFFFFFFFLL;
            v211 = (uint64_t)v208 + *((int *)this + 4);
            if (v211 >= 1000000)
            {
              *v3 = (v210 + 1) & 0xFFFFFFFFFFFFFFLL | v209 & 0xFF00000000000000;
              LODWORD(v211) = v211 - 1000000;
            }
            if (v211 >= 0xF4240)
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            *((_DWORD *)this + 4) = v211;
            return;
          case 7:
            goto LABEL_391;
          case 8:
            v100 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v282 = operator new();
            v283 = *v3;
            *(_QWORD *)v282 = *(_QWORD *)*v3;
            *(_QWORD *)(v282 + 8) = *(_QWORD *)(v283 + 8);
            v284 = *(_QWORD *)(v283 + 16);
            *(_QWORD *)(v282 + 16) = v284;
            if (v284)
            {
              v285 = (unsigned int *)(v284 + 8);
              do
                v286 = __ldxr(v285);
              while (__stxr(v286 + 1, v285));
            }
            v287 = *(_OWORD *)(v283 + 24);
            v288 = *(_OWORD *)(v283 + 40);
            *(_OWORD *)(v282 + 56) = *(_OWORD *)(v283 + 56);
            *(_OWORD *)(v282 + 40) = v288;
            *(_OWORD *)(v282 + 24) = v287;
            *v3 = v282;
            *(_QWORD *)v282 = 1;
            do
            {
              v289 = __ldaxr((unint64_t *)v100);
              v109 = --v289 == 0;
            }
            while (__stlxr(v289, (unint64_t *)v100));
            goto LABEL_386;
          case 9:
            v116 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 != 1)
            {
              v117 = (_QWORD *)operator new();
              v118 = *v3 + 8;
              *v117 = *(_QWORD *)*v3;
              turi::flexible_type_impl::ndarray<double>::ndarray(v117 + 1, v118);
              *v3 = (uint64_t)v117;
              *v117 = 1;
              do
              {
                v119 = __ldaxr(v116);
                v120 = v119 - 1;
              }
              while (__stlxr(v120, v116));
              if (!v120)
              {
                v121 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v116);
                MEMORY[0x219A19A08](v121, 0x1030C407B73B9F7);
              }
            }
            v122 = (uint64_t *)*v3;
            v124 = *(uint64_t **)(*v3 + 24);
            v123 = *(uint64_t **)(*v3 + 32);
            if (v123 == v124)
              return;
            if (!v122[1])
              return;
            v125 = *(double *)a2;
            v126 = 1;
            do
            {
              v127 = *v124++;
              v126 *= v127;
            }
            while (v124 != v123);
            if (!v126)
              return;
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v122 + 1);
            v128 = (v122[4] - v122[3]) >> 3;
            v317 = 0;
            std::vector<unsigned long>::vector(&v318, v128, &v317);
            v41 = v318;
            v129 = v319;
            break;
          default:
            turi::apply_binary_op_ff();
        }
        while (2)
        {
          v130 = 0;
          v131 = (char *)v129 - (char *)v41;
          if (v131)
          {
            v132 = v131 >> 3;
            v133 = (uint64_t *)v122[6];
            if (v132 <= 1)
              v132 = 1;
            do
            {
              v135 = (uint64_t)*v41++;
              v134 = v135;
              v136 = *v133++;
              v130 += v136 * v134;
              --v132;
            }
            while (v132);
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v122 + 1);
          *(double *)(*(_QWORD *)v122[1] + 8 * (v122[9] + v130)) = v125
                                                                 + *(double *)(*(_QWORD *)v122[1] + 8 * (v122[9] + v130));
          v41 = v318;
          v129 = v319;
          v137 = v319 - v318;
          v138 = v137 - 1;
          if ((char *)v319 - (char *)v318 < 1)
            goto LABEL_162;
          v139 = v122[3];
          v140 = (char *)v318[v138] + 1;
          v318[v138] = v140;
          if ((unint64_t)v140 < *(_QWORD *)(v139 + 8 * v138))
          {
LABEL_161:
            v137 = 1;
LABEL_162:
            if (v138 < 0 || !v137)
              goto LABEL_237;
            continue;
          }
          break;
        }
        v141 = (unint64_t *)&v41[v137 - 2];
        v142 = v139 - 16;
        while (1)
        {
          v143 = v137 - 1;
          v141[1] = 0;
          if (v137 - 1 <= 0)
            goto LABEL_238;
          v144 = *v141 + 1;
          *v141-- = v144;
          v145 = *(_QWORD *)(v142 + 8 * v137--);
          if (v144 < v145)
          {
            v138 = v143 - 1;
            goto LABEL_161;
          }
        }
      case 2:
        switch(*((_BYTE *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_391;
          case 2:
            v13 = *(double *)a2;
            v14 = *v3;
            if (*(_QWORD *)*v3 != 1)
            {
              v15 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v15, *v3);
              *v3 = (uint64_t)v15;
              *v15 = 1;
              do
              {
                v16 = __ldaxr((unint64_t *)v14);
                v17 = v16 - 1;
              }
              while (__stlxr(v17, (unint64_t *)v14));
              if (!v17)
              {
                if (*(char *)(v14 + 31) < 0)
                  operator delete(*(void **)(v14 + 8));
                MEMORY[0x219A19A08](v14, 0x1012C404EF22A49);
              }
            }
            v18 = *(char *)(*(_QWORD *)&v13 + 31);
            if (v18 >= 0)
              v19 = (const std::string::value_type *)(*(_QWORD *)&v13 + 8);
            else
              v19 = *(const std::string::value_type **)(*(_QWORD *)&v13 + 8);
            if (v18 >= 0)
              v20 = *(unsigned __int8 *)(*(_QWORD *)&v13 + 31);
            else
              v20 = *(_QWORD *)(*(_QWORD *)&v13 + 16);
            std::string::append((std::string *)(*v3 + 8), v19, v20);
            return;
          case 3:
            v79 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v229 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v229, *v3);
            *v3 = (uint64_t)v229;
            *v229 = 1;
            do
            {
              v230 = __ldaxr(v79);
              v82 = --v230 == 0;
            }
            while (__stlxr(v230, v79));
            goto LABEL_360;
          case 4:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v233 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v233, *v3);
            *v3 = (uint64_t)v233;
            *v233 = 1;
            do
            {
              v234 = __ldaxr((unint64_t *)v67);
              v94 = --v234 == 0;
            }
            while (__stlxr(v234, (unint64_t *)v67));
            goto LABEL_375;
          case 5:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v162 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v162, *v3);
            *v3 = (uint64_t)v162;
            *v162 = 1;
            do
            {
              v163 = __ldaxr((unint64_t *)v67);
              v70 = --v163 == 0;
            }
            while (__stlxr(v163, (unint64_t *)v67));
            goto LABEL_354;
          case 8:
            v100 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v254 = operator new();
            v255 = *v3;
            *(_QWORD *)v254 = *(_QWORD *)*v3;
            *(_QWORD *)(v254 + 8) = *(_QWORD *)(v255 + 8);
            v256 = *(_QWORD *)(v255 + 16);
            *(_QWORD *)(v254 + 16) = v256;
            if (v256)
            {
              v257 = (unsigned int *)(v256 + 8);
              do
                v258 = __ldxr(v257);
              while (__stxr(v258 + 1, v257));
            }
            v259 = *(_OWORD *)(v255 + 24);
            v260 = *(_OWORD *)(v255 + 40);
            *(_OWORD *)(v254 + 56) = *(_OWORD *)(v255 + 56);
            *(_OWORD *)(v254 + 40) = v260;
            *(_OWORD *)(v254 + 24) = v259;
            *v3 = v254;
            *(_QWORD *)v254 = 1;
            do
            {
              v261 = __ldaxr((unint64_t *)v100);
              v109 = --v261 == 0;
            }
            while (__stlxr(v261, (unint64_t *)v100));
            goto LABEL_386;
          case 9:
            v71 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v97 = (_QWORD *)operator new();
            v98 = *v3 + 8;
            *v97 = *(_QWORD *)*v3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, v98);
            *v3 = (uint64_t)v97;
            *v97 = 1;
            do
            {
              v99 = __ldaxr(v71);
              v75 = --v99 == 0;
            }
            while (__stlxr(v99, v71));
            goto LABEL_250;
          default:
            turi::apply_binary_op_ff();
        }
      case 3:
        switch(*((_BYTE *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_391;
          case 2:
            v5 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v23 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v23, *v3);
            *v3 = (uint64_t)v23;
            *v23 = 1;
            do
            {
              v24 = __ldaxr((unint64_t *)v5);
              v8 = --v24 == 0;
            }
            while (__stlxr(v24, (unint64_t *)v5));
            goto LABEL_299;
          case 3:
            v235 = *(double *)a2;
            v236 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 != 1)
            {
              v237 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v237, *v3);
              *v3 = (uint64_t)v237;
              *v237 = 1;
              do
              {
                v238 = __ldaxr(v236);
                v239 = v238 - 1;
              }
              while (__stlxr(v239, v236));
              if (!v239)
              {
                v240 = (void *)v236[1];
                if (v240)
                {
                  v236[2] = (unint64_t)v240;
                  operator delete(v240);
                }
                MEMORY[0x219A19A08](v236, 0x1080C409938AC02);
              }
            }
            v241 = *v3;
            turi::flexible_type_fail(*(_QWORD *)(*v3 + 16) - *(_QWORD *)(*v3 + 8) == *(_QWORD *)(*(_QWORD *)&v235 + 16)
                                                                                   - *(_QWORD *)(*(_QWORD *)&v235 + 8));
            v242 = *(double **)(v241 + 8);
            v243 = *(_QWORD *)(v241 + 16) - (_QWORD)v242;
            if (v243)
            {
              v244 = v243 >> 3;
              v245 = *(double **)(*(_QWORD *)&v235 + 8);
              if (v244 <= 1)
                v244 = 1;
              do
              {
                v246 = *v245++;
                *v242 = v246 + *v242;
                ++v242;
                --v244;
              }
              while (v244);
            }
            return;
          case 4:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v262 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v262, *v3);
            *v3 = (uint64_t)v262;
            *v262 = 1;
            do
            {
              v263 = __ldaxr((unint64_t *)v67);
              v94 = --v263 == 0;
            }
            while (__stlxr(v263, (unint64_t *)v67));
            goto LABEL_375;
          case 5:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v174 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v174, *v3);
            *v3 = (uint64_t)v174;
            *v174 = 1;
            do
            {
              v175 = __ldaxr((unint64_t *)v67);
              v70 = --v175 == 0;
            }
            while (__stlxr(v175, (unint64_t *)v67));
            goto LABEL_354;
          case 8:
            v100 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v272 = operator new();
            v273 = *v3;
            *(_QWORD *)v272 = *(_QWORD *)*v3;
            *(_QWORD *)(v272 + 8) = *(_QWORD *)(v273 + 8);
            v274 = *(_QWORD *)(v273 + 16);
            *(_QWORD *)(v272 + 16) = v274;
            if (v274)
            {
              v275 = (unsigned int *)(v274 + 8);
              do
                v276 = __ldxr(v275);
              while (__stxr(v276 + 1, v275));
            }
            v277 = *(_OWORD *)(v273 + 24);
            v278 = *(_OWORD *)(v273 + 40);
            *(_OWORD *)(v272 + 56) = *(_OWORD *)(v273 + 56);
            *(_OWORD *)(v272 + 40) = v278;
            *(_OWORD *)(v272 + 24) = v277;
            *v3 = v272;
            *(_QWORD *)v272 = 1;
            do
            {
              v279 = __ldaxr((unint64_t *)v100);
              v109 = --v279 == 0;
            }
            while (__stlxr(v279, (unint64_t *)v100));
            goto LABEL_386;
          case 9:
            v71 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v113 = (_QWORD *)operator new();
            v114 = *v3 + 8;
            *v113 = *(_QWORD *)*v3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v113 + 1, v114);
            *v3 = (uint64_t)v113;
            *v113 = 1;
            do
            {
              v115 = __ldaxr(v71);
              v75 = --v115 == 0;
            }
            while (__stlxr(v115, v71));
            goto LABEL_250;
          default:
            turi::apply_binary_op_ff();
        }
      case 4:
        switch(*((_BYTE *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_391;
          case 2:
            v5 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v9 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v9, *v3);
            *v3 = (uint64_t)v9;
            *v9 = 1;
            do
            {
              v10 = __ldaxr((unint64_t *)v5);
              v8 = --v10 == 0;
            }
            while (__stlxr(v10, (unint64_t *)v5));
            goto LABEL_299;
          case 3:
            v79 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v158 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v158, *v3);
            *v3 = (uint64_t)v158;
            *v158 = 1;
            do
            {
              v159 = __ldaxr(v79);
              v82 = --v159 == 0;
            }
            while (__stlxr(v159, v79));
            goto LABEL_360;
          case 4:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v160 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v160, *v3);
            *v3 = (uint64_t)v160;
            *v160 = 1;
            do
            {
              v161 = __ldaxr((unint64_t *)v67);
              v94 = --v161 == 0;
            }
            while (__stlxr(v161, (unint64_t *)v67));
            goto LABEL_375;
          case 5:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v95 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v95, *v3);
            *v3 = (uint64_t)v95;
            *v95 = 1;
            do
            {
              v96 = __ldaxr((unint64_t *)v67);
              v70 = --v96 == 0;
            }
            while (__stlxr(v96, (unint64_t *)v67));
            goto LABEL_354;
          case 8:
            v100 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v166 = operator new();
            v167 = *v3;
            *(_QWORD *)v166 = *(_QWORD *)*v3;
            *(_QWORD *)(v166 + 8) = *(_QWORD *)(v167 + 8);
            v168 = *(_QWORD *)(v167 + 16);
            *(_QWORD *)(v166 + 16) = v168;
            if (v168)
            {
              v169 = (unsigned int *)(v168 + 8);
              do
                v170 = __ldxr(v169);
              while (__stxr(v170 + 1, v169));
            }
            v171 = *(_OWORD *)(v167 + 24);
            v172 = *(_OWORD *)(v167 + 40);
            *(_OWORD *)(v166 + 56) = *(_OWORD *)(v167 + 56);
            *(_OWORD *)(v166 + 40) = v172;
            *(_OWORD *)(v166 + 24) = v171;
            *v3 = v166;
            *(_QWORD *)v166 = 1;
            do
            {
              v173 = __ldaxr((unint64_t *)v100);
              v109 = --v173 == 0;
            }
            while (__stlxr(v173, (unint64_t *)v100));
            goto LABEL_386;
          case 9:
            v71 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v72 = (_QWORD *)operator new();
            v73 = *v3 + 8;
            *v72 = *(_QWORD *)*v3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v72 + 1, v73);
            *v3 = (uint64_t)v72;
            *v72 = 1;
            do
            {
              v74 = __ldaxr(v71);
              v75 = --v74 == 0;
            }
            while (__stlxr(v74, v71));
            goto LABEL_250;
          default:
            turi::apply_binary_op_ff();
        }
      case 5:
        switch(*((_BYTE *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_391;
          case 2:
            v5 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v11 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v11, *v3);
            *v3 = (uint64_t)v11;
            *v11 = 1;
            do
            {
              v12 = __ldaxr((unint64_t *)v5);
              v8 = --v12 == 0;
            }
            while (__stlxr(v12, (unint64_t *)v5));
            goto LABEL_299;
          case 3:
            v79 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v212 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v212, *v3);
            *v3 = (uint64_t)v212;
            *v212 = 1;
            do
            {
              v213 = __ldaxr(v79);
              v82 = --v213 == 0;
            }
            while (__stlxr(v213, v79));
            goto LABEL_360;
          case 4:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v219 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v219, *v3);
            *v3 = (uint64_t)v219;
            *v219 = 1;
            do
            {
              v220 = __ldaxr((unint64_t *)v67);
              v94 = --v220 == 0;
            }
            while (__stlxr(v220, (unint64_t *)v67));
            goto LABEL_375;
          case 5:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v146 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v146, *v3);
            *v3 = (uint64_t)v146;
            *v146 = 1;
            do
            {
              v147 = __ldaxr((unint64_t *)v67);
              v70 = --v147 == 0;
            }
            while (__stlxr(v147, (unint64_t *)v67));
            goto LABEL_354;
          case 8:
            v100 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v221 = operator new();
            v222 = *v3;
            *(_QWORD *)v221 = *(_QWORD *)*v3;
            *(_QWORD *)(v221 + 8) = *(_QWORD *)(v222 + 8);
            v223 = *(_QWORD *)(v222 + 16);
            *(_QWORD *)(v221 + 16) = v223;
            if (v223)
            {
              v224 = (unsigned int *)(v223 + 8);
              do
                v225 = __ldxr(v224);
              while (__stxr(v225 + 1, v224));
            }
            v226 = *(_OWORD *)(v222 + 24);
            v227 = *(_OWORD *)(v222 + 40);
            *(_OWORD *)(v221 + 56) = *(_OWORD *)(v222 + 56);
            *(_OWORD *)(v221 + 40) = v227;
            *(_OWORD *)(v221 + 24) = v226;
            *v3 = v221;
            *(_QWORD *)v221 = 1;
            do
            {
              v228 = __ldaxr((unint64_t *)v100);
              v109 = --v228 == 0;
            }
            while (__stlxr(v228, (unint64_t *)v100));
            goto LABEL_386;
          case 9:
            v71 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v76 = (_QWORD *)operator new();
            v77 = *v3 + 8;
            *v76 = *(_QWORD *)*v3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v76 + 1, v77);
            *v3 = (uint64_t)v76;
            *v76 = 1;
            do
            {
              v78 = __ldaxr(v71);
              v75 = --v78 == 0;
            }
            while (__stlxr(v78, v71));
            goto LABEL_250;
          default:
            turi::apply_binary_op_ff();
        }
      case 6:
        switch(*((_BYTE *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_391;
          case 2:
            v5 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v25 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v25, *v3);
            *v3 = (uint64_t)v25;
            *v25 = 1;
            do
            {
              v26 = __ldaxr((unint64_t *)v5);
              v8 = --v26 == 0;
            }
            while (__stlxr(v26, (unint64_t *)v5));
            goto LABEL_299;
          case 3:
            v79 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v296 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v296, *v3);
            *v3 = (uint64_t)v296;
            *v296 = 1;
            do
            {
              v297 = __ldaxr(v79);
              v82 = --v297 == 0;
            }
            while (__stlxr(v297, v79));
            goto LABEL_360;
          case 4:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v307 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v307, *v3);
            *v3 = (uint64_t)v307;
            *v307 = 1;
            do
            {
              v308 = __ldaxr((unint64_t *)v67);
              v94 = --v308 == 0;
            }
            while (__stlxr(v308, (unint64_t *)v67));
            goto LABEL_375;
          case 5:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v290 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v290, *v3);
            *v3 = (uint64_t)v290;
            *v290 = 1;
            do
            {
              v291 = __ldaxr((unint64_t *)v67);
              v70 = --v291 == 0;
            }
            while (__stlxr(v291, (unint64_t *)v67));
            goto LABEL_354;
          case 8:
            v100 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v309 = operator new();
            v310 = *v3;
            *(_QWORD *)v309 = *(_QWORD *)*v3;
            *(_QWORD *)(v309 + 8) = *(_QWORD *)(v310 + 8);
            v311 = *(_QWORD *)(v310 + 16);
            *(_QWORD *)(v309 + 16) = v311;
            if (v311)
            {
              v312 = (unsigned int *)(v311 + 8);
              do
                v313 = __ldxr(v312);
              while (__stxr(v313 + 1, v312));
            }
            v314 = *(_OWORD *)(v310 + 24);
            v315 = *(_OWORD *)(v310 + 40);
            *(_OWORD *)(v309 + 56) = *(_OWORD *)(v310 + 56);
            *(_OWORD *)(v309 + 40) = v315;
            *(_OWORD *)(v309 + 24) = v314;
            *v3 = v309;
            *(_QWORD *)v309 = 1;
            do
            {
              v316 = __ldaxr((unint64_t *)v100);
              v109 = --v316 == 0;
            }
            while (__stlxr(v316, (unint64_t *)v100));
            goto LABEL_386;
          case 9:
            v71 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v214 = (_QWORD *)operator new();
            v215 = *v3 + 8;
            *v214 = *(_QWORD *)*v3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v214 + 1, v215);
            *v3 = (uint64_t)v214;
            *v214 = 1;
            do
            {
              v216 = __ldaxr(v71);
              v75 = --v216 == 0;
            }
            while (__stlxr(v216, v71));
            goto LABEL_250;
          default:
            turi::apply_binary_op_ff();
        }
      case 8:
        switch(*((_BYTE *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_391;
          case 2:
            v5 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v21 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v21, *v3);
            *v3 = (uint64_t)v21;
            *v21 = 1;
            do
            {
              v22 = __ldaxr((unint64_t *)v5);
              v8 = --v22 == 0;
            }
            while (__stlxr(v22, (unint64_t *)v5));
            goto LABEL_299;
          case 3:
            v79 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v231 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v231, *v3);
            *v3 = (uint64_t)v231;
            *v231 = 1;
            do
            {
              v232 = __ldaxr(v79);
              v82 = --v232 == 0;
            }
            while (__stlxr(v232, v79));
            goto LABEL_360;
          case 4:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v247 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v247, *v3);
            *v3 = (uint64_t)v247;
            *v247 = 1;
            do
            {
              v248 = __ldaxr((unint64_t *)v67);
              v94 = --v248 == 0;
            }
            while (__stlxr(v248, (unint64_t *)v67));
            goto LABEL_375;
          case 5:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v164 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v164, *v3);
            *v3 = (uint64_t)v164;
            *v164 = 1;
            do
            {
              v165 = __ldaxr((unint64_t *)v67);
              v70 = --v165 == 0;
            }
            while (__stlxr(v165, (unint64_t *)v67));
            goto LABEL_354;
          case 8:
            v100 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v264 = operator new();
            v265 = *v3;
            *(_QWORD *)v264 = *(_QWORD *)*v3;
            *(_QWORD *)(v264 + 8) = *(_QWORD *)(v265 + 8);
            v266 = *(_QWORD *)(v265 + 16);
            *(_QWORD *)(v264 + 16) = v266;
            if (v266)
            {
              v267 = (unsigned int *)(v266 + 8);
              do
                v268 = __ldxr(v267);
              while (__stxr(v268 + 1, v267));
            }
            v269 = *(_OWORD *)(v265 + 24);
            v270 = *(_OWORD *)(v265 + 40);
            *(_OWORD *)(v264 + 56) = *(_OWORD *)(v265 + 56);
            *(_OWORD *)(v264 + 40) = v270;
            *(_OWORD *)(v264 + 24) = v269;
            *v3 = v264;
            *(_QWORD *)v264 = 1;
            do
            {
              v271 = __ldaxr((unint64_t *)v100);
              v109 = --v271 == 0;
            }
            while (__stlxr(v271, (unint64_t *)v100));
            goto LABEL_386;
          case 9:
            v71 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v110 = (_QWORD *)operator new();
            v111 = *v3 + 8;
            *v110 = *(_QWORD *)*v3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v110 + 1, v111);
            *v3 = (uint64_t)v110;
            *v110 = 1;
            do
            {
              v112 = __ldaxr(v71);
              v75 = --v112 == 0;
            }
            while (__stlxr(v112, v71));
LABEL_250:
            if (!v75)
              goto LABEL_391;
            v217 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v71);
            v218 = 2071181815;
            goto LABEL_389;
          default:
            turi::apply_binary_op_ff();
        }
      case 9:
        switch(*((_BYTE *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_391;
          case 2:
            v5 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v6 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v6, *v3);
            *v3 = (uint64_t)v6;
            *v6 = 1;
            do
            {
              v7 = __ldaxr((unint64_t *)v5);
              v8 = --v7 == 0;
            }
            while (__stlxr(v7, (unint64_t *)v5));
LABEL_299:
            if (!v8)
              goto LABEL_391;
            if (*(char *)(v5 + 31) < 0)
              operator delete(*(void **)(v5 + 8));
            v217 = (_QWORD *)v5;
            v253 = 0x1012C404EF22A49;
            goto LABEL_390;
          case 3:
            v79 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v80 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v80, *v3);
            *v3 = (uint64_t)v80;
            *v80 = 1;
            do
            {
              v81 = __ldaxr(v79);
              v82 = --v81 == 0;
            }
            while (__stlxr(v81, v79));
LABEL_360:
            if (!v82)
              goto LABEL_391;
            v298 = (void *)v79[1];
            if (v298)
            {
              v79[2] = (unint64_t)v298;
              operator delete(v298);
            }
            v217 = v79;
            v253 = 0x1080C409938AC02;
            goto LABEL_390;
          case 4:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v92 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v92, *v3);
            *v3 = (uint64_t)v92;
            *v92 = 1;
            do
            {
              v93 = __ldaxr((unint64_t *)v67);
              v94 = --v93 == 0;
            }
            while (__stlxr(v93, (unint64_t *)v67));
LABEL_375:
            if (!v94)
              goto LABEL_379;
            v318 = (void **)(v67 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v318);
            goto LABEL_378;
          case 5:
            v67 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_379;
            v68 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v68, *v3);
            *v3 = (uint64_t)v68;
            *v68 = 1;
            do
            {
              v69 = __ldaxr((unint64_t *)v67);
              v70 = --v69 == 0;
            }
            while (__stlxr(v69, (unint64_t *)v67));
LABEL_354:
            if (!v70)
              goto LABEL_379;
            v318 = (void **)(v67 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v318);
LABEL_378:
            MEMORY[0x219A19A08](v67, 0x1020C405E66F15BLL);
LABEL_379:
            turi::flexible_type_fail(0);
            return;
          case 8:
            v100 = *v3;
            if (*(_QWORD *)*v3 == 1)
              goto LABEL_391;
            v101 = operator new();
            v102 = *v3;
            *(_QWORD *)v101 = *(_QWORD *)*v3;
            *(_QWORD *)(v101 + 8) = *(_QWORD *)(v102 + 8);
            v103 = *(_QWORD *)(v102 + 16);
            *(_QWORD *)(v101 + 16) = v103;
            if (v103)
            {
              v104 = (unsigned int *)(v103 + 8);
              do
                v105 = __ldxr(v104);
              while (__stxr(v105 + 1, v104));
            }
            v106 = *(_OWORD *)(v102 + 24);
            v107 = *(_OWORD *)(v102 + 40);
            *(_OWORD *)(v101 + 56) = *(_OWORD *)(v102 + 56);
            *(_OWORD *)(v101 + 40) = v107;
            *(_OWORD *)(v101 + 24) = v106;
            *v3 = v101;
            *(_QWORD *)v101 = 1;
            do
            {
              v108 = __ldaxr((unint64_t *)v100);
              v109 = --v108 == 0;
            }
            while (__stlxr(v108, (unint64_t *)v100));
LABEL_386:
            if (!v109)
              goto LABEL_391;
            boost::detail::shared_count::~shared_count((unsigned int **)(v100 + 16));
            v217 = (_QWORD *)v100;
            v218 = -235920773;
LABEL_389:
            v253 = v218 | 0x1030C4000000000;
LABEL_390:
            MEMORY[0x219A19A08](v217, v253);
LABEL_391:
            turi::flexible_type_fail(0);
            return;
          case 9:
            v27 = *(double *)a2;
            v28 = (unint64_t *)*v3;
            if (*(_QWORD *)*v3 != 1)
            {
              v29 = (_QWORD *)operator new();
              v30 = *v3 + 8;
              *v29 = *(_QWORD *)*v3;
              turi::flexible_type_impl::ndarray<double>::ndarray(v29 + 1, v30);
              *v3 = (uint64_t)v29;
              *v29 = 1;
              do
              {
                v31 = __ldaxr(v28);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v28));
              if (!v32)
              {
                v33 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v28);
                MEMORY[0x219A19A08](v33, 0x1030C407B73B9F7);
              }
            }
            v34 = *v3;
            v35 = (uint64_t *)(*v3 + 8);
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v35, *(_QWORD *)&v27 + 8))
              turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
            v37 = *(uint64_t **)(v34 + 24);
            v36 = *(uint64_t **)(v34 + 32);
            if (v36 == v37)
              return;
            if (!*v35)
              return;
            v38 = 1;
            do
            {
              v39 = *v37++;
              v38 *= v39;
            }
            while (v37 != v36);
            if (!v38)
              return;
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v35);
            v40 = (uint64_t)(*(_QWORD *)(v34 + 32) - *(_QWORD *)(v34 + 24)) >> 3;
            v317 = 0;
            std::vector<unsigned long>::vector(&v318, v40, &v317);
            v41 = v318;
            v42 = v319;
            break;
          default:
            turi::apply_binary_op_ff();
        }
        return;
      default:
        turi::apply_binary_op_ff();
    }
    do
    {
      v43 = (char *)v42 - (char *)v41;
      if (v43)
      {
        v44 = 0;
        v45 = v43 >> 3;
        v46 = *(uint64_t **)(*(_QWORD *)&v27 + 48);
        if (v45 <= 1)
          v45 = 1;
        v47 = v41;
        v48 = v45;
        do
        {
          v50 = (uint64_t)*v47++;
          v49 = v50;
          v51 = *v46++;
          v44 += v51 * v49;
          --v48;
        }
        while (v48);
        v52 = 0;
        v53 = *(double *)(**(_QWORD **)(*(_QWORD *)&v27 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v27 + 72) + v44));
        v54 = *(uint64_t **)(v34 + 48);
        do
        {
          v56 = (uint64_t)*v41++;
          v55 = v56;
          v57 = *v54++;
          v52 += v57 * v55;
          --v45;
        }
        while (v45);
      }
      else
      {
        v52 = 0;
        v53 = *(double *)(**(_QWORD **)(*(_QWORD *)&v27 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v27 + 72));
      }
      turi::flexible_type_impl::ndarray<double>::ensure_unique(v35);
      *(double *)(**(_QWORD **)(v34 + 8) + 8 * (*(_QWORD *)(v34 + 72) + v52)) = v53
                                                                              + *(double *)(**(_QWORD **)(v34 + 8)
                                                                                          + 8
                                                                                          * (*(_QWORD *)(v34 + 72) + v52));
      v41 = v318;
      v42 = v319;
      v58 = v319 - v318;
      v59 = v58 - 1;
      if ((char *)v319 - (char *)v318 >= 1)
      {
        v60 = *(_QWORD *)(v34 + 24);
        v61 = (char *)v318[v59] + 1;
        v318[v59] = v61;
        if ((unint64_t)v61 >= *(_QWORD *)(v60 + 8 * v59))
        {
          v62 = (unint64_t *)&v41[v58 - 2];
          v63 = v60 - 16;
          while (1)
          {
            v64 = v58 - 1;
            v62[1] = 0;
            if (v58 - 1 <= 0)
              goto LABEL_238;
            v65 = *v62 + 1;
            *v62-- = v65;
            v66 = *(_QWORD *)(v63 + 8 * v58--);
            if (v65 < v66)
            {
              v59 = v64 - 1;
              break;
            }
          }
        }
        v58 = 1;
      }
    }
    while ((v59 & 0x8000000000000000) == 0 && v58);
LABEL_237:
    if (!v41)
      return;
LABEL_238:
    v319 = v41;
    operator delete(v41);
  }
}

void sub_21812CD04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

void sub_21812CE30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x21812CE28);
}

void turi::groupby_operators::sum::combine(uint64_t a1, void *lpsrc)
{
  double *v3;
  double *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void **v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  void **v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  BOOL v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  void *v87;
  double *v88;
  uint64_t v89;
  unint64_t v90;
  double v91;
  unint64_t *v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  double *v97;
  uint64_t v98;
  double v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void **v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  unint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void **v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  unint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  unint64_t *v171;
  _QWORD *v172;
  unint64_t v173;
  BOOL v174;
  double v175;
  _QWORD *v176;
  unint64_t v177;
  BOOL v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  __int128 v185;
  __int128 v186;
  unint64_t v187;
  BOOL v188;
  _QWORD *v189;
  unint64_t v190;
  _QWORD *v191;
  unint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  _QWORD *v198;
  unint64_t v199;
  _QWORD *v200;
  unint64_t v201;
  _QWORD *v202;
  unint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int *v212;
  unsigned int v213;
  __int128 v214;
  __int128 v215;
  unint64_t v216;
  double v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  unsigned int v224;
  _QWORD *v225;
  unint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int *v232;
  unsigned int v233;
  __int128 v234;
  __int128 v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t *v238;
  _QWORD *v239;
  unint64_t v240;
  unint64_t v241;
  void *v242;
  uint64_t v243;
  double *v244;
  uint64_t v245;
  unint64_t v246;
  double *v247;
  double v248;
  _QWORD *v249;
  unint64_t v250;
  _QWORD *v251;
  unint64_t v252;
  _QWORD *v253;
  unint64_t v254;
  _QWORD *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int *v260;
  unsigned int v261;
  __int128 v262;
  __int128 v263;
  unint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  _QWORD *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  __int128 v278;
  __int128 v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unsigned int *v288;
  unsigned int v289;
  __int128 v290;
  __int128 v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int *v296;
  unsigned int v297;
  __int128 v298;
  __int128 v299;
  unint64_t v300;
  _QWORD *v301;
  unint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  _QWORD *v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int *v310;
  unsigned int v311;
  __int128 v312;
  __int128 v313;
  unint64_t v314;
  _QWORD *v315;
  unint64_t v316;
  void *v317;
  _QWORD *v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unsigned int *v323;
  unsigned int v324;
  __int128 v325;
  __int128 v326;
  unint64_t v327;
  _QWORD *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int *v333;
  unsigned int v334;
  __int128 v335;
  __int128 v336;
  unint64_t v337;
  uint64_t v338;
  void **v339;
  void **v340;

  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  v5 = (uint64_t *)(a1 + 8);
  switch(*((_BYTE *)v3 + 20))
  {
    case 0:
      switch(*(_BYTE *)(a1 + 20))
      {
        case 0:
          v6 = *v5 + *((_QWORD *)v3 + 1);
          goto LABEL_42;
        case 1:
          v175 = *(double *)v5 + (double)*((uint64_t *)v3 + 1);
          goto LABEL_263;
        case 2:
          v7 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v196 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v196, *v5);
          *v5 = (uint64_t)v196;
          *v196 = 1;
          do
          {
            v197 = __ldaxr((unint64_t *)v7);
            v10 = --v197 == 0;
          }
          while (__stlxr(v197, (unint64_t *)v7));
          goto LABEL_235;
        case 3:
          v83 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 != 1)
          {
            v84 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v84, *v5);
            *v5 = (uint64_t)v84;
            *v84 = 1;
            do
            {
              v85 = __ldaxr(v83);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, v83));
            if (!v86)
            {
              v87 = (void *)v83[1];
              if (v87)
              {
                v83[2] = (unint64_t)v87;
                operator delete(v87);
              }
              MEMORY[0x219A19A08](v83, 0x1080C409938AC02);
            }
          }
          v88 = *(double **)(*v5 + 8);
          v89 = *(_QWORD *)(*v5 + 16) - (_QWORD)v88;
          if (v89)
          {
            v90 = v89 >> 3;
            v91 = (double)*((uint64_t *)v4 + 1);
            if (v90 <= 1)
              v90 = 1;
            do
            {
              *v88 = *v88 + v91;
              ++v88;
              --v90;
            }
            while (v90);
          }
          return;
        case 4:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v255 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v255, *v5);
          *v5 = (uint64_t)v255;
          *v255 = 1;
          do
          {
            v256 = __ldaxr((unint64_t *)v79);
            v178 = --v256 == 0;
          }
          while (__stlxr(v256, (unint64_t *)v79));
          goto LABEL_402;
        case 5:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v271 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v271, *v5);
          *v5 = (uint64_t)v271;
          *v271 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v79);
            v82 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v79));
          goto LABEL_344;
        case 6:
          *v5 = *v5 & 0xFF00000000000000 | (*v5 + *((_QWORD *)v3 + 1)) & 0xFFFFFFFFFFFFFFLL;
          return;
        case 7:
          goto LABEL_419;
        case 8:
          v179 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v285 = operator new();
          v286 = *v5;
          *(_QWORD *)v285 = *(_QWORD *)*v5;
          *(_QWORD *)(v285 + 8) = *(_QWORD *)(v286 + 8);
          v287 = *(_QWORD *)(v286 + 16);
          *(_QWORD *)(v285 + 16) = v287;
          if (v287)
          {
            v288 = (unsigned int *)(v287 + 8);
            do
              v289 = __ldxr(v288);
            while (__stxr(v289 + 1, v288));
          }
          v290 = *(_OWORD *)(v286 + 24);
          v291 = *(_OWORD *)(v286 + 40);
          *(_OWORD *)(v285 + 56) = *(_OWORD *)(v286 + 56);
          *(_OWORD *)(v285 + 40) = v291;
          *(_OWORD *)(v285 + 24) = v290;
          *v5 = v285;
          *(_QWORD *)v285 = 1;
          do
          {
            v292 = __ldaxr((unint64_t *)v179);
            v188 = --v292 == 0;
          }
          while (__stlxr(v292, (unint64_t *)v179));
          goto LABEL_414;
        case 9:
          v109 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 != 1)
          {
            v110 = (_QWORD *)operator new();
            v111 = *v5 + 8;
            *v110 = *(_QWORD *)*v5;
            turi::flexible_type_impl::ndarray<double>::ndarray(v110 + 1, v111);
            *v5 = (uint64_t)v110;
            *v110 = 1;
            do
            {
              v112 = __ldaxr(v109);
              v113 = v112 - 1;
            }
            while (__stlxr(v113, v109));
            if (!v113)
            {
              v114 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v109);
              MEMORY[0x219A19A08](v114, 0x1030C407B73B9F7);
            }
          }
          v115 = (uint64_t *)*v5;
          v117 = *(uint64_t **)(*v5 + 24);
          v116 = *(uint64_t **)(*v5 + 32);
          if (v116 == v117)
            return;
          if (!v115[1])
            return;
          v118 = (double)*((uint64_t *)v4 + 1);
          v119 = 1;
          do
          {
            v120 = *v117++;
            v119 *= v120;
          }
          while (v117 != v116);
          if (!v119)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v115 + 1);
          v121 = (v115[4] - v115[3]) >> 3;
          v338 = 0;
          std::vector<unsigned long>::vector(&v339, v121, &v338);
          v50 = v339;
          v122 = v340;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      while (2)
      {
        v123 = 0;
        v124 = (char *)v122 - (char *)v50;
        if (v124)
        {
          v125 = v124 >> 3;
          v126 = (uint64_t *)v115[6];
          if (v125 <= 1)
            v125 = 1;
          do
          {
            v128 = (uint64_t)*v50++;
            v127 = v128;
            v129 = *v126++;
            v123 += v129 * v127;
            --v125;
          }
          while (v125);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v115 + 1);
        *(double *)(*(_QWORD *)v115[1] + 8 * (v115[9] + v123)) = *(double *)(*(_QWORD *)v115[1] + 8 * (v115[9] + v123))
                                                               + v118;
        v50 = v339;
        v122 = v340;
        v130 = v340 - v339;
        v131 = v130 - 1;
        if ((char *)v340 - (char *)v339 < 1)
          goto LABEL_159;
        v132 = v115[3];
        v133 = (char *)v339[v131] + 1;
        v339[v131] = v133;
        if ((unint64_t)v133 < *(_QWORD *)(v132 + 8 * v131))
        {
LABEL_158:
          v130 = 1;
LABEL_159:
          if (v131 < 0 || !v130)
            goto LABEL_186;
          continue;
        }
        break;
      }
      v134 = (unint64_t *)&v50[v130 - 2];
      v135 = v132 - 16;
      while (1)
      {
        v136 = v130 - 1;
        v134[1] = 0;
        if (v130 - 1 <= 0)
          goto LABEL_187;
        v137 = *v134 + 1;
        *v134-- = v137;
        v138 = *(_QWORD *)(v135 + 8 * v130--);
        if (v137 < v138)
        {
          v131 = v136 - 1;
          goto LABEL_158;
        }
      }
    case 1:
      switch(*(_BYTE *)(a1 + 20))
      {
        case 0:
          v6 = (uint64_t)(v3[1] + (double)*v5);
LABEL_42:
          *v5 = v6;
          return;
        case 1:
          v175 = v3[1] + *(double *)v5;
LABEL_263:
          *(double *)v5 = v175;
          return;
        case 2:
          v7 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v202 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v202, *v5);
          *v5 = (uint64_t)v202;
          *v202 = 1;
          do
          {
            v203 = __ldaxr((unint64_t *)v7);
            v10 = --v203 == 0;
          }
          while (__stlxr(v203, (unint64_t *)v7));
          goto LABEL_235;
        case 3:
          v92 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 != 1)
          {
            v93 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v93, *v5);
            *v5 = (uint64_t)v93;
            *v93 = 1;
            do
            {
              v94 = __ldaxr(v92);
              v95 = v94 - 1;
            }
            while (__stlxr(v95, v92));
            if (!v95)
            {
              v96 = (void *)v92[1];
              if (v96)
              {
                v92[2] = (unint64_t)v96;
                operator delete(v96);
              }
              MEMORY[0x219A19A08](v92, 0x1080C409938AC02);
            }
          }
          v97 = *(double **)(*v5 + 8);
          v98 = *(_QWORD *)(*v5 + 16) - (_QWORD)v97;
          if (v98)
          {
            v99 = v4[1];
            v100 = v98 >> 3;
            if (v100 <= 1)
              v100 = 1;
            do
            {
              *v97 = v99 + *v97;
              ++v97;
              --v100;
            }
            while (v100);
          }
          return;
        case 4:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v267 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v267, *v5);
          *v5 = (uint64_t)v267;
          *v267 = 1;
          do
          {
            v268 = __ldaxr((unint64_t *)v79);
            v178 = --v268 == 0;
          }
          while (__stlxr(v268, (unint64_t *)v79));
          goto LABEL_402;
        case 5:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v281 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v281, *v5);
          *v5 = (uint64_t)v281;
          *v281 = 1;
          do
          {
            v282 = __ldaxr((unint64_t *)v79);
            v82 = --v282 == 0;
          }
          while (__stlxr(v282, (unint64_t *)v79));
          goto LABEL_344;
        case 6:
          v217 = v3[1];
          v218 = *(_QWORD *)(a1 + 8);
          v219 = v218 + vcvtmd_s64_f64(v217);
          *(_QWORD *)(a1 + 8) = v218 & 0xFF00000000000000 | v219 & 0xFFFFFFFFFFFFFFLL;
          v220 = (uint64_t)((v217 - (double)(uint64_t)floor(v217)) * 1000000.0) + *(int *)(a1 + 16);
          if (v220 >= 1000000)
          {
            *v5 = (v219 + 1) & 0xFFFFFFFFFFFFFFLL | v218 & 0xFF00000000000000;
            LODWORD(v220) = v220 - 1000000;
          }
          if (v220 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          *(_DWORD *)(a1 + 16) = v220;
          return;
        case 7:
          goto LABEL_419;
        case 8:
          v179 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v293 = operator new();
          v294 = *v5;
          *(_QWORD *)v293 = *(_QWORD *)*v5;
          *(_QWORD *)(v293 + 8) = *(_QWORD *)(v294 + 8);
          v295 = *(_QWORD *)(v294 + 16);
          *(_QWORD *)(v293 + 16) = v295;
          if (v295)
          {
            v296 = (unsigned int *)(v295 + 8);
            do
              v297 = __ldxr(v296);
            while (__stxr(v297 + 1, v296));
          }
          v298 = *(_OWORD *)(v294 + 24);
          v299 = *(_OWORD *)(v294 + 40);
          *(_OWORD *)(v293 + 56) = *(_OWORD *)(v294 + 56);
          *(_OWORD *)(v293 + 40) = v299;
          *(_OWORD *)(v293 + 24) = v298;
          *v5 = v293;
          *(_QWORD *)v293 = 1;
          do
          {
            v300 = __ldaxr((unint64_t *)v179);
            v188 = --v300 == 0;
          }
          while (__stlxr(v300, (unint64_t *)v179));
          goto LABEL_414;
        case 9:
          v139 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 != 1)
          {
            v140 = (_QWORD *)operator new();
            v141 = *v5 + 8;
            *v140 = *(_QWORD *)*v5;
            turi::flexible_type_impl::ndarray<double>::ndarray(v140 + 1, v141);
            *v5 = (uint64_t)v140;
            *v140 = 1;
            do
            {
              v142 = __ldaxr(v139);
              v143 = v142 - 1;
            }
            while (__stlxr(v143, v139));
            if (!v143)
            {
              v144 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v139);
              MEMORY[0x219A19A08](v144, 0x1030C407B73B9F7);
            }
          }
          v145 = (uint64_t *)*v5;
          v147 = *(uint64_t **)(*v5 + 24);
          v146 = *(uint64_t **)(*v5 + 32);
          if (v146 == v147)
            return;
          if (!v145[1])
            return;
          v148 = v4[1];
          v149 = 1;
          do
          {
            v150 = *v147++;
            v149 *= v150;
          }
          while (v147 != v146);
          if (!v149)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v145 + 1);
          v151 = (v145[4] - v145[3]) >> 3;
          v338 = 0;
          std::vector<unsigned long>::vector(&v339, v151, &v338);
          v50 = v339;
          v152 = v340;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      while (2)
      {
        v153 = 0;
        v154 = (char *)v152 - (char *)v50;
        if (v154)
        {
          v155 = v154 >> 3;
          v156 = (uint64_t *)v145[6];
          if (v155 <= 1)
            v155 = 1;
          do
          {
            v158 = (uint64_t)*v50++;
            v157 = v158;
            v159 = *v156++;
            v153 += v159 * v157;
            --v155;
          }
          while (v155);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v145 + 1);
        *(double *)(*(_QWORD *)v145[1] + 8 * (v145[9] + v153)) = v148
                                                               + *(double *)(*(_QWORD *)v145[1] + 8 * (v145[9] + v153));
        v50 = v339;
        v152 = v340;
        v160 = v340 - v339;
        v161 = v160 - 1;
        if ((char *)v340 - (char *)v339 < 1)
          goto LABEL_184;
        v162 = v145[3];
        v163 = (char *)v339[v161] + 1;
        v339[v161] = v163;
        if ((unint64_t)v163 < *(_QWORD *)(v162 + 8 * v161))
        {
LABEL_183:
          v160 = 1;
LABEL_184:
          if (v161 < 0 || !v160)
            goto LABEL_186;
          continue;
        }
        break;
      }
      v164 = (unint64_t *)&v50[v160 - 2];
      v165 = v162 - 16;
      while (1)
      {
        v166 = v160 - 1;
        v164[1] = 0;
        if (v160 - 1 <= 0)
          goto LABEL_187;
        v167 = *v164 + 1;
        *v164-- = v167;
        v168 = *(_QWORD *)(v165 + 8 * v160--);
        if (v167 < v168)
        {
          v161 = v166 - 1;
          goto LABEL_183;
        }
      }
    case 2:
      switch(*(_BYTE *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_419;
        case 2:
          v13 = *((_QWORD *)v3 + 1);
          v14 = *v5;
          if (*(_QWORD *)*v5 != 1)
          {
            v15 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v15, *v5);
            *v5 = (uint64_t)v15;
            *v15 = 1;
            do
            {
              v16 = __ldaxr((unint64_t *)v14);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, (unint64_t *)v14));
            if (!v17)
            {
              if (*(char *)(v14 + 31) < 0)
                operator delete(*(void **)(v14 + 8));
              MEMORY[0x219A19A08](v14, 0x1012C404EF22A49);
            }
          }
          v18 = *(char *)(v13 + 31);
          if (v18 >= 0)
            v19 = (const std::string::value_type *)(v13 + 8);
          else
            v19 = *(const std::string::value_type **)(v13 + 8);
          if (v18 >= 0)
            v20 = *(unsigned __int8 *)(v13 + 31);
          else
            v20 = *(_QWORD *)(v13 + 16);
          std::string::append((std::string *)(*v5 + 8), v19, v20);
          return;
        case 3:
          v171 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v225 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v225, *v5);
          *v5 = (uint64_t)v225;
          *v225 = 1;
          do
          {
            v226 = __ldaxr(v171);
            v174 = --v226 == 0;
          }
          while (__stlxr(v226, v171));
          goto LABEL_383;
        case 4:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v227 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v227, *v5);
          *v5 = (uint64_t)v227;
          *v227 = 1;
          do
          {
            v228 = __ldaxr((unint64_t *)v79);
            v178 = --v228 == 0;
          }
          while (__stlxr(v228, (unint64_t *)v79));
          goto LABEL_402;
        case 5:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v169 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v169, *v5);
          *v5 = (uint64_t)v169;
          *v169 = 1;
          do
          {
            v170 = __ldaxr((unint64_t *)v79);
            v82 = --v170 == 0;
          }
          while (__stlxr(v170, (unint64_t *)v79));
          goto LABEL_344;
        case 8:
          v179 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v229 = operator new();
          v230 = *v5;
          *(_QWORD *)v229 = *(_QWORD *)*v5;
          *(_QWORD *)(v229 + 8) = *(_QWORD *)(v230 + 8);
          v231 = *(_QWORD *)(v230 + 16);
          *(_QWORD *)(v229 + 16) = v231;
          if (v231)
          {
            v232 = (unsigned int *)(v231 + 8);
            do
              v233 = __ldxr(v232);
            while (__stxr(v233 + 1, v232));
          }
          v234 = *(_OWORD *)(v230 + 24);
          v235 = *(_OWORD *)(v230 + 40);
          *(_OWORD *)(v229 + 56) = *(_OWORD *)(v230 + 56);
          *(_OWORD *)(v229 + 40) = v235;
          *(_OWORD *)(v229 + 24) = v234;
          *v5 = v229;
          *(_QWORD *)v229 = 1;
          do
          {
            v236 = __ldaxr((unint64_t *)v179);
            v188 = --v236 == 0;
          }
          while (__stlxr(v236, (unint64_t *)v179));
          goto LABEL_414;
        case 9:
          v31 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v76 = (_QWORD *)operator new();
          v77 = *v5 + 8;
          *v76 = *(_QWORD *)*v5;
          turi::flexible_type_impl::ndarray<double>::ndarray(v76 + 1, v77);
          *v5 = (uint64_t)v76;
          *v76 = 1;
          do
          {
            v78 = __ldaxr(v31);
            v35 = --v78 == 0;
          }
          while (__stlxr(v78, v31));
          goto LABEL_259;
        default:
          turi::apply_binary_op_ff();
      }
    case 3:
      switch(*(_BYTE *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_419;
        case 2:
          v7 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v21 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v21, *v5);
          *v5 = (uint64_t)v21;
          *v21 = 1;
          do
          {
            v22 = __ldaxr((unint64_t *)v7);
            v10 = --v22 == 0;
          }
          while (__stlxr(v22, (unint64_t *)v7));
          goto LABEL_235;
        case 3:
          v237 = *((_QWORD *)v3 + 1);
          v238 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 != 1)
          {
            v239 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v239, *v5);
            *v5 = (uint64_t)v239;
            *v239 = 1;
            do
            {
              v240 = __ldaxr(v238);
              v241 = v240 - 1;
            }
            while (__stlxr(v241, v238));
            if (!v241)
            {
              v242 = (void *)v238[1];
              if (v242)
              {
                v238[2] = (unint64_t)v242;
                operator delete(v242);
              }
              MEMORY[0x219A19A08](v238, 0x1080C409938AC02);
            }
          }
          v243 = *v5;
          turi::flexible_type_fail(*(_QWORD *)(*v5 + 16) - *(_QWORD *)(*v5 + 8) == *(_QWORD *)(v237 + 16)
                                                                                 - *(_QWORD *)(v237 + 8));
          v244 = *(double **)(v243 + 8);
          v245 = *(_QWORD *)(v243 + 16) - (_QWORD)v244;
          if (v245)
          {
            v246 = v245 >> 3;
            v247 = *(double **)(v237 + 8);
            if (v246 <= 1)
              v246 = 1;
            do
            {
              v248 = *v247++;
              *v244 = v248 + *v244;
              ++v244;
              --v246;
            }
            while (v246);
          }
          return;
        case 4:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v253 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v253, *v5);
          *v5 = (uint64_t)v253;
          *v253 = 1;
          do
          {
            v254 = __ldaxr((unint64_t *)v79);
            v178 = --v254 == 0;
          }
          while (__stlxr(v254, (unint64_t *)v79));
          goto LABEL_402;
        case 5:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v191 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v191, *v5);
          *v5 = (uint64_t)v191;
          *v191 = 1;
          do
          {
            v192 = __ldaxr((unint64_t *)v79);
            v82 = --v192 == 0;
          }
          while (__stlxr(v192, (unint64_t *)v79));
          goto LABEL_344;
        case 8:
          v179 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v257 = operator new();
          v258 = *v5;
          *(_QWORD *)v257 = *(_QWORD *)*v5;
          *(_QWORD *)(v257 + 8) = *(_QWORD *)(v258 + 8);
          v259 = *(_QWORD *)(v258 + 16);
          *(_QWORD *)(v257 + 16) = v259;
          if (v259)
          {
            v260 = (unsigned int *)(v259 + 8);
            do
              v261 = __ldxr(v260);
            while (__stxr(v261 + 1, v260));
          }
          v262 = *(_OWORD *)(v258 + 24);
          v263 = *(_OWORD *)(v258 + 40);
          *(_OWORD *)(v257 + 56) = *(_OWORD *)(v258 + 56);
          *(_OWORD *)(v257 + 40) = v263;
          *(_OWORD *)(v257 + 24) = v262;
          *v5 = v257;
          *(_QWORD *)v257 = 1;
          do
          {
            v264 = __ldaxr((unint64_t *)v179);
            v188 = --v264 == 0;
          }
          while (__stlxr(v264, (unint64_t *)v179));
          goto LABEL_414;
        case 9:
          v31 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v101 = (_QWORD *)operator new();
          v102 = *v5 + 8;
          *v101 = *(_QWORD *)*v5;
          turi::flexible_type_impl::ndarray<double>::ndarray(v101 + 1, v102);
          *v5 = (uint64_t)v101;
          *v101 = 1;
          do
          {
            v103 = __ldaxr(v31);
            v35 = --v103 == 0;
          }
          while (__stlxr(v103, v31));
          goto LABEL_259;
        default:
          turi::apply_binary_op_ff();
      }
    case 4:
      switch(*(_BYTE *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_419;
        case 2:
          v7 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v8 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v8, *v5);
          *v5 = (uint64_t)v8;
          *v8 = 1;
          do
          {
            v9 = __ldaxr((unint64_t *)v7);
            v10 = --v9 == 0;
          }
          while (__stlxr(v9, (unint64_t *)v7));
          goto LABEL_235;
        case 3:
          v171 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v172 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v172, *v5);
          *v5 = (uint64_t)v172;
          *v172 = 1;
          do
          {
            v173 = __ldaxr(v171);
            v174 = --v173 == 0;
          }
          while (__stlxr(v173, v171));
          goto LABEL_383;
        case 4:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v176 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v176, *v5);
          *v5 = (uint64_t)v176;
          *v176 = 1;
          do
          {
            v177 = __ldaxr((unint64_t *)v79);
            v178 = --v177 == 0;
          }
          while (__stlxr(v177, (unint64_t *)v79));
          goto LABEL_402;
        case 5:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v80 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v80, *v5);
          *v5 = (uint64_t)v80;
          *v80 = 1;
          do
          {
            v81 = __ldaxr((unint64_t *)v79);
            v82 = --v81 == 0;
          }
          while (__stlxr(v81, (unint64_t *)v79));
          goto LABEL_344;
        case 8:
          v179 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v180 = operator new();
          v181 = *v5;
          *(_QWORD *)v180 = *(_QWORD *)*v5;
          *(_QWORD *)(v180 + 8) = *(_QWORD *)(v181 + 8);
          v182 = *(_QWORD *)(v181 + 16);
          *(_QWORD *)(v180 + 16) = v182;
          if (v182)
          {
            v183 = (unsigned int *)(v182 + 8);
            do
              v184 = __ldxr(v183);
            while (__stxr(v184 + 1, v183));
          }
          v185 = *(_OWORD *)(v181 + 24);
          v186 = *(_OWORD *)(v181 + 40);
          *(_OWORD *)(v180 + 56) = *(_OWORD *)(v181 + 56);
          *(_OWORD *)(v180 + 40) = v186;
          *(_OWORD *)(v180 + 24) = v185;
          *v5 = v180;
          *(_QWORD *)v180 = 1;
          do
          {
            v187 = __ldaxr((unint64_t *)v179);
            v188 = --v187 == 0;
          }
          while (__stlxr(v187, (unint64_t *)v179));
          goto LABEL_414;
        case 9:
          v31 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v32 = (_QWORD *)operator new();
          v33 = *v5 + 8;
          *v32 = *(_QWORD *)*v5;
          turi::flexible_type_impl::ndarray<double>::ndarray(v32 + 1, v33);
          *v5 = (uint64_t)v32;
          *v32 = 1;
          do
          {
            v34 = __ldaxr(v31);
            v35 = --v34 == 0;
          }
          while (__stlxr(v34, v31));
          goto LABEL_259;
        default:
          turi::apply_binary_op_ff();
      }
    case 5:
      switch(*(_BYTE *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_419;
        case 2:
          v7 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v25 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v25, *v5);
          *v5 = (uint64_t)v25;
          *v25 = 1;
          do
          {
            v26 = __ldaxr((unint64_t *)v7);
            v10 = --v26 == 0;
          }
          while (__stlxr(v26, (unint64_t *)v7));
          goto LABEL_235;
        case 3:
          v171 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v301 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v301, *v5);
          *v5 = (uint64_t)v301;
          *v301 = 1;
          do
          {
            v302 = __ldaxr(v171);
            v174 = --v302 == 0;
          }
          while (__stlxr(v302, v171));
          goto LABEL_383;
        case 4:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v303 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v303, *v5);
          *v5 = (uint64_t)v303;
          *v303 = 1;
          do
          {
            v304 = __ldaxr((unint64_t *)v79);
            v178 = --v304 == 0;
          }
          while (__stlxr(v304, (unint64_t *)v79));
          goto LABEL_402;
        case 5:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v251 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v251, *v5);
          *v5 = (uint64_t)v251;
          *v251 = 1;
          do
          {
            v252 = __ldaxr((unint64_t *)v79);
            v82 = --v252 == 0;
          }
          while (__stlxr(v252, (unint64_t *)v79));
          goto LABEL_344;
        case 8:
          v179 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v307 = operator new();
          v308 = *v5;
          *(_QWORD *)v307 = *(_QWORD *)*v5;
          *(_QWORD *)(v307 + 8) = *(_QWORD *)(v308 + 8);
          v309 = *(_QWORD *)(v308 + 16);
          *(_QWORD *)(v307 + 16) = v309;
          if (v309)
          {
            v310 = (unsigned int *)(v309 + 8);
            do
              v311 = __ldxr(v310);
            while (__stxr(v311 + 1, v310));
          }
          v312 = *(_OWORD *)(v308 + 24);
          v313 = *(_OWORD *)(v308 + 40);
          *(_OWORD *)(v307 + 56) = *(_OWORD *)(v308 + 56);
          *(_OWORD *)(v307 + 40) = v313;
          *(_OWORD *)(v307 + 24) = v312;
          *v5 = v307;
          *(_QWORD *)v307 = 1;
          do
          {
            v314 = __ldaxr((unint64_t *)v179);
            v188 = --v314 == 0;
          }
          while (__stlxr(v314, (unint64_t *)v179));
          goto LABEL_414;
        case 9:
          v31 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v193 = (_QWORD *)operator new();
          v194 = *v5 + 8;
          *v193 = *(_QWORD *)*v5;
          turi::flexible_type_impl::ndarray<double>::ndarray(v193 + 1, v194);
          *v5 = (uint64_t)v193;
          *v193 = 1;
          do
          {
            v195 = __ldaxr(v31);
            v35 = --v195 == 0;
          }
          while (__stlxr(v195, v31));
          goto LABEL_259;
        default:
          turi::apply_binary_op_ff();
      }
    case 6:
      switch(*(_BYTE *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_419;
        case 2:
          v7 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v27 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v27, *v5);
          *v5 = (uint64_t)v27;
          *v27 = 1;
          do
          {
            v28 = __ldaxr((unint64_t *)v7);
            v10 = --v28 == 0;
          }
          while (__stlxr(v28, (unint64_t *)v7));
          goto LABEL_235;
        case 3:
          v171 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v305 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v305, *v5);
          *v5 = (uint64_t)v305;
          *v305 = 1;
          do
          {
            v306 = __ldaxr(v171);
            v174 = --v306 == 0;
          }
          while (__stlxr(v306, v171));
          goto LABEL_383;
        case 4:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v318 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v318, *v5);
          *v5 = (uint64_t)v318;
          *v318 = 1;
          do
          {
            v319 = __ldaxr((unint64_t *)v79);
            v178 = --v319 == 0;
          }
          while (__stlxr(v319, (unint64_t *)v79));
          goto LABEL_402;
        case 5:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v269 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v269, *v5);
          *v5 = (uint64_t)v269;
          *v269 = 1;
          do
          {
            v270 = __ldaxr((unint64_t *)v79);
            v82 = --v270 == 0;
          }
          while (__stlxr(v270, (unint64_t *)v79));
          goto LABEL_344;
        case 8:
          v179 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v320 = operator new();
          v321 = *v5;
          *(_QWORD *)v320 = *(_QWORD *)*v5;
          *(_QWORD *)(v320 + 8) = *(_QWORD *)(v321 + 8);
          v322 = *(_QWORD *)(v321 + 16);
          *(_QWORD *)(v320 + 16) = v322;
          if (v322)
          {
            v323 = (unsigned int *)(v322 + 8);
            do
              v324 = __ldxr(v323);
            while (__stxr(v324 + 1, v323));
          }
          v325 = *(_OWORD *)(v321 + 24);
          v326 = *(_OWORD *)(v321 + 40);
          *(_OWORD *)(v320 + 56) = *(_OWORD *)(v321 + 56);
          *(_OWORD *)(v320 + 40) = v326;
          *(_OWORD *)(v320 + 24) = v325;
          *v5 = v320;
          *(_QWORD *)v320 = 1;
          do
          {
            v327 = __ldaxr((unint64_t *)v179);
            v188 = --v327 == 0;
          }
          while (__stlxr(v327, (unint64_t *)v179));
          goto LABEL_414;
        case 9:
          v31 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v206 = (_QWORD *)operator new();
          v207 = *v5 + 8;
          *v206 = *(_QWORD *)*v5;
          turi::flexible_type_impl::ndarray<double>::ndarray(v206 + 1, v207);
          *v5 = (uint64_t)v206;
          *v206 = 1;
          do
          {
            v208 = __ldaxr(v31);
            v35 = --v208 == 0;
          }
          while (__stlxr(v208, v31));
          goto LABEL_259;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      switch(*(_BYTE *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_419;
        case 2:
          v7 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v23 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v23, *v5);
          *v5 = (uint64_t)v23;
          *v23 = 1;
          do
          {
            v24 = __ldaxr((unint64_t *)v7);
            v10 = --v24 == 0;
          }
          while (__stlxr(v24, (unint64_t *)v7));
          goto LABEL_235;
        case 3:
          v171 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v249 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v249, *v5);
          *v5 = (uint64_t)v249;
          *v249 = 1;
          do
          {
            v250 = __ldaxr(v171);
            v174 = --v250 == 0;
          }
          while (__stlxr(v250, v171));
          goto LABEL_383;
        case 4:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v265 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v265, *v5);
          *v5 = (uint64_t)v265;
          *v265 = 1;
          do
          {
            v266 = __ldaxr((unint64_t *)v79);
            v178 = --v266 == 0;
          }
          while (__stlxr(v266, (unint64_t *)v79));
          goto LABEL_402;
        case 5:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v200 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v200, *v5);
          *v5 = (uint64_t)v200;
          *v200 = 1;
          do
          {
            v201 = __ldaxr((unint64_t *)v79);
            v82 = --v201 == 0;
          }
          while (__stlxr(v201, (unint64_t *)v79));
          goto LABEL_344;
        case 8:
          v179 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v273 = operator new();
          v274 = *v5;
          *(_QWORD *)v273 = *(_QWORD *)*v5;
          *(_QWORD *)(v273 + 8) = *(_QWORD *)(v274 + 8);
          v275 = *(_QWORD *)(v274 + 16);
          *(_QWORD *)(v273 + 16) = v275;
          if (v275)
          {
            v276 = (unsigned int *)(v275 + 8);
            do
              v277 = __ldxr(v276);
            while (__stxr(v277 + 1, v276));
          }
          v278 = *(_OWORD *)(v274 + 24);
          v279 = *(_OWORD *)(v274 + 40);
          *(_OWORD *)(v273 + 56) = *(_OWORD *)(v274 + 56);
          *(_OWORD *)(v273 + 40) = v279;
          *(_OWORD *)(v273 + 24) = v278;
          *v5 = v273;
          *(_QWORD *)v273 = 1;
          do
          {
            v280 = __ldaxr((unint64_t *)v179);
            v188 = --v280 == 0;
          }
          while (__stlxr(v280, (unint64_t *)v179));
          goto LABEL_414;
        case 9:
          v31 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v106 = (_QWORD *)operator new();
          v107 = *v5 + 8;
          *v106 = *(_QWORD *)*v5;
          turi::flexible_type_impl::ndarray<double>::ndarray(v106 + 1, v107);
          *v5 = (uint64_t)v106;
          *v106 = 1;
          do
          {
            v108 = __ldaxr(v31);
            v35 = --v108 == 0;
          }
          while (__stlxr(v108, v31));
          goto LABEL_259;
        default:
          turi::apply_binary_op_ff();
      }
    case 8:
      switch(*(_BYTE *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_419;
        case 2:
          v7 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v29 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v29, *v5);
          *v5 = (uint64_t)v29;
          *v29 = 1;
          do
          {
            v30 = __ldaxr((unint64_t *)v7);
            v10 = --v30 == 0;
          }
          while (__stlxr(v30, (unint64_t *)v7));
          goto LABEL_235;
        case 3:
          v171 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v315 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v315, *v5);
          *v5 = (uint64_t)v315;
          *v315 = 1;
          do
          {
            v316 = __ldaxr(v171);
            v174 = --v316 == 0;
          }
          while (__stlxr(v316, v171));
          goto LABEL_383;
        case 4:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v328 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v328, *v5);
          *v5 = (uint64_t)v328;
          *v328 = 1;
          do
          {
            v329 = __ldaxr((unint64_t *)v79);
            v178 = --v329 == 0;
          }
          while (__stlxr(v329, (unint64_t *)v79));
          goto LABEL_402;
        case 5:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v283 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v283, *v5);
          *v5 = (uint64_t)v283;
          *v283 = 1;
          do
          {
            v284 = __ldaxr((unint64_t *)v79);
            v82 = --v284 == 0;
          }
          while (__stlxr(v284, (unint64_t *)v79));
          goto LABEL_344;
        case 8:
          v179 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v330 = operator new();
          v331 = *v5;
          *(_QWORD *)v330 = *(_QWORD *)*v5;
          *(_QWORD *)(v330 + 8) = *(_QWORD *)(v331 + 8);
          v332 = *(_QWORD *)(v331 + 16);
          *(_QWORD *)(v330 + 16) = v332;
          if (v332)
          {
            v333 = (unsigned int *)(v332 + 8);
            do
              v334 = __ldxr(v333);
            while (__stxr(v334 + 1, v333));
          }
          v335 = *(_OWORD *)(v331 + 24);
          v336 = *(_OWORD *)(v331 + 40);
          *(_OWORD *)(v330 + 56) = *(_OWORD *)(v331 + 56);
          *(_OWORD *)(v330 + 40) = v336;
          *(_OWORD *)(v330 + 24) = v335;
          *v5 = v330;
          *(_QWORD *)v330 = 1;
          do
          {
            v337 = __ldaxr((unint64_t *)v179);
            v188 = --v337 == 0;
          }
          while (__stlxr(v337, (unint64_t *)v179));
          goto LABEL_414;
        case 9:
          v31 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v221 = (_QWORD *)operator new();
          v222 = *v5 + 8;
          *v221 = *(_QWORD *)*v5;
          turi::flexible_type_impl::ndarray<double>::ndarray(v221 + 1, v222);
          *v5 = (uint64_t)v221;
          *v221 = 1;
          do
          {
            v223 = __ldaxr(v31);
            v35 = --v223 == 0;
          }
          while (__stlxr(v223, v31));
LABEL_259:
          if (!v35)
            goto LABEL_419;
          v204 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v31);
          v224 = 2071181815;
          goto LABEL_417;
        default:
          turi::apply_binary_op_ff();
      }
    case 9:
      switch(*(_BYTE *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_419;
        case 2:
          v7 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v11 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v11, *v5);
          *v5 = (uint64_t)v11;
          *v11 = 1;
          do
          {
            v12 = __ldaxr((unint64_t *)v7);
            v10 = --v12 == 0;
          }
          while (__stlxr(v12, (unint64_t *)v7));
LABEL_235:
          if (!v10)
            goto LABEL_419;
          if (*(char *)(v7 + 31) < 0)
            operator delete(*(void **)(v7 + 8));
          v204 = (_QWORD *)v7;
          v205 = 0x1012C404EF22A49;
          goto LABEL_418;
        case 3:
          v171 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v189 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v189, *v5);
          *v5 = (uint64_t)v189;
          *v189 = 1;
          do
          {
            v190 = __ldaxr(v171);
            v174 = --v190 == 0;
          }
          while (__stlxr(v190, v171));
LABEL_383:
          if (!v174)
            goto LABEL_419;
          v317 = (void *)v171[1];
          if (v317)
          {
            v171[2] = (unint64_t)v317;
            operator delete(v317);
          }
          v204 = v171;
          v205 = 0x1080C409938AC02;
          goto LABEL_418;
        case 4:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v198 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v198, *v5);
          *v5 = (uint64_t)v198;
          *v198 = 1;
          do
          {
            v199 = __ldaxr((unint64_t *)v79);
            v178 = --v199 == 0;
          }
          while (__stlxr(v199, (unint64_t *)v79));
LABEL_402:
          if (!v178)
            goto LABEL_406;
          v339 = (void **)(v79 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v339);
          goto LABEL_405;
        case 5:
          v79 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_406;
          v104 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v104, *v5);
          *v5 = (uint64_t)v104;
          *v104 = 1;
          do
          {
            v105 = __ldaxr((unint64_t *)v79);
            v82 = --v105 == 0;
          }
          while (__stlxr(v105, (unint64_t *)v79));
LABEL_344:
          if (!v82)
            goto LABEL_406;
          v339 = (void **)(v79 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v339);
LABEL_405:
          MEMORY[0x219A19A08](v79, 0x1020C405E66F15BLL);
LABEL_406:
          turi::flexible_type_fail(0);
          return;
        case 8:
          v179 = *v5;
          if (*(_QWORD *)*v5 == 1)
            goto LABEL_419;
          v209 = operator new();
          v210 = *v5;
          *(_QWORD *)v209 = *(_QWORD *)*v5;
          *(_QWORD *)(v209 + 8) = *(_QWORD *)(v210 + 8);
          v211 = *(_QWORD *)(v210 + 16);
          *(_QWORD *)(v209 + 16) = v211;
          if (v211)
          {
            v212 = (unsigned int *)(v211 + 8);
            do
              v213 = __ldxr(v212);
            while (__stxr(v213 + 1, v212));
          }
          v214 = *(_OWORD *)(v210 + 24);
          v215 = *(_OWORD *)(v210 + 40);
          *(_OWORD *)(v209 + 56) = *(_OWORD *)(v210 + 56);
          *(_OWORD *)(v209 + 40) = v215;
          *(_OWORD *)(v209 + 24) = v214;
          *v5 = v209;
          *(_QWORD *)v209 = 1;
          do
          {
            v216 = __ldaxr((unint64_t *)v179);
            v188 = --v216 == 0;
          }
          while (__stlxr(v216, (unint64_t *)v179));
LABEL_414:
          if (!v188)
            goto LABEL_419;
          boost::detail::shared_count::~shared_count((unsigned int **)(v179 + 16));
          v204 = (_QWORD *)v179;
          v224 = -235920773;
LABEL_417:
          v205 = v224 | 0x1030C4000000000;
LABEL_418:
          MEMORY[0x219A19A08](v204, v205);
LABEL_419:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v36 = *((_QWORD *)v3 + 1);
          v37 = (unint64_t *)*v5;
          if (*(_QWORD *)*v5 != 1)
          {
            v38 = (_QWORD *)operator new();
            v39 = *v5 + 8;
            *v38 = *(_QWORD *)*v5;
            turi::flexible_type_impl::ndarray<double>::ndarray(v38 + 1, v39);
            *v5 = (uint64_t)v38;
            *v38 = 1;
            do
            {
              v40 = __ldaxr(v37);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v37));
            if (!v41)
            {
              v42 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v37);
              MEMORY[0x219A19A08](v42, 0x1030C407B73B9F7);
            }
          }
          v43 = *v5;
          v44 = (uint64_t *)(*v5 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v44, v36 + 8))
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v46 = *(uint64_t **)(v43 + 24);
          v45 = *(uint64_t **)(v43 + 32);
          if (v45 == v46)
            return;
          if (!*v44)
            return;
          v47 = 1;
          do
          {
            v48 = *v46++;
            v47 *= v48;
          }
          while (v46 != v45);
          if (!v47)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v44);
          v49 = (uint64_t)(*(_QWORD *)(v43 + 32) - *(_QWORD *)(v43 + 24)) >> 3;
          v338 = 0;
          std::vector<unsigned long>::vector(&v339, v49, &v338);
          v50 = v339;
          v51 = v340;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return;
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    v52 = (char *)v51 - (char *)v50;
    if (v52)
    {
      v53 = 0;
      v54 = v52 >> 3;
      v55 = *(uint64_t **)(v36 + 48);
      if (v54 <= 1)
        v54 = 1;
      v56 = v50;
      v57 = v54;
      do
      {
        v59 = (uint64_t)*v56++;
        v58 = v59;
        v60 = *v55++;
        v53 += v60 * v58;
        --v57;
      }
      while (v57);
      v61 = 0;
      v62 = *(double *)(**(_QWORD **)(v36 + 8) + 8 * (*(_QWORD *)(v36 + 72) + v53));
      v63 = *(uint64_t **)(v43 + 48);
      do
      {
        v65 = (uint64_t)*v50++;
        v64 = v65;
        v66 = *v63++;
        v61 += v66 * v64;
        --v54;
      }
      while (v54);
    }
    else
    {
      v61 = 0;
      v62 = *(double *)(**(_QWORD **)(v36 + 8) + 8 * *(_QWORD *)(v36 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v44);
    *(double *)(**(_QWORD **)(v43 + 8) + 8 * (*(_QWORD *)(v43 + 72) + v61)) = v62
                                                                            + *(double *)(**(_QWORD **)(v43 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v43 + 72) + v61));
    v50 = v339;
    v51 = v340;
    v67 = v340 - v339;
    v68 = v67 - 1;
    if ((char *)v340 - (char *)v339 >= 1)
    {
      v69 = *(_QWORD *)(v43 + 24);
      v70 = (char *)v339[v68] + 1;
      v339[v68] = v70;
      if ((unint64_t)v70 >= *(_QWORD *)(v69 + 8 * v68))
      {
        v71 = (unint64_t *)&v50[v67 - 2];
        v72 = v69 - 16;
        while (1)
        {
          v73 = v67 - 1;
          v71[1] = 0;
          if (v67 - 1 <= 0)
            goto LABEL_187;
          v74 = *v71 + 1;
          *v71-- = v74;
          v75 = *(_QWORD *)(v72 + 8 * v67--);
          if (v74 < v75)
          {
            v68 = v73 - 1;
            break;
          }
        }
      }
      v67 = 1;
    }
  }
  while ((v68 & 0x8000000000000000) == 0 && v67);
LABEL_186:
  if (!v50)
    return;
LABEL_187:
  v340 = v50;
  operator delete(v50);
}

void sub_21812EEE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

void sub_21812F020(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x21812F018);
}

BOOL turi::groupby_operators::sum::support_type(uint64_t a1, unsigned int a2)
{
  return a2 < 2;
}

uint64_t turi::group_aggregate_value::set_input_types(uint64_t a1, char **a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 112))(a1, **a2);
}

_QWORD *turi::groupby_operators::sum::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Sum");
}

void turi::groupby_operators::sum::save(turi::groupby_operators::sum *this, turi::oarchive *a2)
{
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 1);
}

void turi::groupby_operators::sum::load(turi::groupby_operators::sum *this, turi::iarchive *a2)
{
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, (_QWORD **)this + 1);
}

void turi::groupby_operators::sum::~sum(turi::groupby_operators::sum *this)
{
  turi::groupby_operators::sum::~sum(this);
  JUMPOUT(0x219A19A08);
}

{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v31;

  *(_QWORD *)this = &unk_24D92F9C0;
  switch(*((_BYTE *)this + 20))
  {
    case 2:
      v2 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *((_QWORD *)this + 1);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = (_QWORD *)*((_QWORD *)this + 1);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *((_QWORD *)this + 1);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (_QWORD *)*((_QWORD *)this + 1);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
}

void turi::group_aggregate_value::print(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  void **v9;
  std::string *v10;
  std::string::size_type size;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  void **v44[13];
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 64))(v41);
  if ((v42 & 0x80u) == 0)
    v4 = v41;
  else
    v4 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v5 = v42;
  else
    v5 = (uint64_t)v41[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(value = ", 9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v47, a1);
  switch(v48)
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_16;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_16:
      v44[0] = *(void ***)MEMORY[0x24BEDB7F0];
      v9 = *(void ***)(MEMORY[0x24BEDB7F0] + 72);
      *(void ***)((char *)v44 + (unint64_t)*(v44[0] - 3)) = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
      v44[2] = v9;
      v44[3] = (void **)(MEMORY[0x24BEDB848] + 16);
      if (v45 < 0)
        operator delete(v44[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v46);
      goto LABEL_23;
    case 2:
      if (*(char *)(v47 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(v47 + 8), *(_QWORD *)(v47 + 16));
      }
      else
      {
        v8 = *(_OWORD *)(v47 + 8);
        v43.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 + 24);
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v8;
      }
      goto LABEL_23;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v44, (_QWORD *)(v47 + 8));
      goto LABEL_23;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v44, (uint64_t *)(v47 + 8));
      goto LABEL_23;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v44, (_QWORD *)(v47 + 8));
      goto LABEL_23;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v47, &v43);
      goto LABEL_23;
    case 7:
      memset(&v43, 0, sizeof(v43));
      goto LABEL_23;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_23;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v44, (_QWORD *)(v47 + 8));
LABEL_23:
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v43;
      else
        v10 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      else
        size = v43.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v10, size);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)")", 1);
      switch(v48)
      {
        case 2:
          v12 = (unint64_t *)v47;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            v15 = v47;
            if (v47)
            {
              if (*(char *)(v47 + 31) < 0)
                operator delete(*(void **)(v47 + 8));
              v16 = v15;
              v17 = 0x1012C404EF22A49;
              goto LABEL_72;
            }
          }
          break;
        case 3:
          v29 = (unint64_t *)v47;
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            v32 = v47;
            if (v47)
            {
              v33 = *(void **)(v47 + 8);
              if (v33)
              {
                *(_QWORD *)(v47 + 16) = v33;
                operator delete(v33);
              }
              v16 = v32;
              v17 = 0x1080C409938AC02;
              goto LABEL_72;
            }
          }
          break;
        case 4:
          v18 = (unint64_t *)v47;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            v21 = v47;
            if (v47)
            {
              v44[0] = (void **)(v47 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v44);
              goto LABEL_65;
            }
          }
          break;
        case 5:
          v34 = (unint64_t *)v47;
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            v21 = v47;
            if (v47)
            {
              v44[0] = (void **)(v47 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v44);
LABEL_65:
              v16 = v21;
              v17 = 0x1020C405E66F15BLL;
              goto LABEL_72;
            }
          }
          break;
        case 8:
          v37 = (unint64_t *)v47;
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            v40 = v47;
            if (v47)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v47 + 16));
              v16 = v40;
              v28 = -235920773;
              goto LABEL_71;
            }
          }
          break;
        case 9:
          v22 = (unint64_t *)v47;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            v25 = v47;
            if (v47)
            {
              v26 = *(void **)(v47 + 48);
              if (v26)
              {
                *(_QWORD *)(v47 + 56) = v26;
                operator delete(v26);
              }
              v27 = *(void **)(v25 + 24);
              if (v27)
              {
                *(_QWORD *)(v25 + 32) = v27;
                operator delete(v27);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v25 + 8);
              v16 = v25;
              v28 = 2071181815;
LABEL_71:
              v17 = v28 | 0x1030C4000000000;
LABEL_72:
              MEMORY[0x219A19A08](v16, v17);
            }
          }
          break;
        default:
          break;
      }
      if ((char)v42 < 0)
        operator delete(v41[0]);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_21812F55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  switch(*(_BYTE *)(v22 - 76))
  {
    case 2:
      v24 = *(unint64_t **)(v22 - 88);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (v26)
        goto LABEL_39;
      v27 = *(_QWORD *)(v22 - 88);
      if (!v27)
        goto LABEL_39;
      if (*(char *)(v27 + 31) < 0)
        operator delete(*(void **)(v27 + 8));
      v28 = (_QWORD *)v27;
      v29 = 0x1012C404EF22A49;
      break;
    case 3:
      v38 = *(unint64_t **)(v22 - 88);
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (v40)
        goto LABEL_39;
      v41 = *(_QWORD **)(v22 - 88);
      if (!v41)
        goto LABEL_39;
      v42 = (void *)v41[1];
      if (v42)
      {
        v41[2] = v42;
        operator delete(v42);
      }
      v28 = v41;
      v29 = 0x1080C409938AC02;
      break;
    case 4:
      v30 = *(unint64_t **)(v22 - 88);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v22 - 88);
      if (!v33)
        goto LABEL_39;
      *(_QWORD *)(v22 - 96) = v33 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
      goto LABEL_31;
    case 5:
      v43 = *(unint64_t **)(v22 - 88);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v33 = *(_QWORD **)(v22 - 88);
      if (!v33)
        goto LABEL_39;
      *(_QWORD *)(v22 - 96) = v33 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
LABEL_31:
      v28 = v33;
      v29 = 0x1020C405E66F15BLL;
      break;
    case 8:
      v46 = *(unint64_t **)(v22 - 88);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = *(_QWORD *)(v22 - 88);
        if (v49)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v49 + 16));
          MEMORY[0x219A19A08](v49, 0x1030C40F1F0227BLL);
        }
        *(_QWORD *)(v22 - 88) = 0;
      }
      goto LABEL_39;
    case 9:
      v34 = *(unint64_t **)(v22 - 88);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_39;
      v37 = *(_QWORD **)(v22 - 88);
      if (!v37)
        goto LABEL_39;
      v28 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v37);
      v29 = 0x1030C407B73B9F7;
      break;
    default:
      goto LABEL_39;
  }
  MEMORY[0x219A19A08](v28, v29);
LABEL_39:
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t turi::groupby_operators::sum::set_input_type(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void **v36;

  switch(*(_BYTE *)(a1 + 20))
  {
    case 2:
      v4 = *(unint64_t **)(a1 + 8);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(_QWORD *)(a1 + 8);
        if (!v7)
          goto LABEL_43;
        if (*(char *)(v7 + 31) < 0)
          operator delete(*(void **)(v7 + 8));
        v8 = (_QWORD *)v7;
        v9 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      v10 = *(unint64_t **)(a1 + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *(_QWORD **)(a1 + 8);
        if (!v13)
          goto LABEL_43;
        v14 = (void *)v13[1];
        if (v14)
        {
          v13[2] = v14;
          operator delete(v14);
        }
        v8 = v13;
        v9 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      v15 = *(unint64_t **)(a1 + 8);
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(_QWORD *)(a1 + 8);
        if (!v18)
          goto LABEL_43;
        v36 = (void **)(v18 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
        goto LABEL_26;
      }
      break;
    case 5:
      v19 = *(unint64_t **)(a1 + 8);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v18 = *(_QWORD *)(a1 + 8);
        if (!v18)
          goto LABEL_43;
        v36 = (void **)(v18 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_26:
        v8 = (_QWORD *)v18;
        v9 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      v22 = *(unint64_t **)(a1 + 8);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(_QWORD *)(a1 + 8);
        if (!v25)
          goto LABEL_43;
        boost::detail::shared_count::~shared_count((unsigned int **)(v25 + 16));
        v8 = (_QWORD *)v25;
        v26 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      v27 = *(unint64_t **)(a1 + 8);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(_QWORD **)(a1 + 8);
        if (v30)
        {
          v31 = (void *)v30[6];
          if (v31)
          {
            v30[7] = v31;
            operator delete(v31);
          }
          v32 = (void *)v30[3];
          if (v32)
          {
            v30[4] = v32;
            operator delete(v32);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
          v8 = v30;
          v26 = 2071181815;
LABEL_41:
          v9 = v26 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v8, v9);
        }
LABEL_43:
        *(_QWORD *)(a1 + 8) = 0;
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = a2;
  switch((int)a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      v33 = operator new();
      *(_QWORD *)v33 = 0;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 8) = 0;
      goto LABEL_48;
    case 6:
      *(_QWORD *)(a1 + 8) = 0x1900000000000000;
      *(_DWORD *)(a1 + 16) = 0;
      break;
    case 8:
      v33 = operator new();
      *(_QWORD *)v33 = 0;
      *(_OWORD *)(v33 + 8) = 0u;
      *(_OWORD *)(v33 + 24) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_QWORD *)(v33 + 56) = 0;
      *(_QWORD *)(v33 + 64) = 3;
LABEL_48:
      *(_QWORD *)(a1 + 8) = v33;
      *(_QWORD *)v33 = 1;
      break;
    case 9:
      v34 = (_QWORD *)operator new();
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v34);
      *(_QWORD *)(a1 + 8) = v34;
      *v34 = 1;
      break;
    default:
      return a2;
  }
  return a2;
}

void sub_21812FA78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1030C407B73B9F7);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::groupby_operators::vector_sum>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92FA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::vector_sum>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92FA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::vector_sum>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

_QWORD *std::allocator<turi::groupby_operators::vector_sum>::construct[abi:ne180100]<turi::groupby_operators::vector_sum>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = &unk_24D92FAC0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 13) = 0;
  *(_BYTE *)(a2 + 20) = 3;
  result = (_QWORD *)operator new();
  *result = 0;
  result[2] = 0;
  result[3] = 0;
  result[1] = 0;
  *(_QWORD *)(a2 + 8) = result;
  *result = 1;
  *(_WORD *)(a2 + 24) = 0;
  return result;
}

uint64_t turi::groupby_operators::vector_sum::new_instance(turi::groupby_operators::vector_sum *this)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = operator new();
  *(_QWORD *)(v2 + 13) = 0;
  *(_QWORD *)v2 = &unk_24D92FAC0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 20) = 3;
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v3[2] = 0;
  v3[3] = 0;
  v3[1] = 0;
  *(_QWORD *)(v2 + 8) = v3;
  *v3 = 1;
  *(_WORD *)(v2 + 24) = 0;
  turi::groupby_operators::vector_sum::set_input_type(v2, *((char *)this + 20));
  return v2;
}

void turi::groupby_operators::vector_sum::add_element_simple(turi::groupby_operators::vector_sum *this, const turi::flexible_type *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  unint64_t **v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  BOOL v48;
  int v49;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  BOOL v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  const std::string::value_type *v65;
  std::string::size_type v66;
  _QWORD *v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  BOOL v81;
  uint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  _QWORD *v115;
  unint64_t v116;
  BOOL v117;
  unint64_t *v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  void *v122;
  double *v123;
  uint64_t v124;
  unint64_t v125;
  double v126;
  unint64_t *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  void *v131;
  double *v132;
  uint64_t v133;
  double v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t *v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  double v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t *v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t *v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  unint64_t v185;
  unint64_t *v186;
  _QWORD *v187;
  unint64_t v188;
  BOOL v189;
  double v190;
  _QWORD *v191;
  unint64_t v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  __int128 v200;
  __int128 v201;
  unint64_t v202;
  BOOL v203;
  _QWORD *v204;
  unint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  unint64_t v208;
  _QWORD *v209;
  unint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  _QWORD *v213;
  unint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  _QWORD *v217;
  unint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int *v227;
  unsigned int v228;
  __int128 v229;
  __int128 v230;
  unint64_t v231;
  double v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  unint64_t v238;
  unsigned int v239;
  _QWORD *v240;
  unint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int *v247;
  unsigned int v248;
  __int128 v249;
  __int128 v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t *v253;
  _QWORD *v254;
  unint64_t v255;
  unint64_t v256;
  void *v257;
  uint64_t v258;
  double *v259;
  uint64_t v260;
  unint64_t v261;
  double *v262;
  double v263;
  _QWORD *v264;
  unint64_t v265;
  _QWORD *v266;
  unint64_t v267;
  _QWORD *v268;
  unint64_t v269;
  _QWORD *v270;
  unint64_t v271;
  _QWORD *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int *v277;
  unsigned int v278;
  __int128 v279;
  __int128 v280;
  unint64_t v281;
  _QWORD *v282;
  unint64_t v283;
  _QWORD *v284;
  unint64_t v285;
  _QWORD *v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unsigned int *v291;
  unsigned int v292;
  __int128 v293;
  __int128 v294;
  unint64_t v295;
  _QWORD *v296;
  unint64_t v297;
  _QWORD *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int *v303;
  unsigned int v304;
  __int128 v305;
  __int128 v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int *v311;
  unsigned int v312;
  __int128 v313;
  __int128 v314;
  unint64_t v315;
  _QWORD *v316;
  unint64_t v317;
  _QWORD *v318;
  unint64_t v319;
  _QWORD *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unsigned int *v325;
  unsigned int v326;
  __int128 v327;
  __int128 v328;
  unint64_t v329;
  _QWORD *v330;
  unint64_t v331;
  void *v332;
  _QWORD *v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int *v338;
  unsigned int v339;
  __int128 v340;
  __int128 v341;
  unint64_t v342;
  _QWORD *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unsigned int *v348;
  unsigned int v349;
  __int128 v350;
  __int128 v351;
  unint64_t v352;
  uint64_t v353;
  void *__p;
  _BYTE *v355;

  if (!*((_BYTE *)this + 24) && *((_BYTE *)a2 + 12) != 7)
  {
    if (*((_BYTE *)this + 25))
    {
      v4 = 1;
      switch(*((_BYTE *)a2 + 12))
      {
        case 3:
          v5 = (_QWORD *)(*(_QWORD *)a2 + 8);
          v6 = (_QWORD *)(*(_QWORD *)a2 + 16);
          v7 = 3;
          goto LABEL_17;
        case 4:
          v5 = (_QWORD *)(*(_QWORD *)a2 + 8);
          v6 = (_QWORD *)(*(_QWORD *)a2 + 16);
          v7 = 4;
          goto LABEL_17;
        case 5:
          v5 = (_QWORD *)(*(_QWORD *)a2 + 8);
          v6 = (_QWORD *)(*(_QWORD *)a2 + 16);
          v7 = 5;
LABEL_17:
          v4 = (uint64_t)(*v6 - *v5) >> v7;
          break;
        case 9:
          v22 = *(uint64_t **)(*(_QWORD *)a2 + 24);
          v21 = *(uint64_t **)(*(_QWORD *)a2 + 32);
          if (v21 == v22)
          {
            v4 = 0;
          }
          else
          {
            v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
            if (v4)
            {
              v4 = 1;
              do
              {
                v23 = *v22++;
                v4 *= v23;
              }
              while (v22 != v21);
            }
          }
          break;
        default:
          break;
      }
      v15 = (uint64_t *)((char *)this + 8);
      v16 = 1;
      switch(*((_BYTE *)this + 20))
      {
        case 3:
          v17 = (_QWORD *)(*v15 + 8);
          v18 = (_QWORD *)(*v15 + 16);
          v19 = 3;
          goto LABEL_22;
        case 4:
          v17 = (_QWORD *)(*v15 + 8);
          v18 = (_QWORD *)(*v15 + 16);
          v19 = 4;
          goto LABEL_22;
        case 5:
          v17 = (_QWORD *)(*v15 + 8);
          v18 = (_QWORD *)(*v15 + 16);
          v19 = 5;
LABEL_22:
          v16 = (uint64_t)(*v18 - *v17) >> v19;
          break;
        case 9:
          v25 = *(uint64_t **)(*v15 + 24);
          v24 = *(uint64_t **)(*v15 + 32);
          if (v24 == v25)
          {
            v16 = 0;
          }
          else
          {
            v16 = *(_QWORD *)(*v15 + 8);
            if (v16)
            {
              v16 = 1;
              do
              {
                v26 = *v25++;
                v16 *= v26;
              }
              while (v25 != v24);
            }
          }
          break;
        default:
          break;
      }
      if (v4 == v16)
      {
        switch(*((_BYTE *)a2 + 12))
        {
          case 0:
            switch(*((_BYTE *)this + 20))
            {
              case 0:
                v20 = *v15 + *(_QWORD *)a2;
                goto LABEL_116;
              case 1:
                v190 = *(double *)v15 + (double)*(uint64_t *)a2;
                goto LABEL_317;
              case 2:
                v53 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v211 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v211, *v15);
                *v15 = (uint64_t)v211;
                *v211 = 1;
                do
                {
                  v212 = __ldaxr((unint64_t *)v53);
                  v56 = --v212 == 0;
                }
                while (__stlxr(v212, (unint64_t *)v53));
                goto LABEL_285;
              case 3:
                v118 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 != 1)
                {
                  v119 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v119, *v15);
                  *v15 = (uint64_t)v119;
                  *v119 = 1;
                  do
                  {
                    v120 = __ldaxr(v118);
                    v121 = v120 - 1;
                  }
                  while (__stlxr(v121, v118));
                  if (!v121)
                  {
                    v122 = (void *)v118[1];
                    if (v122)
                    {
                      v118[2] = (unint64_t)v122;
                      operator delete(v122);
                    }
                    MEMORY[0x219A19A08](v118, 0x1080C409938AC02);
                  }
                }
                v123 = *(double **)(*v15 + 8);
                v124 = *(_QWORD *)(*v15 + 16) - (_QWORD)v123;
                if (v124)
                {
                  v125 = v124 >> 3;
                  v126 = (double)*(uint64_t *)a2;
                  if (v125 <= 1)
                    v125 = 1;
                  do
                  {
                    *v123 = *v123 + v126;
                    ++v123;
                    --v125;
                  }
                  while (v125);
                }
                return;
              case 4:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v270 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v270, *v15);
                *v15 = (uint64_t)v270;
                *v270 = 1;
                do
                {
                  v271 = __ldaxr(v114);
                  v193 = --v271 == 0;
                }
                while (__stlxr(v271, v114));
                goto LABEL_452;
              case 5:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v286 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v286, *v15);
                *v15 = (uint64_t)v286;
                *v286 = 1;
                do
                {
                  v287 = __ldaxr(v114);
                  v117 = --v287 == 0;
                }
                while (__stlxr(v287, v114));
                goto LABEL_394;
              case 6:
                *v15 = *v15 & 0xFF00000000000000 | (*v15 + *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL;
                return;
              case 7:
                goto LABEL_468;
              case 8:
                v194 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v300 = operator new();
                v301 = *v15;
                *(_QWORD *)v300 = *(_QWORD *)*v15;
                *(_QWORD *)(v300 + 8) = *(_QWORD *)(v301 + 8);
                v302 = *(_QWORD *)(v301 + 16);
                *(_QWORD *)(v300 + 16) = v302;
                if (v302)
                {
                  v303 = (unsigned int *)(v302 + 8);
                  do
                    v304 = __ldxr(v303);
                  while (__stxr(v304 + 1, v303));
                }
                v305 = *(_OWORD *)(v301 + 24);
                v306 = *(_OWORD *)(v301 + 40);
                *(_OWORD *)(v300 + 56) = *(_OWORD *)(v301 + 56);
                *(_OWORD *)(v300 + 40) = v306;
                *(_OWORD *)(v300 + 24) = v305;
                *v15 = v300;
                *(_QWORD *)v300 = 1;
                do
                {
                  v307 = __ldaxr((unint64_t *)v194);
                  v203 = --v307 == 0;
                }
                while (__stlxr(v307, (unint64_t *)v194));
                goto LABEL_463;
              case 9:
                v144 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 != 1)
                {
                  v145 = (_QWORD *)operator new();
                  v146 = *v15 + 8;
                  *v145 = *(_QWORD *)*v15;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v145 + 1, v146);
                  *v15 = (uint64_t)v145;
                  *v145 = 1;
                  do
                  {
                    v147 = __ldaxr(v144);
                    v148 = v147 - 1;
                  }
                  while (__stlxr(v148, v144));
                  if (!v148)
                  {
                    v149 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v144);
                    MEMORY[0x219A19A08](v149, 0x1030C407B73B9F7);
                  }
                }
                v150 = (uint64_t *)*v15;
                v152 = *(uint64_t **)(*v15 + 24);
                v151 = *(uint64_t **)(*v15 + 32);
                if (v151 == v152)
                  return;
                if (!v150[1])
                  return;
                v153 = (double)*(uint64_t *)a2;
                v154 = 1;
                do
                {
                  v155 = *v152++;
                  v154 *= v155;
                }
                while (v152 != v151);
                if (!v154)
                  return;
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v150 + 1);
                v156 = (v150[4] - v150[3]) >> 3;
                v353 = 0;
                std::vector<unsigned long>::vector(&__p, v156, &v353);
                do
                {
                  v157 = (uint64_t *)__p;
                  v158 = 0;
                  if (v355 != __p)
                  {
                    v159 = (v355 - (_BYTE *)__p) >> 3;
                    v160 = (uint64_t *)v150[6];
                    if (v159 <= 1)
                      v159 = 1;
                    do
                    {
                      v162 = *v157++;
                      v161 = v162;
                      v163 = *v160++;
                      v158 += v163 * v161;
                      --v159;
                    }
                    while (v159);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v150 + 1);
                  *(double *)(*(_QWORD *)v150[1] + 8 * (v150[9] + v158)) = *(double *)(*(_QWORD *)v150[1]
                                                                                     + 8 * (v150[9] + v158))
                                                                         + v153;
                }
                while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v150 + 1), (uint64_t *)&__p));
                goto LABEL_236;
              default:
                turi::apply_binary_op_ff();
            }
          case 1:
            switch(*((_BYTE *)this + 20))
            {
              case 0:
                v20 = (uint64_t)(*(double *)a2 + (double)*v15);
LABEL_116:
                *v15 = v20;
                return;
              case 1:
                v190 = *(double *)a2 + *(double *)v15;
LABEL_317:
                *(double *)v15 = v190;
                return;
              case 2:
                v53 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v217 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v217, *v15);
                *v15 = (uint64_t)v217;
                *v217 = 1;
                do
                {
                  v218 = __ldaxr((unint64_t *)v53);
                  v56 = --v218 == 0;
                }
                while (__stlxr(v218, (unint64_t *)v53));
                goto LABEL_285;
              case 3:
                v127 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 != 1)
                {
                  v128 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v128, *v15);
                  *v15 = (uint64_t)v128;
                  *v128 = 1;
                  do
                  {
                    v129 = __ldaxr(v127);
                    v130 = v129 - 1;
                  }
                  while (__stlxr(v130, v127));
                  if (!v130)
                  {
                    v131 = (void *)v127[1];
                    if (v131)
                    {
                      v127[2] = (unint64_t)v131;
                      operator delete(v131);
                    }
                    MEMORY[0x219A19A08](v127, 0x1080C409938AC02);
                  }
                }
                v132 = *(double **)(*v15 + 8);
                v133 = *(_QWORD *)(*v15 + 16) - (_QWORD)v132;
                if (v133)
                {
                  v134 = *(double *)a2;
                  v135 = v133 >> 3;
                  if (v135 <= 1)
                    v135 = 1;
                  do
                  {
                    *v132 = v134 + *v132;
                    ++v132;
                    --v135;
                  }
                  while (v135);
                }
                return;
              case 4:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v272 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v272, *v15);
                *v15 = (uint64_t)v272;
                *v272 = 1;
                do
                {
                  v273 = __ldaxr(v114);
                  v193 = --v273 == 0;
                }
                while (__stlxr(v273, v114));
                goto LABEL_452;
              case 5:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v296 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v296, *v15);
                *v15 = (uint64_t)v296;
                *v296 = 1;
                do
                {
                  v297 = __ldaxr(v114);
                  v117 = --v297 == 0;
                }
                while (__stlxr(v297, v114));
                goto LABEL_394;
              case 6:
                v232 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
                v233 = *((_QWORD *)this + 1);
                v234 = v233 + vcvtmd_s64_f64(*(double *)a2);
                *((_QWORD *)this + 1) = v233 & 0xFF00000000000000 | v234 & 0xFFFFFFFFFFFFFFLL;
                v235 = (uint64_t)v232 + *((int *)this + 4);
                if (v235 >= 1000000)
                {
                  *v15 = (v234 + 1) & 0xFFFFFFFFFFFFFFLL | v233 & 0xFF00000000000000;
                  LODWORD(v235) = v235 - 1000000;
                }
                if (v235 >= 0xF4240)
                  turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                *((_DWORD *)this + 4) = v235;
                return;
              case 7:
                goto LABEL_468;
              case 8:
                v194 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v308 = operator new();
                v309 = *v15;
                *(_QWORD *)v308 = *(_QWORD *)*v15;
                *(_QWORD *)(v308 + 8) = *(_QWORD *)(v309 + 8);
                v310 = *(_QWORD *)(v309 + 16);
                *(_QWORD *)(v308 + 16) = v310;
                if (v310)
                {
                  v311 = (unsigned int *)(v310 + 8);
                  do
                    v312 = __ldxr(v311);
                  while (__stxr(v312 + 1, v311));
                }
                v313 = *(_OWORD *)(v309 + 24);
                v314 = *(_OWORD *)(v309 + 40);
                *(_OWORD *)(v308 + 56) = *(_OWORD *)(v309 + 56);
                *(_OWORD *)(v308 + 40) = v314;
                *(_OWORD *)(v308 + 24) = v313;
                *v15 = v308;
                *(_QWORD *)v308 = 1;
                do
                {
                  v315 = __ldaxr((unint64_t *)v194);
                  v203 = --v315 == 0;
                }
                while (__stlxr(v315, (unint64_t *)v194));
                goto LABEL_463;
              case 9:
                v164 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 != 1)
                {
                  v165 = (_QWORD *)operator new();
                  v166 = *v15 + 8;
                  *v165 = *(_QWORD *)*v15;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v165 + 1, v166);
                  *v15 = (uint64_t)v165;
                  *v165 = 1;
                  do
                  {
                    v167 = __ldaxr(v164);
                    v168 = v167 - 1;
                  }
                  while (__stlxr(v168, v164));
                  if (!v168)
                  {
                    v169 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v164);
                    MEMORY[0x219A19A08](v169, 0x1030C407B73B9F7);
                  }
                }
                v170 = (uint64_t *)*v15;
                v172 = *(uint64_t **)(*v15 + 24);
                v171 = *(uint64_t **)(*v15 + 32);
                if (v171 == v172)
                  return;
                if (!v170[1])
                  return;
                v173 = *(double *)a2;
                v174 = 1;
                do
                {
                  v175 = *v172++;
                  v174 *= v175;
                }
                while (v172 != v171);
                if (!v174)
                  return;
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v170 + 1);
                v176 = (v170[4] - v170[3]) >> 3;
                v353 = 0;
                std::vector<unsigned long>::vector(&__p, v176, &v353);
                do
                {
                  v177 = (uint64_t *)__p;
                  v178 = 0;
                  if (v355 != __p)
                  {
                    v179 = (v355 - (_BYTE *)__p) >> 3;
                    v180 = (uint64_t *)v170[6];
                    if (v179 <= 1)
                      v179 = 1;
                    do
                    {
                      v182 = *v177++;
                      v181 = v182;
                      v183 = *v180++;
                      v178 += v183 * v181;
                      --v179;
                    }
                    while (v179);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v170 + 1);
                  *(double *)(*(_QWORD *)v170[1] + 8 * (v170[9] + v178)) = v173
                                                                         + *(double *)(*(_QWORD *)v170[1]
                                                                                     + 8 * (v170[9] + v178));
                }
                while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v170 + 1), (uint64_t *)&__p));
                goto LABEL_236;
              default:
                turi::apply_binary_op_ff();
            }
          case 2:
            switch(*((_BYTE *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_468;
              case 2:
                v59 = *(_QWORD *)a2;
                v60 = *v15;
                if (*(_QWORD *)*v15 != 1)
                {
                  v61 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v61, *v15);
                  *v15 = (uint64_t)v61;
                  *v61 = 1;
                  do
                  {
                    v62 = __ldaxr((unint64_t *)v60);
                    v63 = v62 - 1;
                  }
                  while (__stlxr(v63, (unint64_t *)v60));
                  if (!v63)
                  {
                    if (*(char *)(v60 + 31) < 0)
                      operator delete(*(void **)(v60 + 8));
                    MEMORY[0x219A19A08](v60, 0x1012C404EF22A49);
                  }
                }
                v64 = *(char *)(v59 + 31);
                if (v64 >= 0)
                  v65 = (const std::string::value_type *)(v59 + 8);
                else
                  v65 = *(const std::string::value_type **)(v59 + 8);
                if (v64 >= 0)
                  v66 = *(unsigned __int8 *)(v59 + 31);
                else
                  v66 = *(_QWORD *)(v59 + 16);
                std::string::append((std::string *)(*v15 + 8), v65, v66);
                return;
              case 3:
                v186 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v240 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v240, *v15);
                *v15 = (uint64_t)v240;
                *v240 = 1;
                do
                {
                  v241 = __ldaxr(v186);
                  v189 = --v241 == 0;
                }
                while (__stlxr(v241, v186));
                goto LABEL_433;
              case 4:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v242 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v242, *v15);
                *v15 = (uint64_t)v242;
                *v242 = 1;
                do
                {
                  v243 = __ldaxr(v114);
                  v193 = --v243 == 0;
                }
                while (__stlxr(v243, v114));
                goto LABEL_452;
              case 5:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v184 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v184, *v15);
                *v15 = (uint64_t)v184;
                *v184 = 1;
                do
                {
                  v185 = __ldaxr(v114);
                  v117 = --v185 == 0;
                }
                while (__stlxr(v185, v114));
                goto LABEL_394;
              case 8:
                v194 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v244 = operator new();
                v245 = *v15;
                *(_QWORD *)v244 = *(_QWORD *)*v15;
                *(_QWORD *)(v244 + 8) = *(_QWORD *)(v245 + 8);
                v246 = *(_QWORD *)(v245 + 16);
                *(_QWORD *)(v244 + 16) = v246;
                if (v246)
                {
                  v247 = (unsigned int *)(v246 + 8);
                  do
                    v248 = __ldxr(v247);
                  while (__stxr(v248 + 1, v247));
                }
                v249 = *(_OWORD *)(v245 + 24);
                v250 = *(_OWORD *)(v245 + 40);
                *(_OWORD *)(v244 + 56) = *(_OWORD *)(v245 + 56);
                *(_OWORD *)(v244 + 40) = v250;
                *(_OWORD *)(v244 + 24) = v249;
                *v15 = v244;
                *(_QWORD *)v244 = 1;
                do
                {
                  v251 = __ldaxr((unint64_t *)v194);
                  v203 = --v251 == 0;
                }
                while (__stlxr(v251, (unint64_t *)v194));
                goto LABEL_463;
              case 9:
                v77 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v111 = (_QWORD *)operator new();
                v112 = *v15 + 8;
                *v111 = *(_QWORD *)*v15;
                turi::flexible_type_impl::ndarray<double>::ndarray(v111 + 1, v112);
                *v15 = (uint64_t)v111;
                *v111 = 1;
                do
                {
                  v113 = __ldaxr(v77);
                  v81 = --v113 == 0;
                }
                while (__stlxr(v113, v77));
                goto LABEL_309;
              default:
                turi::apply_binary_op_ff();
            }
          case 3:
            switch(*((_BYTE *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_468;
              case 2:
                v53 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v67 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v67, *v15);
                *v15 = (uint64_t)v67;
                *v67 = 1;
                do
                {
                  v68 = __ldaxr((unint64_t *)v53);
                  v56 = --v68 == 0;
                }
                while (__stlxr(v68, (unint64_t *)v53));
                goto LABEL_285;
              case 3:
                v252 = *(_QWORD *)a2;
                v253 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 != 1)
                {
                  v254 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v254, *v15);
                  *v15 = (uint64_t)v254;
                  *v254 = 1;
                  do
                  {
                    v255 = __ldaxr(v253);
                    v256 = v255 - 1;
                  }
                  while (__stlxr(v256, v253));
                  if (!v256)
                  {
                    v257 = (void *)v253[1];
                    if (v257)
                    {
                      v253[2] = (unint64_t)v257;
                      operator delete(v257);
                    }
                    MEMORY[0x219A19A08](v253, 0x1080C409938AC02);
                  }
                }
                v258 = *v15;
                turi::flexible_type_fail(*(_QWORD *)(*v15 + 16) - *(_QWORD *)(*v15 + 8) == *(_QWORD *)(v252 + 16)
                                                                                         - *(_QWORD *)(v252 + 8));
                v259 = *(double **)(v258 + 8);
                v260 = *(_QWORD *)(v258 + 16) - (_QWORD)v259;
                if (v260)
                {
                  v261 = v260 >> 3;
                  v262 = *(double **)(v252 + 8);
                  if (v261 <= 1)
                    v261 = 1;
                  do
                  {
                    v263 = *v262++;
                    *v259 = v263 + *v259;
                    ++v259;
                    --v261;
                  }
                  while (v261);
                }
                return;
              case 4:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v268 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v268, *v15);
                *v15 = (uint64_t)v268;
                *v268 = 1;
                do
                {
                  v269 = __ldaxr(v114);
                  v193 = --v269 == 0;
                }
                while (__stlxr(v269, v114));
                goto LABEL_452;
              case 5:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v209 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v209, *v15);
                *v15 = (uint64_t)v209;
                *v209 = 1;
                do
                {
                  v210 = __ldaxr(v114);
                  v117 = --v210 == 0;
                }
                while (__stlxr(v210, v114));
                goto LABEL_394;
              case 8:
                v194 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v274 = operator new();
                v275 = *v15;
                *(_QWORD *)v274 = *(_QWORD *)*v15;
                *(_QWORD *)(v274 + 8) = *(_QWORD *)(v275 + 8);
                v276 = *(_QWORD *)(v275 + 16);
                *(_QWORD *)(v274 + 16) = v276;
                if (v276)
                {
                  v277 = (unsigned int *)(v276 + 8);
                  do
                    v278 = __ldxr(v277);
                  while (__stxr(v278 + 1, v277));
                }
                v279 = *(_OWORD *)(v275 + 24);
                v280 = *(_OWORD *)(v275 + 40);
                *(_OWORD *)(v274 + 56) = *(_OWORD *)(v275 + 56);
                *(_OWORD *)(v274 + 40) = v280;
                *(_OWORD *)(v274 + 24) = v279;
                *v15 = v274;
                *(_QWORD *)v274 = 1;
                do
                {
                  v281 = __ldaxr((unint64_t *)v194);
                  v203 = --v281 == 0;
                }
                while (__stlxr(v281, (unint64_t *)v194));
                goto LABEL_463;
              case 9:
                v77 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v136 = (_QWORD *)operator new();
                v137 = *v15 + 8;
                *v136 = *(_QWORD *)*v15;
                turi::flexible_type_impl::ndarray<double>::ndarray(v136 + 1, v137);
                *v15 = (uint64_t)v136;
                *v136 = 1;
                do
                {
                  v138 = __ldaxr(v77);
                  v81 = --v138 == 0;
                }
                while (__stlxr(v138, v77));
                goto LABEL_309;
              default:
                turi::apply_binary_op_ff();
            }
          case 4:
            switch(*((_BYTE *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_468;
              case 2:
                v53 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v54 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v54, *v15);
                *v15 = (uint64_t)v54;
                *v54 = 1;
                do
                {
                  v55 = __ldaxr((unint64_t *)v53);
                  v56 = --v55 == 0;
                }
                while (__stlxr(v55, (unint64_t *)v53));
                goto LABEL_285;
              case 3:
                v186 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v187 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v187, *v15);
                *v15 = (uint64_t)v187;
                *v187 = 1;
                do
                {
                  v188 = __ldaxr(v186);
                  v189 = --v188 == 0;
                }
                while (__stlxr(v188, v186));
                goto LABEL_433;
              case 4:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v191 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v191, *v15);
                *v15 = (uint64_t)v191;
                *v191 = 1;
                do
                {
                  v192 = __ldaxr(v114);
                  v193 = --v192 == 0;
                }
                while (__stlxr(v192, v114));
                goto LABEL_452;
              case 5:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v115 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v115, *v15);
                *v15 = (uint64_t)v115;
                *v115 = 1;
                do
                {
                  v116 = __ldaxr(v114);
                  v117 = --v116 == 0;
                }
                while (__stlxr(v116, v114));
                goto LABEL_394;
              case 8:
                v194 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v195 = operator new();
                v196 = *v15;
                *(_QWORD *)v195 = *(_QWORD *)*v15;
                *(_QWORD *)(v195 + 8) = *(_QWORD *)(v196 + 8);
                v197 = *(_QWORD *)(v196 + 16);
                *(_QWORD *)(v195 + 16) = v197;
                if (v197)
                {
                  v198 = (unsigned int *)(v197 + 8);
                  do
                    v199 = __ldxr(v198);
                  while (__stxr(v199 + 1, v198));
                }
                v200 = *(_OWORD *)(v196 + 24);
                v201 = *(_OWORD *)(v196 + 40);
                *(_OWORD *)(v195 + 56) = *(_OWORD *)(v196 + 56);
                *(_OWORD *)(v195 + 40) = v201;
                *(_OWORD *)(v195 + 24) = v200;
                *v15 = v195;
                *(_QWORD *)v195 = 1;
                do
                {
                  v202 = __ldaxr((unint64_t *)v194);
                  v203 = --v202 == 0;
                }
                while (__stlxr(v202, (unint64_t *)v194));
                goto LABEL_463;
              case 9:
                v77 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v78 = (_QWORD *)operator new();
                v79 = *v15 + 8;
                *v78 = *(_QWORD *)*v15;
                turi::flexible_type_impl::ndarray<double>::ndarray(v78 + 1, v79);
                *v15 = (uint64_t)v78;
                *v78 = 1;
                do
                {
                  v80 = __ldaxr(v77);
                  v81 = --v80 == 0;
                }
                while (__stlxr(v80, v77));
                goto LABEL_309;
              default:
                turi::apply_binary_op_ff();
            }
          case 5:
            switch(*((_BYTE *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_468;
              case 2:
                v53 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v71 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v71, *v15);
                *v15 = (uint64_t)v71;
                *v71 = 1;
                do
                {
                  v72 = __ldaxr((unint64_t *)v53);
                  v56 = --v72 == 0;
                }
                while (__stlxr(v72, (unint64_t *)v53));
                goto LABEL_285;
              case 3:
                v186 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v316 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v316, *v15);
                *v15 = (uint64_t)v316;
                *v316 = 1;
                do
                {
                  v317 = __ldaxr(v186);
                  v189 = --v317 == 0;
                }
                while (__stlxr(v317, v186));
                goto LABEL_433;
              case 4:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v318 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v318, *v15);
                *v15 = (uint64_t)v318;
                *v318 = 1;
                do
                {
                  v319 = __ldaxr(v114);
                  v193 = --v319 == 0;
                }
                while (__stlxr(v319, v114));
                goto LABEL_452;
              case 5:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v266 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v266, *v15);
                *v15 = (uint64_t)v266;
                *v266 = 1;
                do
                {
                  v267 = __ldaxr(v114);
                  v117 = --v267 == 0;
                }
                while (__stlxr(v267, v114));
                goto LABEL_394;
              case 8:
                v194 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v322 = operator new();
                v323 = *v15;
                *(_QWORD *)v322 = *(_QWORD *)*v15;
                *(_QWORD *)(v322 + 8) = *(_QWORD *)(v323 + 8);
                v324 = *(_QWORD *)(v323 + 16);
                *(_QWORD *)(v322 + 16) = v324;
                if (v324)
                {
                  v325 = (unsigned int *)(v324 + 8);
                  do
                    v326 = __ldxr(v325);
                  while (__stxr(v326 + 1, v325));
                }
                v327 = *(_OWORD *)(v323 + 24);
                v328 = *(_OWORD *)(v323 + 40);
                *(_OWORD *)(v322 + 56) = *(_OWORD *)(v323 + 56);
                *(_OWORD *)(v322 + 40) = v328;
                *(_OWORD *)(v322 + 24) = v327;
                *v15 = v322;
                *(_QWORD *)v322 = 1;
                do
                {
                  v329 = __ldaxr((unint64_t *)v194);
                  v203 = --v329 == 0;
                }
                while (__stlxr(v329, (unint64_t *)v194));
                goto LABEL_463;
              case 9:
                v77 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v206 = (_QWORD *)operator new();
                v207 = *v15 + 8;
                *v206 = *(_QWORD *)*v15;
                turi::flexible_type_impl::ndarray<double>::ndarray(v206 + 1, v207);
                *v15 = (uint64_t)v206;
                *v206 = 1;
                do
                {
                  v208 = __ldaxr(v77);
                  v81 = --v208 == 0;
                }
                while (__stlxr(v208, v77));
                goto LABEL_309;
              default:
                turi::apply_binary_op_ff();
            }
          case 6:
            switch(*((_BYTE *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_468;
              case 2:
                v53 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v73 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v73, *v15);
                *v15 = (uint64_t)v73;
                *v73 = 1;
                do
                {
                  v74 = __ldaxr((unint64_t *)v53);
                  v56 = --v74 == 0;
                }
                while (__stlxr(v74, (unint64_t *)v53));
                goto LABEL_285;
              case 3:
                v186 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v320 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v320, *v15);
                *v15 = (uint64_t)v320;
                *v320 = 1;
                do
                {
                  v321 = __ldaxr(v186);
                  v189 = --v321 == 0;
                }
                while (__stlxr(v321, v186));
                goto LABEL_433;
              case 4:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v333 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v333, *v15);
                *v15 = (uint64_t)v333;
                *v333 = 1;
                do
                {
                  v334 = __ldaxr(v114);
                  v193 = --v334 == 0;
                }
                while (__stlxr(v334, v114));
                goto LABEL_452;
              case 5:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v284 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v284, *v15);
                *v15 = (uint64_t)v284;
                *v284 = 1;
                do
                {
                  v285 = __ldaxr(v114);
                  v117 = --v285 == 0;
                }
                while (__stlxr(v285, v114));
                goto LABEL_394;
              case 8:
                v194 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v335 = operator new();
                v336 = *v15;
                *(_QWORD *)v335 = *(_QWORD *)*v15;
                *(_QWORD *)(v335 + 8) = *(_QWORD *)(v336 + 8);
                v337 = *(_QWORD *)(v336 + 16);
                *(_QWORD *)(v335 + 16) = v337;
                if (v337)
                {
                  v338 = (unsigned int *)(v337 + 8);
                  do
                    v339 = __ldxr(v338);
                  while (__stxr(v339 + 1, v338));
                }
                v340 = *(_OWORD *)(v336 + 24);
                v341 = *(_OWORD *)(v336 + 40);
                *(_OWORD *)(v335 + 56) = *(_OWORD *)(v336 + 56);
                *(_OWORD *)(v335 + 40) = v341;
                *(_OWORD *)(v335 + 24) = v340;
                *v15 = v335;
                *(_QWORD *)v335 = 1;
                do
                {
                  v342 = __ldaxr((unint64_t *)v194);
                  v203 = --v342 == 0;
                }
                while (__stlxr(v342, (unint64_t *)v194));
                goto LABEL_463;
              case 9:
                v77 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v221 = (_QWORD *)operator new();
                v222 = *v15 + 8;
                *v221 = *(_QWORD *)*v15;
                turi::flexible_type_impl::ndarray<double>::ndarray(v221 + 1, v222);
                *v15 = (uint64_t)v221;
                *v221 = 1;
                do
                {
                  v223 = __ldaxr(v77);
                  v81 = --v223 == 0;
                }
                while (__stlxr(v223, v77));
                goto LABEL_309;
              default:
                turi::apply_binary_op_ff();
            }
          case 7:
            switch(*((_BYTE *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_468;
              case 2:
                v53 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v69 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v69, *v15);
                *v15 = (uint64_t)v69;
                *v69 = 1;
                do
                {
                  v70 = __ldaxr((unint64_t *)v53);
                  v56 = --v70 == 0;
                }
                while (__stlxr(v70, (unint64_t *)v53));
                goto LABEL_285;
              case 3:
                v186 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v264 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v264, *v15);
                *v15 = (uint64_t)v264;
                *v264 = 1;
                do
                {
                  v265 = __ldaxr(v186);
                  v189 = --v265 == 0;
                }
                while (__stlxr(v265, v186));
                goto LABEL_433;
              case 4:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v282 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v282, *v15);
                *v15 = (uint64_t)v282;
                *v282 = 1;
                do
                {
                  v283 = __ldaxr(v114);
                  v193 = --v283 == 0;
                }
                while (__stlxr(v283, v114));
                goto LABEL_452;
              case 5:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v215 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v215, *v15);
                *v15 = (uint64_t)v215;
                *v215 = 1;
                do
                {
                  v216 = __ldaxr(v114);
                  v117 = --v216 == 0;
                }
                while (__stlxr(v216, v114));
                goto LABEL_394;
              case 8:
                v194 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v288 = operator new();
                v289 = *v15;
                *(_QWORD *)v288 = *(_QWORD *)*v15;
                *(_QWORD *)(v288 + 8) = *(_QWORD *)(v289 + 8);
                v290 = *(_QWORD *)(v289 + 16);
                *(_QWORD *)(v288 + 16) = v290;
                if (v290)
                {
                  v291 = (unsigned int *)(v290 + 8);
                  do
                    v292 = __ldxr(v291);
                  while (__stxr(v292 + 1, v291));
                }
                v293 = *(_OWORD *)(v289 + 24);
                v294 = *(_OWORD *)(v289 + 40);
                *(_OWORD *)(v288 + 56) = *(_OWORD *)(v289 + 56);
                *(_OWORD *)(v288 + 40) = v294;
                *(_OWORD *)(v288 + 24) = v293;
                *v15 = v288;
                *(_QWORD *)v288 = 1;
                do
                {
                  v295 = __ldaxr((unint64_t *)v194);
                  v203 = --v295 == 0;
                }
                while (__stlxr(v295, (unint64_t *)v194));
                goto LABEL_463;
              case 9:
                v77 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v141 = (_QWORD *)operator new();
                v142 = *v15 + 8;
                *v141 = *(_QWORD *)*v15;
                turi::flexible_type_impl::ndarray<double>::ndarray(v141 + 1, v142);
                *v15 = (uint64_t)v141;
                *v141 = 1;
                do
                {
                  v143 = __ldaxr(v77);
                  v81 = --v143 == 0;
                }
                while (__stlxr(v143, v77));
                goto LABEL_309;
              default:
                turi::apply_binary_op_ff();
            }
          case 8:
            switch(*((_BYTE *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_468;
              case 2:
                v53 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v75 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v75, *v15);
                *v15 = (uint64_t)v75;
                *v75 = 1;
                do
                {
                  v76 = __ldaxr((unint64_t *)v53);
                  v56 = --v76 == 0;
                }
                while (__stlxr(v76, (unint64_t *)v53));
                goto LABEL_285;
              case 3:
                v186 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v330 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v330, *v15);
                *v15 = (uint64_t)v330;
                *v330 = 1;
                do
                {
                  v331 = __ldaxr(v186);
                  v189 = --v331 == 0;
                }
                while (__stlxr(v331, v186));
                goto LABEL_433;
              case 4:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v343 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v343, *v15);
                *v15 = (uint64_t)v343;
                *v343 = 1;
                do
                {
                  v344 = __ldaxr(v114);
                  v193 = --v344 == 0;
                }
                while (__stlxr(v344, v114));
                goto LABEL_452;
              case 5:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v298 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v298, *v15);
                *v15 = (uint64_t)v298;
                *v298 = 1;
                do
                {
                  v299 = __ldaxr(v114);
                  v117 = --v299 == 0;
                }
                while (__stlxr(v299, v114));
                goto LABEL_394;
              case 8:
                v194 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v345 = operator new();
                v346 = *v15;
                *(_QWORD *)v345 = *(_QWORD *)*v15;
                *(_QWORD *)(v345 + 8) = *(_QWORD *)(v346 + 8);
                v347 = *(_QWORD *)(v346 + 16);
                *(_QWORD *)(v345 + 16) = v347;
                if (v347)
                {
                  v348 = (unsigned int *)(v347 + 8);
                  do
                    v349 = __ldxr(v348);
                  while (__stxr(v349 + 1, v348));
                }
                v350 = *(_OWORD *)(v346 + 24);
                v351 = *(_OWORD *)(v346 + 40);
                *(_OWORD *)(v345 + 56) = *(_OWORD *)(v346 + 56);
                *(_OWORD *)(v345 + 40) = v351;
                *(_OWORD *)(v345 + 24) = v350;
                *v15 = v345;
                *(_QWORD *)v345 = 1;
                do
                {
                  v352 = __ldaxr((unint64_t *)v194);
                  v203 = --v352 == 0;
                }
                while (__stlxr(v352, (unint64_t *)v194));
                goto LABEL_463;
              case 9:
                v77 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v236 = (_QWORD *)operator new();
                v237 = *v15 + 8;
                *v236 = *(_QWORD *)*v15;
                turi::flexible_type_impl::ndarray<double>::ndarray(v236 + 1, v237);
                *v15 = (uint64_t)v236;
                *v236 = 1;
                do
                {
                  v238 = __ldaxr(v77);
                  v81 = --v238 == 0;
                }
                while (__stlxr(v238, v77));
LABEL_309:
                if (!v81)
                  goto LABEL_468;
                v219 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v77);
                v239 = 2071181815;
                goto LABEL_466;
              default:
                turi::apply_binary_op_ff();
            }
          case 9:
            switch(*((_BYTE *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_468;
              case 2:
                v53 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v57 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v57, *v15);
                *v15 = (uint64_t)v57;
                *v57 = 1;
                do
                {
                  v58 = __ldaxr((unint64_t *)v53);
                  v56 = --v58 == 0;
                }
                while (__stlxr(v58, (unint64_t *)v53));
LABEL_285:
                if (!v56)
                  goto LABEL_468;
                if (*(char *)(v53 + 31) < 0)
                  operator delete(*(void **)(v53 + 8));
                v219 = (_QWORD *)v53;
                v220 = 0x1012C404EF22A49;
                goto LABEL_467;
              case 3:
                v186 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v204 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v204, *v15);
                *v15 = (uint64_t)v204;
                *v204 = 1;
                do
                {
                  v205 = __ldaxr(v186);
                  v189 = --v205 == 0;
                }
                while (__stlxr(v205, v186));
LABEL_433:
                if (!v189)
                  goto LABEL_468;
                v332 = (void *)v186[1];
                if (v332)
                {
                  v186[2] = (unint64_t)v332;
                  operator delete(v332);
                }
                v219 = v186;
                v220 = 0x1080C409938AC02;
                goto LABEL_467;
              case 4:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v213 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v213, *v15);
                *v15 = (uint64_t)v213;
                *v213 = 1;
                do
                {
                  v214 = __ldaxr(v114);
                  v193 = --v214 == 0;
                }
                while (__stlxr(v214, v114));
LABEL_452:
                if (!v193)
                  goto LABEL_456;
                __p = v114 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                goto LABEL_455;
              case 5:
                v114 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_456;
                v139 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v139, *v15);
                *v15 = (uint64_t)v139;
                *v139 = 1;
                do
                {
                  v140 = __ldaxr(v114);
                  v117 = --v140 == 0;
                }
                while (__stlxr(v140, v114));
LABEL_394:
                if (!v117)
                  goto LABEL_456;
                __p = v114 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_455:
                MEMORY[0x219A19A08](v114, 0x1020C405E66F15BLL);
LABEL_456:
                turi::flexible_type_fail(0);
                break;
              case 8:
                v194 = *v15;
                if (*(_QWORD *)*v15 == 1)
                  goto LABEL_468;
                v224 = operator new();
                v225 = *v15;
                *(_QWORD *)v224 = *(_QWORD *)*v15;
                *(_QWORD *)(v224 + 8) = *(_QWORD *)(v225 + 8);
                v226 = *(_QWORD *)(v225 + 16);
                *(_QWORD *)(v224 + 16) = v226;
                if (v226)
                {
                  v227 = (unsigned int *)(v226 + 8);
                  do
                    v228 = __ldxr(v227);
                  while (__stxr(v228 + 1, v227));
                }
                v229 = *(_OWORD *)(v225 + 24);
                v230 = *(_OWORD *)(v225 + 40);
                *(_OWORD *)(v224 + 56) = *(_OWORD *)(v225 + 56);
                *(_OWORD *)(v224 + 40) = v230;
                *(_OWORD *)(v224 + 24) = v229;
                *v15 = v224;
                *(_QWORD *)v224 = 1;
                do
                {
                  v231 = __ldaxr((unint64_t *)v194);
                  v203 = --v231 == 0;
                }
                while (__stlxr(v231, (unint64_t *)v194));
LABEL_463:
                if (!v203)
                  goto LABEL_468;
                boost::detail::shared_count::~shared_count((unsigned int **)(v194 + 16));
                v219 = (_QWORD *)v194;
                v239 = -235920773;
LABEL_466:
                v220 = v239 | 0x1030C4000000000;
LABEL_467:
                MEMORY[0x219A19A08](v219, v220);
LABEL_468:
                turi::flexible_type_fail(0);
                break;
              case 9:
                v82 = *(_QWORD *)a2;
                v83 = (unint64_t *)*v15;
                if (*(_QWORD *)*v15 != 1)
                {
                  v84 = (_QWORD *)operator new();
                  v85 = *v15 + 8;
                  *v84 = *(_QWORD *)*v15;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v84 + 1, v85);
                  *v15 = (uint64_t)v84;
                  *v84 = 1;
                  do
                  {
                    v86 = __ldaxr(v83);
                    v87 = v86 - 1;
                  }
                  while (__stlxr(v87, v83));
                  if (!v87)
                  {
                    v88 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v83);
                    MEMORY[0x219A19A08](v88, 0x1030C407B73B9F7);
                  }
                }
                v89 = *v15;
                v90 = (uint64_t *)(*v15 + 8);
                if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v90, v82 + 8))
                  turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                v92 = *(uint64_t **)(v89 + 24);
                v91 = *(uint64_t **)(v89 + 32);
                if (v91 != v92)
                {
                  if (*v90)
                  {
                    v93 = 1;
                    do
                    {
                      v94 = *v92++;
                      v93 *= v94;
                    }
                    while (v92 != v91);
                    if (v93)
                    {
                      turi::flexible_type_impl::ndarray<double>::ensure_unique(v90);
                      v95 = (uint64_t)(*(_QWORD *)(v89 + 32) - *(_QWORD *)(v89 + 24)) >> 3;
                      v353 = 0;
                      std::vector<unsigned long>::vector(&__p, v95, &v353);
                      do
                      {
                        v96 = (uint64_t *)__p;
                        if (v355 == __p)
                        {
                          v105 = 0;
                          v106 = *(double *)(**(_QWORD **)(v82 + 8) + 8 * *(_QWORD *)(v82 + 72));
                        }
                        else
                        {
                          v97 = 0;
                          v98 = (v355 - (_BYTE *)__p) >> 3;
                          v99 = *(uint64_t **)(v82 + 48);
                          if (v98 <= 1)
                            v98 = 1;
                          v100 = (uint64_t *)__p;
                          v101 = v98;
                          do
                          {
                            v103 = *v100++;
                            v102 = v103;
                            v104 = *v99++;
                            v97 += v104 * v102;
                            --v101;
                          }
                          while (v101);
                          v105 = 0;
                          v106 = *(double *)(**(_QWORD **)(v82 + 8) + 8 * (*(_QWORD *)(v82 + 72) + v97));
                          v107 = *(uint64_t **)(v89 + 48);
                          do
                          {
                            v109 = *v96++;
                            v108 = v109;
                            v110 = *v107++;
                            v105 += v110 * v108;
                            --v98;
                          }
                          while (v98);
                        }
                        turi::flexible_type_impl::ndarray<double>::ensure_unique(v90);
                        *(double *)(**(_QWORD **)(v89 + 8) + 8 * (*(_QWORD *)(v89 + 72) + v105)) = v106
                                                                                                 + *(double *)(**(_QWORD **)(v89 + 8) + 8 * (*(_QWORD *)(v89 + 72) + v105));
                      }
                      while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v90, (uint64_t *)&__p));
LABEL_236:
                      if (__p)
                      {
                        v355 = __p;
                        operator delete(__p);
                      }
                    }
                  }
                }
                return;
              default:
                turi::apply_binary_op_ff();
            }
            return;
          default:
            turi::apply_binary_op_ff();
        }
      }
      else
      {
        *((_BYTE *)this + 24) = 1;
      }
    }
    else
    {
      v8 = (unint64_t **)((char *)this + 8);
      if ((turi::groupby_operators::vector_sum *)((char *)this + 8) != a2)
      {
        switch(*((_BYTE *)this + 20))
        {
          case 2:
            v9 = *v8;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v12 = *v8;
              if (!*v8)
                goto LABEL_70;
              if (*((char *)v12 + 31) < 0)
                operator delete((void *)v12[1]);
              v13 = v12;
              v14 = 0x1012C404EF22A49;
              goto LABEL_69;
            }
            break;
          case 3:
            v35 = *v8;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              v38 = *v8;
              if (!*v8)
                goto LABEL_70;
              v39 = (void *)v38[1];
              if (v39)
              {
                v38[2] = (unint64_t)v39;
                operator delete(v39);
              }
              v13 = v38;
              v14 = 0x1080C409938AC02;
              goto LABEL_69;
            }
            break;
          case 4:
            v27 = *v8;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              v30 = *v8;
              if (!*v8)
                goto LABEL_70;
              __p = v30 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_62;
            }
            break;
          case 5:
            v40 = *v8;
            do
            {
              v41 = __ldaxr(v40);
              v42 = v41 - 1;
            }
            while (__stlxr(v42, v40));
            if (!v42)
            {
              v30 = *v8;
              if (!*v8)
                goto LABEL_70;
              __p = v30 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_62:
              v13 = v30;
              v14 = 0x1020C405E66F15BLL;
              goto LABEL_69;
            }
            break;
          case 8:
            v43 = *v8;
            do
            {
              v44 = __ldaxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
            {
              v46 = *v8;
              if (!*v8)
                goto LABEL_70;
              boost::detail::shared_count::~shared_count((unsigned int **)v46 + 2);
              v13 = v46;
              v34 = -235920773;
              goto LABEL_68;
            }
            break;
          case 9:
            v31 = *v8;
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              if (*v8)
              {
                v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v8);
                v34 = 2071181815;
LABEL_68:
                v14 = v34 | 0x1030C4000000000;
LABEL_69:
                MEMORY[0x219A19A08](v13, v14);
              }
LABEL_70:
              *v8 = 0;
            }
            break;
          default:
            break;
        }
        v47 = *(unint64_t **)a2;
        *(_QWORD *)((char *)this + 13) = *(_QWORD *)((char *)a2 + 5);
        *v8 = v47;
        LODWORD(v47) = *((unsigned __int8 *)a2 + 12);
        *((_BYTE *)this + 20) = (_BYTE)v47;
        v48 = v47 > 9;
        v49 = (1 << (char)v47) & 0x33C;
        if (!v48 && v49 != 0)
        {
          v51 = *v8;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 + 1, v51));
        }
      }
      *((_BYTE *)this + 25) = 1;
    }
  }
}

void sub_21813209C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x219A19A08](v11, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

void turi::groupby_operators::vector_sum::combine(uint64_t a1, void *lpsrc)
{
  double *v3;
  double *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  BOOL v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  unint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  _QWORD *v87;
  unint64_t v88;
  BOOL v89;
  unint64_t *v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  double *v95;
  uint64_t v96;
  unint64_t v97;
  double v98;
  unint64_t *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  void *v103;
  double *v104;
  uint64_t v105;
  double v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  double v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  unint64_t v157;
  unint64_t *v158;
  _QWORD *v159;
  unint64_t v160;
  BOOL v161;
  double v162;
  _QWORD *v163;
  unint64_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int *v170;
  unsigned int v171;
  __int128 v172;
  __int128 v173;
  unint64_t v174;
  BOOL v175;
  _QWORD *v176;
  unint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  unint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  _QWORD *v189;
  unint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int *v199;
  unsigned int v200;
  __int128 v201;
  __int128 v202;
  unint64_t v203;
  double v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  unint64_t v210;
  unsigned int v211;
  _QWORD *v212;
  unint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  __int128 v221;
  __int128 v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t *v225;
  _QWORD *v226;
  unint64_t v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  double *v231;
  uint64_t v232;
  unint64_t v233;
  double *v234;
  double v235;
  _QWORD *v236;
  unint64_t v237;
  _QWORD *v238;
  unint64_t v239;
  _QWORD *v240;
  unint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  _QWORD *v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  __int128 v251;
  __int128 v252;
  unint64_t v253;
  _QWORD *v254;
  unint64_t v255;
  _QWORD *v256;
  unint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int *v263;
  unsigned int v264;
  __int128 v265;
  __int128 v266;
  unint64_t v267;
  _QWORD *v268;
  unint64_t v269;
  _QWORD *v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int *v275;
  unsigned int v276;
  __int128 v277;
  __int128 v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int *v283;
  unsigned int v284;
  __int128 v285;
  __int128 v286;
  unint64_t v287;
  _QWORD *v288;
  unint64_t v289;
  _QWORD *v290;
  unint64_t v291;
  _QWORD *v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int *v297;
  unsigned int v298;
  __int128 v299;
  __int128 v300;
  unint64_t v301;
  _QWORD *v302;
  unint64_t v303;
  void *v304;
  _QWORD *v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int *v310;
  unsigned int v311;
  __int128 v312;
  __int128 v313;
  unint64_t v314;
  _QWORD *v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int *v320;
  unsigned int v321;
  __int128 v322;
  __int128 v323;
  unint64_t v324;
  uint64_t v325;
  void *__p;
  _BYTE *v327;

  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  if (!*((_BYTE *)v3 + 24) && !*(_BYTE *)(a1 + 24))
  {
    if (*(_BYTE *)(a1 + 25))
    {
      if (*((_BYTE *)v3 + 25))
      {
        v5 = (uint64_t *)(a1 + 8);
        v6 = 1;
        switch(*(_BYTE *)(a1 + 20))
        {
          case 3:
            v7 = (_QWORD *)(*v5 + 8);
            v8 = (_QWORD *)(*v5 + 16);
            v9 = 3;
            goto LABEL_12;
          case 4:
            v7 = (_QWORD *)(*v5 + 8);
            v8 = (_QWORD *)(*v5 + 16);
            v9 = 4;
            goto LABEL_12;
          case 5:
            v7 = (_QWORD *)(*v5 + 8);
            v8 = (_QWORD *)(*v5 + 16);
            v9 = 5;
LABEL_12:
            v6 = (uint64_t)(*v8 - *v7) >> v9;
            break;
          case 9:
            v19 = *(uint64_t **)(*v5 + 24);
            v18 = *(uint64_t **)(*v5 + 32);
            if (v18 == v19)
            {
              v6 = 0;
            }
            else
            {
              v6 = *(_QWORD *)(*v5 + 8);
              if (v6)
              {
                v6 = 1;
                do
                {
                  v20 = *v19++;
                  v6 *= v20;
                }
                while (v19 != v18);
              }
            }
            break;
          default:
            break;
        }
        v10 = 1;
        switch(*((_BYTE *)v3 + 20))
        {
          case 3:
            v11 = *((_QWORD *)v3 + 1);
            v12 = (_QWORD *)(v11 + 8);
            v13 = (_QWORD *)(v11 + 16);
            v14 = 3;
            goto LABEL_17;
          case 4:
            v16 = *((_QWORD *)v3 + 1);
            v12 = (_QWORD *)(v16 + 8);
            v13 = (_QWORD *)(v16 + 16);
            v14 = 4;
            goto LABEL_17;
          case 5:
            v15 = *((_QWORD *)v3 + 1);
            v12 = (_QWORD *)(v15 + 8);
            v13 = (_QWORD *)(v15 + 16);
            v14 = 5;
LABEL_17:
            v10 = (uint64_t)(*v13 - *v12) >> v14;
            break;
          case 9:
            v21 = (_QWORD *)*((_QWORD *)v3 + 1);
            v23 = (uint64_t *)v21[3];
            v22 = (uint64_t *)v21[4];
            if (v22 == v23)
            {
              v10 = 0;
            }
            else
            {
              v10 = v21[1];
              if (v10)
              {
                v10 = 1;
                do
                {
                  v24 = *v23++;
                  v10 *= v24;
                }
                while (v23 != v22);
              }
            }
            break;
          default:
            break;
        }
        if (v6 == v10)
        {
          switch(*((_BYTE *)v3 + 20))
          {
            case 0:
              switch(*(_BYTE *)(a1 + 20))
              {
                case 0:
                  v17 = *v5 + *((_QWORD *)v3 + 1);
                  goto LABEL_72;
                case 1:
                  v162 = *(double *)v5 + (double)*((uint64_t *)v3 + 1);
                  goto LABEL_273;
                case 2:
                  v25 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v183 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v183, *v5);
                  *v5 = (uint64_t)v183;
                  *v183 = 1;
                  do
                  {
                    v184 = __ldaxr((unint64_t *)v25);
                    v28 = --v184 == 0;
                  }
                  while (__stlxr(v184, (unint64_t *)v25));
                  goto LABEL_241;
                case 3:
                  v90 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 != 1)
                  {
                    v91 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v91, *v5);
                    *v5 = (uint64_t)v91;
                    *v91 = 1;
                    do
                    {
                      v92 = __ldaxr(v90);
                      v93 = v92 - 1;
                    }
                    while (__stlxr(v93, v90));
                    if (!v93)
                    {
                      v94 = (void *)v90[1];
                      if (v94)
                      {
                        v90[2] = (unint64_t)v94;
                        operator delete(v94);
                      }
                      MEMORY[0x219A19A08](v90, 0x1080C409938AC02);
                    }
                  }
                  v95 = *(double **)(*v5 + 8);
                  v96 = *(_QWORD *)(*v5 + 16) - (_QWORD)v95;
                  if (v96)
                  {
                    v97 = v96 >> 3;
                    v98 = (double)*((uint64_t *)v4 + 1);
                    if (v97 <= 1)
                      v97 = 1;
                    do
                    {
                      *v95 = *v95 + v98;
                      ++v95;
                      --v97;
                    }
                    while (v97);
                  }
                  return;
                case 4:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v242 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v242, *v5);
                  *v5 = (uint64_t)v242;
                  *v242 = 1;
                  do
                  {
                    v243 = __ldaxr(v86);
                    v165 = --v243 == 0;
                  }
                  while (__stlxr(v243, v86));
                  goto LABEL_408;
                case 5:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v258 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v258, *v5);
                  *v5 = (uint64_t)v258;
                  *v258 = 1;
                  do
                  {
                    v259 = __ldaxr(v86);
                    v89 = --v259 == 0;
                  }
                  while (__stlxr(v259, v86));
                  goto LABEL_350;
                case 6:
                  *v5 = *v5 & 0xFF00000000000000 | (*v5 + *((_QWORD *)v3 + 1)) & 0xFFFFFFFFFFFFFFLL;
                  return;
                case 7:
                  goto LABEL_424;
                case 8:
                  v166 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v272 = operator new();
                  v273 = *v5;
                  *(_QWORD *)v272 = *(_QWORD *)*v5;
                  *(_QWORD *)(v272 + 8) = *(_QWORD *)(v273 + 8);
                  v274 = *(_QWORD *)(v273 + 16);
                  *(_QWORD *)(v272 + 16) = v274;
                  if (v274)
                  {
                    v275 = (unsigned int *)(v274 + 8);
                    do
                      v276 = __ldxr(v275);
                    while (__stxr(v276 + 1, v275));
                  }
                  v277 = *(_OWORD *)(v273 + 24);
                  v278 = *(_OWORD *)(v273 + 40);
                  *(_OWORD *)(v272 + 56) = *(_OWORD *)(v273 + 56);
                  *(_OWORD *)(v272 + 40) = v278;
                  *(_OWORD *)(v272 + 24) = v277;
                  *v5 = v272;
                  *(_QWORD *)v272 = 1;
                  do
                  {
                    v279 = __ldaxr((unint64_t *)v166);
                    v175 = --v279 == 0;
                  }
                  while (__stlxr(v279, (unint64_t *)v166));
                  goto LABEL_419;
                case 9:
                  v116 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 != 1)
                  {
                    v117 = (_QWORD *)operator new();
                    v118 = *v5 + 8;
                    *v117 = *(_QWORD *)*v5;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v117 + 1, v118);
                    *v5 = (uint64_t)v117;
                    *v117 = 1;
                    do
                    {
                      v119 = __ldaxr(v116);
                      v120 = v119 - 1;
                    }
                    while (__stlxr(v120, v116));
                    if (!v120)
                    {
                      v121 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v116);
                      MEMORY[0x219A19A08](v121, 0x1030C407B73B9F7);
                    }
                  }
                  v122 = (uint64_t *)*v5;
                  v124 = *(uint64_t **)(*v5 + 24);
                  v123 = *(uint64_t **)(*v5 + 32);
                  if (v123 == v124)
                    return;
                  if (!v122[1])
                    return;
                  v125 = (double)*((uint64_t *)v4 + 1);
                  v126 = 1;
                  do
                  {
                    v127 = *v124++;
                    v126 *= v127;
                  }
                  while (v124 != v123);
                  if (!v126)
                    return;
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v122 + 1);
                  v128 = (v122[4] - v122[3]) >> 3;
                  v325 = 0;
                  std::vector<unsigned long>::vector(&__p, v128, &v325);
                  do
                  {
                    v129 = (uint64_t *)__p;
                    v130 = 0;
                    if (v327 != __p)
                    {
                      v131 = (v327 - (_BYTE *)__p) >> 3;
                      v132 = (uint64_t *)v122[6];
                      if (v131 <= 1)
                        v131 = 1;
                      do
                      {
                        v134 = *v129++;
                        v133 = v134;
                        v135 = *v132++;
                        v130 += v135 * v133;
                        --v131;
                      }
                      while (v131);
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique(v122 + 1);
                    *(double *)(*(_QWORD *)v122[1] + 8 * (v122[9] + v130)) = *(double *)(*(_QWORD *)v122[1]
                                                                                       + 8 * (v122[9] + v130))
                                                                           + v125;
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v122 + 1), (uint64_t *)&__p));
                  goto LABEL_192;
                default:
                  turi::apply_binary_op_ff();
              }
            case 1:
              switch(*(_BYTE *)(a1 + 20))
              {
                case 0:
                  v17 = (uint64_t)(v3[1] + (double)*v5);
LABEL_72:
                  *v5 = v17;
                  return;
                case 1:
                  v162 = v3[1] + *(double *)v5;
LABEL_273:
                  *(double *)v5 = v162;
                  return;
                case 2:
                  v25 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v189 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v189, *v5);
                  *v5 = (uint64_t)v189;
                  *v189 = 1;
                  do
                  {
                    v190 = __ldaxr((unint64_t *)v25);
                    v28 = --v190 == 0;
                  }
                  while (__stlxr(v190, (unint64_t *)v25));
                  goto LABEL_241;
                case 3:
                  v99 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 != 1)
                  {
                    v100 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v100, *v5);
                    *v5 = (uint64_t)v100;
                    *v100 = 1;
                    do
                    {
                      v101 = __ldaxr(v99);
                      v102 = v101 - 1;
                    }
                    while (__stlxr(v102, v99));
                    if (!v102)
                    {
                      v103 = (void *)v99[1];
                      if (v103)
                      {
                        v99[2] = (unint64_t)v103;
                        operator delete(v103);
                      }
                      MEMORY[0x219A19A08](v99, 0x1080C409938AC02);
                    }
                  }
                  v104 = *(double **)(*v5 + 8);
                  v105 = *(_QWORD *)(*v5 + 16) - (_QWORD)v104;
                  if (v105)
                  {
                    v106 = v4[1];
                    v107 = v105 >> 3;
                    if (v107 <= 1)
                      v107 = 1;
                    do
                    {
                      *v104 = v106 + *v104;
                      ++v104;
                      --v107;
                    }
                    while (v107);
                  }
                  return;
                case 4:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v244 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v244, *v5);
                  *v5 = (uint64_t)v244;
                  *v244 = 1;
                  do
                  {
                    v245 = __ldaxr(v86);
                    v165 = --v245 == 0;
                  }
                  while (__stlxr(v245, v86));
                  goto LABEL_408;
                case 5:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v268 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v268, *v5);
                  *v5 = (uint64_t)v268;
                  *v268 = 1;
                  do
                  {
                    v269 = __ldaxr(v86);
                    v89 = --v269 == 0;
                  }
                  while (__stlxr(v269, v86));
                  goto LABEL_350;
                case 6:
                  v204 = v3[1];
                  v205 = *(_QWORD *)(a1 + 8);
                  v206 = v205 + vcvtmd_s64_f64(v204);
                  *(_QWORD *)(a1 + 8) = v205 & 0xFF00000000000000 | v206 & 0xFFFFFFFFFFFFFFLL;
                  v207 = (uint64_t)((v204 - (double)(uint64_t)floor(v204)) * 1000000.0) + *(int *)(a1 + 16);
                  if (v207 >= 1000000)
                  {
                    *v5 = (v206 + 1) & 0xFFFFFFFFFFFFFFLL | v205 & 0xFF00000000000000;
                    LODWORD(v207) = v207 - 1000000;
                  }
                  if (v207 >= 0xF4240)
                    turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                  *(_DWORD *)(a1 + 16) = v207;
                  return;
                case 7:
                  goto LABEL_424;
                case 8:
                  v166 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v280 = operator new();
                  v281 = *v5;
                  *(_QWORD *)v280 = *(_QWORD *)*v5;
                  *(_QWORD *)(v280 + 8) = *(_QWORD *)(v281 + 8);
                  v282 = *(_QWORD *)(v281 + 16);
                  *(_QWORD *)(v280 + 16) = v282;
                  if (v282)
                  {
                    v283 = (unsigned int *)(v282 + 8);
                    do
                      v284 = __ldxr(v283);
                    while (__stxr(v284 + 1, v283));
                  }
                  v285 = *(_OWORD *)(v281 + 24);
                  v286 = *(_OWORD *)(v281 + 40);
                  *(_OWORD *)(v280 + 56) = *(_OWORD *)(v281 + 56);
                  *(_OWORD *)(v280 + 40) = v286;
                  *(_OWORD *)(v280 + 24) = v285;
                  *v5 = v280;
                  *(_QWORD *)v280 = 1;
                  do
                  {
                    v287 = __ldaxr((unint64_t *)v166);
                    v175 = --v287 == 0;
                  }
                  while (__stlxr(v287, (unint64_t *)v166));
                  goto LABEL_419;
                case 9:
                  v136 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 != 1)
                  {
                    v137 = (_QWORD *)operator new();
                    v138 = *v5 + 8;
                    *v137 = *(_QWORD *)*v5;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v137 + 1, v138);
                    *v5 = (uint64_t)v137;
                    *v137 = 1;
                    do
                    {
                      v139 = __ldaxr(v136);
                      v140 = v139 - 1;
                    }
                    while (__stlxr(v140, v136));
                    if (!v140)
                    {
                      v141 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v136);
                      MEMORY[0x219A19A08](v141, 0x1030C407B73B9F7);
                    }
                  }
                  v142 = (uint64_t *)*v5;
                  v144 = *(uint64_t **)(*v5 + 24);
                  v143 = *(uint64_t **)(*v5 + 32);
                  if (v143 == v144)
                    return;
                  if (!v142[1])
                    return;
                  v145 = v4[1];
                  v146 = 1;
                  do
                  {
                    v147 = *v144++;
                    v146 *= v147;
                  }
                  while (v144 != v143);
                  if (!v146)
                    return;
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v142 + 1);
                  v148 = (v142[4] - v142[3]) >> 3;
                  v325 = 0;
                  std::vector<unsigned long>::vector(&__p, v148, &v325);
                  do
                  {
                    v149 = (uint64_t *)__p;
                    v150 = 0;
                    if (v327 != __p)
                    {
                      v151 = (v327 - (_BYTE *)__p) >> 3;
                      v152 = (uint64_t *)v142[6];
                      if (v151 <= 1)
                        v151 = 1;
                      do
                      {
                        v154 = *v149++;
                        v153 = v154;
                        v155 = *v152++;
                        v150 += v155 * v153;
                        --v151;
                      }
                      while (v151);
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique(v142 + 1);
                    *(double *)(*(_QWORD *)v142[1] + 8 * (v142[9] + v150)) = v145
                                                                           + *(double *)(*(_QWORD *)v142[1]
                                                                                       + 8 * (v142[9] + v150));
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v142 + 1), (uint64_t *)&__p));
                  goto LABEL_192;
                default:
                  turi::apply_binary_op_ff();
              }
            case 2:
              switch(*(_BYTE *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_424;
                case 2:
                  v31 = *((_QWORD *)v3 + 1);
                  v32 = *v5;
                  if (*(_QWORD *)*v5 != 1)
                  {
                    v33 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v33, *v5);
                    *v5 = (uint64_t)v33;
                    *v33 = 1;
                    do
                    {
                      v34 = __ldaxr((unint64_t *)v32);
                      v35 = v34 - 1;
                    }
                    while (__stlxr(v35, (unint64_t *)v32));
                    if (!v35)
                    {
                      if (*(char *)(v32 + 31) < 0)
                        operator delete(*(void **)(v32 + 8));
                      MEMORY[0x219A19A08](v32, 0x1012C404EF22A49);
                    }
                  }
                  v36 = *(char *)(v31 + 31);
                  if (v36 >= 0)
                    v37 = (const std::string::value_type *)(v31 + 8);
                  else
                    v37 = *(const std::string::value_type **)(v31 + 8);
                  if (v36 >= 0)
                    v38 = *(unsigned __int8 *)(v31 + 31);
                  else
                    v38 = *(_QWORD *)(v31 + 16);
                  std::string::append((std::string *)(*v5 + 8), v37, v38);
                  return;
                case 3:
                  v158 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v212 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v212, *v5);
                  *v5 = (uint64_t)v212;
                  *v212 = 1;
                  do
                  {
                    v213 = __ldaxr(v158);
                    v161 = --v213 == 0;
                  }
                  while (__stlxr(v213, v158));
                  goto LABEL_389;
                case 4:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v214 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v214, *v5);
                  *v5 = (uint64_t)v214;
                  *v214 = 1;
                  do
                  {
                    v215 = __ldaxr(v86);
                    v165 = --v215 == 0;
                  }
                  while (__stlxr(v215, v86));
                  goto LABEL_408;
                case 5:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v156 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v156, *v5);
                  *v5 = (uint64_t)v156;
                  *v156 = 1;
                  do
                  {
                    v157 = __ldaxr(v86);
                    v89 = --v157 == 0;
                  }
                  while (__stlxr(v157, v86));
                  goto LABEL_350;
                case 8:
                  v166 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v216 = operator new();
                  v217 = *v5;
                  *(_QWORD *)v216 = *(_QWORD *)*v5;
                  *(_QWORD *)(v216 + 8) = *(_QWORD *)(v217 + 8);
                  v218 = *(_QWORD *)(v217 + 16);
                  *(_QWORD *)(v216 + 16) = v218;
                  if (v218)
                  {
                    v219 = (unsigned int *)(v218 + 8);
                    do
                      v220 = __ldxr(v219);
                    while (__stxr(v220 + 1, v219));
                  }
                  v221 = *(_OWORD *)(v217 + 24);
                  v222 = *(_OWORD *)(v217 + 40);
                  *(_OWORD *)(v216 + 56) = *(_OWORD *)(v217 + 56);
                  *(_OWORD *)(v216 + 40) = v222;
                  *(_OWORD *)(v216 + 24) = v221;
                  *v5 = v216;
                  *(_QWORD *)v216 = 1;
                  do
                  {
                    v223 = __ldaxr((unint64_t *)v166);
                    v175 = --v223 == 0;
                  }
                  while (__stlxr(v223, (unint64_t *)v166));
                  goto LABEL_419;
                case 9:
                  v49 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v83 = (_QWORD *)operator new();
                  v84 = *v5 + 8;
                  *v83 = *(_QWORD *)*v5;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v83 + 1, v84);
                  *v5 = (uint64_t)v83;
                  *v83 = 1;
                  do
                  {
                    v85 = __ldaxr(v49);
                    v53 = --v85 == 0;
                  }
                  while (__stlxr(v85, v49));
                  goto LABEL_265;
                default:
                  turi::apply_binary_op_ff();
              }
            case 3:
              switch(*(_BYTE *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_424;
                case 2:
                  v25 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v39 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v39, *v5);
                  *v5 = (uint64_t)v39;
                  *v39 = 1;
                  do
                  {
                    v40 = __ldaxr((unint64_t *)v25);
                    v28 = --v40 == 0;
                  }
                  while (__stlxr(v40, (unint64_t *)v25));
                  goto LABEL_241;
                case 3:
                  v224 = *((_QWORD *)v3 + 1);
                  v225 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 != 1)
                  {
                    v226 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v226, *v5);
                    *v5 = (uint64_t)v226;
                    *v226 = 1;
                    do
                    {
                      v227 = __ldaxr(v225);
                      v228 = v227 - 1;
                    }
                    while (__stlxr(v228, v225));
                    if (!v228)
                    {
                      v229 = (void *)v225[1];
                      if (v229)
                      {
                        v225[2] = (unint64_t)v229;
                        operator delete(v229);
                      }
                      MEMORY[0x219A19A08](v225, 0x1080C409938AC02);
                    }
                  }
                  v230 = *v5;
                  turi::flexible_type_fail(*(_QWORD *)(*v5 + 16) - *(_QWORD *)(*v5 + 8) == *(_QWORD *)(v224 + 16)
                                                                                         - *(_QWORD *)(v224 + 8));
                  v231 = *(double **)(v230 + 8);
                  v232 = *(_QWORD *)(v230 + 16) - (_QWORD)v231;
                  if (v232)
                  {
                    v233 = v232 >> 3;
                    v234 = *(double **)(v224 + 8);
                    if (v233 <= 1)
                      v233 = 1;
                    do
                    {
                      v235 = *v234++;
                      *v231 = v235 + *v231;
                      ++v231;
                      --v233;
                    }
                    while (v233);
                  }
                  return;
                case 4:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v240 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v240, *v5);
                  *v5 = (uint64_t)v240;
                  *v240 = 1;
                  do
                  {
                    v241 = __ldaxr(v86);
                    v165 = --v241 == 0;
                  }
                  while (__stlxr(v241, v86));
                  goto LABEL_408;
                case 5:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v181 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v181, *v5);
                  *v5 = (uint64_t)v181;
                  *v181 = 1;
                  do
                  {
                    v182 = __ldaxr(v86);
                    v89 = --v182 == 0;
                  }
                  while (__stlxr(v182, v86));
                  goto LABEL_350;
                case 8:
                  v166 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v246 = operator new();
                  v247 = *v5;
                  *(_QWORD *)v246 = *(_QWORD *)*v5;
                  *(_QWORD *)(v246 + 8) = *(_QWORD *)(v247 + 8);
                  v248 = *(_QWORD *)(v247 + 16);
                  *(_QWORD *)(v246 + 16) = v248;
                  if (v248)
                  {
                    v249 = (unsigned int *)(v248 + 8);
                    do
                      v250 = __ldxr(v249);
                    while (__stxr(v250 + 1, v249));
                  }
                  v251 = *(_OWORD *)(v247 + 24);
                  v252 = *(_OWORD *)(v247 + 40);
                  *(_OWORD *)(v246 + 56) = *(_OWORD *)(v247 + 56);
                  *(_OWORD *)(v246 + 40) = v252;
                  *(_OWORD *)(v246 + 24) = v251;
                  *v5 = v246;
                  *(_QWORD *)v246 = 1;
                  do
                  {
                    v253 = __ldaxr((unint64_t *)v166);
                    v175 = --v253 == 0;
                  }
                  while (__stlxr(v253, (unint64_t *)v166));
                  goto LABEL_419;
                case 9:
                  v49 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v108 = (_QWORD *)operator new();
                  v109 = *v5 + 8;
                  *v108 = *(_QWORD *)*v5;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v108 + 1, v109);
                  *v5 = (uint64_t)v108;
                  *v108 = 1;
                  do
                  {
                    v110 = __ldaxr(v49);
                    v53 = --v110 == 0;
                  }
                  while (__stlxr(v110, v49));
                  goto LABEL_265;
                default:
                  turi::apply_binary_op_ff();
              }
            case 4:
              switch(*(_BYTE *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_424;
                case 2:
                  v25 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v26 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, *v5);
                  *v5 = (uint64_t)v26;
                  *v26 = 1;
                  do
                  {
                    v27 = __ldaxr((unint64_t *)v25);
                    v28 = --v27 == 0;
                  }
                  while (__stlxr(v27, (unint64_t *)v25));
                  goto LABEL_241;
                case 3:
                  v158 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v159 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v159, *v5);
                  *v5 = (uint64_t)v159;
                  *v159 = 1;
                  do
                  {
                    v160 = __ldaxr(v158);
                    v161 = --v160 == 0;
                  }
                  while (__stlxr(v160, v158));
                  goto LABEL_389;
                case 4:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v163 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v163, *v5);
                  *v5 = (uint64_t)v163;
                  *v163 = 1;
                  do
                  {
                    v164 = __ldaxr(v86);
                    v165 = --v164 == 0;
                  }
                  while (__stlxr(v164, v86));
                  goto LABEL_408;
                case 5:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v87 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v87, *v5);
                  *v5 = (uint64_t)v87;
                  *v87 = 1;
                  do
                  {
                    v88 = __ldaxr(v86);
                    v89 = --v88 == 0;
                  }
                  while (__stlxr(v88, v86));
                  goto LABEL_350;
                case 8:
                  v166 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v167 = operator new();
                  v168 = *v5;
                  *(_QWORD *)v167 = *(_QWORD *)*v5;
                  *(_QWORD *)(v167 + 8) = *(_QWORD *)(v168 + 8);
                  v169 = *(_QWORD *)(v168 + 16);
                  *(_QWORD *)(v167 + 16) = v169;
                  if (v169)
                  {
                    v170 = (unsigned int *)(v169 + 8);
                    do
                      v171 = __ldxr(v170);
                    while (__stxr(v171 + 1, v170));
                  }
                  v172 = *(_OWORD *)(v168 + 24);
                  v173 = *(_OWORD *)(v168 + 40);
                  *(_OWORD *)(v167 + 56) = *(_OWORD *)(v168 + 56);
                  *(_OWORD *)(v167 + 40) = v173;
                  *(_OWORD *)(v167 + 24) = v172;
                  *v5 = v167;
                  *(_QWORD *)v167 = 1;
                  do
                  {
                    v174 = __ldaxr((unint64_t *)v166);
                    v175 = --v174 == 0;
                  }
                  while (__stlxr(v174, (unint64_t *)v166));
                  goto LABEL_419;
                case 9:
                  v49 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v50 = (_QWORD *)operator new();
                  v51 = *v5 + 8;
                  *v50 = *(_QWORD *)*v5;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v50 + 1, v51);
                  *v5 = (uint64_t)v50;
                  *v50 = 1;
                  do
                  {
                    v52 = __ldaxr(v49);
                    v53 = --v52 == 0;
                  }
                  while (__stlxr(v52, v49));
                  goto LABEL_265;
                default:
                  turi::apply_binary_op_ff();
              }
            case 5:
              switch(*(_BYTE *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_424;
                case 2:
                  v25 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v43 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v43, *v5);
                  *v5 = (uint64_t)v43;
                  *v43 = 1;
                  do
                  {
                    v44 = __ldaxr((unint64_t *)v25);
                    v28 = --v44 == 0;
                  }
                  while (__stlxr(v44, (unint64_t *)v25));
                  goto LABEL_241;
                case 3:
                  v158 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v288 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v288, *v5);
                  *v5 = (uint64_t)v288;
                  *v288 = 1;
                  do
                  {
                    v289 = __ldaxr(v158);
                    v161 = --v289 == 0;
                  }
                  while (__stlxr(v289, v158));
                  goto LABEL_389;
                case 4:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v290 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v290, *v5);
                  *v5 = (uint64_t)v290;
                  *v290 = 1;
                  do
                  {
                    v291 = __ldaxr(v86);
                    v165 = --v291 == 0;
                  }
                  while (__stlxr(v291, v86));
                  goto LABEL_408;
                case 5:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v238 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v238, *v5);
                  *v5 = (uint64_t)v238;
                  *v238 = 1;
                  do
                  {
                    v239 = __ldaxr(v86);
                    v89 = --v239 == 0;
                  }
                  while (__stlxr(v239, v86));
                  goto LABEL_350;
                case 8:
                  v166 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v294 = operator new();
                  v295 = *v5;
                  *(_QWORD *)v294 = *(_QWORD *)*v5;
                  *(_QWORD *)(v294 + 8) = *(_QWORD *)(v295 + 8);
                  v296 = *(_QWORD *)(v295 + 16);
                  *(_QWORD *)(v294 + 16) = v296;
                  if (v296)
                  {
                    v297 = (unsigned int *)(v296 + 8);
                    do
                      v298 = __ldxr(v297);
                    while (__stxr(v298 + 1, v297));
                  }
                  v299 = *(_OWORD *)(v295 + 24);
                  v300 = *(_OWORD *)(v295 + 40);
                  *(_OWORD *)(v294 + 56) = *(_OWORD *)(v295 + 56);
                  *(_OWORD *)(v294 + 40) = v300;
                  *(_OWORD *)(v294 + 24) = v299;
                  *v5 = v294;
                  *(_QWORD *)v294 = 1;
                  do
                  {
                    v301 = __ldaxr((unint64_t *)v166);
                    v175 = --v301 == 0;
                  }
                  while (__stlxr(v301, (unint64_t *)v166));
                  goto LABEL_419;
                case 9:
                  v49 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v178 = (_QWORD *)operator new();
                  v179 = *v5 + 8;
                  *v178 = *(_QWORD *)*v5;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v178 + 1, v179);
                  *v5 = (uint64_t)v178;
                  *v178 = 1;
                  do
                  {
                    v180 = __ldaxr(v49);
                    v53 = --v180 == 0;
                  }
                  while (__stlxr(v180, v49));
                  goto LABEL_265;
                default:
                  turi::apply_binary_op_ff();
              }
            case 6:
              switch(*(_BYTE *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_424;
                case 2:
                  v25 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v45 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v45, *v5);
                  *v5 = (uint64_t)v45;
                  *v45 = 1;
                  do
                  {
                    v46 = __ldaxr((unint64_t *)v25);
                    v28 = --v46 == 0;
                  }
                  while (__stlxr(v46, (unint64_t *)v25));
                  goto LABEL_241;
                case 3:
                  v158 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v292 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v292, *v5);
                  *v5 = (uint64_t)v292;
                  *v292 = 1;
                  do
                  {
                    v293 = __ldaxr(v158);
                    v161 = --v293 == 0;
                  }
                  while (__stlxr(v293, v158));
                  goto LABEL_389;
                case 4:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v305 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v305, *v5);
                  *v5 = (uint64_t)v305;
                  *v305 = 1;
                  do
                  {
                    v306 = __ldaxr(v86);
                    v165 = --v306 == 0;
                  }
                  while (__stlxr(v306, v86));
                  goto LABEL_408;
                case 5:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v256 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v256, *v5);
                  *v5 = (uint64_t)v256;
                  *v256 = 1;
                  do
                  {
                    v257 = __ldaxr(v86);
                    v89 = --v257 == 0;
                  }
                  while (__stlxr(v257, v86));
                  goto LABEL_350;
                case 8:
                  v166 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v307 = operator new();
                  v308 = *v5;
                  *(_QWORD *)v307 = *(_QWORD *)*v5;
                  *(_QWORD *)(v307 + 8) = *(_QWORD *)(v308 + 8);
                  v309 = *(_QWORD *)(v308 + 16);
                  *(_QWORD *)(v307 + 16) = v309;
                  if (v309)
                  {
                    v310 = (unsigned int *)(v309 + 8);
                    do
                      v311 = __ldxr(v310);
                    while (__stxr(v311 + 1, v310));
                  }
                  v312 = *(_OWORD *)(v308 + 24);
                  v313 = *(_OWORD *)(v308 + 40);
                  *(_OWORD *)(v307 + 56) = *(_OWORD *)(v308 + 56);
                  *(_OWORD *)(v307 + 40) = v313;
                  *(_OWORD *)(v307 + 24) = v312;
                  *v5 = v307;
                  *(_QWORD *)v307 = 1;
                  do
                  {
                    v314 = __ldaxr((unint64_t *)v166);
                    v175 = --v314 == 0;
                  }
                  while (__stlxr(v314, (unint64_t *)v166));
                  goto LABEL_419;
                case 9:
                  v49 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v193 = (_QWORD *)operator new();
                  v194 = *v5 + 8;
                  *v193 = *(_QWORD *)*v5;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v193 + 1, v194);
                  *v5 = (uint64_t)v193;
                  *v193 = 1;
                  do
                  {
                    v195 = __ldaxr(v49);
                    v53 = --v195 == 0;
                  }
                  while (__stlxr(v195, v49));
                  goto LABEL_265;
                default:
                  turi::apply_binary_op_ff();
              }
            case 7:
              switch(*(_BYTE *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_424;
                case 2:
                  v25 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v41 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v41, *v5);
                  *v5 = (uint64_t)v41;
                  *v41 = 1;
                  do
                  {
                    v42 = __ldaxr((unint64_t *)v25);
                    v28 = --v42 == 0;
                  }
                  while (__stlxr(v42, (unint64_t *)v25));
                  goto LABEL_241;
                case 3:
                  v158 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v236 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v236, *v5);
                  *v5 = (uint64_t)v236;
                  *v236 = 1;
                  do
                  {
                    v237 = __ldaxr(v158);
                    v161 = --v237 == 0;
                  }
                  while (__stlxr(v237, v158));
                  goto LABEL_389;
                case 4:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v254 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v254, *v5);
                  *v5 = (uint64_t)v254;
                  *v254 = 1;
                  do
                  {
                    v255 = __ldaxr(v86);
                    v165 = --v255 == 0;
                  }
                  while (__stlxr(v255, v86));
                  goto LABEL_408;
                case 5:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v187 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v187, *v5);
                  *v5 = (uint64_t)v187;
                  *v187 = 1;
                  do
                  {
                    v188 = __ldaxr(v86);
                    v89 = --v188 == 0;
                  }
                  while (__stlxr(v188, v86));
                  goto LABEL_350;
                case 8:
                  v166 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v260 = operator new();
                  v261 = *v5;
                  *(_QWORD *)v260 = *(_QWORD *)*v5;
                  *(_QWORD *)(v260 + 8) = *(_QWORD *)(v261 + 8);
                  v262 = *(_QWORD *)(v261 + 16);
                  *(_QWORD *)(v260 + 16) = v262;
                  if (v262)
                  {
                    v263 = (unsigned int *)(v262 + 8);
                    do
                      v264 = __ldxr(v263);
                    while (__stxr(v264 + 1, v263));
                  }
                  v265 = *(_OWORD *)(v261 + 24);
                  v266 = *(_OWORD *)(v261 + 40);
                  *(_OWORD *)(v260 + 56) = *(_OWORD *)(v261 + 56);
                  *(_OWORD *)(v260 + 40) = v266;
                  *(_OWORD *)(v260 + 24) = v265;
                  *v5 = v260;
                  *(_QWORD *)v260 = 1;
                  do
                  {
                    v267 = __ldaxr((unint64_t *)v166);
                    v175 = --v267 == 0;
                  }
                  while (__stlxr(v267, (unint64_t *)v166));
                  goto LABEL_419;
                case 9:
                  v49 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v113 = (_QWORD *)operator new();
                  v114 = *v5 + 8;
                  *v113 = *(_QWORD *)*v5;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v113 + 1, v114);
                  *v5 = (uint64_t)v113;
                  *v113 = 1;
                  do
                  {
                    v115 = __ldaxr(v49);
                    v53 = --v115 == 0;
                  }
                  while (__stlxr(v115, v49));
                  goto LABEL_265;
                default:
                  turi::apply_binary_op_ff();
              }
            case 8:
              switch(*(_BYTE *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_424;
                case 2:
                  v25 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v47 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v47, *v5);
                  *v5 = (uint64_t)v47;
                  *v47 = 1;
                  do
                  {
                    v48 = __ldaxr((unint64_t *)v25);
                    v28 = --v48 == 0;
                  }
                  while (__stlxr(v48, (unint64_t *)v25));
                  goto LABEL_241;
                case 3:
                  v158 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v302 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v302, *v5);
                  *v5 = (uint64_t)v302;
                  *v302 = 1;
                  do
                  {
                    v303 = __ldaxr(v158);
                    v161 = --v303 == 0;
                  }
                  while (__stlxr(v303, v158));
                  goto LABEL_389;
                case 4:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v315 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v315, *v5);
                  *v5 = (uint64_t)v315;
                  *v315 = 1;
                  do
                  {
                    v316 = __ldaxr(v86);
                    v165 = --v316 == 0;
                  }
                  while (__stlxr(v316, v86));
                  goto LABEL_408;
                case 5:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v270 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v270, *v5);
                  *v5 = (uint64_t)v270;
                  *v270 = 1;
                  do
                  {
                    v271 = __ldaxr(v86);
                    v89 = --v271 == 0;
                  }
                  while (__stlxr(v271, v86));
                  goto LABEL_350;
                case 8:
                  v166 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v317 = operator new();
                  v318 = *v5;
                  *(_QWORD *)v317 = *(_QWORD *)*v5;
                  *(_QWORD *)(v317 + 8) = *(_QWORD *)(v318 + 8);
                  v319 = *(_QWORD *)(v318 + 16);
                  *(_QWORD *)(v317 + 16) = v319;
                  if (v319)
                  {
                    v320 = (unsigned int *)(v319 + 8);
                    do
                      v321 = __ldxr(v320);
                    while (__stxr(v321 + 1, v320));
                  }
                  v322 = *(_OWORD *)(v318 + 24);
                  v323 = *(_OWORD *)(v318 + 40);
                  *(_OWORD *)(v317 + 56) = *(_OWORD *)(v318 + 56);
                  *(_OWORD *)(v317 + 40) = v323;
                  *(_OWORD *)(v317 + 24) = v322;
                  *v5 = v317;
                  *(_QWORD *)v317 = 1;
                  do
                  {
                    v324 = __ldaxr((unint64_t *)v166);
                    v175 = --v324 == 0;
                  }
                  while (__stlxr(v324, (unint64_t *)v166));
                  goto LABEL_419;
                case 9:
                  v49 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v208 = (_QWORD *)operator new();
                  v209 = *v5 + 8;
                  *v208 = *(_QWORD *)*v5;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v208 + 1, v209);
                  *v5 = (uint64_t)v208;
                  *v208 = 1;
                  do
                  {
                    v210 = __ldaxr(v49);
                    v53 = --v210 == 0;
                  }
                  while (__stlxr(v210, v49));
LABEL_265:
                  if (!v53)
                    goto LABEL_424;
                  v191 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v49);
                  v211 = 2071181815;
                  goto LABEL_422;
                default:
                  turi::apply_binary_op_ff();
              }
            case 9:
              switch(*(_BYTE *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_424;
                case 2:
                  v25 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v29 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v29, *v5);
                  *v5 = (uint64_t)v29;
                  *v29 = 1;
                  do
                  {
                    v30 = __ldaxr((unint64_t *)v25);
                    v28 = --v30 == 0;
                  }
                  while (__stlxr(v30, (unint64_t *)v25));
LABEL_241:
                  if (!v28)
                    goto LABEL_424;
                  if (*(char *)(v25 + 31) < 0)
                    operator delete(*(void **)(v25 + 8));
                  v191 = (_QWORD *)v25;
                  v192 = 0x1012C404EF22A49;
                  goto LABEL_423;
                case 3:
                  v158 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v176 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v176, *v5);
                  *v5 = (uint64_t)v176;
                  *v176 = 1;
                  do
                  {
                    v177 = __ldaxr(v158);
                    v161 = --v177 == 0;
                  }
                  while (__stlxr(v177, v158));
LABEL_389:
                  if (!v161)
                    goto LABEL_424;
                  v304 = (void *)v158[1];
                  if (v304)
                  {
                    v158[2] = (unint64_t)v304;
                    operator delete(v304);
                  }
                  v191 = v158;
                  v192 = 0x1080C409938AC02;
                  goto LABEL_423;
                case 4:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v185 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v185, *v5);
                  *v5 = (uint64_t)v185;
                  *v185 = 1;
                  do
                  {
                    v186 = __ldaxr(v86);
                    v165 = --v186 == 0;
                  }
                  while (__stlxr(v186, v86));
LABEL_408:
                  if (!v165)
                    goto LABEL_412;
                  __p = v86 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  goto LABEL_411;
                case 5:
                  v86 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_412;
                  v111 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v111, *v5);
                  *v5 = (uint64_t)v111;
                  *v111 = 1;
                  do
                  {
                    v112 = __ldaxr(v86);
                    v89 = --v112 == 0;
                  }
                  while (__stlxr(v112, v86));
LABEL_350:
                  if (!v89)
                    goto LABEL_412;
                  __p = v86 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_411:
                  MEMORY[0x219A19A08](v86, 0x1020C405E66F15BLL);
LABEL_412:
                  turi::flexible_type_fail(0);
                  break;
                case 8:
                  v166 = *v5;
                  if (*(_QWORD *)*v5 == 1)
                    goto LABEL_424;
                  v196 = operator new();
                  v197 = *v5;
                  *(_QWORD *)v196 = *(_QWORD *)*v5;
                  *(_QWORD *)(v196 + 8) = *(_QWORD *)(v197 + 8);
                  v198 = *(_QWORD *)(v197 + 16);
                  *(_QWORD *)(v196 + 16) = v198;
                  if (v198)
                  {
                    v199 = (unsigned int *)(v198 + 8);
                    do
                      v200 = __ldxr(v199);
                    while (__stxr(v200 + 1, v199));
                  }
                  v201 = *(_OWORD *)(v197 + 24);
                  v202 = *(_OWORD *)(v197 + 40);
                  *(_OWORD *)(v196 + 56) = *(_OWORD *)(v197 + 56);
                  *(_OWORD *)(v196 + 40) = v202;
                  *(_OWORD *)(v196 + 24) = v201;
                  *v5 = v196;
                  *(_QWORD *)v196 = 1;
                  do
                  {
                    v203 = __ldaxr((unint64_t *)v166);
                    v175 = --v203 == 0;
                  }
                  while (__stlxr(v203, (unint64_t *)v166));
LABEL_419:
                  if (!v175)
                    goto LABEL_424;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v166 + 16));
                  v191 = (_QWORD *)v166;
                  v211 = -235920773;
LABEL_422:
                  v192 = v211 | 0x1030C4000000000;
LABEL_423:
                  MEMORY[0x219A19A08](v191, v192);
LABEL_424:
                  turi::flexible_type_fail(0);
                  break;
                case 9:
                  v54 = *((_QWORD *)v3 + 1);
                  v55 = (unint64_t *)*v5;
                  if (*(_QWORD *)*v5 != 1)
                  {
                    v56 = (_QWORD *)operator new();
                    v57 = *v5 + 8;
                    *v56 = *(_QWORD *)*v5;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v56 + 1, v57);
                    *v5 = (uint64_t)v56;
                    *v56 = 1;
                    do
                    {
                      v58 = __ldaxr(v55);
                      v59 = v58 - 1;
                    }
                    while (__stlxr(v59, v55));
                    if (!v59)
                    {
                      v60 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v55);
                      MEMORY[0x219A19A08](v60, 0x1030C407B73B9F7);
                    }
                  }
                  v61 = *v5;
                  v62 = (uint64_t *)(*v5 + 8);
                  if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v62, v54 + 8))
                    turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                  v64 = *(uint64_t **)(v61 + 24);
                  v63 = *(uint64_t **)(v61 + 32);
                  if (v63 != v64)
                  {
                    if (*v62)
                    {
                      v65 = 1;
                      do
                      {
                        v66 = *v64++;
                        v65 *= v66;
                      }
                      while (v64 != v63);
                      if (v65)
                      {
                        turi::flexible_type_impl::ndarray<double>::ensure_unique(v62);
                        v67 = (uint64_t)(*(_QWORD *)(v61 + 32) - *(_QWORD *)(v61 + 24)) >> 3;
                        v325 = 0;
                        std::vector<unsigned long>::vector(&__p, v67, &v325);
                        do
                        {
                          v68 = (uint64_t *)__p;
                          if (v327 == __p)
                          {
                            v77 = 0;
                            v78 = *(double *)(**(_QWORD **)(v54 + 8) + 8 * *(_QWORD *)(v54 + 72));
                          }
                          else
                          {
                            v69 = 0;
                            v70 = (v327 - (_BYTE *)__p) >> 3;
                            v71 = *(uint64_t **)(v54 + 48);
                            if (v70 <= 1)
                              v70 = 1;
                            v72 = (uint64_t *)__p;
                            v73 = v70;
                            do
                            {
                              v75 = *v72++;
                              v74 = v75;
                              v76 = *v71++;
                              v69 += v76 * v74;
                              --v73;
                            }
                            while (v73);
                            v77 = 0;
                            v78 = *(double *)(**(_QWORD **)(v54 + 8) + 8 * (*(_QWORD *)(v54 + 72) + v69));
                            v79 = *(uint64_t **)(v61 + 48);
                            do
                            {
                              v81 = *v68++;
                              v80 = v81;
                              v82 = *v79++;
                              v77 += v82 * v80;
                              --v70;
                            }
                            while (v70);
                          }
                          turi::flexible_type_impl::ndarray<double>::ensure_unique(v62);
                          *(double *)(**(_QWORD **)(v61 + 8) + 8 * (*(_QWORD *)(v61 + 72) + v77)) = v78 + *(double *)(**(_QWORD **)(v61 + 8) + 8 * (*(_QWORD *)(v61 + 72) + v77));
                        }
                        while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v62, (uint64_t *)&__p));
LABEL_192:
                        if (__p)
                        {
                          v327 = __p;
                          operator delete(__p);
                        }
                      }
                    }
                  }
                  return;
                default:
                  turi::apply_binary_op_ff();
              }
              return;
            default:
              turi::apply_binary_op_ff();
          }
        }
        else
        {
          *(_BYTE *)(a1 + 24) = 1;
        }
      }
    }
    else
    {
      turi::groupby_operators::vector_sum::operator=(a1, (uint64_t)v3);
    }
  }
}

void sub_2181342D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x219A19A08](v11, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

uint64_t turi::groupby_operators::vector_sum::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  if (*(_BYTE *)(this + 24))
  {
    *(_QWORD *)(a2 + 5) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 12) = 7;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    if (this + 8 != a2)
    {
      *(_QWORD *)(a2 + 5) = *(_QWORD *)(this + 13);
      *(_QWORD *)a2 = *(_QWORD *)(this + 8);
      v2 = *(unsigned __int8 *)(this + 20);
      *(_BYTE *)(a2 + 12) = v2;
      switch(v2)
      {
        case 2:
          v3 = *(unint64_t **)a2;
          do
            v4 = __ldaxr(v3);
          while (__stlxr(v4 + 1, v3));
          break;
        case 3:
          v5 = *(unint64_t **)a2;
          do
            v6 = __ldaxr(v5);
          while (__stlxr(v6 + 1, v5));
          break;
        case 4:
          v7 = *(unint64_t **)a2;
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
          break;
        case 5:
          v9 = *(unint64_t **)a2;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
          break;
        case 8:
          v11 = *(unint64_t **)a2;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
          break;
        case 9:
          v13 = *(unint64_t **)a2;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
          break;
        default:
          return this;
      }
    }
  }
  return this;
}

BOOL turi::groupby_operators::vector_sum::support_type(uint64_t a1, int a2)
{
  return a2 == 3 || a2 == 9;
}

_QWORD *turi::groupby_operators::vector_sum::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Vector Sum");
}

_BYTE *turi::groupby_operators::vector_sum::save(turi::groupby_operators::vector_sum *this, turi::oarchive *a2)
{
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *result;
  unint64_t v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  BOOL v12;
  std::vector<char>::size_type v13;
  size_t v14;
  uint64_t *v15;
  size_t v16;
  BOOL v17;
  std::vector<char>::size_type v18;

  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 1);
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 1 > v4)
    {
      v9 = 2 * v4 + 2;
      *((_QWORD *)a2 + 5) = v9;
      v10 = (_QWORD *)*((_QWORD *)a2 + 2);
      if (v10)
      {
        v5 = (_BYTE *)*v10;
        v11 = v10[1] - *v10;
        v12 = v9 >= v11;
        v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v13);
          v5 = (_BYTE *)**((_QWORD **)a2 + 2);
        }
        else if (!v12)
        {
          v10[1] = &v5[v9];
        }
      }
      else
      {
        v5 = malloc_type_realloc(*((void **)a2 + 3), v9, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v5;
    }
    else
    {
      v5 = (_BYTE *)*((_QWORD *)a2 + 3);
    }
    v5[(*((_QWORD *)a2 + 4))++] = *((_BYTE *)this + 25);
  }
  v6 = (char *)this + 24;
  if (*(_QWORD *)a2)
    return (_BYTE *)std::ostream::write();
  v8 = *((_QWORD *)a2 + 5);
  if (*((_QWORD *)a2 + 4) + 1 > v8)
  {
    v14 = 2 * v8 + 2;
    *((_QWORD *)a2 + 5) = v14;
    v15 = (uint64_t *)*((_QWORD *)a2 + 2);
    if (v15)
    {
      result = (_BYTE *)*v15;
      v16 = v15[1] - *v15;
      v17 = v14 >= v16;
      v18 = v14 - v16;
      if (v18 != 0 && v17)
      {
        std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v18);
        result = (_BYTE *)**((_QWORD **)a2 + 2);
      }
      else if (!v17)
      {
        v15[1] = (uint64_t)&result[v14];
      }
    }
    else
    {
      result = malloc_type_realloc(*((void **)a2 + 3), v14, 0xF6EA6B1uLL);
    }
    *((_QWORD *)a2 + 3) = result;
  }
  else
  {
    result = (_BYTE *)*((_QWORD *)a2 + 3);
  }
  result[(*((_QWORD *)a2 + 4))++] = *v6;
  return result;
}

void turi::groupby_operators::vector_sum::load(turi::groupby_operators::vector_sum *this, turi::iarchive *a2)
{
  uint64_t v4;
  uint64_t v5;

  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, (_QWORD **)this + 1);
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
    *((_BYTE *)this + 25) = *(_BYTE *)(v4 + (*((_QWORD *)a2 + 3))++);
  else
    std::istream::read();
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    *((_BYTE *)this + 24) = *(_BYTE *)(v5 + (*((_QWORD *)a2 + 3))++);
  else
    std::istream::read();
}

void turi::groupby_operators::vector_sum::~vector_sum(turi::groupby_operators::vector_sum *this)
{
  turi::groupby_operators::vector_sum::~vector_sum(this);
  JUMPOUT(0x219A19A08);
}

{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v31;

  *(_QWORD *)this = &unk_24D92FAC0;
  switch(*((_BYTE *)this + 20))
  {
    case 2:
      v2 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *((_QWORD *)this + 1);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = (_QWORD *)*((_QWORD *)this + 1);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *((_QWORD *)this + 1);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (_QWORD *)*((_QWORD *)this + 1);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
}

uint64_t turi::groupby_operators::vector_sum::set_input_type(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void **v36;

  switch(*(_BYTE *)(a1 + 20))
  {
    case 2:
      v4 = *(unint64_t **)(a1 + 8);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(_QWORD *)(a1 + 8);
        if (!v7)
          goto LABEL_43;
        if (*(char *)(v7 + 31) < 0)
          operator delete(*(void **)(v7 + 8));
        v8 = (_QWORD *)v7;
        v9 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      v10 = *(unint64_t **)(a1 + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *(_QWORD **)(a1 + 8);
        if (!v13)
          goto LABEL_43;
        v14 = (void *)v13[1];
        if (v14)
        {
          v13[2] = v14;
          operator delete(v14);
        }
        v8 = v13;
        v9 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      v15 = *(unint64_t **)(a1 + 8);
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(_QWORD *)(a1 + 8);
        if (!v18)
          goto LABEL_43;
        v36 = (void **)(v18 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
        goto LABEL_26;
      }
      break;
    case 5:
      v19 = *(unint64_t **)(a1 + 8);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v18 = *(_QWORD *)(a1 + 8);
        if (!v18)
          goto LABEL_43;
        v36 = (void **)(v18 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_26:
        v8 = (_QWORD *)v18;
        v9 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      v22 = *(unint64_t **)(a1 + 8);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(_QWORD *)(a1 + 8);
        if (!v25)
          goto LABEL_43;
        boost::detail::shared_count::~shared_count((unsigned int **)(v25 + 16));
        v8 = (_QWORD *)v25;
        v26 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      v27 = *(unint64_t **)(a1 + 8);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(_QWORD **)(a1 + 8);
        if (v30)
        {
          v31 = (void *)v30[6];
          if (v31)
          {
            v30[7] = v31;
            operator delete(v31);
          }
          v32 = (void *)v30[3];
          if (v32)
          {
            v30[4] = v32;
            operator delete(v32);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
          v8 = v30;
          v26 = 2071181815;
LABEL_41:
          v9 = v26 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v8, v9);
        }
LABEL_43:
        *(_QWORD *)(a1 + 8) = 0;
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = a2;
  switch((int)a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      v33 = operator new();
      *(_QWORD *)v33 = 0;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 8) = 0;
      goto LABEL_48;
    case 6:
      *(_QWORD *)(a1 + 8) = 0x1900000000000000;
      *(_DWORD *)(a1 + 16) = 0;
      break;
    case 8:
      v33 = operator new();
      *(_QWORD *)v33 = 0;
      *(_OWORD *)(v33 + 8) = 0u;
      *(_OWORD *)(v33 + 24) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_QWORD *)(v33 + 56) = 0;
      *(_QWORD *)(v33 + 64) = 3;
LABEL_48:
      *(_QWORD *)(a1 + 8) = v33;
      *(_QWORD *)v33 = 1;
      break;
    case 9:
      v34 = (_QWORD *)operator new();
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v34);
      *(_QWORD *)(a1 + 8) = v34;
      *v34 = 1;
      break;
    default:
      return a2;
  }
  return a2;
}

void sub_218134AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1030C407B73B9F7);
  _Unwind_Resume(a1);
}

uint64_t turi::groupby_operators::vector_sum::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t **v4;
  unint64_t **v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  unint64_t *v35;
  BOOL v36;
  int v37;
  unint64_t *v39;
  unint64_t v40;
  void **v42;

  if (a2 != a1)
  {
    v4 = (unint64_t **)(a1 + 8);
    v5 = (unint64_t **)(a2 + 8);
    switch(*(_BYTE *)(a1 + 20))
    {
      case 2:
        v6 = *v4;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          v9 = *v4;
          if (!*v4)
            goto LABEL_44;
          if (*((char *)v9 + 31) < 0)
            operator delete((void *)v9[1]);
          v10 = v9;
          v11 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v12 = *v4;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = *v4;
          if (!*v4)
            goto LABEL_44;
          v16 = (void *)v15[1];
          if (v16)
          {
            v15[2] = (unint64_t)v16;
            operator delete(v16);
          }
          v10 = v15;
          v11 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v17 = *v4;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *v4;
          if (!*v4)
            goto LABEL_44;
          v42 = (void **)(v20 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v42);
          goto LABEL_27;
        }
        break;
      case 5:
        v21 = *v4;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v20 = *v4;
          if (!*v4)
            goto LABEL_44;
          v42 = (void **)(v20 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v42);
LABEL_27:
          v10 = v20;
          v11 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v24 = *v4;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *v4;
          if (!*v4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v27 + 2);
          v10 = v27;
          v28 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v29 = *v4;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = *v4;
          if (*v4)
          {
            v33 = (void *)v32[6];
            if (v33)
            {
              v32[7] = (unint64_t)v33;
              operator delete(v33);
            }
            v34 = (void *)v32[3];
            if (v34)
            {
              v32[4] = (unint64_t)v34;
              operator delete(v34);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 1));
            v10 = v32;
            v28 = 2071181815;
LABEL_42:
            v11 = v28 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v10, v11);
          }
LABEL_44:
          *v4 = 0;
        }
        break;
      default:
        break;
    }
    v35 = *v5;
    *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
    *v4 = v35;
    LODWORD(v35) = *(unsigned __int8 *)(a2 + 20);
    *(_BYTE *)(a1 + 20) = (_BYTE)v35;
    v36 = v35 > 9;
    v37 = (1 << (char)v35) & 0x33C;
    if (!v36 && v37 != 0)
    {
      v39 = *v4;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

void std::__shared_ptr_emplace<turi::groupby_operators::max>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92FB60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::max>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92FB60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::max>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

uint64_t turi::groupby_operators::max::new_instance(turi::groupby_operators::max *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24D92FBB0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 20) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  turi::groupby_operators::max::set_input_type(v2, *((char *)this + 20));
  return v2;
}

uint64_t turi::groupby_operators::max::add_element_simple(uint64_t this, const turi::flexible_type *a2, __n128 a3)
{
  uint64_t v4;
  const turi::flexible_type *v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v16;
  double *v17;
  double *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  double v45;
  int v46;
  unint64_t *v48;
  unint64_t v49;
  double v50;
  double v51;
  BOOL v52;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  double v77;
  unsigned int v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  double v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  void **v95;

  if (*((_BYTE *)a2 + 12) != 7)
  {
    v4 = this;
    v5 = (const turi::flexible_type *)(this + 8);
    if (*(_BYTE *)(this + 24))
    {
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          switch(*(_BYTE *)(this + 20))
          {
            case 0:
              if (*(_QWORD *)v5 < *(_QWORD *)a2 && v5 != a2)
                goto LABEL_117;
              return this;
            case 1:
              v50 = *(double *)v5;
              v51 = (double)*(uint64_t *)a2;
              goto LABEL_100;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              v13 = *(_QWORD *)a2 <= (uint64_t)(*(_QWORD *)v5 << 8) >> 8;
              goto LABEL_108;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*(_BYTE *)(this + 20))
          {
            case 0:
              v13 = *(double *)a2 <= (double)*(uint64_t *)v5;
              goto LABEL_108;
            case 1:
              v50 = *(double *)v5;
              v51 = *(double *)a2;
LABEL_100:
              v52 = v50 < v51;
              goto LABEL_102;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              v52 = (double)*(int *)(this + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(this + 8) << 8) >> 8) < *(double *)a2;
LABEL_102:
              if (v52 && v5 != a2)
                goto LABEL_117;
              return this;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v14 = *(unsigned __int8 *)(this + 20);
          if (v14 - 3 < 7 || v14 < 2)
            return turi::flexible_type_fail(0);
          if (v14 != 2)
            turi::apply_binary_op_ff();
          this = std::string::compare[abi:ne180100]((const void **)(*(_QWORD *)v5 + 8), (_BYTE *)(*(_QWORD *)a2 + 8));
          if ((this & 0x80000000) == 0)
            return this;
          goto LABEL_116;
        case 3:
          v16 = *(unsigned __int8 *)(this + 20);
          if (v16 > 9)
            turi::apply_binary_op_ff();
          if (v16 != 3)
            return turi::flexible_type_fail(0);
          v17 = *(double **)(*(_QWORD *)v5 + 8);
          v18 = *(double **)(*(_QWORD *)a2 + 8);
          v19 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v18) >> 3;
          v20 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 16) - (_QWORD)v17) >> 3;
          if (*(double **)(*(_QWORD *)v5 + 16) == v17)
            goto LABEL_40;
          if (v20 <= 1)
            v21 = 1;
          else
            v21 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 16) - (_QWORD)v17) >> 3;
          v22 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v18) >> 3;
          break;
        case 4:
          v23 = *(unsigned __int8 *)(this + 20);
          if (v23 > 9)
            turi::apply_binary_op_ff();
          if (v23 != 4)
            return turi::flexible_type_fail(0);
          this = turi::flexible_type_impl::lt_operator::operator()(a3, (uint64_t)&v95, (uint64_t *)(*(_QWORD *)v5 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
          if ((_DWORD)this)
            v24 = v5 == a2;
          else
            v24 = 1;
          if (!v24)
            goto LABEL_117;
          return this;
        case 5:
          if (*(unsigned __int8 *)(this + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        case 6:
          switch(*(_BYTE *)(this + 20))
          {
            case 0:
              if (*(_QWORD *)v5 >= (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
                return this;
              goto LABEL_116;
            case 1:
              v13 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8) <= *(double *)v5;
LABEL_108:
              if (!v13 && v5 != a2)
                goto LABEL_117;
              return this;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              v55 = (uint64_t)(*(_QWORD *)v5 << 8) >> 8;
              if (v55 < (uint64_t)(*(_QWORD *)a2 << 8) >> 8
                || v55 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && *(_DWORD *)(this + 16) < *((_DWORD *)a2 + 2))
              {
                goto LABEL_116;
              }
              return this;
            default:
              turi::apply_binary_op_ff();
          }
        case 8:
          if (*(unsigned __int8 *)(this + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        case 9:
          if (*(unsigned __int8 *)(this + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        default:
          turi::apply_binary_op_ff();
      }
      while (v22 && *v17 <= *v18)
      {
        if (*v17 < *v18)
          goto LABEL_116;
        --v22;
        ++v17;
        ++v18;
        if (!--v21)
        {
LABEL_40:
          if (v20 >= v19)
            return this;
LABEL_116:
          if (v5 != a2)
          {
LABEL_117:
            switch(*(_BYTE *)(v4 + 20))
            {
              case 2:
                v56 = *(unint64_t **)v5;
                do
                {
                  v57 = __ldaxr(v56);
                  v58 = v57 - 1;
                }
                while (__stlxr(v58, v56));
                if (!v58)
                {
                  v59 = *(double *)v5;
                  if (!*(_QWORD *)v5)
                    goto LABEL_155;
                  if (*(char *)(*(_QWORD *)&v59 + 31) < 0)
                    operator delete(*(void **)(*(_QWORD *)&v59 + 8));
                  v60 = v59;
                  v61 = 0x1012C404EF22A49;
                  goto LABEL_154;
                }
                break;
              case 3:
                v62 = *(unint64_t **)v5;
                do
                {
                  v63 = __ldaxr(v62);
                  v64 = v63 - 1;
                }
                while (__stlxr(v64, v62));
                if (!v64)
                {
                  v65 = *(_QWORD **)v5;
                  if (!*(_QWORD *)v5)
                    goto LABEL_155;
                  v66 = (void *)v65[1];
                  if (v66)
                  {
                    v65[2] = v66;
                    operator delete(v66);
                  }
                  v60 = *(double *)&v65;
                  v61 = 0x1080C409938AC02;
                  goto LABEL_154;
                }
                break;
              case 4:
                v67 = *(unint64_t **)v5;
                do
                {
                  v68 = __ldaxr(v67);
                  v69 = v68 - 1;
                }
                while (__stlxr(v69, v67));
                if (!v69)
                {
                  v70 = *(double *)v5;
                  if (!*(_QWORD *)v5)
                    goto LABEL_155;
                  v95 = (void **)(*(_QWORD *)&v70 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v95);
                  goto LABEL_142;
                }
                break;
              case 5:
                v71 = *(unint64_t **)v5;
                do
                {
                  v72 = __ldaxr(v71);
                  v73 = v72 - 1;
                }
                while (__stlxr(v73, v71));
                if (!v73)
                {
                  v70 = *(double *)v5;
                  if (!*(_QWORD *)v5)
                    goto LABEL_155;
                  v95 = (void **)(*(_QWORD *)&v70 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v95);
LABEL_142:
                  v60 = v70;
                  v61 = 0x1020C405E66F15BLL;
                  goto LABEL_154;
                }
                break;
              case 8:
                v74 = *(unint64_t **)v5;
                do
                {
                  v75 = __ldaxr(v74);
                  v76 = v75 - 1;
                }
                while (__stlxr(v76, v74));
                if (!v76)
                {
                  v77 = *(double *)v5;
                  if (!*(_QWORD *)v5)
                    goto LABEL_155;
                  boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v77 + 16));
                  v60 = v77;
                  v78 = -235920773;
                  goto LABEL_153;
                }
                break;
              case 9:
                v79 = *(unint64_t **)v5;
                do
                {
                  v80 = __ldaxr(v79);
                  v81 = v80 - 1;
                }
                while (__stlxr(v81, v79));
                if (!v81)
                {
                  this = *(_QWORD *)v5;
                  if (*(_QWORD *)v5)
                  {
                    v60 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)this));
                    v78 = 2071181815;
LABEL_153:
                    v61 = v78 | 0x1030C4000000000;
LABEL_154:
                    this = MEMORY[0x219A19A08](*(_QWORD *)&v60, v61);
                  }
LABEL_155:
                  *(_QWORD *)v5 = 0;
                }
                break;
              default:
                break;
            }
            v82 = *(double *)a2;
            *(_QWORD *)((char *)v5 + 5) = *(_QWORD *)((char *)a2 + 5);
            *(double *)v5 = v82;
            LODWORD(v82) = *((unsigned __int8 *)a2 + 12);
            *(_BYTE *)(v4 + 20) = LOBYTE(v82);
            switch(LODWORD(v82))
            {
              case 2:
                v83 = *(unint64_t **)v5;
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 + 1, v83));
                break;
              case 3:
                v85 = *(unint64_t **)v5;
                do
                  v86 = __ldaxr(v85);
                while (__stlxr(v86 + 1, v85));
                break;
              case 4:
                v87 = *(unint64_t **)v5;
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 + 1, v87));
                break;
              case 5:
                v89 = *(unint64_t **)v5;
                do
                  v90 = __ldaxr(v89);
                while (__stlxr(v90 + 1, v89));
                break;
              case 8:
                v91 = *(unint64_t **)v5;
                do
                  v92 = __ldaxr(v91);
                while (__stlxr(v92 + 1, v91));
                break;
              case 9:
                v93 = *(unint64_t **)v5;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 + 1, v93));
                break;
              default:
                return this;
            }
          }
          return this;
        }
      }
    }
    else
    {
      if (v5 != a2)
      {
        switch(*(_BYTE *)(this + 20))
        {
          case 2:
            v7 = *(unint64_t **)v5;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              v10 = *(double *)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_88;
              if (*(char *)(*(_QWORD *)&v10 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v10 + 8));
              v11 = v10;
              v12 = 0x1012C404EF22A49;
              goto LABEL_87;
            }
            break;
          case 3:
            v25 = *(unint64_t **)v5;
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v28 = *(_QWORD **)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_88;
              v29 = (void *)v28[1];
              if (v29)
              {
                v28[2] = v29;
                operator delete(v29);
              }
              v11 = *(double *)&v28;
              v12 = 0x1080C409938AC02;
              goto LABEL_87;
            }
            break;
          case 4:
            v30 = *(unint64_t **)v5;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = *(double *)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_88;
              v95 = (void **)(*(_QWORD *)&v33 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v95);
              goto LABEL_75;
            }
            break;
          case 5:
            v34 = *(unint64_t **)v5;
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v33 = *(double *)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_88;
              v95 = (void **)(*(_QWORD *)&v33 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v95);
LABEL_75:
              v11 = v33;
              v12 = 0x1020C405E66F15BLL;
              goto LABEL_87;
            }
            break;
          case 8:
            v37 = *(unint64_t **)v5;
            do
            {
              v38 = __ldaxr(v37);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, v37));
            if (!v39)
            {
              v40 = *(double *)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_88;
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v40 + 16));
              v11 = v40;
              v41 = -235920773;
              goto LABEL_86;
            }
            break;
          case 9:
            v42 = *(unint64_t **)v5;
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              this = *(_QWORD *)v5;
              if (*(_QWORD *)v5)
              {
                v11 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)this));
                v41 = 2071181815;
LABEL_86:
                v12 = v41 | 0x1030C4000000000;
LABEL_87:
                this = MEMORY[0x219A19A08](*(_QWORD *)&v11, v12);
              }
LABEL_88:
              *(_QWORD *)v5 = 0;
            }
            break;
          default:
            break;
        }
        v45 = *(double *)a2;
        *(_QWORD *)((char *)v5 + 5) = *(_QWORD *)((char *)a2 + 5);
        *(double *)v5 = v45;
        LODWORD(v45) = *((unsigned __int8 *)a2 + 12);
        *(_BYTE *)(v4 + 20) = LOBYTE(v45);
        v13 = LODWORD(v45) > 9;
        v46 = (1 << SLOBYTE(v45)) & 0x33C;
        if (!v13 && v46 != 0)
        {
          v48 = *(unint64_t **)v5;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 + 1, v48));
        }
      }
      *(_BYTE *)(v4 + 24) = 1;
    }
  }
  return this;
}

uint64_t turi::groupby_operators::max::combine(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  __n128 v4;
  uint64_t v5;
  unint64_t **v6;
  unint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t **v10;
  unint64_t **v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  double *v20;
  double *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  BOOL v48;
  int v49;
  unint64_t *v51;
  unint64_t v52;
  double v53;
  double v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unsigned int v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  void **v95;

  if (!result)
    __cxa_bad_cast();
  v5 = result;
  if (*(_BYTE *)(result + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v6 = (unint64_t **)(a1 + 8);
      v7 = (unint64_t **)(result + 8);
      switch(*(_BYTE *)(result + 20))
      {
        case 0:
          switch(*(_BYTE *)(a1 + 20))
          {
            case 0:
              if (result == a1)
                return result;
              v8 = *(_QWORD *)(a1 + 8);
              v9 = *(_QWORD *)(result + 8);
              goto LABEL_102;
            case 1:
              if (result == a1)
                return result;
              v53 = *(double *)(a1 + 8);
              v54 = (double)*(uint64_t *)(result + 8);
              goto LABEL_106;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if (result == a1)
                return result;
              v9 = *(_QWORD *)(result + 8);
              v8 = (uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8;
LABEL_102:
              if (v8 >= v9)
                return result;
              goto LABEL_120;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*(_BYTE *)(a1 + 20))
          {
            case 0:
              if (result == a1 || *(double *)(result + 8) <= (double)*(uint64_t *)(a1 + 8))
                return result;
              goto LABEL_120;
            case 1:
              if (result == a1)
                return result;
              v53 = *(double *)(a1 + 8);
              v54 = *(double *)(result + 8);
LABEL_106:
              if (v53 >= v54)
                return result;
              goto LABEL_120;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if (result == a1
                || (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8) >= *(double *)(result + 8))
              {
                return result;
              }
              goto LABEL_120;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v18 = *(unsigned __int8 *)(a1 + 20);
          if (v18 - 3 < 7 || v18 < 2)
            return turi::flexible_type_fail(0);
          if (v18 != 2)
            turi::apply_binary_op_ff();
          result = std::string::compare[abi:ne180100]((const void **)(*(_QWORD *)(a1 + 8) + 8), (_BYTE *)(*(_QWORD *)(result + 8) + 8));
          if (v5 == a1 || (result & 0x80000000) == 0)
            return result;
          goto LABEL_120;
        case 3:
          v19 = *(unsigned __int8 *)(a1 + 20);
          if (v19 > 9)
            turi::apply_binary_op_ff();
          if (v19 != 3)
            return turi::flexible_type_fail(0);
          v20 = (double *)(*v6)[1];
          v21 = (double *)(*v7)[1];
          v22 = (uint64_t)((*v7)[2] - (_QWORD)v21) >> 3;
          v23 = (uint64_t)((*v6)[2] - (_QWORD)v20) >> 3;
          if ((double *)(*v6)[2] == v20)
            goto LABEL_39;
          if (v23 <= 1)
            v24 = 1;
          else
            v24 = (uint64_t)((*v6)[2] - (_QWORD)v20) >> 3;
          v25 = (uint64_t)((*v7)[2] - (_QWORD)v21) >> 3;
          break;
        case 4:
          v26 = *(unsigned __int8 *)(a1 + 20);
          if (v26 > 9)
            turi::apply_binary_op_ff();
          if (v26 != 4)
            return turi::flexible_type_fail(0);
          result = turi::flexible_type_impl::lt_operator::operator()(v4, (uint64_t)&v95, (uint64_t *)(*(_QWORD *)(a1 + 8) + 8), (_QWORD *)(*(_QWORD *)(result + 8) + 8));
          if (v5 == a1 || (result & 1) == 0)
            return result;
          goto LABEL_120;
        case 5:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        case 6:
          switch(*(_BYTE *)(a1 + 20))
          {
            case 0:
              if (result == a1 || (uint64_t)(*(_QWORD *)(result + 8) << 8) >> 8 <= *(_QWORD *)(a1 + 8))
                return result;
              goto LABEL_120;
            case 1:
              if (result == a1
                || (double)*(int *)(result + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(result + 8) << 8) >> 8) <= *(double *)(a1 + 8))
              {
                return result;
              }
              goto LABEL_120;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              v55 = (uint64_t)((_QWORD)*v6 << 8) >> 8;
              if (v55 < (uint64_t)((_QWORD)*v7 << 8) >> 8)
                goto LABEL_115;
              if (v55 == (uint64_t)((_QWORD)*v7 << 8) >> 8
                && result != a1
                && *(_DWORD *)(a1 + 16) < *(_DWORD *)(result + 16))
              {
                goto LABEL_120;
              }
              return result;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        case 8:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        case 9:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        default:
          turi::apply_binary_op_ff();
      }
      while (1)
      {
        if (!v25 || *v20 > *v21)
          return result;
        if (*v20 < *v21)
          break;
        --v25;
        ++v20;
        ++v21;
        if (!--v24)
        {
LABEL_39:
          if (result == a1 || v23 >= v22)
            return result;
          goto LABEL_120;
        }
      }
LABEL_115:
      if (result == a1)
        return result;
LABEL_120:
      switch(*(_BYTE *)(a1 + 20))
      {
        case 2:
          v56 = *v6;
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (!v58)
          {
            v59 = *v6;
            if (!*v6)
              goto LABEL_158;
            if (*((char *)v59 + 31) < 0)
              operator delete((void *)v59[1]);
            v60 = v59;
            v61 = 0x1012C404EF22A49;
            goto LABEL_157;
          }
          break;
        case 3:
          v62 = *v6;
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v65 = *v6;
            if (!*v6)
              goto LABEL_158;
            v66 = (void *)v65[1];
            if (v66)
            {
              v65[2] = (unint64_t)v66;
              operator delete(v66);
            }
            v60 = v65;
            v61 = 0x1080C409938AC02;
            goto LABEL_157;
          }
          break;
        case 4:
          v67 = *v6;
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (!v69)
          {
            v70 = *v6;
            if (!*v6)
              goto LABEL_158;
            v95 = (void **)(v70 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v95);
            goto LABEL_145;
          }
          break;
        case 5:
          v71 = *v6;
          do
          {
            v72 = __ldaxr(v71);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, v71));
          if (!v73)
          {
            v70 = *v6;
            if (!*v6)
              goto LABEL_158;
            v95 = (void **)(v70 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v95);
LABEL_145:
            v60 = v70;
            v61 = 0x1020C405E66F15BLL;
            goto LABEL_157;
          }
          break;
        case 8:
          v74 = *v6;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            v77 = *v6;
            if (!*v6)
              goto LABEL_158;
            boost::detail::shared_count::~shared_count((unsigned int **)v77 + 2);
            v60 = v77;
            v78 = -235920773;
            goto LABEL_156;
          }
          break;
        case 9:
          v79 = *v6;
          do
          {
            v80 = __ldaxr(v79);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, v79));
          if (!v81)
          {
            result = (uint64_t)*v6;
            if (*v6)
            {
              v60 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)result);
              v78 = 2071181815;
LABEL_156:
              v61 = v78 | 0x1030C4000000000;
LABEL_157:
              result = MEMORY[0x219A19A08](v60, v61);
            }
LABEL_158:
            *v6 = 0;
          }
          break;
        default:
          break;
      }
      v82 = *v7;
      *(_QWORD *)(a1 + 13) = *(_QWORD *)(v5 + 13);
      *v6 = v82;
      LODWORD(v82) = *(unsigned __int8 *)(v5 + 20);
      *(_BYTE *)(a1 + 20) = (_BYTE)v82;
      switch((int)v82)
      {
        case 2:
          v83 = *v6;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 + 1, v83));
          break;
        case 3:
          v85 = *v6;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 + 1, v85));
          break;
        case 4:
          v87 = *v6;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 + 1, v87));
          break;
        case 5:
          v89 = *v6;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 + 1, v89));
          break;
        case 8:
          v91 = *v6;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 + 1, v91));
          break;
        case 9:
          v93 = *v6;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 + 1, v93));
          break;
        default:
          return result;
      }
      return result;
    }
    if (result != a1)
    {
      v10 = (unint64_t **)(result + 8);
      v11 = (unint64_t **)(a1 + 8);
      switch(*(_BYTE *)(a1 + 20))
      {
        case 2:
          v12 = *v11;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            v15 = *v11;
            if (!*v11)
              goto LABEL_89;
            if (*((char *)v15 + 31) < 0)
              operator delete((void *)v15[1]);
            v16 = v15;
            v17 = 0x1012C404EF22A49;
            goto LABEL_88;
          }
          break;
        case 3:
          v27 = *v11;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            v30 = *v11;
            if (!*v11)
              goto LABEL_89;
            v31 = (void *)v30[1];
            if (v31)
            {
              v30[2] = (unint64_t)v31;
              operator delete(v31);
            }
            v16 = v30;
            v17 = 0x1080C409938AC02;
            goto LABEL_88;
          }
          break;
        case 4:
          v32 = *v11;
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            v35 = *v11;
            if (!*v11)
              goto LABEL_89;
            v95 = (void **)(v35 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v95);
            goto LABEL_76;
          }
          break;
        case 5:
          v36 = *v11;
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v35 = *v11;
            if (!*v11)
              goto LABEL_89;
            v95 = (void **)(v35 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v95);
LABEL_76:
            v16 = v35;
            v17 = 0x1020C405E66F15BLL;
            goto LABEL_88;
          }
          break;
        case 8:
          v39 = *v11;
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (!v41)
          {
            v42 = *v11;
            if (!*v11)
              goto LABEL_89;
            boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
            v16 = v42;
            v43 = -235920773;
            goto LABEL_87;
          }
          break;
        case 9:
          v44 = *v11;
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            result = (uint64_t)*v11;
            if (*v11)
            {
              v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)result);
              v43 = 2071181815;
LABEL_87:
              v17 = v43 | 0x1030C4000000000;
LABEL_88:
              result = MEMORY[0x219A19A08](v16, v17);
            }
LABEL_89:
            *v11 = 0;
          }
          break;
        default:
          break;
      }
      v47 = *v10;
      *(_QWORD *)(a1 + 13) = *(_QWORD *)(v5 + 13);
      *v11 = v47;
      LODWORD(v47) = *(unsigned __int8 *)(v5 + 20);
      *(_BYTE *)(a1 + 20) = (_BYTE)v47;
      v48 = v47 > 9;
      v49 = (1 << (char)v47) & 0x33C;
      if (!v48 && v49 != 0)
      {
        v51 = *v11;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 + 1, v51));
      }
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t turi::groupby_operators::max::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(this + 24))
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    if (this + 8 == a2)
      return this;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(this + 13);
    *(_QWORD *)a2 = *(_QWORD *)(this + 8);
    v2 = *(unsigned __int8 *)(this + 20);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    if ((uint64_t *)a2 == &turi::FLEX_UNDEFINED)
      return this;
    *(_QWORD *)(a2 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
    *(_QWORD *)a2 = turi::FLEX_UNDEFINED;
    v2 = byte_254FF06EC;
  }
  *(_BYTE *)(a2 + 12) = v2;
  v3 = v2 > 9;
  v4 = (1 << v2) & 0x33C;
  if (!v3 && v4 != 0)
  {
    v6 = *(unint64_t **)a2;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  return this;
}

BOOL turi::groupby_operators::max::support_type(uint64_t a1, unsigned int a2)
{
  return a2 < 2 || a2 == 6;
}

_QWORD *turi::groupby_operators::max::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Max");
}

_BYTE *turi::groupby_operators::max::save(turi::groupby_operators::max *this, turi::oarchive *a2)
{
  _BYTE *v4;
  _BYTE *result;
  unint64_t v6;
  size_t v7;
  uint64_t *v8;
  size_t v9;
  BOOL v10;
  std::vector<char>::size_type v11;

  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 1);
  v4 = (char *)this + 24;
  if (*(_QWORD *)a2)
    return (_BYTE *)std::ostream::write();
  v6 = *((_QWORD *)a2 + 5);
  if (*((_QWORD *)a2 + 4) + 1 > v6)
  {
    v7 = 2 * v6 + 2;
    *((_QWORD *)a2 + 5) = v7;
    v8 = (uint64_t *)*((_QWORD *)a2 + 2);
    if (v8)
    {
      result = (_BYTE *)*v8;
      v9 = v8[1] - *v8;
      v10 = v7 >= v9;
      v11 = v7 - v9;
      if (v11 != 0 && v10)
      {
        std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v11);
        result = (_BYTE *)**((_QWORD **)a2 + 2);
      }
      else if (!v10)
      {
        v8[1] = (uint64_t)&result[v7];
      }
    }
    else
    {
      result = malloc_type_realloc(*((void **)a2 + 3), v7, 0xF6EA6B1uLL);
    }
    *((_QWORD *)a2 + 3) = result;
  }
  else
  {
    result = (_BYTE *)*((_QWORD *)a2 + 3);
  }
  result[(*((_QWORD *)a2 + 4))++] = *v4;
  return result;
}

void turi::groupby_operators::max::load(turi::groupby_operators::max *this, turi::iarchive *a2)
{
  uint64_t v4;

  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, (_QWORD **)this + 1);
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
    *((_BYTE *)this + 24) = *(_BYTE *)(v4 + (*((_QWORD *)a2 + 3))++);
  else
    std::istream::read();
}

void turi::groupby_operators::max::~max(turi::groupby_operators::max *this)
{
  turi::groupby_operators::max::~max(this);
  JUMPOUT(0x219A19A08);
}

{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v31;

  *(_QWORD *)this = &unk_24D92FBB0;
  switch(*((_BYTE *)this + 20))
  {
    case 2:
      v2 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *((_QWORD *)this + 1);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = (_QWORD *)*((_QWORD *)this + 1);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *((_QWORD *)this + 1);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (_QWORD *)*((_QWORD *)this + 1);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
}

uint64_t turi::groupby_operators::max::set_input_type(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void **v36;

  switch(*(_BYTE *)(a1 + 20))
  {
    case 2:
      v4 = *(unint64_t **)(a1 + 8);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(_QWORD *)(a1 + 8);
        if (!v7)
          goto LABEL_43;
        if (*(char *)(v7 + 31) < 0)
          operator delete(*(void **)(v7 + 8));
        v8 = (_QWORD *)v7;
        v9 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      v10 = *(unint64_t **)(a1 + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *(_QWORD **)(a1 + 8);
        if (!v13)
          goto LABEL_43;
        v14 = (void *)v13[1];
        if (v14)
        {
          v13[2] = v14;
          operator delete(v14);
        }
        v8 = v13;
        v9 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      v15 = *(unint64_t **)(a1 + 8);
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(_QWORD *)(a1 + 8);
        if (!v18)
          goto LABEL_43;
        v36 = (void **)(v18 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
        goto LABEL_26;
      }
      break;
    case 5:
      v19 = *(unint64_t **)(a1 + 8);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v18 = *(_QWORD *)(a1 + 8);
        if (!v18)
          goto LABEL_43;
        v36 = (void **)(v18 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_26:
        v8 = (_QWORD *)v18;
        v9 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      v22 = *(unint64_t **)(a1 + 8);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(_QWORD *)(a1 + 8);
        if (!v25)
          goto LABEL_43;
        boost::detail::shared_count::~shared_count((unsigned int **)(v25 + 16));
        v8 = (_QWORD *)v25;
        v26 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      v27 = *(unint64_t **)(a1 + 8);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(_QWORD **)(a1 + 8);
        if (v30)
        {
          v31 = (void *)v30[6];
          if (v31)
          {
            v30[7] = v31;
            operator delete(v31);
          }
          v32 = (void *)v30[3];
          if (v32)
          {
            v30[4] = v32;
            operator delete(v32);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
          v8 = v30;
          v26 = 2071181815;
LABEL_41:
          v9 = v26 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v8, v9);
        }
LABEL_43:
        *(_QWORD *)(a1 + 8) = 0;
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = a2;
  switch((int)a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      v33 = operator new();
      *(_QWORD *)v33 = 0;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 8) = 0;
      goto LABEL_48;
    case 6:
      *(_QWORD *)(a1 + 8) = 0x1900000000000000;
      *(_DWORD *)(a1 + 16) = 0;
      break;
    case 8:
      v33 = operator new();
      *(_QWORD *)v33 = 0;
      *(_OWORD *)(v33 + 8) = 0u;
      *(_OWORD *)(v33 + 24) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_QWORD *)(v33 + 56) = 0;
      *(_QWORD *)(v33 + 64) = 3;
LABEL_48:
      *(_QWORD *)(a1 + 8) = v33;
      *(_QWORD *)v33 = 1;
      break;
    case 9:
      v34 = (_QWORD *)operator new();
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v34);
      *(_QWORD *)(a1 + 8) = v34;
      *v34 = 1;
      break;
    default:
      return a2;
  }
  return a2;
}

void sub_218136544(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1030C407B73B9F7);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::groupby_operators::min>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92FC50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::min>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92FC50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::min>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

uint64_t turi::groupby_operators::min::new_instance(turi::groupby_operators::min *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24D92FCA0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 20) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  turi::groupby_operators::min::set_input_type(v2, *((char *)this + 20));
  return v2;
}

uint64_t turi::groupby_operators::min::add_element_simple(uint64_t this, const turi::flexible_type *a2, __n128 a3)
{
  uint64_t v4;
  const turi::flexible_type *v5;
  BOOL v6;
  unint64_t **v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v17;
  double *v18;
  double *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unsigned int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  double v59;
  double v60;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  double v68;
  double v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  void *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  double v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  double v86;
  unsigned int v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  double v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  void **v104;

  if (*((_BYTE *)a2 + 12) != 7)
  {
    v4 = this;
    if (*(_BYTE *)(this + 24))
    {
      v5 = (const turi::flexible_type *)(this + 8);
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          switch(*(_BYTE *)(this + 20))
          {
            case 0:
              v6 = *(_QWORD *)v5 <= *(_QWORD *)a2;
              goto LABEL_114;
            case 1:
              v59 = *(double *)v5;
              v60 = (double)*(uint64_t *)a2;
              goto LABEL_112;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if (*(_QWORD *)a2 < (uint64_t)(*(_QWORD *)v5 << 8) >> 8 && v5 != a2)
                goto LABEL_129;
              return this;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*(_BYTE *)(this + 20))
          {
            case 0:
              v14 = *(double *)a2 < (double)*(uint64_t *)v5;
              goto LABEL_120;
            case 1:
              v59 = *(double *)v5;
              v60 = *(double *)a2;
LABEL_112:
              v6 = v59 <= v60;
              goto LABEL_114;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              v6 = (double)*(int *)(this + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(this + 8) << 8) >> 8) <= *(double *)a2;
LABEL_114:
              if (!v6 && v5 != a2)
                goto LABEL_129;
              return this;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v15 = *(unsigned __int8 *)(this + 20);
          if (v15 - 3 < 7 || v15 < 2)
            return turi::flexible_type_fail(0);
          if (v15 != 2)
            turi::apply_binary_op_ff();
          this = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)a2 + 8), (_QWORD *)(*(_QWORD *)v5 + 8));
          if (!(_DWORD)this)
            return this;
          goto LABEL_128;
        case 3:
          v17 = *(unsigned __int8 *)(this + 20);
          if (v17 > 9)
            turi::apply_binary_op_ff();
          if (v17 != 3)
            return turi::flexible_type_fail(0);
          v18 = *(double **)(*(_QWORD *)v5 + 8);
          v19 = *(double **)(*(_QWORD *)a2 + 8);
          v20 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v19) >> 3;
          v21 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 16) - (_QWORD)v18) >> 3;
          if (*(double **)(*(_QWORD *)v5 + 16) == v18)
            goto LABEL_36;
          if (v21 <= 1)
            v22 = 1;
          else
            v22 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 16) - (_QWORD)v18) >> 3;
          v23 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v19) >> 3;
          break;
        case 4:
          v24 = *(unsigned __int8 *)(this + 20);
          if (v24 > 9)
            turi::apply_binary_op_ff();
          if (v24 != 4)
            return turi::flexible_type_fail(0);
          this = turi::flexible_type_impl::gt_operator::operator()(a3, (uint64_t)&v104, (uint64_t *)(*(_QWORD *)v5 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
          if ((_DWORD)this)
            v25 = v5 == a2;
          else
            v25 = 1;
          if (!v25)
            goto LABEL_129;
          return this;
        case 5:
          if (*(unsigned __int8 *)(this + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        case 6:
          switch(*(_BYTE *)(this + 20))
          {
            case 0:
              if (*(_QWORD *)v5 <= (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
                return this;
              goto LABEL_128;
            case 1:
              v14 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8) < *(double *)v5;
LABEL_120:
              if (v14 && v5 != a2)
                goto LABEL_129;
              return this;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              v64 = (uint64_t)(*(_QWORD *)v5 << 8) >> 8;
              if (v64 > (uint64_t)(*(_QWORD *)a2 << 8) >> 8
                || v64 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && *(_DWORD *)(this + 16) > *((_DWORD *)a2 + 2))
              {
                goto LABEL_128;
              }
              return this;
            default:
              turi::apply_binary_op_ff();
          }
        case 8:
          if (*(unsigned __int8 *)(this + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        case 9:
          if (*(unsigned __int8 *)(this + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        default:
          turi::apply_binary_op_ff();
      }
      while (v23 && *v18 <= *v19)
      {
        if (*v18 < *v19)
          return this;
        --v23;
        ++v18;
        ++v19;
        if (!--v22)
        {
LABEL_36:
          if (v21 <= v20)
            return this;
          break;
        }
      }
LABEL_128:
      if (v5 != a2)
      {
LABEL_129:
        switch(*(_BYTE *)(v4 + 20))
        {
          case 2:
            v65 = *(unint64_t **)v5;
            do
            {
              v66 = __ldaxr(v65);
              v67 = v66 - 1;
            }
            while (__stlxr(v67, v65));
            if (!v67)
            {
              v68 = *(double *)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_167;
              if (*(char *)(*(_QWORD *)&v68 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v68 + 8));
              v69 = v68;
              v70 = 0x1012C404EF22A49;
              goto LABEL_166;
            }
            break;
          case 3:
            v71 = *(unint64_t **)v5;
            do
            {
              v72 = __ldaxr(v71);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, v71));
            if (!v73)
            {
              v74 = *(_QWORD **)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_167;
              v75 = (void *)v74[1];
              if (v75)
              {
                v74[2] = v75;
                operator delete(v75);
              }
              v69 = *(double *)&v74;
              v70 = 0x1080C409938AC02;
              goto LABEL_166;
            }
            break;
          case 4:
            v76 = *(unint64_t **)v5;
            do
            {
              v77 = __ldaxr(v76);
              v78 = v77 - 1;
            }
            while (__stlxr(v78, v76));
            if (!v78)
            {
              v79 = *(double *)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_167;
              v104 = (void **)(*(_QWORD *)&v79 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v104);
              goto LABEL_154;
            }
            break;
          case 5:
            v80 = *(unint64_t **)v5;
            do
            {
              v81 = __ldaxr(v80);
              v82 = v81 - 1;
            }
            while (__stlxr(v82, v80));
            if (!v82)
            {
              v79 = *(double *)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_167;
              v104 = (void **)(*(_QWORD *)&v79 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v104);
LABEL_154:
              v69 = v79;
              v70 = 0x1020C405E66F15BLL;
              goto LABEL_166;
            }
            break;
          case 8:
            v83 = *(unint64_t **)v5;
            do
            {
              v84 = __ldaxr(v83);
              v85 = v84 - 1;
            }
            while (__stlxr(v85, v83));
            if (!v85)
            {
              v86 = *(double *)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_167;
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v86 + 16));
              v69 = v86;
              v87 = -235920773;
              goto LABEL_165;
            }
            break;
          case 9:
            v88 = *(unint64_t **)v5;
            do
            {
              v89 = __ldaxr(v88);
              v90 = v89 - 1;
            }
            while (__stlxr(v90, v88));
            if (!v90)
            {
              this = *(_QWORD *)v5;
              if (*(_QWORD *)v5)
              {
                v69 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)this));
                v87 = 2071181815;
LABEL_165:
                v70 = v87 | 0x1030C4000000000;
LABEL_166:
                this = MEMORY[0x219A19A08](*(_QWORD *)&v69, v70);
              }
LABEL_167:
              *(_QWORD *)v5 = 0;
            }
            break;
          default:
            break;
        }
        v91 = *(double *)a2;
        *(_QWORD *)(v4 + 13) = *(_QWORD *)((char *)a2 + 5);
        *(double *)v5 = v91;
        LODWORD(v91) = *((unsigned __int8 *)a2 + 12);
        *(_BYTE *)(v4 + 20) = LOBYTE(v91);
        switch(LODWORD(v91))
        {
          case 2:
            v92 = *(unint64_t **)v5;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 + 1, v92));
            break;
          case 3:
            v94 = *(unint64_t **)v5;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 + 1, v94));
            break;
          case 4:
            v96 = *(unint64_t **)v5;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 + 1, v96));
            break;
          case 5:
            v98 = *(unint64_t **)v5;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 + 1, v98));
            break;
          case 8:
            v100 = *(unint64_t **)v5;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 + 1, v100));
            break;
          case 9:
            v102 = *(unint64_t **)v5;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 + 1, v102));
            break;
          default:
            return this;
        }
      }
    }
    else
    {
      *(_BYTE *)(this + 24) = 1;
      v7 = (unint64_t **)(this + 8);
      if ((const turi::flexible_type *)(this + 8) != a2)
      {
        switch(*(_BYTE *)(this + 20))
        {
          case 2:
            v8 = *v7;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              v11 = *v7;
              if (!*v7)
                goto LABEL_85;
              if (*((char *)v11 + 31) < 0)
                operator delete((void *)v11[1]);
              v12 = v11;
              v13 = 0x1012C404EF22A49;
              goto LABEL_84;
            }
            break;
          case 3:
            v26 = *v7;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              v29 = *v7;
              if (!*v7)
                goto LABEL_85;
              v30 = (void *)v29[1];
              if (v30)
              {
                v29[2] = (unint64_t)v30;
                operator delete(v30);
              }
              v12 = v29;
              v13 = 0x1080C409938AC02;
              goto LABEL_84;
            }
            break;
          case 4:
            v31 = *v7;
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              v34 = *v7;
              if (!*v7)
                goto LABEL_85;
              v104 = (void **)(v34 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v104);
              goto LABEL_72;
            }
            break;
          case 5:
            v35 = *v7;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              v34 = *v7;
              if (!*v7)
                goto LABEL_85;
              v104 = (void **)(v34 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v104);
LABEL_72:
              v12 = v34;
              v13 = 0x1020C405E66F15BLL;
              goto LABEL_84;
            }
            break;
          case 8:
            v38 = *v7;
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              v41 = *v7;
              if (!*v7)
                goto LABEL_85;
              boost::detail::shared_count::~shared_count((unsigned int **)v41 + 2);
              v12 = v41;
              v42 = -235920773;
              goto LABEL_83;
            }
            break;
          case 9:
            v43 = *v7;
            do
            {
              v44 = __ldaxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
            {
              this = (uint64_t)*v7;
              if (*v7)
              {
                v12 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)this);
                v42 = 2071181815;
LABEL_83:
                v13 = v42 | 0x1030C4000000000;
LABEL_84:
                this = MEMORY[0x219A19A08](v12, v13);
              }
LABEL_85:
              *v7 = 0;
            }
            break;
          default:
            break;
        }
        v46 = *(unint64_t **)a2;
        *(_QWORD *)(v4 + 13) = *(_QWORD *)((char *)a2 + 5);
        *v7 = v46;
        LODWORD(v46) = *((unsigned __int8 *)a2 + 12);
        *(_BYTE *)(v4 + 20) = (_BYTE)v46;
        switch((int)v46)
        {
          case 2:
            v47 = *v7;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 + 1, v47));
            break;
          case 3:
            v49 = *v7;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 + 1, v49));
            break;
          case 4:
            v51 = *v7;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 + 1, v51));
            break;
          case 5:
            v53 = *v7;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 + 1, v53));
            break;
          case 8:
            v55 = *v7;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 + 1, v55));
            break;
          case 9:
            v57 = *v7;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 + 1, v57));
            break;
          default:
            return this;
        }
      }
    }
  }
  return this;
}

uint64_t turi::groupby_operators::min::combine(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  __n128 v4;
  uint64_t v5;
  unint64_t **v6;
  unint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t **v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  double *v19;
  double *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unsigned int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  double v59;
  double v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  void *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unsigned int v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;

  if (!result)
    __cxa_bad_cast();
  v5 = result;
  if (*(_BYTE *)(result + 24))
  {
    v6 = (unint64_t **)(result + 8);
    if (*(_BYTE *)(a1 + 24))
    {
      v7 = (unint64_t **)(a1 + 8);
      switch(*(_BYTE *)(result + 20))
      {
        case 0:
          switch(*(_BYTE *)(a1 + 20))
          {
            case 0:
              if (result == a1)
                return result;
              v8 = *(_QWORD *)(a1 + 8);
              v9 = *(_QWORD *)(result + 8);
              goto LABEL_113;
            case 1:
              if (result == a1)
                return result;
              v59 = *(double *)(a1 + 8);
              v60 = (double)*(uint64_t *)(result + 8);
              goto LABEL_117;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if (result == a1)
                return result;
              v9 = *(_QWORD *)(result + 8);
              v8 = (uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8;
LABEL_113:
              if (v8 <= v9)
                return result;
              goto LABEL_127;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*(_BYTE *)(a1 + 20))
          {
            case 0:
              if (result == a1 || *(double *)(result + 8) >= (double)*(uint64_t *)(a1 + 8))
                return result;
              goto LABEL_127;
            case 1:
              if (result == a1)
                return result;
              v59 = *(double *)(a1 + 8);
              v60 = *(double *)(result + 8);
LABEL_117:
              if (v59 <= v60)
                return result;
              goto LABEL_127;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if (result == a1
                || (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8) <= *(double *)(result + 8))
              {
                return result;
              }
              goto LABEL_127;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v17 = *(unsigned __int8 *)(a1 + 20);
          if (v17 - 3 < 7 || v17 < 2)
            return turi::flexible_type_fail(0);
          if (v17 != 2)
            turi::apply_binary_op_ff();
          result = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)(result + 8) + 8), (_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
          goto LABEL_43;
        case 3:
          v18 = *(unsigned __int8 *)(a1 + 20);
          if (v18 > 9)
            turi::apply_binary_op_ff();
          if (v18 != 3)
            return turi::flexible_type_fail(0);
          v19 = (double *)(*v7)[1];
          v20 = (double *)(*v6)[1];
          v21 = (uint64_t)((*v6)[2] - (_QWORD)v20) >> 3;
          v22 = (uint64_t)((*v7)[2] - (_QWORD)v19) >> 3;
          if ((double *)(*v7)[2] == v19)
            goto LABEL_37;
          if (v22 <= 1)
            v23 = 1;
          else
            v23 = (uint64_t)((*v7)[2] - (_QWORD)v19) >> 3;
          v24 = (uint64_t)((*v6)[2] - (_QWORD)v20) >> 3;
          break;
        case 4:
          v25 = *(unsigned __int8 *)(a1 + 20);
          if (v25 > 9)
            turi::apply_binary_op_ff();
          if (v25 != 4)
            return turi::flexible_type_fail(0);
          result = turi::flexible_type_impl::gt_operator::operator()(v4, (uint64_t)&v101, (uint64_t *)(*(_QWORD *)(a1 + 8) + 8), (_QWORD *)(*(_QWORD *)(result + 8) + 8));
LABEL_43:
          if (v5 == a1 || (result & 1) == 0)
            return result;
          goto LABEL_127;
        case 5:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        case 6:
          switch(*(_BYTE *)(a1 + 20))
          {
            case 0:
              if (result == a1 || (uint64_t)(*(_QWORD *)(result + 8) << 8) >> 8 >= *(_QWORD *)(a1 + 8))
                return result;
              goto LABEL_127;
            case 1:
              if (result == a1
                || (double)*(int *)(result + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(result + 8) << 8) >> 8) >= *(double *)(a1 + 8))
              {
                return result;
              }
              goto LABEL_127;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              v61 = (uint64_t)((_QWORD)*v7 << 8) >> 8;
              if (v61 > (uint64_t)((_QWORD)*v6 << 8) >> 8)
                goto LABEL_126;
              if (v61 != (uint64_t)((_QWORD)*v6 << 8) >> 8
                || result == a1
                || *(_DWORD *)(a1 + 16) <= *(_DWORD *)(result + 16))
              {
                return result;
              }
              goto LABEL_127;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        case 8:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        case 9:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        default:
          turi::apply_binary_op_ff();
      }
      do
      {
        if (!v24 || *v19 > *v20)
        {
LABEL_126:
          if (result == a1)
            return result;
          goto LABEL_127;
        }
        if (*v19 < *v20)
          return result;
        --v24;
        ++v19;
        ++v20;
        --v23;
      }
      while (v23);
LABEL_37:
      if (result == a1 || v22 <= v21)
        return result;
LABEL_127:
      switch(*(_BYTE *)(a1 + 20))
      {
        case 2:
          v62 = *v7;
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v65 = *v7;
            if (!*v7)
              goto LABEL_165;
            if (*((char *)v65 + 31) < 0)
              operator delete((void *)v65[1]);
            v66 = v65;
            v67 = 0x1012C404EF22A49;
            goto LABEL_164;
          }
          break;
        case 3:
          v68 = *v7;
          do
          {
            v69 = __ldaxr(v68);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v68));
          if (!v70)
          {
            v71 = *v7;
            if (!*v7)
              goto LABEL_165;
            v72 = (void *)v71[1];
            if (v72)
            {
              v71[2] = (unint64_t)v72;
              operator delete(v72);
            }
            v66 = v71;
            v67 = 0x1080C409938AC02;
            goto LABEL_164;
          }
          break;
        case 4:
          v73 = *v7;
          do
          {
            v74 = __ldaxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (!v75)
          {
            v76 = *v7;
            if (!*v7)
              goto LABEL_165;
            v101 = (void **)(v76 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v101);
            goto LABEL_152;
          }
          break;
        case 5:
          v77 = *v7;
          do
          {
            v78 = __ldaxr(v77);
            v79 = v78 - 1;
          }
          while (__stlxr(v79, v77));
          if (!v79)
          {
            v76 = *v7;
            if (!*v7)
              goto LABEL_165;
            v101 = (void **)(v76 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v101);
LABEL_152:
            v66 = v76;
            v67 = 0x1020C405E66F15BLL;
            goto LABEL_164;
          }
          break;
        case 8:
          v80 = *v7;
          do
          {
            v81 = __ldaxr(v80);
            v82 = v81 - 1;
          }
          while (__stlxr(v82, v80));
          if (!v82)
          {
            v83 = *v7;
            if (!*v7)
              goto LABEL_165;
            boost::detail::shared_count::~shared_count((unsigned int **)v83 + 2);
            v66 = v83;
            v84 = -235920773;
            goto LABEL_163;
          }
          break;
        case 9:
          v85 = *v7;
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (!v87)
          {
            result = (uint64_t)*v7;
            if (*v7)
            {
              v66 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)result);
              v84 = 2071181815;
LABEL_163:
              v67 = v84 | 0x1030C4000000000;
LABEL_164:
              result = MEMORY[0x219A19A08](v66, v67);
            }
LABEL_165:
            *v7 = 0;
          }
          break;
        default:
          break;
      }
      v88 = *v6;
      *(_QWORD *)(a1 + 13) = *(_QWORD *)(v5 + 13);
      *v7 = v88;
      LODWORD(v88) = *(unsigned __int8 *)(v5 + 20);
      *(_BYTE *)(a1 + 20) = (_BYTE)v88;
      switch((int)v88)
      {
        case 2:
          v89 = *v7;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 + 1, v89));
          break;
        case 3:
          v91 = *v7;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 + 1, v91));
          break;
        case 4:
          v93 = *v7;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 + 1, v93));
          break;
        case 5:
          v95 = *v7;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 + 1, v95));
          break;
        case 8:
          v97 = *v7;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 + 1, v97));
          break;
        case 9:
          v99 = *v7;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 + 1, v99));
          break;
        default:
          return result;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 1;
      if (result != a1)
      {
        v10 = (unint64_t **)(a1 + 8);
        switch(*(_BYTE *)(a1 + 20))
        {
          case 2:
            v11 = *v10;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              v14 = *v10;
              if (!*v10)
                goto LABEL_89;
              if (*((char *)v14 + 31) < 0)
                operator delete((void *)v14[1]);
              v15 = v14;
              v16 = 0x1012C404EF22A49;
              goto LABEL_88;
            }
            break;
          case 3:
            v26 = *v10;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              v29 = *v10;
              if (!*v10)
                goto LABEL_89;
              v30 = (void *)v29[1];
              if (v30)
              {
                v29[2] = (unint64_t)v30;
                operator delete(v30);
              }
              v15 = v29;
              v16 = 0x1080C409938AC02;
              goto LABEL_88;
            }
            break;
          case 4:
            v31 = *v10;
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              v34 = *v10;
              if (!*v10)
                goto LABEL_89;
              v101 = (void **)(v34 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v101);
              goto LABEL_76;
            }
            break;
          case 5:
            v35 = *v10;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              v34 = *v10;
              if (!*v10)
                goto LABEL_89;
              v101 = (void **)(v34 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v101);
LABEL_76:
              v15 = v34;
              v16 = 0x1020C405E66F15BLL;
              goto LABEL_88;
            }
            break;
          case 8:
            v38 = *v10;
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              v41 = *v10;
              if (!*v10)
                goto LABEL_89;
              boost::detail::shared_count::~shared_count((unsigned int **)v41 + 2);
              v15 = v41;
              v42 = -235920773;
              goto LABEL_87;
            }
            break;
          case 9:
            v43 = *v10;
            do
            {
              v44 = __ldaxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
            {
              result = (uint64_t)*v10;
              if (*v10)
              {
                v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)result);
                v42 = 2071181815;
LABEL_87:
                v16 = v42 | 0x1030C4000000000;
LABEL_88:
                result = MEMORY[0x219A19A08](v15, v16);
              }
LABEL_89:
              *v10 = 0;
            }
            break;
          default:
            break;
        }
        v46 = *v6;
        *(_QWORD *)(a1 + 13) = *(_QWORD *)(v5 + 13);
        *v10 = v46;
        LODWORD(v46) = *(unsigned __int8 *)(v5 + 20);
        *(_BYTE *)(a1 + 20) = (_BYTE)v46;
        switch((int)v46)
        {
          case 2:
            v47 = *v10;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 + 1, v47));
            break;
          case 3:
            v49 = *v10;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 + 1, v49));
            break;
          case 4:
            v51 = *v10;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 + 1, v51));
            break;
          case 5:
            v53 = *v10;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 + 1, v53));
            break;
          case 8:
            v55 = *v10;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 + 1, v55));
            break;
          case 9:
            v57 = *v10;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 + 1, v57));
            break;
          default:
            return result;
        }
      }
    }
  }
  return result;
}

_QWORD *turi::groupby_operators::min::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Min");
}

void turi::groupby_operators::min::~min(turi::groupby_operators::min *this)
{
  turi::groupby_operators::min::~min(this);
  JUMPOUT(0x219A19A08);
}

{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v31;

  *(_QWORD *)this = &unk_24D92FCA0;
  switch(*((_BYTE *)this + 20))
  {
    case 2:
      v2 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *((_QWORD *)this + 1);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = (_QWORD *)*((_QWORD *)this + 1);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *((_QWORD *)this + 1);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (_QWORD *)*((_QWORD *)this + 1);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
}

uint64_t turi::groupby_operators::min::set_input_type(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void **v36;

  switch(*(_BYTE *)(a1 + 20))
  {
    case 2:
      v4 = *(unint64_t **)(a1 + 8);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(_QWORD *)(a1 + 8);
        if (!v7)
          goto LABEL_43;
        if (*(char *)(v7 + 31) < 0)
          operator delete(*(void **)(v7 + 8));
        v8 = (_QWORD *)v7;
        v9 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      v10 = *(unint64_t **)(a1 + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *(_QWORD **)(a1 + 8);
        if (!v13)
          goto LABEL_43;
        v14 = (void *)v13[1];
        if (v14)
        {
          v13[2] = v14;
          operator delete(v14);
        }
        v8 = v13;
        v9 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      v15 = *(unint64_t **)(a1 + 8);
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(_QWORD *)(a1 + 8);
        if (!v18)
          goto LABEL_43;
        v36 = (void **)(v18 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
        goto LABEL_26;
      }
      break;
    case 5:
      v19 = *(unint64_t **)(a1 + 8);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v18 = *(_QWORD *)(a1 + 8);
        if (!v18)
          goto LABEL_43;
        v36 = (void **)(v18 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_26:
        v8 = (_QWORD *)v18;
        v9 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      v22 = *(unint64_t **)(a1 + 8);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(_QWORD *)(a1 + 8);
        if (!v25)
          goto LABEL_43;
        boost::detail::shared_count::~shared_count((unsigned int **)(v25 + 16));
        v8 = (_QWORD *)v25;
        v26 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      v27 = *(unint64_t **)(a1 + 8);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(_QWORD **)(a1 + 8);
        if (v30)
        {
          v31 = (void *)v30[6];
          if (v31)
          {
            v30[7] = v31;
            operator delete(v31);
          }
          v32 = (void *)v30[3];
          if (v32)
          {
            v30[4] = v32;
            operator delete(v32);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
          v8 = v30;
          v26 = 2071181815;
LABEL_41:
          v9 = v26 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v8, v9);
        }
LABEL_43:
        *(_QWORD *)(a1 + 8) = 0;
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = a2;
  switch((int)a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      v33 = operator new();
      *(_QWORD *)v33 = 0;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 8) = 0;
      goto LABEL_48;
    case 6:
      *(_QWORD *)(a1 + 8) = 0x1900000000000000;
      *(_DWORD *)(a1 + 16) = 0;
      break;
    case 8:
      v33 = operator new();
      *(_QWORD *)v33 = 0;
      *(_OWORD *)(v33 + 8) = 0u;
      *(_OWORD *)(v33 + 24) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_QWORD *)(v33 + 56) = 0;
      *(_QWORD *)(v33 + 64) = 3;
LABEL_48:
      *(_QWORD *)(a1 + 8) = v33;
      *(_QWORD *)v33 = 1;
      break;
    case 9:
      v34 = (_QWORD *)operator new();
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v34);
      *(_QWORD *)(a1 + 8) = v34;
      *v34 = 1;
      break;
    default:
      return a2;
  }
  return a2;
}

void sub_218137C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1030C407B73B9F7);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::groupby_operators::argmin>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92FD40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::argmin>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92FD40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::argmin>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

uint64_t turi::groupby_operators::argmin::new_instance(turi::groupby_operators::argmin *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &unk_24D92FD90;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

void turi::groupby_operators::argmin::add_element(uint64_t a1, uint64_t **a2, __n128 a3)
{
  uint64_t *v4;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  double v9;
  unsigned int v10;
  BOOL v12;
  unsigned int v13;
  double *v14;
  uint64_t v15;
  double *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  double v22;
  double v23;
  uint64_t v24;
  char v25;

  v4 = *a2;
  if (*((_BYTE *)v4 + 12) != 7)
  {
    v6 = (uint64_t **)(a1 + 8);
    if (*(_BYTE *)(a1 + 32))
    {
      v7 = *v6;
      switch(*((_BYTE *)v4 + 12))
      {
        case 0:
          switch(*((_BYTE *)v7 + 12))
          {
            case 0:
              if (v6 == a2)
                return;
              v8 = *v7;
              v9 = *(double *)v4;
              goto LABEL_56;
            case 1:
              if (v6 == a2)
                return;
              v22 = *(double *)v7;
              v23 = (double)*v4;
              goto LABEL_60;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_50;
            case 6:
              if (v6 == a2)
                return;
              v9 = *(double *)v4;
              v8 = *v7 << 8 >> 8;
LABEL_56:
              if (v8 <= *(uint64_t *)&v9)
                return;
              goto LABEL_70;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*((_BYTE *)v7 + 12))
          {
            case 0:
              if (v6 == a2 || *(double *)v4 >= (double)*v7)
                return;
              goto LABEL_70;
            case 1:
              if (v6 == a2)
                return;
              v22 = *(double *)v7;
              v23 = *(double *)v4;
LABEL_60:
              if (v22 <= v23)
                return;
              goto LABEL_70;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_50;
            case 6:
              if (v6 == a2 || (double)*((int *)v7 + 2) / 1000000.0 + (double)(*v7 << 8 >> 8) <= *(double *)v4)
                return;
              goto LABEL_70;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v10 = *((unsigned __int8 *)v7 + 12);
          if (v10 - 3 < 7 || v10 < 2)
            goto LABEL_50;
          if (v10 != 2)
            turi::apply_binary_op_ff();
          v12 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*v4 + 8), (_QWORD *)(*v7 + 8));
          goto LABEL_38;
        case 3:
          v13 = *((unsigned __int8 *)v7 + 12);
          if (v13 > 9)
            turi::apply_binary_op_ff();
          if (v13 != 3)
            goto LABEL_50;
          v15 = *v7 + 8;
          v14 = *(double **)v15;
          v16 = *(double **)(*v4 + 8);
          v17 = (uint64_t)(*(_QWORD *)(*v4 + 16) - (_QWORD)v16) >> 3;
          v18 = (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 3;
          if (*(_QWORD *)(v15 + 8) == *(_QWORD *)v15)
            goto LABEL_32;
          if (v18 <= 1)
            v19 = 1;
          else
            v19 = v18;
          v20 = (uint64_t)(*(_QWORD *)(*v4 + 16) - (_QWORD)v16) >> 3;
          break;
        case 4:
          v21 = *((unsigned __int8 *)v7 + 12);
          if (v21 > 9)
            turi::apply_binary_op_ff();
          if (v21 != 4)
            goto LABEL_50;
          v12 = turi::flexible_type_impl::gt_operator::operator()(a3, (uint64_t)&v25, (uint64_t *)(*v7 + 8), (_QWORD *)(*v4 + 8));
LABEL_38:
          if (v6 == a2 || !v12)
            return;
          goto LABEL_70;
        case 5:
          if (*((unsigned __int8 *)v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_50;
        case 6:
          switch(*((_BYTE *)v7 + 12))
          {
            case 0:
              if (v6 == a2 || *v4 << 8 >> 8 >= *v7)
                return;
              goto LABEL_70;
            case 1:
              if (v6 == a2 || (double)*((int *)v4 + 2) / 1000000.0 + (double)(*v4 << 8 >> 8) >= *(double *)v7)
                return;
              goto LABEL_70;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_50;
            case 6:
              v24 = *v7 << 8 >> 8;
              if (v24 > *v4 << 8 >> 8)
                goto LABEL_69;
              if (v24 != *v4 << 8 >> 8 || v6 == a2 || *((_DWORD *)v7 + 2) <= *((_DWORD *)v4 + 2))
                return;
              goto LABEL_70;
            default:
              turi::apply_binary_op_ff();
          }
        case 8:
          if (*((unsigned __int8 *)v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_50;
        case 9:
          if (*((unsigned __int8 *)v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
LABEL_50:
          turi::flexible_type_fail(0);
          return;
        default:
          turi::apply_binary_op_ff();
      }
      while (v20 && *v14 <= *v16)
      {
        if (*v14 < *v16)
          return;
        --v20;
        ++v14;
        ++v16;
        if (!--v19)
        {
LABEL_32:
          if (v6 == a2 || v18 <= v17)
            return;
LABEL_70:
          std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)v6, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
          return;
        }
      }
LABEL_69:
      if (v6 == a2)
        return;
      goto LABEL_70;
    }
    if (v6 != a2)
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 8, v4, a2[1], ((char *)a2[1] - (char *)v4) >> 4);
    *(_BYTE *)(a1 + 32) = 1;
  }
}

void turi::groupby_operators::argmin::add_element_simple()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = "argmin does not support add_element_simple with one value";
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

void turi::groupby_operators::argmin::combine(uint64_t a1, void *lpsrc)
{
  uint64_t **v3;
  __n128 v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unsigned int v10;
  BOOL v12;
  unsigned int v13;
  double v14;
  double *v15;
  double *v16;
  double *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  double v23;
  double v24;
  uint64_t v25;
  char v26;

  if (!v3)
    __cxa_bad_cast();
  v5 = v3;
  if (*((_BYTE *)v3 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v6 = v3[1];
      v7 = *(_QWORD *)(a1 + 8);
      switch(*((_BYTE *)v6 + 12))
      {
        case 0:
          switch(*(_BYTE *)(v7 + 12))
          {
            case 0:
              if (v3 == (uint64_t **)a1)
                return;
              v8 = *(_QWORD *)v7;
              v9 = *(double *)v6;
              goto LABEL_59;
            case 1:
              if (v3 == (uint64_t **)a1)
                return;
              v23 = *(double *)v7;
              v24 = (double)*v6;
              goto LABEL_63;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_53;
            case 6:
              if (v3 == (uint64_t **)a1)
                return;
              v9 = *(double *)v6;
              v8 = (uint64_t)(*(_QWORD *)v7 << 8) >> 8;
LABEL_59:
              if (v8 <= *(uint64_t *)&v9)
                return;
              goto LABEL_73;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*(_BYTE *)(v7 + 12))
          {
            case 0:
              if (v3 == (uint64_t **)a1 || *(double *)v6 >= (double)*(uint64_t *)v7)
                return;
              goto LABEL_73;
            case 1:
              if (v3 == (uint64_t **)a1)
                return;
              v23 = *(double *)v7;
              v24 = *(double *)v6;
LABEL_63:
              if (v23 <= v24)
                return;
              goto LABEL_73;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_53;
            case 6:
              if (v3 == (uint64_t **)a1
                || (double)*(int *)(v7 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v7 << 8) >> 8) <= *(double *)v6)
              {
                return;
              }
              goto LABEL_73;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v10 = *(unsigned __int8 *)(v7 + 12);
          if (v10 - 3 < 7 || v10 < 2)
            goto LABEL_53;
          if (v10 != 2)
            turi::apply_binary_op_ff();
          v12 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*v6 + 8), (_QWORD *)(*(_QWORD *)v7 + 8));
          goto LABEL_39;
        case 3:
          v13 = *(unsigned __int8 *)(v7 + 12);
          if (v13 > 9)
            turi::apply_binary_op_ff();
          if (v13 != 3)
            goto LABEL_53;
          v14 = *(double *)v6;
          v15 = *(double **)(*(_QWORD *)v7 + 8);
          v16 = *(double **)(*(_QWORD *)v7 + 16);
          v17 = *(double **)(*(_QWORD *)&v14 + 8);
          v18 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v14 + 16) - (_QWORD)v17) >> 3;
          v19 = v16 - v15;
          if (v16 == v15)
            goto LABEL_33;
          if (v19 <= 1)
            v20 = 1;
          else
            v20 = v16 - v15;
          v21 = v18;
          break;
        case 4:
          v22 = *(unsigned __int8 *)(v7 + 12);
          if (v22 > 9)
            turi::apply_binary_op_ff();
          if (v22 != 4)
            goto LABEL_53;
          v12 = turi::flexible_type_impl::gt_operator::operator()(v4, (uint64_t)&v26, (uint64_t *)(*(_QWORD *)v7 + 8), (_QWORD *)(*v6 + 8));
LABEL_39:
          if (v5 == (uint64_t **)a1 || !v12)
            return;
          goto LABEL_73;
        case 5:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_53;
        case 6:
          switch(*(_BYTE *)(v7 + 12))
          {
            case 0:
              if (v3 == (uint64_t **)a1 || *v6 << 8 >> 8 >= *(_QWORD *)v7)
                return;
              goto LABEL_73;
            case 1:
              if (v3 == (uint64_t **)a1
                || (double)*((int *)v6 + 2) / 1000000.0 + (double)(*v6 << 8 >> 8) >= *(double *)v7)
              {
                return;
              }
              goto LABEL_73;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_53;
            case 6:
              v25 = (uint64_t)(*(_QWORD *)v7 << 8) >> 8;
              if (v25 > *v6 << 8 >> 8)
                goto LABEL_72;
              if (v25 != *v6 << 8 >> 8 || v3 == (uint64_t **)a1 || *(_DWORD *)(v7 + 8) <= *((_DWORD *)v6 + 2))
                return;
              goto LABEL_73;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_53;
        case 8:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_53;
        case 9:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
LABEL_53:
          turi::flexible_type_fail(0);
          return;
        default:
          turi::apply_binary_op_ff();
      }
      while (v21 && *v15 <= *v17)
      {
        if (*v15 < *v17)
          return;
        --v21;
        ++v15;
        ++v17;
        if (!--v20)
        {
LABEL_33:
          if (v3 == (uint64_t **)a1 || v19 <= v18)
            return;
LABEL_73:
          std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 8, v5[1], v5[2], ((char *)v5[2] - (char *)v5[1]) >> 4);
          return;
        }
      }
LABEL_72:
      if (v3 == (uint64_t **)a1)
        return;
      goto LABEL_73;
    }
    if (v3 != (uint64_t **)a1)
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 8, v3[1], v3[2], ((char *)v3[2] - (char *)v3[1]) >> 4);
    *(_BYTE *)(a1 + 32) = 1;
  }
}

uint64_t turi::groupby_operators::argmin::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(_QWORD *)(this + 8);
  if (v2 == *(_QWORD *)(this + 16))
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    if ((uint64_t *)a2 == &turi::FLEX_UNDEFINED)
      return this;
    *(_QWORD *)(a2 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
    *(_QWORD *)a2 = turi::FLEX_UNDEFINED;
    v4 = byte_254FF06EC;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    if (v2 + 16 == a2)
      return this;
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(v2 + 21);
    *(_QWORD *)a2 = v3;
    v4 = *(unsigned __int8 *)(v2 + 28);
  }
  *(_BYTE *)(a2 + 12) = v4;
  v5 = v4 > 9;
  v6 = (1 << v4) & 0x33C;
  if (!v5 && v6 != 0)
  {
    v8 = *(unint64_t **)a2;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  return this;
}

uint64_t turi::groupby_operators::argmin::set_input_types(uint64_t a1, uint64_t a2)
{
  return *(char *)(*(_QWORD *)a2 + 1);
}

_QWORD *turi::groupby_operators::argmin::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "argmin");
}

_BYTE *turi::groupby_operators::argmin::save(turi::groupby_operators::argmin *this, turi::oarchive *a2)
{
  _BYTE *v4;
  _BYTE *result;
  unint64_t v6;
  size_t v7;
  uint64_t *v8;
  size_t v9;
  BOOL v10;
  std::vector<char>::size_type v11;

  turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec((uint64_t)a2, (uint64_t *)this + 1);
  v4 = (char *)this + 32;
  if (*(_QWORD *)a2)
    return (_BYTE *)std::ostream::write();
  v6 = *((_QWORD *)a2 + 5);
  if (*((_QWORD *)a2 + 4) + 1 > v6)
  {
    v7 = 2 * v6 + 2;
    *((_QWORD *)a2 + 5) = v7;
    v8 = (uint64_t *)*((_QWORD *)a2 + 2);
    if (v8)
    {
      result = (_BYTE *)*v8;
      v9 = v8[1] - *v8;
      v10 = v7 >= v9;
      v11 = v7 - v9;
      if (v11 != 0 && v10)
      {
        std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v11);
        result = (_BYTE *)**((_QWORD **)a2 + 2);
      }
      else if (!v10)
      {
        v8[1] = (uint64_t)&result[v7];
      }
    }
    else
    {
      result = malloc_type_realloc(*((void **)a2 + 3), v7, 0xF6EA6B1uLL);
    }
    *((_QWORD *)a2 + 3) = result;
  }
  else
  {
    result = (_BYTE *)*((_QWORD *)a2 + 3);
  }
  result[(*((_QWORD *)a2 + 4))++] = *v4;
  return result;
}

void turi::groupby_operators::argmin::load(turi::groupby_operators::argmin *this, turi::iarchive *a2)
{
  uint64_t v4;

  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a2, (uint64_t *)this + 1);
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
    *((_BYTE *)this + 32) = *(_BYTE *)(v4 + (*((_QWORD *)a2 + 3))++);
  else
    std::istream::read();
}

void turi::groupby_operators::argmin::~argmin(turi::groupby_operators::argmin *this)
{
  void **v1;

  *(_QWORD *)this = &unk_24D92FD90;
  v1 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = &unk_24D92FD90;
  v2 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A19A08](this, 0x10A1C407F0BD61ELL);
}

void turi::groupby_operators::argmin::set_input_type()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = "set_input_type is not supported for argmin";
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

void std::__shared_ptr_emplace<turi::groupby_operators::argmax>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92FE30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::argmax>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92FE30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::argmax>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

uint64_t turi::groupby_operators::argmax::new_instance(turi::groupby_operators::argmax *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &unk_24D92FE80;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

void turi::groupby_operators::argmax::add_element(uint64_t a1, uint64_t **a2, __n128 a3)
{
  uint64_t *v4;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  double v9;
  unsigned int v10;
  int v12;
  unsigned int v13;
  double *v14;
  uint64_t v15;
  double *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  double v23;
  double v24;
  uint64_t v25;
  char v26;

  v4 = *a2;
  if (*((_BYTE *)v4 + 12) != 7)
  {
    v6 = (uint64_t **)(a1 + 8);
    if (*(_BYTE *)(a1 + 32))
    {
      v7 = *v6;
      switch(*((_BYTE *)v4 + 12))
      {
        case 0:
          switch(*((_BYTE *)v7 + 12))
          {
            case 0:
              if (v6 == a2)
                return;
              v8 = *v7;
              v9 = *(double *)v4;
              goto LABEL_57;
            case 1:
              if (v6 == a2)
                return;
              v23 = *(double *)v7;
              v24 = (double)*v4;
              goto LABEL_61;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_51;
            case 6:
              if (v6 == a2)
                return;
              v9 = *(double *)v4;
              v8 = *v7 << 8 >> 8;
LABEL_57:
              if (v8 >= *(uint64_t *)&v9)
                return;
              goto LABEL_75;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*((_BYTE *)v7 + 12))
          {
            case 0:
              if (v6 == a2 || *(double *)v4 <= (double)*v7)
                return;
              goto LABEL_75;
            case 1:
              if (v6 == a2)
                return;
              v23 = *(double *)v7;
              v24 = *(double *)v4;
LABEL_61:
              if (v23 >= v24)
                return;
              goto LABEL_75;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_51;
            case 6:
              if (v6 == a2 || (double)*((int *)v7 + 2) / 1000000.0 + (double)(*v7 << 8 >> 8) >= *(double *)v4)
                return;
              goto LABEL_75;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v10 = *((unsigned __int8 *)v7 + 12);
          if (v10 - 3 < 7 || v10 < 2)
            goto LABEL_51;
          if (v10 != 2)
            turi::apply_binary_op_ff();
          v12 = std::string::compare[abi:ne180100]((const void **)(*v7 + 8), (_BYTE *)(*v4 + 8));
          if (v6 == a2 || (v12 & 0x80000000) == 0)
            return;
          goto LABEL_75;
        case 3:
          v13 = *((unsigned __int8 *)v7 + 12);
          if (v13 > 9)
            turi::apply_binary_op_ff();
          if (v13 != 3)
            goto LABEL_51;
          v15 = *v7 + 8;
          v14 = *(double **)v15;
          v16 = *(double **)(*v4 + 8);
          v17 = (uint64_t)(*(_QWORD *)(*v4 + 16) - (_QWORD)v16) >> 3;
          v18 = (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 3;
          if (*(_QWORD *)(v15 + 8) == *(_QWORD *)v15)
            goto LABEL_34;
          if (v18 <= 1)
            v19 = 1;
          else
            v19 = v18;
          v20 = (uint64_t)(*(_QWORD *)(*v4 + 16) - (_QWORD)v16) >> 3;
          break;
        case 4:
          v21 = *((unsigned __int8 *)v7 + 12);
          if (v21 > 9)
            turi::apply_binary_op_ff();
          if (v21 != 4)
            goto LABEL_51;
          v22 = turi::flexible_type_impl::lt_operator::operator()(a3, (uint64_t)&v26, (uint64_t *)(*v7 + 8), (_QWORD *)(*v4 + 8));
          if (v6 == a2 || !v22)
            return;
          goto LABEL_75;
        case 5:
          if (*((unsigned __int8 *)v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_51;
        case 6:
          switch(*((_BYTE *)v7 + 12))
          {
            case 0:
              if (v6 == a2 || *v4 << 8 >> 8 <= *v7)
                return;
              goto LABEL_75;
            case 1:
              if (v6 == a2 || (double)*((int *)v4 + 2) / 1000000.0 + (double)(*v4 << 8 >> 8) <= *(double *)v7)
                return;
              goto LABEL_75;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_51;
            case 6:
              v25 = *v7 << 8 >> 8;
              if (v25 < *v4 << 8 >> 8)
                goto LABEL_70;
              if (v25 == *v4 << 8 >> 8 && v6 != a2 && *((_DWORD *)v7 + 2) < *((_DWORD *)v4 + 2))
                goto LABEL_75;
              return;
            default:
              turi::apply_binary_op_ff();
          }
        case 8:
          if (*((unsigned __int8 *)v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_51;
        case 9:
          if (*((unsigned __int8 *)v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
LABEL_51:
          turi::flexible_type_fail(0);
          return;
        default:
          turi::apply_binary_op_ff();
      }
      while (1)
      {
        if (!v20 || *v14 > *v16)
          return;
        if (*v14 < *v16)
          break;
        --v20;
        ++v14;
        ++v16;
        if (!--v19)
        {
LABEL_34:
          if (v6 == a2 || v18 >= v17)
            return;
LABEL_75:
          std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)v6, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
          return;
        }
      }
LABEL_70:
      if (v6 == a2)
        return;
      goto LABEL_75;
    }
    if (v6 != a2)
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 8, v4, a2[1], ((char *)a2[1] - (char *)v4) >> 4);
    *(_BYTE *)(a1 + 32) = 1;
  }
}

void turi::groupby_operators::argmax::add_element_simple()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = "argmax does not support add_element_simple with one value";
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

void turi::groupby_operators::argmax::combine(uint64_t a1, void *lpsrc)
{
  uint64_t **v3;
  __n128 v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unsigned int v10;
  int v12;
  unsigned int v13;
  double v14;
  double *v15;
  double *v16;
  double *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  BOOL v23;
  double v24;
  double v25;
  uint64_t v26;
  char v27;

  if (!v3)
    __cxa_bad_cast();
  v5 = v3;
  if (*((_BYTE *)v3 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v6 = v3[1];
      v7 = *(_QWORD *)(a1 + 8);
      switch(*((_BYTE *)v6 + 12))
      {
        case 0:
          switch(*(_BYTE *)(v7 + 12))
          {
            case 0:
              if (v3 == (uint64_t **)a1)
                return;
              v8 = *(_QWORD *)v7;
              v9 = *(double *)v6;
              goto LABEL_60;
            case 1:
              if (v3 == (uint64_t **)a1)
                return;
              v24 = *(double *)v7;
              v25 = (double)*v6;
              goto LABEL_64;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_54;
            case 6:
              if (v3 == (uint64_t **)a1)
                return;
              v9 = *(double *)v6;
              v8 = (uint64_t)(*(_QWORD *)v7 << 8) >> 8;
LABEL_60:
              if (v8 >= *(uint64_t *)&v9)
                return;
              goto LABEL_78;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*(_BYTE *)(v7 + 12))
          {
            case 0:
              if (v3 == (uint64_t **)a1 || *(double *)v6 <= (double)*(uint64_t *)v7)
                return;
              goto LABEL_78;
            case 1:
              if (v3 == (uint64_t **)a1)
                return;
              v24 = *(double *)v7;
              v25 = *(double *)v6;
LABEL_64:
              if (v24 >= v25)
                return;
              goto LABEL_78;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_54;
            case 6:
              if (v3 == (uint64_t **)a1
                || (double)*(int *)(v7 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v7 << 8) >> 8) >= *(double *)v6)
              {
                return;
              }
              goto LABEL_78;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v10 = *(unsigned __int8 *)(v7 + 12);
          if (v10 - 3 < 7 || v10 < 2)
            goto LABEL_54;
          if (v10 != 2)
            turi::apply_binary_op_ff();
          v12 = std::string::compare[abi:ne180100]((const void **)(*(_QWORD *)v7 + 8), (_BYTE *)(*v6 + 8));
          if (v5 == (uint64_t **)a1 || (v12 & 0x80000000) == 0)
            return;
          goto LABEL_78;
        case 3:
          v13 = *(unsigned __int8 *)(v7 + 12);
          if (v13 > 9)
            turi::apply_binary_op_ff();
          if (v13 != 3)
            goto LABEL_54;
          v14 = *(double *)v6;
          v15 = *(double **)(*(_QWORD *)v7 + 8);
          v16 = *(double **)(*(_QWORD *)v7 + 16);
          v17 = *(double **)(*(_QWORD *)&v14 + 8);
          v18 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v14 + 16) - (_QWORD)v17) >> 3;
          v19 = v16 - v15;
          if (v16 == v15)
            goto LABEL_35;
          if (v19 <= 1)
            v20 = 1;
          else
            v20 = v16 - v15;
          v21 = v18;
          break;
        case 4:
          v22 = *(unsigned __int8 *)(v7 + 12);
          if (v22 > 9)
            turi::apply_binary_op_ff();
          if (v22 != 4)
            goto LABEL_54;
          v23 = turi::flexible_type_impl::lt_operator::operator()(v4, (uint64_t)&v27, (uint64_t *)(*(_QWORD *)v7 + 8), (_QWORD *)(*v6 + 8));
          if (v5 == (uint64_t **)a1 || !v23)
            return;
          goto LABEL_78;
        case 5:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_54;
        case 6:
          switch(*(_BYTE *)(v7 + 12))
          {
            case 0:
              if (v3 == (uint64_t **)a1 || *v6 << 8 >> 8 <= *(_QWORD *)v7)
                return;
              goto LABEL_78;
            case 1:
              if (v3 == (uint64_t **)a1
                || (double)*((int *)v6 + 2) / 1000000.0 + (double)(*v6 << 8 >> 8) <= *(double *)v7)
              {
                return;
              }
              goto LABEL_78;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_54;
            case 6:
              v26 = (uint64_t)(*(_QWORD *)v7 << 8) >> 8;
              if (v26 < *v6 << 8 >> 8)
                goto LABEL_73;
              if (v26 == *v6 << 8 >> 8 && v3 != (uint64_t **)a1 && *(_DWORD *)(v7 + 8) < *((_DWORD *)v6 + 2))
                goto LABEL_78;
              return;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_54;
        case 8:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_54;
        case 9:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
LABEL_54:
          turi::flexible_type_fail(0);
          return;
        default:
          turi::apply_binary_op_ff();
      }
      while (1)
      {
        if (!v21 || *v15 > *v17)
          return;
        if (*v15 < *v17)
          break;
        --v21;
        ++v15;
        ++v17;
        if (!--v20)
        {
LABEL_35:
          if (v3 == (uint64_t **)a1 || v19 >= v18)
            return;
LABEL_78:
          std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 8, v5[1], v5[2], ((char *)v5[2] - (char *)v5[1]) >> 4);
          return;
        }
      }
LABEL_73:
      if (v3 == (uint64_t **)a1)
        return;
      goto LABEL_78;
    }
    if (v3 != (uint64_t **)a1)
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 8, v3[1], v3[2], ((char *)v3[2] - (char *)v3[1]) >> 4);
    *(_BYTE *)(a1 + 32) = 1;
  }
}

_QWORD *turi::groupby_operators::argmax::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "argmax");
}

void turi::groupby_operators::argmax::~argmax(turi::groupby_operators::argmax *this)
{
  void **v1;

  *(_QWORD *)this = &unk_24D92FE80;
  v1 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = &unk_24D92FE80;
  v2 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A19A08](this, 0x10A1C407F0BD61ELL);
}

void turi::groupby_operators::argmax::set_input_type()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = "set_input_type is not supported for argmax";
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

void std::__shared_ptr_emplace<turi::groupby_operators::count>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92FF20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::count>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92FF20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::count>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

_QWORD *turi::groupby_operators::count::new_instance(turi::groupby_operators::count *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_24D92FF70;
  result[1] = 0;
  return result;
}

uint64_t turi::groupby_operators::count::add_element_simple(uint64_t result)
{
  ++*(_QWORD *)(result + 8);
  return result;
}

_QWORD *turi::groupby_operators::count::combine(uint64_t a1, void *lpsrc)
{
  _QWORD *result;

  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 8) += result[1];
  return result;
}

uint64_t turi::groupby_operators::count::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = *(_QWORD *)(this + 8);
  return this;
}

_QWORD *turi::groupby_operators::count::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Count");
}

char *turi::groupby_operators::count::save(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char *result;
  unint64_t v5;
  size_t v6;
  char **v7;
  size_t v8;
  BOOL v9;
  std::vector<char>::size_type v10;

  v2 = (_QWORD *)(a1 + 8);
  if (*(_QWORD *)a2)
    return (char *)std::ostream::write();
  v5 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a2 + 32) + 8 > v5)
  {
    v6 = 2 * v5 + 16;
    *(_QWORD *)(a2 + 40) = v6;
    v7 = *(char ***)(a2 + 16);
    if (v7)
    {
      result = *v7;
      v8 = v7[1] - *v7;
      v9 = v6 >= v8;
      v10 = v6 - v8;
      if (v10 != 0 && v9)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v10);
        result = **(char ***)(a2 + 16);
      }
      else if (!v9)
      {
        v7[1] = &result[v6];
      }
    }
    else
    {
      result = (char *)malloc_type_realloc(*(void **)(a2 + 24), v6, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a2 + 24) = result;
  }
  else
  {
    result = *(char **)(a2 + 24);
  }
  *(_QWORD *)&result[*(_QWORD *)(a2 + 32)] = *v2;
  *(_QWORD *)(a2 + 32) += 8;
  return result;
}

uint64_t turi::groupby_operators::count::load(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return std::istream::read();
  *(_QWORD *)(result + 8) = *(_QWORD *)(v2 + *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a2 + 24) += 8;
  return result;
}

void turi::groupby_operators::count::set_input_type()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = "set_input_type is not supported for count";
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

void std::__shared_ptr_emplace<turi::groupby_operators::non_null_count>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::non_null_count>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::non_null_count>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

_QWORD *turi::groupby_operators::non_null_count::new_instance(turi::groupby_operators::non_null_count *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_24D930060;
  result[1] = 0;
  return result;
}

uint64_t turi::groupby_operators::non_null_count::add_element_simple(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 12) != 7)
    ++*(_QWORD *)(result + 8);
  return result;
}

_QWORD *turi::groupby_operators::non_null_count::combine(uint64_t a1, void *lpsrc)
{
  _QWORD *result;

  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 8) += result[1];
  return result;
}

void std::__shared_ptr_emplace<turi::groupby_operators::average>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::average>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930100;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::average>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

_QWORD *turi::groupby_operators::average::new_instance(turi::groupby_operators::average *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &unk_24D930150;
  return result;
}

void turi::groupby_operators::average::add_element_simple(turi::groupby_operators::average *this, const turi::flexible_type *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t *v29;
  uint64_t *v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  unsigned int v44;
  double v46;
  char v47;
  size_t v48;
  unsigned int v49;
  double *v50;
  double *v51;
  unint64_t v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  double v57;
  double v58;
  unsigned int v59;
  double v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  double v65;
  double v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  double v70;
  char **v71;
  char *v72;
  double v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  __int128 v81;
  __int128 v82;
  float v83;
  double v84;
  double v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  std::runtime_error *exception;
  std::string *v90;
  __int128 v91;
  void *__p[2];
  void *v93[2];
  __int128 v94;
  __int128 v95;
  std::string v96;
  size_t __idx;

  switch(byte_254FF06EC)
  {
    case 0:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          if (*(_QWORD *)a2 == turi::FLEX_UNDEFINED)
            return;
          goto LABEL_81;
        case 1:
          v60 = *(double *)a2;
          v61 = turi::FLEX_UNDEFINED;
          goto LABEL_124;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_81;
        case 6:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2))
            return;
          goto LABEL_81;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          v60 = *(double *)&turi::FLEX_UNDEFINED;
          v61 = *(_QWORD *)a2;
LABEL_124:
          v85 = (double)v61;
          goto LABEL_125;
        case 1:
          v60 = *(double *)a2;
          v85 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_125:
          if (v60 != v85)
            goto LABEL_81;
          return;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_81;
        case 6:
          v84 = vabdd_f64((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_129;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v44 = *((unsigned __int8 *)a2 + 12);
      if (v44 - 3 < 7 || v44 < 2)
        goto LABEL_81;
      if (v44 != 2)
        turi::apply_binary_op_ff();
      v46 = *(double *)a2;
      v47 = *(_BYTE *)(*(_QWORD *)a2 + 31);
      v48 = v47 < 0 ? *(_QWORD *)(*(_QWORD *)&v46 + 16) : *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
      v86 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
          ? *(_QWORD *)(turi::FLEX_UNDEFINED + 16)
          : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v48 != v86)
        goto LABEL_81;
      v87 = (unsigned __int8 *)(*(_QWORD *)&v46 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
        v87 = *(unsigned __int8 **)v87;
      v88 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v88 = *(unsigned __int8 **)v88;
      if (v47 < 0)
      {
        if (memcmp(v87, v88, v48))
          goto LABEL_81;
      }
      else
      {
        if (!v48)
          return;
        do
        {
          if (*v87 != *v88)
            goto LABEL_81;
          ++v87;
          ++v88;
          --v48;
        }
        while (v48);
      }
      return;
    case 3:
      v49 = *((unsigned __int8 *)a2 + 12);
      if (v49 > 9)
        turi::apply_binary_op_ff();
      if (v49 == 3)
      {
        v50 = *(double **)(*(_QWORD *)a2 + 8);
        v51 = *(double **)(*(_QWORD *)a2 + 16);
        v52 = v51 - v50;
        v53 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v52 == (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v53) >> 3)
        {
          if (v51 == v50)
            return;
          v54 = v52 <= 1 ? 1 : v51 - v50;
          if (*v50 == *v53)
          {
            v55 = 1;
            do
            {
              v56 = v55;
              if (v54 == v55)
                break;
              v57 = v50[v55];
              v58 = v53[v55++];
            }
            while (v57 == v58);
            if (v56 >= v52)
              return;
          }
        }
      }
      goto LABEL_81;
    case 4:
      v4 = *((unsigned __int8 *)a2 + 12);
      if (v4 > 9)
        turi::apply_binary_op_ff();
      if (v4 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        return;
      }
      goto LABEL_81;
    case 5:
      v62 = *((unsigned __int8 *)a2 + 12);
      if (v62 > 9)
        turi::apply_binary_op_ff();
      if (v62 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t **)(*(_QWORD *)a2 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        return;
      }
      goto LABEL_81;
    case 6:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          if (*(_QWORD *)a2 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF06E8)
            return;
          goto LABEL_81;
        case 1:
          v84 = vabdd_f64(*(double *)a2, (double)dword_254FF06E8 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_129:
          if (v84 < 0.0000005)
            return;
          goto LABEL_81;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_81;
        case 6:
          if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)a2 + 2) == dword_254FF06E8)
          {
            return;
          }
          goto LABEL_81;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v59 = *((unsigned __int8 *)a2 + 12);
      if (v59 < 7 || v59 - 8 < 2)
        goto LABEL_81;
      if (v59 != 7)
        turi::apply_binary_op_ff();
      return;
    case 8:
      v63 = *((unsigned __int8 *)a2 + 12);
      if (v63 >= 8 && v63 != 9)
      {
        if (v63 != 8)
          turi::apply_binary_op_ff();
        if (turi::image_type::operator==(*(_QWORD *)a2 + 8, turi::FLEX_UNDEFINED + 8))
          return;
      }
      goto LABEL_81;
    case 9:
      v5 = *((unsigned __int8 *)a2 + 12);
      if (v5 < 9)
        goto LABEL_81;
      if (v5 != 9)
        turi::apply_binary_op_ff();
      v6 = turi::FLEX_UNDEFINED;
      v7 = *(_QWORD **)a2;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)a2)
        return;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v7 + 1), turi::FLEX_UNDEFINED + 8))
        goto LABEL_81;
      v9 = (char *)v7[3];
      v8 = (char *)v7[4];
      v10 = v8 - v9;
      if (v8 == v9)
        return;
      if (!v7[1])
        return;
      v11 = 1;
      do
      {
        v12 = *(_QWORD *)v9;
        v9 += 8;
        v11 *= v12;
      }
      while (v9 != v8);
      if (!v11)
        return;
      v96.__r_.__value_.__r.__words[0] = 0;
      std::vector<unsigned long>::vector(__p, v10 >> 3, &v96);
      v13 = (uint64_t *)__p[0];
      v14 = (uint64_t *)__p[1];
      v15 = **(_QWORD **)(v6 + 8);
      v16 = (char *)__p[1] - (char *)__p[0];
      v17 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      v18 = v17 - 1;
      if (v17 <= 1)
        v19 = 1;
      else
        v19 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    if (v14 == v13)
    {
      v27 = 0;
      v28 = *(double *)(*(_QWORD *)v7[1] + 8 * v7[9]);
    }
    else
    {
      v20 = 0;
      v21 = (uint64_t *)v7[6];
      v22 = v13;
      v23 = v19;
      do
      {
        v25 = *v22++;
        v24 = v25;
        v26 = *v21++;
        v20 += v26 * v24;
        --v23;
      }
      while (v23);
      v27 = 0;
      v28 = *(double *)(*(_QWORD *)v7[1] + 8 * (v7[9] + v20));
      v29 = *(uint64_t **)(v6 + 48);
      v30 = v13;
      v31 = v19;
      do
      {
        v33 = *v30++;
        v32 = v33;
        v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
    }
    v35 = *(double *)(v15 + 8 * (*(_QWORD *)(v6 + 72) + v27));
    if (v28 != v35)
      break;
    v36 = v17;
    v37 = v17 - 1;
    if (v16 >= 1)
    {
      v38 = v7[3];
      v39 = v13[v18] + 1;
      v13[v18] = v39;
      v40 = (v16 & 0xFFFFFFFFFFFFFFF8) - 16;
      v37 = v17 - 1;
      if (v39 >= *(_QWORD *)(v38 + 8 * v18))
      {
        while (1)
        {
          *(uint64_t *)((char *)v13 + v40 + 8) = 0;
          if (v37 <= 0)
            break;
          --v37;
          v41 = *(uint64_t *)((char *)v13 + v40) + 1;
          *(uint64_t *)((char *)v13 + v40) = v41;
          v42 = *(_QWORD *)(v38 + v40);
          v40 -= 8;
          if (v41 < v42)
          {
            v36 = 1;
            goto LABEL_36;
          }
        }
        __p[1] = v13;
        operator delete(v13);
        return;
      }
      v36 = 1;
      v37 = v17 - 1;
    }
LABEL_36:
    ;
  }
  while ((v37 & 0x8000000000000000) == 0 && v36);
  if (v13)
  {
    __p[1] = v13;
    v43 = v35;
    operator delete(v13);
    if (v28 == v43)
      return;
  }
  else if (v28 == v35)
  {
    return;
  }
LABEL_81:
  ++*((_QWORD *)this + 2);
  v65 = 0.0;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v65 = (double)*(uint64_t *)a2;
      break;
    case 1:
      v65 = *(double *)a2;
      break;
    case 2:
      v70 = *(double *)a2;
      v71 = (char **)(*(_QWORD *)a2 + 8);
      __idx = 0;
      v72 = (char *)v71;
      if (*(char *)(*(_QWORD *)&v70 + 31) < 0)
        v72 = *v71;
      std::string::basic_string[abi:ne180100]<0>(__p, v72);
      v73 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v93[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(*(_QWORD *)&v70 + 31) < 0)
        v74 = *(_QWORD *)(*(_QWORD *)&v70 + 16);
      else
        v74 = *(unsigned __int8 *)(*(_QWORD *)&v70 + 31);
      if (__idx != v74)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v90 = std::string::append(&v96, " cannot be interpreted as a float");
        v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        v93[0] = (void *)v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v83 = v73;
      v65 = v83;
      break;
    case 3:
      v66 = *(double *)a2;
      __p[1] = 0;
      v93[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v66 + 8), *(_QWORD *)(*(_QWORD *)&v66 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v66 + 16) - *(_QWORD *)(*(_QWORD *)&v66 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v75 = *(double *)a2;
      __p[1] = 0;
      v93[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v75 + 8), *(uint64_t **)(*(_QWORD *)&v75 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v75 + 16) - *(_QWORD *)(*(_QWORD *)&v75 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
      break;
    case 5:
      v76 = *(double *)a2;
      __p[1] = 0;
      v93[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v76 + 8), *(uint64_t **)(*(_QWORD *)&v76 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v76 + 16) - *(_QWORD *)(*(_QWORD *)&v76 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
      break;
    case 6:
      v65 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v77 = *(double *)a2;
      v78 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v78;
      if (v78)
      {
        v79 = v78 + 2;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      v81 = *(_OWORD *)(*(_QWORD *)&v77 + 24);
      v82 = *(_OWORD *)(*(_QWORD *)&v77 + 56);
      v94 = *(_OWORD *)(*(_QWORD *)&v77 + 40);
      v95 = v82;
      *(_OWORD *)v93 = v81;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v94 + 1))
      {
        *(_QWORD *)&v95 = *((_QWORD *)&v94 + 1);
        operator delete(*((void **)&v94 + 1));
      }
      if (v93[0])
      {
        v93[1] = v93[0];
        operator delete(v93[0]);
      }
      v67 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v68 = (unint64_t *)((char *)__p[1] + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  *((double *)this + 1) = *((double *)this + 1)
                        + (v65 - *((double *)this + 1)) / (double)*((unint64_t *)this + 2);
}

void sub_21813A094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

double turi::groupby_operators::average::combine(uint64_t a1, void *lpsrc)
{
  double *v3;
  double result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (!v3)
    __cxa_bad_cast();
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *((_QWORD *)v3 + 2);
  v7 = v6 + v5;
  if (v6 + v5)
  {
    result = (v3[1] * (double)v6 + *(double *)(a1 + 8) * (double)v5) / (double)v7;
    *(double *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = v7;
  }
  return result;
}

uint64_t turi::groupby_operators::average::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  if (*(_QWORD *)(this + 16))
    return turi::flexible_type::flexible_type<double>(a2, (_QWORD *)(this + 8));
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  if ((uint64_t *)a2 != &turi::FLEX_UNDEFINED)
  {
    *(_QWORD *)(a2 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
    *(_QWORD *)a2 = turi::FLEX_UNDEFINED;
    v2 = byte_254FF06EC;
    *(_BYTE *)(a2 + 12) = byte_254FF06EC;
    switch(v2)
    {
      case 2:
        v3 = *(unint64_t **)a2;
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 + 1, v3));
        break;
      case 3:
        v5 = *(unint64_t **)a2;
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        break;
      case 4:
        v7 = *(unint64_t **)a2;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        break;
      case 5:
        v9 = *(unint64_t **)a2;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        break;
      case 8:
        v13 = *(unint64_t **)a2;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
        break;
      case 9:
        v11 = *(unint64_t **)a2;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
        break;
      default:
        return this;
    }
  }
  return this;
}

_QWORD *turi::groupby_operators::average::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Avg");
}

char *turi::groupby_operators::average::save(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  char *result;
  unint64_t v9;
  size_t v10;
  char **v11;
  size_t v12;
  BOOL v13;
  std::vector<char>::size_type v14;
  size_t v15;
  char **v16;
  size_t v17;
  BOOL v18;
  std::vector<char>::size_type v19;

  v4 = (_QWORD *)(a1 + 8);
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v5)
    {
      v10 = 2 * v5 + 16;
      *(_QWORD *)(a2 + 40) = v10;
      v11 = *(char ***)(a2 + 16);
      if (v11)
      {
        v6 = *v11;
        v12 = v11[1] - *v11;
        v13 = v10 >= v12;
        v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v14);
          v6 = **(char ***)(a2 + 16);
        }
        else if (!v13)
        {
          v11[1] = &v6[v10];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v10, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v6;
    }
    else
    {
      v6 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v6[*(_QWORD *)(a2 + 32)] = *v4;
    *(_QWORD *)(a2 + 32) += 8;
  }
  v7 = (_QWORD *)(a1 + 16);
  if (*(_QWORD *)a2)
    return (char *)std::ostream::write();
  v9 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a2 + 32) + 8 > v9)
  {
    v15 = 2 * v9 + 16;
    *(_QWORD *)(a2 + 40) = v15;
    v16 = *(char ***)(a2 + 16);
    if (v16)
    {
      result = *v16;
      v17 = v16[1] - *v16;
      v18 = v15 >= v17;
      v19 = v15 - v17;
      if (v19 != 0 && v18)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v19);
        result = **(char ***)(a2 + 16);
      }
      else if (!v18)
      {
        v16[1] = &result[v15];
      }
    }
    else
    {
      result = (char *)malloc_type_realloc(*(void **)(a2 + 24), v15, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a2 + 24) = result;
  }
  else
  {
    result = *(char **)(a2 + 24);
  }
  *(_QWORD *)&result[*(_QWORD *)(a2 + 32)] = *v7;
  *(_QWORD *)(a2 + 32) += 8;
  return result;
}

uint64_t turi::groupby_operators::average::load(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    *(_QWORD *)(result + 8) = *(_QWORD *)(v4 + *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a2 + 24) += 8;
  }
  else
  {
    result = std::istream::read();
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    return std::istream::read();
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v5 + *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a2 + 24) += 8;
  return result;
}

void turi::groupby_operators::average::~average(turi::groupby_operators::average *this)
{
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::groupby_operators::vector_average>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9301F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::vector_average>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9301F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::vector_average>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

_QWORD *std::allocator<turi::groupby_operators::vector_average>::construct[abi:ne180100]<turi::groupby_operators::vector_average>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = &unk_24D930240;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 13) = 0;
  *(_BYTE *)(a2 + 20) = 3;
  result = (_QWORD *)operator new();
  *result = 0;
  result[2] = 0;
  result[3] = 0;
  result[1] = 0;
  *(_QWORD *)(a2 + 8) = result;
  *result = 1;
  *(_WORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return result;
}

uint64_t turi::groupby_operators::vector_average::new_instance(turi::groupby_operators::vector_average *this)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = operator new();
  *(_QWORD *)(v2 + 13) = 0;
  *(_QWORD *)v2 = &unk_24D930240;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 20) = 3;
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v3[2] = 0;
  v3[3] = 0;
  v3[1] = 0;
  *(_QWORD *)(v2 + 8) = v3;
  *v3 = 1;
  *(_WORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  turi::groupby_operators::vector_average::set_input_type(v2, *((char *)this + 20));
  return v2;
}

void turi::groupby_operators::vector_average::add_element_simple(turi::groupby_operators::vector_average *this, const turi::flexible_type *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  unint64_t **v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  BOOL v50;
  int v51;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  _QWORD *v56;
  unint64_t v57;
  BOOL v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t *v73;
  _QWORD *v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t *v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t v84;
  BOOL v85;
  double v86;
  unint64_t *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  _QWORD *v92;
  double *v93;
  uint64_t v94;
  unint64_t v95;
  double *v96;
  double v97;
  _QWORD *v98;
  unint64_t v99;
  double v100;
  unint64_t *v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  unint64_t *v132;
  _QWORD *v133;
  unint64_t v134;
  BOOL v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t *v138;
  _QWORD *v139;
  unint64_t v140;
  unint64_t v141;
  void *v142;
  double *v143;
  uint64_t v144;
  unint64_t v145;
  double v146;
  unint64_t *v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  void *v151;
  double *v152;
  uint64_t v153;
  double v154;
  unint64_t v155;
  _QWORD *v156;
  unint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  void *v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  unint64_t v170;
  unint64_t *v171;
  _QWORD *v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t *v179;
  double v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  _QWORD *v192;
  _QWORD *v193;
  unint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  double v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  double v213;
  _QWORD *v214;
  unint64_t v215;
  BOOL v216;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  unsigned int *v221;
  unsigned int v222;
  __int128 v223;
  __int128 v224;
  unint64_t v225;
  BOOL v226;
  _QWORD *v227;
  _QWORD *v228;
  unint64_t v229;
  _QWORD *v230;
  unint64_t v231;
  _QWORD *v232;
  unint64_t v233;
  _QWORD *v234;
  unint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  unint64_t v238;
  _QWORD *v239;
  unint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  unsigned int v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  unsigned int *v251;
  unsigned int v252;
  __int128 v253;
  __int128 v254;
  unint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  unint64_t v258;
  unsigned int v259;
  _QWORD *v260;
  unint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  unsigned int *v265;
  unsigned int v266;
  __int128 v267;
  __int128 v268;
  unint64_t v269;
  _QWORD *v270;
  unint64_t v271;
  _QWORD *v272;
  unint64_t v273;
  _QWORD *v274;
  unint64_t v275;
  _QWORD *v276;
  unint64_t v277;
  _QWORD *v278;
  unint64_t v279;
  _QWORD *v280;
  unint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  unsigned int *v285;
  unsigned int v286;
  __int128 v287;
  __int128 v288;
  unint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  unsigned int *v293;
  unsigned int v294;
  __int128 v295;
  __int128 v296;
  unint64_t v297;
  _QWORD *v298;
  unint64_t v299;
  _QWORD *v300;
  unint64_t v301;
  _QWORD *v302;
  unint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  unsigned int *v307;
  unsigned int v308;
  __int128 v309;
  __int128 v310;
  unint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  unsigned int *v315;
  unsigned int v316;
  __int128 v317;
  __int128 v318;
  unint64_t v319;
  _QWORD *v320;
  unint64_t v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  unsigned int *v325;
  unsigned int v326;
  __int128 v327;
  __int128 v328;
  unint64_t v329;
  _QWORD *v330;
  unint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  unsigned int *v335;
  unsigned int v336;
  __int128 v337;
  __int128 v338;
  unint64_t v339;
  _QWORD *v340;
  unint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  unsigned int *v345;
  unsigned int v346;
  __int128 v347;
  __int128 v348;
  unint64_t v349;
  uint64_t v350;
  int v351;
  unint64_t v353;
  uint64_t v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t v357;
  unsigned int **v358;
  _QWORD *v359;
  uint64_t v360;
  unint64_t *v361;
  unint64_t v362;
  unint64_t v363;
  unsigned int **v364;
  unint64_t *v365;
  unint64_t v366;
  unint64_t v367;
  unsigned int v368;
  unint64_t *v369;
  unint64_t v370;
  unint64_t v371;
  unsigned int **v372;
  unsigned int *v373;
  unint64_t *v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t *v377;
  unint64_t v378;
  unint64_t v379;
  unsigned int **v380;
  unint64_t v381;
  double v382;
  _QWORD *v383;
  unint64_t v384;
  unint64_t v385;
  double v386;
  uint64_t v387;
  double v388;
  _QWORD *v389;
  unint64_t v390;
  unint64_t v391;
  double v392;
  uint64_t v393;
  double v394;
  _QWORD *v395;
  unint64_t v396;
  unint64_t v397;
  int v398;
  const std::string::value_type *v399;
  std::string::size_type v400;
  double v401;
  _QWORD *v402;
  unint64_t v403;
  unint64_t v404;
  double v405;
  uint64_t v406;
  double v407;
  _QWORD *v408;
  unint64_t v409;
  BOOL v410;
  double v411;
  _QWORD *v412;
  unint64_t v413;
  unint64_t v414;
  double v415;
  uint64_t v416;
  _QWORD *v417;
  unint64_t v418;
  double v419;
  _QWORD *v420;
  unint64_t v421;
  unint64_t v422;
  double v423;
  uint64_t v424;
  unint64_t *v425;
  _QWORD *v426;
  unint64_t v427;
  unint64_t v428;
  void *v429;
  double *v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t *v433;
  _QWORD *v434;
  uint64_t v435;
  unint64_t v436;
  unint64_t v437;
  _QWORD *v438;
  uint64_t *v439;
  uint64_t *v440;
  uint64_t *v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t *v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  double v452;
  _QWORD *v453;
  unint64_t v454;
  unint64_t v455;
  double v456;
  uint64_t v457;
  double v458;
  unint64_t *v459;
  _QWORD *v460;
  unint64_t v461;
  unint64_t v462;
  _QWORD *v463;
  unint64_t v464;
  unint64_t v465;
  double v466;
  uint64_t v467;
  double v468;
  uint64_t v469;
  unsigned int *v470;
  unsigned int v471;
  __int128 v472;
  __int128 v473;
  unint64_t v474;
  unint64_t v475;
  unsigned int **v476;
  double v477;
  unsigned int **v478;
  double v479;
  unint64_t *v480;
  _QWORD *v481;
  unint64_t v482;
  unint64_t v483;
  void *v484;
  unint64_t *v485;
  _QWORD *v486;
  unint64_t v487;
  unint64_t v488;
  void *v489;
  unint64_t *v490;
  _QWORD *v491;
  unint64_t v492;
  unint64_t v493;
  void *v494;
  double v495;
  uint64_t v496;
  unint64_t *v497;
  _QWORD *v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  unsigned int v502;
  unint64_t *v503;
  _QWORD *v504;
  unint64_t v505;
  unint64_t v506;
  void *v507;
  double v508;
  double *v509;
  uint64_t v510;
  unint64_t v511;
  double *v512;
  double v513;
  unint64_t *v514;
  _QWORD *v515;
  unint64_t v516;
  BOOL v517;
  unint64_t *v518;
  _QWORD *v519;
  uint64_t v520;
  unint64_t v521;
  unint64_t v522;
  _QWORD *v523;
  double v524;
  uint64_t *v525;
  uint64_t *v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t *v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t *v534;
  uint64_t *v535;
  unint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  double v541;
  uint64_t *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t *v546;
  _QWORD *v547;
  uint64_t v548;
  unint64_t v549;
  unint64_t v550;
  unsigned int v551;
  unint64_t *v552;
  _QWORD *v553;
  unint64_t v554;
  unint64_t v555;
  unint64_t *v556;
  _QWORD *v557;
  unint64_t v558;
  unint64_t v559;
  void *v560;
  unint64_t *v561;
  _QWORD *v562;
  unint64_t v563;
  unint64_t v564;
  void *v565;
  double *v566;
  uint64_t v567;
  unint64_t v568;
  _QWORD *v569;
  unint64_t v570;
  void *v571;
  double v572;
  uint64_t v573;
  unint64_t *v574;
  _QWORD *v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  unsigned int v579;
  unint64_t *v580;
  _QWORD *v581;
  unint64_t v582;
  unint64_t v583;
  void *v584;
  unint64_t *v585;
  _QWORD *v586;
  unint64_t v587;
  unint64_t v588;
  unint64_t *v589;
  _QWORD *v590;
  uint64_t v591;
  unint64_t v592;
  BOOL v593;
  unint64_t *v594;
  _QWORD *v595;
  uint64_t v596;
  unint64_t v597;
  unint64_t v598;
  _QWORD *v599;
  uint64_t *v600;
  uint64_t *v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t v605;
  uint64_t *v606;
  uint64_t v607;
  unint64_t v608;
  uint64_t *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  unint64_t *v613;
  _QWORD *v614;
  unint64_t v615;
  unint64_t v616;
  _QWORD *v617;
  unint64_t v618;
  unint64_t v619;
  double v620;
  uint64_t v621;
  double v622;
  uint64_t v623;
  unsigned int *v624;
  unsigned int v625;
  __int128 v626;
  __int128 v627;
  unint64_t v628;
  unint64_t v629;
  unint64_t v630;
  unint64_t v631;
  BOOL v632;
  unint64_t *v633;
  _QWORD *v634;
  uint64_t v635;
  unint64_t v636;
  unint64_t v637;
  unsigned int v638;
  unint64_t *v639;
  _QWORD *v640;
  unint64_t v641;
  unint64_t v642;
  unint64_t *v643;
  _QWORD *v644;
  unint64_t v645;
  BOOL v646;
  _QWORD *v647;
  unint64_t v648;
  unint64_t v649;
  _QWORD *v650;
  uint64_t v651;
  unint64_t v652;
  unsigned int v653;
  _QWORD *v654;
  unint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  double v659;
  uint64_t v660;
  double v661;
  uint64_t v662;
  unsigned int *v663;
  unsigned int v664;
  __int128 v665;
  __int128 v666;
  unint64_t v667;
  unint64_t v668;
  unint64_t v669;
  unint64_t v670;
  BOOL v671;
  _QWORD *v672;
  unsigned int v673;
  unint64_t *v674;
  _QWORD *v675;
  uint64_t v676;
  unint64_t v677;
  unint64_t v678;
  unsigned int v679;
  _QWORD *v680;
  unint64_t v681;
  unint64_t v682;
  double v683;
  uint64_t v684;
  double v685;
  uint64_t v686;
  unsigned int *v687;
  unsigned int v688;
  __int128 v689;
  __int128 v690;
  unint64_t v691;
  unint64_t v692;
  unint64_t v693;
  unint64_t v694;
  BOOL v695;
  uint64_t v696;
  unint64_t *v697;
  _QWORD *v698;
  unint64_t v699;
  unint64_t v700;
  _QWORD *v701;
  unint64_t v702;
  unint64_t v703;
  _QWORD *v704;
  unint64_t v705;
  BOOL v706;
  _QWORD *v707;
  unint64_t v708;
  _QWORD *v709;
  unint64_t v710;
  double v711;
  uint64_t v712;
  double v713;
  uint64_t v714;
  unsigned int *v715;
  unsigned int v716;
  __int128 v717;
  __int128 v718;
  unint64_t v719;
  unint64_t v720;
  unint64_t v721;
  unint64_t v722;
  BOOL v723;
  void *v724;
  double v725;
  uint64_t v726;
  double v727;
  uint64_t v728;
  unsigned int *v729;
  unsigned int v730;
  __int128 v731;
  __int128 v732;
  unint64_t v733;
  BOOL v734;
  unint64_t *v735;
  _QWORD *v736;
  unint64_t v737;
  unint64_t v738;
  _QWORD *v739;
  unint64_t v740;
  uint64_t v741;
  double v742;
  uint64_t v743;
  unsigned int *v744;
  unsigned int v745;
  __int128 v746;
  __int128 v747;
  unint64_t v748;
  _QWORD *v749;
  unint64_t v750;
  unint64_t v751;
  double v752;
  uint64_t v753;
  double v754;
  uint64_t v755;
  unsigned int *v756;
  unsigned int v757;
  __int128 v758;
  __int128 v759;
  unint64_t v760;
  unint64_t v761;
  unint64_t v762;
  unint64_t v763;
  BOOL v764;
  _QWORD *v765;
  unint64_t v766;
  uint64_t v767;
  double v768;
  uint64_t v769;
  unsigned int *v770;
  unsigned int v771;
  __int128 v772;
  __int128 v773;
  unint64_t v774;
  _QWORD *v775;
  unint64_t v776;
  unint64_t v777;
  double v778;
  uint64_t v779;
  double v780;
  uint64_t v781;
  unsigned int *v782;
  unsigned int v783;
  __int128 v784;
  __int128 v785;
  unint64_t v786;
  unint64_t v787;
  unint64_t v788;
  unint64_t v789;
  BOOL v790;
  unint64_t *v791;
  unint64_t v792;
  unint64_t v793;
  _QWORD *v794;
  _QWORD *v795;
  uint64_t v796;
  unint64_t *v797;
  unint64_t v798;
  unint64_t v799;
  _QWORD *v800;
  unint64_t *v801;
  unint64_t v802;
  unint64_t v803;
  unsigned int v804;
  unint64_t *v805;
  unint64_t v806;
  unint64_t v807;
  _QWORD *v808;
  void *v809;
  unint64_t *v810;
  unint64_t v811;
  unint64_t v812;
  unint64_t *v813;
  unint64_t v814;
  unint64_t v815;
  _QWORD *v816;
  unint64_t v817;
  unint64_t v818;
  void *v819;
  unint64_t v820;
  unint64_t v821;
  void *v822;
  unint64_t v823;
  unint64_t v824;
  void *v825;
  unint64_t v826;
  unint64_t v827;
  _QWORD *v828;
  unint64_t v829;
  unint64_t v830;
  void *v831;
  double *v832;
  uint64_t v833;
  unint64_t v834;
  double *v835;
  double v836;
  unint64_t v837;
  unint64_t v838;
  void *v839;
  unint64_t v840;
  unint64_t v841;
  unint64_t v842;
  unint64_t v843;
  _QWORD *v844;
  uint64_t *v845;
  uint64_t *v846;
  uint64_t v847;
  uint64_t v848;
  unint64_t v849;
  uint64_t *v850;
  uint64_t v851;
  unint64_t v852;
  unsigned int *v853;
  uint64_t *v854;
  unint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  double v860;
  uint64_t *v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  unint64_t v865;
  unint64_t v866;
  unint64_t v867;
  unint64_t v868;
  _QWORD *v869;
  unint64_t v870;
  unint64_t v871;
  unint64_t v872;
  unint64_t v873;
  unint64_t v874;
  unint64_t v875;
  void *v876;
  unint64_t v877;
  unint64_t v878;
  unint64_t v879;
  unint64_t v880;
  void *v881;
  unint64_t v882;
  unint64_t v883;
  _QWORD *v884;
  unint64_t v885;
  unint64_t v886;
  unint64_t v887;
  unint64_t v888;
  void *v889;
  unint64_t v890;
  unint64_t v891;
  unint64_t v892;
  unint64_t v893;
  _QWORD *v894;
  unint64_t v895;
  unint64_t v896;
  unint64_t v897;
  unint64_t v898;
  _QWORD *v899;
  uint64_t *v900;
  uint64_t *v901;
  double v902;
  uint64_t v903;
  uint64_t v904;
  unint64_t v905;
  uint64_t *v906;
  uint64_t v907;
  unint64_t v908;
  uint64_t *v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  unint64_t v913;
  unint64_t v914;
  _QWORD *v915;
  uint64_t *v916;
  uint64_t *v917;
  unsigned int **v918;
  uint64_t v919;
  uint64_t v920;
  unint64_t v921;
  uint64_t *v922;
  uint64_t v923;
  unint64_t v924;
  uint64_t *v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  unint64_t v929;
  unint64_t v930;
  unint64_t v931;
  unint64_t v932;
  unint64_t v933;
  unint64_t v934;
  unint64_t v935;
  unint64_t v936;
  uint64_t v937;
  unsigned int *v938;
  unsigned int v939;
  __int128 v940;
  __int128 v941;
  unint64_t v942;
  unint64_t v943;
  unint64_t v944;
  unint64_t v945;
  _QWORD *v946;
  unint64_t v947;
  unint64_t v948;
  unint64_t v949;
  unint64_t v950;
  unint64_t v951;
  unint64_t v952;
  unint64_t v953;
  unint64_t v954;
  _QWORD *v955;
  unint64_t v956;
  unint64_t v957;
  unint64_t v958;
  unint64_t v959;
  uint64_t v960;
  unsigned int *v961;
  unsigned int v962;
  __int128 v963;
  __int128 v964;
  unint64_t v965;
  unint64_t v966;
  unint64_t v967;
  unint64_t v968;
  _QWORD *v969;
  unint64_t v970;
  unint64_t v971;
  void *v972;
  double *v973;
  uint64_t v974;
  unint64_t v975;
  double v976;
  unint64_t v977;
  unint64_t v978;
  unint64_t v979;
  unint64_t v980;
  unint64_t v981;
  unint64_t v982;
  uint64_t v983;
  unsigned int *v984;
  unsigned int v985;
  __int128 v986;
  __int128 v987;
  unint64_t v988;
  unint64_t v989;
  unint64_t v990;
  unint64_t v991;
  unint64_t v992;
  unint64_t v993;
  unint64_t v994;
  unint64_t v995;
  void *v996;
  double *v997;
  uint64_t v998;
  unsigned int **v999;
  unint64_t v1000;
  unint64_t v1001;
  unint64_t v1002;
  unint64_t v1003;
  unint64_t v1004;
  uint64_t v1005;
  unsigned int *v1006;
  unsigned int v1007;
  __int128 v1008;
  __int128 v1009;
  unint64_t v1010;
  unint64_t v1011;
  uint64_t v1012;
  unsigned int *v1013;
  unsigned int v1014;
  __int128 v1015;
  __int128 v1016;
  unint64_t v1017;
  unint64_t v1018;
  unint64_t v1019;
  unint64_t v1020;
  unint64_t v1021;
  unint64_t v1022;
  unint64_t v1023;
  unint64_t v1024;
  uint64_t v1025;
  unsigned int *v1026;
  unsigned int v1027;
  __int128 v1028;
  __int128 v1029;
  unint64_t v1030;
  unint64_t v1031;
  uint64_t v1032;
  unsigned int *v1033;
  unsigned int v1034;
  __int128 v1035;
  __int128 v1036;
  unint64_t v1037;
  unint64_t v1038;
  unint64_t v1039;
  unint64_t v1040;
  uint64_t v1041;
  unsigned int *v1042;
  unsigned int v1043;
  __int128 v1044;
  __int128 v1045;
  unint64_t v1046;
  unint64_t v1047;
  unint64_t v1048;
  unint64_t v1049;
  uint64_t v1050;
  unsigned int *v1051;
  unsigned int v1052;
  __int128 v1053;
  __int128 v1054;
  unint64_t v1055;
  unint64_t v1056;
  unint64_t v1057;
  unint64_t v1058;
  uint64_t v1059;
  unsigned int *v1060;
  unsigned int v1061;
  __int128 v1062;
  __int128 v1063;
  unint64_t v1064;
  unint64_t v1065;
  double v1066;
  uint64_t v1067;
  void *__p;
  _BYTE *v1069;
  uint64_t v1070;
  _QWORD *v1071[2];
  double v1072;
  int v1073;
  char v1074;
  uint64_t v1075;

  v1075 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 25) && *((_BYTE *)a2 + 12) != 7)
  {
    if (*((_BYTE *)this + 24))
    {
      v4 = 1;
      switch(*((_BYTE *)a2 + 12))
      {
        case 3:
          v5 = (_QWORD *)(*(_QWORD *)a2 + 8);
          v6 = (_QWORD *)(*(_QWORD *)a2 + 16);
          v7 = 3;
          goto LABEL_17;
        case 4:
          v5 = (_QWORD *)(*(_QWORD *)a2 + 8);
          v6 = (_QWORD *)(*(_QWORD *)a2 + 16);
          v7 = 4;
          goto LABEL_17;
        case 5:
          v5 = (_QWORD *)(*(_QWORD *)a2 + 8);
          v6 = (_QWORD *)(*(_QWORD *)a2 + 16);
          v7 = 5;
LABEL_17:
          v4 = (uint64_t)(*v6 - *v5) >> v7;
          break;
        case 9:
          v24 = *(uint64_t **)(*(_QWORD *)a2 + 24);
          v23 = *(uint64_t **)(*(_QWORD *)a2 + 32);
          if (v23 == v24)
          {
            v4 = 0;
          }
          else
          {
            v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
            if (v4)
            {
              v4 = 1;
              do
              {
                v25 = *v24++;
                v4 *= v25;
              }
              while (v24 != v23);
            }
          }
          break;
        default:
          break;
      }
      v15 = (double *)((char *)this + 8);
      v16 = 1;
      switch(*((_BYTE *)this + 20))
      {
        case 3:
          v17 = (_QWORD *)(*(_QWORD *)v15 + 8);
          v18 = (_QWORD *)(*(_QWORD *)v15 + 16);
          v19 = 3;
          goto LABEL_22;
        case 4:
          v17 = (_QWORD *)(*(_QWORD *)v15 + 8);
          v18 = (_QWORD *)(*(_QWORD *)v15 + 16);
          v19 = 4;
          goto LABEL_22;
        case 5:
          v17 = (_QWORD *)(*(_QWORD *)v15 + 8);
          v18 = (_QWORD *)(*(_QWORD *)v15 + 16);
          v19 = 5;
LABEL_22:
          v16 = (uint64_t)(*v18 - *v17) >> v19;
          break;
        case 9:
          v27 = *(uint64_t **)(*(_QWORD *)v15 + 24);
          v26 = *(uint64_t **)(*(_QWORD *)v15 + 32);
          if (v26 == v27)
          {
            v16 = 0;
          }
          else
          {
            v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
            if (v16)
            {
              v16 = 1;
              do
              {
                v28 = *v27++;
                v16 *= v28;
              }
              while (v27 != v26);
            }
          }
          break;
        default:
          break;
      }
      if (v4 == v16)
      {
        ++*((_QWORD *)this + 4);
        memset(v1071, 0, 13);
        if (v1071 != (_QWORD **)a2)
        {
          *(_QWORD **)((char *)v1071 + 5) = *(_QWORD **)((char *)a2 + 5);
          v1071[0] = *(_QWORD **)a2;
          BYTE4(v1071[1]) = *((_BYTE *)a2 + 12);
          if (BYTE4(v1071[1]) <= 9u && ((1 << SBYTE4(v1071[1])) & 0x33C) != 0)
          {
            v20 = v1071[0];
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 + 1, v20));
          }
        }
        switch(*((_BYTE *)this + 20))
        {
          case 0:
            switch(BYTE4(v1071[1]))
            {
              case 0:
                v22 = (_QWORD *)((char *)v1071[0] - *(_QWORD *)v15);
                goto LABEL_111;
              case 1:
                v213 = (double)*(uint64_t *)v15;
                goto LABEL_344;
              case 2:
                v55 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v239 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v239, (uint64_t)v1071[0]);
                v1071[0] = v239;
                *v239 = 1;
                do
                {
                  v240 = __ldaxr(v55);
                  v58 = --v240 == 0;
                }
                while (__stlxr(v240, v55));
                goto LABEL_320;
              case 3:
                v138 = v1071[0];
                if (*v1071[0] != 1)
                {
                  v139 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v139, (uint64_t)v1071[0]);
                  v1071[0] = v139;
                  *v139 = 1;
                  do
                  {
                    v140 = __ldaxr(v138);
                    v141 = v140 - 1;
                  }
                  while (__stlxr(v141, v138));
                  if (!v141)
                  {
                    v142 = (void *)v138[1];
                    if (v142)
                    {
                      v138[2] = (unint64_t)v142;
                      operator delete(v142);
                    }
                    MEMORY[0x219A19A08](v138, 0x1080C409938AC02);
                  }
                }
                v143 = (double *)v1071[0][1];
                v144 = v1071[0][2] - (_QWORD)v143;
                if (v144)
                {
                  v145 = v144 >> 3;
                  v146 = (double)*(uint64_t *)v15;
                  if (v145 <= 1)
                    v145 = 1;
                  do
                  {
                    *v143 = *v143 - v146;
                    ++v143;
                    --v145;
                  }
                  while (v145);
                }
                goto LABEL_463;
              case 4:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v274 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v274, (uint64_t)v1071[0]);
                v1071[0] = v274;
                *v274 = 1;
                do
                {
                  v275 = __ldaxr(v132);
                  v216 = --v275 == 0;
                }
                while (__stlxr(v275, v132));
                goto LABEL_447;
              case 5:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v300 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v300, (uint64_t)v1071[0]);
                v1071[0] = v300;
                *v300 = 1;
                do
                {
                  v301 = __ldaxr(v132);
                  v135 = --v301 == 0;
                }
                while (__stlxr(v301, v132));
                goto LABEL_405;
              case 6:
                v1071[0] = (_QWORD *)((unint64_t)v1071[0] & 0xFF00000000000000 | ((unint64_t)v1071[0]
                                                                                         - *(_QWORD *)v15) & 0xFFFFFFFFFFFFFFLL);
                goto LABEL_463;
              case 7:
                goto LABEL_462;
              case 8:
                v217 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v304 = operator new();
                v305 = v1071[0];
                *(_QWORD *)v304 = *v1071[0];
                *(_QWORD *)(v304 + 8) = v305[1];
                v306 = v305[2];
                *(_QWORD *)(v304 + 16) = v306;
                if (v306)
                {
                  v307 = (unsigned int *)(v306 + 8);
                  do
                    v308 = __ldxr(v307);
                  while (__stxr(v308 + 1, v307));
                }
                v309 = *(_OWORD *)(v305 + 3);
                v310 = *(_OWORD *)(v305 + 5);
                *(_OWORD *)(v304 + 56) = *(_OWORD *)(v305 + 7);
                *(_OWORD *)(v304 + 40) = v310;
                *(_OWORD *)(v304 + 24) = v309;
                v1071[0] = (_QWORD *)v304;
                *(_QWORD *)v304 = 1;
                do
                {
                  v311 = __ldaxr(v217);
                  v226 = --v311 == 0;
                }
                while (__stlxr(v311, v217));
                goto LABEL_457;
              case 9:
                v171 = v1071[0];
                if (*v1071[0] != 1)
                {
                  v172 = (_QWORD *)operator new();
                  v173 = v1071[0] + 1;
                  *v172 = *v1071[0];
                  turi::flexible_type_impl::ndarray<double>::ndarray(v172 + 1, (uint64_t)v173);
                  v1071[0] = v172;
                  *v172 = 1;
                  do
                  {
                    v174 = __ldaxr(v171);
                    v175 = v174 - 1;
                  }
                  while (__stlxr(v175, v171));
                  if (!v175)
                  {
                    v176 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v171);
                    MEMORY[0x219A19A08](v176, 0x1030C407B73B9F7);
                  }
                }
                v177 = v1071[0];
                v179 = (uint64_t *)v1071[0][3];
                v178 = (uint64_t *)v1071[0][4];
                if (v178 == v179)
                  goto LABEL_463;
                if (!v1071[0][1])
                  goto LABEL_463;
                v180 = (double)*(uint64_t *)v15;
                v181 = 1;
                do
                {
                  v182 = *v179++;
                  v181 *= v182;
                }
                while (v179 != v178);
                if (!v181)
                  goto LABEL_463;
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v1071[0] + 1);
                v183 = (v177[4] - v177[3]) >> 3;
                v1070 = 0;
                std::vector<unsigned long>::vector(&__p, v183, &v1070);
                do
                {
                  v184 = (uint64_t *)__p;
                  v185 = 0;
                  if (v1069 != __p)
                  {
                    v186 = (v1069 - (_BYTE *)__p) >> 3;
                    v187 = (uint64_t *)v177[6];
                    if (v186 <= 1)
                      v186 = 1;
                    do
                    {
                      v189 = *v184++;
                      v188 = v189;
                      v190 = *v187++;
                      v185 += v190 * v188;
                      --v186;
                    }
                    while (v186);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v177 + 1);
                  *(double *)(*(_QWORD *)v177[1] + 8 * (v177[9] + v185)) = *(double *)(*(_QWORD *)v177[1]
                                                                                     + 8 * (v177[9] + v185))
                                                                         - v180;
                }
                while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v177 + 1), (uint64_t *)&__p));
                goto LABEL_275;
              default:
                goto LABEL_1627;
            }
          case 1:
            switch(BYTE4(v1071[1]))
            {
              case 0:
                v22 = (_QWORD *)(uint64_t)((double)(uint64_t)v1071[0] - *v15);
LABEL_111:
                v1071[0] = v22;
                goto LABEL_463;
              case 1:
                v213 = *v15;
LABEL_344:
                *(double *)v1071 = *(double *)v1071 - v213;
                goto LABEL_463;
              case 2:
                v55 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v241 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v241, (uint64_t)v1071[0]);
                v1071[0] = v241;
                *v241 = 1;
                do
                {
                  v242 = __ldaxr(v55);
                  v58 = --v242 == 0;
                }
                while (__stlxr(v242, v55));
                goto LABEL_320;
              case 3:
                v147 = v1071[0];
                if (*v1071[0] != 1)
                {
                  v148 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v148, (uint64_t)v1071[0]);
                  v1071[0] = v148;
                  *v148 = 1;
                  do
                  {
                    v149 = __ldaxr(v147);
                    v150 = v149 - 1;
                  }
                  while (__stlxr(v150, v147));
                  if (!v150)
                  {
                    v151 = (void *)v147[1];
                    if (v151)
                    {
                      v147[2] = (unint64_t)v151;
                      operator delete(v151);
                    }
                    MEMORY[0x219A19A08](v147, 0x1080C409938AC02);
                  }
                }
                v152 = (double *)v1071[0][1];
                v153 = v1071[0][2] - (_QWORD)v152;
                if (v153)
                {
                  v154 = *v15;
                  v155 = v153 >> 3;
                  if (v155 <= 1)
                    v155 = 1;
                  do
                  {
                    *v152 = *v152 - v154;
                    ++v152;
                    --v155;
                  }
                  while (v155);
                }
                goto LABEL_463;
              case 4:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v276 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v276, (uint64_t)v1071[0]);
                v1071[0] = v276;
                *v276 = 1;
                do
                {
                  v277 = __ldaxr(v132);
                  v216 = --v277 == 0;
                }
                while (__stlxr(v277, v132));
                goto LABEL_447;
              case 5:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v302 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v302, (uint64_t)v1071[0]);
                v1071[0] = v302;
                *v302 = 1;
                do
                {
                  v303 = __ldaxr(v132);
                  v135 = --v303 == 0;
                }
                while (__stlxr(v303, v132));
                goto LABEL_405;
              case 6:
                v243 = vcvtmd_s64_f64(*v15);
                v244 = (uint64_t)((*v15 - (double)(uint64_t)floor(*v15)) * 1000000.0);
                v245 = (unint64_t)v1071[0];
                v246 = (char *)v1071[0] - v243;
                v1071[0] = (_QWORD *)((unint64_t)v1071[0] & 0xFF00000000000000 | ((unint64_t)v1071[0]
                                                                                         - v243) & 0xFFFFFFFFFFFFFFLL);
                v247 = LODWORD(v1071[1]) - v244;
                if (SLODWORD(v1071[1]) - v244 < 0)
                {
                  v1071[0] = (_QWORD *)((unint64_t)(v246 - 1) & 0xFFFFFFFFFFFFFFLL | v245 & 0xFF00000000000000);
                  v247 += 1000000;
                }
                if (v247 > 0xF423F)
                  turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                LODWORD(v1071[1]) = v247;
                goto LABEL_463;
              case 7:
                goto LABEL_462;
              case 8:
                v217 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v312 = operator new();
                v313 = v1071[0];
                *(_QWORD *)v312 = *v1071[0];
                *(_QWORD *)(v312 + 8) = v313[1];
                v314 = v313[2];
                *(_QWORD *)(v312 + 16) = v314;
                if (v314)
                {
                  v315 = (unsigned int *)(v314 + 8);
                  do
                    v316 = __ldxr(v315);
                  while (__stxr(v316 + 1, v315));
                }
                v317 = *(_OWORD *)(v313 + 3);
                v318 = *(_OWORD *)(v313 + 5);
                *(_OWORD *)(v312 + 56) = *(_OWORD *)(v313 + 7);
                *(_OWORD *)(v312 + 40) = v318;
                *(_OWORD *)(v312 + 24) = v317;
                v1071[0] = (_QWORD *)v312;
                *(_QWORD *)v312 = 1;
                do
                {
                  v319 = __ldaxr(v217);
                  v226 = --v319 == 0;
                }
                while (__stlxr(v319, v217));
                goto LABEL_457;
              case 9:
                v191 = v1071[0];
                if (*v1071[0] != 1)
                {
                  v192 = (_QWORD *)operator new();
                  v193 = v1071[0] + 1;
                  *v192 = *v1071[0];
                  turi::flexible_type_impl::ndarray<double>::ndarray(v192 + 1, (uint64_t)v193);
                  v1071[0] = v192;
                  *v192 = 1;
                  do
                  {
                    v194 = __ldaxr(v191);
                    v195 = v194 - 1;
                  }
                  while (__stlxr(v195, v191));
                  if (!v195)
                  {
                    v196 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v191);
                    MEMORY[0x219A19A08](v196, 0x1030C407B73B9F7);
                  }
                }
                v197 = v1071[0];
                v199 = (uint64_t *)v1071[0][3];
                v198 = (uint64_t *)v1071[0][4];
                if (v198 == v199)
                  goto LABEL_463;
                if (!v1071[0][1])
                  goto LABEL_463;
                v200 = *v15;
                v201 = 1;
                do
                {
                  v202 = *v199++;
                  v201 *= v202;
                }
                while (v199 != v198);
                if (!v201)
                  goto LABEL_463;
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v1071[0] + 1);
                v203 = (v197[4] - v197[3]) >> 3;
                v1070 = 0;
                std::vector<unsigned long>::vector(&__p, v203, &v1070);
                do
                {
                  v204 = (uint64_t *)__p;
                  v205 = 0;
                  if (v1069 != __p)
                  {
                    v206 = (v1069 - (_BYTE *)__p) >> 3;
                    v207 = (uint64_t *)v197[6];
                    if (v206 <= 1)
                      v206 = 1;
                    do
                    {
                      v209 = *v204++;
                      v208 = v209;
                      v210 = *v207++;
                      v205 += v210 * v208;
                      --v206;
                    }
                    while (v206);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v197 + 1);
                  *(double *)(*(_QWORD *)v197[1] + 8 * (v197[9] + v205)) = *(double *)(*(_QWORD *)v197[1]
                                                                                     + 8 * (v197[9] + v205))
                                                                         - v200;
                }
                while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v197 + 1), (uint64_t *)&__p));
                goto LABEL_275;
              default:
                goto LABEL_1627;
            }
          case 2:
            switch(BYTE4(v1071[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                v55 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v61 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v61, (uint64_t)v1071[0]);
                v1071[0] = v61;
                *v61 = 1;
                do
                {
                  v62 = __ldaxr(v55);
                  v58 = --v62 == 0;
                }
                while (__stlxr(v62, v55));
                goto LABEL_320;
              case 3:
                v73 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v79 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v79, (uint64_t)v1071[0]);
                v1071[0] = v79;
                *v79 = 1;
                do
                {
                  v80 = __ldaxr(v73);
                  v76 = --v80 == 0;
                }
                while (__stlxr(v80, v73));
                goto LABEL_229;
              case 4:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v260 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v260, (uint64_t)v1071[0]);
                v1071[0] = v260;
                *v260 = 1;
                do
                {
                  v261 = __ldaxr(v132);
                  v216 = --v261 == 0;
                }
                while (__stlxr(v261, v132));
                goto LABEL_447;
              case 5:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v211 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v211, (uint64_t)v1071[0]);
                v1071[0] = v211;
                *v211 = 1;
                do
                {
                  v212 = __ldaxr(v132);
                  v135 = --v212 == 0;
                }
                while (__stlxr(v212, v132));
                goto LABEL_405;
              case 8:
                v217 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v262 = operator new();
                v263 = v1071[0];
                *(_QWORD *)v262 = *v1071[0];
                *(_QWORD *)(v262 + 8) = v263[1];
                v264 = v263[2];
                *(_QWORD *)(v262 + 16) = v264;
                if (v264)
                {
                  v265 = (unsigned int *)(v264 + 8);
                  do
                    v266 = __ldxr(v265);
                  while (__stxr(v266 + 1, v265));
                }
                v267 = *(_OWORD *)(v263 + 3);
                v268 = *(_OWORD *)(v263 + 5);
                *(_OWORD *)(v262 + 56) = *(_OWORD *)(v263 + 7);
                *(_OWORD *)(v262 + 40) = v268;
                *(_OWORD *)(v262 + 24) = v267;
                v1071[0] = (_QWORD *)v262;
                *(_QWORD *)v262 = 1;
                do
                {
                  v269 = __ldaxr(v217);
                  v226 = --v269 == 0;
                }
                while (__stlxr(v269, v217));
                goto LABEL_457;
              case 9:
                v81 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v129 = (_QWORD *)operator new();
                v130 = v1071[0] + 1;
                *v129 = *v1071[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v129 + 1, (uint64_t)v130);
                v1071[0] = v129;
                *v129 = 1;
                do
                {
                  v131 = __ldaxr(v81);
                  v85 = --v131 == 0;
                }
                while (__stlxr(v131, v81));
                goto LABEL_340;
              default:
                goto LABEL_1627;
            }
          case 3:
            switch(BYTE4(v1071[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                v55 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v63 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v63, (uint64_t)v1071[0]);
                v1071[0] = v63;
                *v63 = 1;
                do
                {
                  v64 = __ldaxr(v55);
                  v58 = --v64 == 0;
                }
                while (__stlxr(v64, v55));
                goto LABEL_320;
              case 3:
                v86 = *v15;
                v87 = v1071[0];
                if (*v1071[0] != 1)
                {
                  v88 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v88, (uint64_t)v1071[0]);
                  v1071[0] = v88;
                  *v88 = 1;
                  do
                  {
                    v89 = __ldaxr(v87);
                    v90 = v89 - 1;
                  }
                  while (__stlxr(v90, v87));
                  if (!v90)
                  {
                    v91 = (void *)v87[1];
                    if (v91)
                    {
                      v87[2] = (unint64_t)v91;
                      operator delete(v91);
                    }
                    MEMORY[0x219A19A08](v87, 0x1080C409938AC02);
                  }
                }
                v92 = v1071[0];
                turi::flexible_type_fail(v1071[0][2] - v1071[0][1] == *(_QWORD *)(*(_QWORD *)&v86 + 16)
                                                                    - *(_QWORD *)(*(_QWORD *)&v86 + 8));
                v93 = (double *)v92[1];
                v94 = v92[2] - (_QWORD)v93;
                if (v94)
                {
                  v95 = v94 >> 3;
                  v96 = *(double **)(*(_QWORD *)&v86 + 8);
                  if (v95 <= 1)
                    v95 = 1;
                  do
                  {
                    v97 = *v96++;
                    *v93 = *v93 - v97;
                    ++v93;
                    --v95;
                  }
                  while (v95);
                }
                goto LABEL_463;
              case 4:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v272 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v272, (uint64_t)v1071[0]);
                v1071[0] = v272;
                *v272 = 1;
                do
                {
                  v273 = __ldaxr(v132);
                  v216 = --v273 == 0;
                }
                while (__stlxr(v273, v132));
                goto LABEL_447;
              case 5:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v230 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v230, (uint64_t)v1071[0]);
                v1071[0] = v230;
                *v230 = 1;
                do
                {
                  v231 = __ldaxr(v132);
                  v135 = --v231 == 0;
                }
                while (__stlxr(v231, v132));
                goto LABEL_405;
              case 8:
                v217 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v282 = operator new();
                v283 = v1071[0];
                *(_QWORD *)v282 = *v1071[0];
                *(_QWORD *)(v282 + 8) = v283[1];
                v284 = v283[2];
                *(_QWORD *)(v282 + 16) = v284;
                if (v284)
                {
                  v285 = (unsigned int *)(v284 + 8);
                  do
                    v286 = __ldxr(v285);
                  while (__stxr(v286 + 1, v285));
                }
                v287 = *(_OWORD *)(v283 + 3);
                v288 = *(_OWORD *)(v283 + 5);
                *(_OWORD *)(v282 + 56) = *(_OWORD *)(v283 + 7);
                *(_OWORD *)(v282 + 40) = v288;
                *(_OWORD *)(v282 + 24) = v287;
                v1071[0] = (_QWORD *)v282;
                *(_QWORD *)v282 = 1;
                do
                {
                  v289 = __ldaxr(v217);
                  v226 = --v289 == 0;
                }
                while (__stlxr(v289, v217));
                goto LABEL_457;
              case 9:
                v81 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v158 = (_QWORD *)operator new();
                v159 = v1071[0] + 1;
                *v158 = *v1071[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v158 + 1, (uint64_t)v159);
                v1071[0] = v158;
                *v158 = 1;
                do
                {
                  v160 = __ldaxr(v81);
                  v85 = --v160 == 0;
                }
                while (__stlxr(v160, v81));
                goto LABEL_340;
              default:
                goto LABEL_1627;
            }
          case 4:
            switch(BYTE4(v1071[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                v55 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v56 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v56, (uint64_t)v1071[0]);
                v1071[0] = v56;
                *v56 = 1;
                do
                {
                  v57 = __ldaxr(v55);
                  v58 = --v57 == 0;
                }
                while (__stlxr(v57, v55));
                goto LABEL_320;
              case 3:
                v73 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v74 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v74, (uint64_t)v1071[0]);
                v1071[0] = v74;
                *v74 = 1;
                do
                {
                  v75 = __ldaxr(v73);
                  v76 = --v75 == 0;
                }
                while (__stlxr(v75, v73));
                goto LABEL_229;
              case 4:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v214 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v214, (uint64_t)v1071[0]);
                v1071[0] = v214;
                *v214 = 1;
                do
                {
                  v215 = __ldaxr(v132);
                  v216 = --v215 == 0;
                }
                while (__stlxr(v215, v132));
                goto LABEL_447;
              case 5:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v133 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v133, (uint64_t)v1071[0]);
                v1071[0] = v133;
                *v133 = 1;
                do
                {
                  v134 = __ldaxr(v132);
                  v135 = --v134 == 0;
                }
                while (__stlxr(v134, v132));
                goto LABEL_405;
              case 8:
                v217 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v218 = operator new();
                v219 = v1071[0];
                *(_QWORD *)v218 = *v1071[0];
                *(_QWORD *)(v218 + 8) = v219[1];
                v220 = v219[2];
                *(_QWORD *)(v218 + 16) = v220;
                if (v220)
                {
                  v221 = (unsigned int *)(v220 + 8);
                  do
                    v222 = __ldxr(v221);
                  while (__stxr(v222 + 1, v221));
                }
                v223 = *(_OWORD *)(v219 + 3);
                v224 = *(_OWORD *)(v219 + 5);
                *(_OWORD *)(v218 + 56) = *(_OWORD *)(v219 + 7);
                *(_OWORD *)(v218 + 40) = v224;
                *(_OWORD *)(v218 + 24) = v223;
                v1071[0] = (_QWORD *)v218;
                *(_QWORD *)v218 = 1;
                do
                {
                  v225 = __ldaxr(v217);
                  v226 = --v225 == 0;
                }
                while (__stlxr(v225, v217));
                goto LABEL_457;
              case 9:
                v81 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v82 = (_QWORD *)operator new();
                v83 = v1071[0] + 1;
                *v82 = *v1071[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v82 + 1, (uint64_t)v83);
                v1071[0] = v82;
                *v82 = 1;
                do
                {
                  v84 = __ldaxr(v81);
                  v85 = --v84 == 0;
                }
                while (__stlxr(v84, v81));
                goto LABEL_340;
              default:
                goto LABEL_1627;
            }
          case 5:
            switch(BYTE4(v1071[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                v55 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v67 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v67, (uint64_t)v1071[0]);
                v1071[0] = v67;
                *v67 = 1;
                do
                {
                  v68 = __ldaxr(v55);
                  v58 = --v68 == 0;
                }
                while (__stlxr(v68, v55));
                goto LABEL_320;
              case 3:
                v73 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v136 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v136, (uint64_t)v1071[0]);
                v1071[0] = v136;
                *v136 = 1;
                do
                {
                  v137 = __ldaxr(v73);
                  v76 = --v137 == 0;
                }
                while (__stlxr(v137, v73));
                goto LABEL_229;
              case 4:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v320 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v320, (uint64_t)v1071[0]);
                v1071[0] = v320;
                *v320 = 1;
                do
                {
                  v321 = __ldaxr(v132);
                  v216 = --v321 == 0;
                }
                while (__stlxr(v321, v132));
                goto LABEL_447;
              case 5:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v270 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v270, (uint64_t)v1071[0]);
                v1071[0] = v270;
                *v270 = 1;
                do
                {
                  v271 = __ldaxr(v132);
                  v135 = --v271 == 0;
                }
                while (__stlxr(v271, v132));
                goto LABEL_405;
              case 8:
                v217 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v322 = operator new();
                v323 = v1071[0];
                *(_QWORD *)v322 = *v1071[0];
                *(_QWORD *)(v322 + 8) = v323[1];
                v324 = v323[2];
                *(_QWORD *)(v322 + 16) = v324;
                if (v324)
                {
                  v325 = (unsigned int *)(v324 + 8);
                  do
                    v326 = __ldxr(v325);
                  while (__stxr(v326 + 1, v325));
                }
                v327 = *(_OWORD *)(v323 + 3);
                v328 = *(_OWORD *)(v323 + 5);
                *(_OWORD *)(v322 + 56) = *(_OWORD *)(v323 + 7);
                *(_OWORD *)(v322 + 40) = v328;
                *(_OWORD *)(v322 + 24) = v327;
                v1071[0] = (_QWORD *)v322;
                *(_QWORD *)v322 = 1;
                do
                {
                  v329 = __ldaxr(v217);
                  v226 = --v329 == 0;
                }
                while (__stlxr(v329, v217));
                goto LABEL_457;
              case 9:
                v81 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v227 = (_QWORD *)operator new();
                v228 = v1071[0] + 1;
                *v227 = *v1071[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v227 + 1, (uint64_t)v228);
                v1071[0] = v227;
                *v227 = 1;
                do
                {
                  v229 = __ldaxr(v81);
                  v85 = --v229 == 0;
                }
                while (__stlxr(v229, v81));
                goto LABEL_340;
              default:
                goto LABEL_1627;
            }
          case 6:
            switch(BYTE4(v1071[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                v55 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v69 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v69, (uint64_t)v1071[0]);
                v1071[0] = v69;
                *v69 = 1;
                do
                {
                  v70 = __ldaxr(v55);
                  v58 = --v70 == 0;
                }
                while (__stlxr(v70, v55));
                goto LABEL_320;
              case 3:
                v73 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v156 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v156, (uint64_t)v1071[0]);
                v1071[0] = v156;
                *v156 = 1;
                do
                {
                  v157 = __ldaxr(v73);
                  v76 = --v157 == 0;
                }
                while (__stlxr(v157, v73));
                goto LABEL_229;
              case 4:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v330 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v330, (uint64_t)v1071[0]);
                v1071[0] = v330;
                *v330 = 1;
                do
                {
                  v331 = __ldaxr(v132);
                  v216 = --v331 == 0;
                }
                while (__stlxr(v331, v132));
                goto LABEL_447;
              case 5:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v280 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v280, (uint64_t)v1071[0]);
                v1071[0] = v280;
                *v280 = 1;
                do
                {
                  v281 = __ldaxr(v132);
                  v135 = --v281 == 0;
                }
                while (__stlxr(v281, v132));
                goto LABEL_405;
              case 8:
                v217 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v332 = operator new();
                v333 = v1071[0];
                *(_QWORD *)v332 = *v1071[0];
                *(_QWORD *)(v332 + 8) = v333[1];
                v334 = v333[2];
                *(_QWORD *)(v332 + 16) = v334;
                if (v334)
                {
                  v335 = (unsigned int *)(v334 + 8);
                  do
                    v336 = __ldxr(v335);
                  while (__stxr(v336 + 1, v335));
                }
                v337 = *(_OWORD *)(v333 + 3);
                v338 = *(_OWORD *)(v333 + 5);
                *(_OWORD *)(v332 + 56) = *(_OWORD *)(v333 + 7);
                *(_OWORD *)(v332 + 40) = v338;
                *(_OWORD *)(v332 + 24) = v337;
                v1071[0] = (_QWORD *)v332;
                *(_QWORD *)v332 = 1;
                do
                {
                  v339 = __ldaxr(v217);
                  v226 = --v339 == 0;
                }
                while (__stlxr(v339, v217));
                goto LABEL_457;
              case 9:
                v81 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v236 = (_QWORD *)operator new();
                v237 = v1071[0] + 1;
                *v236 = *v1071[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v236 + 1, (uint64_t)v237);
                v1071[0] = v236;
                *v236 = 1;
                do
                {
                  v238 = __ldaxr(v81);
                  v85 = --v238 == 0;
                }
                while (__stlxr(v238, v81));
                goto LABEL_340;
              default:
                goto LABEL_1627;
            }
          case 7:
            switch(BYTE4(v1071[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                v55 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v65 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v65, (uint64_t)v1071[0]);
                v1071[0] = v65;
                *v65 = 1;
                do
                {
                  v66 = __ldaxr(v55);
                  v58 = --v66 == 0;
                }
                while (__stlxr(v66, v55));
                goto LABEL_320;
              case 3:
                v73 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v98 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v98, (uint64_t)v1071[0]);
                v1071[0] = v98;
                *v98 = 1;
                do
                {
                  v99 = __ldaxr(v73);
                  v76 = --v99 == 0;
                }
                while (__stlxr(v99, v73));
                goto LABEL_229;
              case 4:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v278 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v278, (uint64_t)v1071[0]);
                v1071[0] = v278;
                *v278 = 1;
                do
                {
                  v279 = __ldaxr(v132);
                  v216 = --v279 == 0;
                }
                while (__stlxr(v279, v132));
                goto LABEL_447;
              case 5:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v232 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v232, (uint64_t)v1071[0]);
                v1071[0] = v232;
                *v232 = 1;
                do
                {
                  v233 = __ldaxr(v132);
                  v135 = --v233 == 0;
                }
                while (__stlxr(v233, v132));
                goto LABEL_405;
              case 8:
                v217 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v290 = operator new();
                v291 = v1071[0];
                *(_QWORD *)v290 = *v1071[0];
                *(_QWORD *)(v290 + 8) = v291[1];
                v292 = v291[2];
                *(_QWORD *)(v290 + 16) = v292;
                if (v292)
                {
                  v293 = (unsigned int *)(v292 + 8);
                  do
                    v294 = __ldxr(v293);
                  while (__stxr(v294 + 1, v293));
                }
                v295 = *(_OWORD *)(v291 + 3);
                v296 = *(_OWORD *)(v291 + 5);
                *(_OWORD *)(v290 + 56) = *(_OWORD *)(v291 + 7);
                *(_OWORD *)(v290 + 40) = v296;
                *(_OWORD *)(v290 + 24) = v295;
                v1071[0] = (_QWORD *)v290;
                *(_QWORD *)v290 = 1;
                do
                {
                  v297 = __ldaxr(v217);
                  v226 = --v297 == 0;
                }
                while (__stlxr(v297, v217));
                goto LABEL_457;
              case 9:
                v81 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v168 = (_QWORD *)operator new();
                v169 = v1071[0] + 1;
                *v168 = *v1071[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v168 + 1, (uint64_t)v169);
                v1071[0] = v168;
                *v168 = 1;
                do
                {
                  v170 = __ldaxr(v81);
                  v85 = --v170 == 0;
                }
                while (__stlxr(v170, v81));
                goto LABEL_340;
              default:
                goto LABEL_1627;
            }
          case 8:
            switch(BYTE4(v1071[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                v55 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v71 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v71, (uint64_t)v1071[0]);
                v1071[0] = v71;
                *v71 = 1;
                do
                {
                  v72 = __ldaxr(v55);
                  v58 = --v72 == 0;
                }
                while (__stlxr(v72, v55));
                goto LABEL_320;
              case 3:
                v73 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v161 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v161, (uint64_t)v1071[0]);
                v1071[0] = v161;
                *v161 = 1;
                do
                {
                  v162 = __ldaxr(v73);
                  v76 = --v162 == 0;
                }
                while (__stlxr(v162, v73));
                goto LABEL_229;
              case 4:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v340 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v340, (uint64_t)v1071[0]);
                v1071[0] = v340;
                *v340 = 1;
                do
                {
                  v341 = __ldaxr(v132);
                  v216 = --v341 == 0;
                }
                while (__stlxr(v341, v132));
                goto LABEL_447;
              case 5:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v298 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v298, (uint64_t)v1071[0]);
                v1071[0] = v298;
                *v298 = 1;
                do
                {
                  v299 = __ldaxr(v132);
                  v135 = --v299 == 0;
                }
                while (__stlxr(v299, v132));
                goto LABEL_405;
              case 8:
                v217 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v342 = operator new();
                v343 = v1071[0];
                *(_QWORD *)v342 = *v1071[0];
                *(_QWORD *)(v342 + 8) = v343[1];
                v344 = v343[2];
                *(_QWORD *)(v342 + 16) = v344;
                if (v344)
                {
                  v345 = (unsigned int *)(v344 + 8);
                  do
                    v346 = __ldxr(v345);
                  while (__stxr(v346 + 1, v345));
                }
                v347 = *(_OWORD *)(v343 + 3);
                v348 = *(_OWORD *)(v343 + 5);
                *(_OWORD *)(v342 + 56) = *(_OWORD *)(v343 + 7);
                *(_OWORD *)(v342 + 40) = v348;
                *(_OWORD *)(v342 + 24) = v347;
                v1071[0] = (_QWORD *)v342;
                *(_QWORD *)v342 = 1;
                do
                {
                  v349 = __ldaxr(v217);
                  v226 = --v349 == 0;
                }
                while (__stlxr(v349, v217));
                goto LABEL_457;
              case 9:
                v81 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v256 = (_QWORD *)operator new();
                v257 = v1071[0] + 1;
                *v256 = *v1071[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v256 + 1, (uint64_t)v257);
                v1071[0] = v256;
                *v256 = 1;
                do
                {
                  v258 = __ldaxr(v81);
                  v85 = --v258 == 0;
                }
                while (__stlxr(v258, v81));
LABEL_340:
                if (!v85)
                  goto LABEL_462;
                v164 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v81);
                v259 = 2071181815;
                goto LABEL_460;
              default:
                goto LABEL_1627;
            }
          case 9:
            switch(BYTE4(v1071[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                v55 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v59 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v59, (uint64_t)v1071[0]);
                v1071[0] = v59;
                *v59 = 1;
                do
                {
                  v60 = __ldaxr(v55);
                  v58 = --v60 == 0;
                }
                while (__stlxr(v60, v55));
LABEL_320:
                if (!v58)
                  goto LABEL_462;
                if (*((char *)v55 + 31) < 0)
                  operator delete((void *)v55[1]);
                v164 = v55;
                v165 = 0x1012C404EF22A49;
                break;
              case 3:
                v73 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v77 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v77, (uint64_t)v1071[0]);
                v1071[0] = v77;
                *v77 = 1;
                do
                {
                  v78 = __ldaxr(v73);
                  v76 = --v78 == 0;
                }
                while (__stlxr(v78, v73));
LABEL_229:
                if (!v76)
                  goto LABEL_462;
                v163 = (void *)v73[1];
                if (v163)
                {
                  v73[2] = (unint64_t)v163;
                  operator delete(v163);
                }
                v164 = v73;
                v165 = 0x1080C409938AC02;
                break;
              case 4:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v234 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v234, (uint64_t)v1071[0]);
                v1071[0] = v234;
                *v234 = 1;
                do
                {
                  v235 = __ldaxr(v132);
                  v216 = --v235 == 0;
                }
                while (__stlxr(v235, v132));
LABEL_447:
                if (!v216)
                  goto LABEL_462;
                __p = v132 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                goto LABEL_450;
              case 5:
                v132 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v166 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v166, (uint64_t)v1071[0]);
                v1071[0] = v166;
                *v166 = 1;
                do
                {
                  v167 = __ldaxr(v132);
                  v135 = --v167 == 0;
                }
                while (__stlxr(v167, v132));
LABEL_405:
                if (!v135)
                  goto LABEL_462;
                __p = v132 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_450:
                v164 = v132;
                v165 = 0x1020C405E66F15BLL;
                break;
              case 8:
                v217 = v1071[0];
                if (*v1071[0] == 1)
                  goto LABEL_462;
                v248 = operator new();
                v249 = v1071[0];
                *(_QWORD *)v248 = *v1071[0];
                *(_QWORD *)(v248 + 8) = v249[1];
                v250 = v249[2];
                *(_QWORD *)(v248 + 16) = v250;
                if (v250)
                {
                  v251 = (unsigned int *)(v250 + 8);
                  do
                    v252 = __ldxr(v251);
                  while (__stxr(v252 + 1, v251));
                }
                v253 = *(_OWORD *)(v249 + 3);
                v254 = *(_OWORD *)(v249 + 5);
                *(_OWORD *)(v248 + 56) = *(_OWORD *)(v249 + 7);
                *(_OWORD *)(v248 + 40) = v254;
                *(_OWORD *)(v248 + 24) = v253;
                v1071[0] = (_QWORD *)v248;
                *(_QWORD *)v248 = 1;
                do
                {
                  v255 = __ldaxr(v217);
                  v226 = --v255 == 0;
                }
                while (__stlxr(v255, v217));
LABEL_457:
                if (!v226)
                  goto LABEL_462;
                boost::detail::shared_count::~shared_count((unsigned int **)v217 + 2);
                v164 = v217;
                v259 = -235920773;
LABEL_460:
                v165 = v259 | 0x1030C4000000000;
                break;
              case 9:
                v100 = *v15;
                v101 = v1071[0];
                if (*v1071[0] != 1)
                {
                  v102 = (_QWORD *)operator new();
                  v103 = v1071[0] + 1;
                  *v102 = *v1071[0];
                  turi::flexible_type_impl::ndarray<double>::ndarray(v102 + 1, (uint64_t)v103);
                  v1071[0] = v102;
                  *v102 = 1;
                  do
                  {
                    v104 = __ldaxr(v101);
                    v105 = v104 - 1;
                  }
                  while (__stlxr(v105, v101));
                  if (!v105)
                  {
                    v106 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v101);
                    MEMORY[0x219A19A08](v106, 0x1030C407B73B9F7);
                  }
                }
                v107 = v1071[0];
                v108 = v1071[0] + 1;
                if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v1071[0] + 1), *(_QWORD *)&v100 + 8))
                  turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                v110 = (uint64_t *)v107[3];
                v109 = (uint64_t *)v107[4];
                if (v109 != v110)
                {
                  if (*v108)
                  {
                    v111 = 1;
                    do
                    {
                      v112 = *v110++;
                      v111 *= v112;
                    }
                    while (v110 != v109);
                    if (v111)
                    {
                      turi::flexible_type_impl::ndarray<double>::ensure_unique(v108);
                      v113 = (uint64_t)(v107[4] - v107[3]) >> 3;
                      v1070 = 0;
                      std::vector<unsigned long>::vector(&__p, v113, &v1070);
                      do
                      {
                        v114 = (uint64_t *)__p;
                        if (v1069 == __p)
                        {
                          v123 = 0;
                          v124 = *(double *)(**(_QWORD **)(*(_QWORD *)&v100 + 8)
                                           + 8 * *(_QWORD *)(*(_QWORD *)&v100 + 72));
                        }
                        else
                        {
                          v115 = 0;
                          v116 = (v1069 - (_BYTE *)__p) >> 3;
                          v117 = *(uint64_t **)(*(_QWORD *)&v100 + 48);
                          if (v116 <= 1)
                            v116 = 1;
                          v118 = (uint64_t *)__p;
                          v119 = v116;
                          do
                          {
                            v121 = *v118++;
                            v120 = v121;
                            v122 = *v117++;
                            v115 += v122 * v120;
                            --v119;
                          }
                          while (v119);
                          v123 = 0;
                          v124 = *(double *)(**(_QWORD **)(*(_QWORD *)&v100 + 8)
                                           + 8 * (*(_QWORD *)(*(_QWORD *)&v100 + 72) + v115));
                          v125 = (uint64_t *)v107[6];
                          do
                          {
                            v127 = *v114++;
                            v126 = v127;
                            v128 = *v125++;
                            v123 += v128 * v126;
                            --v116;
                          }
                          while (v116);
                        }
                        turi::flexible_type_impl::ndarray<double>::ensure_unique(v108);
                        *(double *)(*(_QWORD *)v107[1] + 8 * (v107[9] + v123)) = *(double *)(*(_QWORD *)v107[1]
                                                                                           + 8 * (v107[9] + v123))
                                                                               - v124;
                      }
                      while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v108, (uint64_t *)&__p));
LABEL_275:
                      if (__p)
                      {
                        v1069 = __p;
                        operator delete(__p);
                      }
                    }
                  }
                }
                goto LABEL_463;
              default:
                goto LABEL_1627;
            }
            MEMORY[0x219A19A08](v164, v165);
LABEL_462:
            turi::flexible_type_fail(0);
LABEL_463:
            v1066 = (double)*((unint64_t *)this + 4);
            v1072 = 0.0;
            v1073 = 0;
            v1074 = 0;
            turi::flexible_type::operator=<double>((uint64_t)&v1072, &v1066);
            v350 = (uint64_t)v1071[0];
            v351 = BYTE4(v1071[1]);
            if (BYTE4(v1071[1]) <= 9u && ((1 << SBYTE4(v1071[1])) & 0x33C) != 0)
            {
              do
                v353 = __ldaxr((unint64_t *)v350);
              while (__stlxr(v353 + 1, (unint64_t *)v350));
            }
            switch(v1074)
            {
              case 0:
                switch(v351)
                {
                  case 0:
                    v350 /= *(uint64_t *)&v1072;
LABEL_535:
                    switch(*((_BYTE *)this + 20))
                    {
                      case 0:
                        v381 = *(_QWORD *)v15 + v350;
                        goto LABEL_641;
                      case 1:
                        v458 = (double)v350;
                        goto LABEL_1003;
                      case 2:
                        v452 = *v15;
                        if (**(_QWORD **)v15 == 1)
                          goto LABEL_663;
                        v453 = (_QWORD *)operator new();
                        std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v453, *(_QWORD *)v15);
                        *(_QWORD *)v15 = v453;
                        *v453 = 1;
                        do
                        {
                          v454 = __ldaxr(*(unint64_t **)&v452);
                          v455 = v454 - 1;
                        }
                        while (__stlxr(v455, *(unint64_t **)&v452));
                        if (v455)
                          goto LABEL_663;
                        if (*(char *)(*(_QWORD *)&v452 + 31) < 0)
                          operator delete(*(void **)(*(_QWORD *)&v452 + 8));
                        v456 = v452;
                        v457 = 0x1012C404EF22A49;
                        goto LABEL_662;
                      case 3:
                        v425 = *(unint64_t **)v15;
                        if (**(_QWORD **)v15 != 1)
                        {
                          v426 = (_QWORD *)operator new();
                          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v426, *(_QWORD *)v15);
                          *(_QWORD *)v15 = v426;
                          *v426 = 1;
                          do
                          {
                            v427 = __ldaxr(v425);
                            v428 = v427 - 1;
                          }
                          while (__stlxr(v428, v425));
                          if (!v428)
                          {
                            v429 = (void *)v425[1];
                            if (v429)
                            {
                              v425[2] = (unint64_t)v429;
                              operator delete(v429);
                            }
                            MEMORY[0x219A19A08](v425, 0x1080C409938AC02);
                          }
                        }
                        v430 = *(double **)(*(_QWORD *)v15 + 8);
                        v431 = *(_QWORD *)(*(_QWORD *)v15 + 16) - (_QWORD)v430;
                        if (!v431)
                          goto LABEL_1164;
                        v432 = v431 >> 3;
                        if (v432 <= 1)
                          v432 = 1;
                        do
                        {
                          *v430 = *v430 + (double)v350;
                          ++v430;
                          --v432;
                        }
                        while (v432);
                        goto LABEL_914;
                      case 4:
                        v459 = *(unint64_t **)v15;
                        if (**(_QWORD **)v15 == 1)
                          goto LABEL_663;
                        v460 = (_QWORD *)operator new();
                        std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v460, *(_QWORD *)v15);
                        *(_QWORD *)v15 = v460;
                        *v460 = 1;
                        do
                        {
                          v461 = __ldaxr(v459);
                          v462 = v461 - 1;
                        }
                        while (__stlxr(v462, v459));
                        if (v462)
                          goto LABEL_663;
                        __p = v459 + 1;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        goto LABEL_653;
                      case 5:
                        v459 = *(unint64_t **)v15;
                        if (**(_QWORD **)v15 == 1)
                          goto LABEL_663;
                        v463 = (_QWORD *)operator new();
                        std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v463, *(_QWORD *)v15);
                        *(_QWORD *)v15 = v463;
                        *v463 = 1;
                        do
                        {
                          v464 = __ldaxr(v459);
                          v465 = v464 - 1;
                        }
                        while (__stlxr(v465, v459));
                        if (v465)
                          goto LABEL_663;
                        __p = v459 + 1;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_653:
                        v456 = *(double *)&v459;
                        v457 = 0x1020C405E66F15BLL;
                        goto LABEL_662;
                      case 6:
                        v381 = *(_QWORD *)v15 & 0xFF00000000000000 | (*(_QWORD *)v15 + v350) & 0xFFFFFFFFFFFFFFLL;
                        goto LABEL_641;
                      case 7:
                        goto LABEL_663;
                      case 8:
                        v466 = *v15;
                        if (**(_QWORD **)v15 == 1)
                          goto LABEL_663;
                        v467 = operator new();
                        v468 = *v15;
                        *(_QWORD *)v467 = **(_QWORD **)v15;
                        *(_QWORD *)(v467 + 8) = *(_QWORD *)(*(_QWORD *)&v468 + 8);
                        v469 = *(_QWORD *)(*(_QWORD *)&v468 + 16);
                        *(_QWORD *)(v467 + 16) = v469;
                        if (v469)
                        {
                          v470 = (unsigned int *)(v469 + 8);
                          do
                            v471 = __ldxr(v470);
                          while (__stxr(v471 + 1, v470));
                        }
                        v472 = *(_OWORD *)(*(_QWORD *)&v468 + 24);
                        v473 = *(_OWORD *)(*(_QWORD *)&v468 + 40);
                        *(_OWORD *)(v467 + 56) = *(_OWORD *)(*(_QWORD *)&v468 + 56);
                        *(_OWORD *)(v467 + 40) = v473;
                        *(_OWORD *)(v467 + 24) = v472;
                        *(_QWORD *)v15 = v467;
                        *(_QWORD *)v467 = 1;
                        do
                        {
                          v474 = __ldaxr(*(unint64_t **)&v466);
                          v475 = v474 - 1;
                        }
                        while (__stlxr(v475, *(unint64_t **)&v466));
                        if (v475)
                          goto LABEL_663;
                        boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v466 + 16));
                        v456 = v466;
                        v457 = 0x1030C40F1F0227BLL;
LABEL_662:
                        MEMORY[0x219A19A08](*(_QWORD *)&v456, v457);
                        goto LABEL_663;
                      case 9:
                        v433 = *(unint64_t **)v15;
                        if (**(_QWORD **)v15 != 1)
                        {
                          v434 = (_QWORD *)operator new();
                          v435 = *(_QWORD *)v15 + 8;
                          *v434 = **(_QWORD **)v15;
                          turi::flexible_type_impl::ndarray<double>::ndarray(v434 + 1, v435);
                          *(_QWORD *)v15 = v434;
                          *v434 = 1;
                          do
                          {
                            v436 = __ldaxr(v433);
                            v437 = v436 - 1;
                          }
                          while (__stlxr(v437, v433));
                          if (!v437)
                          {
                            v438 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v433);
                            MEMORY[0x219A19A08](v438, 0x1030C407B73B9F7);
                          }
                        }
                        v439 = *(uint64_t **)v15;
                        v441 = *(uint64_t **)(*(_QWORD *)v15 + 24);
                        v440 = *(uint64_t **)(*(_QWORD *)v15 + 32);
                        if (v440 == v441 || !v439[1])
                          goto LABEL_1164;
                        v442 = 1;
                        do
                        {
                          v443 = *v441++;
                          v442 *= v443;
                        }
                        while (v441 != v440);
                        if (!v442)
                          goto LABEL_914;
                        turi::flexible_type_impl::ndarray<double>::ensure_unique(v439 + 1);
                        v444 = (v439[4] - v439[3]) >> 3;
                        v1067 = 0;
                        std::vector<unsigned long>::vector(&__p, v444, &v1067);
                        do
                        {
                          v445 = (uint64_t *)__p;
                          v446 = 0;
                          if (v1069 != __p)
                          {
                            v447 = (v1069 - (_BYTE *)__p) >> 3;
                            v448 = (uint64_t *)v439[6];
                            if (v447 <= 1)
                              v447 = 1;
                            do
                            {
                              v450 = *v445++;
                              v449 = v450;
                              v451 = *v448++;
                              v446 += v451 * v449;
                              --v447;
                            }
                            while (v447);
                          }
                          turi::flexible_type_impl::ndarray<double>::ensure_unique(v439 + 1);
                          *(double *)(*(_QWORD *)v439[1] + 8 * (v439[9] + v446)) = *(double *)(*(_QWORD *)v439[1]
                                                                                             + 8 * (v439[9] + v446))
                                                                                 + (double)v350;
                        }
                        while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v439 + 1), (uint64_t *)&__p));
                        break;
                      default:
                        goto LABEL_1628;
                    }
LABEL_912:
                    if (__p)
                    {
                      v1069 = __p;
                      operator delete(__p);
                    }
LABEL_914:
                    switch(v351)
                    {
                      case 2:
                        goto LABEL_1021;
                      case 3:
                        goto LABEL_1063;
                      case 4:
                        goto LABEL_937;
                      case 5:
                        goto LABEL_1113;
                      case 8:
                        goto LABEL_1156;
                      case 9:
                        goto LABEL_991;
                      default:
                        break;
                    }
LABEL_1164:
                    switch(BYTE4(v1071[1]))
                    {
                      case 2:
                        v791 = v1071[0];
                        do
                        {
                          v792 = __ldaxr(v791);
                          v793 = v792 - 1;
                        }
                        while (__stlxr(v793, v791));
                        if (!v793)
                        {
                          v794 = v1071[0];
                          if (v1071[0])
                          {
                            if (*((char *)v1071[0] + 31) < 0)
                              operator delete(*((void **)v1071[0] + 1));
                            v795 = v794;
                            v796 = 0x1012C404EF22A49;
                            goto LABEL_1201;
                          }
                        }
                        break;
                      case 3:
                        v805 = v1071[0];
                        do
                        {
                          v806 = __ldaxr(v805);
                          v807 = v806 - 1;
                        }
                        while (__stlxr(v807, v805));
                        if (!v807)
                        {
                          v808 = v1071[0];
                          if (v1071[0])
                          {
                            v809 = (void *)v1071[0][1];
                            if (v809)
                            {
                              v1071[0][2] = v809;
                              operator delete(v809);
                            }
                            v795 = v808;
                            v796 = 0x1080C409938AC02;
                            goto LABEL_1201;
                          }
                        }
                        break;
                      case 4:
                        v797 = v1071[0];
                        do
                        {
                          v798 = __ldaxr(v797);
                          v799 = v798 - 1;
                        }
                        while (__stlxr(v799, v797));
                        if (!v799)
                        {
                          v800 = v1071[0];
                          if (v1071[0])
                          {
                            __p = v1071[0] + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_1194;
                          }
                        }
                        break;
                      case 5:
                        v810 = v1071[0];
                        do
                        {
                          v811 = __ldaxr(v810);
                          v812 = v811 - 1;
                        }
                        while (__stlxr(v812, v810));
                        if (!v812)
                        {
                          v800 = v1071[0];
                          if (v1071[0])
                          {
                            __p = v1071[0] + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_1194:
                            v795 = v800;
                            v796 = 0x1020C405E66F15BLL;
                            goto LABEL_1201;
                          }
                        }
                        break;
                      case 8:
                        v813 = v1071[0];
                        do
                        {
                          v814 = __ldaxr(v813);
                          v815 = v814 - 1;
                        }
                        while (__stlxr(v815, v813));
                        if (!v815)
                        {
                          v816 = v1071[0];
                          if (v1071[0])
                          {
                            boost::detail::shared_count::~shared_count((unsigned int **)v1071[0] + 2);
                            v795 = v816;
                            v804 = -235920773;
                            goto LABEL_1200;
                          }
                        }
                        break;
                      case 9:
                        v801 = v1071[0];
                        do
                        {
                          v802 = __ldaxr(v801);
                          v803 = v802 - 1;
                        }
                        while (__stlxr(v803, v801));
                        if (!v803 && v1071[0])
                        {
                          v795 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1071[0]);
                          v804 = 2071181815;
LABEL_1200:
                          v796 = v804 | 0x1030C4000000000;
LABEL_1201:
                          MEMORY[0x219A19A08](v795, v796);
                        }
                        break;
                      default:
                        return;
                    }
                    return;
                  case 1:
                    v479 = (double)*(uint64_t *)&v1072;
                    goto LABEL_734;
                  case 2:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v935 = __ldaxr((unint64_t *)v350);
                        v936 = v935 - 1;
                      }
                      while (__stlxr(v936, (unint64_t *)v350));
                      if (!v936)
                      {
                        if (*(char *)(v350 + 31) < 0)
                          operator delete(*(void **)(v350 + 8));
                        MEMORY[0x219A19A08](v350, 0x1012C404EF22A49);
                      }
                    }
                    goto LABEL_1623;
                  case 3:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v477 = *(double *)&v350;
                    }
                    else
                    {
                      v477 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v477, v350);
                      **(_QWORD **)&v477 = 1;
                      do
                      {
                        v970 = __ldaxr((unint64_t *)v350);
                        v971 = v970 - 1;
                      }
                      while (__stlxr(v971, (unint64_t *)v350));
                      if (!v971)
                      {
                        v972 = *(void **)(v350 + 8);
                        if (v972)
                        {
                          *(_QWORD *)(v350 + 16) = v972;
                          operator delete(v972);
                        }
                        MEMORY[0x219A19A08](v350, 0x1080C409938AC02);
                      }
                    }
                    v973 = *(double **)(*(_QWORD *)&v477 + 8);
                    v974 = *(_QWORD *)(*(_QWORD *)&v477 + 16) - (_QWORD)v973;
                    if (v974)
                    {
                      v975 = v974 >> 3;
                      v976 = (double)*(uint64_t *)&v1072;
                      if (v975 <= 1)
                        v975 = 1;
                      do
                      {
                        *v973 = *v973 / v976;
                        ++v973;
                        --v975;
                      }
                      while (v975);
                    }
                    goto LABEL_1527;
                  case 4:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v885 = __ldaxr((unint64_t *)v350);
                        v886 = v885 - 1;
                      }
                      while (__stlxr(v886, (unint64_t *)v350));
                      if (!v886)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 5:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1021 = __ldaxr((unint64_t *)v350);
                        v1022 = v1021 - 1;
                      }
                      while (__stlxr(v1022, (unint64_t *)v350));
                      if (!v1022)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 6:
                  case 7:
                    goto LABEL_495;
                  case 8:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      v1025 = *(_QWORD *)(v350 + 16);
                      *(_QWORD *)(v354 + 8) = *(_QWORD *)(v350 + 8);
                      *(_QWORD *)(v354 + 16) = v1025;
                      if (v1025)
                      {
                        v1026 = (unsigned int *)(v1025 + 8);
                        do
                          v1027 = __ldxr(v1026);
                        while (__stxr(v1027 + 1, v1026));
                      }
                      v1028 = *(_OWORD *)(v350 + 24);
                      v1029 = *(_OWORD *)(v350 + 40);
                      *(_OWORD *)(v354 + 56) = *(_OWORD *)(v350 + 56);
                      *(_OWORD *)(v354 + 40) = v1029;
                      *(_OWORD *)(v354 + 24) = v1028;
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1030 = __ldaxr((unint64_t *)v350);
                        v1031 = v1030 - 1;
                      }
                      while (__stlxr(v1031, (unint64_t *)v350));
                      if (!v1031)
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)(v350 + 16));
                        MEMORY[0x219A19A08](v350, 0x1030C40F1F0227BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 9:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v477 = *(double *)&v350;
                    }
                    else
                    {
                      v477 = COERCE_DOUBLE(operator new());
                      **(_QWORD **)&v477 = *(_QWORD *)v350;
                      turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v477 + 8), v350 + 8);
                      **(_QWORD **)&v477 = 1;
                      do
                      {
                        v897 = __ldaxr((unint64_t *)v350);
                        v898 = v897 - 1;
                      }
                      while (__stlxr(v898, (unint64_t *)v350));
                      if (!v898)
                      {
                        v899 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v350);
                        MEMORY[0x219A19A08](v899, 0x1030C407B73B9F7);
                      }
                    }
                    v901 = *(uint64_t **)(*(_QWORD *)&v477 + 24);
                    v900 = *(uint64_t **)(*(_QWORD *)&v477 + 32);
                    if (v900 == v901)
                      goto LABEL_1527;
                    if (!*(_QWORD *)(*(_QWORD *)&v477 + 8))
                      goto LABEL_1527;
                    v902 = (double)*(uint64_t *)&v1072;
                    v903 = 1;
                    do
                    {
                      v904 = *v901++;
                      v903 *= v904;
                    }
                    while (v901 != v900);
                    if (!v903)
                      goto LABEL_1527;
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v477 + 8));
                    v905 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v477 + 32) - *(_QWORD *)(*(_QWORD *)&v477 + 24)) >> 3;
                    v1067 = 0;
                    std::vector<unsigned long>::vector(&__p, v905, &v1067);
                    do
                    {
                      v906 = (uint64_t *)__p;
                      v907 = 0;
                      if (v1069 != __p)
                      {
                        v908 = (v1069 - (_BYTE *)__p) >> 3;
                        v909 = *(uint64_t **)(*(_QWORD *)&v477 + 48);
                        if (v908 <= 1)
                          v908 = 1;
                        do
                        {
                          v911 = *v906++;
                          v910 = v911;
                          v912 = *v909++;
                          v907 += v912 * v910;
                          --v908;
                        }
                        while (v908);
                      }
                      turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v477 + 8));
                      *(double *)(**(_QWORD **)(*(_QWORD *)&v477 + 8)
                                + 8 * (*(_QWORD *)(*(_QWORD *)&v477 + 72) + v907)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v477 + 8)
                                                                                                 + 8
                                                                                                 * (*(_QWORD *)(*(_QWORD *)&v477 + 72)
                                                                                                  + v907))
                                                                                     / v902;
                    }
                    while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(_QWORD *)&v477 + 8, (uint64_t *)&__p));
                    break;
                  default:
                    goto LABEL_1628;
                }
                goto LABEL_1385;
              case 1:
                switch(v351)
                {
                  case 0:
                    v350 = (uint64_t)((double)v350 / v1072);
                    goto LABEL_496;
                  case 1:
                    v479 = v1072;
LABEL_734:
                    *(double *)&v350 = *(double *)&v350 / v479;
                    goto LABEL_496;
                  case 2:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v877 = __ldaxr((unint64_t *)v350);
                        v878 = v877 - 1;
                      }
                      while (__stlxr(v878, (unint64_t *)v350));
                      if (!v878)
                      {
                        if (*(char *)(v350 + 31) < 0)
                          operator delete(*(void **)(v350 + 8));
                        MEMORY[0x219A19A08](v350, 0x1012C404EF22A49);
                      }
                    }
                    goto LABEL_1623;
                  case 3:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v477 = *(double *)&v350;
                    }
                    else
                    {
                      v477 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v477, v350);
                      **(_QWORD **)&v477 = 1;
                      do
                      {
                        v994 = __ldaxr((unint64_t *)v350);
                        v995 = v994 - 1;
                      }
                      while (__stlxr(v995, (unint64_t *)v350));
                      if (!v995)
                      {
                        v996 = *(void **)(v350 + 8);
                        if (v996)
                        {
                          *(_QWORD *)(v350 + 16) = v996;
                          operator delete(v996);
                        }
                        MEMORY[0x219A19A08](v350, 0x1080C409938AC02);
                      }
                    }
                    v997 = *(double **)(*(_QWORD *)&v477 + 8);
                    v998 = *(_QWORD *)(*(_QWORD *)&v477 + 16) - (_QWORD)v997;
                    if (v998)
                    {
                      *(double *)&v999 = v1072;
                      v1000 = v998 >> 3;
                      if (v1000 <= 1)
                        v1000 = 1;
                      do
                      {
                        *v997 = *v997 / *(double *)&v999;
                        ++v997;
                        --v1000;
                      }
                      while (v1000);
                    }
                    goto LABEL_1527;
                  case 4:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1023 = __ldaxr((unint64_t *)v350);
                        v1024 = v1023 - 1;
                      }
                      while (__stlxr(v1024, (unint64_t *)v350));
                      if (!v1024)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 5:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v958 = __ldaxr((unint64_t *)v350);
                        v959 = v958 - 1;
                      }
                      while (__stlxr(v959, (unint64_t *)v350));
                      if (!v959)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 6:
                  case 7:
                    goto LABEL_495;
                  case 8:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      v1032 = *(_QWORD *)(v350 + 16);
                      *(_QWORD *)(v354 + 8) = *(_QWORD *)(v350 + 8);
                      *(_QWORD *)(v354 + 16) = v1032;
                      if (v1032)
                      {
                        v1033 = (unsigned int *)(v1032 + 8);
                        do
                          v1034 = __ldxr(v1033);
                        while (__stxr(v1034 + 1, v1033));
                      }
                      v1035 = *(_OWORD *)(v350 + 24);
                      v1036 = *(_OWORD *)(v350 + 40);
                      *(_OWORD *)(v354 + 56) = *(_OWORD *)(v350 + 56);
                      *(_OWORD *)(v354 + 40) = v1036;
                      *(_OWORD *)(v354 + 24) = v1035;
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1037 = __ldaxr((unint64_t *)v350);
                        v1038 = v1037 - 1;
                      }
                      while (__stlxr(v1038, (unint64_t *)v350));
                      if (!v1038)
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)(v350 + 16));
                        MEMORY[0x219A19A08](v350, 0x1030C40F1F0227BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 9:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v477 = *(double *)&v350;
                    }
                    else
                    {
                      v477 = COERCE_DOUBLE(operator new());
                      **(_QWORD **)&v477 = *(_QWORD *)v350;
                      turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v477 + 8), v350 + 8);
                      **(_QWORD **)&v477 = 1;
                      do
                      {
                        v913 = __ldaxr((unint64_t *)v350);
                        v914 = v913 - 1;
                      }
                      while (__stlxr(v914, (unint64_t *)v350));
                      if (!v914)
                      {
                        v915 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v350);
                        MEMORY[0x219A19A08](v915, 0x1030C407B73B9F7);
                      }
                    }
                    v917 = *(uint64_t **)(*(_QWORD *)&v477 + 24);
                    v916 = *(uint64_t **)(*(_QWORD *)&v477 + 32);
                    if (v916 == v917)
                      goto LABEL_1527;
                    if (!*(_QWORD *)(*(_QWORD *)&v477 + 8))
                      goto LABEL_1527;
                    *(double *)&v918 = v1072;
                    v919 = 1;
                    do
                    {
                      v920 = *v917++;
                      v919 *= v920;
                    }
                    while (v917 != v916);
                    if (!v919)
                      goto LABEL_1527;
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v477 + 8));
                    v921 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v477 + 32) - *(_QWORD *)(*(_QWORD *)&v477 + 24)) >> 3;
                    v1067 = 0;
                    std::vector<unsigned long>::vector(&__p, v921, &v1067);
                    do
                    {
                      v922 = (uint64_t *)__p;
                      v923 = 0;
                      if (v1069 != __p)
                      {
                        v924 = (v1069 - (_BYTE *)__p) >> 3;
                        v925 = *(uint64_t **)(*(_QWORD *)&v477 + 48);
                        if (v924 <= 1)
                          v924 = 1;
                        do
                        {
                          v927 = *v922++;
                          v926 = v927;
                          v928 = *v925++;
                          v923 += v928 * v926;
                          --v924;
                        }
                        while (v924);
                      }
                      turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v477 + 8));
                      *(double *)(**(_QWORD **)(*(_QWORD *)&v477 + 8)
                                + 8 * (*(_QWORD *)(*(_QWORD *)&v477 + 72) + v923)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v477 + 8)
                                                                                                 + 8
                                                                                                 * (*(_QWORD *)(*(_QWORD *)&v477 + 72)
                                                                                                  + v923))
                                                                                     / *(double *)&v918;
                    }
                    while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(_QWORD *)&v477 + 8, (uint64_t *)&__p));
                    break;
                  default:
                    goto LABEL_1628;
                }
                goto LABEL_1385;
              case 2:
                switch(v351)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_495;
                  case 2:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v870 = __ldaxr((unint64_t *)v350);
                        v871 = v870 - 1;
                      }
                      while (__stlxr(v871, (unint64_t *)v350));
                      if (!v871)
                      {
                        if (*(char *)(v350 + 31) < 0)
                          operator delete(*(void **)(v350 + 8));
                        MEMORY[0x219A19A08](v350, 0x1012C404EF22A49);
                      }
                    }
                    goto LABEL_1623;
                  case 3:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v823 = __ldaxr((unint64_t *)v350);
                        v824 = v823 - 1;
                      }
                      while (__stlxr(v824, (unint64_t *)v350));
                      if (!v824)
                      {
                        v825 = *(void **)(v350 + 8);
                        if (v825)
                        {
                          *(_QWORD *)(v350 + 16) = v825;
                          operator delete(v825);
                        }
                        MEMORY[0x219A19A08](v350, 0x1080C409938AC02);
                      }
                    }
                    goto LABEL_1623;
                  case 4:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v981 = __ldaxr((unint64_t *)v350);
                        v982 = v981 - 1;
                      }
                      while (__stlxr(v982, (unint64_t *)v350));
                      if (!v982)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 5:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v931 = __ldaxr((unint64_t *)v350);
                        v932 = v931 - 1;
                      }
                      while (__stlxr(v932, (unint64_t *)v350));
                      if (!v932)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 8:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      v983 = *(_QWORD *)(v350 + 16);
                      *(_QWORD *)(v354 + 8) = *(_QWORD *)(v350 + 8);
                      *(_QWORD *)(v354 + 16) = v983;
                      if (v983)
                      {
                        v984 = (unsigned int *)(v983 + 8);
                        do
                          v985 = __ldxr(v984);
                        while (__stxr(v985 + 1, v984));
                      }
                      v986 = *(_OWORD *)(v350 + 24);
                      v987 = *(_OWORD *)(v350 + 40);
                      *(_OWORD *)(v354 + 56) = *(_OWORD *)(v350 + 56);
                      *(_OWORD *)(v354 + 40) = v987;
                      *(_OWORD *)(v354 + 24) = v986;
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v988 = __ldaxr((unint64_t *)v350);
                        v989 = v988 - 1;
                      }
                      while (__stlxr(v989, (unint64_t *)v350));
                      if (!v989)
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)(v350 + 16));
                        MEMORY[0x219A19A08](v350, 0x1030C40F1F0227BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 9:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v354 + 8), v350 + 8);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v867 = __ldaxr((unint64_t *)v350);
                        v868 = v867 - 1;
                      }
                      while (__stlxr(v868, (unint64_t *)v350));
                      if (!v868)
                      {
                        v869 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v350);
                        MEMORY[0x219A19A08](v869, 0x1030C407B73B9F7);
                      }
                    }
                    goto LABEL_1623;
                  default:
                    goto LABEL_1628;
                }
              case 3:
                switch(v351)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_495;
                  case 2:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v895 = __ldaxr((unint64_t *)v350);
                        v896 = v895 - 1;
                      }
                      while (__stlxr(v896, (unint64_t *)v350));
                      if (!v896)
                      {
                        if (*(char *)(v350 + 31) < 0)
                          operator delete(*(void **)(v350 + 8));
                        MEMORY[0x219A19A08](v350, 0x1012C404EF22A49);
                      }
                    }
                    goto LABEL_1623;
                  case 3:
                    v476 = *(unsigned int ***)&v1072;
                    if (*(_QWORD *)v350 == 1)
                    {
                      v477 = *(double *)&v350;
                    }
                    else
                    {
                      v477 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v477, v350);
                      **(_QWORD **)&v477 = 1;
                      do
                      {
                        v829 = __ldaxr((unint64_t *)v350);
                        v830 = v829 - 1;
                      }
                      while (__stlxr(v830, (unint64_t *)v350));
                      if (!v830)
                      {
                        v831 = *(void **)(v350 + 8);
                        if (v831)
                        {
                          *(_QWORD *)(v350 + 16) = v831;
                          operator delete(v831);
                        }
                        MEMORY[0x219A19A08](v350, 0x1080C409938AC02);
                      }
                    }
                    turi::flexible_type_fail(*(_QWORD *)(*(_QWORD *)&v477 + 16) - *(_QWORD *)(*(_QWORD *)&v477 + 8) == (char *)v476[2] - (char *)v476[1]);
                    v832 = *(double **)(*(_QWORD *)&v477 + 8);
                    v833 = *(_QWORD *)(*(_QWORD *)&v477 + 16) - (_QWORD)v832;
                    if (v833)
                    {
                      v834 = v833 >> 3;
                      v835 = (double *)v476[1];
                      if (v834 <= 1)
                        v834 = 1;
                      do
                      {
                        v836 = *v835++;
                        *v832 = *v832 / v836;
                        ++v832;
                        --v834;
                      }
                      while (v834);
                    }
                    goto LABEL_1527;
                  case 4:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v992 = __ldaxr((unint64_t *)v350);
                        v993 = v992 - 1;
                      }
                      while (__stlxr(v993, (unint64_t *)v350));
                      if (!v993)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 5:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v947 = __ldaxr((unint64_t *)v350);
                        v948 = v947 - 1;
                      }
                      while (__stlxr(v948, (unint64_t *)v350));
                      if (!v948)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 8:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      v1005 = *(_QWORD *)(v350 + 16);
                      *(_QWORD *)(v354 + 8) = *(_QWORD *)(v350 + 8);
                      *(_QWORD *)(v354 + 16) = v1005;
                      if (v1005)
                      {
                        v1006 = (unsigned int *)(v1005 + 8);
                        do
                          v1007 = __ldxr(v1006);
                        while (__stxr(v1007 + 1, v1006));
                      }
                      v1008 = *(_OWORD *)(v350 + 24);
                      v1009 = *(_OWORD *)(v350 + 40);
                      *(_OWORD *)(v354 + 56) = *(_OWORD *)(v350 + 56);
                      *(_OWORD *)(v354 + 40) = v1009;
                      *(_OWORD *)(v354 + 24) = v1008;
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1010 = __ldaxr((unint64_t *)v350);
                        v1011 = v1010 - 1;
                      }
                      while (__stlxr(v1011, (unint64_t *)v350));
                      if (!v1011)
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)(v350 + 16));
                        MEMORY[0x219A19A08](v350, 0x1030C40F1F0227BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 9:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v354 + 8), v350 + 8);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v882 = __ldaxr((unint64_t *)v350);
                        v883 = v882 - 1;
                      }
                      while (__stlxr(v883, (unint64_t *)v350));
                      if (!v883)
                      {
                        v884 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v350);
                        MEMORY[0x219A19A08](v884, 0x1030C407B73B9F7);
                      }
                    }
                    goto LABEL_1623;
                  default:
                    goto LABEL_1628;
                }
              case 4:
                switch(v351)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_495;
                  case 2:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v840 = __ldaxr((unint64_t *)v350);
                        v841 = v840 - 1;
                      }
                      while (__stlxr(v841, (unint64_t *)v350));
                      if (!v841)
                      {
                        if (*(char *)(v350 + 31) < 0)
                          operator delete(*(void **)(v350 + 8));
                        MEMORY[0x219A19A08](v350, 0x1012C404EF22A49);
                      }
                    }
                    goto LABEL_1623;
                  case 3:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v817 = __ldaxr((unint64_t *)v350);
                        v818 = v817 - 1;
                      }
                      while (__stlxr(v818, (unint64_t *)v350));
                      if (!v818)
                      {
                        v819 = *(void **)(v350 + 8);
                        if (v819)
                        {
                          *(_QWORD *)(v350 + 16) = v819;
                          operator delete(v819);
                        }
                        MEMORY[0x219A19A08](v350, 0x1080C409938AC02);
                      }
                    }
                    goto LABEL_1623;
                  case 4:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v933 = __ldaxr((unint64_t *)v350);
                        v934 = v933 - 1;
                      }
                      while (__stlxr(v934, (unint64_t *)v350));
                      if (!v934)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 5:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v872 = __ldaxr((unint64_t *)v350);
                        v873 = v872 - 1;
                      }
                      while (__stlxr(v873, (unint64_t *)v350));
                      if (!v873)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 8:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      v937 = *(_QWORD *)(v350 + 16);
                      *(_QWORD *)(v354 + 8) = *(_QWORD *)(v350 + 8);
                      *(_QWORD *)(v354 + 16) = v937;
                      if (v937)
                      {
                        v938 = (unsigned int *)(v937 + 8);
                        do
                          v939 = __ldxr(v938);
                        while (__stxr(v939 + 1, v938));
                      }
                      v940 = *(_OWORD *)(v350 + 24);
                      v941 = *(_OWORD *)(v350 + 40);
                      *(_OWORD *)(v354 + 56) = *(_OWORD *)(v350 + 56);
                      *(_OWORD *)(v354 + 40) = v941;
                      *(_OWORD *)(v354 + 24) = v940;
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v942 = __ldaxr((unint64_t *)v350);
                        v943 = v942 - 1;
                      }
                      while (__stlxr(v943, (unint64_t *)v350));
                      if (!v943)
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)(v350 + 16));
                        MEMORY[0x219A19A08](v350, 0x1030C40F1F0227BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 9:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v354 + 8), v350 + 8);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v826 = __ldaxr((unint64_t *)v350);
                        v827 = v826 - 1;
                      }
                      while (__stlxr(v827, (unint64_t *)v350));
                      if (!v827)
                      {
                        v828 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v350);
                        MEMORY[0x219A19A08](v828, 0x1030C407B73B9F7);
                      }
                    }
                    goto LABEL_1623;
                  default:
                    goto LABEL_1628;
                }
              case 5:
                switch(v351)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_495;
                  case 2:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v956 = __ldaxr((unint64_t *)v350);
                        v957 = v956 - 1;
                      }
                      while (__stlxr(v957, (unint64_t *)v350));
                      if (!v957)
                      {
                        if (*(char *)(v350 + 31) < 0)
                          operator delete(*(void **)(v350 + 8));
                        MEMORY[0x219A19A08](v350, 0x1012C404EF22A49);
                      }
                    }
                    goto LABEL_1623;
                  case 3:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v874 = __ldaxr((unint64_t *)v350);
                        v875 = v874 - 1;
                      }
                      while (__stlxr(v875, (unint64_t *)v350));
                      if (!v875)
                      {
                        v876 = *(void **)(v350 + 8);
                        if (v876)
                        {
                          *(_QWORD *)(v350 + 16) = v876;
                          operator delete(v876);
                        }
                        MEMORY[0x219A19A08](v350, 0x1080C409938AC02);
                      }
                    }
                    goto LABEL_1623;
                  case 4:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1039 = __ldaxr((unint64_t *)v350);
                        v1040 = v1039 - 1;
                      }
                      while (__stlxr(v1040, (unint64_t *)v350));
                      if (!v1040)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 5:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v990 = __ldaxr((unint64_t *)v350);
                        v991 = v990 - 1;
                      }
                      while (__stlxr(v991, (unint64_t *)v350));
                      if (!v991)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 8:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      v1041 = *(_QWORD *)(v350 + 16);
                      *(_QWORD *)(v354 + 8) = *(_QWORD *)(v350 + 8);
                      *(_QWORD *)(v354 + 16) = v1041;
                      if (v1041)
                      {
                        v1042 = (unsigned int *)(v1041 + 8);
                        do
                          v1043 = __ldxr(v1042);
                        while (__stxr(v1043 + 1, v1042));
                      }
                      v1044 = *(_OWORD *)(v350 + 24);
                      v1045 = *(_OWORD *)(v350 + 40);
                      *(_OWORD *)(v354 + 56) = *(_OWORD *)(v350 + 56);
                      *(_OWORD *)(v354 + 40) = v1045;
                      *(_OWORD *)(v354 + 24) = v1044;
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1046 = __ldaxr((unint64_t *)v350);
                        v1047 = v1046 - 1;
                      }
                      while (__stlxr(v1047, (unint64_t *)v350));
                      if (!v1047)
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)(v350 + 16));
                        MEMORY[0x219A19A08](v350, 0x1030C40F1F0227BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 9:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v354 + 8), v350 + 8);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v944 = __ldaxr((unint64_t *)v350);
                        v945 = v944 - 1;
                      }
                      while (__stlxr(v945, (unint64_t *)v350));
                      if (!v945)
                      {
                        v946 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v350);
                        MEMORY[0x219A19A08](v946, 0x1030C407B73B9F7);
                      }
                    }
                    goto LABEL_1623;
                  default:
                    goto LABEL_1628;
                }
              case 6:
                switch(v351)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_495;
                  case 2:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v977 = __ldaxr((unint64_t *)v350);
                        v978 = v977 - 1;
                      }
                      while (__stlxr(v978, (unint64_t *)v350));
                      if (!v978)
                      {
                        if (*(char *)(v350 + 31) < 0)
                          operator delete(*(void **)(v350 + 8));
                        MEMORY[0x219A19A08](v350, 0x1012C404EF22A49);
                      }
                    }
                    goto LABEL_1623;
                  case 3:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v879 = __ldaxr((unint64_t *)v350);
                        v880 = v879 - 1;
                      }
                      while (__stlxr(v880, (unint64_t *)v350));
                      if (!v880)
                      {
                        v881 = *(void **)(v350 + 8);
                        if (v881)
                        {
                          *(_QWORD *)(v350 + 16) = v881;
                          operator delete(v881);
                        }
                        MEMORY[0x219A19A08](v350, 0x1080C409938AC02);
                      }
                    }
                    goto LABEL_1623;
                  case 4:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1048 = __ldaxr((unint64_t *)v350);
                        v1049 = v1048 - 1;
                      }
                      while (__stlxr(v1049, (unint64_t *)v350));
                      if (!v1049)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 5:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1003 = __ldaxr((unint64_t *)v350);
                        v1004 = v1003 - 1;
                      }
                      while (__stlxr(v1004, (unint64_t *)v350));
                      if (!v1004)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 8:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      v1050 = *(_QWORD *)(v350 + 16);
                      *(_QWORD *)(v354 + 8) = *(_QWORD *)(v350 + 8);
                      *(_QWORD *)(v354 + 16) = v1050;
                      if (v1050)
                      {
                        v1051 = (unsigned int *)(v1050 + 8);
                        do
                          v1052 = __ldxr(v1051);
                        while (__stxr(v1052 + 1, v1051));
                      }
                      v1053 = *(_OWORD *)(v350 + 24);
                      v1054 = *(_OWORD *)(v350 + 40);
                      *(_OWORD *)(v354 + 56) = *(_OWORD *)(v350 + 56);
                      *(_OWORD *)(v354 + 40) = v1054;
                      *(_OWORD *)(v354 + 24) = v1053;
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1055 = __ldaxr((unint64_t *)v350);
                        v1056 = v1055 - 1;
                      }
                      while (__stlxr(v1056, (unint64_t *)v350));
                      if (!v1056)
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)(v350 + 16));
                        MEMORY[0x219A19A08](v350, 0x1030C40F1F0227BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 9:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v354 + 8), v350 + 8);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v953 = __ldaxr((unint64_t *)v350);
                        v954 = v953 - 1;
                      }
                      while (__stlxr(v954, (unint64_t *)v350));
                      if (!v954)
                      {
                        v955 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v350);
                        MEMORY[0x219A19A08](v955, 0x1030C407B73B9F7);
                      }
                    }
                    goto LABEL_1623;
                  default:
                    goto LABEL_1628;
                }
              case 7:
                switch(v351)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_495;
                  case 2:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v929 = __ldaxr((unint64_t *)v350);
                        v930 = v929 - 1;
                      }
                      while (__stlxr(v930, (unint64_t *)v350));
                      if (!v930)
                      {
                        if (*(char *)(v350 + 31) < 0)
                          operator delete(*(void **)(v350 + 8));
                        MEMORY[0x219A19A08](v350, 0x1012C404EF22A49);
                      }
                    }
                    goto LABEL_1623;
                  case 3:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v837 = __ldaxr((unint64_t *)v350);
                        v838 = v837 - 1;
                      }
                      while (__stlxr(v838, (unint64_t *)v350));
                      if (!v838)
                      {
                        v839 = *(void **)(v350 + 8);
                        if (v839)
                        {
                          *(_QWORD *)(v350 + 16) = v839;
                          operator delete(v839);
                        }
                        MEMORY[0x219A19A08](v350, 0x1080C409938AC02);
                      }
                    }
                    goto LABEL_1623;
                  case 4:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1001 = __ldaxr((unint64_t *)v350);
                        v1002 = v1001 - 1;
                      }
                      while (__stlxr(v1002, (unint64_t *)v350));
                      if (!v1002)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 5:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v949 = __ldaxr((unint64_t *)v350);
                        v950 = v949 - 1;
                      }
                      while (__stlxr(v950, (unint64_t *)v350));
                      if (!v950)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 8:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      v1012 = *(_QWORD *)(v350 + 16);
                      *(_QWORD *)(v354 + 8) = *(_QWORD *)(v350 + 8);
                      *(_QWORD *)(v354 + 16) = v1012;
                      if (v1012)
                      {
                        v1013 = (unsigned int *)(v1012 + 8);
                        do
                          v1014 = __ldxr(v1013);
                        while (__stxr(v1014 + 1, v1013));
                      }
                      v1015 = *(_OWORD *)(v350 + 24);
                      v1016 = *(_OWORD *)(v350 + 40);
                      *(_OWORD *)(v354 + 56) = *(_OWORD *)(v350 + 56);
                      *(_OWORD *)(v354 + 40) = v1016;
                      *(_OWORD *)(v354 + 24) = v1015;
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1017 = __ldaxr((unint64_t *)v350);
                        v1018 = v1017 - 1;
                      }
                      while (__stlxr(v1018, (unint64_t *)v350));
                      if (!v1018)
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)(v350 + 16));
                        MEMORY[0x219A19A08](v350, 0x1030C40F1F0227BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 9:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v354 + 8), v350 + 8);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v892 = __ldaxr((unint64_t *)v350);
                        v893 = v892 - 1;
                      }
                      while (__stlxr(v893, (unint64_t *)v350));
                      if (!v893)
                      {
                        v894 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v350);
                        MEMORY[0x219A19A08](v894, 0x1030C407B73B9F7);
                      }
                    }
                    goto LABEL_1623;
                  default:
                    goto LABEL_1628;
                }
              case 8:
                switch(v351)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_495;
                  case 2:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v979 = __ldaxr((unint64_t *)v350);
                        v980 = v979 - 1;
                      }
                      while (__stlxr(v980, (unint64_t *)v350));
                      if (!v980)
                      {
                        if (*(char *)(v350 + 31) < 0)
                          operator delete(*(void **)(v350 + 8));
                        MEMORY[0x219A19A08](v350, 0x1012C404EF22A49);
                      }
                    }
                    goto LABEL_1623;
                  case 3:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v887 = __ldaxr((unint64_t *)v350);
                        v888 = v887 - 1;
                      }
                      while (__stlxr(v888, (unint64_t *)v350));
                      if (!v888)
                      {
                        v889 = *(void **)(v350 + 8);
                        if (v889)
                        {
                          *(_QWORD *)(v350 + 16) = v889;
                          operator delete(v889);
                        }
                        MEMORY[0x219A19A08](v350, 0x1080C409938AC02);
                      }
                    }
                    goto LABEL_1623;
                  case 4:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1057 = __ldaxr((unint64_t *)v350);
                        v1058 = v1057 - 1;
                      }
                      while (__stlxr(v1058, (unint64_t *)v350));
                      if (!v1058)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 5:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1019 = __ldaxr((unint64_t *)v350);
                        v1020 = v1019 - 1;
                      }
                      while (__stlxr(v1020, (unint64_t *)v350));
                      if (!v1020)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 8:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      v1059 = *(_QWORD *)(v350 + 16);
                      *(_QWORD *)(v354 + 8) = *(_QWORD *)(v350 + 8);
                      *(_QWORD *)(v354 + 16) = v1059;
                      if (v1059)
                      {
                        v1060 = (unsigned int *)(v1059 + 8);
                        do
                          v1061 = __ldxr(v1060);
                        while (__stxr(v1061 + 1, v1060));
                      }
                      v1062 = *(_OWORD *)(v350 + 24);
                      v1063 = *(_OWORD *)(v350 + 40);
                      *(_OWORD *)(v354 + 56) = *(_OWORD *)(v350 + 56);
                      *(_OWORD *)(v354 + 40) = v1063;
                      *(_OWORD *)(v354 + 24) = v1062;
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v1064 = __ldaxr((unint64_t *)v350);
                        v1065 = v1064 - 1;
                      }
                      while (__stlxr(v1065, (unint64_t *)v350));
                      if (!v1065)
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)(v350 + 16));
                        MEMORY[0x219A19A08](v350, 0x1030C40F1F0227BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 9:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v354 + 8), v350 + 8);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v967 = __ldaxr((unint64_t *)v350);
                        v968 = v967 - 1;
                      }
                      while (__stlxr(v968, (unint64_t *)v350));
                      if (!v968)
                      {
                        v969 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v350);
                        MEMORY[0x219A19A08](v969, 0x1030C407B73B9F7);
                      }
                    }
                    goto LABEL_1623;
                  default:
                    goto LABEL_1628;
                }
              case 9:
                switch(v351)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
LABEL_495:
                    turi::flexible_type_fail(0);
                    goto LABEL_496;
                  case 2:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v865 = __ldaxr((unint64_t *)v350);
                        v866 = v865 - 1;
                      }
                      while (__stlxr(v866, (unint64_t *)v350));
                      if (!v866)
                      {
                        if (*(char *)(v350 + 31) < 0)
                          operator delete(*(void **)(v350 + 8));
                        MEMORY[0x219A19A08](v350, 0x1012C404EF22A49);
                      }
                    }
                    goto LABEL_1623;
                  case 3:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v820 = __ldaxr((unint64_t *)v350);
                        v821 = v820 - 1;
                      }
                      while (__stlxr(v821, (unint64_t *)v350));
                      if (!v821)
                      {
                        v822 = *(void **)(v350 + 8);
                        if (v822)
                        {
                          *(_QWORD *)(v350 + 16) = v822;
                          operator delete(v822);
                        }
                        MEMORY[0x219A19A08](v350, 0x1080C409938AC02);
                      }
                    }
                    goto LABEL_1623;
                  case 4:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v951 = __ldaxr((unint64_t *)v350);
                        v952 = v951 - 1;
                      }
                      while (__stlxr(v952, (unint64_t *)v350));
                      if (!v952)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 5:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v354, v350);
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v890 = __ldaxr((unint64_t *)v350);
                        v891 = v890 - 1;
                      }
                      while (__stlxr(v891, (unint64_t *)v350));
                      if (!v891)
                      {
                        __p = (void *)(v350 + 8);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        MEMORY[0x219A19A08](v350, 0x1020C405E66F15BLL);
                      }
                    }
                    goto LABEL_1623;
                  case 8:
                    if (*(_QWORD *)v350 == 1)
                    {
                      v354 = v350;
                    }
                    else
                    {
                      *(double *)&v354 = COERCE_DOUBLE(operator new());
                      *(_QWORD *)v354 = *(_QWORD *)v350;
                      v960 = *(_QWORD *)(v350 + 16);
                      *(_QWORD *)(v354 + 8) = *(_QWORD *)(v350 + 8);
                      *(_QWORD *)(v354 + 16) = v960;
                      if (v960)
                      {
                        v961 = (unsigned int *)(v960 + 8);
                        do
                          v962 = __ldxr(v961);
                        while (__stxr(v962 + 1, v961));
                      }
                      v963 = *(_OWORD *)(v350 + 24);
                      v964 = *(_OWORD *)(v350 + 40);
                      *(_OWORD *)(v354 + 56) = *(_OWORD *)(v350 + 56);
                      *(_OWORD *)(v354 + 40) = v964;
                      *(_OWORD *)(v354 + 24) = v963;
                      *(_QWORD *)v354 = 1;
                      do
                      {
                        v965 = __ldaxr((unint64_t *)v350);
                        v966 = v965 - 1;
                      }
                      while (__stlxr(v966, (unint64_t *)v350));
                      if (!v966)
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)(v350 + 16));
                        MEMORY[0x219A19A08](v350, 0x1030C40F1F0227BLL);
                      }
                    }
LABEL_1623:
                    v350 = v354;
                    turi::flexible_type_fail(0);
                    goto LABEL_496;
                  case 9:
                    v478 = *(unsigned int ***)&v1072;
                    if (*(_QWORD *)v350 == 1)
                    {
                      v477 = *(double *)&v350;
                    }
                    else
                    {
                      v477 = COERCE_DOUBLE(operator new());
                      **(_QWORD **)&v477 = *(_QWORD *)v350;
                      turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v477 + 8), v350 + 8);
                      **(_QWORD **)&v477 = 1;
                      do
                      {
                        v842 = __ldaxr((unint64_t *)v350);
                        v843 = v842 - 1;
                      }
                      while (__stlxr(v843, (unint64_t *)v350));
                      if (!v843)
                      {
                        v844 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v350);
                        MEMORY[0x219A19A08](v844, 0x1030C407B73B9F7);
                      }
                    }
                    if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v477 + 8, (uint64_t)(v478 + 1)))
                      turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                    v846 = *(uint64_t **)(*(_QWORD *)&v477 + 24);
                    v845 = *(uint64_t **)(*(_QWORD *)&v477 + 32);
                    if (v845 == v846)
                      goto LABEL_1527;
                    if (!*(_QWORD *)(*(_QWORD *)&v477 + 8))
                      goto LABEL_1527;
                    v847 = 1;
                    do
                    {
                      v848 = *v846++;
                      v847 *= v848;
                    }
                    while (v846 != v845);
                    if (!v847)
                      goto LABEL_1527;
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v477 + 8));
                    v849 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v477 + 32) - *(_QWORD *)(*(_QWORD *)&v477 + 24)) >> 3;
                    v1067 = 0;
                    std::vector<unsigned long>::vector(&__p, v849, &v1067);
                    do
                    {
                      v850 = (uint64_t *)__p;
                      if (v1069 == __p)
                      {
                        v859 = 0;
                        v860 = *(double *)(*(_QWORD *)v478[1] + 8 * (_QWORD)v478[9]);
                      }
                      else
                      {
                        v851 = 0;
                        v852 = (v1069 - (_BYTE *)__p) >> 3;
                        v853 = v478[6];
                        if (v852 <= 1)
                          v852 = 1;
                        v854 = (uint64_t *)__p;
                        v855 = v852;
                        do
                        {
                          v857 = *v854++;
                          v856 = v857;
                          v858 = *(_QWORD *)v853;
                          v853 += 2;
                          v851 += v858 * v856;
                          --v855;
                        }
                        while (v855);
                        v859 = 0;
                        v860 = *(double *)(*(_QWORD *)v478[1] + 8 * ((_QWORD)v478[9] + v851));
                        v861 = *(uint64_t **)(*(_QWORD *)&v477 + 48);
                        do
                        {
                          v863 = *v850++;
                          v862 = v863;
                          v864 = *v861++;
                          v859 += v864 * v862;
                          --v852;
                        }
                        while (v852);
                      }
                      turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v477 + 8));
                      *(double *)(**(_QWORD **)(*(_QWORD *)&v477 + 8)
                                + 8 * (*(_QWORD *)(*(_QWORD *)&v477 + 72) + v859)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v477 + 8)
                                                                                                 + 8
                                                                                                 * (*(_QWORD *)(*(_QWORD *)&v477 + 72)
                                                                                                  + v859))
                                                                                     / v860;
                    }
                    while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(_QWORD *)&v477 + 8, (uint64_t *)&__p));
                    break;
                  default:
                    goto LABEL_1628;
                }
LABEL_1385:
                if (__p)
                {
                  v1069 = __p;
                  operator delete(__p);
                }
LABEL_1527:
                *(double *)&v350 = v477;
LABEL_496:
                switch(v1074)
                {
                  case 2:
                    v355 = *(unint64_t **)&v1072;
                    do
                    {
                      v356 = __ldaxr(v355);
                      v357 = v356 - 1;
                    }
                    while (__stlxr(v357, v355));
                    if (v357)
                      goto LABEL_534;
                    v358 = *(unsigned int ***)&v1072;
                    if (v1072 == 0.0)
                      goto LABEL_534;
                    if (*(char *)(*(_QWORD *)&v1072 + 31) < 0)
                      operator delete(*(void **)(*(_QWORD *)&v1072 + 8));
                    v359 = v358;
                    v360 = 0x1012C404EF22A49;
                    goto LABEL_533;
                  case 3:
                    v369 = *(unint64_t **)&v1072;
                    do
                    {
                      v370 = __ldaxr(v369);
                      v371 = v370 - 1;
                    }
                    while (__stlxr(v371, v369));
                    if (v371)
                      goto LABEL_534;
                    v372 = *(unsigned int ***)&v1072;
                    if (v1072 == 0.0)
                      goto LABEL_534;
                    v373 = *(unsigned int **)(*(_QWORD *)&v1072 + 8);
                    if (v373)
                    {
                      *(_QWORD *)(*(_QWORD *)&v1072 + 16) = v373;
                      operator delete(v373);
                    }
                    v359 = v372;
                    v360 = 0x1080C409938AC02;
                    goto LABEL_533;
                  case 4:
                    v361 = *(unint64_t **)&v1072;
                    do
                    {
                      v362 = __ldaxr(v361);
                      v363 = v362 - 1;
                    }
                    while (__stlxr(v363, v361));
                    if (v363)
                      goto LABEL_534;
                    v364 = *(unsigned int ***)&v1072;
                    if (v1072 == 0.0)
                      goto LABEL_534;
                    __p = (void *)(*(_QWORD *)&v1072 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                    goto LABEL_526;
                  case 5:
                    v374 = *(unint64_t **)&v1072;
                    do
                    {
                      v375 = __ldaxr(v374);
                      v376 = v375 - 1;
                    }
                    while (__stlxr(v376, v374));
                    if (v376)
                      goto LABEL_534;
                    v364 = *(unsigned int ***)&v1072;
                    if (v1072 == 0.0)
                      goto LABEL_534;
                    __p = (void *)(*(_QWORD *)&v1072 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_526:
                    v359 = v364;
                    v360 = 0x1020C405E66F15BLL;
                    goto LABEL_533;
                  case 8:
                    v377 = *(unint64_t **)&v1072;
                    do
                    {
                      v378 = __ldaxr(v377);
                      v379 = v378 - 1;
                    }
                    while (__stlxr(v379, v377));
                    if (v379)
                      goto LABEL_534;
                    v380 = *(unsigned int ***)&v1072;
                    if (v1072 == 0.0)
                      goto LABEL_534;
                    boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v1072 + 16));
                    v359 = v380;
                    v368 = -235920773;
                    goto LABEL_532;
                  case 9:
                    v365 = *(unint64_t **)&v1072;
                    do
                    {
                      v366 = __ldaxr(v365);
                      v367 = v366 - 1;
                    }
                    while (__stlxr(v367, v365));
                    if (v367 || v1072 == 0.0)
                      goto LABEL_534;
                    v359 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v1072);
                    v368 = 2071181815;
LABEL_532:
                    v360 = v368 | 0x1030C4000000000;
LABEL_533:
                    MEMORY[0x219A19A08](v359, v360);
LABEL_534:
                    switch(v351)
                    {
                      case 0:
                        goto LABEL_535;
                      case 1:
                        switch(*((_BYTE *)this + 20))
                        {
                          case 0:
                            v381 = (uint64_t)(*(double *)&v350 + (double)*(uint64_t *)v15);
LABEL_641:
                            *(_QWORD *)v15 = v381;
                            goto LABEL_1164;
                          case 1:
                            v458 = *(double *)&v350;
LABEL_1003:
                            *v15 = *v15 + v458;
                            goto LABEL_1164;
                          case 2:
                            v407 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v654 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v654, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v654;
                            *v654 = 1;
                            do
                            {
                              v655 = __ldaxr(*(unint64_t **)&v407);
                              v410 = --v655 == 0;
                            }
                            while (__stlxr(v655, *(unint64_t **)&v407));
                            goto LABEL_972;
                          case 3:
                            v561 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 != 1)
                            {
                              v562 = (_QWORD *)operator new();
                              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v562, *(_QWORD *)v15);
                              *(_QWORD *)v15 = v562;
                              *v562 = 1;
                              do
                              {
                                v563 = __ldaxr(v561);
                                v564 = v563 - 1;
                              }
                              while (__stlxr(v564, v561));
                              if (!v564)
                              {
                                v565 = (void *)v561[1];
                                if (v565)
                                {
                                  v561[2] = (unint64_t)v565;
                                  operator delete(v565);
                                }
                                MEMORY[0x219A19A08](v561, 0x1080C409938AC02);
                              }
                            }
                            v566 = *(double **)(*(_QWORD *)v15 + 8);
                            v567 = *(_QWORD *)(*(_QWORD *)v15 + 16) - (_QWORD)v566;
                            if (!v567)
                              goto LABEL_1164;
                            v568 = v567 >> 3;
                            if (v568 <= 1)
                              v568 = 1;
                            do
                            {
                              *v566 = *v566 + *(double *)&v350;
                              ++v566;
                              --v568;
                            }
                            while (v568);
                            goto LABEL_914;
                          case 4:
                            v643 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v704 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v704, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v704;
                            *v704 = 1;
                            do
                            {
                              v705 = __ldaxr(v643);
                              v706 = --v705 == 0;
                            }
                            while (__stlxr(v705, v643));
                            goto LABEL_1123;
                          case 5:
                            v643 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v739 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v739, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v739;
                            *v739 = 1;
                            do
                            {
                              v740 = __ldaxr(v643);
                              v646 = --v740 == 0;
                            }
                            while (__stlxr(v740, v643));
                            goto LABEL_1086;
                          case 6:
                            v656 = *((_QWORD *)this + 1);
                            v657 = v656 + vcvtmd_s64_f64(*(double *)&v350);
                            *((_QWORD *)this + 1) = v656 & 0xFF00000000000000 | v657 & 0xFFFFFFFFFFFFFFLL;
                            v658 = (uint64_t)((*(double *)&v350 - (double)(uint64_t)floor(*(double *)&v350)) * 1000000.0)
                                 + *((int *)this + 4);
                            if (v658 > 999999)
                            {
                              *(_QWORD *)v15 = (v657 + 1) & 0xFFFFFFFFFFFFFFLL | v656 & 0xFF00000000000000;
                              LODWORD(v658) = v658 - 1000000;
                            }
                            if (v658 > 0xF423F)
                              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                            *((_DWORD *)this + 4) = v658;
                            goto LABEL_1164;
                          case 7:
                            goto LABEL_663;
                          case 8:
                            v725 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v741 = operator new();
                            v742 = *v15;
                            *(_QWORD *)v741 = **(_QWORD **)v15;
                            *(_QWORD *)(v741 + 8) = *(_QWORD *)(*(_QWORD *)&v742 + 8);
                            v743 = *(_QWORD *)(*(_QWORD *)&v742 + 16);
                            *(_QWORD *)(v741 + 16) = v743;
                            if (v743)
                            {
                              v744 = (unsigned int *)(v743 + 8);
                              do
                                v745 = __ldxr(v744);
                              while (__stxr(v745 + 1, v744));
                            }
                            v746 = *(_OWORD *)(*(_QWORD *)&v742 + 24);
                            v747 = *(_OWORD *)(*(_QWORD *)&v742 + 40);
                            *(_OWORD *)(v741 + 56) = *(_OWORD *)(*(_QWORD *)&v742 + 56);
                            *(_OWORD *)(v741 + 40) = v747;
                            *(_OWORD *)(v741 + 24) = v746;
                            *(_QWORD *)v15 = v741;
                            *(_QWORD *)v741 = 1;
                            do
                            {
                              v748 = __ldaxr(*(unint64_t **)&v725);
                              v734 = --v748 == 0;
                            }
                            while (__stlxr(v748, *(unint64_t **)&v725));
                            goto LABEL_1133;
                          case 9:
                            v594 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 != 1)
                            {
                              v595 = (_QWORD *)operator new();
                              v596 = *(_QWORD *)v15 + 8;
                              *v595 = **(_QWORD **)v15;
                              turi::flexible_type_impl::ndarray<double>::ndarray(v595 + 1, v596);
                              *(_QWORD *)v15 = v595;
                              *v595 = 1;
                              do
                              {
                                v597 = __ldaxr(v594);
                                v598 = v597 - 1;
                              }
                              while (__stlxr(v598, v594));
                              if (!v598)
                              {
                                v599 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v594);
                                MEMORY[0x219A19A08](v599, 0x1030C407B73B9F7);
                              }
                            }
                            v600 = *(uint64_t **)v15;
                            v602 = *(uint64_t **)(*(_QWORD *)v15 + 24);
                            v601 = *(uint64_t **)(*(_QWORD *)v15 + 32);
                            if (v601 == v602 || !v600[1])
                              goto LABEL_1164;
                            v603 = 1;
                            do
                            {
                              v604 = *v602++;
                              v603 *= v604;
                            }
                            while (v602 != v601);
                            if (!v603)
                              goto LABEL_914;
                            turi::flexible_type_impl::ndarray<double>::ensure_unique(v600 + 1);
                            v605 = (v600[4] - v600[3]) >> 3;
                            v1067 = 0;
                            std::vector<unsigned long>::vector(&__p, v605, &v1067);
                            do
                            {
                              v606 = (uint64_t *)__p;
                              v607 = 0;
                              if (v1069 != __p)
                              {
                                v608 = (v1069 - (_BYTE *)__p) >> 3;
                                v609 = (uint64_t *)v600[6];
                                if (v608 <= 1)
                                  v608 = 1;
                                do
                                {
                                  v611 = *v606++;
                                  v610 = v611;
                                  v612 = *v609++;
                                  v607 += v612 * v610;
                                  --v608;
                                }
                                while (v608);
                              }
                              turi::flexible_type_impl::ndarray<double>::ensure_unique(v600 + 1);
                              *(double *)(*(_QWORD *)v600[1] + 8 * (v600[9] + v607)) = *(double *)(*(_QWORD *)v600[1]
                                                                                                 + 8 * (v600[9] + v607))
                                                                                     + *(double *)&v350;
                            }
                            while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v600 + 1), (uint64_t *)&__p));
                            break;
                          default:
                            goto LABEL_1628;
                        }
                        goto LABEL_912;
                      case 2:
                        switch(*((_BYTE *)this + 20))
                        {
                          case 0:
                          case 1:
                          case 6:
                          case 7:
                            goto LABEL_1020;
                          case 2:
                            v394 = *v15;
                            if (**(_QWORD **)v15 != 1)
                            {
                              v395 = (_QWORD *)operator new();
                              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v395, *(_QWORD *)v15);
                              *(_QWORD *)v15 = v395;
                              *v395 = 1;
                              do
                              {
                                v396 = __ldaxr(*(unint64_t **)&v394);
                                v397 = v396 - 1;
                              }
                              while (__stlxr(v397, *(unint64_t **)&v394));
                              if (!v397)
                              {
                                if (*(char *)(*(_QWORD *)&v394 + 31) < 0)
                                  operator delete(*(void **)(*(_QWORD *)&v394 + 8));
                                MEMORY[0x219A19A08](*(_QWORD *)&v394, 0x1012C404EF22A49);
                              }
                            }
                            v398 = *(char *)(v350 + 31);
                            if (v398 >= 0)
                              v399 = (const std::string::value_type *)(v350 + 8);
                            else
                              v399 = *(const std::string::value_type **)(v350 + 8);
                            if (v398 >= 0)
                              v400 = *(unsigned __int8 *)(v350 + 31);
                            else
                              v400 = *(_QWORD *)(v350 + 16);
                            std::string::append((std::string *)(*(_QWORD *)v15 + 8), v399, v400);
                            goto LABEL_1021;
                          case 3:
                            v490 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1020;
                            v491 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v491, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v491;
                            *v491 = 1;
                            do
                            {
                              v492 = __ldaxr(v490);
                              v493 = v492 - 1;
                            }
                            while (__stlxr(v493, v490));
                            if (v493)
                              goto LABEL_1020;
                            v494 = (void *)v490[1];
                            if (v494)
                            {
                              v490[2] = (unint64_t)v494;
                              operator delete(v494);
                            }
                            v495 = *(double *)&v490;
                            v496 = 0x1080C409938AC02;
                            goto LABEL_1019;
                          case 4:
                            v613 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1020;
                            v680 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v680, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v680;
                            *v680 = 1;
                            do
                            {
                              v681 = __ldaxr(v613);
                              v682 = v681 - 1;
                            }
                            while (__stlxr(v682, v613));
                            if (v682)
                              goto LABEL_1020;
                            __p = v613 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_1009;
                          case 5:
                            v613 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1020;
                            v614 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v614, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v614;
                            *v614 = 1;
                            do
                            {
                              v615 = __ldaxr(v613);
                              v616 = v615 - 1;
                            }
                            while (__stlxr(v616, v613));
                            if (v616)
                              goto LABEL_1020;
                            __p = v613 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_1009:
                            v495 = *(double *)&v613;
                            v496 = 0x1020C405E66F15BLL;
                            goto LABEL_1019;
                          case 8:
                            v683 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1020;
                            v684 = operator new();
                            v685 = *v15;
                            *(_QWORD *)v684 = **(_QWORD **)v15;
                            *(_QWORD *)(v684 + 8) = *(_QWORD *)(*(_QWORD *)&v685 + 8);
                            v686 = *(_QWORD *)(*(_QWORD *)&v685 + 16);
                            *(_QWORD *)(v684 + 16) = v686;
                            if (v686)
                            {
                              v687 = (unsigned int *)(v686 + 8);
                              do
                                v688 = __ldxr(v687);
                              while (__stxr(v688 + 1, v687));
                            }
                            v689 = *(_OWORD *)(*(_QWORD *)&v685 + 24);
                            v690 = *(_OWORD *)(*(_QWORD *)&v685 + 40);
                            *(_OWORD *)(v684 + 56) = *(_OWORD *)(*(_QWORD *)&v685 + 56);
                            *(_OWORD *)(v684 + 40) = v690;
                            *(_OWORD *)(v684 + 24) = v689;
                            *(_QWORD *)v15 = v684;
                            *(_QWORD *)v684 = 1;
                            do
                            {
                              v691 = __ldaxr(*(unint64_t **)&v683);
                              v692 = v691 - 1;
                            }
                            while (__stlxr(v692, *(unint64_t **)&v683));
                            if (v692)
                              goto LABEL_1020;
                            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v683 + 16));
                            v495 = v683;
                            v551 = -235920773;
                            goto LABEL_1018;
                          case 9:
                            v546 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1020;
                            v547 = (_QWORD *)operator new();
                            v548 = *(_QWORD *)v15 + 8;
                            *v547 = **(_QWORD **)v15;
                            turi::flexible_type_impl::ndarray<double>::ndarray(v547 + 1, v548);
                            *(_QWORD *)v15 = v547;
                            *v547 = 1;
                            do
                            {
                              v549 = __ldaxr(v546);
                              v550 = v549 - 1;
                            }
                            while (__stlxr(v550, v546));
                            if (v550)
                              goto LABEL_1020;
                            v495 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v546));
                            v551 = 2071181815;
LABEL_1018:
                            v496 = v551 | 0x1030C4000000000;
LABEL_1019:
                            MEMORY[0x219A19A08](*(_QWORD *)&v495, v496);
LABEL_1020:
                            turi::flexible_type_fail(0);
                            do
                            {
LABEL_1021:
                              v693 = __ldaxr((unint64_t *)v350);
                              v694 = v693 - 1;
                            }
                            while (__stlxr(v694, (unint64_t *)v350));
                            if (v694)
                              v695 = 1;
                            else
                              v695 = v350 == 0;
                            if (v695)
                              goto LABEL_1164;
                            if (*(char *)(v350 + 31) < 0)
                              operator delete(*(void **)(v350 + 8));
                            v672 = (_QWORD *)v350;
                            v696 = 0x1012C404EF22A49;
                            break;
                          default:
                            goto LABEL_1628;
                        }
                        goto LABEL_1163;
                      case 3:
                        switch(*((_BYTE *)this + 20))
                        {
                          case 0:
                          case 1:
                          case 6:
                          case 7:
                            goto LABEL_1062;
                          case 2:
                            v401 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1062;
                            v402 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v402, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v402;
                            *v402 = 1;
                            do
                            {
                              v403 = __ldaxr(*(unint64_t **)&v401);
                              v404 = v403 - 1;
                            }
                            while (__stlxr(v404, *(unint64_t **)&v401));
                            if (v404)
                              goto LABEL_1062;
                            if (*(char *)(*(_QWORD *)&v401 + 31) < 0)
                              operator delete(*(void **)(*(_QWORD *)&v401 + 8));
                            v405 = v401;
                            v406 = 0x1012C404EF22A49;
                            goto LABEL_1061;
                          case 3:
                            v503 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 != 1)
                            {
                              v504 = (_QWORD *)operator new();
                              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v504, *(_QWORD *)v15);
                              *(_QWORD *)v15 = v504;
                              *v504 = 1;
                              do
                              {
                                v505 = __ldaxr(v503);
                                v506 = v505 - 1;
                              }
                              while (__stlxr(v506, v503));
                              if (!v506)
                              {
                                v507 = (void *)v503[1];
                                if (v507)
                                {
                                  v503[2] = (unint64_t)v507;
                                  operator delete(v507);
                                }
                                MEMORY[0x219A19A08](v503, 0x1080C409938AC02);
                              }
                            }
                            v508 = *v15;
                            turi::flexible_type_fail(*(_QWORD *)(*(_QWORD *)v15 + 16)
                                                   - *(_QWORD *)(*(_QWORD *)v15 + 8) == *(_QWORD *)(v350 + 16)
                                                                                        - *(_QWORD *)(v350 + 8));
                            v509 = *(double **)(*(_QWORD *)&v508 + 8);
                            v510 = *(_QWORD *)(*(_QWORD *)&v508 + 16) - (_QWORD)v509;
                            if (!v510)
                              goto LABEL_1063;
                            v511 = v510 >> 3;
                            v512 = *(double **)(v350 + 8);
                            if (v511 <= 1)
                              v511 = 1;
                            do
                            {
                              v513 = *v512++;
                              *v509 = v513 + *v509;
                              ++v509;
                              --v511;
                            }
                            while (v511);
                            goto LABEL_914;
                          case 4:
                            v639 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1062;
                            v701 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v701, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v701;
                            *v701 = 1;
                            do
                            {
                              v702 = __ldaxr(v639);
                              v703 = v702 - 1;
                            }
                            while (__stlxr(v703, v639));
                            if (v703)
                              goto LABEL_1062;
                            __p = v639 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_1039;
                          case 5:
                            v639 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1062;
                            v640 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v640, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v640;
                            *v640 = 1;
                            do
                            {
                              v641 = __ldaxr(v639);
                              v642 = v641 - 1;
                            }
                            while (__stlxr(v642, v639));
                            if (v642)
                              goto LABEL_1062;
                            __p = v639 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_1039:
                            v405 = *(double *)&v639;
                            v406 = 0x1020C405E66F15BLL;
                            goto LABEL_1061;
                          case 8:
                            v711 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1062;
                            v712 = operator new();
                            v713 = *v15;
                            *(_QWORD *)v712 = **(_QWORD **)v15;
                            *(_QWORD *)(v712 + 8) = *(_QWORD *)(*(_QWORD *)&v713 + 8);
                            v714 = *(_QWORD *)(*(_QWORD *)&v713 + 16);
                            *(_QWORD *)(v712 + 16) = v714;
                            if (v714)
                            {
                              v715 = (unsigned int *)(v714 + 8);
                              do
                                v716 = __ldxr(v715);
                              while (__stxr(v716 + 1, v715));
                            }
                            v717 = *(_OWORD *)(*(_QWORD *)&v713 + 24);
                            v718 = *(_OWORD *)(*(_QWORD *)&v713 + 40);
                            *(_OWORD *)(v712 + 56) = *(_OWORD *)(*(_QWORD *)&v713 + 56);
                            *(_OWORD *)(v712 + 40) = v718;
                            *(_OWORD *)(v712 + 24) = v717;
                            *(_QWORD *)v15 = v712;
                            *(_QWORD *)v712 = 1;
                            do
                            {
                              v719 = __ldaxr(*(unint64_t **)&v711);
                              v720 = v719 - 1;
                            }
                            while (__stlxr(v720, *(unint64_t **)&v711));
                            if (v720)
                              goto LABEL_1062;
                            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v711 + 16));
                            v405 = v711;
                            v579 = -235920773;
                            goto LABEL_1060;
                          case 9:
                            v574 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1062;
                            v575 = (_QWORD *)operator new();
                            v576 = *(_QWORD *)v15 + 8;
                            *v575 = **(_QWORD **)v15;
                            turi::flexible_type_impl::ndarray<double>::ndarray(v575 + 1, v576);
                            *(_QWORD *)v15 = v575;
                            *v575 = 1;
                            do
                            {
                              v577 = __ldaxr(v574);
                              v578 = v577 - 1;
                            }
                            while (__stlxr(v578, v574));
                            if (v578)
                              goto LABEL_1062;
                            v405 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v574));
                            v579 = 2071181815;
LABEL_1060:
                            v406 = v579 | 0x1030C4000000000;
LABEL_1061:
                            MEMORY[0x219A19A08](*(_QWORD *)&v405, v406);
LABEL_1062:
                            turi::flexible_type_fail(0);
                            do
                            {
LABEL_1063:
                              v721 = __ldaxr((unint64_t *)v350);
                              v722 = v721 - 1;
                            }
                            while (__stlxr(v722, (unint64_t *)v350));
                            if (v722)
                              v723 = 1;
                            else
                              v723 = v350 == 0;
                            if (v723)
                              goto LABEL_1164;
                            v724 = *(void **)(v350 + 8);
                            if (v724)
                            {
                              *(_QWORD *)(v350 + 16) = v724;
                              operator delete(v724);
                            }
                            v672 = (_QWORD *)v350;
                            v696 = 0x1080C409938AC02;
                            break;
                          default:
                            goto LABEL_1628;
                        }
                        goto LABEL_1163;
                      case 4:
                        switch(*((_BYTE *)this + 20))
                        {
                          case 0:
                          case 1:
                          case 6:
                          case 7:
                            goto LABEL_936;
                          case 2:
                            v382 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_936;
                            v383 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v383, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v383;
                            *v383 = 1;
                            do
                            {
                              v384 = __ldaxr(*(unint64_t **)&v382);
                              v385 = v384 - 1;
                            }
                            while (__stlxr(v385, *(unint64_t **)&v382));
                            if (v385)
                              goto LABEL_936;
                            if (*(char *)(*(_QWORD *)&v382 + 31) < 0)
                              operator delete(*(void **)(*(_QWORD *)&v382 + 8));
                            v386 = v382;
                            v387 = 0x1012C404EF22A49;
                            goto LABEL_935;
                          case 3:
                            v480 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_936;
                            v481 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v481, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v481;
                            *v481 = 1;
                            do
                            {
                              v482 = __ldaxr(v480);
                              v483 = v482 - 1;
                            }
                            while (__stlxr(v483, v480));
                            if (v483)
                              goto LABEL_936;
                            v484 = (void *)v480[1];
                            if (v484)
                            {
                              v480[2] = (unint64_t)v484;
                              operator delete(v484);
                            }
                            v386 = *(double *)&v480;
                            v387 = 0x1080C409938AC02;
                            goto LABEL_935;
                          case 4:
                            v552 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_936;
                            v617 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v617, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v617;
                            *v617 = 1;
                            do
                            {
                              v618 = __ldaxr(v552);
                              v619 = v618 - 1;
                            }
                            while (__stlxr(v619, v552));
                            if (v619)
                              goto LABEL_936;
                            __p = v552 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_925;
                          case 5:
                            v552 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_936;
                            v553 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v553, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v553;
                            *v553 = 1;
                            do
                            {
                              v554 = __ldaxr(v552);
                              v555 = v554 - 1;
                            }
                            while (__stlxr(v555, v552));
                            if (v555)
                              goto LABEL_936;
                            __p = v552 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_925:
                            v386 = *(double *)&v552;
                            v387 = 0x1020C405E66F15BLL;
                            goto LABEL_935;
                          case 8:
                            v620 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_936;
                            v621 = operator new();
                            v622 = *v15;
                            *(_QWORD *)v621 = **(_QWORD **)v15;
                            *(_QWORD *)(v621 + 8) = *(_QWORD *)(*(_QWORD *)&v622 + 8);
                            v623 = *(_QWORD *)(*(_QWORD *)&v622 + 16);
                            *(_QWORD *)(v621 + 16) = v623;
                            if (v623)
                            {
                              v624 = (unsigned int *)(v623 + 8);
                              do
                                v625 = __ldxr(v624);
                              while (__stxr(v625 + 1, v624));
                            }
                            v626 = *(_OWORD *)(*(_QWORD *)&v622 + 24);
                            v627 = *(_OWORD *)(*(_QWORD *)&v622 + 40);
                            *(_OWORD *)(v621 + 56) = *(_OWORD *)(*(_QWORD *)&v622 + 56);
                            *(_OWORD *)(v621 + 40) = v627;
                            *(_OWORD *)(v621 + 24) = v626;
                            *(_QWORD *)v15 = v621;
                            *(_QWORD *)v621 = 1;
                            do
                            {
                              v628 = __ldaxr(*(unint64_t **)&v620);
                              v629 = v628 - 1;
                            }
                            while (__stlxr(v629, *(unint64_t **)&v620));
                            if (v629)
                              goto LABEL_936;
                            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v620 + 16));
                            v386 = v620;
                            v502 = -235920773;
                            goto LABEL_934;
                          case 9:
                            v497 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_936;
                            v498 = (_QWORD *)operator new();
                            v499 = *(_QWORD *)v15 + 8;
                            *v498 = **(_QWORD **)v15;
                            turi::flexible_type_impl::ndarray<double>::ndarray(v498 + 1, v499);
                            *(_QWORD *)v15 = v498;
                            *v498 = 1;
                            do
                            {
                              v500 = __ldaxr(v497);
                              v501 = v500 - 1;
                            }
                            while (__stlxr(v501, v497));
                            if (v501)
                              goto LABEL_936;
                            v386 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v497));
                            v502 = 2071181815;
LABEL_934:
                            v387 = v502 | 0x1030C4000000000;
LABEL_935:
                            MEMORY[0x219A19A08](*(_QWORD *)&v386, v387);
LABEL_936:
                            turi::flexible_type_fail(0);
                            do
                            {
LABEL_937:
                              v630 = __ldaxr((unint64_t *)v350);
                              v631 = v630 - 1;
                            }
                            while (__stlxr(v631, (unint64_t *)v350));
                            if (v631)
                              v632 = 1;
                            else
                              v632 = v350 == 0;
                            if (v632)
                              goto LABEL_1164;
                            __p = (void *)(v350 + 8);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            break;
                          default:
                            goto LABEL_1628;
                        }
                        goto LABEL_1119;
                      case 5:
                        switch(*((_BYTE *)this + 20))
                        {
                          case 0:
                          case 1:
                          case 6:
                          case 7:
                            goto LABEL_1112;
                          case 2:
                            v411 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1112;
                            v412 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v412, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v412;
                            *v412 = 1;
                            do
                            {
                              v413 = __ldaxr(*(unint64_t **)&v411);
                              v414 = v413 - 1;
                            }
                            while (__stlxr(v414, *(unint64_t **)&v411));
                            if (v414)
                              goto LABEL_1112;
                            if (*(char *)(*(_QWORD *)&v411 + 31) < 0)
                              operator delete(*(void **)(*(_QWORD *)&v411 + 8));
                            v415 = v411;
                            v416 = 0x1012C404EF22A49;
                            goto LABEL_1111;
                          case 3:
                            v556 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1112;
                            v557 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v557, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v557;
                            *v557 = 1;
                            do
                            {
                              v558 = __ldaxr(v556);
                              v559 = v558 - 1;
                            }
                            while (__stlxr(v559, v556));
                            if (v559)
                              goto LABEL_1112;
                            v560 = (void *)v556[1];
                            if (v560)
                            {
                              v556[2] = (unint64_t)v560;
                              operator delete(v560);
                            }
                            v415 = *(double *)&v556;
                            v416 = 0x1080C409938AC02;
                            goto LABEL_1111;
                          case 4:
                            v697 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1112;
                            v749 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v749, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v749;
                            *v749 = 1;
                            do
                            {
                              v750 = __ldaxr(v697);
                              v751 = v750 - 1;
                            }
                            while (__stlxr(v751, v697));
                            if (v751)
                              goto LABEL_1112;
                            __p = v697 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_1101;
                          case 5:
                            v697 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1112;
                            v698 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v698, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v698;
                            *v698 = 1;
                            do
                            {
                              v699 = __ldaxr(v697);
                              v700 = v699 - 1;
                            }
                            while (__stlxr(v700, v697));
                            if (v700)
                              goto LABEL_1112;
                            __p = v697 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_1101:
                            v415 = *(double *)&v697;
                            v416 = 0x1020C405E66F15BLL;
                            goto LABEL_1111;
                          case 8:
                            v752 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1112;
                            v753 = operator new();
                            v754 = *v15;
                            *(_QWORD *)v753 = **(_QWORD **)v15;
                            *(_QWORD *)(v753 + 8) = *(_QWORD *)(*(_QWORD *)&v754 + 8);
                            v755 = *(_QWORD *)(*(_QWORD *)&v754 + 16);
                            *(_QWORD *)(v753 + 16) = v755;
                            if (v755)
                            {
                              v756 = (unsigned int *)(v755 + 8);
                              do
                                v757 = __ldxr(v756);
                              while (__stxr(v757 + 1, v756));
                            }
                            v758 = *(_OWORD *)(*(_QWORD *)&v754 + 24);
                            v759 = *(_OWORD *)(*(_QWORD *)&v754 + 40);
                            *(_OWORD *)(v753 + 56) = *(_OWORD *)(*(_QWORD *)&v754 + 56);
                            *(_OWORD *)(v753 + 40) = v759;
                            *(_OWORD *)(v753 + 24) = v758;
                            *(_QWORD *)v15 = v753;
                            *(_QWORD *)v753 = 1;
                            do
                            {
                              v760 = __ldaxr(*(unint64_t **)&v752);
                              v761 = v760 - 1;
                            }
                            while (__stlxr(v761, *(unint64_t **)&v752));
                            if (v761)
                              goto LABEL_1112;
                            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v752 + 16));
                            v415 = v752;
                            v638 = -235920773;
                            goto LABEL_1110;
                          case 9:
                            v633 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1112;
                            v634 = (_QWORD *)operator new();
                            v635 = *(_QWORD *)v15 + 8;
                            *v634 = **(_QWORD **)v15;
                            turi::flexible_type_impl::ndarray<double>::ndarray(v634 + 1, v635);
                            *(_QWORD *)v15 = v634;
                            *v634 = 1;
                            do
                            {
                              v636 = __ldaxr(v633);
                              v637 = v636 - 1;
                            }
                            while (__stlxr(v637, v633));
                            if (v637)
                              goto LABEL_1112;
                            v415 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v633));
                            v638 = 2071181815;
LABEL_1110:
                            v416 = v638 | 0x1030C4000000000;
LABEL_1111:
                            MEMORY[0x219A19A08](*(_QWORD *)&v415, v416);
LABEL_1112:
                            turi::flexible_type_fail(0);
                            do
                            {
LABEL_1113:
                              v762 = __ldaxr((unint64_t *)v350);
                              v763 = v762 - 1;
                            }
                            while (__stlxr(v763, (unint64_t *)v350));
                            if (v763)
                              v764 = 1;
                            else
                              v764 = v350 == 0;
                            if (v764)
                              goto LABEL_1164;
                            __p = (void *)(v350 + 8);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            break;
                          default:
                            goto LABEL_1628;
                        }
LABEL_1119:
                        v672 = (_QWORD *)v350;
                        v696 = 0x1020C405E66F15BLL;
                        goto LABEL_1163;
                      case 6:
                        switch(*((_BYTE *)this + 20))
                        {
                          case 0:
                          case 1:
                          case 6:
                          case 7:
                            goto LABEL_663;
                          case 2:
                            v407 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v417 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v417, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v417;
                            *v417 = 1;
                            do
                            {
                              v418 = __ldaxr(*(unint64_t **)&v407);
                              v410 = --v418 == 0;
                            }
                            while (__stlxr(v418, *(unint64_t **)&v407));
                            goto LABEL_972;
                          case 3:
                            v514 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v569 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v569, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v569;
                            *v569 = 1;
                            do
                            {
                              v570 = __ldaxr(v514);
                              v517 = --v570 == 0;
                            }
                            while (__stlxr(v570, v514));
                            goto LABEL_870;
                          case 4:
                            v643 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v765 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v765, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v765;
                            *v765 = 1;
                            do
                            {
                              v766 = __ldaxr(v643);
                              v706 = --v766 == 0;
                            }
                            while (__stlxr(v766, v643));
                            goto LABEL_1123;
                          case 5:
                            v643 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v709 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v709, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v709;
                            *v709 = 1;
                            do
                            {
                              v710 = __ldaxr(v643);
                              v646 = --v710 == 0;
                            }
                            while (__stlxr(v710, v643));
                            goto LABEL_1086;
                          case 8:
                            v725 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v767 = operator new();
                            v768 = *v15;
                            *(_QWORD *)v767 = **(_QWORD **)v15;
                            *(_QWORD *)(v767 + 8) = *(_QWORD *)(*(_QWORD *)&v768 + 8);
                            v769 = *(_QWORD *)(*(_QWORD *)&v768 + 16);
                            *(_QWORD *)(v767 + 16) = v769;
                            if (v769)
                            {
                              v770 = (unsigned int *)(v769 + 8);
                              do
                                v771 = __ldxr(v770);
                              while (__stxr(v771 + 1, v770));
                            }
                            v772 = *(_OWORD *)(*(_QWORD *)&v768 + 24);
                            v773 = *(_OWORD *)(*(_QWORD *)&v768 + 40);
                            *(_OWORD *)(v767 + 56) = *(_OWORD *)(*(_QWORD *)&v768 + 56);
                            *(_OWORD *)(v767 + 40) = v773;
                            *(_OWORD *)(v767 + 24) = v772;
                            *(_QWORD *)v15 = v767;
                            *(_QWORD *)v767 = 1;
                            do
                            {
                              v774 = __ldaxr(*(unint64_t **)&v725);
                              v734 = --v774 == 0;
                            }
                            while (__stlxr(v774, *(unint64_t **)&v725));
                            goto LABEL_1133;
                          case 9:
                            v589 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v650 = (_QWORD *)operator new();
                            v651 = *(_QWORD *)v15 + 8;
                            *v650 = **(_QWORD **)v15;
                            turi::flexible_type_impl::ndarray<double>::ndarray(v650 + 1, v651);
                            *(_QWORD *)v15 = v650;
                            *v650 = 1;
                            do
                            {
                              v652 = __ldaxr(v589);
                              v593 = --v652 == 0;
                            }
                            while (__stlxr(v652, v589));
                            goto LABEL_966;
                          default:
                            goto LABEL_1628;
                        }
                      case 7:
                        switch(*((_BYTE *)this + 20))
                        {
                          case 0:
                          case 1:
                          case 6:
                          case 7:
                            goto LABEL_663;
                          case 2:
                            v407 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v408 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v408, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v408;
                            *v408 = 1;
                            do
                            {
                              v409 = __ldaxr(*(unint64_t **)&v407);
                              v410 = --v409 == 0;
                            }
                            while (__stlxr(v409, *(unint64_t **)&v407));
LABEL_972:
                            if (!v410)
                              goto LABEL_663;
                            if (*(char *)(*(_QWORD *)&v407 + 31) < 0)
                              operator delete(*(void **)(*(_QWORD *)&v407 + 8));
                            v572 = v407;
                            v573 = 0x1012C404EF22A49;
                            goto LABEL_1137;
                          case 3:
                            v514 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v515 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v515, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v515;
                            *v515 = 1;
                            do
                            {
                              v516 = __ldaxr(v514);
                              v517 = --v516 == 0;
                            }
                            while (__stlxr(v516, v514));
LABEL_870:
                            if (!v517)
                              goto LABEL_663;
                            v571 = (void *)v514[1];
                            if (v571)
                            {
                              v514[2] = (unint64_t)v571;
                              operator delete(v571);
                            }
                            v572 = *(double *)&v514;
                            v573 = 0x1080C409938AC02;
                            goto LABEL_1137;
                          case 4:
                            v643 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v707 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v707, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v707;
                            *v707 = 1;
                            do
                            {
                              v708 = __ldaxr(v643);
                              v706 = --v708 == 0;
                            }
                            while (__stlxr(v708, v643));
LABEL_1123:
                            if (!v706)
                              goto LABEL_663;
                            __p = v643 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_1126;
                          case 5:
                            v643 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v644 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v644, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v644;
                            *v644 = 1;
                            do
                            {
                              v645 = __ldaxr(v643);
                              v646 = --v645 == 0;
                            }
                            while (__stlxr(v645, v643));
LABEL_1086:
                            if (!v646)
                              goto LABEL_663;
                            __p = v643 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_1126:
                            v572 = *(double *)&v643;
                            v573 = 0x1020C405E66F15BLL;
                            goto LABEL_1137;
                          case 8:
                            v725 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v726 = operator new();
                            v727 = *v15;
                            *(_QWORD *)v726 = **(_QWORD **)v15;
                            *(_QWORD *)(v726 + 8) = *(_QWORD *)(*(_QWORD *)&v727 + 8);
                            v728 = *(_QWORD *)(*(_QWORD *)&v727 + 16);
                            *(_QWORD *)(v726 + 16) = v728;
                            if (v728)
                            {
                              v729 = (unsigned int *)(v728 + 8);
                              do
                                v730 = __ldxr(v729);
                              while (__stxr(v730 + 1, v729));
                            }
                            v731 = *(_OWORD *)(*(_QWORD *)&v727 + 24);
                            v732 = *(_OWORD *)(*(_QWORD *)&v727 + 40);
                            *(_OWORD *)(v726 + 56) = *(_OWORD *)(*(_QWORD *)&v727 + 56);
                            *(_OWORD *)(v726 + 40) = v732;
                            *(_OWORD *)(v726 + 24) = v731;
                            *(_QWORD *)v15 = v726;
                            *(_QWORD *)v726 = 1;
                            do
                            {
                              v733 = __ldaxr(*(unint64_t **)&v725);
                              v734 = --v733 == 0;
                            }
                            while (__stlxr(v733, *(unint64_t **)&v725));
LABEL_1133:
                            if (!v734)
                              goto LABEL_663;
                            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v725 + 16));
                            v572 = v725;
                            v653 = -235920773;
                            goto LABEL_1136;
                          case 9:
                            v589 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_663;
                            v590 = (_QWORD *)operator new();
                            v591 = *(_QWORD *)v15 + 8;
                            *v590 = **(_QWORD **)v15;
                            turi::flexible_type_impl::ndarray<double>::ndarray(v590 + 1, v591);
                            *(_QWORD *)v15 = v590;
                            *v590 = 1;
                            do
                            {
                              v592 = __ldaxr(v589);
                              v593 = --v592 == 0;
                            }
                            while (__stlxr(v592, v589));
LABEL_966:
                            if (!v593)
                              goto LABEL_663;
                            v572 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v589));
                            v653 = 2071181815;
LABEL_1136:
                            v573 = v653 | 0x1030C4000000000;
LABEL_1137:
                            MEMORY[0x219A19A08](*(_QWORD *)&v572, v573);
LABEL_663:
                            turi::flexible_type_fail(0);
                            break;
                          default:
                            goto LABEL_1628;
                        }
                        goto LABEL_1164;
                      case 8:
                        switch(*((_BYTE *)this + 20))
                        {
                          case 0:
                          case 1:
                          case 6:
                          case 7:
                            goto LABEL_1155;
                          case 2:
                            v419 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1155;
                            v420 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v420, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v420;
                            *v420 = 1;
                            do
                            {
                              v421 = __ldaxr(*(unint64_t **)&v419);
                              v422 = v421 - 1;
                            }
                            while (__stlxr(v422, *(unint64_t **)&v419));
                            if (v422)
                              goto LABEL_1155;
                            if (*(char *)(*(_QWORD *)&v419 + 31) < 0)
                              operator delete(*(void **)(*(_QWORD *)&v419 + 8));
                            v423 = v419;
                            v424 = 0x1012C404EF22A49;
                            goto LABEL_1154;
                          case 3:
                            v580 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1155;
                            v581 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v581, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v581;
                            *v581 = 1;
                            do
                            {
                              v582 = __ldaxr(v580);
                              v583 = v582 - 1;
                            }
                            while (__stlxr(v583, v580));
                            if (v583)
                              goto LABEL_1155;
                            v584 = (void *)v580[1];
                            if (v584)
                            {
                              v580[2] = (unint64_t)v584;
                              operator delete(v584);
                            }
                            v423 = *(double *)&v580;
                            v424 = 0x1080C409938AC02;
                            goto LABEL_1154;
                          case 4:
                            v735 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1155;
                            v775 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v775, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v775;
                            *v775 = 1;
                            do
                            {
                              v776 = __ldaxr(v735);
                              v777 = v776 - 1;
                            }
                            while (__stlxr(v777, v735));
                            if (v777)
                              goto LABEL_1155;
                            __p = v735 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_1144;
                          case 5:
                            v735 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1155;
                            v736 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v736, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v736;
                            *v736 = 1;
                            do
                            {
                              v737 = __ldaxr(v735);
                              v738 = v737 - 1;
                            }
                            while (__stlxr(v738, v735));
                            if (v738)
                              goto LABEL_1155;
                            __p = v735 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_1144:
                            v423 = *(double *)&v735;
                            v424 = 0x1020C405E66F15BLL;
                            goto LABEL_1154;
                          case 8:
                            v778 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1155;
                            v779 = operator new();
                            v780 = *v15;
                            *(_QWORD *)v779 = **(_QWORD **)v15;
                            *(_QWORD *)(v779 + 8) = *(_QWORD *)(*(_QWORD *)&v780 + 8);
                            v781 = *(_QWORD *)(*(_QWORD *)&v780 + 16);
                            *(_QWORD *)(v779 + 16) = v781;
                            if (v781)
                            {
                              v782 = (unsigned int *)(v781 + 8);
                              do
                                v783 = __ldxr(v782);
                              while (__stxr(v783 + 1, v782));
                            }
                            v784 = *(_OWORD *)(*(_QWORD *)&v780 + 24);
                            v785 = *(_OWORD *)(*(_QWORD *)&v780 + 40);
                            *(_OWORD *)(v779 + 56) = *(_OWORD *)(*(_QWORD *)&v780 + 56);
                            *(_OWORD *)(v779 + 40) = v785;
                            *(_OWORD *)(v779 + 24) = v784;
                            *(_QWORD *)v15 = v779;
                            *(_QWORD *)v779 = 1;
                            do
                            {
                              v786 = __ldaxr(*(unint64_t **)&v778);
                              v787 = v786 - 1;
                            }
                            while (__stlxr(v787, *(unint64_t **)&v778));
                            if (v787)
                              goto LABEL_1155;
                            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v778 + 16));
                            v423 = v778;
                            v679 = -235920773;
                            goto LABEL_1153;
                          case 9:
                            v674 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_1155;
                            v675 = (_QWORD *)operator new();
                            v676 = *(_QWORD *)v15 + 8;
                            *v675 = **(_QWORD **)v15;
                            turi::flexible_type_impl::ndarray<double>::ndarray(v675 + 1, v676);
                            *(_QWORD *)v15 = v675;
                            *v675 = 1;
                            do
                            {
                              v677 = __ldaxr(v674);
                              v678 = v677 - 1;
                            }
                            while (__stlxr(v678, v674));
                            if (v678)
                              goto LABEL_1155;
                            v423 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v674));
                            v679 = 2071181815;
LABEL_1153:
                            v424 = v679 | 0x1030C4000000000;
LABEL_1154:
                            MEMORY[0x219A19A08](*(_QWORD *)&v423, v424);
LABEL_1155:
                            turi::flexible_type_fail(0);
                            do
                            {
LABEL_1156:
                              v788 = __ldaxr((unint64_t *)v350);
                              v789 = v788 - 1;
                            }
                            while (__stlxr(v789, (unint64_t *)v350));
                            if (v789)
                              v790 = 1;
                            else
                              v790 = v350 == 0;
                            if (v790)
                              goto LABEL_1164;
                            boost::detail::shared_count::~shared_count((unsigned int **)(v350 + 16));
                            v672 = (_QWORD *)v350;
                            v673 = -235920773;
                            break;
                          default:
                            goto LABEL_1628;
                        }
LABEL_1162:
                        v696 = v673 | 0x1030C4000000000;
LABEL_1163:
                        MEMORY[0x219A19A08](v672, v696);
                        goto LABEL_1164;
                      case 9:
                        switch(*((_BYTE *)this + 20))
                        {
                          case 0:
                          case 1:
                          case 6:
                          case 7:
                            goto LABEL_990;
                          case 2:
                            v388 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_990;
                            v389 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v389, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v389;
                            *v389 = 1;
                            do
                            {
                              v390 = __ldaxr(*(unint64_t **)&v388);
                              v391 = v390 - 1;
                            }
                            while (__stlxr(v391, *(unint64_t **)&v388));
                            if (v391)
                              goto LABEL_990;
                            if (*(char *)(*(_QWORD *)&v388 + 31) < 0)
                              operator delete(*(void **)(*(_QWORD *)&v388 + 8));
                            v392 = v388;
                            v393 = 0x1012C404EF22A49;
                            goto LABEL_989;
                          case 3:
                            v485 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_990;
                            v486 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v486, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v486;
                            *v486 = 1;
                            do
                            {
                              v487 = __ldaxr(v485);
                              v488 = v487 - 1;
                            }
                            while (__stlxr(v488, v485));
                            if (v488)
                              goto LABEL_990;
                            v489 = (void *)v485[1];
                            if (v489)
                            {
                              v485[2] = (unint64_t)v489;
                              operator delete(v489);
                            }
                            v392 = *(double *)&v485;
                            v393 = 0x1080C409938AC02;
                            goto LABEL_989;
                          case 4:
                            v585 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_990;
                            v647 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v647, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v647;
                            *v647 = 1;
                            do
                            {
                              v648 = __ldaxr(v585);
                              v649 = v648 - 1;
                            }
                            while (__stlxr(v649, v585));
                            if (v649)
                              goto LABEL_990;
                            __p = v585 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_962;
                          case 5:
                            v585 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_990;
                            v586 = (_QWORD *)operator new();
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v586, *(_QWORD *)v15);
                            *(_QWORD *)v15 = v586;
                            *v586 = 1;
                            do
                            {
                              v587 = __ldaxr(v585);
                              v588 = v587 - 1;
                            }
                            while (__stlxr(v588, v585));
                            if (v588)
                              goto LABEL_990;
                            __p = v585 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_962:
                            v392 = *(double *)&v585;
                            v393 = 0x1020C405E66F15BLL;
                            goto LABEL_989;
                          case 8:
                            v659 = *v15;
                            if (**(_QWORD **)v15 == 1)
                              goto LABEL_990;
                            v660 = operator new();
                            v661 = *v15;
                            *(_QWORD *)v660 = **(_QWORD **)v15;
                            *(_QWORD *)(v660 + 8) = *(_QWORD *)(*(_QWORD *)&v661 + 8);
                            v662 = *(_QWORD *)(*(_QWORD *)&v661 + 16);
                            *(_QWORD *)(v660 + 16) = v662;
                            if (v662)
                            {
                              v663 = (unsigned int *)(v662 + 8);
                              do
                                v664 = __ldxr(v663);
                              while (__stxr(v664 + 1, v663));
                            }
                            v665 = *(_OWORD *)(*(_QWORD *)&v661 + 24);
                            v666 = *(_OWORD *)(*(_QWORD *)&v661 + 40);
                            *(_OWORD *)(v660 + 56) = *(_OWORD *)(*(_QWORD *)&v661 + 56);
                            *(_OWORD *)(v660 + 40) = v666;
                            *(_OWORD *)(v660 + 24) = v665;
                            *(_QWORD *)v15 = v660;
                            *(_QWORD *)v660 = 1;
                            do
                            {
                              v667 = __ldaxr(*(unint64_t **)&v659);
                              v668 = v667 - 1;
                            }
                            while (__stlxr(v668, *(unint64_t **)&v659));
                            if (v668)
                              goto LABEL_990;
                            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v659 + 16));
                            v392 = v659;
                            v393 = 0x1030C40F1F0227BLL;
LABEL_989:
                            MEMORY[0x219A19A08](*(_QWORD *)&v392, v393);
LABEL_990:
                            turi::flexible_type_fail(0);
                            do
                            {
LABEL_991:
                              v669 = __ldaxr((unint64_t *)v350);
                              v670 = v669 - 1;
                            }
                            while (__stlxr(v670, (unint64_t *)v350));
                            if (v670)
                              v671 = 1;
                            else
                              v671 = v350 == 0;
                            if (v671)
                              goto LABEL_1164;
                            v672 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v350);
                            v673 = 2071181815;
                            goto LABEL_1162;
                          case 9:
                            v518 = *(unint64_t **)v15;
                            if (**(_QWORD **)v15 != 1)
                            {
                              v519 = (_QWORD *)operator new();
                              v520 = *(_QWORD *)v15 + 8;
                              *v519 = **(_QWORD **)v15;
                              turi::flexible_type_impl::ndarray<double>::ndarray(v519 + 1, v520);
                              *(_QWORD *)v15 = v519;
                              *v519 = 1;
                              do
                              {
                                v521 = __ldaxr(v518);
                                v522 = v521 - 1;
                              }
                              while (__stlxr(v522, v518));
                              if (!v522)
                              {
                                v523 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v518);
                                MEMORY[0x219A19A08](v523, 0x1030C407B73B9F7);
                              }
                            }
                            v524 = *v15;
                            v525 = (uint64_t *)(*(_QWORD *)v15 + 8);
                            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v525, v350 + 8))
                              turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                            v527 = *(uint64_t **)(*(_QWORD *)&v524 + 24);
                            v526 = *(uint64_t **)(*(_QWORD *)&v524 + 32);
                            if (v526 == v527 || !*v525)
                              goto LABEL_991;
                            v528 = 1;
                            do
                            {
                              v529 = *v527++;
                              v528 *= v529;
                            }
                            while (v527 != v526);
                            if (!v528)
                              goto LABEL_914;
                            turi::flexible_type_impl::ndarray<double>::ensure_unique(v525);
                            v530 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v524 + 32) - *(_QWORD *)(*(_QWORD *)&v524 + 24)) >> 3;
                            v1067 = 0;
                            std::vector<unsigned long>::vector(&__p, v530, &v1067);
                            do
                            {
                              v531 = (uint64_t *)__p;
                              if (v1069 == __p)
                              {
                                v540 = 0;
                                v541 = *(double *)(**(_QWORD **)(v350 + 8) + 8 * *(_QWORD *)(v350 + 72));
                              }
                              else
                              {
                                v532 = 0;
                                v533 = (v1069 - (_BYTE *)__p) >> 3;
                                v534 = *(uint64_t **)(v350 + 48);
                                if (v533 <= 1)
                                  v533 = 1;
                                v535 = (uint64_t *)__p;
                                v536 = v533;
                                do
                                {
                                  v538 = *v535++;
                                  v537 = v538;
                                  v539 = *v534++;
                                  v532 += v539 * v537;
                                  --v536;
                                }
                                while (v536);
                                v540 = 0;
                                v541 = *(double *)(**(_QWORD **)(v350 + 8) + 8 * (*(_QWORD *)(v350 + 72) + v532));
                                v542 = *(uint64_t **)(*(_QWORD *)&v524 + 48);
                                do
                                {
                                  v544 = *v531++;
                                  v543 = v544;
                                  v545 = *v542++;
                                  v540 += v545 * v543;
                                  --v533;
                                }
                                while (v533);
                              }
                              turi::flexible_type_impl::ndarray<double>::ensure_unique(v525);
                              *(double *)(**(_QWORD **)(*(_QWORD *)&v524 + 8)
                                        + 8 * (*(_QWORD *)(*(_QWORD *)&v524 + 72) + v540)) = v541
                                                                                             + *(double *)(**(_QWORD **)(*(_QWORD *)&v524 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v524 + 72) + v540));
                            }
                            while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v525, (uint64_t *)&__p));
                            goto LABEL_912;
                          default:
                            goto LABEL_1628;
                        }
                      default:
                        goto LABEL_1628;
                    }
                  default:
                    goto LABEL_534;
                }
              default:
LABEL_1628:
                turi::flexible_type_fail(0);
                break;
            }
            break;
          default:
LABEL_1627:
            turi::flexible_type_fail(0);
            break;
        }
        __break(1u);
      }
      else
      {
        *((_BYTE *)this + 25) = 1;
      }
    }
    else
    {
      ++*((_QWORD *)this + 4);
      v8 = (unint64_t **)((char *)this + 8);
      if ((turi::groupby_operators::vector_average *)((char *)this + 8) != a2)
      {
        switch(*((_BYTE *)this + 20))
        {
          case 2:
            v9 = *v8;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v12 = *v8;
              if (!*v8)
                goto LABEL_75;
              if (*((char *)v12 + 31) < 0)
                operator delete((void *)v12[1]);
              v13 = v12;
              v14 = 0x1012C404EF22A49;
              goto LABEL_74;
            }
            break;
          case 3:
            v37 = *v8;
            do
            {
              v38 = __ldaxr(v37);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, v37));
            if (!v39)
            {
              v40 = *v8;
              if (!*v8)
                goto LABEL_75;
              v41 = (void *)v40[1];
              if (v41)
              {
                v40[2] = (unint64_t)v41;
                operator delete(v41);
              }
              v13 = v40;
              v14 = 0x1080C409938AC02;
              goto LABEL_74;
            }
            break;
          case 4:
            v29 = *v8;
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              v32 = *v8;
              if (!*v8)
                goto LABEL_75;
              __p = v32 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_67;
            }
            break;
          case 5:
            v42 = *v8;
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              v32 = *v8;
              if (!*v8)
                goto LABEL_75;
              __p = v32 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_67:
              v13 = v32;
              v14 = 0x1020C405E66F15BLL;
              goto LABEL_74;
            }
            break;
          case 8:
            v45 = *v8;
            do
            {
              v46 = __ldaxr(v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v45));
            if (!v47)
            {
              v48 = *v8;
              if (!*v8)
                goto LABEL_75;
              boost::detail::shared_count::~shared_count((unsigned int **)v48 + 2);
              v13 = v48;
              v36 = -235920773;
              goto LABEL_73;
            }
            break;
          case 9:
            v33 = *v8;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              if (*v8)
              {
                v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v8);
                v36 = 2071181815;
LABEL_73:
                v14 = v36 | 0x1030C4000000000;
LABEL_74:
                MEMORY[0x219A19A08](v13, v14);
              }
LABEL_75:
              *v8 = 0;
            }
            break;
          default:
            break;
        }
        v49 = *(unint64_t **)a2;
        *(_QWORD *)((char *)this + 13) = *(_QWORD *)((char *)a2 + 5);
        *v8 = v49;
        LODWORD(v49) = *((unsigned __int8 *)a2 + 12);
        *((_BYTE *)this + 20) = (_BYTE)v49;
        v50 = v49 > 9;
        v51 = (1 << (char)v49) & 0x33C;
        if (!v50 && v51 != 0)
        {
          v53 = *v8;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 + 1, v53));
        }
      }
      *((_BYTE *)this + 24) = 1;
    }
  }
}

void sub_218141980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, uint64_t a19, int a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;

  MEMORY[0x219A19A08](v22, 0x1020C405E66F15BLL);
  do
  {
    v24 = __ldaxr((unint64_t *)v21);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unint64_t *)v21));
  if (v25)
    v26 = 1;
  else
    v26 = v21 == 0;
  if (!v26)
  {
    boost::detail::shared_count::~shared_count((unsigned int **)(v21 + 16));
    MEMORY[0x219A19A08](v21, 0x1030C40F1F0227BLL);
  }
  switch(a18)
  {
    case 2:
      v27 = (unint64_t *)a16;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_46;
      v30 = a16;
      if (!a16)
        goto LABEL_46;
      if (*(char *)(a16 + 31) < 0)
        operator delete(*(void **)(a16 + 8));
      v31 = (_QWORD *)v30;
      v32 = 0x1012C404EF22A49;
      goto LABEL_45;
    case 3:
      v41 = (unint64_t *)a16;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (v43)
        goto LABEL_46;
      v44 = a16;
      if (!a16)
        goto LABEL_46;
      v45 = *(void **)(a16 + 8);
      if (v45)
      {
        *(_QWORD *)(a16 + 16) = v45;
        operator delete(v45);
      }
      v31 = (_QWORD *)v44;
      v32 = 0x1080C409938AC02;
      goto LABEL_45;
    case 4:
      v33 = (unint64_t *)a16;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (v35)
        goto LABEL_46;
      v36 = a16;
      if (!a16)
        goto LABEL_46;
      a15 = a16 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
      goto LABEL_38;
    case 5:
      v46 = (unint64_t *)a16;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (v48)
        goto LABEL_46;
      v36 = a16;
      if (!a16)
        goto LABEL_46;
      a15 = a16 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
LABEL_38:
      v31 = (_QWORD *)v36;
      v32 = 0x1020C405E66F15BLL;
      goto LABEL_45;
    case 8:
      v49 = (unint64_t *)a16;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (v51)
        goto LABEL_46;
      v52 = a16;
      if (!a16)
        goto LABEL_46;
      boost::detail::shared_count::~shared_count((unsigned int **)(a16 + 16));
      v31 = (_QWORD *)v52;
      v40 = -235920773;
      goto LABEL_44;
    case 9:
      v37 = (unint64_t *)a16;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39 || !a16)
        goto LABEL_46;
      v31 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a16);
      v40 = 2071181815;
LABEL_44:
      v32 = v40 | 0x1030C4000000000;
LABEL_45:
      MEMORY[0x219A19A08](v31, v32);
LABEL_46:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_46;
  }
}

void turi::groupby_operators::vector_average::combine(uint64_t a1, void *lpsrc)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  double v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  double *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  double v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  double *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  __int128 v108;
  __int128 v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int64_t v113;
  double v114;
  unint64_t v115;
  unint64_t v116;
  double v117;
  unint64_t v118;
  unint64_t v119;
  double v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  const std::string::value_type *v124;
  std::string::size_type v125;
  double v126;
  unint64_t v127;
  unint64_t v128;
  double v129;
  unint64_t v130;
  unint64_t v131;
  double v132;
  unint64_t v133;
  unint64_t v134;
  double v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unsigned int v139;
  double v140;
  unint64_t v141;
  unint64_t v142;
  void *v143;
  double v144;
  unint64_t v145;
  unint64_t v146;
  void *v147;
  double v148;
  unint64_t v149;
  unint64_t v150;
  void *v151;
  double v152;
  unint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  double v156;
  unint64_t v157;
  unint64_t v158;
  void *v159;
  double *v160;
  uint64_t v161;
  unint64_t v162;
  double *v163;
  double v164;
  double v165;
  unint64_t v166;
  unint64_t v167;
  void *v168;
  double v169;
  unint64_t v170;
  unint64_t v171;
  _QWORD *v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t *v181;
  uint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  double v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  double v193;
  unint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  double v197;
  unint64_t v198;
  unint64_t v199;
  double v200;
  unint64_t v201;
  unint64_t v202;
  void *v203;
  double v204;
  unint64_t v205;
  unint64_t v206;
  double v207;
  unint64_t v208;
  unint64_t v209;
  void *v210;
  double *v211;
  uint64_t v212;
  unint64_t v213;
  double v214;
  unint64_t v215;
  unint64_t v216;
  void *v217;
  double v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  double v222;
  unint64_t v223;
  unint64_t v224;
  void *v225;
  double v226;
  unint64_t v227;
  unint64_t v228;
  double v229;
  unint64_t v230;
  unint64_t v231;
  _QWORD *v232;
  double v233;
  unint64_t v234;
  unint64_t v235;
  _QWORD *v236;
  uint64_t *v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  double v249;
  unint64_t v250;
  unint64_t v251;
  _QWORD *v252;
  uint64_t *v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  double v265;
  unint64_t v266;
  unint64_t v267;
  double v268;
  unint64_t v269;
  unint64_t v270;
  double v271;
  double v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int *v277;
  unsigned int v278;
  __int128 v279;
  __int128 v280;
  unint64_t v281;
  unint64_t v282;
  double v283;
  unint64_t v284;
  unint64_t v285;
  _QWORD *v286;
  double v287;
  unint64_t v288;
  unint64_t v289;
  double v290;
  unint64_t v291;
  unint64_t v292;
  double v293;
  unint64_t v294;
  unint64_t v295;
  double v296;
  unint64_t v297;
  unint64_t v298;
  _QWORD *v299;
  double v300;
  unint64_t v301;
  unint64_t v302;
  void *v303;
  double *v304;
  uint64_t v305;
  unint64_t v306;
  double v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unsigned int *v314;
  unsigned int v315;
  __int128 v316;
  __int128 v317;
  unint64_t v318;
  unint64_t v319;
  double v320;
  unint64_t v321;
  unint64_t v322;
  _QWORD *v323;
  double v324;
  unint64_t v325;
  unint64_t v326;
  double v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  __int128 v334;
  __int128 v335;
  unint64_t v336;
  unint64_t v337;
  double v338;
  unint64_t v339;
  unint64_t v340;
  double v341;
  unint64_t v342;
  unint64_t v343;
  double v344;
  unint64_t v345;
  unint64_t v346;
  double v347;
  unint64_t v348;
  unint64_t v349;
  double v350;
  unint64_t v351;
  unint64_t v352;
  double v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int *v358;
  unsigned int v359;
  __int128 v360;
  __int128 v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int *v366;
  unsigned int v367;
  __int128 v368;
  __int128 v369;
  unint64_t v370;
  unint64_t v371;
  double v372;
  unint64_t v373;
  unint64_t v374;
  double v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int *v380;
  unsigned int v381;
  __int128 v382;
  __int128 v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unsigned int *v388;
  unsigned int v389;
  __int128 v390;
  __int128 v391;
  unint64_t v392;
  unint64_t v393;
  double v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unsigned int *v399;
  unsigned int v400;
  __int128 v401;
  __int128 v402;
  unint64_t v403;
  unint64_t v404;
  double v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned int *v410;
  unsigned int v411;
  __int128 v412;
  __int128 v413;
  unint64_t v414;
  unint64_t v415;
  double v416;
  unint64_t v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unsigned int *v421;
  unsigned int v422;
  __int128 v423;
  __int128 v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  double v428;
  uint64_t *v429;
  unint64_t v430;
  unint64_t v431;
  int64_t v432;
  uint64_t v433;
  uint64_t *v434;
  unint64_t v435;
  unint64_t v436;
  _QWORD *v437;
  uint64_t *v438;
  uint64_t *v439;
  double v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  unint64_t v452;
  uint64_t *v453;
  unint64_t v454;
  unint64_t v455;
  void *v456;
  double *v457;
  uint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unsigned int *v464;
  unsigned int v465;
  __int128 v466;
  __int128 v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  _QWORD *v474;
  uint64_t v475;
  unint64_t *v476;
  unint64_t v477;
  unint64_t v478;
  _QWORD *v479;
  unint64_t *v480;
  unint64_t v481;
  unint64_t v482;
  _QWORD *v483;
  unsigned int v484;
  unint64_t *v485;
  unint64_t v486;
  unint64_t v487;
  _QWORD *v488;
  void *v489;
  unint64_t *v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t *v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  void *v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  BOOL v507;
  double v508;
  uint64_t v509;
  unint64_t v510;
  unint64_t v511;
  BOOL v512;
  unint64_t v513;
  unint64_t v514;
  BOOL v515;
  unsigned int v516;
  unint64_t v517;
  unint64_t v518;
  BOOL v519;
  void *v520;
  unint64_t v521;
  unint64_t v522;
  BOOL v523;
  unint64_t v524;
  unint64_t v525;
  BOOL v526;
  unint64_t v527;
  unint64_t v528;
  BOOL v529;
  double v530;
  uint64_t v531;
  unint64_t v532;
  unint64_t v533;
  BOOL v534;
  unint64_t v535;
  unint64_t v536;
  BOOL v537;
  unsigned int v538;
  unint64_t v539;
  unint64_t v540;
  BOOL v541;
  void *v542;
  unint64_t v543;
  unint64_t v544;
  BOOL v545;
  unint64_t v546;
  unint64_t v547;
  BOOL v548;
  unsigned __int8 v549;
  unsigned int v550;
  uint64_t v551;
  void *__p;
  _BYTE *v553;

  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  if (!*((_BYTE *)v3 + 25) && !*(_BYTE *)(a1 + 25))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*((_BYTE *)v3 + 24))
      {
        v5 = *(unsigned __int8 *)(a1 + 20);
        v6 = 1;
        switch(*(_BYTE *)(a1 + 20))
        {
          case 3:
            v7 = *(_QWORD *)(a1 + 8);
            v8 = (_QWORD *)(v7 + 8);
            v9 = (_QWORD *)(v7 + 16);
            v10 = 3;
            goto LABEL_12;
          case 4:
            v12 = *(_QWORD *)(a1 + 8);
            v8 = (_QWORD *)(v12 + 8);
            v9 = (_QWORD *)(v12 + 16);
            v10 = 4;
            goto LABEL_12;
          case 5:
            v11 = *(_QWORD *)(a1 + 8);
            v8 = (_QWORD *)(v11 + 8);
            v9 = (_QWORD *)(v11 + 16);
            v10 = 5;
LABEL_12:
            v6 = (uint64_t)(*v9 - *v8) >> v10;
            break;
          case 9:
            v25 = *(_QWORD **)(a1 + 8);
            v27 = (uint64_t *)v25[3];
            v26 = (uint64_t *)v25[4];
            if (v26 == v27)
            {
              v6 = 0;
            }
            else
            {
              v6 = v25[1];
              if (v6)
              {
                v6 = 1;
                do
                {
                  v28 = *v27++;
                  v6 *= v28;
                }
                while (v27 != v26);
              }
            }
            break;
          default:
            break;
        }
        v13 = 1;
        switch(*((_BYTE *)v3 + 20))
        {
          case 3:
            v14 = v3[1];
            v15 = (_QWORD *)(v14 + 8);
            v16 = (_QWORD *)(v14 + 16);
            v17 = 3;
            goto LABEL_17;
          case 4:
            v19 = v3[1];
            v15 = (_QWORD *)(v19 + 8);
            v16 = (_QWORD *)(v19 + 16);
            v17 = 4;
            goto LABEL_17;
          case 5:
            v18 = v3[1];
            v15 = (_QWORD *)(v18 + 8);
            v16 = (_QWORD *)(v18 + 16);
            v17 = 5;
LABEL_17:
            v13 = (uint64_t)(*v16 - *v15) >> v17;
            break;
          case 9:
            v29 = (_QWORD *)v3[1];
            v31 = (uint64_t *)v29[3];
            v30 = (uint64_t *)v29[4];
            if (v30 == v31)
            {
              v13 = 0;
            }
            else
            {
              v13 = v29[1];
              if (v13)
              {
                v13 = 1;
                do
                {
                  v32 = *v31++;
                  v13 *= v32;
                }
                while (v31 != v30);
              }
            }
            break;
          default:
            break;
        }
        if (v6 == v13)
        {
          v20 = *(uint64_t *)(a1 + 8);
          v21 = *(_QWORD *)(a1 + 32);
          v22 = *(_DWORD *)(a1 + 16);
          v23 = *(double *)&v20;
          switch(*(_BYTE *)(a1 + 20))
          {
            case 0:
LABEL_22:
              *(_QWORD *)&v23 = v20 * v21;
              goto LABEL_98;
            case 1:
LABEL_34:
              v23 = *(double *)&v20 * (double)v21;
              goto LABEL_98;
            case 2:
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
              do
                v24 = __ldaxr((unint64_t *)v20);
              while (__stlxr(v24 + 1, (unint64_t *)v20));
              v23 = *(double *)&v20;
              switch(v5)
              {
                case 0u:
                  goto LABEL_22;
                case 1u:
                  goto LABEL_34;
                case 2u:
                  if (*(_QWORD *)v20 == 1)
                    goto LABEL_60;
                  v23 = COERCE_DOUBLE(operator new());
                  std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](*(_QWORD **)&v23, v20);
                  **(_QWORD **)&v23 = 1;
                  do
                  {
                    v33 = __ldaxr((unint64_t *)v20);
                    v34 = v33 - 1;
                  }
                  while (__stlxr(v34, (unint64_t *)v20));
                  if (v34)
                    goto LABEL_97;
                  if (*(char *)(v20 + 31) < 0)
                    operator delete(*(void **)(v20 + 8));
                  v35 = v20;
                  v36 = 0x1012C404EF22A49;
                  goto LABEL_96;
                case 3u:
                  if (*(_QWORD *)v20 == 1)
                  {
                    v23 = *(double *)&v20;
                  }
                  else
                  {
                    v23 = COERCE_DOUBLE(operator new());
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v23, v20);
                    **(_QWORD **)&v23 = 1;
                    do
                    {
                      v56 = __ldaxr((unint64_t *)v20);
                      v57 = v56 - 1;
                    }
                    while (__stlxr(v57, (unint64_t *)v20));
                    if (!v57)
                    {
                      v58 = *(void **)(v20 + 8);
                      if (v58)
                      {
                        *(_QWORD *)(v20 + 16) = v58;
                        operator delete(v58);
                      }
                      MEMORY[0x219A19A08](v20, 0x1080C409938AC02);
                    }
                  }
                  v59 = *(double **)(*(_QWORD *)&v23 + 8);
                  v60 = *(_QWORD *)(*(_QWORD *)&v23 + 16) - (_QWORD)v59;
                  if (v60)
                  {
                    v61 = v60 >> 3;
                    if (v61 <= 1)
                      v61 = 1;
                    do
                    {
                      *v59 = *v59 * (double)v21;
                      ++v59;
                      --v61;
                    }
                    while (v61);
                  }
                  goto LABEL_98;
                case 4u:
                  if (*(_QWORD *)v20 == 1)
                    goto LABEL_60;
                  v23 = COERCE_DOUBLE(operator new());
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v23, v20);
                  **(_QWORD **)&v23 = 1;
                  do
                  {
                    v39 = __ldaxr((unint64_t *)v20);
                    v40 = v39 - 1;
                  }
                  while (__stlxr(v40, (unint64_t *)v20));
                  if (v40)
                    goto LABEL_97;
                  __p = (void *)(v20 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  goto LABEL_58;
                case 5u:
                  if (*(_QWORD *)v20 == 1)
                    goto LABEL_60;
                  v23 = COERCE_DOUBLE(operator new());
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v23, v20);
                  **(_QWORD **)&v23 = 1;
                  do
                  {
                    v37 = __ldaxr((unint64_t *)v20);
                    v38 = v37 - 1;
                  }
                  while (__stlxr(v38, (unint64_t *)v20));
                  if (v38)
                    goto LABEL_97;
                  __p = (void *)(v20 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_58:
                  v35 = v20;
                  v36 = 0x1020C405E66F15BLL;
                  goto LABEL_96;
                case 6u:
                case 7u:
                  goto LABEL_97;
                case 8u:
                  if (*(_QWORD *)v20 == 1)
                  {
LABEL_60:
                    v23 = *(double *)&v20;
                  }
                  else
                  {
                    *(double *)&v62 = COERCE_DOUBLE(operator new());
                    v23 = *(double *)&v62;
                    *(_QWORD *)v62 = *(_QWORD *)v20;
                    *(_QWORD *)(v62 + 8) = *(_QWORD *)(v20 + 8);
                    v63 = *(_QWORD *)(v20 + 16);
                    *(_QWORD *)(v62 + 16) = v63;
                    if (v63)
                    {
                      v64 = (unsigned int *)(v63 + 8);
                      do
                        v65 = __ldxr(v64);
                      while (__stxr(v65 + 1, v64));
                    }
                    v66 = *(_OWORD *)(v20 + 24);
                    v67 = *(_OWORD *)(v20 + 40);
                    *(_OWORD *)(v62 + 56) = *(_OWORD *)(v20 + 56);
                    *(_OWORD *)(v62 + 40) = v67;
                    *(_OWORD *)(v62 + 24) = v66;
                    *(_QWORD *)v62 = 1;
                    do
                    {
                      v68 = __ldaxr((unint64_t *)v20);
                      v69 = v68 - 1;
                    }
                    while (__stlxr(v69, (unint64_t *)v20));
                    if (!v69)
                    {
                      boost::detail::shared_count::~shared_count((unsigned int **)(v20 + 16));
                      v35 = v20;
                      v36 = 0x1030C40F1F0227BLL;
LABEL_96:
                      MEMORY[0x219A19A08](v35, v36);
                    }
                  }
                  break;
                case 9u:
                  if (*(_QWORD *)v20 == 1)
                  {
                    v23 = *(double *)&v20;
                  }
                  else
                  {
                    v23 = COERCE_DOUBLE(operator new());
                    **(_QWORD **)&v23 = *(_QWORD *)v20;
                    turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v23 + 8), v20 + 8);
                    **(_QWORD **)&v23 = 1;
                    do
                    {
                      v41 = __ldaxr((unint64_t *)v20);
                      v42 = v41 - 1;
                    }
                    while (__stlxr(v42, (unint64_t *)v20));
                    if (!v42)
                    {
                      v43 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v20);
                      MEMORY[0x219A19A08](v43, 0x1030C407B73B9F7);
                    }
                  }
                  v45 = *(uint64_t **)(*(_QWORD *)&v23 + 24);
                  v44 = *(uint64_t **)(*(_QWORD *)&v23 + 32);
                  if (v44 != v45)
                  {
                    if (*(_QWORD *)(*(_QWORD *)&v23 + 8))
                    {
                      v46 = 1;
                      do
                      {
                        v47 = *v45++;
                        v46 *= v47;
                      }
                      while (v45 != v44);
                      if (v46)
                      {
                        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v23 + 8));
                        v48 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v23 + 32) - *(_QWORD *)(*(_QWORD *)&v23 + 24)) >> 3;
                        v551 = 0;
                        std::vector<unsigned long>::vector(&__p, v48, &v551);
                        do
                        {
                          v49 = (uint64_t *)__p;
                          v50 = 0;
                          if (v553 != __p)
                          {
                            v51 = (v553 - (_BYTE *)__p) >> 3;
                            v52 = *(uint64_t **)(*(_QWORD *)&v23 + 48);
                            if (v51 <= 1)
                              v51 = 1;
                            do
                            {
                              v54 = *v49++;
                              v53 = v54;
                              v55 = *v52++;
                              v50 += v55 * v53;
                              --v51;
                            }
                            while (v51);
                          }
                          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v23 + 8));
                          *(double *)(**(_QWORD **)(*(_QWORD *)&v23 + 8)
                                    + 8 * (*(_QWORD *)(*(_QWORD *)&v23 + 72) + v50)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v23 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v23 + 72) + v50))
                                                                                       * (double)v21;
                        }
                        while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(_QWORD *)&v23 + 8, (uint64_t *)&__p));
                        if (__p)
                        {
                          v553 = __p;
                          operator delete(__p);
                        }
                      }
                    }
                  }
                  goto LABEL_98;
                default:
                  goto LABEL_907;
              }
              goto LABEL_97;
            case 6:
            case 7:
LABEL_97:
              turi::flexible_type_fail(0);
LABEL_98:
              v70 = v4[1];
              v71 = *((unsigned __int8 *)v4 + 20);
              v72 = v4[4];
              v73 = *(double *)&v70;
              switch(*((_BYTE *)v4 + 20))
              {
                case 0:
LABEL_101:
                  *(_QWORD *)&v73 = v70 * v72;
                  goto LABEL_164;
                case 1:
LABEL_102:
                  v73 = *(double *)&v70 * (double)v72;
                  goto LABEL_164;
                case 2:
                case 3:
                case 4:
                case 5:
                case 8:
                case 9:
                  do
                    v74 = __ldaxr((unint64_t *)v70);
                  while (__stlxr(v74 + 1, (unint64_t *)v70));
                  v73 = *(double *)&v70;
                  switch(v71)
                  {
                    case 0:
                      goto LABEL_101;
                    case 1:
                      goto LABEL_102;
                    case 2:
                      if (*(_QWORD *)v70 == 1)
                        goto LABEL_126;
                      v73 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](*(_QWORD **)&v73, v70);
                      **(_QWORD **)&v73 = 1;
                      do
                      {
                        v75 = __ldaxr((unint64_t *)v70);
                        v76 = v75 - 1;
                      }
                      while (__stlxr(v76, (unint64_t *)v70));
                      if (v76)
                        goto LABEL_163;
                      if (*(char *)(v70 + 31) < 0)
                        operator delete(*(void **)(v70 + 8));
                      v77 = v70;
                      v78 = 0x1012C404EF22A49;
                      goto LABEL_162;
                    case 3:
                      if (*(_QWORD *)v70 == 1)
                      {
                        v73 = *(double *)&v70;
                      }
                      else
                      {
                        v73 = COERCE_DOUBLE(operator new());
                        std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v73, v70);
                        **(_QWORD **)&v73 = 1;
                        do
                        {
                          v98 = __ldaxr((unint64_t *)v70);
                          v99 = v98 - 1;
                        }
                        while (__stlxr(v99, (unint64_t *)v70));
                        if (!v99)
                        {
                          v100 = *(void **)(v70 + 8);
                          if (v100)
                          {
                            *(_QWORD *)(v70 + 16) = v100;
                            operator delete(v100);
                          }
                          MEMORY[0x219A19A08](v70, 0x1080C409938AC02);
                        }
                      }
                      v101 = *(double **)(*(_QWORD *)&v73 + 8);
                      v102 = *(_QWORD *)(*(_QWORD *)&v73 + 16) - (_QWORD)v101;
                      if (v102)
                      {
                        v103 = v102 >> 3;
                        if (v103 <= 1)
                          v103 = 1;
                        do
                        {
                          *v101 = *v101 * (double)v72;
                          ++v101;
                          --v103;
                        }
                        while (v103);
                      }
                      goto LABEL_164;
                    case 4:
                      if (*(_QWORD *)v70 == 1)
                        goto LABEL_126;
                      v73 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v73, v70);
                      **(_QWORD **)&v73 = 1;
                      do
                      {
                        v81 = __ldaxr((unint64_t *)v70);
                        v82 = v81 - 1;
                      }
                      while (__stlxr(v82, (unint64_t *)v70));
                      if (v82)
                        goto LABEL_163;
                      __p = (void *)(v70 + 8);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                      goto LABEL_124;
                    case 5:
                      if (*(_QWORD *)v70 == 1)
                        goto LABEL_126;
                      v73 = COERCE_DOUBLE(operator new());
                      std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v73, v70);
                      **(_QWORD **)&v73 = 1;
                      do
                      {
                        v79 = __ldaxr((unint64_t *)v70);
                        v80 = v79 - 1;
                      }
                      while (__stlxr(v80, (unint64_t *)v70));
                      if (v80)
                        goto LABEL_163;
                      __p = (void *)(v70 + 8);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_124:
                      v77 = v70;
                      v78 = 0x1020C405E66F15BLL;
                      goto LABEL_162;
                    case 6:
                    case 7:
                      goto LABEL_163;
                    case 8:
                      if (*(_QWORD *)v70 == 1)
                      {
LABEL_126:
                        v73 = *(double *)&v70;
                      }
                      else
                      {
                        *(double *)&v104 = COERCE_DOUBLE(operator new());
                        v73 = *(double *)&v104;
                        *(_QWORD *)v104 = *(_QWORD *)v70;
                        *(_QWORD *)(v104 + 8) = *(_QWORD *)(v70 + 8);
                        v105 = *(_QWORD *)(v70 + 16);
                        *(_QWORD *)(v104 + 16) = v105;
                        if (v105)
                        {
                          v106 = (unsigned int *)(v105 + 8);
                          do
                            v107 = __ldxr(v106);
                          while (__stxr(v107 + 1, v106));
                        }
                        v108 = *(_OWORD *)(v70 + 24);
                        v109 = *(_OWORD *)(v70 + 40);
                        *(_OWORD *)(v104 + 56) = *(_OWORD *)(v70 + 56);
                        *(_OWORD *)(v104 + 40) = v109;
                        *(_OWORD *)(v104 + 24) = v108;
                        *(_QWORD *)v104 = 1;
                        do
                        {
                          v110 = __ldaxr((unint64_t *)v70);
                          v111 = v110 - 1;
                        }
                        while (__stlxr(v111, (unint64_t *)v70));
                        if (!v111)
                        {
                          boost::detail::shared_count::~shared_count((unsigned int **)(v70 + 16));
                          v77 = v70;
                          v78 = 0x1030C40F1F0227BLL;
LABEL_162:
                          MEMORY[0x219A19A08](v77, v78);
                        }
                      }
                      break;
                    case 9:
                      if (*(_QWORD *)v70 == 1)
                      {
                        v73 = *(double *)&v70;
                      }
                      else
                      {
                        v73 = COERCE_DOUBLE(operator new());
                        **(_QWORD **)&v73 = *(_QWORD *)v70;
                        turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v73 + 8), v70 + 8);
                        **(_QWORD **)&v73 = 1;
                        do
                        {
                          v83 = __ldaxr((unint64_t *)v70);
                          v84 = v83 - 1;
                        }
                        while (__stlxr(v84, (unint64_t *)v70));
                        if (!v84)
                        {
                          v85 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v70);
                          MEMORY[0x219A19A08](v85, 0x1030C407B73B9F7);
                        }
                      }
                      v87 = *(uint64_t **)(*(_QWORD *)&v73 + 24);
                      v86 = *(uint64_t **)(*(_QWORD *)&v73 + 32);
                      if (v86 != v87)
                      {
                        if (*(_QWORD *)(*(_QWORD *)&v73 + 8))
                        {
                          v88 = 1;
                          do
                          {
                            v89 = *v87++;
                            v88 *= v89;
                          }
                          while (v87 != v86);
                          if (v88)
                          {
                            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v73 + 8));
                            v90 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v73 + 32) - *(_QWORD *)(*(_QWORD *)&v73 + 24)) >> 3;
                            v551 = 0;
                            std::vector<unsigned long>::vector(&__p, v90, &v551);
                            do
                            {
                              v91 = (uint64_t *)__p;
                              v92 = 0;
                              if (v553 != __p)
                              {
                                v93 = (v553 - (_BYTE *)__p) >> 3;
                                v94 = *(uint64_t **)(*(_QWORD *)&v73 + 48);
                                if (v93 <= 1)
                                  v93 = 1;
                                do
                                {
                                  v96 = *v91++;
                                  v95 = v96;
                                  v97 = *v94++;
                                  v92 += v97 * v95;
                                  --v93;
                                }
                                while (v93);
                              }
                              turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v73 + 8));
                              *(double *)(**(_QWORD **)(*(_QWORD *)&v73 + 8)
                                        + 8 * (*(_QWORD *)(*(_QWORD *)&v73 + 72) + v92)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v73 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v73 + 72) + v92))
                                                                                           * (double)v72;
                            }
                            while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(_QWORD *)&v73 + 8, (uint64_t *)&__p));
                            if (__p)
                            {
                              v553 = __p;
                              operator delete(__p);
                            }
                          }
                        }
                      }
                      goto LABEL_164;
                    default:
                      goto LABEL_908;
                  }
                  goto LABEL_163;
                case 6:
                case 7:
LABEL_163:
                  turi::flexible_type_fail(0);
LABEL_164:
                  if (v5 <= 9 && ((1 << v5) & 0x33C) != 0)
                  {
                    do
                      v112 = __ldaxr(*(unint64_t **)&v23);
                    while (__stlxr(v112 + 1, *(unint64_t **)&v23));
                  }
                  switch(v71)
                  {
                    case 0:
                      switch(v5)
                      {
                        case 0u:
                          v113 = *(_QWORD *)&v73 + *(_QWORD *)&v23;
                          goto LABEL_243;
                        case 1u:
                          v271 = v23 + (double)*(uint64_t *)&v73;
                          goto LABEL_530;
                        case 2u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v268 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](*(_QWORD **)&v268, *(uint64_t *)&v23);
                            **(_QWORD **)&v268 = 1;
                            do
                            {
                              v269 = __ldaxr(*(unint64_t **)&v23);
                              v270 = v269 - 1;
                            }
                            while (__stlxr(v270, *(unint64_t **)&v23));
                            *(double *)&v113 = v268;
                            if (!v270)
                            {
                              if (*(char *)(*(_QWORD *)&v23 + 31) < 0)
                                operator delete(*(void **)(*(_QWORD *)&v23 + 8));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1012C404EF22A49);
                              *(double *)&v113 = v268;
                            }
                          }
                          goto LABEL_683;
                        case 3u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v300 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v300, *(uint64_t *)&v23);
                            **(_QWORD **)&v300 = 1;
                            do
                            {
                              v301 = __ldaxr(*(unint64_t **)&v23);
                              v302 = v301 - 1;
                            }
                            while (__stlxr(v302, *(unint64_t **)&v23));
                            *(double *)&v113 = v300;
                            if (!v302)
                            {
                              v303 = *(void **)(*(_QWORD *)&v23 + 8);
                              if (v303)
                              {
                                *(_QWORD *)(*(_QWORD *)&v23 + 16) = v303;
                                operator delete(v303);
                              }
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1080C409938AC02);
                              *(double *)&v113 = v300;
                            }
                          }
                          v304 = *(double **)(v113 + 8);
                          v305 = *(_QWORD *)(v113 + 16) - (_QWORD)v304;
                          if (!v305)
                            goto LABEL_684;
                          v306 = v305 >> 3;
                          if (v306 <= 1)
                            v306 = 1;
                          do
                          {
                            *v304 = *v304 + (double)*(uint64_t *)&v73;
                            ++v304;
                            --v306;
                          }
                          while (v306);
                          goto LABEL_496;
                        case 4u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v204 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v204, *(uint64_t *)&v23);
                            **(_QWORD **)&v204 = 1;
                            do
                            {
                              v205 = __ldaxr(*(unint64_t **)&v23);
                              v206 = v205 - 1;
                            }
                            while (__stlxr(v206, *(unint64_t **)&v23));
                            *(double *)&v113 = v204;
                            if (!v206)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v204;
                            }
                          }
                          goto LABEL_683;
                        case 5u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v344 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v344, *(uint64_t *)&v23);
                            **(_QWORD **)&v344 = 1;
                            do
                            {
                              v345 = __ldaxr(*(unint64_t **)&v23);
                              v346 = v345 - 1;
                            }
                            while (__stlxr(v346, *(unint64_t **)&v23));
                            *(double *)&v113 = v344;
                            if (!v346)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v344;
                            }
                          }
                          goto LABEL_683;
                        case 6u:
                          v113 = *(_QWORD *)&v23 & 0xFF00000000000000 | (*(_QWORD *)&v73 + *(_QWORD *)&v23) & 0xFFFFFFFFFFFFFFLL;
                          goto LABEL_243;
                        case 7u:
                          goto LABEL_242;
                        case 8u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            *(double *)&v378 = COERCE_DOUBLE(operator new());
                            *(_QWORD *)v378 = **(_QWORD **)&v23;
                            v379 = *(_QWORD *)(*(_QWORD *)&v23 + 16);
                            *(_QWORD *)(v378 + 8) = *(_QWORD *)(*(_QWORD *)&v23 + 8);
                            *(_QWORD *)(v378 + 16) = v379;
                            if (v379)
                            {
                              v380 = (unsigned int *)(v379 + 8);
                              do
                                v381 = __ldxr(v380);
                              while (__stxr(v381 + 1, v380));
                            }
                            v382 = *(_OWORD *)(*(_QWORD *)&v23 + 24);
                            v383 = *(_OWORD *)(*(_QWORD *)&v23 + 40);
                            *(_OWORD *)(v378 + 56) = *(_OWORD *)(*(_QWORD *)&v23 + 56);
                            *(_OWORD *)(v378 + 40) = v383;
                            *(_OWORD *)(v378 + 24) = v382;
                            *(_QWORD *)v378 = 1;
                            do
                            {
                              v384 = __ldaxr(*(unint64_t **)&v23);
                              v385 = v384 - 1;
                            }
                            while (__stlxr(v385, *(unint64_t **)&v23));
                            v113 = v378;
                            if (!v385)
                            {
                              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v23 + 16));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1030C40F1F0227BLL);
                              v113 = v378;
                            }
                          }
                          goto LABEL_683;
                        case 9u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v233 = COERCE_DOUBLE(operator new());
                            **(_QWORD **)&v233 = **(_QWORD **)&v23;
                            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v233 + 8), *(_QWORD *)&v23 + 8);
                            **(_QWORD **)&v233 = 1;
                            do
                            {
                              v234 = __ldaxr(*(unint64_t **)&v23);
                              v235 = v234 - 1;
                            }
                            while (__stlxr(v235, *(unint64_t **)&v23));
                            *(double *)&v113 = v233;
                            if (!v235)
                            {
                              v236 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v23);
                              MEMORY[0x219A19A08](v236, 0x1030C407B73B9F7);
                              *(double *)&v113 = v233;
                            }
                          }
                          v238 = *(uint64_t **)(v113 + 24);
                          v237 = *(uint64_t **)(v113 + 32);
                          if (v237 == v238 || !*(_QWORD *)(v113 + 8))
                            goto LABEL_684;
                          v239 = 1;
                          do
                          {
                            v240 = *v238++;
                            v239 *= v240;
                          }
                          while (v238 != v237);
                          if (!v239)
                            goto LABEL_496;
                          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v113 + 8));
                          v241 = (uint64_t)(*(_QWORD *)(v113 + 32) - *(_QWORD *)(v113 + 24)) >> 3;
                          v551 = 0;
                          std::vector<unsigned long>::vector(&__p, v241, &v551);
                          do
                          {
                            v242 = (uint64_t *)__p;
                            v243 = 0;
                            if (v553 != __p)
                            {
                              v244 = (v553 - (_BYTE *)__p) >> 3;
                              v245 = *(uint64_t **)(v113 + 48);
                              if (v244 <= 1)
                                v244 = 1;
                              do
                              {
                                v247 = *v242++;
                                v246 = v247;
                                v248 = *v245++;
                                v243 += v248 * v246;
                                --v244;
                              }
                              while (v244);
                            }
                            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v113 + 8));
                            *(double *)(**(_QWORD **)(v113 + 8) + 8 * (*(_QWORD *)(v113 + 72) + v243)) = *(double *)(**(_QWORD **)(v113 + 8) + 8 * (*(_QWORD *)(v113 + 72) + v243)) + (double)*(uint64_t *)&v73;
                          }
                          while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(v113 + 8, (uint64_t *)&__p));
                          break;
                        default:
                          goto LABEL_908;
                      }
                      goto LABEL_423;
                    case 1:
                      switch(v5)
                      {
                        case 0u:
                          v113 = (uint64_t)(v73 + (double)*(uint64_t *)&v23);
                          goto LABEL_243;
                        case 1u:
                          v271 = v73 + v23;
LABEL_530:
                          *(double *)&v113 = v271;
                          goto LABEL_243;
                        case 2u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v307 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](*(_QWORD **)&v307, *(uint64_t *)&v23);
                            **(_QWORD **)&v307 = 1;
                            do
                            {
                              v308 = __ldaxr(*(unint64_t **)&v23);
                              v309 = v308 - 1;
                            }
                            while (__stlxr(v309, *(unint64_t **)&v23));
                            *(double *)&v113 = v307;
                            if (!v309)
                            {
                              if (*(char *)(*(_QWORD *)&v23 + 31) < 0)
                                operator delete(*(void **)(*(_QWORD *)&v23 + 8));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1012C404EF22A49);
                              *(double *)&v113 = v307;
                            }
                          }
                          goto LABEL_683;
                        case 3u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v207 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v207, *(uint64_t *)&v23);
                            **(_QWORD **)&v207 = 1;
                            do
                            {
                              v208 = __ldaxr(*(unint64_t **)&v23);
                              v209 = v208 - 1;
                            }
                            while (__stlxr(v209, *(unint64_t **)&v23));
                            *(double *)&v113 = v207;
                            if (!v209)
                            {
                              v210 = *(void **)(*(_QWORD *)&v23 + 8);
                              if (v210)
                              {
                                *(_QWORD *)(*(_QWORD *)&v23 + 16) = v210;
                                operator delete(v210);
                              }
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1080C409938AC02);
                              *(double *)&v113 = v207;
                            }
                          }
                          v211 = *(double **)(v113 + 8);
                          v212 = *(_QWORD *)(v113 + 16) - (_QWORD)v211;
                          if (!v212)
                            goto LABEL_684;
                          v213 = v212 >> 3;
                          if (v213 <= 1)
                            v213 = 1;
                          do
                          {
                            *v211 = *v211 + v73;
                            ++v211;
                            --v213;
                          }
                          while (v213);
                          goto LABEL_496;
                        case 4u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v347 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v347, *(uint64_t *)&v23);
                            **(_QWORD **)&v347 = 1;
                            do
                            {
                              v348 = __ldaxr(*(unint64_t **)&v23);
                              v349 = v348 - 1;
                            }
                            while (__stlxr(v349, *(unint64_t **)&v23));
                            *(double *)&v113 = v347;
                            if (!v349)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v347;
                            }
                          }
                          goto LABEL_683;
                        case 5u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v375 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v375, *(uint64_t *)&v23);
                            **(_QWORD **)&v375 = 1;
                            do
                            {
                              v376 = __ldaxr(*(unint64_t **)&v23);
                              v377 = v376 - 1;
                            }
                            while (__stlxr(v377, *(unint64_t **)&v23));
                            *(double *)&v113 = v375;
                            if (!v377)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v375;
                            }
                          }
                          goto LABEL_683;
                        case 6u:
                          v310 = *(_QWORD *)&v23 + vcvtmd_s64_f64(v73);
                          v311 = (uint64_t)((v73 - (double)(uint64_t)floor(v73)) * 1000000.0) + (int)v22;
                          if (v311 > 999999)
                            ++v310;
                          v113 = *(_QWORD *)&v23 & 0xFF00000000000000 | v310 & 0xFFFFFFFFFFFFFFLL;
                          if (v311 <= 999999)
                            v22 = v311;
                          else
                            v22 = v311 - 1000000;
                          if (v22 >= 0xF4240)
                            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                          goto LABEL_243;
                        case 7u:
                          goto LABEL_242;
                        case 8u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            *(double *)&v386 = COERCE_DOUBLE(operator new());
                            *(_QWORD *)v386 = **(_QWORD **)&v23;
                            v387 = *(_QWORD *)(*(_QWORD *)&v23 + 16);
                            *(_QWORD *)(v386 + 8) = *(_QWORD *)(*(_QWORD *)&v23 + 8);
                            *(_QWORD *)(v386 + 16) = v387;
                            if (v387)
                            {
                              v388 = (unsigned int *)(v387 + 8);
                              do
                                v389 = __ldxr(v388);
                              while (__stxr(v389 + 1, v388));
                            }
                            v390 = *(_OWORD *)(*(_QWORD *)&v23 + 24);
                            v391 = *(_OWORD *)(*(_QWORD *)&v23 + 40);
                            *(_OWORD *)(v386 + 56) = *(_OWORD *)(*(_QWORD *)&v23 + 56);
                            *(_OWORD *)(v386 + 40) = v391;
                            *(_OWORD *)(v386 + 24) = v390;
                            *(_QWORD *)v386 = 1;
                            do
                            {
                              v392 = __ldaxr(*(unint64_t **)&v23);
                              v393 = v392 - 1;
                            }
                            while (__stlxr(v393, *(unint64_t **)&v23));
                            v113 = v386;
                            if (!v393)
                            {
                              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v23 + 16));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1030C40F1F0227BLL);
                              v113 = v386;
                            }
                          }
                          goto LABEL_683;
                        case 9u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v249 = COERCE_DOUBLE(operator new());
                            **(_QWORD **)&v249 = **(_QWORD **)&v23;
                            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v249 + 8), *(_QWORD *)&v23 + 8);
                            **(_QWORD **)&v249 = 1;
                            do
                            {
                              v250 = __ldaxr(*(unint64_t **)&v23);
                              v251 = v250 - 1;
                            }
                            while (__stlxr(v251, *(unint64_t **)&v23));
                            *(double *)&v113 = v249;
                            if (!v251)
                            {
                              v252 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v23);
                              MEMORY[0x219A19A08](v252, 0x1030C407B73B9F7);
                              *(double *)&v113 = v249;
                            }
                          }
                          v254 = *(uint64_t **)(v113 + 24);
                          v253 = *(uint64_t **)(v113 + 32);
                          if (v253 == v254 || !*(_QWORD *)(v113 + 8))
                            goto LABEL_684;
                          v255 = 1;
                          do
                          {
                            v256 = *v254++;
                            v255 *= v256;
                          }
                          while (v254 != v253);
                          if (!v255)
                            goto LABEL_496;
                          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v113 + 8));
                          v257 = (uint64_t)(*(_QWORD *)(v113 + 32) - *(_QWORD *)(v113 + 24)) >> 3;
                          v551 = 0;
                          std::vector<unsigned long>::vector(&__p, v257, &v551);
                          do
                          {
                            v258 = (uint64_t *)__p;
                            v259 = 0;
                            if (v553 != __p)
                            {
                              v260 = (v553 - (_BYTE *)__p) >> 3;
                              v261 = *(uint64_t **)(v113 + 48);
                              if (v260 <= 1)
                                v260 = 1;
                              do
                              {
                                v263 = *v258++;
                                v262 = v263;
                                v264 = *v261++;
                                v259 += v264 * v262;
                                --v260;
                              }
                              while (v260);
                            }
                            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v113 + 8));
                            *(double *)(**(_QWORD **)(v113 + 8) + 8 * (*(_QWORD *)(v113 + 72) + v259)) = *(double *)(**(_QWORD **)(v113 + 8) + 8 * (*(_QWORD *)(v113 + 72) + v259)) + v73;
                          }
                          while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(v113 + 8, (uint64_t *)&__p));
                          break;
                        default:
                          goto LABEL_908;
                      }
                      goto LABEL_423;
                    case 2:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_242;
                        case 2u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v120 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](*(_QWORD **)&v120, *(uint64_t *)&v23);
                            **(_QWORD **)&v120 = 1;
                            do
                            {
                              v121 = __ldaxr(*(unint64_t **)&v23);
                              v122 = v121 - 1;
                            }
                            while (__stlxr(v122, *(unint64_t **)&v23));
                            *(double *)&v113 = v120;
                            if (!v122)
                            {
                              if (*(char *)(*(_QWORD *)&v23 + 31) < 0)
                                operator delete(*(void **)(*(_QWORD *)&v23 + 8));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1012C404EF22A49);
                              *(double *)&v113 = v120;
                            }
                          }
                          v123 = *(char *)(*(_QWORD *)&v73 + 31);
                          if (v123 >= 0)
                            v124 = (const std::string::value_type *)(*(_QWORD *)&v73 + 8);
                          else
                            v124 = *(const std::string::value_type **)(*(_QWORD *)&v73 + 8);
                          if (v123 >= 0)
                            v125 = *(unsigned __int8 *)(*(_QWORD *)&v73 + 31);
                          else
                            v125 = *(_QWORD *)(*(_QWORD *)&v73 + 16);
                          std::string::append((std::string *)(v113 + 8), v124, v125);
                          goto LABEL_684;
                        case 3u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v148 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v148, *(uint64_t *)&v23);
                            **(_QWORD **)&v148 = 1;
                            do
                            {
                              v149 = __ldaxr(*(unint64_t **)&v23);
                              v150 = v149 - 1;
                            }
                            while (__stlxr(v150, *(unint64_t **)&v23));
                            *(double *)&v113 = v148;
                            if (!v150)
                            {
                              v151 = *(void **)(*(_QWORD *)&v23 + 8);
                              if (v151)
                              {
                                *(_QWORD *)(*(_QWORD *)&v23 + 16) = v151;
                                operator delete(v151);
                              }
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1080C409938AC02);
                              *(double *)&v113 = v148;
                            }
                          }
                          goto LABEL_683;
                        case 4u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v327 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v327, *(uint64_t *)&v23);
                            **(_QWORD **)&v327 = 1;
                            do
                            {
                              v328 = __ldaxr(*(unint64_t **)&v23);
                              v329 = v328 - 1;
                            }
                            while (__stlxr(v329, *(unint64_t **)&v23));
                            *(double *)&v113 = v327;
                            if (!v329)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v327;
                            }
                          }
                          goto LABEL_683;
                        case 5u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v265 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v265, *(uint64_t *)&v23);
                            **(_QWORD **)&v265 = 1;
                            do
                            {
                              v266 = __ldaxr(*(unint64_t **)&v23);
                              v267 = v266 - 1;
                            }
                            while (__stlxr(v267, *(unint64_t **)&v23));
                            *(double *)&v113 = v265;
                            if (!v267)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v265;
                            }
                          }
                          goto LABEL_683;
                        case 8u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            *(double *)&v330 = COERCE_DOUBLE(operator new());
                            *(_QWORD *)v330 = **(_QWORD **)&v23;
                            v331 = *(_QWORD *)(*(_QWORD *)&v23 + 16);
                            *(_QWORD *)(v330 + 8) = *(_QWORD *)(*(_QWORD *)&v23 + 8);
                            *(_QWORD *)(v330 + 16) = v331;
                            if (v331)
                            {
                              v332 = (unsigned int *)(v331 + 8);
                              do
                                v333 = __ldxr(v332);
                              while (__stxr(v333 + 1, v332));
                            }
                            v334 = *(_OWORD *)(*(_QWORD *)&v23 + 24);
                            v335 = *(_OWORD *)(*(_QWORD *)&v23 + 40);
                            *(_OWORD *)(v330 + 56) = *(_OWORD *)(*(_QWORD *)&v23 + 56);
                            *(_OWORD *)(v330 + 40) = v335;
                            *(_OWORD *)(v330 + 24) = v334;
                            *(_QWORD *)v330 = 1;
                            do
                            {
                              v336 = __ldaxr(*(unint64_t **)&v23);
                              v337 = v336 - 1;
                            }
                            while (__stlxr(v337, *(unint64_t **)&v23));
                            v113 = v330;
                            if (!v337)
                            {
                              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v23 + 16));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1030C40F1F0227BLL);
                              v113 = v330;
                            }
                          }
                          goto LABEL_683;
                        case 9u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v193 = COERCE_DOUBLE(operator new());
                            **(_QWORD **)&v193 = **(_QWORD **)&v23;
                            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v193 + 8), *(_QWORD *)&v23 + 8);
                            **(_QWORD **)&v193 = 1;
                            do
                            {
                              v194 = __ldaxr(*(unint64_t **)&v23);
                              v195 = v194 - 1;
                            }
                            while (__stlxr(v195, *(unint64_t **)&v23));
                            *(double *)&v113 = v193;
                            if (!v195)
                            {
                              v196 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v23);
                              MEMORY[0x219A19A08](v196, 0x1030C407B73B9F7);
                              *(double *)&v113 = v193;
                            }
                          }
                          goto LABEL_683;
                        default:
                          goto LABEL_908;
                      }
                    case 3:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_242;
                        case 2u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v126 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](*(_QWORD **)&v126, *(uint64_t *)&v23);
                            **(_QWORD **)&v126 = 1;
                            do
                            {
                              v127 = __ldaxr(*(unint64_t **)&v23);
                              v128 = v127 - 1;
                            }
                            while (__stlxr(v128, *(unint64_t **)&v23));
                            *(double *)&v113 = v126;
                            if (!v128)
                            {
                              if (*(char *)(*(_QWORD *)&v23 + 31) < 0)
                                operator delete(*(void **)(*(_QWORD *)&v23 + 8));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1012C404EF22A49);
                              *(double *)&v113 = v126;
                            }
                          }
                          goto LABEL_683;
                        case 3u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v156 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v156, *(uint64_t *)&v23);
                            **(_QWORD **)&v156 = 1;
                            do
                            {
                              v157 = __ldaxr(*(unint64_t **)&v23);
                              v158 = v157 - 1;
                            }
                            while (__stlxr(v158, *(unint64_t **)&v23));
                            *(double *)&v113 = v156;
                            if (!v158)
                            {
                              v159 = *(void **)(*(_QWORD *)&v23 + 8);
                              if (v159)
                              {
                                *(_QWORD *)(*(_QWORD *)&v23 + 16) = v159;
                                operator delete(v159);
                              }
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1080C409938AC02);
                              *(double *)&v113 = v156;
                            }
                          }
                          turi::flexible_type_fail(*(_QWORD *)(v113 + 16) - *(_QWORD *)(v113 + 8) == *(_QWORD *)(*(_QWORD *)&v73 + 16) - *(_QWORD *)(*(_QWORD *)&v73 + 8));
                          v160 = *(double **)(v113 + 8);
                          v161 = *(_QWORD *)(v113 + 16) - (_QWORD)v160;
                          if (!v161)
                            goto LABEL_684;
                          v162 = v161 >> 3;
                          v163 = *(double **)(*(_QWORD *)&v73 + 8);
                          if (v162 <= 1)
                            v162 = 1;
                          do
                          {
                            v164 = *v163++;
                            *v160 = v164 + *v160;
                            ++v160;
                            --v162;
                          }
                          while (v162);
                          break;
                        case 4u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v341 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v341, *(uint64_t *)&v23);
                            **(_QWORD **)&v341 = 1;
                            do
                            {
                              v342 = __ldaxr(*(unint64_t **)&v23);
                              v343 = v342 - 1;
                            }
                            while (__stlxr(v343, *(unint64_t **)&v23));
                            *(double *)&v113 = v341;
                            if (!v343)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v341;
                            }
                          }
                          goto LABEL_683;
                        case 5u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v287 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v287, *(uint64_t *)&v23);
                            **(_QWORD **)&v287 = 1;
                            do
                            {
                              v288 = __ldaxr(*(unint64_t **)&v23);
                              v289 = v288 - 1;
                            }
                            while (__stlxr(v289, *(unint64_t **)&v23));
                            *(double *)&v113 = v287;
                            if (!v289)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v287;
                            }
                          }
                          goto LABEL_683;
                        case 8u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            *(double *)&v356 = COERCE_DOUBLE(operator new());
                            *(_QWORD *)v356 = **(_QWORD **)&v23;
                            v357 = *(_QWORD *)(*(_QWORD *)&v23 + 16);
                            *(_QWORD *)(v356 + 8) = *(_QWORD *)(*(_QWORD *)&v23 + 8);
                            *(_QWORD *)(v356 + 16) = v357;
                            if (v357)
                            {
                              v358 = (unsigned int *)(v357 + 8);
                              do
                                v359 = __ldxr(v358);
                              while (__stxr(v359 + 1, v358));
                            }
                            v360 = *(_OWORD *)(*(_QWORD *)&v23 + 24);
                            v361 = *(_OWORD *)(*(_QWORD *)&v23 + 40);
                            *(_OWORD *)(v356 + 56) = *(_OWORD *)(*(_QWORD *)&v23 + 56);
                            *(_OWORD *)(v356 + 40) = v361;
                            *(_OWORD *)(v356 + 24) = v360;
                            *(_QWORD *)v356 = 1;
                            do
                            {
                              v362 = __ldaxr(*(unint64_t **)&v23);
                              v363 = v362 - 1;
                            }
                            while (__stlxr(v363, *(unint64_t **)&v23));
                            v113 = v356;
                            if (!v363)
                            {
                              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v23 + 16));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1030C40F1F0227BLL);
                              v113 = v356;
                            }
                          }
                          goto LABEL_683;
                        case 9u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v218 = COERCE_DOUBLE(operator new());
                            **(_QWORD **)&v218 = **(_QWORD **)&v23;
                            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v218 + 8), *(_QWORD *)&v23 + 8);
                            **(_QWORD **)&v218 = 1;
                            do
                            {
                              v219 = __ldaxr(*(unint64_t **)&v23);
                              v220 = v219 - 1;
                            }
                            while (__stlxr(v220, *(unint64_t **)&v23));
                            *(double *)&v113 = v218;
                            if (!v220)
                            {
                              v221 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v23);
                              MEMORY[0x219A19A08](v221, 0x1030C407B73B9F7);
                              *(double *)&v113 = v218;
                            }
                          }
                          goto LABEL_683;
                        default:
                          goto LABEL_908;
                      }
                      goto LABEL_496;
                    case 4:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_242;
                        case 2u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v114 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](*(_QWORD **)&v114, *(uint64_t *)&v23);
                            **(_QWORD **)&v114 = 1;
                            do
                            {
                              v115 = __ldaxr(*(unint64_t **)&v23);
                              v116 = v115 - 1;
                            }
                            while (__stlxr(v116, *(unint64_t **)&v23));
                            *(double *)&v113 = v114;
                            if (!v116)
                            {
                              if (*(char *)(*(_QWORD *)&v23 + 31) < 0)
                                operator delete(*(void **)(*(_QWORD *)&v23 + 8));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1012C404EF22A49);
                              *(double *)&v113 = v114;
                            }
                          }
                          goto LABEL_683;
                        case 3u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v140 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v140, *(uint64_t *)&v23);
                            **(_QWORD **)&v140 = 1;
                            do
                            {
                              v141 = __ldaxr(*(unint64_t **)&v23);
                              v142 = v141 - 1;
                            }
                            while (__stlxr(v142, *(unint64_t **)&v23));
                            *(double *)&v113 = v140;
                            if (!v142)
                            {
                              v143 = *(void **)(*(_QWORD *)&v23 + 8);
                              if (v143)
                              {
                                *(_QWORD *)(*(_QWORD *)&v23 + 16) = v143;
                                operator delete(v143);
                              }
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1080C409938AC02);
                              *(double *)&v113 = v140;
                            }
                          }
                          goto LABEL_683;
                        case 4u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v272 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v272, *(uint64_t *)&v23);
                            **(_QWORD **)&v272 = 1;
                            do
                            {
                              v273 = __ldaxr(*(unint64_t **)&v23);
                              v274 = v273 - 1;
                            }
                            while (__stlxr(v274, *(unint64_t **)&v23));
                            *(double *)&v113 = v272;
                            if (!v274)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v272;
                            }
                          }
                          goto LABEL_683;
                        case 5u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v197 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v197, *(uint64_t *)&v23);
                            **(_QWORD **)&v197 = 1;
                            do
                            {
                              v198 = __ldaxr(*(unint64_t **)&v23);
                              v199 = v198 - 1;
                            }
                            while (__stlxr(v199, *(unint64_t **)&v23));
                            *(double *)&v113 = v197;
                            if (!v199)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v197;
                            }
                          }
                          goto LABEL_683;
                        case 8u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            *(double *)&v275 = COERCE_DOUBLE(operator new());
                            *(_QWORD *)v275 = **(_QWORD **)&v23;
                            v276 = *(_QWORD *)(*(_QWORD *)&v23 + 16);
                            *(_QWORD *)(v275 + 8) = *(_QWORD *)(*(_QWORD *)&v23 + 8);
                            *(_QWORD *)(v275 + 16) = v276;
                            if (v276)
                            {
                              v277 = (unsigned int *)(v276 + 8);
                              do
                                v278 = __ldxr(v277);
                              while (__stxr(v278 + 1, v277));
                            }
                            v279 = *(_OWORD *)(*(_QWORD *)&v23 + 24);
                            v280 = *(_OWORD *)(*(_QWORD *)&v23 + 40);
                            *(_OWORD *)(v275 + 56) = *(_OWORD *)(*(_QWORD *)&v23 + 56);
                            *(_OWORD *)(v275 + 40) = v280;
                            *(_OWORD *)(v275 + 24) = v279;
                            *(_QWORD *)v275 = 1;
                            do
                            {
                              v281 = __ldaxr(*(unint64_t **)&v23);
                              v282 = v281 - 1;
                            }
                            while (__stlxr(v282, *(unint64_t **)&v23));
                            v113 = v275;
                            if (!v282)
                            {
                              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v23 + 16));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1030C40F1F0227BLL);
                              v113 = v275;
                            }
                          }
                          goto LABEL_683;
                        case 9u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v152 = COERCE_DOUBLE(operator new());
                            **(_QWORD **)&v152 = **(_QWORD **)&v23;
                            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v152 + 8), *(_QWORD *)&v23 + 8);
                            **(_QWORD **)&v152 = 1;
                            do
                            {
                              v153 = __ldaxr(*(unint64_t **)&v23);
                              v154 = v153 - 1;
                            }
                            while (__stlxr(v154, *(unint64_t **)&v23));
                            *(double *)&v113 = v152;
                            if (!v154)
                            {
                              v155 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v23);
                              MEMORY[0x219A19A08](v155, 0x1030C407B73B9F7);
                              *(double *)&v113 = v152;
                            }
                          }
                          goto LABEL_683;
                        default:
                          goto LABEL_908;
                      }
                    case 5:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_242;
                        case 2u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v132 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](*(_QWORD **)&v132, *(uint64_t *)&v23);
                            **(_QWORD **)&v132 = 1;
                            do
                            {
                              v133 = __ldaxr(*(unint64_t **)&v23);
                              v134 = v133 - 1;
                            }
                            while (__stlxr(v134, *(unint64_t **)&v23));
                            *(double *)&v113 = v132;
                            if (!v134)
                            {
                              if (*(char *)(*(_QWORD *)&v23 + 31) < 0)
                                operator delete(*(void **)(*(_QWORD *)&v23 + 8));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1012C404EF22A49);
                              *(double *)&v113 = v132;
                            }
                          }
                          goto LABEL_683;
                        case 3u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v200 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v200, *(uint64_t *)&v23);
                            **(_QWORD **)&v200 = 1;
                            do
                            {
                              v201 = __ldaxr(*(unint64_t **)&v23);
                              v202 = v201 - 1;
                            }
                            while (__stlxr(v202, *(unint64_t **)&v23));
                            *(double *)&v113 = v200;
                            if (!v202)
                            {
                              v203 = *(void **)(*(_QWORD *)&v23 + 8);
                              if (v203)
                              {
                                *(_QWORD *)(*(_QWORD *)&v23 + 16) = v203;
                                operator delete(v203);
                              }
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1080C409938AC02);
                              *(double *)&v113 = v200;
                            }
                          }
                          goto LABEL_683;
                        case 4u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v394 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v394, *(uint64_t *)&v23);
                            **(_QWORD **)&v394 = 1;
                            do
                            {
                              v395 = __ldaxr(*(unint64_t **)&v23);
                              v396 = v395 - 1;
                            }
                            while (__stlxr(v396, *(unint64_t **)&v23));
                            *(double *)&v113 = v394;
                            if (!v396)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v394;
                            }
                          }
                          goto LABEL_683;
                        case 5u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v338 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v338, *(uint64_t *)&v23);
                            **(_QWORD **)&v338 = 1;
                            do
                            {
                              v339 = __ldaxr(*(unint64_t **)&v23);
                              v340 = v339 - 1;
                            }
                            while (__stlxr(v340, *(unint64_t **)&v23));
                            *(double *)&v113 = v338;
                            if (!v340)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v338;
                            }
                          }
                          goto LABEL_683;
                        case 8u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            *(double *)&v397 = COERCE_DOUBLE(operator new());
                            *(_QWORD *)v397 = **(_QWORD **)&v23;
                            v398 = *(_QWORD *)(*(_QWORD *)&v23 + 16);
                            *(_QWORD *)(v397 + 8) = *(_QWORD *)(*(_QWORD *)&v23 + 8);
                            *(_QWORD *)(v397 + 16) = v398;
                            if (v398)
                            {
                              v399 = (unsigned int *)(v398 + 8);
                              do
                                v400 = __ldxr(v399);
                              while (__stxr(v400 + 1, v399));
                            }
                            v401 = *(_OWORD *)(*(_QWORD *)&v23 + 24);
                            v402 = *(_OWORD *)(*(_QWORD *)&v23 + 40);
                            *(_OWORD *)(v397 + 56) = *(_OWORD *)(*(_QWORD *)&v23 + 56);
                            *(_OWORD *)(v397 + 40) = v402;
                            *(_OWORD *)(v397 + 24) = v401;
                            *(_QWORD *)v397 = 1;
                            do
                            {
                              v403 = __ldaxr(*(unint64_t **)&v23);
                              v404 = v403 - 1;
                            }
                            while (__stlxr(v404, *(unint64_t **)&v23));
                            v113 = v397;
                            if (!v404)
                            {
                              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v23 + 16));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1030C40F1F0227BLL);
                              v113 = v397;
                            }
                          }
                          goto LABEL_683;
                        case 9u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v283 = COERCE_DOUBLE(operator new());
                            **(_QWORD **)&v283 = **(_QWORD **)&v23;
                            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v283 + 8), *(_QWORD *)&v23 + 8);
                            **(_QWORD **)&v283 = 1;
                            do
                            {
                              v284 = __ldaxr(*(unint64_t **)&v23);
                              v285 = v284 - 1;
                            }
                            while (__stlxr(v285, *(unint64_t **)&v23));
                            *(double *)&v113 = v283;
                            if (!v285)
                            {
                              v286 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v23);
                              MEMORY[0x219A19A08](v286, 0x1030C407B73B9F7);
                              *(double *)&v113 = v283;
                            }
                          }
                          goto LABEL_683;
                        default:
                          goto LABEL_908;
                      }
                    case 6:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_242;
                        case 2u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v135 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](*(_QWORD **)&v135, *(uint64_t *)&v23);
                            **(_QWORD **)&v135 = 1;
                            do
                            {
                              v136 = __ldaxr(*(unint64_t **)&v23);
                              v137 = v136 - 1;
                            }
                            while (__stlxr(v137, *(unint64_t **)&v23));
                            *(double *)&v113 = v135;
                            if (!v137)
                            {
                              if (*(char *)(*(_QWORD *)&v23 + 31) < 0)
                                operator delete(*(void **)(*(_QWORD *)&v23 + 8));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1012C404EF22A49);
                              *(double *)&v113 = v135;
                            }
                          }
                          goto LABEL_683;
                        case 3u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v214 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v214, *(uint64_t *)&v23);
                            **(_QWORD **)&v214 = 1;
                            do
                            {
                              v215 = __ldaxr(*(unint64_t **)&v23);
                              v216 = v215 - 1;
                            }
                            while (__stlxr(v216, *(unint64_t **)&v23));
                            *(double *)&v113 = v214;
                            if (!v216)
                            {
                              v217 = *(void **)(*(_QWORD *)&v23 + 8);
                              if (v217)
                              {
                                *(_QWORD *)(*(_QWORD *)&v23 + 16) = v217;
                                operator delete(v217);
                              }
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1080C409938AC02);
                              *(double *)&v113 = v214;
                            }
                          }
                          goto LABEL_683;
                        case 4u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v405 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v405, *(uint64_t *)&v23);
                            **(_QWORD **)&v405 = 1;
                            do
                            {
                              v406 = __ldaxr(*(unint64_t **)&v23);
                              v407 = v406 - 1;
                            }
                            while (__stlxr(v407, *(unint64_t **)&v23));
                            *(double *)&v113 = v405;
                            if (!v407)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v405;
                            }
                          }
                          goto LABEL_683;
                        case 5u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v353 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v353, *(uint64_t *)&v23);
                            **(_QWORD **)&v353 = 1;
                            do
                            {
                              v354 = __ldaxr(*(unint64_t **)&v23);
                              v355 = v354 - 1;
                            }
                            while (__stlxr(v355, *(unint64_t **)&v23));
                            *(double *)&v113 = v353;
                            if (!v355)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v353;
                            }
                          }
                          goto LABEL_683;
                        case 8u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            *(double *)&v408 = COERCE_DOUBLE(operator new());
                            *(_QWORD *)v408 = **(_QWORD **)&v23;
                            v409 = *(_QWORD *)(*(_QWORD *)&v23 + 16);
                            *(_QWORD *)(v408 + 8) = *(_QWORD *)(*(_QWORD *)&v23 + 8);
                            *(_QWORD *)(v408 + 16) = v409;
                            if (v409)
                            {
                              v410 = (unsigned int *)(v409 + 8);
                              do
                                v411 = __ldxr(v410);
                              while (__stxr(v411 + 1, v410));
                            }
                            v412 = *(_OWORD *)(*(_QWORD *)&v23 + 24);
                            v413 = *(_OWORD *)(*(_QWORD *)&v23 + 40);
                            *(_OWORD *)(v408 + 56) = *(_OWORD *)(*(_QWORD *)&v23 + 56);
                            *(_OWORD *)(v408 + 40) = v413;
                            *(_OWORD *)(v408 + 24) = v412;
                            *(_QWORD *)v408 = 1;
                            do
                            {
                              v414 = __ldaxr(*(unint64_t **)&v23);
                              v415 = v414 - 1;
                            }
                            while (__stlxr(v415, *(unint64_t **)&v23));
                            v113 = v408;
                            if (!v415)
                            {
                              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v23 + 16));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1030C40F1F0227BLL);
                              v113 = v408;
                            }
                          }
                          goto LABEL_683;
                        case 9u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v296 = COERCE_DOUBLE(operator new());
                            **(_QWORD **)&v296 = **(_QWORD **)&v23;
                            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v296 + 8), *(_QWORD *)&v23 + 8);
                            **(_QWORD **)&v296 = 1;
                            do
                            {
                              v297 = __ldaxr(*(unint64_t **)&v23);
                              v298 = v297 - 1;
                            }
                            while (__stlxr(v298, *(unint64_t **)&v23));
                            *(double *)&v113 = v296;
                            if (!v298)
                            {
                              v299 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v23);
                              MEMORY[0x219A19A08](v299, 0x1030C407B73B9F7);
                              *(double *)&v113 = v296;
                            }
                          }
                          goto LABEL_683;
                        default:
                          goto LABEL_908;
                      }
                    case 7:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_242;
                        case 2u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v129 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](*(_QWORD **)&v129, *(uint64_t *)&v23);
                            **(_QWORD **)&v129 = 1;
                            do
                            {
                              v130 = __ldaxr(*(unint64_t **)&v23);
                              v131 = v130 - 1;
                            }
                            while (__stlxr(v131, *(unint64_t **)&v23));
                            *(double *)&v113 = v129;
                            if (!v131)
                            {
                              if (*(char *)(*(_QWORD *)&v23 + 31) < 0)
                                operator delete(*(void **)(*(_QWORD *)&v23 + 8));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1012C404EF22A49);
                              *(double *)&v113 = v129;
                            }
                          }
                          goto LABEL_683;
                        case 3u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v165 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v165, *(uint64_t *)&v23);
                            **(_QWORD **)&v165 = 1;
                            do
                            {
                              v166 = __ldaxr(*(unint64_t **)&v23);
                              v167 = v166 - 1;
                            }
                            while (__stlxr(v167, *(unint64_t **)&v23));
                            *(double *)&v113 = v165;
                            if (!v167)
                            {
                              v168 = *(void **)(*(_QWORD *)&v23 + 8);
                              if (v168)
                              {
                                *(_QWORD *)(*(_QWORD *)&v23 + 16) = v168;
                                operator delete(v168);
                              }
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1080C409938AC02);
                              *(double *)&v113 = v165;
                            }
                          }
                          goto LABEL_683;
                        case 4u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v350 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v350, *(uint64_t *)&v23);
                            **(_QWORD **)&v350 = 1;
                            do
                            {
                              v351 = __ldaxr(*(unint64_t **)&v23);
                              v352 = v351 - 1;
                            }
                            while (__stlxr(v352, *(unint64_t **)&v23));
                            *(double *)&v113 = v350;
                            if (!v352)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v350;
                            }
                          }
                          goto LABEL_683;
                        case 5u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v290 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v290, *(uint64_t *)&v23);
                            **(_QWORD **)&v290 = 1;
                            do
                            {
                              v291 = __ldaxr(*(unint64_t **)&v23);
                              v292 = v291 - 1;
                            }
                            while (__stlxr(v292, *(unint64_t **)&v23));
                            *(double *)&v113 = v290;
                            if (!v292)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v290;
                            }
                          }
                          goto LABEL_683;
                        case 8u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            *(double *)&v364 = COERCE_DOUBLE(operator new());
                            *(_QWORD *)v364 = **(_QWORD **)&v23;
                            v365 = *(_QWORD *)(*(_QWORD *)&v23 + 16);
                            *(_QWORD *)(v364 + 8) = *(_QWORD *)(*(_QWORD *)&v23 + 8);
                            *(_QWORD *)(v364 + 16) = v365;
                            if (v365)
                            {
                              v366 = (unsigned int *)(v365 + 8);
                              do
                                v367 = __ldxr(v366);
                              while (__stxr(v367 + 1, v366));
                            }
                            v368 = *(_OWORD *)(*(_QWORD *)&v23 + 24);
                            v369 = *(_OWORD *)(*(_QWORD *)&v23 + 40);
                            *(_OWORD *)(v364 + 56) = *(_OWORD *)(*(_QWORD *)&v23 + 56);
                            *(_OWORD *)(v364 + 40) = v369;
                            *(_OWORD *)(v364 + 24) = v368;
                            *(_QWORD *)v364 = 1;
                            do
                            {
                              v370 = __ldaxr(*(unint64_t **)&v23);
                              v371 = v370 - 1;
                            }
                            while (__stlxr(v371, *(unint64_t **)&v23));
                            v113 = v364;
                            if (!v371)
                            {
                              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v23 + 16));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1030C40F1F0227BLL);
                              v113 = v364;
                            }
                          }
                          goto LABEL_683;
                        case 9u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v229 = COERCE_DOUBLE(operator new());
                            **(_QWORD **)&v229 = **(_QWORD **)&v23;
                            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v229 + 8), *(_QWORD *)&v23 + 8);
                            **(_QWORD **)&v229 = 1;
                            do
                            {
                              v230 = __ldaxr(*(unint64_t **)&v23);
                              v231 = v230 - 1;
                            }
                            while (__stlxr(v231, *(unint64_t **)&v23));
                            *(double *)&v113 = v229;
                            if (!v231)
                            {
                              v232 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v23);
                              MEMORY[0x219A19A08](v232, 0x1030C407B73B9F7);
                              *(double *)&v113 = v229;
                            }
                          }
                          goto LABEL_683;
                        default:
                          goto LABEL_908;
                      }
                    case 8:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_242;
                        case 2u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v324 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](*(_QWORD **)&v324, *(uint64_t *)&v23);
                            **(_QWORD **)&v324 = 1;
                            do
                            {
                              v325 = __ldaxr(*(unint64_t **)&v23);
                              v326 = v325 - 1;
                            }
                            while (__stlxr(v326, *(unint64_t **)&v23));
                            *(double *)&v113 = v324;
                            if (!v326)
                            {
                              if (*(char *)(*(_QWORD *)&v23 + 31) < 0)
                                operator delete(*(void **)(*(_QWORD *)&v23 + 8));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1012C404EF22A49);
                              *(double *)&v113 = v324;
                            }
                          }
                          goto LABEL_683;
                        case 3u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v222 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v222, *(uint64_t *)&v23);
                            **(_QWORD **)&v222 = 1;
                            do
                            {
                              v223 = __ldaxr(*(unint64_t **)&v23);
                              v224 = v223 - 1;
                            }
                            while (__stlxr(v224, *(unint64_t **)&v23));
                            *(double *)&v113 = v222;
                            if (!v224)
                            {
                              v225 = *(void **)(*(_QWORD *)&v23 + 8);
                              if (v225)
                              {
                                *(_QWORD *)(*(_QWORD *)&v23 + 16) = v225;
                                operator delete(v225);
                              }
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1080C409938AC02);
                              *(double *)&v113 = v222;
                            }
                          }
                          goto LABEL_683;
                        case 4u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v416 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v416, *(uint64_t *)&v23);
                            **(_QWORD **)&v416 = 1;
                            do
                            {
                              v417 = __ldaxr(*(unint64_t **)&v23);
                              v418 = v417 - 1;
                            }
                            while (__stlxr(v418, *(unint64_t **)&v23));
                            *(double *)&v113 = v416;
                            if (!v418)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v416;
                            }
                          }
                          goto LABEL_683;
                        case 5u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v372 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v372, *(uint64_t *)&v23);
                            **(_QWORD **)&v372 = 1;
                            do
                            {
                              v373 = __ldaxr(*(unint64_t **)&v23);
                              v374 = v373 - 1;
                            }
                            while (__stlxr(v374, *(unint64_t **)&v23));
                            *(double *)&v113 = v372;
                            if (!v374)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v372;
                            }
                          }
                          goto LABEL_683;
                        case 8u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            *(double *)&v419 = COERCE_DOUBLE(operator new());
                            *(_QWORD *)v419 = **(_QWORD **)&v23;
                            v420 = *(_QWORD *)(*(_QWORD *)&v23 + 16);
                            *(_QWORD *)(v419 + 8) = *(_QWORD *)(*(_QWORD *)&v23 + 8);
                            *(_QWORD *)(v419 + 16) = v420;
                            if (v420)
                            {
                              v421 = (unsigned int *)(v420 + 8);
                              do
                                v422 = __ldxr(v421);
                              while (__stxr(v422 + 1, v421));
                            }
                            v423 = *(_OWORD *)(*(_QWORD *)&v23 + 24);
                            v424 = *(_OWORD *)(*(_QWORD *)&v23 + 40);
                            *(_OWORD *)(v419 + 56) = *(_OWORD *)(*(_QWORD *)&v23 + 56);
                            *(_OWORD *)(v419 + 40) = v424;
                            *(_OWORD *)(v419 + 24) = v423;
                            *(_QWORD *)v419 = 1;
                            do
                            {
                              v425 = __ldaxr(*(unint64_t **)&v23);
                              v426 = v425 - 1;
                            }
                            while (__stlxr(v426, *(unint64_t **)&v23));
                            v113 = v419;
                            if (!v426)
                            {
                              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v23 + 16));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1030C40F1F0227BLL);
                              v113 = v419;
                            }
                          }
                          goto LABEL_683;
                        case 9u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v320 = COERCE_DOUBLE(operator new());
                            **(_QWORD **)&v320 = **(_QWORD **)&v23;
                            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v320 + 8), *(_QWORD *)&v23 + 8);
                            **(_QWORD **)&v320 = 1;
                            do
                            {
                              v321 = __ldaxr(*(unint64_t **)&v23);
                              v322 = v321 - 1;
                            }
                            while (__stlxr(v322, *(unint64_t **)&v23));
                            *(double *)&v113 = v320;
                            if (!v322)
                            {
                              v323 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v23);
                              MEMORY[0x219A19A08](v323, 0x1030C407B73B9F7);
                              *(double *)&v113 = v320;
                            }
                          }
                          goto LABEL_683;
                        default:
                          goto LABEL_908;
                      }
                    case 9:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
LABEL_242:
                          *(double *)&v113 = v23;
                          turi::flexible_type_fail(0);
LABEL_243:
                          v138 = v4[4] + *(_QWORD *)(a1 + 32);
                          v550 = v22;
                          v549 = v5;
                          goto LABEL_244;
                        case 2u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v117 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](*(_QWORD **)&v117, *(uint64_t *)&v23);
                            **(_QWORD **)&v117 = 1;
                            do
                            {
                              v118 = __ldaxr(*(unint64_t **)&v23);
                              v119 = v118 - 1;
                            }
                            while (__stlxr(v119, *(unint64_t **)&v23));
                            *(double *)&v113 = v117;
                            if (!v119)
                            {
                              if (*(char *)(*(_QWORD *)&v23 + 31) < 0)
                                operator delete(*(void **)(*(_QWORD *)&v23 + 8));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1012C404EF22A49);
                              *(double *)&v113 = v117;
                            }
                          }
                          goto LABEL_683;
                        case 3u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v144 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v144, *(uint64_t *)&v23);
                            **(_QWORD **)&v144 = 1;
                            do
                            {
                              v145 = __ldaxr(*(unint64_t **)&v23);
                              v146 = v145 - 1;
                            }
                            while (__stlxr(v146, *(unint64_t **)&v23));
                            *(double *)&v113 = v144;
                            if (!v146)
                            {
                              v147 = *(void **)(*(_QWORD *)&v23 + 8);
                              if (v147)
                              {
                                *(_QWORD *)(*(_QWORD *)&v23 + 16) = v147;
                                operator delete(v147);
                              }
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1080C409938AC02);
                              *(double *)&v113 = v144;
                            }
                          }
                          goto LABEL_683;
                        case 4u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v293 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v293, *(uint64_t *)&v23);
                            **(_QWORD **)&v293 = 1;
                            do
                            {
                              v294 = __ldaxr(*(unint64_t **)&v23);
                              v295 = v294 - 1;
                            }
                            while (__stlxr(v295, *(unint64_t **)&v23));
                            *(double *)&v113 = v293;
                            if (!v295)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v293;
                            }
                          }
                          goto LABEL_683;
                        case 5u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v226 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v226, *(uint64_t *)&v23);
                            **(_QWORD **)&v226 = 1;
                            do
                            {
                              v227 = __ldaxr(*(unint64_t **)&v23);
                              v228 = v227 - 1;
                            }
                            while (__stlxr(v228, *(unint64_t **)&v23));
                            *(double *)&v113 = v226;
                            if (!v228)
                            {
                              __p = (void *)(*(_QWORD *)&v23 + 8);
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1020C405E66F15BLL);
                              *(double *)&v113 = v226;
                            }
                          }
                          goto LABEL_683;
                        case 8u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            *(double *)&v312 = COERCE_DOUBLE(operator new());
                            *(_QWORD *)v312 = **(_QWORD **)&v23;
                            v313 = *(_QWORD *)(*(_QWORD *)&v23 + 16);
                            *(_QWORD *)(v312 + 8) = *(_QWORD *)(*(_QWORD *)&v23 + 8);
                            *(_QWORD *)(v312 + 16) = v313;
                            if (v313)
                            {
                              v314 = (unsigned int *)(v313 + 8);
                              do
                                v315 = __ldxr(v314);
                              while (__stxr(v315 + 1, v314));
                            }
                            v316 = *(_OWORD *)(*(_QWORD *)&v23 + 24);
                            v317 = *(_OWORD *)(*(_QWORD *)&v23 + 40);
                            *(_OWORD *)(v312 + 56) = *(_OWORD *)(*(_QWORD *)&v23 + 56);
                            *(_OWORD *)(v312 + 40) = v317;
                            *(_OWORD *)(v312 + 24) = v316;
                            *(_QWORD *)v312 = 1;
                            do
                            {
                              v318 = __ldaxr(*(unint64_t **)&v23);
                              v319 = v318 - 1;
                            }
                            while (__stlxr(v319, *(unint64_t **)&v23));
                            v113 = v312;
                            if (!v319)
                            {
                              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v23 + 16));
                              MEMORY[0x219A19A08](*(_QWORD *)&v23, 0x1030C40F1F0227BLL);
                              v113 = v312;
                            }
                          }
LABEL_683:
                          turi::flexible_type_fail(0);
                          goto LABEL_684;
                        case 9u:
                          *(double *)&v113 = v23;
                          if (**(_QWORD **)&v23 != 1)
                          {
                            v169 = COERCE_DOUBLE(operator new());
                            **(_QWORD **)&v169 = **(_QWORD **)&v23;
                            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v169 + 8), *(_QWORD *)&v23 + 8);
                            **(_QWORD **)&v169 = 1;
                            do
                            {
                              v170 = __ldaxr(*(unint64_t **)&v23);
                              v171 = v170 - 1;
                            }
                            while (__stlxr(v171, *(unint64_t **)&v23));
                            *(double *)&v113 = v169;
                            if (!v171)
                            {
                              v172 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v23);
                              MEMORY[0x219A19A08](v172, 0x1030C407B73B9F7);
                              *(double *)&v113 = v169;
                            }
                          }
                          if (!turi::flexible_type_impl::ndarray<double>::same_shape(v113 + 8, *(_QWORD *)&v73 + 8))
                            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                          v174 = *(uint64_t **)(v113 + 24);
                          v173 = *(uint64_t **)(v113 + 32);
                          if (v173 == v174 || !*(_QWORD *)(v113 + 8))
                          {
LABEL_684:
                            v138 = v4[4] + *(_QWORD *)(a1 + 32);
                            v550 = v22;
                            v549 = v5;
                            goto LABEL_685;
                          }
                          v175 = 1;
                          do
                          {
                            v176 = *v174++;
                            v175 *= v176;
                          }
                          while (v174 != v173);
                          if (!v175)
                            goto LABEL_496;
                          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v113 + 8));
                          v177 = (uint64_t)(*(_QWORD *)(v113 + 32) - *(_QWORD *)(v113 + 24)) >> 3;
                          v551 = 0;
                          std::vector<unsigned long>::vector(&__p, v177, &v551);
                          do
                          {
                            v178 = (uint64_t *)__p;
                            if (v553 == __p)
                            {
                              v187 = 0;
                              v188 = *(double *)(**(_QWORD **)(*(_QWORD *)&v73 + 8)
                                               + 8 * *(_QWORD *)(*(_QWORD *)&v73 + 72));
                            }
                            else
                            {
                              v179 = 0;
                              v180 = (v553 - (_BYTE *)__p) >> 3;
                              v181 = *(uint64_t **)(*(_QWORD *)&v73 + 48);
                              if (v180 <= 1)
                                v180 = 1;
                              v182 = (uint64_t *)__p;
                              v183 = v180;
                              do
                              {
                                v185 = *v182++;
                                v184 = v185;
                                v186 = *v181++;
                                v179 += v186 * v184;
                                --v183;
                              }
                              while (v183);
                              v187 = 0;
                              v188 = *(double *)(**(_QWORD **)(*(_QWORD *)&v73 + 8)
                                               + 8 * (*(_QWORD *)(*(_QWORD *)&v73 + 72) + v179));
                              v189 = *(uint64_t **)(v113 + 48);
                              do
                              {
                                v191 = *v178++;
                                v190 = v191;
                                v192 = *v189++;
                                v187 += v192 * v190;
                                --v180;
                              }
                              while (v180);
                            }
                            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v113 + 8));
                            *(double *)(**(_QWORD **)(v113 + 8) + 8 * (*(_QWORD *)(v113 + 72) + v187)) = v188 + *(double *)(**(_QWORD **)(v113 + 8) + 8 * (*(_QWORD *)(v113 + 72) + v187));
                          }
                          while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(v113 + 8, (uint64_t *)&__p));
                          break;
                        default:
                          goto LABEL_908;
                      }
LABEL_423:
                      if (__p)
                      {
                        v553 = __p;
                        operator delete(__p);
                      }
LABEL_496:
                      v138 = v4[4] + *(_QWORD *)(a1 + 32);
                      v550 = v22;
                      v549 = v5;
                      if (v5 > 9)
                      {
LABEL_244:
                        v139 = v5;
                      }
                      else
                      {
                        v139 = v5;
                        if (((1 << v5) & 0x33C) != 0)
                        {
                          do
LABEL_685:
                            v427 = __ldaxr((unint64_t *)v113);
                          while (__stlxr(v427 + 1, (unint64_t *)v113));
                          v139 = v549;
                        }
                      }
                      v428 = *(double *)&v113;
                      switch(v139)
                      {
                        case 0u:
                          *(_QWORD *)&v428 = v113 / v138;
                          goto LABEL_748;
                        case 1u:
                          v428 = *(double *)&v113 / (double)v138;
                          goto LABEL_748;
                        case 2u:
                          v428 = *(double *)&v113;
                          if (*(_QWORD *)v113 == 1)
                            goto LABEL_747;
                          *(double *)&v429 = COERCE_DOUBLE(operator new());
                          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v429, v113);
                          *v429 = 1;
                          do
                          {
                            v430 = __ldaxr((unint64_t *)v113);
                            v431 = v430 - 1;
                          }
                          while (__stlxr(v431, (unint64_t *)v113));
                          v428 = *(double *)&v429;
                          if (v431)
                            goto LABEL_747;
                          if (*(char *)(v113 + 31) < 0)
                            operator delete(*(void **)(v113 + 8));
                          v432 = v113;
                          v433 = 0x1012C404EF22A49;
                          break;
                        case 3u:
                          v428 = *(double *)&v113;
                          if (*(_QWORD *)v113 != 1)
                          {
                            *(double *)&v453 = COERCE_DOUBLE(operator new());
                            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v453, v113);
                            *v453 = 1;
                            do
                            {
                              v454 = __ldaxr((unint64_t *)v113);
                              v455 = v454 - 1;
                            }
                            while (__stlxr(v455, (unint64_t *)v113));
                            v428 = *(double *)&v453;
                            if (!v455)
                            {
                              v456 = *(void **)(v113 + 8);
                              if (v456)
                              {
                                *(_QWORD *)(v113 + 16) = v456;
                                operator delete(v456);
                              }
                              MEMORY[0x219A19A08](v113, 0x1080C409938AC02);
                              v428 = *(double *)&v453;
                            }
                          }
                          v457 = *(double **)(*(_QWORD *)&v428 + 8);
                          v458 = *(_QWORD *)(*(_QWORD *)&v428 + 16) - (_QWORD)v457;
                          if (v458)
                          {
                            v459 = v458 >> 3;
                            if (v459 <= 1)
                              v459 = 1;
                            do
                            {
                              *v457 = *v457 / (double)v138;
                              ++v457;
                              --v459;
                            }
                            while (v459);
                          }
                          goto LABEL_748;
                        case 4u:
                          v428 = *(double *)&v113;
                          if (*(_QWORD *)v113 == 1)
                            goto LABEL_747;
                          *(double *)&v429 = COERCE_DOUBLE(operator new());
                          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v429, v113);
                          *v429 = 1;
                          do
                          {
                            v460 = __ldaxr((unint64_t *)v113);
                            v461 = v460 - 1;
                          }
                          while (__stlxr(v461, (unint64_t *)v113));
                          v428 = *(double *)&v429;
                          if (v461)
                            goto LABEL_747;
                          __p = (void *)(v113 + 8);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                          goto LABEL_737;
                        case 5u:
                          v428 = *(double *)&v113;
                          if (*(_QWORD *)v113 == 1)
                            goto LABEL_747;
                          *(double *)&v429 = COERCE_DOUBLE(operator new());
                          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v429, v113);
                          *v429 = 1;
                          do
                          {
                            v451 = __ldaxr((unint64_t *)v113);
                            v452 = v451 - 1;
                          }
                          while (__stlxr(v452, (unint64_t *)v113));
                          v428 = *(double *)&v429;
                          if (v452)
                            goto LABEL_747;
                          __p = (void *)(v113 + 8);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_737:
                          v432 = v113;
                          v433 = 0x1020C405E66F15BLL;
                          break;
                        case 6u:
                        case 7u:
                          goto LABEL_747;
                        case 8u:
                          v428 = *(double *)&v113;
                          if (*(_QWORD *)v113 == 1)
                            goto LABEL_747;
                          *(double *)&v462 = COERCE_DOUBLE(operator new());
                          v429 = (uint64_t *)v462;
                          *(_QWORD *)v462 = *(_QWORD *)v113;
                          *(_QWORD *)(v462 + 8) = *(_QWORD *)(v113 + 8);
                          v463 = *(_QWORD *)(v113 + 16);
                          *(_QWORD *)(v462 + 16) = v463;
                          if (v463)
                          {
                            v464 = (unsigned int *)(v463 + 8);
                            do
                              v465 = __ldxr(v464);
                            while (__stxr(v465 + 1, v464));
                          }
                          v466 = *(_OWORD *)(v113 + 24);
                          v467 = *(_OWORD *)(v113 + 40);
                          *(_OWORD *)(v462 + 56) = *(_OWORD *)(v113 + 56);
                          *(_OWORD *)(v462 + 40) = v467;
                          *(_OWORD *)(v462 + 24) = v466;
                          *(_QWORD *)v462 = 1;
                          do
                          {
                            v468 = __ldaxr((unint64_t *)v113);
                            v469 = v468 - 1;
                          }
                          while (__stlxr(v469, (unint64_t *)v113));
                          v428 = *(double *)&v462;
                          if (v469)
                            goto LABEL_747;
                          boost::detail::shared_count::~shared_count((unsigned int **)(v113 + 16));
                          v432 = v113;
                          v433 = 0x1030C40F1F0227BLL;
                          break;
                        case 9u:
                          v428 = *(double *)&v113;
                          if (*(_QWORD *)v113 != 1)
                          {
                            *(double *)&v434 = COERCE_DOUBLE(operator new());
                            *v434 = *(_QWORD *)v113;
                            turi::flexible_type_impl::ndarray<double>::ndarray(v434 + 1, v113 + 8);
                            *v434 = 1;
                            do
                            {
                              v435 = __ldaxr((unint64_t *)v113);
                              v436 = v435 - 1;
                            }
                            while (__stlxr(v436, (unint64_t *)v113));
                            v428 = *(double *)&v434;
                            if (!v436)
                            {
                              v437 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v113);
                              MEMORY[0x219A19A08](v437, 0x1030C407B73B9F7);
                              v428 = *(double *)&v434;
                            }
                          }
                          v439 = *(uint64_t **)(*(_QWORD *)&v428 + 24);
                          v438 = *(uint64_t **)(*(_QWORD *)&v428 + 32);
                          if (v438 != v439)
                          {
                            if (*(_QWORD *)(*(_QWORD *)&v428 + 8))
                            {
                              v440 = (double)v138;
                              v441 = 1;
                              do
                              {
                                v442 = *v439++;
                                v441 *= v442;
                              }
                              while (v439 != v438);
                              if (v441)
                              {
                                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v428 + 8));
                                v443 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v428 + 32)
                                               - *(_QWORD *)(*(_QWORD *)&v428 + 24)) >> 3;
                                v551 = 0;
                                std::vector<unsigned long>::vector(&__p, v443, &v551);
                                do
                                {
                                  v444 = (uint64_t *)__p;
                                  v445 = 0;
                                  if (v553 != __p)
                                  {
                                    v446 = (v553 - (_BYTE *)__p) >> 3;
                                    v447 = *(uint64_t **)(*(_QWORD *)&v428 + 48);
                                    if (v446 <= 1)
                                      v446 = 1;
                                    do
                                    {
                                      v449 = *v444++;
                                      v448 = v449;
                                      v450 = *v447++;
                                      v445 += v450 * v448;
                                      --v446;
                                    }
                                    while (v446);
                                  }
                                  turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v428 + 8));
                                  *(double *)(**(_QWORD **)(*(_QWORD *)&v428 + 8)
                                            + 8 * (*(_QWORD *)(*(_QWORD *)&v428 + 72) + v445)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v428 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v428 + 72) + v445))
                                                                                                 / v440;
                                }
                                while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(_QWORD *)&v428 + 8, (uint64_t *)&__p));
                                if (__p)
                                {
                                  v553 = __p;
                                  operator delete(__p);
                                }
                              }
                            }
                          }
                          goto LABEL_748;
                        default:
                          goto LABEL_908;
                      }
                      MEMORY[0x219A19A08](v432, v433);
                      v428 = *(double *)&v429;
LABEL_747:
                      turi::flexible_type_fail(0);
LABEL_748:
                      switch(*(_BYTE *)(a1 + 20))
                      {
                        case 2:
                          v470 = *(unint64_t **)(a1 + 8);
                          do
                          {
                            v471 = __ldaxr(v470);
                            v472 = v471 - 1;
                          }
                          while (__stlxr(v472, v470));
                          if (!v472)
                          {
                            v473 = *(_QWORD *)(a1 + 8);
                            if (!v473)
                              goto LABEL_786;
                            if (*(char *)(v473 + 31) < 0)
                              operator delete(*(void **)(v473 + 8));
                            v474 = (_QWORD *)v473;
                            v475 = 0x1012C404EF22A49;
                            goto LABEL_785;
                          }
                          break;
                        case 3:
                          v485 = *(unint64_t **)(a1 + 8);
                          do
                          {
                            v486 = __ldaxr(v485);
                            v487 = v486 - 1;
                          }
                          while (__stlxr(v487, v485));
                          if (!v487)
                          {
                            v488 = *(_QWORD **)(a1 + 8);
                            if (!v488)
                              goto LABEL_786;
                            v489 = (void *)v488[1];
                            if (v489)
                            {
                              v488[2] = v489;
                              operator delete(v489);
                            }
                            v474 = v488;
                            v475 = 0x1080C409938AC02;
                            goto LABEL_785;
                          }
                          break;
                        case 4:
                          v476 = *(unint64_t **)(a1 + 8);
                          do
                          {
                            v477 = __ldaxr(v476);
                            v478 = v477 - 1;
                          }
                          while (__stlxr(v478, v476));
                          if (!v478)
                          {
                            v479 = *(_QWORD **)(a1 + 8);
                            if (!v479)
                              goto LABEL_786;
                            __p = v479 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_778;
                          }
                          break;
                        case 5:
                          v490 = *(unint64_t **)(a1 + 8);
                          do
                          {
                            v491 = __ldaxr(v490);
                            v492 = v491 - 1;
                          }
                          while (__stlxr(v492, v490));
                          if (!v492)
                          {
                            v479 = *(_QWORD **)(a1 + 8);
                            if (!v479)
                              goto LABEL_786;
                            __p = v479 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_778:
                            v474 = v479;
                            v475 = 0x1020C405E66F15BLL;
                            goto LABEL_785;
                          }
                          break;
                        case 8:
                          v493 = *(unint64_t **)(a1 + 8);
                          do
                          {
                            v494 = __ldaxr(v493);
                            v495 = v494 - 1;
                          }
                          while (__stlxr(v495, v493));
                          if (!v495)
                          {
                            v496 = *(_QWORD *)(a1 + 8);
                            if (!v496)
                              goto LABEL_786;
                            boost::detail::shared_count::~shared_count((unsigned int **)(v496 + 16));
                            v474 = (_QWORD *)v496;
                            v484 = -235920773;
                            goto LABEL_784;
                          }
                          break;
                        case 9:
                          v480 = *(unint64_t **)(a1 + 8);
                          do
                          {
                            v481 = __ldaxr(v480);
                            v482 = v481 - 1;
                          }
                          while (__stlxr(v482, v480));
                          if (!v482)
                          {
                            v483 = *(_QWORD **)(a1 + 8);
                            if (v483)
                            {
                              v474 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v483);
                              v484 = 2071181815;
LABEL_784:
                              v475 = v484 | 0x1030C4000000000;
LABEL_785:
                              MEMORY[0x219A19A08](v474, v475);
                            }
LABEL_786:
                            *(_QWORD *)(a1 + 8) = 0;
                          }
                          break;
                        default:
                          break;
                      }
                      *(double *)(a1 + 8) = v428;
                      *(_DWORD *)(a1 + 16) = v550;
                      *(_BYTE *)(a1 + 20) = v549;
                      switch(v5)
                      {
                        case 2u:
                          do
                            v497 = __ldaxr((unint64_t *)v113);
                          while (__stlxr(v497 - 1, (unint64_t *)v113));
                          if (*(double *)&v113 != 0.0 && v497 == 1)
                          {
                            v498 = 0x1012C404EF22A49;
                            if ((*(char *)(v113 + 31) & 0x80000000) == 0)
                              goto LABEL_815;
                            v499 = *(void **)(v113 + 8);
                            goto LABEL_806;
                          }
                          break;
                        case 3u:
                          do
                            v502 = __ldaxr((unint64_t *)v113);
                          while (__stlxr(v502 - 1, (unint64_t *)v113));
                          if (*(double *)&v113 != 0.0 && v502 == 1)
                          {
                            v498 = 0x1080C409938AC02;
                            v499 = *(void **)(v113 + 8);
                            if (v499)
                            {
                              *(_QWORD *)(v113 + 16) = v499;
LABEL_806:
                              operator delete(v499);
                            }
                            goto LABEL_815;
                          }
                          break;
                        case 4u:
                          do
                            v500 = __ldaxr((unint64_t *)v113);
                          while (__stlxr(v500 - 1, (unint64_t *)v113));
                          if (*(double *)&v113 != 0.0 && v500 == 1)
                          {
                            v498 = 0x1020C405E66F15BLL;
                            __p = (void *)(v113 + 8);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_815;
                          }
                          break;
                        case 5u:
                          do
                            v503 = __ldaxr((unint64_t *)v113);
                          while (__stlxr(v503 - 1, (unint64_t *)v113));
                          if (*(double *)&v113 != 0.0 && v503 == 1)
                          {
                            v498 = 0x1020C405E66F15BLL;
                            __p = (void *)(v113 + 8);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_815;
                          }
                          break;
                        case 8u:
                          do
                            v504 = __ldaxr((unint64_t *)v113);
                          while (__stlxr(v504 - 1, (unint64_t *)v113));
                          if (*(double *)&v113 != 0.0 && v504 == 1)
                          {
                            v498 = 0x1030C40F1F0227BLL;
                            boost::detail::shared_count::~shared_count((unsigned int **)(v113 + 16));
                            goto LABEL_815;
                          }
                          break;
                        case 9u:
                          do
                            v501 = __ldaxr((unint64_t *)v113);
                          while (__stlxr(v501 - 1, (unint64_t *)v113));
                          if (*(double *)&v113 != 0.0 && v501 == 1)
                          {
                            v498 = 0x1030C407B73B9F7;
                            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v113);
LABEL_815:
                            MEMORY[0x219A19A08](v113, v498);
                          }
                          break;
                        default:
                          break;
                      }
                      switch(v71)
                      {
                        case 2:
                          do
                          {
                            v505 = __ldaxr(*(unint64_t **)&v73);
                            v506 = v505 - 1;
                          }
                          while (__stlxr(v506, *(unint64_t **)&v73));
                          if (v506)
                            v507 = 1;
                          else
                            v507 = *(_QWORD *)&v73 == 0;
                          if (!v507)
                          {
                            if (*(char *)(*(_QWORD *)&v73 + 31) < 0)
                              operator delete(*(void **)(*(_QWORD *)&v73 + 8));
                            v508 = v73;
                            v509 = 0x1012C404EF22A49;
                            goto LABEL_859;
                          }
                          break;
                        case 3:
                          do
                          {
                            v517 = __ldaxr(*(unint64_t **)&v73);
                            v518 = v517 - 1;
                          }
                          while (__stlxr(v518, *(unint64_t **)&v73));
                          if (v518)
                            v519 = 1;
                          else
                            v519 = *(_QWORD *)&v73 == 0;
                          if (!v519)
                          {
                            v520 = *(void **)(*(_QWORD *)&v73 + 8);
                            if (v520)
                            {
                              *(_QWORD *)(*(_QWORD *)&v73 + 16) = v520;
                              operator delete(v520);
                            }
                            v508 = v73;
                            v509 = 0x1080C409938AC02;
                            goto LABEL_859;
                          }
                          break;
                        case 4:
                          do
                          {
                            v510 = __ldaxr(*(unint64_t **)&v73);
                            v511 = v510 - 1;
                          }
                          while (__stlxr(v511, *(unint64_t **)&v73));
                          if (v511)
                            v512 = 1;
                          else
                            v512 = *(_QWORD *)&v73 == 0;
                          if (!v512)
                          {
                            __p = (void *)(*(_QWORD *)&v73 + 8);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_851;
                          }
                          break;
                        case 5:
                          do
                          {
                            v521 = __ldaxr(*(unint64_t **)&v73);
                            v522 = v521 - 1;
                          }
                          while (__stlxr(v522, *(unint64_t **)&v73));
                          if (v522)
                            v523 = 1;
                          else
                            v523 = *(_QWORD *)&v73 == 0;
                          if (!v523)
                          {
                            __p = (void *)(*(_QWORD *)&v73 + 8);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_851:
                            v508 = v73;
                            v509 = 0x1020C405E66F15BLL;
                            goto LABEL_859;
                          }
                          break;
                        case 8:
                          do
                          {
                            v524 = __ldaxr(*(unint64_t **)&v73);
                            v525 = v524 - 1;
                          }
                          while (__stlxr(v525, *(unint64_t **)&v73));
                          if (v525)
                            v526 = 1;
                          else
                            v526 = *(_QWORD *)&v73 == 0;
                          if (!v526)
                          {
                            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v73 + 16));
                            v508 = v73;
                            v516 = -235920773;
                            goto LABEL_858;
                          }
                          break;
                        case 9:
                          do
                          {
                            v513 = __ldaxr(*(unint64_t **)&v73);
                            v514 = v513 - 1;
                          }
                          while (__stlxr(v514, *(unint64_t **)&v73));
                          if (v514)
                            v515 = 1;
                          else
                            v515 = *(_QWORD *)&v73 == 0;
                          if (!v515)
                          {
                            v508 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v73));
                            v516 = 2071181815;
LABEL_858:
                            v509 = v516 | 0x1030C4000000000;
LABEL_859:
                            MEMORY[0x219A19A08](*(_QWORD *)&v508, v509);
                          }
                          break;
                        default:
                          break;
                      }
                      switch(v5)
                      {
                        case 2u:
                          do
                          {
                            v527 = __ldaxr(*(unint64_t **)&v23);
                            v528 = v527 - 1;
                          }
                          while (__stlxr(v528, *(unint64_t **)&v23));
                          if (v528)
                            v529 = 1;
                          else
                            v529 = *(_QWORD *)&v23 == 0;
                          if (!v529)
                          {
                            if (*(char *)(*(_QWORD *)&v23 + 31) < 0)
                              operator delete(*(void **)(*(_QWORD *)&v23 + 8));
                            v530 = v23;
                            v531 = 0x1012C404EF22A49;
                            goto LABEL_903;
                          }
                          break;
                        case 3u:
                          do
                          {
                            v539 = __ldaxr(*(unint64_t **)&v23);
                            v540 = v539 - 1;
                          }
                          while (__stlxr(v540, *(unint64_t **)&v23));
                          if (v540)
                            v541 = 1;
                          else
                            v541 = *(_QWORD *)&v23 == 0;
                          if (!v541)
                          {
                            v542 = *(void **)(*(_QWORD *)&v23 + 8);
                            if (v542)
                            {
                              *(_QWORD *)(*(_QWORD *)&v23 + 16) = v542;
                              operator delete(v542);
                            }
                            v530 = v23;
                            v531 = 0x1080C409938AC02;
                            goto LABEL_903;
                          }
                          break;
                        case 4u:
                          do
                          {
                            v532 = __ldaxr(*(unint64_t **)&v23);
                            v533 = v532 - 1;
                          }
                          while (__stlxr(v533, *(unint64_t **)&v23));
                          if (v533)
                            v534 = 1;
                          else
                            v534 = *(_QWORD *)&v23 == 0;
                          if (!v534)
                          {
                            __p = (void *)(*(_QWORD *)&v23 + 8);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_895;
                          }
                          break;
                        case 5u:
                          do
                          {
                            v543 = __ldaxr(*(unint64_t **)&v23);
                            v544 = v543 - 1;
                          }
                          while (__stlxr(v544, *(unint64_t **)&v23));
                          if (v544)
                            v545 = 1;
                          else
                            v545 = *(_QWORD *)&v23 == 0;
                          if (!v545)
                          {
                            __p = (void *)(*(_QWORD *)&v23 + 8);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_895:
                            v530 = v23;
                            v531 = 0x1020C405E66F15BLL;
                            goto LABEL_903;
                          }
                          break;
                        case 8u:
                          do
                          {
                            v546 = __ldaxr(*(unint64_t **)&v23);
                            v547 = v546 - 1;
                          }
                          while (__stlxr(v547, *(unint64_t **)&v23));
                          if (v547)
                            v548 = 1;
                          else
                            v548 = *(_QWORD *)&v23 == 0;
                          if (!v548)
                          {
                            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v23 + 16));
                            v530 = v23;
                            v538 = -235920773;
                            goto LABEL_902;
                          }
                          break;
                        case 9u:
                          do
                          {
                            v535 = __ldaxr(*(unint64_t **)&v23);
                            v536 = v535 - 1;
                          }
                          while (__stlxr(v536, *(unint64_t **)&v23));
                          if (v536)
                            v537 = 1;
                          else
                            v537 = *(_QWORD *)&v23 == 0;
                          if (!v537)
                          {
                            v530 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v23));
                            v538 = 2071181815;
LABEL_902:
                            v531 = v538 | 0x1030C4000000000;
LABEL_903:
                            MEMORY[0x219A19A08](*(_QWORD *)&v530, v531);
                          }
                          break;
                        default:
                          break;
                      }
                      *(_QWORD *)(a1 + 32) += v4[4];
                      return;
                    default:
                      goto LABEL_908;
                  }
                default:
LABEL_908:
                  turi::flexible_type_fail(0);
                  break;
              }
              break;
            default:
LABEL_907:
              turi::flexible_type_fail(0);
              break;
          }
          __break(1u);
        }
        else
        {
          *(_BYTE *)(a1 + 25) = 1;
        }
      }
    }
    else
    {
      turi::groupby_operators::vector_average::operator=(a1, (uint64_t)v3);
    }
  }
}

void sub_2181466EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, int a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  BOOL v67;

  MEMORY[0x219A19A08](v19, 0x1020C405E66F15BLL);
  do
    v23 = __ldaxr((unint64_t *)v17);
  while (__stlxr(v23 - 1, (unint64_t *)v17));
  if (v17 && v23 == 1)
  {
    a17 = v17 + 8;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
    MEMORY[0x219A19A08](v17, 0x1020C405E66F15BLL);
  }
  switch(v21)
  {
    case 2:
      do
      {
        v24 = __ldaxr((unint64_t *)v18);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unint64_t *)v18));
      if (v25)
        v26 = 1;
      else
        v26 = v18 == 0;
      if (v26)
        goto LABEL_50;
      if (*(char *)(v18 + 31) < 0)
        operator delete(*(void **)(v18 + 8));
      v27 = (_QWORD *)v18;
      v28 = 0x1012C404EF22A49;
      goto LABEL_49;
    case 3:
      do
      {
        v36 = __ldaxr((unint64_t *)v18);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, (unint64_t *)v18));
      if (v37)
        v38 = 1;
      else
        v38 = v18 == 0;
      if (v38)
        goto LABEL_50;
      v39 = *(void **)(v18 + 8);
      if (v39)
      {
        *(_QWORD *)(v18 + 16) = v39;
        operator delete(v39);
      }
      v27 = (_QWORD *)v18;
      v28 = 0x1080C409938AC02;
      goto LABEL_49;
    case 4:
      do
      {
        v29 = __ldaxr((unint64_t *)v18);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unint64_t *)v18));
      if (v30)
        v31 = 1;
      else
        v31 = v18 == 0;
      if (v31)
        goto LABEL_50;
      a17 = v18 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
      goto LABEL_41;
    case 5:
      do
      {
        v40 = __ldaxr((unint64_t *)v18);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, (unint64_t *)v18));
      if (v41)
        v42 = 1;
      else
        v42 = v18 == 0;
      if (v42)
        goto LABEL_50;
      a17 = v18 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
LABEL_41:
      v27 = (_QWORD *)v18;
      v28 = 0x1020C405E66F15BLL;
      goto LABEL_49;
    case 8:
      do
      {
        v43 = __ldaxr((unint64_t *)v18);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, (unint64_t *)v18));
      if (v44)
        v45 = 1;
      else
        v45 = v18 == 0;
      if (v45)
        goto LABEL_50;
      boost::detail::shared_count::~shared_count((unsigned int **)(v18 + 16));
      v27 = (_QWORD *)v18;
      v35 = -235920773;
      goto LABEL_48;
    case 9:
      do
      {
        v32 = __ldaxr((unint64_t *)v18);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, (unint64_t *)v18));
      if (v33)
        v34 = 1;
      else
        v34 = v18 == 0;
      if (v34)
        goto LABEL_50;
      v27 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v18);
      v35 = 2071181815;
LABEL_48:
      v28 = v35 | 0x1030C4000000000;
LABEL_49:
      MEMORY[0x219A19A08](v27, v28);
LABEL_50:
      switch(v20)
      {
        case 2:
          do
          {
            v46 = __ldaxr((unint64_t *)v17);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, (unint64_t *)v17));
          if (v47)
            v48 = 1;
          else
            v48 = v17 == 0;
          if (v48)
            goto LABEL_94;
          if (*(char *)(v17 + 31) < 0)
            operator delete(*(void **)(v17 + 8));
          v49 = (_QWORD *)v17;
          v50 = 0x1012C404EF22A49;
          goto LABEL_93;
        case 3:
          do
          {
            v58 = __ldaxr((unint64_t *)v17);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, (unint64_t *)v17));
          if (v59)
            v60 = 1;
          else
            v60 = v17 == 0;
          if (v60)
            goto LABEL_94;
          v61 = *(void **)(v17 + 8);
          if (v61)
          {
            *(_QWORD *)(v17 + 16) = v61;
            operator delete(v61);
          }
          v49 = (_QWORD *)v17;
          v50 = 0x1080C409938AC02;
          goto LABEL_93;
        case 4:
          do
          {
            v51 = __ldaxr((unint64_t *)v17);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, (unint64_t *)v17));
          if (v52)
            v53 = 1;
          else
            v53 = v17 == 0;
          if (v53)
            goto LABEL_94;
          a17 = v17 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
          goto LABEL_85;
        case 5:
          do
          {
            v62 = __ldaxr((unint64_t *)v17);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, (unint64_t *)v17));
          if (v63)
            v64 = 1;
          else
            v64 = v17 == 0;
          if (v64)
            goto LABEL_94;
          a17 = v17 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
LABEL_85:
          v49 = (_QWORD *)v17;
          v50 = 0x1020C405E66F15BLL;
          goto LABEL_93;
        case 8:
          do
          {
            v65 = __ldaxr((unint64_t *)v17);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, (unint64_t *)v17));
          if (v66)
            v67 = 1;
          else
            v67 = v17 == 0;
          if (v67)
            goto LABEL_94;
          boost::detail::shared_count::~shared_count((unsigned int **)(v17 + 16));
          v49 = (_QWORD *)v17;
          v57 = -235920773;
          goto LABEL_92;
        case 9:
          do
          {
            v54 = __ldaxr((unint64_t *)v17);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, (unint64_t *)v17));
          if (v55)
            v56 = 1;
          else
            v56 = v17 == 0;
          if (v56)
            goto LABEL_94;
          v49 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v17);
          v57 = 2071181815;
LABEL_92:
          v50 = v57 | 0x1030C4000000000;
LABEL_93:
          MEMORY[0x219A19A08](v49, v50);
LABEL_94:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_94;
      }
    default:
      goto LABEL_50;
  }
}

uint64_t turi::groupby_operators::vector_average::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  if (*(_BYTE *)(this + 25))
  {
    *(_QWORD *)(a2 + 5) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 12) = 7;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    if (this + 8 != a2)
    {
      *(_QWORD *)(a2 + 5) = *(_QWORD *)(this + 13);
      *(_QWORD *)a2 = *(_QWORD *)(this + 8);
      v2 = *(unsigned __int8 *)(this + 20);
      *(_BYTE *)(a2 + 12) = v2;
      switch(v2)
      {
        case 2:
          v3 = *(unint64_t **)a2;
          do
            v4 = __ldaxr(v3);
          while (__stlxr(v4 + 1, v3));
          break;
        case 3:
          v5 = *(unint64_t **)a2;
          do
            v6 = __ldaxr(v5);
          while (__stlxr(v6 + 1, v5));
          break;
        case 4:
          v7 = *(unint64_t **)a2;
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
          break;
        case 5:
          v9 = *(unint64_t **)a2;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
          break;
        case 8:
          v11 = *(unint64_t **)a2;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
          break;
        case 9:
          v13 = *(unint64_t **)a2;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
          break;
        default:
          return this;
      }
    }
  }
  return this;
}

_QWORD *turi::groupby_operators::vector_average::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Vector Avg");
}

_BYTE *turi::groupby_operators::vector_average::save(turi::groupby_operators::vector_average *this, turi::oarchive *a2)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *result;
  unint64_t v10;
  size_t v11;
  char **v12;
  size_t v13;
  BOOL v14;
  std::vector<char>::size_type v15;
  size_t v16;
  _QWORD *v17;
  size_t v18;
  BOOL v19;
  std::vector<char>::size_type v20;
  size_t v21;
  uint64_t *v22;
  size_t v23;
  BOOL v24;
  std::vector<char>::size_type v25;

  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 1);
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v4)
    {
      v11 = 2 * v4 + 16;
      *((_QWORD *)a2 + 5) = v11;
      v12 = (char **)*((_QWORD *)a2 + 2);
      if (v12)
      {
        v5 = *v12;
        v13 = v12[1] - *v12;
        v14 = v11 >= v13;
        v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v15);
          v5 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v14)
        {
          v12[1] = &v5[v11];
        }
      }
      else
      {
        v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v11, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v5;
    }
    else
    {
      v5 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v5[*((_QWORD *)a2 + 4)] = *((_QWORD *)this + 4);
    *((_QWORD *)a2 + 4) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v6 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 1 > v6)
    {
      v16 = 2 * v6 + 2;
      *((_QWORD *)a2 + 5) = v16;
      v17 = (_QWORD *)*((_QWORD *)a2 + 2);
      if (v17)
      {
        v7 = (_BYTE *)*v17;
        v18 = v17[1] - *v17;
        v19 = v16 >= v18;
        v20 = v16 - v18;
        if (v20 != 0 && v19)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v20);
          v7 = (_BYTE *)**((_QWORD **)a2 + 2);
        }
        else if (!v19)
        {
          v17[1] = &v7[v16];
        }
      }
      else
      {
        v7 = malloc_type_realloc(*((void **)a2 + 3), v16, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v7;
    }
    else
    {
      v7 = (_BYTE *)*((_QWORD *)a2 + 3);
    }
    v7[(*((_QWORD *)a2 + 4))++] = *((_BYTE *)this + 24);
  }
  v8 = (char *)this + 25;
  if (*(_QWORD *)a2)
    return (_BYTE *)std::ostream::write();
  v10 = *((_QWORD *)a2 + 5);
  if (*((_QWORD *)a2 + 4) + 1 > v10)
  {
    v21 = 2 * v10 + 2;
    *((_QWORD *)a2 + 5) = v21;
    v22 = (uint64_t *)*((_QWORD *)a2 + 2);
    if (v22)
    {
      result = (_BYTE *)*v22;
      v23 = v22[1] - *v22;
      v24 = v21 >= v23;
      v25 = v21 - v23;
      if (v25 != 0 && v24)
      {
        std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v25);
        result = (_BYTE *)**((_QWORD **)a2 + 2);
      }
      else if (!v24)
      {
        v22[1] = (uint64_t)&result[v21];
      }
    }
    else
    {
      result = malloc_type_realloc(*((void **)a2 + 3), v21, 0xF6EA6B1uLL);
    }
    *((_QWORD *)a2 + 3) = result;
  }
  else
  {
    result = (_BYTE *)*((_QWORD *)a2 + 3);
  }
  result[(*((_QWORD *)a2 + 4))++] = *v8;
  return result;
}

void turi::groupby_operators::vector_average::load(turi::groupby_operators::vector_average *this, turi::iarchive *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, (_QWORD **)this + 1);
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    *((_QWORD *)this + 4) = *(_QWORD *)(v4 + *((_QWORD *)a2 + 3));
    *((_QWORD *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    *((_BYTE *)this + 24) = *(_BYTE *)(v5 + (*((_QWORD *)a2 + 3))++);
  else
    std::istream::read();
  v6 = *((_QWORD *)a2 + 2);
  if (v6)
    *((_BYTE *)this + 25) = *(_BYTE *)(v6 + (*((_QWORD *)a2 + 3))++);
  else
    std::istream::read();
}

void turi::groupby_operators::vector_average::~vector_average(turi::groupby_operators::vector_average *this)
{
  turi::groupby_operators::vector_average::~vector_average(this);
  JUMPOUT(0x219A19A08);
}

{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v31;

  *(_QWORD *)this = &unk_24D930240;
  switch(*((_BYTE *)this + 20))
  {
    case 2:
      v2 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *((_QWORD *)this + 1);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = (_QWORD *)*((_QWORD *)this + 1);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *((_QWORD *)this + 1);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (_QWORD *)*((_QWORD *)this + 1);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
}

uint64_t turi::groupby_operators::vector_average::set_input_type(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void **v36;

  switch(*(_BYTE *)(a1 + 20))
  {
    case 2:
      v4 = *(unint64_t **)(a1 + 8);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(_QWORD *)(a1 + 8);
        if (!v7)
          goto LABEL_43;
        if (*(char *)(v7 + 31) < 0)
          operator delete(*(void **)(v7 + 8));
        v8 = (_QWORD *)v7;
        v9 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      v10 = *(unint64_t **)(a1 + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *(_QWORD **)(a1 + 8);
        if (!v13)
          goto LABEL_43;
        v14 = (void *)v13[1];
        if (v14)
        {
          v13[2] = v14;
          operator delete(v14);
        }
        v8 = v13;
        v9 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      v15 = *(unint64_t **)(a1 + 8);
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(_QWORD *)(a1 + 8);
        if (!v18)
          goto LABEL_43;
        v36 = (void **)(v18 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
        goto LABEL_26;
      }
      break;
    case 5:
      v19 = *(unint64_t **)(a1 + 8);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v18 = *(_QWORD *)(a1 + 8);
        if (!v18)
          goto LABEL_43;
        v36 = (void **)(v18 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_26:
        v8 = (_QWORD *)v18;
        v9 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      v22 = *(unint64_t **)(a1 + 8);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(_QWORD *)(a1 + 8);
        if (!v25)
          goto LABEL_43;
        boost::detail::shared_count::~shared_count((unsigned int **)(v25 + 16));
        v8 = (_QWORD *)v25;
        v26 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      v27 = *(unint64_t **)(a1 + 8);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(_QWORD **)(a1 + 8);
        if (v30)
        {
          v31 = (void *)v30[6];
          if (v31)
          {
            v30[7] = v31;
            operator delete(v31);
          }
          v32 = (void *)v30[3];
          if (v32)
          {
            v30[4] = v32;
            operator delete(v32);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
          v8 = v30;
          v26 = 2071181815;
LABEL_41:
          v9 = v26 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v8, v9);
        }
LABEL_43:
        *(_QWORD *)(a1 + 8) = 0;
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = a2;
  switch((int)a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      v33 = operator new();
      *(_QWORD *)v33 = 0;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 8) = 0;
      goto LABEL_48;
    case 6:
      *(_QWORD *)(a1 + 8) = 0x1900000000000000;
      *(_DWORD *)(a1 + 16) = 0;
      break;
    case 8:
      v33 = operator new();
      *(_QWORD *)v33 = 0;
      *(_OWORD *)(v33 + 8) = 0u;
      *(_OWORD *)(v33 + 24) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_QWORD *)(v33 + 56) = 0;
      *(_QWORD *)(v33 + 64) = 3;
LABEL_48:
      *(_QWORD *)(a1 + 8) = v33;
      *(_QWORD *)v33 = 1;
      break;
    case 9:
      v34 = (_QWORD *)operator new();
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v34);
      *(_QWORD *)(a1 + 8) = v34;
      *v34 = 1;
      break;
    default:
      return a2;
  }
  return a2;
}

void sub_218147A10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1030C407B73B9F7);
  _Unwind_Resume(a1);
}

uint64_t turi::groupby_operators::vector_average::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t **v4;
  unint64_t **v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  unint64_t *v35;
  BOOL v36;
  int v37;
  unint64_t *v39;
  unint64_t v40;
  void **v42;

  if (a2 != a1)
  {
    v4 = (unint64_t **)(a1 + 8);
    v5 = (unint64_t **)(a2 + 8);
    switch(*(_BYTE *)(a1 + 20))
    {
      case 2:
        v6 = *v4;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          v9 = *v4;
          if (!*v4)
            goto LABEL_44;
          if (*((char *)v9 + 31) < 0)
            operator delete((void *)v9[1]);
          v10 = v9;
          v11 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v12 = *v4;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = *v4;
          if (!*v4)
            goto LABEL_44;
          v16 = (void *)v15[1];
          if (v16)
          {
            v15[2] = (unint64_t)v16;
            operator delete(v16);
          }
          v10 = v15;
          v11 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v17 = *v4;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *v4;
          if (!*v4)
            goto LABEL_44;
          v42 = (void **)(v20 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v42);
          goto LABEL_27;
        }
        break;
      case 5:
        v21 = *v4;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v20 = *v4;
          if (!*v4)
            goto LABEL_44;
          v42 = (void **)(v20 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v42);
LABEL_27:
          v10 = v20;
          v11 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v24 = *v4;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *v4;
          if (!*v4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v27 + 2);
          v10 = v27;
          v28 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v29 = *v4;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = *v4;
          if (*v4)
          {
            v33 = (void *)v32[6];
            if (v33)
            {
              v32[7] = (unint64_t)v33;
              operator delete(v33);
            }
            v34 = (void *)v32[3];
            if (v34)
            {
              v32[4] = (unint64_t)v34;
              operator delete(v34);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 1));
            v10 = v32;
            v28 = 2071181815;
LABEL_42:
            v11 = v28 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v10, v11);
          }
LABEL_44:
          *v4 = 0;
        }
        break;
      default:
        break;
    }
    v35 = *v5;
    *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
    *v4 = v35;
    LODWORD(v35) = *(unsigned __int8 *)(a2 + 20);
    *(_BYTE *)(a1 + 20) = (_BYTE)v35;
    v36 = v35 > 9;
    v37 = (1 << (char)v35) & 0x33C;
    if (!v36 && v37 != 0)
    {
      v39 = *v4;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

void std::__shared_ptr_emplace<turi::groupby_operators::variance>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9302E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::variance>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9302E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::variance>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

_QWORD *turi::groupby_operators::variance::new_instance(turi::groupby_operators::variance *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_24D930330;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void turi::groupby_operators::variance::add_element_simple(turi::groupby_operators::variance *this, const turi::flexible_type *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t *v29;
  uint64_t *v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  double v45;
  char v46;
  size_t v47;
  unsigned int v48;
  double *v49;
  double *v50;
  unint64_t v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  double v56;
  double v57;
  unsigned int v58;
  double v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  double v64;
  double v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  double v69;
  char **v70;
  char *v71;
  double v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  __int128 v80;
  __int128 v81;
  float v82;
  double v83;
  double v84;
  double v85;
  double v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  double v90;
  char *v91;
  double v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  unsigned int *v97;
  unsigned int *v98;
  unsigned int v99;
  __int128 v100;
  __int128 v101;
  float v102;
  double v103;
  double v104;
  uint64_t v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  std::runtime_error *exception;
  std::string *v109;
  __int128 v110;
  std::runtime_error *v111;
  std::string *v112;
  __int128 v113;
  void *__p[2];
  void *v115[2];
  __int128 v116;
  __int128 v117;
  std::string v118;
  size_t __idx;

  switch(byte_254FF06EC)
  {
    case 0:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          if (*(_QWORD *)a2 == turi::FLEX_UNDEFINED)
            return;
          goto LABEL_82;
        case 1:
          v59 = *(double *)a2;
          v60 = turi::FLEX_UNDEFINED;
          goto LABEL_155;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_82;
        case 6:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2))
            return;
          goto LABEL_82;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          v59 = *(double *)&turi::FLEX_UNDEFINED;
          v60 = *(_QWORD *)a2;
LABEL_155:
          v104 = (double)v60;
          goto LABEL_156;
        case 1:
          v59 = *(double *)a2;
          v104 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_156:
          if (v59 != v104)
            goto LABEL_82;
          return;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_82;
        case 6:
          v103 = vabdd_f64((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_160;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v43 = *((unsigned __int8 *)a2 + 12);
      if (v43 - 3 < 7 || v43 < 2)
        goto LABEL_82;
      if (v43 != 2)
        turi::apply_binary_op_ff();
      v45 = *(double *)a2;
      v46 = *(_BYTE *)(*(_QWORD *)a2 + 31);
      v47 = v46 < 0 ? *(_QWORD *)(*(_QWORD *)&v45 + 16) : *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
      v105 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
           ? *(_QWORD *)(turi::FLEX_UNDEFINED + 16)
           : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v47 != v105)
        goto LABEL_82;
      v106 = (unsigned __int8 *)(*(_QWORD *)&v45 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
        v106 = *(unsigned __int8 **)v106;
      v107 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v107 = *(unsigned __int8 **)v107;
      if (v46 < 0)
      {
        if (memcmp(v106, v107, v47))
          goto LABEL_82;
      }
      else
      {
        if (!v47)
          return;
        do
        {
          if (*v106 != *v107)
            goto LABEL_82;
          ++v106;
          ++v107;
          --v47;
        }
        while (v47);
      }
      return;
    case 3:
      v48 = *((unsigned __int8 *)a2 + 12);
      if (v48 > 9)
        turi::apply_binary_op_ff();
      if (v48 == 3)
      {
        v49 = *(double **)(*(_QWORD *)a2 + 8);
        v50 = *(double **)(*(_QWORD *)a2 + 16);
        v51 = v50 - v49;
        v52 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v51 == (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v52) >> 3)
        {
          if (v50 == v49)
            return;
          v53 = v51 <= 1 ? 1 : v50 - v49;
          if (*v49 == *v52)
          {
            v54 = 1;
            do
            {
              v55 = v54;
              if (v53 == v54)
                break;
              v56 = v49[v54];
              v57 = v52[v54++];
            }
            while (v56 == v57);
            if (v55 >= v51)
              return;
          }
        }
      }
      goto LABEL_82;
    case 4:
      v4 = *((unsigned __int8 *)a2 + 12);
      if (v4 > 9)
        turi::apply_binary_op_ff();
      if (v4 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        return;
      }
      goto LABEL_82;
    case 5:
      v61 = *((unsigned __int8 *)a2 + 12);
      if (v61 > 9)
        turi::apply_binary_op_ff();
      if (v61 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t **)(*(_QWORD *)a2 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        return;
      }
      goto LABEL_82;
    case 6:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          if (*(_QWORD *)a2 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF06E8)
            return;
          goto LABEL_82;
        case 1:
          v103 = vabdd_f64(*(double *)a2, (double)dword_254FF06E8 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_160:
          if (v103 < 0.0000005)
            return;
          goto LABEL_82;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_82;
        case 6:
          if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)a2 + 2) == dword_254FF06E8)
          {
            return;
          }
          goto LABEL_82;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v58 = *((unsigned __int8 *)a2 + 12);
      if (v58 < 7 || v58 - 8 < 2)
        goto LABEL_82;
      if (v58 != 7)
        turi::apply_binary_op_ff();
      return;
    case 8:
      v62 = *((unsigned __int8 *)a2 + 12);
      if (v62 >= 8 && v62 != 9)
      {
        if (v62 != 8)
          turi::apply_binary_op_ff();
        if (turi::image_type::operator==(*(_QWORD *)a2 + 8, turi::FLEX_UNDEFINED + 8))
          return;
      }
      goto LABEL_82;
    case 9:
      v5 = *((unsigned __int8 *)a2 + 12);
      if (v5 < 9)
        goto LABEL_82;
      if (v5 != 9)
        turi::apply_binary_op_ff();
      v6 = turi::FLEX_UNDEFINED;
      v7 = *(_QWORD **)a2;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)a2)
        return;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v7 + 1), turi::FLEX_UNDEFINED + 8))
        goto LABEL_82;
      v9 = (char *)v7[3];
      v8 = (char *)v7[4];
      v10 = v8 - v9;
      if (v8 == v9)
        return;
      if (!v7[1])
        return;
      v11 = 1;
      do
      {
        v12 = *(_QWORD *)v9;
        v9 += 8;
        v11 *= v12;
      }
      while (v9 != v8);
      if (!v11)
        return;
      v118.__r_.__value_.__r.__words[0] = 0;
      std::vector<unsigned long>::vector(__p, v10 >> 3, &v118);
      v13 = (uint64_t *)__p[0];
      v14 = (uint64_t *)__p[1];
      v15 = **(_QWORD **)(v6 + 8);
      v16 = (char *)__p[1] - (char *)__p[0];
      v17 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      v18 = v17 - 1;
      if (v17 <= 1)
        v19 = 1;
      else
        v19 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    if (v14 == v13)
    {
      v27 = 0;
      v28 = *(double *)(*(_QWORD *)v7[1] + 8 * v7[9]);
    }
    else
    {
      v20 = 0;
      v21 = (uint64_t *)v7[6];
      v22 = v13;
      v23 = v19;
      do
      {
        v25 = *v22++;
        v24 = v25;
        v26 = *v21++;
        v20 += v26 * v24;
        --v23;
      }
      while (v23);
      v27 = 0;
      v28 = *(double *)(*(_QWORD *)v7[1] + 8 * (v7[9] + v20));
      v29 = *(uint64_t **)(v6 + 48);
      v30 = v13;
      v31 = v19;
      do
      {
        v33 = *v30++;
        v32 = v33;
        v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
    }
    v35 = *(double *)(v15 + 8 * (*(_QWORD *)(v6 + 72) + v27));
    if (v28 != v35)
    {
LABEL_38:
      if (v13)
      {
        __p[1] = v13;
        operator delete(v13);
      }
      if (v28 != v35)
      {
LABEL_82:
        ++*((_QWORD *)this + 1);
        v64 = 0.0;
        switch(*((_BYTE *)a2 + 12))
        {
          case 0:
            v64 = (double)*(uint64_t *)a2;
            break;
          case 1:
            v64 = *(double *)a2;
            break;
          case 2:
            v69 = *(double *)a2;
            v70 = (char **)(*(_QWORD *)a2 + 8);
            __idx = 0;
            v71 = (char *)v70;
            if (*(char *)(*(_QWORD *)&v69 + 31) < 0)
              v71 = *v70;
            std::string::basic_string[abi:ne180100]<0>(__p, v71);
            v72 = std::stod((const std::string *)__p, &__idx);
            if (SHIBYTE(v115[0]) < 0)
              operator delete(__p[0]);
            if (*(char *)(*(_QWORD *)&v69 + 31) < 0)
              v73 = *(_QWORD *)(*(_QWORD *)&v69 + 16);
            else
              v73 = *(unsigned __int8 *)(*(_QWORD *)&v69 + 31);
            if (__idx != v73)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v109 = std::string::append(&v118, " cannot be interpreted as a float");
              v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
              v115[0] = (void *)v109->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v110;
              v109->__r_.__value_.__l.__size_ = 0;
              v109->__r_.__value_.__r.__words[2] = 0;
              v109->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, (const std::string *)__p);
              __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            v82 = v72;
            v64 = v82;
            break;
          case 3:
            v65 = *(double *)a2;
            __p[1] = 0;
            v115[0] = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v65 + 8), *(_QWORD *)(*(_QWORD *)&v65 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v65 + 16) - *(_QWORD *)(*(_QWORD *)&v65 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            break;
          case 4:
            v74 = *(double *)a2;
            __p[1] = 0;
            v115[0] = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v74 + 8), *(uint64_t **)(*(_QWORD *)&v74 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v74 + 16) - *(_QWORD *)(*(_QWORD *)&v74 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v118.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
            break;
          case 5:
            v75 = *(double *)a2;
            __p[1] = 0;
            v115[0] = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v75 + 8), *(uint64_t **)(*(_QWORD *)&v75 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v75 + 16) - *(_QWORD *)(*(_QWORD *)&v75 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v118.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
            break;
          case 6:
            v64 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
            break;
          case 7:
            break;
          case 8:
            v76 = *(double *)a2;
            v77 = *(unsigned int **)(*(_QWORD *)a2 + 16);
            __p[0] = *(void **)(*(_QWORD *)a2 + 8);
            __p[1] = v77;
            if (v77)
            {
              v78 = v77 + 2;
              do
                v79 = __ldxr(v78);
              while (__stxr(v79 + 1, v78));
            }
            v80 = *(_OWORD *)(*(_QWORD *)&v76 + 24);
            v81 = *(_OWORD *)(*(_QWORD *)&v76 + 56);
            v116 = *(_OWORD *)(*(_QWORD *)&v76 + 40);
            v117 = v81;
            *(_OWORD *)v115 = v80;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
            break;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
            turi::flexible_type_fail(0);
            if (*((_QWORD *)&v116 + 1))
            {
              *(_QWORD *)&v117 = *((_QWORD *)&v116 + 1);
              operator delete(*((void **)&v116 + 1));
            }
            if (v115[0])
            {
              v115[1] = v115[0];
              operator delete(v115[0]);
            }
            v66 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v67 = (unint64_t *)((char *)__p[1] + 8);
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            break;
          default:
            turi::apply_binary_op_ff();
        }
        v83 = *((double *)this + 2);
        v84 = v64 - v83;
        *((double *)this + 2) = v83 + (v64 - v83) / (double)*((unint64_t *)this + 1);
        v85 = 0.0;
        switch(*((_BYTE *)a2 + 12))
        {
          case 0:
            v85 = (double)*(uint64_t *)a2;
            break;
          case 1:
            v85 = *(double *)a2;
            break;
          case 2:
            v90 = *(double *)a2;
            __idx = 0;
            v91 = (char *)(*(_QWORD *)&v90 + 8);
            if (*(char *)(*(_QWORD *)&v90 + 31) < 0)
              v91 = *(char **)(*(_QWORD *)&v90 + 8);
            std::string::basic_string[abi:ne180100]<0>(__p, v91);
            v92 = std::stod((const std::string *)__p, &__idx);
            if (SHIBYTE(v115[0]) < 0)
              operator delete(__p[0]);
            if (*(char *)(*(_QWORD *)&v90 + 31) < 0)
              v93 = *(_QWORD *)(*(_QWORD *)&v90 + 16);
            else
              v93 = *(unsigned __int8 *)(*(_QWORD *)&v90 + 31);
            if (__idx != v93)
            {
              v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v112 = std::string::append(&v118, " cannot be interpreted as a float");
              v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
              v115[0] = (void *)v112->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v113;
              v112->__r_.__value_.__l.__size_ = 0;
              v112->__r_.__value_.__r.__words[2] = 0;
              v112->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v111, (const std::string *)__p);
              __cxa_throw(v111, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            v102 = v92;
            v85 = v102;
            break;
          case 3:
            v86 = *(double *)a2;
            __p[1] = 0;
            v115[0] = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v86 + 8), *(_QWORD *)(*(_QWORD *)&v86 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v86 + 16) - *(_QWORD *)(*(_QWORD *)&v86 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            break;
          case 4:
            v94 = *(double *)a2;
            __p[1] = 0;
            v115[0] = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v94 + 8), *(uint64_t **)(*(_QWORD *)&v94 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v94 + 16) - *(_QWORD *)(*(_QWORD *)&v94 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v118.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
            break;
          case 5:
            v95 = *(double *)a2;
            __p[1] = 0;
            v115[0] = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v95 + 8), *(uint64_t **)(*(_QWORD *)&v95 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v95 + 16) - *(_QWORD *)(*(_QWORD *)&v95 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v118.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
            break;
          case 6:
            v85 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
            break;
          case 7:
            break;
          case 8:
            v96 = *(double *)a2;
            v97 = *(unsigned int **)(*(_QWORD *)a2 + 16);
            __p[0] = *(void **)(*(_QWORD *)a2 + 8);
            __p[1] = v97;
            if (v97)
            {
              v98 = v97 + 2;
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
            }
            v100 = *(_OWORD *)(*(_QWORD *)&v96 + 24);
            v101 = *(_OWORD *)(*(_QWORD *)&v96 + 56);
            v116 = *(_OWORD *)(*(_QWORD *)&v96 + 40);
            v117 = v101;
            *(_OWORD *)v115 = v100;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
            break;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
            turi::flexible_type_fail(0);
            if (*((_QWORD *)&v116 + 1))
            {
              *(_QWORD *)&v117 = *((_QWORD *)&v116 + 1);
              operator delete(*((void **)&v116 + 1));
            }
            if (v115[0])
            {
              v115[1] = v115[0];
              operator delete(v115[0]);
            }
            v87 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v88 = (unint64_t *)((char *)__p[1] + 8);
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            break;
          default:
            turi::apply_binary_op_ff();
        }
        *((double *)this + 3) = *((double *)this + 3) + v84 * (v85 - *((double *)this + 2));
      }
      return;
    }
    v36 = v17;
    v37 = v17 - 1;
    if (v16 >= 1)
      break;
LABEL_36:
    if (v37 < 0 || !v36)
      goto LABEL_38;
  }
  v38 = v7[3];
  v39 = v13[v18] + 1;
  v13[v18] = v39;
  v40 = (v16 & 0xFFFFFFFFFFFFFFF8) - 16;
  v37 = v17 - 1;
  if (v39 < *(_QWORD *)(v38 + 8 * v18))
  {
    v36 = 1;
    v37 = v17 - 1;
    goto LABEL_36;
  }
  while (1)
  {
    *(uint64_t *)((char *)v13 + v40 + 8) = 0;
    if (v37 <= 0)
      break;
    --v37;
    v41 = *(uint64_t *)((char *)v13 + v40) + 1;
    *(uint64_t *)((char *)v13 + v40) = v41;
    v42 = *(_QWORD *)(v38 + v40);
    v40 -= 8;
    if (v41 < v42)
    {
      v36 = 1;
      goto LABEL_36;
    }
  }
  __p[1] = v13;
  operator delete(v13);
}

void sub_218148B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void *turi::groupby_operators::variance::combine(uint64_t a1, void *lpsrc)
{
  void *result;
  unint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unint64_t v11;
  double v12;
  uint64_t v13;

  if (!result)
    __cxa_bad_cast();
  v4 = *((_QWORD *)result + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *((double *)result + 2);
    if (v5)
    {
      v7 = *(double *)(a1 + 16);
      v8 = v6 - v7;
      v9 = (double)v4;
      v10 = v6 * (double)v4 + v7 * (double)v5;
      v11 = v5 + v4;
      v12 = *(double *)(a1 + 24) + *((double *)result + 3) + v8 * v8 * v9 * (double)v5 / (double)v11;
      *(double *)(a1 + 16) = v10 / (double)v11;
      *(double *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 8) = v11;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v4;
      v13 = *((_QWORD *)result + 3);
      *(double *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 24) = v13;
    }
  }
  return result;
}

uint64_t turi::groupby_operators::variance::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  double v3;

  v2 = *(_QWORD *)(this + 8);
  v3 = 0.0;
  if (v2 >= 2)
    v3 = *(double *)(this + 24) / (double)v2;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 1;
  *(double *)a2 = v3;
  return this;
}

_QWORD *turi::groupby_operators::variance::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Var");
}

char *turi::groupby_operators::variance::save(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *result;
  unint64_t v11;
  size_t v12;
  char **v13;
  size_t v14;
  BOOL v15;
  std::vector<char>::size_type v16;
  size_t v17;
  char **v18;
  size_t v19;
  BOOL v20;
  std::vector<char>::size_type v21;
  size_t v22;
  char **v23;
  size_t v24;
  BOOL v25;
  std::vector<char>::size_type v26;

  v4 = a1 + 1;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v5)
    {
      v12 = 2 * v5 + 16;
      *(_QWORD *)(a2 + 40) = v12;
      v13 = *(char ***)(a2 + 16);
      if (v13)
      {
        v6 = *v13;
        v14 = v13[1] - *v13;
        v15 = v12 >= v14;
        v16 = v12 - v14;
        if (v16 != 0 && v15)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v16);
          v6 = **(char ***)(a2 + 16);
        }
        else if (!v15)
        {
          v13[1] = &v6[v12];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v12, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v6;
    }
    else
    {
      v6 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v6[*(_QWORD *)(a2 + 32)] = *v4;
    *(_QWORD *)(a2 + 32) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v7)
    {
      v17 = 2 * v7 + 16;
      *(_QWORD *)(a2 + 40) = v17;
      v18 = *(char ***)(a2 + 16);
      if (v18)
      {
        v8 = *v18;
        v19 = v18[1] - *v18;
        v20 = v17 >= v19;
        v21 = v17 - v19;
        if (v21 != 0 && v20)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v21);
          v8 = **(char ***)(a2 + 16);
        }
        else if (!v20)
        {
          v18[1] = &v8[v17];
        }
      }
      else
      {
        v8 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v17, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v8;
    }
    else
    {
      v8 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v8[*(_QWORD *)(a2 + 32)] = a1[2];
    *(_QWORD *)(a2 + 32) += 8;
  }
  v9 = a1 + 3;
  if (*(_QWORD *)a2)
    return (char *)std::ostream::write();
  v11 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a2 + 32) + 8 > v11)
  {
    v22 = 2 * v11 + 16;
    *(_QWORD *)(a2 + 40) = v22;
    v23 = *(char ***)(a2 + 16);
    if (v23)
    {
      result = *v23;
      v24 = v23[1] - *v23;
      v25 = v22 >= v24;
      v26 = v22 - v24;
      if (v26 != 0 && v25)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v26);
        result = **(char ***)(a2 + 16);
      }
      else if (!v25)
      {
        v23[1] = &result[v22];
      }
    }
    else
    {
      result = (char *)malloc_type_realloc(*(void **)(a2 + 24), v22, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a2 + 24) = result;
  }
  else
  {
    result = *(char **)(a2 + 24);
  }
  *(_QWORD *)&result[*(_QWORD *)(a2 + 32)] = *v9;
  *(_QWORD *)(a2 + 32) += 8;
  return result;
}

uint64_t turi::groupby_operators::variance::load(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    *(_QWORD *)(result + 8) = *(_QWORD *)(v4 + *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a2 + 24) += 8;
  }
  else
  {
    result = std::istream::read();
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v5 + *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a2 + 24) += 8;
  }
  else
  {
    result = std::istream::read();
  }
  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    return std::istream::read();
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(v6 + *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a2 + 24) += 8;
  return result;
}

void turi::groupby_operators::variance::~variance(turi::groupby_operators::variance *this)
{
  JUMPOUT(0x219A19A08);
}

void turi::groupby_operators::variance::print(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  void **v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48[2];
  unsigned __int8 v49;
  std::string v50;
  void **v51[13];
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 64))(v48);
  if ((v49 & 0x80u) == 0)
    v4 = v48;
  else
    v4 = (void **)v48[0];
  if ((v49 & 0x80u) == 0)
    v5 = v49;
  else
    v5 = (uint64_t)v48[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"value = ", 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v54, a1);
  switch(v55)
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_16;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_16:
      v51[0] = *(void ***)MEMORY[0x24BEDB7F0];
      v10 = *(void ***)(MEMORY[0x24BEDB7F0] + 72);
      *(void ***)((char *)v51 + (unint64_t)*(v51[0] - 3)) = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
      v51[2] = v10;
      v51[3] = (void **)(MEMORY[0x24BEDB848] + 16);
      if (v52 < 0)
        operator delete(v51[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v53);
      goto LABEL_23;
    case 2:
      if (*(char *)(v54 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(v54 + 8), *(_QWORD *)(v54 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v54 + 8);
        v50.__r_.__value_.__r.__words[2] = *(_QWORD *)(v54 + 24);
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v9;
      }
      goto LABEL_23;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(v54 + 8));
      goto LABEL_23;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (uint64_t *)(v54 + 8));
      goto LABEL_23;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(v54 + 8));
      goto LABEL_23;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v54, &v50);
      goto LABEL_23;
    case 7:
      memset(&v50, 0, sizeof(v50));
      goto LABEL_23;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_23;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(v54 + 8));
LABEL_23:
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v50;
      else
        v11 = (std::string *)v50.__r_.__value_.__r.__words[0];
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      else
        size = v50.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v11, size);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"count = ", 8);
      v14 = (_QWORD *)std::ostream::operator<<();
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"mean = ", 7);
      v16 = (_QWORD *)std::ostream::operator<<();
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"M2 = ", 5);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
      switch(v55)
      {
        case 2:
          v19 = (unint64_t *)v54;
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = v54;
            if (v54)
            {
              if (*(char *)(v54 + 31) < 0)
                operator delete(*(void **)(v54 + 8));
              v23 = v22;
              v24 = 0x1012C404EF22A49;
              goto LABEL_72;
            }
          }
          break;
        case 3:
          v36 = (unint64_t *)v54;
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = v54;
            if (v54)
            {
              v40 = *(void **)(v54 + 8);
              if (v40)
              {
                *(_QWORD *)(v54 + 16) = v40;
                operator delete(v40);
              }
              v23 = v39;
              v24 = 0x1080C409938AC02;
              goto LABEL_72;
            }
          }
          break;
        case 4:
          v25 = (unint64_t *)v54;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            v28 = v54;
            if (v54)
            {
              v51[0] = (void **)(v54 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v51);
              goto LABEL_65;
            }
          }
          break;
        case 5:
          v41 = (unint64_t *)v54;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            v28 = v54;
            if (v54)
            {
              v51[0] = (void **)(v54 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v51);
LABEL_65:
              v23 = v28;
              v24 = 0x1020C405E66F15BLL;
              goto LABEL_72;
            }
          }
          break;
        case 8:
          v44 = (unint64_t *)v54;
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            v47 = v54;
            if (v54)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v54 + 16));
              v23 = v47;
              v35 = -235920773;
              goto LABEL_71;
            }
          }
          break;
        case 9:
          v29 = (unint64_t *)v54;
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            v32 = v54;
            if (v54)
            {
              v33 = *(void **)(v54 + 48);
              if (v33)
              {
                *(_QWORD *)(v54 + 56) = v33;
                operator delete(v33);
              }
              v34 = *(void **)(v32 + 24);
              if (v34)
              {
                *(_QWORD *)(v32 + 32) = v34;
                operator delete(v34);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v32 + 8);
              v23 = v32;
              v35 = 2071181815;
LABEL_71:
              v24 = v35 | 0x1030C4000000000;
LABEL_72:
              MEMORY[0x219A19A08](v23, v24);
            }
          }
          break;
        default:
          break;
      }
      if ((char)v49 < 0)
        operator delete(v48[0]);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_218149564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  switch(*(_BYTE *)(v22 - 76))
  {
    case 2:
      v24 = *(unint64_t **)(v22 - 88);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (v26)
        goto LABEL_39;
      v27 = *(_QWORD *)(v22 - 88);
      if (!v27)
        goto LABEL_39;
      if (*(char *)(v27 + 31) < 0)
        operator delete(*(void **)(v27 + 8));
      v28 = (_QWORD *)v27;
      v29 = 0x1012C404EF22A49;
      break;
    case 3:
      v38 = *(unint64_t **)(v22 - 88);
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (v40)
        goto LABEL_39;
      v41 = *(_QWORD **)(v22 - 88);
      if (!v41)
        goto LABEL_39;
      v42 = (void *)v41[1];
      if (v42)
      {
        v41[2] = v42;
        operator delete(v42);
      }
      v28 = v41;
      v29 = 0x1080C409938AC02;
      break;
    case 4:
      v30 = *(unint64_t **)(v22 - 88);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v22 - 88);
      if (!v33)
        goto LABEL_39;
      *(_QWORD *)(v22 - 96) = v33 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
      goto LABEL_31;
    case 5:
      v43 = *(unint64_t **)(v22 - 88);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v33 = *(_QWORD **)(v22 - 88);
      if (!v33)
        goto LABEL_39;
      *(_QWORD *)(v22 - 96) = v33 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
LABEL_31:
      v28 = v33;
      v29 = 0x1020C405E66F15BLL;
      break;
    case 8:
      v46 = *(unint64_t **)(v22 - 88);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = *(_QWORD *)(v22 - 88);
        if (v49)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v49 + 16));
          MEMORY[0x219A19A08](v49, 0x1030C40F1F0227BLL);
        }
        *(_QWORD *)(v22 - 88) = 0;
      }
      goto LABEL_39;
    case 9:
      v34 = *(unint64_t **)(v22 - 88);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_39;
      v37 = *(_QWORD **)(v22 - 88);
      if (!v37)
        goto LABEL_39;
      v28 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v37);
      v29 = 0x1030C407B73B9F7;
      break;
    default:
      goto LABEL_39;
  }
  MEMORY[0x219A19A08](v28, v29);
LABEL_39:
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::groupby_operators::stdv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9303D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::stdv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9303D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::stdv>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

_QWORD *turi::groupby_operators::stdv::new_instance(turi::groupby_operators::stdv *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[2] = 0;
  result[3] = 0;
  *result = &unk_24D930420;
  result[1] = 0;
  return result;
}

double turi::groupby_operators::stdv::emit@<D0>(turi::groupby_operators::stdv *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  double v3;
  double result;

  v2 = *((_QWORD *)this + 1);
  v3 = 0.0;
  if (v2 >= 2)
    v3 = *((double *)this + 3) / (double)v2;
  result = sqrt(v3);
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 1;
  *(double *)a2 = result;
  return result;
}

_QWORD *turi::groupby_operators::stdv::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Stdv");
}

void std::__shared_ptr_emplace<turi::groupby_operators::select_one>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9304C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::select_one>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9304C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::select_one>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

uint64_t turi::groupby_operators::select_one::new_instance(turi::groupby_operators::select_one *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &unk_24D930510;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

unint64_t *turi::groupby_operators::select_one::add_element_simple(unint64_t *this, const turi::flexible_type *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  unint64_t *v35;
  unint64_t v36;
  void **v37;

  if (!*((_BYTE *)this + 24))
  {
    v3 = (uint64_t)this;
    v4 = this + 1;
    if (this + 1 != (unint64_t *)a2)
    {
      switch(*((_BYTE *)this + 20))
      {
        case 2:
          v5 = (unint64_t *)*v4;
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            v8 = (unint64_t *)*v4;
            if (!*v4)
              goto LABEL_41;
            if (*((char *)v8 + 31) < 0)
              operator delete((void *)v8[1]);
            v9 = v8;
            v10 = 0x1012C404EF22A49;
            goto LABEL_40;
          }
          break;
        case 3:
          v11 = (unint64_t *)*v4;
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            v14 = (unint64_t *)*v4;
            if (!*v4)
              goto LABEL_41;
            v15 = (void *)v14[1];
            if (v15)
            {
              v14[2] = (unint64_t)v15;
              operator delete(v15);
            }
            v9 = v14;
            v10 = 0x1080C409938AC02;
            goto LABEL_40;
          }
          break;
        case 4:
          v16 = (unint64_t *)*v4;
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            v19 = (unint64_t *)*v4;
            if (!*v4)
              goto LABEL_41;
            v37 = (void **)(v19 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v37);
            goto LABEL_28;
          }
          break;
        case 5:
          v20 = (unint64_t *)*v4;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
          {
            v19 = (unint64_t *)*v4;
            if (!*v4)
              goto LABEL_41;
            v37 = (void **)(v19 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v37);
LABEL_28:
            v9 = v19;
            v10 = 0x1020C405E66F15BLL;
            goto LABEL_40;
          }
          break;
        case 8:
          v23 = (unint64_t *)*v4;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v26 = (unint64_t *)*v4;
            if (!*v4)
              goto LABEL_41;
            boost::detail::shared_count::~shared_count((unsigned int **)v26 + 2);
            v9 = v26;
            v27 = -235920773;
            goto LABEL_39;
          }
          break;
        case 9:
          v28 = (unint64_t *)*v4;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            this = (unint64_t *)*v4;
            if (*v4)
            {
              v9 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(this);
              v27 = 2071181815;
LABEL_39:
              v10 = v27 | 0x1030C4000000000;
LABEL_40:
              this = (unint64_t *)MEMORY[0x219A19A08](v9, v10);
            }
LABEL_41:
            *v4 = 0;
          }
          break;
        default:
          break;
      }
      v31 = *(_QWORD *)a2;
      *(unint64_t *)((char *)v4 + 5) = *(_QWORD *)((char *)a2 + 5);
      *v4 = v31;
      LODWORD(v31) = *((unsigned __int8 *)a2 + 12);
      *(_BYTE *)(v3 + 20) = v31;
      v32 = v31 > 9;
      v33 = (1 << v31) & 0x33C;
      if (!v32 && v33 != 0)
      {
        v35 = (unint64_t *)*v4;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 + 1, v35));
      }
    }
    *(_BYTE *)(v3 + 24) = 1;
  }
  return this;
}

_QWORD *turi::groupby_operators::select_one::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Select One");
}

void turi::groupby_operators::select_one::save(turi::groupby_operators::select_one *this, turi::oarchive *a2)
{
  _BYTE *v4;
  unint64_t v5;
  _BYTE *v6;
  size_t v7;
  _QWORD *v8;
  size_t v9;
  BOOL v10;
  std::vector<char>::size_type v11;

  v4 = (char *)this + 24;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 1 > v5)
    {
      v7 = 2 * v5 + 2;
      *((_QWORD *)a2 + 5) = v7;
      v8 = (_QWORD *)*((_QWORD *)a2 + 2);
      if (v8)
      {
        v6 = (_BYTE *)*v8;
        v9 = v8[1] - *v8;
        v10 = v7 >= v9;
        v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v11);
          v6 = (_BYTE *)**((_QWORD **)a2 + 2);
        }
        else if (!v10)
        {
          v8[1] = &v6[v7];
        }
      }
      else
      {
        v6 = malloc_type_realloc(*((void **)a2 + 3), v7, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v6;
    }
    else
    {
      v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    }
    v6[(*((_QWORD *)a2 + 4))++] = *v4;
  }
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 1);
}

void turi::groupby_operators::select_one::load(turi::groupby_operators::select_one *this, turi::iarchive *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 2);
  if (v4)
    *((_BYTE *)this + 24) = *(_BYTE *)(v4 + (*((_QWORD *)a2 + 3))++);
  else
    std::istream::read();
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, (_QWORD **)this + 1);
}

void turi::groupby_operators::select_one::~select_one(turi::groupby_operators::select_one *this)
{
  turi::groupby_operators::select_one::~select_one(this);
  JUMPOUT(0x219A19A08);
}

{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v31;

  *(_QWORD *)this = &unk_24D930510;
  switch(*((_BYTE *)this + 20))
  {
    case 2:
      v2 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *((_QWORD *)this + 1);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = (_QWORD *)*((_QWORD *)this + 1);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *((_QWORD *)this + 1);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (_QWORD *)*((_QWORD *)this + 1);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
}

uint64_t turi::groupby_operators::select_one::set_input_type(uint64_t a1, uint64_t a2)
{
  return a2;
}

void std::__shared_ptr_emplace<turi::groupby_operators::zip_dict>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9305B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::zip_dict>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9305B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::zip_dict>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

uint64_t turi::groupby_operators::zip_dict::new_instance(turi::groupby_operators::zip_dict *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_24D930600;
  *(_QWORD *)(result + 8) = result + 16;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

uint64_t turi::groupby_operators::zip_dict::add_element(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t **v3;
  __n128 v4;
  _BYTE v5[32];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*(_BYTE *)(v2 + 12) == 7)
  {
    *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    v3 = (uint64_t **)(result + 8);
    std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>((uint64_t)v5, (uint64_t *)v2, v2 + 16);
    std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type,turi::flexible_type>>(v3, (uint64_t)v5, (uint64_t)v5, v4);
    return std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v5);
  }
  return result;
}

void sub_218149FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::groupby_operators::zip_dict::add_element_simple()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = "zip_dict does not support add_element_simple with one value";
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

void turi::groupby_operators::zip_dict::combine(uint64_t a1, void *lpsrc)
{
  _BYTE *v3;
  __n128 v4;
  _BYTE *v5;
  __n128 v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;

  if (!v3)
    __cxa_bad_cast();
  v5 = v3;
  std::map<turi::flexible_type,turi::flexible_type>::map[abi:ne180100]((uint64_t *)&v8, (uint64_t)(v3 + 8), v4);
  v10 = v5[32];
  v7 = *(_BYTE *)(a1 + 32) | v10;
  *(_BYTE *)(a1 + 32) = v7;
  if (!v7)
    std::map<turi::flexible_type,turi::flexible_type>::insert[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>((uint64_t *)(a1 + 8), v8, &v9, v6);
  std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy((uint64_t)&v8, v9);
}

void sub_21814A0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v12;

  std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy(v12, a12);
  _Unwind_Resume(a1);
}

void turi::groupby_operators::zip_dict::emit(turi::groupby_operators::zip_dict *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  _QWORD *v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  void **v74;

  if (*((_BYTE *)this + 32) && !*((_QWORD *)this + 3))
  {
    v72 = 0uLL;
    v73 = 0;
    *(uint64_t *)((char *)a2 + 5) = 0;
    *a2 = 0;
    *((_BYTE *)a2 + 12) = 5;
    v10 = (_QWORD *)operator new();
    v11 = v10;
    *v10 = 0;
    v10[1] = 0;
    v12 = (void **)(v10 + 1);
    v10[2] = 0;
    v10[3] = 0;
    *a2 = (uint64_t)v10;
    *v10 = 1;
    switch(*((_BYTE *)a2 + 12))
    {
      case 2:
        if (*v10 != 1)
        {
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, *a2);
          *a2 = (uint64_t)v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr(v11);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v11));
          if (!v15)
          {
            if (*((char *)v11 + 31) < 0)
              operator delete(*v12);
            v16 = v11;
            v17 = 0x1012C404EF22A49;
            goto LABEL_84;
          }
        }
        break;
      case 3:
        if (*v10 != 1)
        {
          v45 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v45, *a2);
          *a2 = (uint64_t)v45;
          *v45 = 1;
          do
          {
            v46 = __ldaxr(v11);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v11));
          if (!v47)
          {
            v48 = *v12;
            if (*v12)
            {
              v11[2] = v48;
              operator delete(v48);
            }
            v16 = v11;
            v17 = 0x1080C409938AC02;
            goto LABEL_84;
          }
        }
        break;
      case 4:
        if (*v10 != 1)
        {
          v49 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v49, *a2);
          *a2 = (uint64_t)v49;
          *v49 = 1;
          do
          {
            v50 = __ldaxr(v11);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v11));
          if (!v51)
          {
            v74 = v12;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v74);
            goto LABEL_66;
          }
        }
        break;
      case 5:
        if (*v10 != 1)
        {
          v57 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v57, *a2);
          *a2 = (uint64_t)v57;
          *v57 = 1;
          do
          {
            v58 = __ldaxr(v11);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v11));
          if (!v59)
          {
            v74 = v12;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v74);
LABEL_66:
            v16 = v11;
            v17 = 0x1020C405E66F15BLL;
            goto LABEL_84;
          }
        }
        break;
      case 8:
        if (*v10 != 1)
        {
          v60 = operator new();
          v61 = *a2;
          *(_QWORD *)v60 = *(_QWORD *)*a2;
          *(_QWORD *)(v60 + 8) = *(_QWORD *)(v61 + 8);
          v62 = *(_QWORD *)(v61 + 16);
          *(_QWORD *)(v60 + 16) = v62;
          if (v62)
          {
            v63 = (unsigned int *)(v62 + 8);
            do
              v64 = __ldxr(v63);
            while (__stxr(v64 + 1, v63));
          }
          v65 = *(_OWORD *)(v61 + 24);
          v66 = *(_OWORD *)(v61 + 40);
          *(_OWORD *)(v60 + 56) = *(_OWORD *)(v61 + 56);
          *(_OWORD *)(v60 + 40) = v66;
          *(_OWORD *)(v60 + 24) = v65;
          *a2 = v60;
          *(_QWORD *)v60 = 1;
          do
          {
            v67 = __ldaxr(v11);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, v11));
          if (!v68)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v11 + 2);
            v16 = v11;
            v56 = -235920773;
            goto LABEL_75;
          }
        }
        break;
      case 9:
        if (*v10 != 1)
        {
          v52 = (_QWORD *)operator new();
          v53 = *a2 + 8;
          *v52 = *(_QWORD *)*a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v52 + 1, v53);
          *a2 = (uint64_t)v52;
          *v52 = 1;
          do
          {
            v54 = __ldaxr(v11);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v11));
          if (!v55)
          {
            v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v11);
            v56 = 2071181815;
LABEL_75:
            v17 = v56 | 0x1030C4000000000;
LABEL_84:
            MEMORY[0x219A19A08](v16, v17);
          }
        }
        break;
      default:
        break;
    }
  }
  else
  {
    v72 = 0uLL;
    v73 = 0;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::insert<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,0>((uint64_t)&v72, 0, *((_QWORD **)this + 1), (_QWORD *)this + 2);
    *(uint64_t *)((char *)a2 + 5) = 0;
    *a2 = 0;
    *((_BYTE *)a2 + 12) = 5;
    v3 = (_QWORD *)operator new();
    v4 = v3;
    *v3 = 0;
    v3[1] = 0;
    v5 = (void **)(v3 + 1);
    v3[2] = 0;
    v3[3] = 0;
    *a2 = (uint64_t)v3;
    *v3 = 1;
    switch(*((_BYTE *)a2 + 12))
    {
      case 2:
        if (*v3 != 1)
        {
          v6 = (_QWORD *)operator new();
          v7 = *a2;
          *v6 = *(_QWORD *)*a2;
          v8 = (std::string *)(v6 + 1);
          if (*(char *)(v7 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
          }
          else
          {
            v9 = *(_OWORD *)(v7 + 8);
            v6[3] = *(_QWORD *)(v7 + 24);
            *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
          }
          *a2 = (uint64_t)v6;
          *v6 = 1;
          do
          {
            v69 = __ldaxr(v4);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v4));
          if (!v70)
          {
            v22 = 0x1012C404EF22A49;
            if ((*((char *)v4 + 31) & 0x80000000) == 0)
              goto LABEL_83;
            v23 = *v5;
            goto LABEL_82;
          }
        }
        break;
      case 3:
        if (*v3 != 1)
        {
          v18 = (_QWORD *)operator new();
          v19 = *a2;
          *v18 = *(_QWORD *)*a2;
          v18[2] = 0;
          v18[3] = 0;
          v18[1] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v18 + 1, *(const void **)(v19 + 8), *(_QWORD *)(v19 + 16), (uint64_t)(*(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8)) >> 3);
          *a2 = (uint64_t)v18;
          *v18 = 1;
          do
          {
            v20 = __ldaxr(v4);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v4));
          if (!v21)
          {
            v22 = 0x1080C409938AC02;
            v23 = *v5;
            if (*v5)
            {
              v4[2] = v23;
LABEL_82:
              operator delete(v23);
            }
            goto LABEL_83;
          }
        }
        break;
      case 4:
        if (*v3 != 1)
        {
          v24 = (_QWORD *)operator new();
          v25 = *a2;
          *v24 = *(_QWORD *)*a2;
          v24[2] = 0;
          v24[3] = 0;
          v24[1] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v24 + 1, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 4);
          *a2 = (uint64_t)v24;
          *v24 = 1;
          do
          {
            v26 = __ldaxr(v4);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v4));
          if (!v27)
          {
            v22 = 0x1020C405E66F15BLL;
            v74 = v5;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v74);
            goto LABEL_83;
          }
        }
        break;
      case 5:
        if (*v3 != 1)
        {
          v28 = (_QWORD *)operator new();
          v29 = *a2;
          *v28 = *(_QWORD *)*a2;
          v28[2] = 0;
          v28[3] = 0;
          v28[1] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v28 + 1, *(uint64_t **)(v29 + 8), *(uint64_t **)(v29 + 16), (uint64_t)(*(_QWORD *)(v29 + 16) - *(_QWORD *)(v29 + 8)) >> 5);
          *a2 = (uint64_t)v28;
          *v28 = 1;
          do
          {
            v30 = __ldaxr(v4);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v4));
          if (!v31)
          {
            v22 = 0x1020C405E66F15BLL;
            v74 = v5;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v74);
            goto LABEL_83;
          }
        }
        break;
      case 8:
        if (*v3 != 1)
        {
          v32 = operator new();
          v33 = *a2;
          *(_QWORD *)v32 = *(_QWORD *)*a2;
          *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
          v34 = *(_QWORD *)(v33 + 16);
          *(_QWORD *)(v32 + 16) = v34;
          if (v34)
          {
            v35 = (unsigned int *)(v34 + 8);
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }
          v37 = *(_OWORD *)(v33 + 24);
          v38 = *(_OWORD *)(v33 + 40);
          *(_OWORD *)(v32 + 56) = *(_OWORD *)(v33 + 56);
          *(_OWORD *)(v32 + 40) = v38;
          *(_OWORD *)(v32 + 24) = v37;
          *a2 = v32;
          *(_QWORD *)v32 = 1;
          do
          {
            v39 = __ldaxr(v4);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v4));
          if (!v40)
          {
            v22 = 0x1030C40F1F0227BLL;
            boost::detail::shared_count::~shared_count((unsigned int **)v4 + 2);
            goto LABEL_83;
          }
        }
        break;
      case 9:
        if (*v3 != 1)
        {
          v41 = (_QWORD *)operator new();
          v42 = *a2 + 8;
          *v41 = *(_QWORD *)*a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v41 + 1, v42);
          *a2 = (uint64_t)v41;
          *v41 = 1;
          do
          {
            v43 = __ldaxr(v4);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v4));
          if (!v44)
          {
            v22 = 0x1030C407B73B9F7;
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v4);
LABEL_83:
            v16 = v4;
            v17 = v22;
            goto LABEL_84;
          }
        }
        break;
      default:
        break;
    }
  }
  v71 = *a2;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(v71 + 8));
  *(_OWORD *)(v71 + 8) = v72;
  *(_QWORD *)(v71 + 24) = v73;
  v72 = 0uLL;
  v73 = 0;
  v74 = (void **)&v72;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v74);
}

void sub_21814A8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  unint64_t **v12;
  uint64_t v13;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  void *v37;
  unint64_t *v38;
  unint64_t *v39;
  unsigned int v40;

  MEMORY[0x219A19A08](v13, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v12 + 12))
  {
    case 2:
      v15 = *v12;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (v17)
        goto LABEL_46;
      v33 = *v12;
      if (!*v12)
        goto LABEL_45;
      if (*((char *)v33 + 31) < 0)
        operator delete((void *)v33[1]);
      v34 = v33;
      v35 = 0x1012C404EF22A49;
      goto LABEL_44;
    case 3:
      v18 = *v12;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (v20)
        goto LABEL_46;
      v36 = *v12;
      if (!*v12)
        goto LABEL_45;
      v37 = (void *)v36[1];
      if (v37)
      {
        v36[2] = (unint64_t)v37;
        operator delete(v37);
      }
      v34 = v36;
      v35 = 0x1080C409938AC02;
      goto LABEL_44;
    case 4:
      v21 = *v12;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (v23)
        goto LABEL_46;
      v38 = *v12;
      if (!*v12)
        goto LABEL_45;
      a12 = (void **)(v38 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
      goto LABEL_36;
    case 5:
      v24 = *v12;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (v26)
        goto LABEL_46;
      v38 = *v12;
      if (!*v12)
        goto LABEL_45;
      a12 = (void **)(v38 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a12);
LABEL_36:
      v34 = v38;
      v35 = 0x1020C405E66F15BLL;
      goto LABEL_44;
    case 8:
      v27 = *v12;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_46;
      v39 = *v12;
      if (!*v12)
        goto LABEL_45;
      boost::detail::shared_count::~shared_count((unsigned int **)v39 + 2);
      v34 = v39;
      v40 = -235920773;
      goto LABEL_43;
    case 9:
      v30 = *v12;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_46;
      if (!*v12)
        goto LABEL_45;
      v34 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v40 = 2071181815;
LABEL_43:
      v35 = v40 | 0x1030C4000000000;
LABEL_44:
      MEMORY[0x219A19A08](v34, v35);
LABEL_45:
      *v12 = 0;
LABEL_46:
      *v12 = 0;
      *((_DWORD *)v12 + 2) = 0;
      *((_BYTE *)v12 + 12) = 0;
      a12 = (void **)&a9;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a12);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_46;
  }
}

_QWORD *turi::groupby_operators::zip_dict::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Dict");
}

void turi::groupby_operators::zip_dict::save(turi::groupby_operators::zip_dict *this, turi::oarchive *a2)
{
  _BYTE *v4;
  unint64_t v5;
  _BYTE *v6;
  size_t v7;
  _QWORD *v8;
  size_t v9;
  BOOL v10;
  std::vector<char>::size_type v11;

  v4 = (char *)this + 32;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 1 > v5)
    {
      v7 = 2 * v5 + 2;
      *((_QWORD *)a2 + 5) = v7;
      v8 = (_QWORD *)*((_QWORD *)a2 + 2);
      if (v8)
      {
        v6 = (_BYTE *)*v8;
        v9 = v8[1] - *v8;
        v10 = v7 >= v9;
        v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v11);
          v6 = (_BYTE *)**((_QWORD **)a2 + 2);
        }
        else if (!v10)
        {
          v8[1] = &v6[v7];
        }
      }
      else
      {
        v6 = malloc_type_realloc(*((void **)a2 + 3), v7, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v6;
    }
    else
    {
      v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    }
    v6[(*((_QWORD *)a2 + 4))++] = *v4;
  }
  turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>((uint64_t)a2, *((_QWORD **)this + 1), (_QWORD *)this + 2, *((_QWORD *)this + 3));
}

turi::iarchive *turi::groupby_operators::zip_dict::load(turi::groupby_operators::zip_dict *this, turi::iarchive *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = *((_QWORD *)a2 + 2);
  if (v4)
    *((_BYTE *)this + 32) = *(_BYTE *)(v4 + (*((_QWORD *)a2 + 3))++);
  else
    std::istream::read();
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  v5 = (_QWORD *)((char *)this + 16);
  std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy((uint64_t)(v5 - 1), v6);
  *(v5 - 1) = v5;
  *v5 = 0;
  v5[1] = 0;
  return turi::deserialize_iterator<turi::iarchive,std::pair<turi::flexible_type,turi::flexible_type>,std::insert_iterator<std::map<turi::flexible_type,turi::flexible_type>>>(a2, (uint64_t)(v5 - 1), (uint64_t)v5);
}

void turi::groupby_operators::zip_dict::~zip_dict(turi::groupby_operators::zip_dict *this)
{
  *(_QWORD *)this = &unk_24D930600;
  std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = &unk_24D930600;
  std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  JUMPOUT(0x219A19A08);
}

void turi::groupby_operators::zip_dict::set_input_type()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = "set_input_type is not supported for zip_dict";
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

_QWORD *std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type,turi::flexible_type>>(uint64_t **a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  void **v6;
  _QWORD *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v6 = (void **)std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>((uint64_t)a1, &v12, a2, a4);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v10[1] = a1 + 1;
    *(_QWORD *)((char *)v7 + 37) = *(_QWORD *)(a3 + 5);
    v7[4] = *(_QWORD *)a3;
    *((_BYTE *)v7 + 44) = *(_BYTE *)(a3 + 12);
    *(_BYTE *)(a3 + 12) = 0;
    *(_QWORD *)((char *)v7 + 53) = *(_QWORD *)(a3 + 21);
    v7[6] = *(_QWORD *)(a3 + 16);
    *((_BYTE *)v7 + 60) = *(_BYTE *)(a3 + 28);
    *(_BYTE *)(a3 + 28) = 0;
    v11 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v8, v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<turi::flexible_type const,turi::flexible_type>::~pair((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::map<turi::flexible_type,turi::flexible_type>::insert[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  _QWORD *v5;
  uint64_t **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  if (a2 != a3)
  {
    v5 = a2;
    v6 = (uint64_t **)result;
    v7 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flexible_type> const&>(v6, v7, (uint64_t)(v5 + 4), v5 + 4, a4);
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != a3);
  }
  return result;
}

uint64_t *std::map<turi::flexible_type,turi::flexible_type>::map[abi:ne180100](uint64_t *a1, uint64_t a2, __n128 a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<turi::flexible_type,turi::flexible_type>::insert[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_21814B034(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flexible_type> const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t *a4, __n128 a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v7 = std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>(a1, a2, &v14, &v13, a3, a5);
  v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = (uint64_t *)operator new(0x40uLL);
    v11[1] = a1 + 1;
    std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]((uint64_t)(v8 + 4), a4);
    v12 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v14, v9, v8);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100](uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  if (a2 == (uint64_t *)result)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 28) = 0;
  }
  else
  {
    v2 = *a2;
    *(_QWORD *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)result = v2;
    LODWORD(v2) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(result + 12) = v2;
    v3 = v2 > 9;
    v4 = (1 << v2) & 0x33C;
    if (!v3 && v4 != 0)
    {
      v6 = *(unint64_t **)result;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    *(_QWORD *)(result + 16) = 0;
    v8 = (unint64_t **)(result + 16);
    *(_DWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 28) = 0;
    v9 = a2[2];
    *(_QWORD *)(result + 21) = *(uint64_t *)((char *)a2 + 21);
    *(_QWORD *)(result + 16) = v9;
    LODWORD(v9) = *((unsigned __int8 *)a2 + 28);
    *(_BYTE *)(result + 28) = v9;
    switch((int)v9)
    {
      case 2:
        v10 = *v8;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        break;
      case 3:
        v12 = *v8;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        break;
      case 4:
        v14 = *v8;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        break;
      case 5:
        v16 = *v8;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
        break;
      case 8:
        v18 = *v8;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
        break;
      case 9:
        v20 = *v8;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        break;
      default:
        return result;
    }
  }
  return result;
}

{
  uint64_t v2;
  BOOL v3;
  int v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  v2 = *a2;
  *(_QWORD *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)result = v2;
  LODWORD(v2) = *((unsigned __int8 *)a2 + 12);
  *(_BYTE *)(result + 12) = v2;
  v3 = v2 > 9;
  v4 = (1 << v2) & 0x33C;
  if (!v3 && v4 != 0)
  {
    v6 = *(unint64_t **)result;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  v8 = a2[2];
  *(_QWORD *)(result + 21) = *(uint64_t *)((char *)a2 + 21);
  *(_QWORD *)(result + 16) = v8;
  *(_BYTE *)(result + 28) = *((_BYTE *)a2 + 28);
  *((_BYTE *)a2 + 28) = 0;
  return result;
}

void std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy(a1, a2[1]);
    std::pair<turi::flexible_type const,turi::flexible_type>::~pair((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::insert<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,0>(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a3 == a4)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a3;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a4);
  }
  return std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__insert_with_size[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(a1, a2, a3, a4, v4);
}

uint64_t *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__insert_with_size[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;

  v5 = a2;
  if (a5 >= 1)
  {
    v10 = a1 + 16;
    v9 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 8);
    if (a5 <= (uint64_t)(v9 - v11) >> 5)
    {
      v21 = a3;
      std::__advance[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(&v21, a5);
      v19 = *(_QWORD *)(a1 + 8) - (_QWORD)v5;
      if (v19 >> 5 >= a5
        || (v21 = a3,
            std::__advance[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(&v21, v19 >> 5), *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::pair<turi::flexible_type,turi::flexible_type>*>(v10, v21, a4, *(_QWORD *)(a1 + 8)), v19 >= 1))
      {
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__move_range(a1, (uint64_t)v5, v11, (uint64_t)&v5[4 * a5]);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::pair<turi::flexible_type,turi::flexible_type> *>((uint64_t)&v26, a3, v21, (uint64_t)v5);
      }
    }
    else
    {
      v12 = *(uint64_t **)a1;
      v13 = a5 + ((uint64_t)(v11 - *(_QWORD *)a1) >> 5);
      if (v13 >> 59)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v14 = ((char *)a2 - (char *)v12) >> 5;
      v15 = v9 - (_QWORD)v12;
      if (v15 >> 4 > v13)
        v13 = v15 >> 4;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
        v16 = 0x7FFFFFFFFFFFFFFLL;
      else
        v16 = v13;
      v25 = a1 + 16;
      if (v16)
        v17 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(a1 + 16, v16);
      else
        v17 = 0;
      v21 = v17;
      v22 = &v17[4 * v14];
      v23 = v22;
      v24 = &v17[4 * v16];
      std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::__construct_at_end_with_size<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>((uint64_t)&v21, a3, a5);
      v5 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer((uint64_t **)a1, &v21, v5);
      std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)&v21);
    }
  }
  return v5;
}

void sub_21814B47C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::__construct_at_end_with_size<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  result = *(_QWORD *)(a1 + 16);
  if (a3)
  {
    v6 = result + 32 * a3;
    do
    {
      v7 = std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>(result, a2 + 4);
      v8 = (_QWORD *)a2[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)a2[2];
          v10 = *v9 == (_QWORD)a2;
          a2 = v9;
        }
        while (!v10);
      }
      result = v7 + 32;
      a2 = v9;
    }
    while (result != v6);
    result = v6;
  }
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_QWORD **std::__advance[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v7;
  _QWORD *v8;

  if (a2 < 0)
  {
    v7 = *result;
    do
    {
      v8 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v4 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v7[2];
          v5 = *v4 == (_QWORD)v7;
          v7 = v4;
        }
        while (v5);
      }
      v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2)
      return result;
    v2 = *result;
    do
    {
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (a2-- > 1);
  }
  *result = v4;
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::pair<turi::flexible_type,turi::flexible_type>*>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  result = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>(result, v6 + 4);
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      result = v7 + 32;
      v6 = v9;
    }
    while (v9 != a3);
  }
  return result;
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::pair<turi::flexible_type,turi::flexible_type> *>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]<turi::flexible_type const,turi::flexible_type,(void *)0>(a4, v5 + 4);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      a4 += 32;
      v5 = v8;
    }
    while (v8 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]<turi::flexible_type const,turi::flexible_type,(void *)0>(uint64_t a1, uint64_t *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  unint64_t *v37;
  unint64_t v38;
  unint64_t **v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unsigned int v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  void *v67;
  void *v68;
  unint64_t *v69;
  int v70;
  unint64_t *v72;
  unint64_t v73;
  void **v75;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(_BYTE *)(a1 + 12))
    {
      case 2:
        v4 = *(unint64_t **)a1;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a1;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a1;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v75 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
          goto LABEL_27;
        }
        break;
      case 5:
        v19 = *(unint64_t **)a1;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v75 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v75);
LABEL_27:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v22 = *(unint64_t **)a1;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a1;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a1;
          if (*(_QWORD *)a1)
          {
            v31 = (void *)v30[6];
            if (v31)
            {
              v30[7] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[3];
            if (v32)
            {
              v30[4] = (unint64_t)v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v8, v9);
          }
LABEL_44:
          *(_QWORD *)a1 = 0;
        }
        break;
      default:
        break;
    }
    v33 = *a2;
    *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)a1 = v33;
    LODWORD(v33) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(a1 + 12) = v33;
    v34 = v33 > 9;
    v35 = (1 << v33) & 0x33C;
    if (!v34 && v35 != 0)
    {
      v37 = *(unint64_t **)a1;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
    }
  }
  if (a2 != (uint64_t *)a1)
  {
    v39 = (unint64_t **)(a1 + 16);
    switch(*(_BYTE *)(a1 + 28))
    {
      case 2:
        v40 = *v39;
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          v43 = *v39;
          if (!*v39)
            goto LABEL_94;
          if (*((char *)v43 + 31) < 0)
            operator delete((void *)v43[1]);
          v44 = v43;
          v45 = 0x1012C404EF22A49;
          goto LABEL_93;
        }
        break;
      case 3:
        v46 = *v39;
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
        {
          v49 = *v39;
          if (!*v39)
            goto LABEL_94;
          v50 = (void *)v49[1];
          if (v50)
          {
            v49[2] = (unint64_t)v50;
            operator delete(v50);
          }
          v44 = v49;
          v45 = 0x1080C409938AC02;
          goto LABEL_93;
        }
        break;
      case 4:
        v51 = *v39;
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
        {
          v54 = *v39;
          if (!*v39)
            goto LABEL_94;
          v75 = (void **)(v54 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
          goto LABEL_77;
        }
        break;
      case 5:
        v55 = *v39;
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          v54 = *v39;
          if (!*v39)
            goto LABEL_94;
          v75 = (void **)(v54 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v75);
LABEL_77:
          v44 = v54;
          v45 = 0x1020C405E66F15BLL;
          goto LABEL_93;
        }
        break;
      case 8:
        v58 = *v39;
        do
        {
          v59 = __ldaxr(v58);
          v60 = v59 - 1;
        }
        while (__stlxr(v60, v58));
        if (!v60)
        {
          v61 = *v39;
          if (!*v39)
            goto LABEL_94;
          boost::detail::shared_count::~shared_count((unsigned int **)v61 + 2);
          v44 = v61;
          v62 = -235920773;
          goto LABEL_92;
        }
        break;
      case 9:
        v63 = *v39;
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          v66 = *v39;
          if (*v39)
          {
            v67 = (void *)v66[6];
            if (v67)
            {
              v66[7] = (unint64_t)v67;
              operator delete(v67);
            }
            v68 = (void *)v66[3];
            if (v68)
            {
              v66[4] = (unint64_t)v68;
              operator delete(v68);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v66 + 1));
            v44 = v66;
            v62 = 2071181815;
LABEL_92:
            v45 = v62 | 0x1030C4000000000;
LABEL_93:
            MEMORY[0x219A19A08](v44, v45);
          }
LABEL_94:
          *v39 = 0;
        }
        break;
      default:
        break;
    }
    v69 = (unint64_t *)a2[2];
    *(_QWORD *)(a1 + 21) = *(uint64_t *)((char *)a2 + 21);
    *v39 = v69;
    LODWORD(v69) = *((unsigned __int8 *)a2 + 28);
    *(_BYTE *)(a1 + 28) = (_BYTE)v69;
    v34 = v69 > 9;
    v70 = (1 << (char)v69) & 0x33C;
    if (!v34 && v70 != 0)
    {
      v72 = *v39;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 + 1, v72));
    }
  }
  return a1;
}

void turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  size_t v14;
  char **v15;
  size_t v16;
  BOOL v17;
  std::vector<char>::size_type v18;

  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v8)
    {
      v14 = 2 * v8 + 16;
      *(_QWORD *)(a1 + 40) = v14;
      v15 = *(char ***)(a1 + 16);
      if (v15)
      {
        v9 = *v15;
        v16 = v15[1] - *v15;
        v17 = v14 >= v16;
        v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          v9 = **(char ***)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = &v9[v14];
        }
      }
      else
      {
        v9 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v9;
    }
    else
    {
      v9 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v9[*(_QWORD *)(a1 + 32)] = a4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, a2 + 4);
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, a2 + 6);
      v11 = (_QWORD *)a2[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)a2[2];
          v13 = *v12 == (_QWORD)a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4)
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
}

turi::iarchive *turi::deserialize_iterator<turi::iarchive,std::pair<turi::flexible_type,turi::flexible_type>,std::insert_iterator<std::map<turi::flexible_type,turi::flexible_type>>>(turi::iarchive *result, uint64_t a2, uint64_t a3)
{
  turi::iarchive *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  __n128 v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  _BYTE v15[13];
  _BYTE v16[13];
  _QWORD *v17[2];
  _QWORD *v18[3];

  v3 = result;
  v18[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v14[0] = a2;
  v14[1] = a3;
  v4 = *((_QWORD *)result + 2);
  if (!v4)
    return (turi::iarchive *)std::istream::read();
  v5 = *((_QWORD *)result + 3);
  v13 = *(_QWORD *)(v4 + v5);
  *((_QWORD *)result + 3) = v5 + 8;
  if (v13)
  {
    for (i = 0; i < v13; ++i)
    {
      memset(v17, 0, 13);
      memset(v18, 0, 13);
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(v3, v17);
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(v3, v18);
      *(_QWORD **)&v15[5] = *(_QWORD **)((char *)v17 + 5);
      *(_QWORD **)v15 = v17[0];
      v15[12] = BYTE4(v17[1]);
      if (BYTE4(v17[1]) <= 9u && ((1 << SBYTE4(v17[1])) & 0x33C) != 0)
      {
        v8 = *(unint64_t **)v15;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
      *(_QWORD **)&v16[5] = *(_QWORD **)((char *)v18 + 5);
      *(_QWORD **)v16 = v18[0];
      v16[12] = BYTE4(v18[1]);
      if (BYTE4(v18[1]) <= 9u && ((1 << SBYTE4(v18[1])) & 0x33C) != 0)
      {
        v11 = *(unint64_t **)v16;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
      std::insert_iterator<std::map<turi::flexible_type,turi::flexible_type>>::operator=[abi:ne180100]((uint64_t)v14, (uint64_t *)v15, v7);
      std::pair<turi::flexible_type const,turi::flexible_type>::~pair((uint64_t)v15);
      result = (turi::iarchive *)std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v17);
    }
  }
  return result;
}

void sub_21814BE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::insert_iterator<std::map<turi::flexible_type,turi::flexible_type>>::operator=[abi:ne180100](uint64_t a1, uint64_t *a2, __n128 a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;

  v4 = std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flexible_type>>(*(uint64_t ***)a1, *(_QWORD **)(a1 + 8), (uint64_t)a2, a2, a3);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (uint64_t *)v4[1];
  if (v5)
  {
    do
    {
      v6 = v5;
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  else
  {
    do
    {
      v6 = (uint64_t *)v4[2];
      v7 = *v6 == (_QWORD)v4;
      v4 = v6;
    }
    while (!v7);
  }
  *(_QWORD *)(a1 + 8) = v6;
  return a1;
}

uint64_t *std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flexible_type>>(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t *a4, __n128 a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v7 = std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>(a1, a2, &v14, &v13, a3, a5);
  v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = (uint64_t *)operator new(0x40uLL);
    v11[1] = a1 + 1;
    std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]((uint64_t)(v8 + 4), a4);
    v12 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v14, v9, v8);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void std::__shared_ptr_emplace<turi::groupby_operators::zip_list>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9306A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::zip_list>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9306A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::zip_list>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

uint64_t turi::groupby_operators::zip_list::new_instance(turi::groupby_operators::zip_list *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &unk_24D9306F0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 33) = *((_BYTE *)this + 33);
  return result;
}

void turi::groupby_operators::zip_list::add_element_simple(turi::groupby_operators::zip_list *this, const turi::flexible_type *a2)
{
  double v4;
  uint64_t v5;
  unsigned int v6;
  double v8;
  char v9;
  size_t v10;
  unsigned int v11;
  double *v12;
  double *v13;
  unint64_t v14;
  double *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  char v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;

  switch(byte_254FF06EC)
  {
    case 0:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          if (*(_QWORD *)a2 == turi::FLEX_UNDEFINED)
            goto LABEL_98;
          goto LABEL_45;
        case 1:
          v4 = *(double *)a2;
          v5 = turi::FLEX_UNDEFINED;
          goto LABEL_88;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_45;
        case 6:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2))
            goto LABEL_98;
          goto LABEL_45;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          v4 = *(double *)&turi::FLEX_UNDEFINED;
          v5 = *(_QWORD *)a2;
LABEL_88:
          v55 = (double)v5;
          goto LABEL_89;
        case 1:
          v4 = *(double *)a2;
          v55 = *(double *)&turi::FLEX_UNDEFINED;
          goto LABEL_89;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_45;
        case 6:
          v65 = vabdd_f64((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_97;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v6 = *((unsigned __int8 *)a2 + 12);
      if (v6 - 3 < 7 || v6 < 2)
        goto LABEL_45;
      if (v6 != 2)
        turi::apply_binary_op_ff();
      v8 = *(double *)a2;
      v9 = *(_BYTE *)(*(_QWORD *)a2 + 31);
      v10 = v9 < 0 ? *(_QWORD *)(*(_QWORD *)&v8 + 16) : *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
      v66 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
          ? *(_QWORD *)(turi::FLEX_UNDEFINED + 16)
          : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v10 != v66)
        goto LABEL_45;
      v67 = (unsigned __int8 *)(*(_QWORD *)&v8 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
        v67 = *(unsigned __int8 **)v67;
      v68 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v68 = *(unsigned __int8 **)v68;
      if (v9 < 0)
      {
        if (memcmp(v67, v68, v10))
          goto LABEL_45;
      }
      else
      {
        if (!v10)
          goto LABEL_98;
        do
        {
          if (*v67 != *v68)
            goto LABEL_45;
          ++v67;
          ++v68;
          --v10;
        }
        while (v10);
      }
      goto LABEL_98;
    case 3:
      v11 = *((unsigned __int8 *)a2 + 12);
      if (v11 > 9)
        turi::apply_binary_op_ff();
      if (v11 != 3)
        goto LABEL_45;
      v12 = *(double **)(*(_QWORD *)a2 + 8);
      v13 = *(double **)(*(_QWORD *)a2 + 16);
      v14 = v13 - v12;
      v15 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v14 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v15) >> 3)
        goto LABEL_45;
      if (v13 == v12)
        goto LABEL_98;
      if (v14 <= 1)
        v14 = 1;
      while (*v12 == *v15)
      {
        ++v12;
        ++v15;
        if (!--v14)
          goto LABEL_98;
      }
      goto LABEL_45;
    case 4:
      v16 = *((unsigned __int8 *)a2 + 12);
      if (v16 > 9)
        turi::apply_binary_op_ff();
      if (v16 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v69, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        goto LABEL_98;
      }
      goto LABEL_45;
    case 5:
      v17 = *((unsigned __int8 *)a2 + 12);
      if (v17 > 9)
        turi::apply_binary_op_ff();
      if (v17 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v69, (uint64_t **)(*(_QWORD *)a2 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        goto LABEL_98;
      }
      goto LABEL_45;
    case 6:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          if (*(_QWORD *)a2 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF06E8)
            goto LABEL_98;
          goto LABEL_45;
        case 1:
          v65 = vabdd_f64(*(double *)a2, (double)dword_254FF06E8 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_97:
          if (v65 < 0.0000005)
            goto LABEL_98;
          goto LABEL_45;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_45;
        case 6:
          if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)a2 + 2) == dword_254FF06E8)
          {
            goto LABEL_98;
          }
          goto LABEL_45;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v18 = *((unsigned __int8 *)a2 + 12);
      if (v18 < 7 || v18 - 8 < 2)
        goto LABEL_45;
      if (v18 != 7)
        turi::apply_binary_op_ff();
      goto LABEL_98;
    case 8:
      v19 = *((unsigned __int8 *)a2 + 12);
      if (v19 < 8)
        goto LABEL_45;
      if (v19 != 8)
      {
        if (v19 != 9)
          turi::apply_binary_op_ff();
        goto LABEL_45;
      }
      if (!turi::image_type::operator==(*(_QWORD *)a2 + 8, turi::FLEX_UNDEFINED + 8))
        goto LABEL_45;
      goto LABEL_98;
    case 9:
      v20 = *((unsigned __int8 *)a2 + 12);
      if (v20 < 9)
        goto LABEL_45;
      if (v20 != 9)
        turi::apply_binary_op_ff();
      v27 = turi::FLEX_UNDEFINED;
      v28 = *(_QWORD **)a2;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)a2)
        goto LABEL_98;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v28 + 1), turi::FLEX_UNDEFINED + 8))
        goto LABEL_45;
      v30 = (char *)v28[3];
      v29 = (char *)v28[4];
      v31 = v29 - v30;
      if (v29 == v30)
        goto LABEL_98;
      if (!v28[1])
        goto LABEL_98;
      v32 = 1;
      do
      {
        v33 = *(_QWORD *)v30;
        v30 += 8;
        v32 *= v33;
      }
      while (v30 != v29);
      if (!v32)
        goto LABEL_98;
      v70 = 0;
      std::vector<unsigned long>::vector(&v71, v31 >> 3, &v70);
      v34 = v71;
      v35 = v72;
      v36 = **(_QWORD **)(v27 + 8);
      v37 = (char *)v72 - (char *)v71;
      v38 = v72 - v71;
      v39 = v38 - 1;
      if (v38 <= 1)
        v40 = 1;
      else
        v40 = v72 - v71;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    if (v35 == v34)
    {
      v48 = 0;
      v4 = *(double *)(*(_QWORD *)v28[1] + 8 * v28[9]);
    }
    else
    {
      v41 = 0;
      v42 = (uint64_t *)v28[6];
      v43 = v34;
      v44 = v40;
      do
      {
        v46 = *v43++;
        v45 = v46;
        v47 = *v42++;
        v41 += v47 * v45;
        --v44;
      }
      while (v44);
      v48 = 0;
      v4 = *(double *)(*(_QWORD *)v28[1] + 8 * (v28[9] + v41));
      v49 = *(uint64_t **)(v27 + 48);
      v50 = v34;
      v51 = v40;
      do
      {
        v53 = *v50++;
        v52 = v53;
        v54 = *v49++;
        v48 += v54 * v52;
        --v51;
      }
      while (v51);
    }
    v55 = *(double *)(v36 + 8 * (*(_QWORD *)(v27 + 72) + v48));
    if (v4 != v55)
      break;
    v56 = v38;
    v57 = v38 - 1;
    if (v37 >= 1)
    {
      v58 = v28[3];
      v59 = v34[v39] + 1;
      v34[v39] = v59;
      v60 = (v37 & 0xFFFFFFFFFFFFFFF8) - 16;
      v57 = v38 - 1;
      if (v59 >= *(_QWORD *)(v58 + 8 * v39))
      {
        while (1)
        {
          *(uint64_t *)((char *)v34 + v60 + 8) = 0;
          if (v57 <= 0)
            break;
          --v57;
          v61 = *(uint64_t *)((char *)v34 + v60) + 1;
          *(uint64_t *)((char *)v34 + v60) = v61;
          v62 = *(_QWORD *)(v58 + v60);
          v60 -= 8;
          if (v61 < v62)
          {
            v56 = 1;
            goto LABEL_80;
          }
        }
        v72 = v34;
        operator delete(v34);
        goto LABEL_98;
      }
      v56 = 1;
      v57 = v38 - 1;
    }
LABEL_80:
    ;
  }
  while ((v57 & 0x8000000000000000) == 0 && v56);
  if (!v34)
  {
LABEL_89:
    if (v4 != v55)
      goto LABEL_45;
LABEL_98:
    *((_BYTE *)this + 32) = 1;
    return;
  }
  v72 = v34;
  v63 = v4;
  v64 = v55;
  operator delete(v34);
  if (v63 == v64)
    goto LABEL_98;
LABEL_45:
  v21 = *((_QWORD *)this + 2);
  if (v21 >= *((_QWORD *)this + 3))
  {
    v26 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>((uint64_t *)this + 1, (char *)a2);
  }
  else
  {
    *(_QWORD *)v21 = 0;
    *(_DWORD *)(v21 + 8) = 0;
    *(_BYTE *)(v21 + 12) = 0;
    if ((const turi::flexible_type *)v21 != a2)
    {
      v22 = *(double *)a2;
      *(_QWORD *)(v21 + 5) = *(_QWORD *)((char *)a2 + 5);
      *(double *)v21 = v22;
      v23 = *((unsigned __int8 *)a2 + 12);
      *(_BYTE *)(v21 + 12) = v23;
      if (v23 <= 9 && ((1 << v23) & 0x33C) != 0)
      {
        v24 = *(unint64_t **)v21;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
      }
    }
    v26 = v21 + 16;
  }
  *((_QWORD *)this + 2) = v26;
}

void turi::groupby_operators::zip_list::combine(uint64_t a1, void *lpsrc)
{
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  __int16 v8;
  void **v9;

  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v5, v3[1], v3[2], ((char *)v3[2] - (char *)v3[1]) >> 4);
  v8 = *((_WORD *)v4 + 16);
  *(_BYTE *)(a1 + 32) |= v8;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,std::back_insert_iterator<std::vector<turi::flexible_type>>,0>(v5, v6, (uint64_t *)(a1 + 8));
  v9 = (void **)&v5;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_21814C7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::groupby_operators::zip_list::emit(turi::groupby_operators::zip_list *this@<X0>, uint64_t *a2@<X8>)
{
  int *v3;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  _QWORD *v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  void **v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void **v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void **v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  __int128 v81;
  __int128 v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  _QWORD *v116;
  void *v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  void *v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  _QWORD *v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  __int128 v137;
  __int128 v138;
  unint64_t v139;
  unint64_t v140;
  unsigned int v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  void **v148;
  __int128 v149;
  void *v150;
  void **v151;

  if (!*((_BYTE *)this + 32) || *((_QWORD *)this + 2) != *((_QWORD *)this + 1))
  {
    if (*((_BYTE *)this + 33))
    {
      v3 = (int *)*((_QWORD *)this + 1);
      v4 = (int *)*((_QWORD *)this + 2);
      v150 = 0;
      v149 = 0uLL;
      std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(&v149, v3, v4, ((char *)v4 - (char *)v3) >> 4);
      *(uint64_t *)((char *)a2 + 5) = 0;
      *a2 = 0;
      *((_BYTE *)a2 + 12) = 3;
      v5 = (_QWORD *)operator new();
      v6 = v5;
      *v5 = 0;
      v5[1] = 0;
      v7 = (void **)(v5 + 1);
      v5[2] = 0;
      v5[3] = 0;
      *a2 = (uint64_t)v5;
      *v5 = 1;
      switch(*((_BYTE *)a2 + 12))
      {
        case 2:
          if (*v5 != 1)
          {
            v8 = (_QWORD *)operator new();
            v9 = *a2;
            *v8 = *(_QWORD *)*a2;
            v10 = (std::string *)(v8 + 1);
            if (*(char *)(v9 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
            }
            else
            {
              v11 = *(_OWORD *)(v9 + 8);
              v8[3] = *(_QWORD *)(v9 + 24);
              *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
            }
            *a2 = (uint64_t)v8;
            *v8 = 1;
            do
            {
              v118 = __ldaxr(v6);
              v119 = v118 - 1;
            }
            while (__stlxr(v119, v6));
            if (!v119)
            {
              v39 = 0x1012C404EF22A49;
              if ((*((char *)v6 + 31) & 0x80000000) == 0)
                goto LABEL_130;
              v40 = *v7;
              goto LABEL_129;
            }
          }
          break;
        case 3:
          if (*v5 != 1)
          {
            v35 = (_QWORD *)operator new();
            v36 = (_QWORD *)*a2;
            *v35 = *(_QWORD *)*a2;
            v35[2] = 0;
            v35[3] = 0;
            v35[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v35 + 1, (const void *)v36[1], v36[2], (uint64_t)(v36[2] - v36[1]) >> 3);
            *a2 = (uint64_t)v35;
            *v35 = 1;
            do
            {
              v37 = __ldaxr(v6);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v6));
            if (!v38)
            {
              v39 = 0x1080C409938AC02;
              v40 = *v7;
              if (*v7)
              {
                v6[2] = v40;
LABEL_129:
                operator delete(v40);
              }
              goto LABEL_130;
            }
          }
          break;
        case 4:
          if (*v5 != 1)
          {
            v41 = (_QWORD *)operator new();
            v42 = (_QWORD *)*a2;
            *v41 = *(_QWORD *)*a2;
            v41[2] = 0;
            v41[3] = 0;
            v41[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v41 + 1, (uint64_t *)v42[1], (uint64_t *)v42[2], (uint64_t)(v42[2] - v42[1]) >> 4);
            *a2 = (uint64_t)v41;
            *v41 = 1;
            do
            {
              v43 = __ldaxr(v6);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v6));
            if (!v44)
            {
              v39 = 0x1020C405E66F15BLL;
              v151 = v7;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v151);
              goto LABEL_130;
            }
          }
          break;
        case 5:
          if (*v5 != 1)
          {
            v45 = (_QWORD *)operator new();
            v46 = (_QWORD *)*a2;
            *v45 = *(_QWORD *)*a2;
            v45[2] = 0;
            v45[3] = 0;
            v45[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v45 + 1, (uint64_t *)v46[1], (uint64_t *)v46[2], (uint64_t)(v46[2] - v46[1]) >> 5);
            *a2 = (uint64_t)v45;
            *v45 = 1;
            do
            {
              v47 = __ldaxr(v6);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v6));
            if (!v48)
            {
              v39 = 0x1020C405E66F15BLL;
              v151 = v7;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v151);
              goto LABEL_130;
            }
          }
          break;
        case 8:
          if (*v5 != 1)
          {
            v49 = operator new();
            v50 = (_QWORD *)*a2;
            *(_QWORD *)v49 = *(_QWORD *)*a2;
            *(_QWORD *)(v49 + 8) = v50[1];
            v51 = v50[2];
            *(_QWORD *)(v49 + 16) = v51;
            if (v51)
            {
              v52 = (unsigned int *)(v51 + 8);
              do
                v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
            }
            v54 = *(_OWORD *)(v50 + 3);
            v55 = *(_OWORD *)(v50 + 5);
            *(_OWORD *)(v49 + 56) = *(_OWORD *)(v50 + 7);
            *(_OWORD *)(v49 + 40) = v55;
            *(_OWORD *)(v49 + 24) = v54;
            *a2 = v49;
            *(_QWORD *)v49 = 1;
            do
            {
              v56 = __ldaxr(v6);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, v6));
            if (!v57)
            {
              v39 = 0x1030C40F1F0227BLL;
              boost::detail::shared_count::~shared_count((unsigned int **)v6 + 2);
              goto LABEL_130;
            }
          }
          break;
        case 9:
          if (*v5 != 1)
          {
            v58 = (_QWORD *)operator new();
            v59 = *a2 + 8;
            *v58 = *(_QWORD *)*a2;
            turi::flexible_type_impl::ndarray<double>::ndarray(v58 + 1, v59);
            *a2 = (uint64_t)v58;
            *v58 = 1;
            do
            {
              v60 = __ldaxr(v6);
              v61 = v60 - 1;
            }
            while (__stlxr(v61, v6));
            if (!v61)
            {
              v39 = 0x1030C407B73B9F7;
              std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v6);
LABEL_130:
              MEMORY[0x219A19A08](v6, v39);
            }
          }
          break;
        default:
          break;
      }
      v120 = (_QWORD *)*a2;
      v121 = (void *)v120[1];
      if (v121)
      {
        v120[2] = v121;
        operator delete(v121);
        v120[1] = 0;
        v120[2] = 0;
        v120[3] = 0;
      }
      *(_OWORD *)(v120 + 1) = v149;
      v120[3] = v150;
      return;
    }
    v149 = 0uLL;
    v150 = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v149, *((uint64_t **)this + 1), *((uint64_t **)this + 2), (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4);
    *(uint64_t *)((char *)a2 + 5) = 0;
    *a2 = 0;
    *((_BYTE *)a2 + 12) = 4;
    v12 = (_QWORD *)operator new();
    v13 = v12;
    *v12 = 0;
    v12[1] = 0;
    v14 = (void **)(v12 + 1);
    v12[2] = 0;
    v12[3] = 0;
    *a2 = (uint64_t)v12;
    *v12 = 1;
    switch(*((_BYTE *)a2 + 12))
    {
      case 2:
        if (*v12 != 1)
        {
          v15 = (_QWORD *)operator new();
          v16 = (_QWORD *)*a2;
          *v15 = *(_QWORD *)*a2;
          v17 = (std::string *)(v15 + 1);
          if (*((char *)v16 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(v17, (const std::string::value_type *)v16[1], v16[2]);
          }
          else
          {
            v18 = *(_OWORD *)(v16 + 1);
            v15[3] = v16[3];
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          *a2 = (uint64_t)v15;
          *v15 = 1;
          do
          {
            v146 = __ldaxr(v13);
            v147 = v146 - 1;
          }
          while (__stlxr(v147, v13));
          if (!v147)
          {
            v66 = 0x1012C404EF22A49;
            if ((*((char *)v13 + 31) & 0x80000000) == 0)
              goto LABEL_173;
            v67 = *v14;
            goto LABEL_172;
          }
        }
        break;
      case 3:
        if (*v12 != 1)
        {
          v62 = (_QWORD *)operator new();
          v63 = (_QWORD *)*a2;
          *v62 = *(_QWORD *)*a2;
          v62[2] = 0;
          v62[3] = 0;
          v62[1] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v62 + 1, (const void *)v63[1], v63[2], (uint64_t)(v63[2] - v63[1]) >> 3);
          *a2 = (uint64_t)v62;
          *v62 = 1;
          do
          {
            v64 = __ldaxr(v13);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v13));
          if (!v65)
          {
            v66 = 0x1080C409938AC02;
            v67 = *v14;
            if (*v14)
            {
              v13[2] = v67;
LABEL_172:
              operator delete(v67);
            }
            goto LABEL_173;
          }
        }
        break;
      case 4:
        if (*v12 != 1)
        {
          v68 = (_QWORD *)operator new();
          v69 = (_QWORD *)*a2;
          *v68 = *(_QWORD *)*a2;
          v68[2] = 0;
          v68[3] = 0;
          v68[1] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v68 + 1, (uint64_t *)v69[1], (uint64_t *)v69[2], (uint64_t)(v69[2] - v69[1]) >> 4);
          *a2 = (uint64_t)v68;
          *v68 = 1;
          do
          {
            v70 = __ldaxr(v13);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, v13));
          if (!v71)
          {
            v66 = 0x1020C405E66F15BLL;
            v151 = v14;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v151);
            goto LABEL_173;
          }
        }
        break;
      case 5:
        if (*v12 != 1)
        {
          v72 = (_QWORD *)operator new();
          v73 = (_QWORD *)*a2;
          *v72 = *(_QWORD *)*a2;
          v72[2] = 0;
          v72[3] = 0;
          v72[1] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v72 + 1, (uint64_t *)v73[1], (uint64_t *)v73[2], (uint64_t)(v73[2] - v73[1]) >> 5);
          *a2 = (uint64_t)v72;
          *v72 = 1;
          do
          {
            v74 = __ldaxr(v13);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v13));
          if (!v75)
          {
            v66 = 0x1020C405E66F15BLL;
            v151 = v14;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v151);
            goto LABEL_173;
          }
        }
        break;
      case 8:
        if (*v12 != 1)
        {
          v76 = operator new();
          v77 = (_QWORD *)*a2;
          *(_QWORD *)v76 = *(_QWORD *)*a2;
          *(_QWORD *)(v76 + 8) = v77[1];
          v78 = v77[2];
          *(_QWORD *)(v76 + 16) = v78;
          if (v78)
          {
            v79 = (unsigned int *)(v78 + 8);
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
          }
          v81 = *(_OWORD *)(v77 + 3);
          v82 = *(_OWORD *)(v77 + 5);
          *(_OWORD *)(v76 + 56) = *(_OWORD *)(v77 + 7);
          *(_OWORD *)(v76 + 40) = v82;
          *(_OWORD *)(v76 + 24) = v81;
          *a2 = v76;
          *(_QWORD *)v76 = 1;
          do
          {
            v83 = __ldaxr(v13);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, v13));
          if (!v84)
          {
            v66 = 0x1030C40F1F0227BLL;
            boost::detail::shared_count::~shared_count((unsigned int **)v13 + 2);
            goto LABEL_173;
          }
        }
        break;
      case 9:
        if (*v12 != 1)
        {
          v85 = (_QWORD *)operator new();
          v86 = *a2 + 8;
          *v85 = *(_QWORD *)*a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v85 + 1, v86);
          *a2 = (uint64_t)v85;
          *v85 = 1;
          do
          {
            v87 = __ldaxr(v13);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, v13));
          if (!v88)
          {
            v66 = 0x1030C407B73B9F7;
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v13);
LABEL_173:
            v33 = v13;
            v34 = v66;
            goto LABEL_174;
          }
        }
        break;
      default:
        break;
    }
LABEL_175:
    v148 = (void **)*a2;
    std::vector<turi::flexible_type>::__vdeallocate(v148 + 1);
    *(_OWORD *)(v148 + 1) = v149;
    v148[3] = v150;
    v149 = 0uLL;
    v150 = 0;
    v151 = (void **)&v149;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v151);
    return;
  }
  if (!*((_BYTE *)this + 33))
  {
    v149 = 0uLL;
    v150 = 0;
    *(uint64_t *)((char *)a2 + 5) = 0;
    *a2 = 0;
    *((_BYTE *)a2 + 12) = 4;
    v27 = (_QWORD *)operator new();
    v28 = v27;
    *v27 = 0;
    v27[1] = 0;
    v29 = (void **)(v27 + 1);
    v27[2] = 0;
    v27[3] = 0;
    *a2 = (uint64_t)v27;
    *v27 = 1;
    switch(*((_BYTE *)a2 + 12))
    {
      case 2:
        if (*v27 != 1)
        {
          v30 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v30, *a2);
          *a2 = (uint64_t)v30;
          *v30 = 1;
          do
          {
            v31 = __ldaxr(v28);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v28));
          if (!v32)
          {
            if (*((char *)v28 + 31) < 0)
              operator delete(*v29);
            v33 = v28;
            v34 = 0x1012C404EF22A49;
            goto LABEL_174;
          }
        }
        break;
      case 3:
        if (*v27 != 1)
        {
          v122 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v122, *a2);
          *a2 = (uint64_t)v122;
          *v122 = 1;
          do
          {
            v123 = __ldaxr(v28);
            v124 = v123 - 1;
          }
          while (__stlxr(v124, v28));
          if (!v124)
          {
            v125 = *v29;
            if (*v29)
            {
              v28[2] = v125;
              operator delete(v125);
            }
            v33 = v28;
            v34 = 0x1080C409938AC02;
            goto LABEL_174;
          }
        }
        break;
      case 4:
        if (*v27 != 1)
        {
          v126 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v126, *a2);
          *a2 = (uint64_t)v126;
          *v126 = 1;
          do
          {
            v127 = __ldaxr(v28);
            v128 = v127 - 1;
          }
          while (__stlxr(v128, v28));
          if (!v128)
          {
            v151 = v29;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v151);
            goto LABEL_151;
          }
        }
        break;
      case 5:
        if (*v27 != 1)
        {
          v129 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v129, *a2);
          *a2 = (uint64_t)v129;
          *v129 = 1;
          do
          {
            v130 = __ldaxr(v28);
            v131 = v130 - 1;
          }
          while (__stlxr(v131, v28));
          if (!v131)
          {
            v151 = v29;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v151);
LABEL_151:
            v33 = v28;
            v34 = 0x1020C405E66F15BLL;
            goto LABEL_174;
          }
        }
        break;
      case 8:
        if (*v27 != 1)
        {
          v132 = operator new();
          v133 = *a2;
          *(_QWORD *)v132 = *(_QWORD *)*a2;
          *(_QWORD *)(v132 + 8) = *(_QWORD *)(v133 + 8);
          v134 = *(_QWORD *)(v133 + 16);
          *(_QWORD *)(v132 + 16) = v134;
          if (v134)
          {
            v135 = (unsigned int *)(v134 + 8);
            do
              v136 = __ldxr(v135);
            while (__stxr(v136 + 1, v135));
          }
          v137 = *(_OWORD *)(v133 + 24);
          v138 = *(_OWORD *)(v133 + 40);
          *(_OWORD *)(v132 + 56) = *(_OWORD *)(v133 + 56);
          *(_OWORD *)(v132 + 40) = v138;
          *(_OWORD *)(v132 + 24) = v137;
          *a2 = v132;
          *(_QWORD *)v132 = 1;
          do
          {
            v139 = __ldaxr(v28);
            v140 = v139 - 1;
          }
          while (__stlxr(v140, v28));
          if (!v140)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v28 + 2);
            v33 = v28;
            v141 = -235920773;
            goto LABEL_165;
          }
        }
        break;
      case 9:
        if (*v27 != 1)
        {
          v142 = (_QWORD *)operator new();
          v143 = *a2 + 8;
          *v142 = *(_QWORD *)*a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v142 + 1, v143);
          *a2 = (uint64_t)v142;
          *v142 = 1;
          do
          {
            v144 = __ldaxr(v28);
            v145 = v144 - 1;
          }
          while (__stlxr(v145, v28));
          if (!v145)
          {
            v33 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v28);
            v141 = 2071181815;
LABEL_165:
            v34 = v141 | 0x1030C4000000000;
LABEL_174:
            MEMORY[0x219A19A08](v33, v34);
          }
        }
        break;
      default:
        goto LABEL_175;
    }
    goto LABEL_175;
  }
  *(uint64_t *)((char *)a2 + 5) = 0;
  *a2 = 0;
  *((_BYTE *)a2 + 12) = 3;
  v19 = (_QWORD *)operator new();
  v20 = v19;
  *v19 = 0;
  v19[1] = 0;
  v21 = (void **)(v19 + 1);
  v19[2] = 0;
  v19[3] = 0;
  *a2 = (uint64_t)v19;
  *v19 = 1;
  switch(*((_BYTE *)a2 + 12))
  {
    case 2:
      if (*v19 != 1)
      {
        v22 = (_QWORD *)operator new();
        std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, *a2);
        *a2 = (uint64_t)v22;
        *v22 = 1;
        do
        {
          v23 = __ldaxr(v20);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v20));
        if (!v24)
        {
          if (*((char *)v20 + 31) < 0)
            operator delete(*v21);
          v25 = v20;
          v26 = 0x1012C404EF22A49;
          goto LABEL_119;
        }
      }
      break;
    case 3:
      if (*v19 != 1)
      {
        v89 = (_QWORD *)operator new();
        std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v89, *a2);
        *a2 = (uint64_t)v89;
        *v89 = 1;
        do
        {
          v90 = __ldaxr(v20);
          v91 = v90 - 1;
        }
        while (__stlxr(v91, v20));
        if (!v91)
        {
          v92 = *v21;
          if (*v21)
          {
            v20[2] = v92;
            operator delete(v92);
          }
          v25 = v20;
          v26 = 0x1080C409938AC02;
          goto LABEL_119;
        }
      }
      break;
    case 4:
      if (*v19 != 1)
      {
        v93 = (_QWORD *)operator new();
        std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v93, *a2);
        *a2 = (uint64_t)v93;
        *v93 = 1;
        do
        {
          v94 = __ldaxr(v20);
          v95 = v94 - 1;
        }
        while (__stlxr(v95, v20));
        if (!v95)
        {
          *(_QWORD *)&v149 = v21;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
          goto LABEL_104;
        }
      }
      break;
    case 5:
      if (*v19 != 1)
      {
        v96 = (_QWORD *)operator new();
        std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v96, *a2);
        *a2 = (uint64_t)v96;
        *v96 = 1;
        do
        {
          v97 = __ldaxr(v20);
          v98 = v97 - 1;
        }
        while (__stlxr(v98, v20));
        if (!v98)
        {
          *(_QWORD *)&v149 = v21;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
LABEL_104:
          v25 = v20;
          v26 = 0x1020C405E66F15BLL;
          goto LABEL_119;
        }
      }
      break;
    case 8:
      if (*v19 != 1)
      {
        v99 = operator new();
        v100 = *a2;
        *(_QWORD *)v99 = *(_QWORD *)*a2;
        *(_QWORD *)(v99 + 8) = *(_QWORD *)(v100 + 8);
        v101 = *(_QWORD *)(v100 + 16);
        *(_QWORD *)(v99 + 16) = v101;
        if (v101)
        {
          v102 = (unsigned int *)(v101 + 8);
          do
            v103 = __ldxr(v102);
          while (__stxr(v103 + 1, v102));
        }
        v104 = *(_OWORD *)(v100 + 24);
        v105 = *(_OWORD *)(v100 + 40);
        *(_OWORD *)(v99 + 56) = *(_OWORD *)(v100 + 56);
        *(_OWORD *)(v99 + 40) = v105;
        *(_OWORD *)(v99 + 24) = v104;
        *a2 = v99;
        *(_QWORD *)v99 = 1;
        do
        {
          v106 = __ldaxr(v20);
          v107 = v106 - 1;
        }
        while (__stlxr(v107, v20));
        if (!v107)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v20 + 2);
          v25 = v20;
          v108 = -235920773;
          goto LABEL_118;
        }
      }
      break;
    case 9:
      if (*v19 != 1)
      {
        v109 = (_QWORD *)operator new();
        v110 = *a2 + 8;
        *v109 = *(_QWORD *)*a2;
        turi::flexible_type_impl::ndarray<double>::ndarray(v109 + 1, v110);
        *a2 = (uint64_t)v109;
        *v109 = 1;
        do
        {
          v111 = __ldaxr(v20);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v20));
        if (!v112)
        {
          v25 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v20);
          v108 = 2071181815;
LABEL_118:
          v26 = v108 | 0x1030C4000000000;
LABEL_119:
          MEMORY[0x219A19A08](v25, v26);
        }
      }
      break;
    default:
      break;
  }
  v113 = *a2;
  v114 = *a2;
  v117 = *(void **)(v114 + 8);
  v116 = (_QWORD *)(v114 + 8);
  v115 = v117;
  if (v117)
  {
    *(_QWORD *)(v113 + 16) = v115;
    operator delete(v115);
    *v116 = 0;
    v116[1] = 0;
    v116[2] = 0;
  }
  *v116 = 0;
  v116[1] = 0;
  v116[2] = 0;
}

