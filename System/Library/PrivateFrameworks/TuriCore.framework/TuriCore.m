void turi::flexible_type::~flexible_type(unint64_t **this)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v31;

  switch(*((_BYTE *)this + 12))
  {
    case 2:
      v2 = *this;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *this;
        if (*this)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *this;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *this;
        if (*this)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *this;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *this;
        if (*this)
        {
          v31 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *this;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *this;
        if (*this)
        {
          v31 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *this;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *this;
        if (*this)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *this;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *this;
        if (*this)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
}

void sub_217E6ADC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  void *v11;
  void *v13;

  v13 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_217E6B12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a10, *(_QWORD **)(a10 + 8));
  _Unwind_Resume(a1);
}

void sub_217E6B378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::neural_net::shared_float_array::copy(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = a1;
  std::allocate_shared[abi:ne180100]<turi::neural_net::float_buffer,std::allocator<turi::neural_net::float_buffer>,float const*&,std::vector<unsigned long>,void>(&v12, a2, &v10);
  v11 = v10;
  v10 = 0uLL;
  turi::neural_net::shared_float_array::shared_float_array(a3, &v11);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_217E6B4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::neural_net::shared_float_array::~shared_float_array(turi::neural_net::shared_float_array *this)
{
  *(_QWORD *)this = &unk_24D9175B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_24D9175B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x219A19A08);
}

void sub_217E6B620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::shared_float_array::data(turi::neural_net::shared_float_array *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1))
       + 4 * *((_QWORD *)this + 3);
}

uint64_t turi::neural_net::shared_float_array::size(turi::neural_net::shared_float_array *this)
{
  return *((_QWORD *)this + 6);
}

void turi::style_transfer::mps_style_transfer::init(uint64_t a1, uint64_t a2, const void ***a3, id *a4)
{
  uint64_t v8;
  float array_map_scalar;
  const void ***v10;
  const void **v11;
  const void **v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  char *v18;
  char *v19;
  char *v20;
  void *v21;
  char *v22;
  const void **v23;
  const void ***v24;
  BOOL v25;
  void **v26;
  void **v27;
  __int128 v28;
  uint64_t *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  TCMPSStyleTransfer *v35;
  void *v36;
  uint64_t v37;
  void **v38;
  void *v39;
  void *context;
  uint64_t v41[3];
  uint64_t *v42;
  _QWORD *v43[2];
  void *v44;
  __int128 v45;
  void *v46[2];
  uint64_t v47;
  void *__p;
  __int128 v49[3];
  void **p_p;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;

  v8 = MEMORY[0x219A19FE4]();
  std::string::basic_string[abi:ne180100]<0>(&__p, "st_num_styles");
  array_map_scalar = turi::neural_net::get_array_map_scalar(a2, (const void **)&__p, 1.0);
  context = (void *)v8;
  if (SHIBYTE(v49[0]) < 0)
    operator delete(__p);
  v43[0] = 0;
  v43[1] = 0;
  v42 = (uint64_t *)v43;
  v12 = *a3;
  v10 = a3 + 1;
  v11 = v12;
  if (v12 != (const void **)v10)
  {
    do
    {
      v13 = *((unsigned __int8 *)v11 + 55);
      if (*((char *)v11 + 55) < 0)
      {
        v14 = (char *)v11[4];
        v15 = (uint64_t)v11[5];
      }
      else
      {
        v14 = (char *)(v11 + 4);
        v15 = *((unsigned __int8 *)v11 + 55);
      }
      if (v15 >= 4)
      {
        v16 = &v14[v15];
        v17 = v14;
        do
        {
          v18 = (char *)memchr(v17, 99, v15 - 3);
          if (!v18)
            break;
          if (*(_DWORD *)v18 == 1986948963)
          {
            if (v18 == v16 || v18 - v14 == -1)
              break;
            if ((v13 & 0x80) != 0)
            {
              v19 = (char *)v11[4];
              v13 = (uint64_t)v11[5];
            }
            else
            {
              v19 = (char *)(v11 + 4);
            }
            if (v13 >= 4)
            {
              v20 = &v19[v13];
              v21 = v19;
              do
              {
                v22 = (char *)memchr(v21, 98, v13 - 3);
                if (!v22)
                  break;
                if (*(_DWORD *)v22 == 1935763810)
                {
                  if (v22 == v20 || v22 - v19 == -1)
                    break;
                  goto LABEL_26;
                }
                v21 = v22 + 1;
                v13 = v20 - (_BYTE *)v21;
              }
              while (v20 - (_BYTE *)v21 >= 4);
            }
            v52 = 0uLL;
            v53 = 0;
            std::vector<float>::resize((uint64_t)&v52, (unint64_t)v11[13]);
            turi::neural_net::convert_chw_to_hwc((uint64_t)(v11 + 7), (char *)v52);
            __p = (void *)v11[12];
            if (__p != (void *)4)
            {
              p_p = &__p;
            }
            p_p = 0;
            v51 = 0uLL;
            std::vector<unsigned long>::resize((uint64_t)&p_p, 4uLL);
            v26 = (void **)v11[11];
            v27 = p_p;
            *p_p = *v26;
            v27[1] = v26[2];
            v27[2] = v26[3];
            v27[3] = v26[1];
            v28 = v52;
            v47 = v53;
            v52 = 0uLL;
            v53 = 0;
            v44 = v27;
            v45 = v51;
            *(_OWORD *)v46 = v28;
            v51 = 0uLL;
            p_p = 0;
            turi::neural_net::shared_float_array::wrap((uint64_t)v46, (uint64_t)&v44, (uint64_t)&__p);
            v54 = (__int128 *)(v11 + 4);
            v29 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v42, v11 + 4, (uint64_t)&std::piecewise_construct, &v54);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v29 + 8), v49);
            v30 = v49[2];
            *((_OWORD *)v29 + 5) = v49[1];
            *((_OWORD *)v29 + 6) = v30;
            __p = &unk_24D9175B8;
            v31 = (std::__shared_weak_count *)*((_QWORD *)&v49[0] + 1);
            if (*((_QWORD *)&v49[0] + 1))
            {
              v32 = (unint64_t *)(*((_QWORD *)&v49[0] + 1) + 8);
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            if (v44)
            {
              *(_QWORD *)&v45 = v44;
              operator delete(v44);
            }
            if (v46[0])
            {
              v46[1] = v46[0];
              operator delete(v46[0]);
            }
            if (p_p)
            {
              *(_QWORD *)&v51 = p_p;
              operator delete(p_p);
            }
            if ((_QWORD)v52)
            {
              *((_QWORD *)&v52 + 1) = v52;
              operator delete((void *)v52);
            }
            goto LABEL_27;
          }
          v17 = v18 + 1;
          v15 = v16 - (_BYTE *)v17;
        }
        while (v16 - (_BYTE *)v17 >= 4);
      }
LABEL_26:
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::neural_net::shared_float_array> const&>(&v42, v11 + 4, (__int128 *)v11 + 2);
LABEL_27:
      v23 = (const void **)v11[1];
      if (v23)
      {
        do
        {
          v24 = (const void ***)v23;
          v23 = (const void **)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (const void ***)v11[2];
          v25 = *v24 == v11;
          v11 = (const void **)v24;
        }
        while (!v25);
      }
      v11 = (const void **)v24;
    }
    while (v24 != v10);
  }
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v41, (const void ***)&v42);
  +[TCMPSStyleTransferHelpers toNSDictionary:](TCMPSStyleTransferHelpers, "toNSDictionary:", v41);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v41, (_QWORD *)v41[1]);
  v35 = [TCMPSStyleTransfer alloc];
  objc_msgSend(*a4, "device");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = -[TCMPSStyleTransfer initWithDev:commandQueue:weights:numStyles:](v35, "initWithDev:commandQueue:weights:numStyles:", v36, *a4, v34, (unint64_t)array_map_scalar);
  v38 = *(void ***)(a1 + 8);
  v39 = *v38;
  *v38 = (void *)v37;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v42, v43[0]);
  objc_autoreleasePoolPop(context);
}

void sub_217E6BAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  void *v33;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

_QWORD *turi::style_transfer::mps_style_transfer::mps_style_transfer(_QWORD *a1, uint64_t a2, const void ***a3, id *a4)
{
  _QWORD *v8;
  void *v9;

  *a1 = &off_24D9174B0;
  v8 = (_QWORD *)operator new();
  a1[1] = v8;
  *v8 = 0;
  v9 = (void *)MEMORY[0x219A19FE4]();
  turi::style_transfer::mps_style_transfer::init((uint64_t)a1, a2, a3, a4);
  objc_autoreleasePoolPop(v9);
  return a1;
}

void sub_217E6BC1C(_Unwind_Exception *a1)
{
  id **v1;

  std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void turi::style_transfer::mps_style_transfer::~mps_style_transfer(id **this)
{
  *this = (id *)&off_24D9174B0;
  std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](this + 1, 0);
}

{
  *this = (id *)&off_24D9174B0;
  std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](this + 1, 0);
  JUMPOUT(0x219A19A08);
}

void turi::style_transfer::mps_style_transfer::export_weights(id **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  char *v9;
  char *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  void **v17;
  void **v18;
  __int128 v19;
  uint64_t *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  uint64_t *v26;
  _QWORD *v27[2];
  void *__p;
  __int128 v29;
  void *v30[2];
  uint64_t v31;
  _QWORD *v32;
  __int128 v33[3];
  void **v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 *v38;

  objc_msgSend(*this[1], "exportWeights");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  +[TCMPSStyleTransferHelpers fromNSDictionary:](TCMPSStyleTransferHelpers, "fromNSDictionary:");
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = v26;
  if (v26 != (uint64_t *)v27)
  {
    do
    {
      v4 = *((unsigned __int8 *)v3 + 55);
      if (*((char *)v3 + 55) < 0)
      {
        v5 = (char *)v3[4];
        v6 = v3[5];
      }
      else
      {
        v5 = (char *)(v3 + 4);
        v6 = *((unsigned __int8 *)v3 + 55);
      }
      if (v6 >= 4)
      {
        v7 = &v5[v6];
        v8 = v5;
        do
        {
          v9 = (char *)memchr(v8, 99, v6 - 3);
          if (!v9)
            break;
          if (*(_DWORD *)v9 == 1986948963)
          {
            if (v9 == v7 || v9 - v5 == -1)
              break;
            if ((v4 & 0x80) != 0)
            {
              v10 = (char *)v3[4];
              v4 = v3[5];
            }
            else
            {
              v10 = (char *)(v3 + 4);
            }
            if (v4 >= 4)
            {
              v11 = &v10[v4];
              v12 = v10;
              do
              {
                v13 = (char *)memchr(v12, 98, v4 - 3);
                if (!v13)
                  break;
                if (*(_DWORD *)v13 == 1935763810)
                {
                  if (v13 == v11 || v13 - v10 == -1)
                    break;
                  goto LABEL_24;
                }
                v12 = v13 + 1;
                v4 = v11 - (_BYTE *)v12;
              }
              while (v11 - (_BYTE *)v12 >= 4);
            }
            v36 = 0uLL;
            v37 = 0;
            std::vector<float>::resize((uint64_t)&v36, v3[13]);
            turi::neural_net::convert_hwc_to_chw(v3 + 7, v36);
            v32 = (_QWORD *)v3[12];
            if (v32 != (_QWORD *)4)
            {
              v34 = (void **)&v32;
            }
            v34 = 0;
            v35 = 0uLL;
            std::vector<unsigned long>::resize((uint64_t)&v34, 4uLL);
            v17 = (void **)v3[11];
            v18 = v34;
            *v34 = *v17;
            v18[1] = v17[3];
            v18[2] = v17[1];
            v18[3] = v17[2];
            v19 = v36;
            v31 = v37;
            v36 = 0uLL;
            v37 = 0;
            __p = v18;
            v29 = v35;
            *(_OWORD *)v30 = v19;
            v35 = 0uLL;
            v34 = 0;
            turi::neural_net::shared_float_array::wrap((uint64_t)v30, (uint64_t)&__p, (uint64_t)&v32);
            v38 = (__int128 *)(v3 + 4);
            v20 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, &v38);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v20 + 8), v33);
            v21 = v33[2];
            *((_OWORD *)v20 + 5) = v33[1];
            *((_OWORD *)v20 + 6) = v21;
            v32 = &unk_24D9175B8;
            v22 = (std::__shared_weak_count *)*((_QWORD *)&v33[0] + 1);
            if (*((_QWORD *)&v33[0] + 1))
            {
              v23 = (unint64_t *)(*((_QWORD *)&v33[0] + 1) + 8);
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            if (__p)
            {
              *(_QWORD *)&v29 = __p;
              operator delete(__p);
            }
            if (v30[0])
            {
              v30[1] = v30[0];
              operator delete(v30[0]);
            }
            if (v34)
            {
              *(_QWORD *)&v35 = v34;
              operator delete(v34);
            }
            if ((_QWORD)v36)
            {
              *((_QWORD *)&v36 + 1) = v36;
              operator delete((void *)v36);
            }
            goto LABEL_25;
          }
          v8 = v9 + 1;
          v6 = v7 - (_BYTE *)v8;
        }
        while (v7 - (_BYTE *)v8 >= 4);
      }
LABEL_24:
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::neural_net::shared_float_array> const&>((uint64_t **)a2, (const void **)v3 + 4, (__int128 *)v3 + 2);
LABEL_25:
      v14 = (uint64_t *)v3[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v3[2];
          v16 = *v15 == (_QWORD)v3;
          v3 = v15;
        }
        while (!v16);
      }
      v3 = v15;
    }
    while (v15 != (uint64_t *)v27);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v26, v27[0]);

}

void sub_217E6C028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{

  _Unwind_Resume(a1);
}

void turi::style_transfer::mps_style_transfer::predict(uint64_t a1, const void ***a2)
{
  void *v3;
  void *v4;
  uint64_t v5[3];

  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v5, a2);
  +[TCMPSStyleTransferHelpers toNSDictionary:](TCMPSStyleTransferHelpers, "toNSDictionary:", v5);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v5, (_QWORD *)v5[1]);
  objc_msgSend(**(id **)(a1 + 8), "predict:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[TCMPSStyleTransferHelpers fromNSDictionary:](TCMPSStyleTransferHelpers, "fromNSDictionary:", v4);

}

void sub_217E6C170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t turi::style_transfer::mps_style_transfer::set_learning_rate(id **this, float a2)
{
  return objc_msgSend(*this[1], "setLearningRate:");
}

void turi::style_transfer::mps_style_transfer::train(uint64_t a1, const void ***a2)
{
  void *v3;
  void *v4;
  uint64_t v5[3];

  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v5, a2);
  +[TCMPSStyleTransferHelpers toNSDictionary:](TCMPSStyleTransferHelpers, "toNSDictionary:", v5);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v5, (_QWORD *)v5[1]);
  objc_msgSend(**(id **)(a1 + 8), "train:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[TCMPSStyleTransferHelpers fromNSDictionary:](TCMPSStyleTransferHelpers, "fromNSDictionary:", v4);

}

void sub_217E6C23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::flexible_type>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  void *v30;
  void *v31;
  void **v32;

  switch(*(_BYTE *)(a2 + 12))
  {
    case 2:
      v3 = *(unint64_t **)a2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        v6 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          if (*((char *)v6 + 31) < 0)
            operator delete((void *)v6[1]);
          v7 = v6;
          v8 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v9 = *(unint64_t **)a2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v13 = (void *)v12[1];
          if (v13)
          {
            v12[2] = (unint64_t)v13;
            operator delete(v13);
          }
          v7 = v12;
          v8 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v14 = *(unint64_t **)a2;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v32 = (void **)(v17 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v18 = *(unint64_t **)a2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v17 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v32 = (void **)(v17 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v7 = v17;
          v8 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v21 = *(unint64_t **)a2;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v24 + 2);
          v7 = v24;
          v25 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v26 = *(unint64_t **)a2;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v30 = (void *)v29[6];
          if (v30)
          {
            v29[7] = (unint64_t)v30;
            operator delete(v30);
          }
          v31 = (void *)v29[3];
          if (v31)
          {
            v29[4] = (unint64_t)v31;
            operator delete(v31);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v29 + 1));
          v7 = v29;
          v25 = 2071181815;
LABEL_41:
          v8 = v25 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v7, v8);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
}

void std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::pair<turi::flexible_type,turi::flexible_type>::~pair(v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::pair<turi::flexible_type,turi::flexible_type>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unsigned int v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  void *v58;
  void *v59;
  unint64_t *v61;

  switch(*(_BYTE *)(a1 + 28))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 16);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 16);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 16);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 16);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 16);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD **)(a1 + 16);
        if (v16)
        {
          v61 = v16 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 16);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD **)(a1 + 16);
        if (v16)
        {
          v61 = v16 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 16);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 16);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 16);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 16);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v31 = *(unint64_t **)a1;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v34 + 31) < 0)
            operator delete((void *)v34[1]);
          v35 = v34;
          v36 = 0x1012C404EF22A49;
          goto LABEL_84;
        }
      }
      break;
    case 3:
      v37 = *(unint64_t **)a1;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v41 = (void *)v40[1];
          if (v41)
          {
            v40[2] = (unint64_t)v41;
            operator delete(v41);
          }
          v35 = v40;
          v36 = 0x1080C409938AC02;
          goto LABEL_84;
        }
      }
      break;
    case 4:
      v42 = *(unint64_t **)a1;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v61 = v45 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_68;
        }
      }
      break;
    case 5:
      v46 = *(unint64_t **)a1;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v45 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v61 = v45 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_68:
          v35 = v45;
          v36 = 0x1020C405E66F15BLL;
          goto LABEL_84;
        }
      }
      break;
    case 8:
      v49 = *(unint64_t **)a1;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v52 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v52 + 2);
          v35 = v52;
          v53 = -235920773;
          goto LABEL_83;
        }
      }
      break;
    case 9:
      v54 = *(unint64_t **)a1;
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        v57 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v58 = (void *)v57[6];
          if (v58)
          {
            v57[7] = (unint64_t)v58;
            operator delete(v58);
          }
          v59 = (void *)v57[3];
          if (v59)
          {
            v57[4] = (unint64_t)v59;
            operator delete(v59);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v57 + 1));
          v35 = v57;
          v53 = 2071181815;
LABEL_83:
          v36 = v53 | 0x1030C4000000000;
LABEL_84:
          MEMORY[0x219A19A08](v35, v36);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

void boost::detail::shared_count::~shared_count(unsigned int **this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v1 = *this;
  if (*this)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
      v5 = v1 + 3;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
    }
  }
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_217E6CADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x219A198F4](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_217E6CB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

file_logger *log_stream_dispatch<true>::exec(cppipc *a1, const char *a2, const char *a3, int a4, char a5)
{
  int v9;
  file_logger *v10;

  v9 = (int)a1;
  if (cppipc::must_cancel(a1))
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v10 = (file_logger *)global_logger();
  return file_logger::start_stream(v10, v9, a2, a3, a4, a5);
}

uint64_t file_logger::operator<<<std::string>(uint64_t a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (char *)pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v4 && v4[280])
  {
    v5 = v4 + 16;
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  }
  return a1;
}

uint64_t std::ostringstream::str[abi:ne180100]()
{
  return std::stringbuf::str();
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x219A1954C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x219A19558](v13);
  return a1;
}

void sub_217E6CD68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x219A19558](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x217E6CD48);
}

void sub_217E6CDB0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_217E6CEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24D916A78, (void (*)(void *))MEMORY[0x24BEDAAF0]);
}

void sub_217E6CFF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void file_logger::stream_flush(file_logger *this)
{
  int *v2;
  int *v3;
  uint64_t v4;
  void **v5;
  char *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  void **v10;
  std::string __p;
  void *v12[2];
  unsigned __int8 v13;

  v2 = (int *)pthread_getspecific(*((_QWORD *)this + 74));
  if (v2)
  {
    v3 = v2;
    v4 = v2[74];
    std::ostream::flush();
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0)
      v5 = v12;
    else
      v5 = (void **)v12[0];
    file_logger::_lograw(this, *((_DWORD *)this + 150), (const char *)v5);
    if (*((_DWORD *)this + v4 + 236))
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 608));
      v6 = (char *)this + 32 * v4;
      if (*((_QWORD *)v6 + 89))
      {
        v7 = (uint64_t)(v6 + 688);
        if ((char)v13 < 0)
        {
          v9 = *((_QWORD *)v3 + 36);
          v10 = (void **)v12[0];
          v8 = (int64_t)v12[1];
        }
        else
        {
          v8 = v13;
          v9 = *((_QWORD *)v3 + 36);
          v10 = v12;
        }
        std::function<void ()(int,char const*,unsigned long)>::operator()(v7, v4, (uint64_t)v10 + v9, v8 - v9);
      }
      *((_QWORD *)v3 + 36) = 0;
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 608));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    std::string::operator=((std::string *)(v3 + 22), &__p);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)(v3 + 6));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((char)v13 < 0)
      operator delete(v12[0]);
  }
}

void sub_217E6D188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(int,char const*,unsigned long)>::operator()(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x219A19A08);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t turi::neural_net::shared_float_array::shared_float_array(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v14 = *a2;
  v15 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v4 = *a2;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  turi::neural_net::shared_float_array::shared_float_array(a1, &v14, 0, v8, v9);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

void sub_217E6D438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::neural_net::float_buffer,std::allocator<turi::neural_net::float_buffer>,float const*&,std::vector<unsigned long>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__shared_ptr_emplace[abi:ne180100]<float const*&,std::vector<unsigned long>,std::allocator<turi::neural_net::float_buffer>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_217E6D498(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__shared_ptr_emplace[abi:ne180100]<float const*&,std::vector<unsigned long>,std::allocator<turi::neural_net::float_buffer>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_24D917568;
  a1[1] = 0;
  std::allocator<turi::neural_net::float_buffer>::construct[abi:ne180100]<turi::neural_net::float_buffer,float const*&,std::vector<unsigned long>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_217E6D4FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::float_buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D917568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::float_buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D917568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<turi::neural_net::float_buffer>::construct[abi:ne180100]<turi::neural_net::float_buffer,float const*&,std::vector<unsigned long>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  void *__p[2];
  uint64_t v7;

  v5 = *a3;
  *(_OWORD *)__p = *(_OWORD *)a4;
  v7 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  turi::neural_net::float_buffer::float_buffer(a2, v5, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_217E6D5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::neural_net::shared_float_array::shape(turi::neural_net::shared_float_array *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t turi::neural_net::shared_float_array::dim(turi::neural_net::shared_float_array *this)
{
  return *((_QWORD *)this + 5);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void `anonymous namespace'::convert_weights_coreml_mps(std::map<std::string,turi::neural_net::shared_float_array> const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/style_transfer/mps_style_transfer_backend.mm", 124);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"w.second.dim()", 14);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/style_transfer/mps_style_transfer_backend.mm", "operator()", 104, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
}

void sub_217E6D7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void turi::neural_net::shared_float_array::wrap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  std::allocate_shared[abi:ne180100]<turi::neural_net::float_buffer,std::allocator<turi::neural_net::float_buffer>,std::vector<float>,std::vector<unsigned long>,void>(a1, a2, &v10);
  v11 = v10;
  v10 = 0uLL;
  turi::neural_net::shared_float_array::shared_float_array(a3, &v11);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_217E6D960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::neural_net::float_buffer,std::allocator<turi::neural_net::float_buffer>,std::vector<float>,std::vector<unsigned long>,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__shared_ptr_emplace[abi:ne180100]<std::vector<float>,std::vector<unsigned long>,std::allocator<turi::neural_net::float_buffer>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_217E6DC54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__shared_ptr_emplace[abi:ne180100]<std::vector<float>,std::vector<unsigned long>,std::allocator<turi::neural_net::float_buffer>,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_24D917568;
  a1[1] = 0;
  std::allocator<turi::neural_net::float_buffer>::construct[abi:ne180100]<turi::neural_net::float_buffer,std::vector<float>,std::vector<unsigned long>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_217E6DCB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::neural_net::float_buffer>::construct[abi:ne180100]<turi::neural_net::float_buffer,std::vector<float>,std::vector<unsigned long>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  *(_OWORD *)v6 = *(_OWORD *)a3;
  v7 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)__p = *(_OWORD *)a4;
  v5 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  turi::neural_net::float_buffer::float_buffer(a2, v6, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_217E6DD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

std::string *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217E6DF0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

std::string *std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  turi::neural_net::shared_float_array::shared_float_array((turi::neural_net::shared_float_array *)&this[1]);
  return this;
}

void sub_217E6E034(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

turi::neural_net::shared_float_array *turi::neural_net::shared_float_array::shared_float_array(turi::neural_net::shared_float_array *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  turi::neural_net::shared_float_array::default_value(&v6);
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)this, &v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return this;
}

void sub_217E6E0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::neural_net::shared_float_array>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::neural_net::shared_float_array>,0>(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_24D9175B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::neural_net::shared_float_array> const&>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::pair<std::string const,turi::neural_net::shared_float_array> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::pair<std::string const,turi::neural_net::shared_float_array> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217E6E4D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v6 = *((_QWORD *)a2 + 4);
  v5 = *((_QWORD *)a2 + 5);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D9175B8;
  this[1].__r_.__value_.__l.__size_ = v6;
  this[1].__r_.__value_.__r.__words[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a2[4];
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a2[3];
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v9;
  return this;
}

void `anonymous namespace'::convert_weights_mps_coreml(std::map<std::string,turi::neural_net::shared_float_array> const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/style_transfer/mps_style_transfer_backend.mm", 124);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"w.second.dim()", 14);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/style_transfer/mps_style_transfer_backend.mm", "operator()", 132, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
}

void sub_217E6E6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_217E6E888(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::neural_net::shared_float_array>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const*,turi::neural_net::shared_float_array&>(uint64_t **a1, char **a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8[3];

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<char const*,turi::neural_net::shared_float_array&>((uint64_t)a1, a2, a3, (uint64_t)v8);
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_217E6E9AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<char const*,turi::neural_net::shared_float_array&>@<Q0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __n128 v14;

  v7 = a1 + 8;
  v8 = (__n128 *)operator new(0x70uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((__n128 *)v8[2].n128_u64, *a2);
  v10 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  v8[3].n128_u64[1] = (unint64_t)&unk_24D9175B8;
  v8[4].n128_u64[0] = v10;
  v8[4].n128_u64[1] = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  result = *(__n128 *)(a3 + 24);
  v14 = *(__n128 *)(a3 + 40);
  v8[5] = result;
  v8[6] = v14;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_217E6EA60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

id **std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](id **result, id *a2)
{
  id *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t *std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,turi::neural_net::shared_float_array>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_217E6EB00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,turi::neural_net::shared_float_array>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::neural_net::shared_float_array> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::neural_net::shared_float_array> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::pair<std::string const,turi::neural_net::shared_float_array> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

const void **std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

uint64_t OUTLINED_FUNCTION_0()
{
  return std::stringbuf::str();
}

void OUTLINED_FUNCTION_1(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
}

void OUTLINED_FUNCTION_2(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
}

uint64_t OUTLINED_FUNCTION_3()
{
  return std::ostream::put();
}

uint64_t OUTLINED_FUNCTION_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return file_logger::operator<<<std::string>(v9, (uint64_t)&a9);
}

void OUTLINED_FUNCTION_5()
{
  void *v0;

  __cxa_free_exception(v0);
}

uint64_t OUTLINED_FUNCTION_6()
{
  return std::ostream::flush();
}

file_logger *OUTLINED_FUNCTION_7(file_logger *a1, int a2, const char *a3, const char *a4, int a5)
{
  return file_logger::start_stream(a1, a2, a3, a4, a5, 1);
}

uint64_t OUTLINED_FUNCTION_8()
{
  return std::ostringstream::str[abi:ne180100]();
}

void OUTLINED_FUNCTION_9()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

std::locale OUTLINED_FUNCTION_10(const std::ios_base *this)
{
  return std::ios_base::getloc(this);
}

void *OUTLINED_FUNCTION_11()
{
  return global_logger();
}

void OUTLINED_FUNCTION_12(void *a1, struct type_info *a2)
{
  __cxa_throw(a1, a2, 0);
}

uint64_t OUTLINED_FUNCTION_13@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, 10);
}

void *OUTLINED_FUNCTION_14()
{
  return __cxa_allocate_exception(0x18uLL);
}

void OUTLINED_FUNCTION_15()
{
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

const std::locale::facet *OUTLINED_FUNCTION_16(int a1, std::locale::id *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  return std::locale::use_facet(&a12, a2);
}

void *OUTLINED_FUNCTION_17()
{
  return __cxa_allocate_exception(8uLL);
}

void OUTLINED_FUNCTION_18(uint64_t a1, struct type_info *a2, void (*a3)(void *))
{
  void *v3;

  __cxa_throw(v3, a2, a3);
}

void OUTLINED_FUNCTION_19()
{
  file_logger *v0;

  file_logger::stream_flush(v0);
}

void _GLOBAL__sub_I_mps_style_transfer_backend_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void sub_217E6F404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_Unwind_Exception *exception_object,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  _Unwind_Resume(a1);
}

void sub_217E6F53C()
{
  JUMPOUT(0x217E6F4C4);
}

void sub_217E6F544()
{
  JUMPOUT(0x217E6F4CCLL);
}

void sub_217E6F54C()
{
  JUMPOUT(0x217E6F4D4);
}

void sub_217E6F56C()
{
  void *v0;

  JUMPOUT(0x217E6F504);
}

void sub_217E6F588()
{
  JUMPOUT(0x217E6F504);
}

void sub_217E6F594()
{
  JUMPOUT(0x217E6F4FCLL);
}

void sub_217E6F5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_217E6F6F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_217E6F73C()
{
  void *v0;

  JUMPOUT(0x217E6F730);
}

void sub_217E6F748()
{
  JUMPOUT(0x217E6F730);
}

void sub_217E6F7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_217E6FC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mps_style_transfer_decoding_node_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void sub_217E703A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_object,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;

  _Unwind_Resume(a1);
}

void sub_217E704D4()
{
  JUMPOUT(0x217E70464);
}

void sub_217E704DC()
{
  JUMPOUT(0x217E7046CLL);
}

void sub_217E70504()
{
  void *v0;

  JUMPOUT(0x217E7049CLL);
}

void sub_217E70510()
{
  JUMPOUT(0x217E70494);
}

void sub_217E705C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_217E70664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_217E706E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_217E70B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mps_style_transfer_encoding_node_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void sub_217E718C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_Unwind_Exception *exception_object,uint64_t a30,uint64_t a31,void *a32,void *a33)
{
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;

  _Unwind_Resume(a1);
}

void sub_217E71C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_217E71E84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_217E71FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_217E72884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;

  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mps_style_transfer_residual_node_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void sub_217E73510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_Unwind_Exception *exception_object,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;

  _Unwind_Resume(a1);
}

void sub_217E7389C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_217E73904()
{
  JUMPOUT(0x217E738D4);
}

void sub_217E7390C()
{
  JUMPOUT(0x217E738D8);
}

void sub_217E73914()
{
  JUMPOUT(0x217E738DCLL);
}

void sub_217E7391C()
{
  JUMPOUT(0x217E738E0);
}

void sub_217E73924()
{
  void *v0;

  JUMPOUT(0x217E738E4);
}

void sub_217E73930()
{
  JUMPOUT(0x217E738E4);
}

void sub_217E73938()
{
  void *v0;

  JUMPOUT(0x217E738ECLL);
}

void sub_217E73944()
{
  JUMPOUT(0x217E738ECLL);
}

void sub_217E7394C()
{
  void *v0;

  JUMPOUT(0x217E738F4);
}

void sub_217E73958()
{
  JUMPOUT(0x217E738F4);
}

void sub_217E73A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_217E73B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_217E7435C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33)
{
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;

  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mps_style_transfer_transformer_network_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void sub_217E78A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_Unwind_Exception *exception_object,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;
  void *v33;
  uint64_t v34;

  _Unwind_Resume(a1);
}

void sub_217E78C28()
{
  JUMPOUT(0x217E78BB0);
}

void sub_217E78D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_217E78D94()
{
  void *v0;

  JUMPOUT(0x217E78D84);
}

void sub_217E78DA0()
{
  JUMPOUT(0x217E78D84);
}

void sub_217E78DA8()
{
  void *v0;

  JUMPOUT(0x217E78D88);
}

void sub_217E78DB4()
{
  JUMPOUT(0x217E78D88);
}

void sub_217E78E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mps_style_transfer_vgg_16_block_1_node_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void sub_217E79940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_Unwind_Exception *exception_object,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;
  void *v33;
  uint64_t v34;

  _Unwind_Resume(a1);
}

void sub_217E79B68()
{
  JUMPOUT(0x217E79AF0);
}

void sub_217E79C8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_217E79CD4()
{
  void *v0;

  JUMPOUT(0x217E79CC4);
}

void sub_217E79CE0()
{
  JUMPOUT(0x217E79CC4);
}

void sub_217E79CE8()
{
  void *v0;

  JUMPOUT(0x217E79CC8);
}

void sub_217E79CF4()
{
  JUMPOUT(0x217E79CC8);
}

void sub_217E79D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mps_style_transfer_vgg_16_block_2_node_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

uint64_t turi::neural_net::mps_cnn_module::mps_cnn_module(uint64_t a1, id *a2)
{
  void **v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)a1 = &off_24D917620;
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (void **)(a1 + 8);
  v4 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  objc_storeStrong((id *)(a1 + 16), *a2);
  objc_msgSend(*(id *)(a1 + 16), "device");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *v3;
  *v3 = (void *)v5;

  if (!*v3)
    turi::neural_net::mps_cnn_module::mps_cnn_module(turi::neural_net::mps_command_queue const&)::$_0::operator()();
  if (!*v4)
    turi::neural_net::mps_cnn_module::mps_cnn_module(turi::neural_net::mps_command_queue const&)::$_1::operator()();
  return a1;
}

void sub_217E7C364(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);

  _Unwind_Resume(a1);
}

void turi::neural_net::mps_cnn_module::mps_cnn_module(turi::neural_net::mps_command_queue const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_cnnmodule.mm", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"dev_ != nullptr", 15);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_cnnmodule.mm", "operator()", 32, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::neural_net::mps_cnn_module::mps_cnn_module(turi::neural_net::mps_command_queue const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217E7C4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_cnn_module::mps_cnn_module(turi::neural_net::mps_command_queue const&)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_cnnmodule.mm", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"cmd_queue_ != nullptr", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_cnnmodule.mm", "operator()", 33, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::neural_net::mps_cnn_module::mps_cnn_module(turi::neural_net::mps_command_queue const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217E7C648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_cnn_module::init(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, uint64_t a11)
{
  uint64_t v19;
  void *v20;
  _DWORD *v21;
  _QWORD *Network;
  uint64_t v23;
  uint64_t v24;
  void *context;
  void *__p;
  void *v27;
  _DWORD *v28;

  context = (void *)MEMORY[0x219A19FE4]();
  *(_QWORD *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 56) = a9;
  objc_msgSend(MEMORY[0x24BDDE3B8], "imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:", 4, a6, a5, a4, 1, 3);
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v19;

  v21 = operator new(0x1CuLL);
  v27 = v21 + 7;
  v28 = v21 + 7;
  *v21 = a3;
  v21[1] = a5;
  v21[2] = a6;
  v21[3] = a4;
  v21[4] = a8;
  v21[5] = a9;
  v21[6] = a7;
  __p = v21;
  Network = turi::neural_net::createNetwork(a2, (__int128 **)&__p, a11);
  v23 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = Network;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  v24 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v24 + 40) = a3;
  turi::neural_net::MPSNetwork::Init(v24, *(void **)(a1 + 8), *(void **)(a1 + 16), a11);
  turi::neural_net::mps_cnn_module::SetupUpdater((turi::neural_net::mps_cnn_module *)a1, (turi::neural_net *)a10);
  objc_autoreleasePoolPop(context);
}

void sub_217E7C80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::neural_net::mps_cnn_module::SetupUpdater(turi::neural_net::mps_cnn_module *this, turi::neural_net *a2)
{
  void (***Updater)(_QWORD, uint64_t, void **);
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  void *__p;
  void *v8;
  _DWORD *v9;

  Updater = (void (***)(_QWORD, uint64_t, void **))turi::neural_net::createUpdater(a2);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = Updater;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
    Updater = (void (***)(_QWORD, uint64_t, void **))*((_QWORD *)this + 5);
  }
  v5 = *((_QWORD *)this + 4);
  v6 = operator new(4uLL);
  __p = v6;
  *v6 = 981668463;
  v8 = v6 + 1;
  v9 = v6 + 1;
  (**Updater)(Updater, v5 + 8, &__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_217E7C8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::neural_net::mps_cnn_module::load(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)MEMORY[0x219A19FE4]();
  turi::neural_net::MPSNetwork::Load(*(_QWORD *)(a1 + 32), a2);
  objc_autoreleasePoolPop(v4);
}

void turi::neural_net::mps_cnn_module::export_weights(turi::neural_net::MPSNetwork **this@<X0>, uint64_t *a2@<X8>)
{
  void *v4;

  v4 = (void *)MEMORY[0x219A19FE4]();
  turi::neural_net::MPSNetwork::Export(this[4], a2);
  objc_autoreleasePoolPop(v4);
}

void turi::neural_net::mps_cnn_module::predict(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;

  v6 = (void *)MEMORY[0x219A19FE4]();
  turi::neural_net::mps_cnn_module::perform_batch(a1, a2, 0, a3);
  objc_autoreleasePoolPop(v6);
}

void turi::neural_net::mps_cnn_module::perform_batch(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  MPSImageBatch *v18;
  MPSImageBatch *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  id v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  __int128 v72;
  void *v73[3];
  _QWORD v74[4];
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t *v81;
  std::__shared_weak_count *v82;
  uint64_t *v83;
  std::__shared_weak_count *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t *v88;
  std::__shared_weak_count *v89;
  uint64_t *v90;
  std::__shared_weak_count *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void *__p;
  _BYTE *v97;
  _QWORD *v98;
  _BYTE v99[128];
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(unsigned __int8 *)(v5 + 48);
  if (*(_BYTE *)(v5 + 48))
    v7 = 1;
  else
    v7 = (_DWORD)a3 == 0;
  if (!v7)
    turi::neural_net::mps_cnn_module::perform_batch(std::map<std::string,turi::neural_net::shared_float_array> const&,BOOL)const::$_0::operator()();
  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  v11 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&__p);
  if (SHIBYTE(v98) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels");
  v12 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&__p);
  if (SHIBYTE(v98) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "weights");
  v13 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&__p);
  if (SHIBYTE(v98) < 0)
    operator delete(__p);
  v14 = a2 + 8;
  if (a2 + 8 == v11)
    turi::neural_net::mps_cnn_module::perform_batch(std::map<std::string,turi::neural_net::shared_float_array> const&,BOOL)const::$_1::operator()();
  if (v6)
  {
    if (v14 == v12)
      turi::neural_net::mps_cnn_module::perform_batch(std::map<std::string,turi::neural_net::shared_float_array> const&,BOOL)const::$_2::operator()();
    if (v14 == v13)
      turi::neural_net::mps_cnn_module::perform_batch(std::map<std::string,turi::neural_net::shared_float_array> const&,BOOL)const::$_3::operator()();
    turi::neural_net::mps_cnn_module::copy_input(a1, v11 + 56);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    turi::neural_net::mps_cnn_module::copy_labels(a1, v12 + 56, v13 + 56);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    turi::neural_net::mps_cnn_module::copy_input(a1, v11 + 56);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 0;
  }
  objc_msgSend(*(id *)(a1 + 16), "commandBuffer");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::MPSNetwork::Forward(*(_QWORD *)(a1 + 32), v15, v17, a3);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    turi::neural_net::MPSNetwork::Loss(*(_QWORD *)(a1 + 32), v70, v16, v17);
    v18 = (MPSImageBatch *)objc_claimAutoreleasedReturnValue();
    turi::neural_net::mps_cnn_module::ExtractLossImages(v16, v17);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    if ((_DWORD)a3)
    {
      turi::neural_net::MPSNetwork::Backward(*(_QWORD *)(a1 + 32), v18, v17);
      v19 = (MPSImageBatch *)objc_claimAutoreleasedReturnValue();
      MPSImageBatchIncrementReadCount(v19, -1);
      turi::neural_net::MPSNetwork::GpuUpdate(*(_QWORD *)(a1 + 32), v17);

    }
    else
    {
      MPSImageBatchIncrementReadCount(v18, -1);
    }

  }
  else
  {
    v69 = 0;
  }
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v20 = v70;
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v92, v99, 16);
  if (v21)
  {
    v22 = *(_QWORD *)v93;
    do
    {
      for (i = 0; i != v21; ++i)
      {
        if (*(_QWORD *)v93 != v22)
          objc_enumerationMutation(v20);
        objc_msgSend(*(id *)(*((_QWORD *)&v92 + 1) + 8 * i), "synchronizeOnCommandBuffer:", v17);
      }
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v92, v99, 16);
    }
    while (v21);
  }

  v24 = *(int *)(*(_QWORD *)(a1 + 32) + 40);
  v26 = *(_QWORD *)(a1 + 48);
  v25 = *(_QWORD *)(a1 + 56);
  v68 = v15;
  v27 = operator new(0x20uLL);
  v97 = v27 + 4;
  v98 = v27 + 4;
  *v27 = v24;
  v27[1] = 1;
  v27[2] = v25;
  v27[3] = v26;
  __p = v27;
  _ZNSt3__115allocate_sharedB8ne180100INS_7promiseIN4turi10neural_net18shared_float_arrayEEENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v90);
  _ZNSt3__115allocate_sharedB8ne180100INS_7promiseIN4turi10neural_net18shared_float_arrayEEENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v88);
  v28 = *(id *)(a1 + 64);
  v29 = *(id *)(a1 + 72);
  v74[0] = MEMORY[0x24BDAC760];
  v74[1] = 3321888768;
  v74[2] = ___ZNK4turi10neural_net14mps_cnn_module13perform_batchERKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_18shared_float_arrayENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEEb_block_invoke;
  v74[3] = &unk_24D917658;
  v81 = v90;
  v82 = v91;
  if (v91)
  {
    p_shared_owners = (unint64_t *)&v91->__shared_owners_;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
  }
  v83 = v88;
  v84 = v89;
  if (v89)
  {
    v32 = (unint64_t *)&v89->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = v28;
  v75 = v34;
  v35 = v15;
  v76 = v35;
  v36 = v16;
  v77 = v36;
  v37 = v29;
  v78 = v37;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v85, __p, (uint64_t)v97, (v97 - (_BYTE *)__p) >> 3);
  v38 = v20;
  v79 = v38;
  v39 = v69;
  v80 = v39;
  objc_msgSend(v17, "addCompletedHandler:", v74, v68);
  objc_msgSend(v17, "commit");
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = a4 + 8;
  if (v39)
  {
    v40 = *(_QWORD *)__p;
    v41 = (char *)operator new(0x20uLL);
    v73[1] = v41 + 32;
    v73[2] = v41 + 32;
    *(_QWORD *)v41 = v40;
    *(int64x2_t *)(v41 + 8) = vdupq_n_s64(1uLL);
    *((_QWORD *)v41 + 3) = 1;
    v73[0] = v41;
    v42 = *v88;
    if (!*v88)
      std::__throw_future_error[abi:ne180100](3u);
    v71 = *v88;
    std::__assoc_sub_state::__attach_future[abi:ne180100](v42);
    std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>,void>(&v71, (uint64_t)v73, &v72);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t **)a4, "loss", &v72);
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
    if (*((_QWORD *)&v72 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v71;
    if (v71)
    {
      v47 = (unint64_t *)(v71 + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
    }
    if (v73[0])
    {
      v73[1] = v73[0];
      operator delete(v73[0]);
    }
  }
  v49 = *v90;
  if (!*v90)
    std::__throw_future_error[abi:ne180100](3u);
  *(_QWORD *)&v72 = *v90;
  std::__assoc_sub_state::__attach_future[abi:ne180100](v49);
  std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>,void>((uint64_t *)&v72, (uint64_t)&__p, v73);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t **)a4, "output", (__int128 *)v73);
  v50 = (std::__shared_weak_count *)v73[1];
  if (v73[1])
  {
    v51 = (unint64_t *)((char *)v73[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v72;
  if ((_QWORD)v72)
  {
    v54 = (unint64_t *)(v72 + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
  }

  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }

  v56 = v84;
  if (v84)
  {
    v57 = (unint64_t *)&v84->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v82;
  if (v82)
  {
    v60 = (unint64_t *)&v82->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

  v62 = v89;
  if (v89)
  {
    v63 = (unint64_t *)&v89->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v91;
  if (v91)
  {
    v66 = (unint64_t *)&v91->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (__p)
  {
    v97 = __p;
    operator delete(__p);
  }

}

void sub_217E7D0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  void *v53;
  void *v54;
  void *v55;
  void *v56;

  _Unwind_Resume(a1);
}

void turi::neural_net::mps_cnn_module::set_learning_rate(turi::neural_net::mps_cnn_module *this, float a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)MEMORY[0x219A19FE4]();
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 32))(v5, a2);
  objc_autoreleasePoolPop(v4);
}

void turi::neural_net::mps_cnn_module::train(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;

  v6 = (void *)MEMORY[0x219A19FE4]();
  turi::neural_net::mps_cnn_module::perform_batch(a1, a2, 1, a3);
  objc_autoreleasePoolPop(v6);
}

void turi::neural_net::mps_cnn_module::perform_batch(std::map<std::string,turi::neural_net::shared_float_array> const&,BOOL)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_cnnmodule.mm", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!do_backward || loss_image_required", 35);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_cnnmodule.mm", "operator()", 117, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::neural_net::mps_cnn_module::perform_batch(std::map<std::string,turi::neural_net::shared_float_array> const&,BOOL)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217E7D498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

id turi::neural_net::mps_cnn_module::copy_input(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v4 = *(id *)(a1 + 64);
  objc_sync_enter(v4);
  if (objc_msgSend(*(id *)(a1 + 64), "count"))
  {
    objc_msgSend(*(id *)(a1 + 64), "lastObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 64), "removeLastObject");
  }
  else
  {
    v5 = 0;
  }
  objc_sync_exit(v4);

  if (!v5)
  {
    v6 = *(void **)(a1 + 24);
    v7 = *(int *)(*(_QWORD *)(a1 + 32) + 40);
    v8 = *(id *)(a1 + 8);
    v9 = v6;
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", v7);
    if ((_DWORD)v7)
    {
      do
      {
        v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE368]), "initWithDevice:imageDescriptor:", v8, v9);
        objc_msgSend(v10, "addObject:", v11);

        --v7;
      }
      while (v7);
    }
    v12 = objc_msgSend(v10, "copy");

    v5 = (void *)v12;
  }
  turi::neural_net::fill_image_batch(a2, v5);
  return v5;
}

void sub_217E7D648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id turi::neural_net::mps_cnn_module::copy_labels(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const float *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  const float *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  int64x2_t v35;
  uint64_t v36;
  _QWORD v37[3];
  _QWORD v38[3];

  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v7 = *(const float **)(a1 + 56);
  v9 = *(id *)(a1 + 72);
  objc_sync_enter(v9);
  if (objc_msgSend(*(id *)(a1 + 72), "count"))
  {
    objc_msgSend(*(id *)(a1 + 72), "lastObject");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 72), "removeLastObject");
    turi::neural_net::mps_cnn_module::FillLossLabelsBatch(v10, v11, a2, a3, v6, (int)v7, v8);
    objc_sync_exit(v9);

    return v10;
  }
  else
  {
    objc_sync_exit(v9);

    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    if ((int)v6 < 1)
    {
      v27 = (void *)MEMORY[0x24BDBD1A8];
    }
    else
    {
      v29 = a1;
      v13 = 0;
      v7 = (const float *)(int)v7;
      v14 = (int)v8;
      v28 = 4 * (int)v7;
      v15 = (void *)MEMORY[0x24BDBD1A8];
      v16 = 0x24BDDE000uLL;
      do
      {
        v34 = v15;
        turi::neural_net::mps_cnn_module::EncodeLabels((turi::neural_net::mps_cnn_module *)(v31 + v13), v7, v14);
        v32 = v6;
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = *(void **)(v16 + 680);
        v38[0] = v7;
        v38[1] = 1;
        v38[2] = v14;
        objc_msgSend(v17, "cnnLossDataDescriptorWithData:layout:size:", v33, 0, v38);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        turi::neural_net::mps_cnn_module::EncodeWeights((turi::neural_net::mps_cnn_module *)(v30 + v13), v7, v14);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(v16 + 680);
        v21 = v7;
        v37[0] = v7;
        v37[1] = 1;
        v22 = v14;
        v37[2] = v14;
        objc_msgSend(v20, "cnnLossDataDescriptorWithData:layout:size:", v19, 0, v37);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_alloc(MEMORY[0x24BDDE2B8]);
        v25 = *(_QWORD *)(v29 + 8);
        v35 = vdupq_n_s64(1uLL);
        v36 = 1;
        v26 = (void *)objc_msgSend(v24, "initWithDevice:lossImageSize:labelsDescriptor:weightsDescriptor:", v25, &v35, v18, v23);
        objc_msgSend(v34, "arrayByAddingObject:", v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        v13 += v28;
        v15 = v27;
        --v6;
        v7 = v21;
        v14 = v22;
        v16 = 0x24BDDE000;
      }
      while (v32 != 1);
    }
    return v27;
  }
}

void sub_217E7D8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  objc_sync_exit(v16);

  _Unwind_Resume(a1);
}

id turi::neural_net::mps_cnn_module::ExtractLossImages(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  unint64_t i;
  void *v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", objc_msgSend(v3, "count"));
  for (i = 0; i < objc_msgSend(v3, "count"); ++i)
  {
    objc_msgSend(v3, "objectAtIndexedSubscript:", i);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "lossImage");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "addObject:", v8);
    objc_msgSend(v8, "synchronizeOnCommandBuffer:", v4);

  }
  return v5;
}

void sub_217E7DA28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZNK4turi10neural_net14mps_cnn_module13perform_batchERKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_18shared_float_arrayENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEEb_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  std::runtime_error *v5;
  id v6;
  id v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  char *v21;
  void *__p;
  void *v23;
  uint64_t v24;
  _QWORD v25[2];
  std::__shared_weak_count *v26;
  std::runtime_error v27;

  v3 = a2;
  if (objc_msgSend(v3, "status") == 5)
  {
    objc_msgSend(v3, "error");
    objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "localizedDescription");
    v4 = (const char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    v5 = std::runtime_error::runtime_error(&v27, v4);
    std::make_exception_ptr[abi:ne180100]<std::runtime_error>(v5);
  }
  v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", *(_QWORD *)(a1 + 40));
  objc_sync_exit(v6);

  if (*(_QWORD *)(a1 + 48))
  {
    v7 = *(id *)(a1 + 56);
    objc_sync_enter(v7);
    objc_msgSend(*(id *)(a1 + 56), "addObject:", *(_QWORD *)(a1 + 48));
    objc_sync_exit(v7);

  }
  v8 = *(uint64_t **)(a1 + 80);
  v23 = 0;
  v24 = 0;
  __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(a1 + 112), *(_QWORD *)(a1 + 120), (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3);
  turi::neural_net::copy_image_batch((uint64_t **)&__p, *(void **)(a1 + 64), (uint64_t)v25);
  std::promise<turi::neural_net::shared_float_array>::set_value(v8, (uint64_t)v25);
  v25[0] = &unk_24D9175B8;
  v9 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  v12 = *(void **)(a1 + 72);
  if (v12)
  {
    v13 = *(uint64_t **)(a1 + 96);
    v14 = **(_QWORD **)(a1 + 112);
    v15 = (char *)operator new(0x20uLL);
    v20 = v15 + 32;
    v21 = v15 + 32;
    *(_QWORD *)v15 = v14;
    *(int64x2_t *)(v15 + 8) = vdupq_n_s64(1uLL);
    *((_QWORD *)v15 + 3) = 1;
    v19 = v15;
    turi::neural_net::copy_image_batch((uint64_t **)&v19, v12, (uint64_t)v25);
    std::promise<turi::neural_net::shared_float_array>::set_value(v13, (uint64_t)v25);
    v25[0] = &unk_24D9175B8;
    v16 = v26;
    if (v26)
    {
      v17 = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
  }

}

void sub_217E7DD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  uint64_t v17;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v17 + 8);
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::promise<turi::neural_net::shared_float_array>::set_exception(std::__assoc_sub_state **a1, const std::exception_ptr *a2)
{
  std::__assoc_sub_state *v2;
  std::exception_ptr v3;
  std::exception_ptr v4;

  v2 = *a1;
  if (!*a1)
    std::__throw_future_error[abi:ne180100](3u);
  std::exception_ptr::exception_ptr(&v4, a2);
  v3.__ptr_ = &v4;
  std::__assoc_sub_state::set_exception(v2, v3);
  std::exception_ptr::~exception_ptr(&v4);
}

void sub_217E7DE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  _Unwind_Resume(a1);
}

void std::make_exception_ptr[abi:ne180100]<std::runtime_error>(const std::runtime_error *a1)
{
  std::runtime_error *exception;
  std::runtime_error *v3;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  v3 = std::runtime_error::runtime_error(exception, a1);
  __cxa_throw(v3, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_217E7DE88(void *a1)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
}

void std::promise<turi::neural_net::shared_float_array>::set_value(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  if (!v2)
    std::__throw_future_error[abi:ne180100](3u);
  std::__assoc_state<turi::neural_net::shared_float_array>::set_value<turi::neural_net::shared_float_array>(v2, a2);
}

_QWORD *__copy_helper_block_ea8_80c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE96c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE112c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a2 + 88);
  a1[10] = *(_QWORD *)(a2 + 80);
  a1[11] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_QWORD *)(a2 + 104);
  a1[12] = *(_QWORD *)(a2 + 96);
  a1[13] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a1[14] = 0;
  a1[15] = 0;
  v8 = a1 + 14;
  v8[2] = 0;
  return std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v8, *(const void **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
}

void sub_217E7DF4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_80c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE96c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE112c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 96);
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 80);
}

id turi::neural_net::mps_cnn_module::EncodeLabels(turi::neural_net::mps_cnn_module *this, const float *a2, uint64_t a3)
{
  const float *v4;
  id v6;
  uint64_t i;
  float v8;

  v4 = a2;
  objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithLength:", 4 * (_QWORD)a2 * a3);
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  for (i = objc_msgSend(v6, "mutableBytes"); v4; v4 = (const float *)((char *)v4 - 1))
  {
    v8 = *(float *)this;
    this = (turi::neural_net::mps_cnn_module *)((char *)this + 4);
    *(_DWORD *)(i + 4 * (unint64_t)v8) = 1065353216;
    i += 4 * a3;
  }
  return v6;
}

void sub_217E7E01C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id turi::neural_net::mps_cnn_module::EncodeWeights(turi::neural_net::mps_cnn_module *this, const float *a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  const float *v8;
  unint64_t v9;
  _DWORD *v10;

  objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithLength:", 4 * (_QWORD)a2 * a3);
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v7 = objc_msgSend(v6, "mutableBytes");
  if (a2)
  {
    v8 = 0;
    do
    {
      if (a3 >= 1)
      {
        v9 = (a3 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        v10 = (_DWORD *)v7;
        do
        {
          *v10++ = *((_DWORD *)this + (_QWORD)v8);
          --v9;
        }
        while (v9 > 1);
      }
      v7 += 4 * a3;
      v8 = (const float *)((char *)v8 + 1);
    }
    while (v8 != a2);
  }
  return v6;
}

void sub_217E7E0C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void turi::neural_net::mps_cnn_module::FillLossLabelsBatch(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const float *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[4];
  int64x2_t v39;
  _QWORD v40[4];
  int64x2_t v41;

  v34 = a1;
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  if (a5)
  {
    v12 = 0;
    v13 = 0;
    v14 = a7;
    v15 = (const float *)a6;
    v30 = a5;
    v36 = 4 * a7 * a6;
    v37 = 4 * a6;
    v31 = vdupq_n_s64(1uLL);
    do
    {
      objc_msgSend(v34, "objectAtIndexedSubscript:", v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      turi::neural_net::mps_cnn_module::EncodeLabels((turi::neural_net::mps_cnn_module *)(v33 + v12), v15, v14);
      v35 = (id)objc_claimAutoreleasedReturnValue();
      turi::neural_net::mps_cnn_module::EncodeWeights((turi::neural_net::mps_cnn_module *)(v32 + v12), v15, v14);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_alloc(MEMORY[0x24BDDE368]);
      objc_msgSend(v16, "labelsImage");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "texture");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = (void *)objc_msgSend(v18, "initWithTexture:featureChannels:", v20, v14);

      v22 = objc_alloc(MEMORY[0x24BDDE368]);
      objc_msgSend(v16, "weightsImage");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "texture");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = (void *)objc_msgSend(v22, "initWithTexture:featureChannels:", v24, v14);

      v26 = objc_retainAutorelease(v35);
      v27 = objc_msgSend(v26, "bytes");
      memset(v40, 0, 24);
      v40[3] = v15;
      v41 = v31;
      objc_msgSend(v21, "writeBytes:dataLayout:bytesPerRow:bytesPerImage:region:featureChannelInfo:imageIndex:", v27, 0, v37, v36, v40, 0, v14, 0);
      v28 = objc_retainAutorelease(v17);
      v29 = objc_msgSend(v28, "bytes");
      memset(v38, 0, 24);
      v38[3] = v15;
      v39 = vdupq_n_s64(1uLL);
      objc_msgSend(v25, "writeBytes:dataLayout:bytesPerRow:bytesPerImage:region:featureChannelInfo:imageIndex:", v29, 0, v37, v36, v38, 0, v14, 0);

      ++v13;
      v12 += v37;
    }
    while (v30 != v13);
  }

}

void sub_217E7E324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void turi::neural_net::mps_cnn_module::~mps_cnn_module(id *this)
{
  id v2;
  id v3;

  *this = &off_24D917620;

  v2 = this[5];
  this[5] = 0;
  if (v2)
    (*(void (**)(id))(*(_QWORD *)v2 + 48))(v2);
  v3 = this[4];
  this[4] = 0;
  if (v3)
    (*(void (**)(id))(*(_QWORD *)v3 + 8))(v3);

}

{
  id v2;
  id v3;

  *this = &off_24D917620;

  v2 = this[5];
  this[5] = 0;
  if (v2)
    (*(void (**)(id))(*(_QWORD *)v2 + 48))(v2);
  v3 = this[4];
  this[4] = 0;
  if (v3)
    (*(void (**)(id))(*(_QWORD *)v3 + 8))(v3);

  JUMPOUT(0x219A19A08);
}

uint64_t std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100INS_7promiseIN4turi10neural_net18shared_float_arrayEEENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x20uLL);
  result = _ZNSt3__120__shared_ptr_emplaceINS_7promiseIN4turi10neural_net18shared_float_arrayEEENS_9allocatorIS5_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_217E7E588(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceINS_7promiseIN4turi10neural_net18shared_float_arrayEEENS_9allocatorIS5_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(_QWORD *a1)
{
  uint64_t v2;

  a1[2] = 0;
  *a1 = &unk_24D9176B0;
  a1[1] = 0;
  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 850045863;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 1018212795;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 124) = 0u;
  *(_QWORD *)v2 = &off_24D917700;
  *(_QWORD *)(v2 + 8) = 0;
  a1[3] = v2;
  return a1;
}

void sub_217E7E624(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::promise<turi::neural_net::shared_float_array>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9176B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::promise<turi::neural_net::shared_float_array>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9176B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t *std::__shared_ptr_emplace<std::promise<turi::neural_net::shared_float_array>>::__on_zero_shared(uint64_t a1)
{
  return std::promise<turi::neural_net::shared_float_array>::~promise((uint64_t *)(a1 + 24));
}

void std::__assoc_state<turi::neural_net::shared_float_array>::~__assoc_state(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__assoc_state<turi::neural_net::shared_float_array>::__on_zero_shared(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
    (**(void (***)(uint64_t))(a1 + 144))(a1 + 144);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *std::promise<turi::neural_net::shared_float_array>::~promise(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  const std::error_category *v4;
  unint64_t *v5;
  unint64_t v6;
  std::logic_error v8[2];
  std::exception_ptr v9;

  v2 = *a1;
  if (*a1)
  {
    if ((*(_BYTE *)(v2 + 136) & 1) == 0)
    {
      v9.__ptr_ = 0;
      v3 = *(_QWORD *)(v2 + 16);
      std::exception_ptr::~exception_ptr(&v9);
      v2 = *a1;
      if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
      {
        v4 = std::future_category();
        MEMORY[0x219A19450](v8, 4, v4);
        std::make_exception_ptr[abi:ne180100]<std::future_error>(v8);
      }
    }
    v5 = (unint64_t *)(v2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return a1;
}

void std::make_exception_ptr[abi:ne180100]<std::future_error>(const std::logic_error *a1)
{
  std::logic_error *exception;
  std::logic_error *v3;

  exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
  v3 = std::logic_error::logic_error(exception, a1);
  v3->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
  v3[1] = a1[1];
  __cxa_throw(v3, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
}

void sub_217E7E89C(void *a1)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
}

void std::__throw_future_error[abi:ne180100](unsigned int a1)
{
  void *exception;
  const std::error_category *v3;

  exception = __cxa_allocate_exception(0x20uLL);
  v3 = std::future_category();
  MEMORY[0x219A19450](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
}

void sub_217E7E904(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__assoc_state<turi::neural_net::shared_float_array>::set_value<turi::neural_net::shared_float_array>(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  __int128 v6;
  std::exception_ptr v7;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v7.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v7), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_QWORD *)(a1 + 144) = &unk_24D9175B8;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 184) = v6;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_217E7E9C8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__assoc_sub_state::__attach_future[abi:ne180100](uint64_t a1)
{
  std::mutex *v2;
  int v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0)
    std::__throw_future_error[abi:ne180100](1u);
  v4 = (unint64_t *)(a1 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *(_DWORD *)(a1 + 136) = v3 | 2;
  std::mutex::unlock(v2);
}

void sub_217E7EA38(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::__shared_ptr_emplace[abi:ne180100]<std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>,std::allocator<turi::neural_net::deferred_float_array>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_217E7EA98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::__shared_ptr_emplace[abi:ne180100]<std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>,std::allocator<turi::neural_net::deferred_float_array>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_24D917748;
  a1[1] = 0;
  std::allocator<turi::neural_net::deferred_float_array>::construct[abi:ne180100]<turi::neural_net::deferred_float_array,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_217E7EAFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D917748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D917748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<turi::neural_net::deferred_float_array>::construct[abi:ne180100]<turi::neural_net::deferred_float_array,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unint64_t *v6;
  unint64_t v7;
  void *__p[2];
  uint64_t v9;
  uint64_t v10;

  v4 = *a3;
  *a3 = 0;
  *(_OWORD *)__p = *(_OWORD *)a4;
  v9 = *(_QWORD *)(a4 + 16);
  v10 = v4;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  turi::neural_net::deferred_float_array::deferred_float_array(a2, &v10, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  result = v10;
  if (v10)
  {
    v6 = (unint64_t *)(v10 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_217E7EBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  std::allocator<turi::neural_net::deferred_float_array>::construct[abi:ne180100]<turi::neural_net::deferred_float_array,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>>(&a12);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>(uint64_t **a1, char *a2, __int128 *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8[3];

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t)a1, a2, a3, (uint64_t)v8);
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_217E7EC98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 8;
  v8 = operator new(0x70uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>,0>(v8 + 4, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_217E7ED08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v10 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)(v5 + 3), &v10);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_217E7EDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  _Unwind_Resume(a1);
}

std::locale OUTLINED_FUNCTION_0_0()
{
  uint64_t v0;

  return std::ios_base::getloc((const std::ios_base *)(v0 + 16 + *(_QWORD *)(*(_QWORD *)(v0 + 16) - 24)));
}

void OUTLINED_FUNCTION_3_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
}

void *OUTLINED_FUNCTION_11_0(uint64_t a1)
{
  return pthread_getspecific(*(_QWORD *)(a1 + 592));
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  return std::ostream::put();
}

void OUTLINED_FUNCTION_15_0()
{
  void *v0;

  __cxa_free_exception(v0);
}

const std::locale::facet *OUTLINED_FUNCTION_19_0(int a1, std::locale::id *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  return std::locale::use_facet(&a10, a2);
}

void OUTLINED_FUNCTION_21()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

uint64_t OUTLINED_FUNCTION_23()
{
  return std::ostream::flush();
}

void OUTLINED_FUNCTION_27(uint64_t a1, struct type_info *a2, void (*a3)(void *))
{
  void *v3;

  __cxa_throw(v3, a2, a3);
}

void OUTLINED_FUNCTION_28()
{
  file_logger *v0;

  file_logger::stream_flush(v0);
}

void OUTLINED_FUNCTION_30()
{
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

void *OUTLINED_FUNCTION_31()
{
  uint64_t v0;

  return pthread_getspecific(*(_QWORD *)(v0 + 592));
}

void _GLOBAL__sub_I_mps_cnnmodule_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 16);
  turi::neural_net::SAME = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 0);
  turi::neural_net::VALID = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

void turi::neural_net::create_mps_compute_context(turi::neural_net *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id *v7;
  void *v8;
  id v9;
  _QWORD *v10;
  id *v11;
  id *v12;

  v3 = (void *)MEMORY[0x219A19FE4](this);
  v4 = turi::fileio::NUM_GPUS;
  *a2 = 0;
  if (v4)
  {
    +[TCMPSDeviceManager sharedInstance](TCMPSDeviceManager, "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "preferredDevice");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = (id *)operator new();
    *v7 = 0;
    v12 = v7;
    v8 = (void *)objc_msgSend(v6, "newCommandQueue");
    v9 = *v12;
    *v12 = v8;

    v10 = (_QWORD *)operator new();
    v11 = v12;
    v12 = 0;
    turi::neural_net::mps_compute_context::mps_compute_context(v10, (uint64_t *)&v11);
    *a2 = v10;
    std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](&v11, 0);
    std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](&v12, 0);

  }
  objc_autoreleasePoolPop(v3);
}

void sub_217E7EFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id *a9, id *a10)
{
  _QWORD *v10;
  void *v11;
  uint64_t v12;

  std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](&a9, 0);
  MEMORY[0x219A19A08](v12, 0xA1C409BE6959DLL);
  std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](&a10, 0);

  *v10 = 0;
  _Unwind_Resume(a1);
}

_QWORD *turi::neural_net::mps_compute_context::mps_compute_context(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = &off_24D917798;
  a1[1] = v4;
  v5 = (_QWORD *)operator new();
  v6 = *a2;
  *v5 = &unk_24D917968;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v6;
  a1[2] = v5;
  *a2 = 0;
  return a1;
}

void sub_217E7F08C(_Unwind_Exception *a1)
{
  turi::neural_net::float_scalar *v1;

  turi::neural_net::float_scalar::~float_scalar(v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_compute_context::~mps_compute_context(turi::neural_net::mps_compute_context *this)
{
  *(_QWORD *)this = &off_24D917798;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  turi::neural_net::float_scalar::~float_scalar(this);
}

{
  *(_QWORD *)this = &off_24D917798;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  turi::neural_net::float_scalar::~float_scalar(this);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::mps_compute_context::memory_budget(turi::neural_net::mps_compute_context *this)
{
  objc_autoreleasePoolPop((void *)MEMORY[0x219A19FE4](this));
  return 0x40000000;
}

void turi::neural_net::mps_compute_context::print_training_device_info(id **this)
{
  void *v2;
  void *v3;
  id v4;
  std::string::size_type size;
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  int *v10;
  file_logger *v11;
  file_logger *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  std::string __p;
  std::string v17;

  v2 = (void *)MEMORY[0x219A19FE4]();
  objc_msgSend(*this[1], "device");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "name");
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(&v17, (char *)objc_msgSend(v4, "cStringUsingEncoding:", 4));

  size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v17.__r_.__value_.__l.__size_;
  if (size)
  {
    v6 = (int *)global_logger();
    if (v6[169] > 4)
      goto LABEL_22;
    if (!cppipc::must_cancel((cppipc *)v6))
    {
      v7 = (file_logger *)global_logger();
      started = file_logger::start_stream(v7, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_compute_context.mm", "print_training_device_info", 130, 1);
      v9 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v9 && *((_BYTE *)v9 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Using GPU (\"", 12);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
      else
        __p = v17;
      v14 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
      v15 = pthread_getspecific(*(_QWORD *)(v14 + 592));
      if (v15 && *((_BYTE *)v15 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"\") to create model.", 19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_22;
    }
LABEL_25:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  v10 = (int *)global_logger();
  if (v10[169] > 4)
    goto LABEL_22;
  if (cppipc::must_cancel((cppipc *)v10))
    goto LABEL_25;
  v11 = (file_logger *)global_logger();
  v12 = file_logger::start_stream(v11, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_compute_context.mm", "print_training_device_info", 128, 1);
  v13 = pthread_getspecific(*((_QWORD *)v12 + 74));
  if (v13 && *((_BYTE *)v13 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Using CPU to create model.", 26);
LABEL_22:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);

  objc_autoreleasePoolPop(v2);
}

void sub_217E7F31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_compute_context::create_image_augmenter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = turi::neural_net::mps_image_augmenter::mps_image_augmenter(v4, a1);
  *a2 = v4;
  return result;
}

void sub_217E7F3B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C408ACC72CDLL);
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_compute_context::create_object_detector(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t *a9@<X8>, const void ***a10, uint64_t a11)
{
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  _QWORD **v21;
  _QWORD **v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  float v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  _OWORD *v31;
  _QWORD *v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v48;
  _OWORD v49[2];
  std::string **v50;
  _QWORD *v51[2];
  uint64_t *v52;
  _QWORD *v53[3];
  std::string **v54;
  _QWORD *v55;
  _QWORD *v56;
  std::string **v57;
  _QWORD *v58;
  _QWORD *v59;
  std::string *v60;
  std::string *v61;
  std::string *v62;
  __int128 v63;
  _BYTE v64[28];
  std::string **v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t *v68;
  _QWORD *v69;
  _QWORD *v70;
  __int128 v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75[3];
  uint64_t v76[3];
  uint64_t v77[3];
  _QWORD v78[3];
  __int128 v79;

  *(_QWORD *)&v79 = *MEMORY[0x24BDAC8D0];
  v63 = 0uLL;
  v65 = (std::string **)&v66;
  v66 = 0;
  v69 = 0;
  v70 = 0;
  v67 = 0;
  v68 = (uint64_t *)&v69;
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v63, (uint64_t *)(a1 + 8));
  *(_DWORD *)v64 = a2;
  *(_DWORD *)&v64[4] = a3;
  *(_DWORD *)&v64[8] = a4;
  *(_DWORD *)&v64[12] = a5;
  *(_DWORD *)&v64[16] = a6;
  *(_DWORD *)&v64[20] = a7;
  *(_DWORD *)&v64[24] = a8;
  if (&v68 != (uint64_t **)a11)
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>(&v68, *(__int128 **)a11, (__int128 *)(a11 + 8));
  std::string::basic_string[abi:ne180100]<0>(&v71, "learning_rate");
  std::string::basic_string[abi:ne180100]<0>(&v73, "od_scale_class");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v74 + 1, "od_scale_no_object");
  std::string::basic_string[abi:ne180100]<0>(v75, "od_scale_object");
  std::string::basic_string[abi:ne180100]<0>(v76, "od_scale_wh");
  std::string::basic_string[abi:ne180100]<0>(v77, "od_scale_xy");
  std::string::basic_string[abi:ne180100]<0>(v78, "gradient_clipping");
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v57 = &v60;
  LOBYTE(v58) = 0;
  v60 = (std::string *)operator new(0xA8uLL);
  v61 = v60;
  v62 = v60 + 7;
  v18 = 0;
  v61 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v62, &v71, &v79, v60);
  do
  {
    if (SHIBYTE(v78[v18 + 2]) < 0)
      operator delete((void *)v78[v18]);
    v18 -= 3;
  }
  while (v18 != -21);
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t *)&v54, a10);
  v20 = v60;
  v19 = v61;
  if (v60 != v61)
  {
    while (1)
    {
      v21 = (_QWORD **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v54, (const void **)&v20->__r_.__value_.__l.__data_);
      v22 = v21;
      if (&v55 != v21)
        break;
LABEL_28:
      if (++v20 == v19)
        goto LABEL_29;
    }
    v23 = (uint64_t)(v21 + 8);
    v24 = (*(uint64_t (**)(_QWORD *))(*v21[8] + 16))(v21[8]);
    v25 = SHIBYTE(v20->__r_.__value_.__r.__words[2]);
    if (v25 < 0)
    {
      v26 = 8.0;
      if (v20->__r_.__value_.__l.__size_ != 13)
        goto LABEL_23;
      v27 = (unint64_t *)v20->__r_.__value_.__r.__words[0];
    }
    else
    {
      v26 = 8.0;
      v27 = (unint64_t *)v20;
      if (v25 != 13)
        goto LABEL_23;
    }
    v28 = bswap64(*v27);
    v29 = 0x6C6561726E696E67;
    if (v28 == 0x6C6561726E696E67
      && (v28 = bswap64(*(unint64_t *)((char *)v27 + 5)), v29 = 0x696E675F72617465, v28 == 0x696E675F72617465))
    {
      v30 = 0;
    }
    else if (v28 < v29)
    {
      v30 = -1;
    }
    else
    {
      v30 = 1;
    }
    if (v30)
      v26 = 8.0;
    else
      v26 = 0.125;
LABEL_23:
    v32 = v22[10];
    v31 = v22 + 10;
    turi::neural_net::shared_float_array::wrap(*(float *)(v24 + 4 * (_QWORD)v32) * v26, (uint64_t)&v71);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v23, (__int128 *)((char *)&v71 + 8));
    v33 = v74;
    *v31 = v73;
    v31[1] = v33;
    *(_QWORD *)&v71 = &unk_24D9175B8;
    v34 = v72;
    if (v72)
    {
      p_shared_owners = (unint64_t *)&v72->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    goto LABEL_28;
  }
LABEL_29:
  v57 = v54;
  v58 = v55;
  v59 = v56;
  if (v56)
  {
    v55[2] = &v58;
    v54 = (std::string **)&v55;
    v55 = 0;
    v56 = 0;
  }
  else
  {
    v57 = (std::string **)&v58;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v65, v66);
  v37 = v58;
  v65 = v57;
  v66 = v58;
  v67 = v59;
  if (v59)
  {
    v58[2] = &v66;
    v57 = (std::string **)&v58;
    v58 = 0;
    v59 = 0;
    v37 = 0;
  }
  else
  {
    v65 = (std::string **)&v66;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v57, v37);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v54, v55);
  v38 = operator new();
  v39 = v38;
  v40 = v63;
  v63 = 0uLL;
  v48 = v40;
  v49[0] = *(_OWORD *)v64;
  *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)&v64[12];
  v50 = v65;
  v51[0] = v66;
  v51[1] = v67;
  if (v67)
  {
    v66[2] = v51;
    v65 = (std::string **)&v66;
    v66 = 0;
    v67 = 0;
  }
  else
  {
    v50 = (std::string **)v51;
  }
  v52 = v68;
  v53[0] = v69;
  v53[1] = v70;
  if (v70)
  {
    v69[2] = v53;
    v68 = (uint64_t *)&v69;
    v69 = 0;
    v70 = 0;
  }
  else
  {
    v52 = (uint64_t *)v53;
  }
  turi::neural_net::mps_od_backend::mps_od_backend(v38, &v48);
  *a9 = v39;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v52, v53[0]);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v50, v51[0]);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  *(_QWORD *)&v71 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v68, v69);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v65, v66);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_217E7F970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  turi::neural_net::mps_od_backend::parameters::~parameters((turi::neural_net::mps_od_backend::parameters *)&a37);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void turi::neural_net::mps_od_backend::parameters::~parameters(turi::neural_net::mps_od_backend::parameters *this)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void turi::neural_net::mps_compute_context::create_activity_classifier(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  float v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  _OWORD v38[2];
  _BYTE v39[8];
  _QWORD *v40;
  const void *v41[4];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[4];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[4];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[4];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  turi::neural_net::mps_cnn_module::mps_cnn_module(v6, *(_QWORD *)(a1 + 8));
  v7 = *(float *)(a2 + 20);
  turi::neural_net::shared_float_array::wrap((float)*(int *)(a2 + 8), (uint64_t)&v36);
  std::string::basic_string[abi:ne180100]<0>(v41, "ac_pred_window");
  v41[3] = &unk_24D9175B8;
  v42 = v37;
  v37 = 0uLL;
  v43 = v38[0];
  v44 = v38[1];
  turi::neural_net::shared_float_array::wrap((float)*(int *)(a2 + 16), (uint64_t)&v32);
  std::string::basic_string[abi:ne180100]<0>(v45, "ac_seq_len");
  v45[3] = &unk_24D9175B8;
  v46 = v33;
  v33 = 0uLL;
  v47 = v34;
  v8 = v34;
  v48 = v35;
  LOBYTE(v8) = *(_BYTE *)(a2 + 24);
  turi::neural_net::shared_float_array::wrap(1.0 - (float)v8, (uint64_t)&v28);
  std::string::basic_string[abi:ne180100]<0>(v49, "mode");
  v49[3] = &unk_24D9175B8;
  v9 = v29;
  v29 = 0uLL;
  v50 = v9;
  v51 = v30;
  v52 = v31;
  turi::neural_net::shared_float_array::wrap(v7, (uint64_t)&v24);
  std::string::basic_string[abi:ne180100]<0>(v53, "random_seed");
  v53[3] = &unk_24D9175B8;
  v10 = v25;
  v25 = 0uLL;
  v54 = v10;
  v55 = v26;
  v56 = v27;
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t)v39, v41, 4);
  v11 = 20;
  do
  {
    *(_QWORD *)&v38[v11] = &unk_24D9175B8;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v38[v11] + 8);
    if (*((char *)&v37 + v11 * 16 + 15) < 0)
      operator delete(*(void **)((char *)&v36 + v11 * 16));
    v11 -= 5;
  }
  while (v11 * 16);
  v24 = &unk_24D9175B8;
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v28 = &unk_24D9175B8;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v32 = &unk_24D9175B8;
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v36 = &unk_24D9175B8;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  turi::neural_net::mps_cnn_module::init(v6, 9, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), 1, *(_DWORD *)(a2 + 16) * *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), 1, *(_DWORD *)(a2 + 16), 2u, (uint64_t)v39);
  turi::neural_net::mps_cnn_module::load(v6, a2 + 32);
  *a3 = v6;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v39, v40);
}

void sub_217E7FE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;

  for (i = 240; i != -80; i -= 80)
    std::pair<std::string const,turi::neural_net::shared_float_array>::~pair(v38 + i);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  a20 = v37 + 16;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  a27 = v37 + 16;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  *(_QWORD *)(v36 + 56) = &unk_24D9175B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  _Unwind_Resume(a1);
}

void turi::neural_net::shared_float_array::wrap(float a1@<S0>, uint64_t a2@<X8>)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;

  v5 = operator new(0x28uLL);
  v5[2] = 0;
  *v5 = &unk_24D917810;
  v5[1] = 0;
  *((float *)v5 + 8) = a1;
  v10 = (std::__shared_weak_count *)v5;
  v5[3] = &unk_24D917860;
  v9 = (char *)(v5 + 3);
  turi::neural_net::shared_float_array::shared_float_array(a2, &v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_217E80084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,turi::neural_net::shared_float_array>::~pair(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_24D9175B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t turi::neural_net::mps_compute_context::has_style_transfer(turi::neural_net::mps_compute_context *this)
{
  return 1;
}

uint64_t turi::neural_net::mps_compute_context::create_style_transfer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = operator new();
  result = turi::style_transfer::mps_style_transfer::mps_style_transfer(v8, a2, a3, *(_QWORD *)(a1 + 8));
  *a4 = v8;
  return result;
}

void sub_217E80158(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_compute_context::create_drawing_classifier(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void turi::neural_net::compute_context::create_multilayer_perceptron_classifier()
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  turi::TuriException::TuriException((uint64_t)exception, 0);
}

void sub_217E801BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::float_scalar>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D917810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::float_scalar>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D917810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::float_scalar>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void turi::neural_net::float_scalar::~float_scalar(turi::neural_net::float_scalar *this)
{
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::float_scalar::data(turi::neural_net::float_scalar *this)
{
  return (uint64_t)this + 8;
}

uint64_t turi::neural_net::float_scalar::shape(turi::neural_net::float_scalar *this)
{
  return 0;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::__function::__func<std::unique_ptr<turi::neural_net::compute_context> (*)(void),std::allocator<std::unique_ptr<turi::neural_net::compute_context> (*)(void)>,std::unique_ptr<turi::neural_net::compute_context> ()(void)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::unique_ptr<turi::neural_net::compute_context> (*)(void),std::allocator<std::unique_ptr<turi::neural_net::compute_context> (*)(void)>,std::unique_ptr<turi::neural_net::compute_context> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D9178B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<turi::neural_net::compute_context> (*)(void),std::allocator<std::unique_ptr<turi::neural_net::compute_context> (*)(void)>,std::unique_ptr<turi::neural_net::compute_context> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D9178B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<turi::neural_net::compute_context> (*)(void),std::allocator<std::unique_ptr<turi::neural_net::compute_context> (*)(void)>,std::unique_ptr<turi::neural_net::compute_context> ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t std::__function::__func<std::unique_ptr<turi::neural_net::compute_context> (*)(void),std::allocator<std::unique_ptr<turi::neural_net::compute_context> (*)(void)>,std::unique_ptr<turi::neural_net::compute_context> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::unique_ptr<turi::neural_net::compute_context> (*)(void),std::allocator<std::unique_ptr<turi::neural_net::compute_context> (*)(void)>,std::unique_ptr<turi::neural_net::compute_context> ()(void)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::default_delete<turi::neural_net::mps_command_queue>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x219A19A08);
  }
}

void std::__shared_ptr_pointer<turi::neural_net::mps_command_queue  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_pointer<turi::neural_net::mps_command_queue  *>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<turi::neural_net::mps_command_queue>::operator()[abi:ne180100](a1 + 24, *(id **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::neural_net::mps_command_queue  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t **std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t **leaf_high;
  __int128 *v12;
  BOOL v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t **v16;
  uint64_t *v17;
  const void **v18;
  uint64_t v19;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v16 = result;
    v17 = v8;
    v18 = (const void **)v8;
    if (v8)
    {
      v17 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v8 + 8, (uint64_t *)v9 + 8);
          v10 = v9[6];
          *((_OWORD *)v8 + 5) = v9[5];
          *((_OWORD *)v8 + 6) = v10;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v19, v18 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v19, leaf_high, (uint64_t *)v18);
          v18 = (const void **)v17;
          if (v17)
            v17 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v17);
          v12 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = *(__int128 **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v13 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          v8 = (uint64_t *)v18;
          if (v18)
            v13 = a2 == a3;
          else
            v13 = 1;
          v9 = a2;
        }
        while (!v13);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v16);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_multi<std::pair<std::string const,turi::neural_net::shared_float_array> const&>(v5, a2 + 2);
      v14 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(__int128 **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (__int128 *)*((_QWORD *)a2 + 2);
          v13 = *(_QWORD *)v15 == (_QWORD)a2;
          a2 = v15;
        }
        while (!v13);
      }
      a2 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

void sub_217E80614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_multi<std::pair<std::string const,turi::neural_net::shared_float_array> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::pair<std::string const,turi::neural_net::shared_float_array> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_217E80858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

uint64_t std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 80 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::neural_net::shared_float_array> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 10;
      v6 -= 80;
    }
    while (v6);
  }
  return a1;
}

void sub_217E8094C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mps_compute_context_mm()
{
  void *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _BYTE v10[24];
  _BYTE *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 16);
  turi::neural_net::SAME = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 0);
  turi::neural_net::VALID = objc_claimAutoreleasedReturnValue();
  v1 = operator new();
  v12[0] = &unk_24D9178B8;
  v12[1] = turi::neural_net::create_mps_compute_context;
  v13 = v12;
  v11 = 0;
  v8[0] = &unk_24D9178B8;
  v8[1] = turi::neural_net::create_mps_compute_context;
  v9 = v8;
  turi::neural_net::compute_context::registration::registration(v1, 1, v12, v10, v8);
  v2 = v9;
  if (v9 == v8)
  {
    v3 = 4;
    v2 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = v11;
  if (v11 == v10)
  {
    v5 = 4;
    v4 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
    goto LABEL_15;
  }
  if (v13)
  {
    v7 = 5;
LABEL_15:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  objc_autoreleasePoolPop(v0);
}

void sub_217E80B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  va_list v5;
  va_list v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, va_list);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v7 = v13;
  if (v13 == v5)
  {
    v8 = 4;
    va_copy(v7, va);
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_6:
  _GLOBAL__sub_I_mps_compute_context_mm_cold_1(v4, (uint64_t *)va1, v3, (uint64_t *)va2);
  MEMORY[0x219A19A08](v2, 0x1020C408A2B640DLL);
  _Unwind_Resume(a1);
}

void sub_217E81754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_graph_cnn_module::mps_graph_cnn_module(uint64_t a1, id *a2)
{
  void **v4;
  id *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)a1 = &off_24D9179C8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (id *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v6 = (void *)MEMORY[0x219A19FE4]();
  objc_storeStrong(v5, *a2);
  objc_msgSend(*v5, "device");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = *v4;
  *v4 = (void *)v7;

  objc_autoreleasePoolPop(v6);
  return a1;
}

void sub_217E818A8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;
  uint64_t *v3;
  id *v4;
  void *v6;

  v6 = *(void **)(v2 + 40);
  if (v6)
  {
    *(_QWORD *)(v2 + 48) = v6;
    operator delete(v6);
  }
  turi::neural_net::mps_graph_cnn_module::mps_graph_cnn_module(v3);

  _Unwind_Resume(a1);
}

void turi::neural_net::mps_graph_cnn_module::init(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *context;
  uint64_t v35;
  void *__p;
  void *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x219A19FE4]();
  std::string::basic_string[abi:ne180100]<0>(&__p, "mode");
  *(_DWORD *)(a1 + 24) = turi::neural_net::get_array_map_scalar(a10, (const void **)&__p, 1.0);
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  objc_msgSend(MEMORY[0x24BDDE3B8], "imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:", 4);
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v18;

  objc_msgSend(MEMORY[0x24BDDE3B8], "imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:", 4);
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v20;

  v22 = operator new(0x1CuLL);
  __p = v22;
  v38 = v22 + 7;
  *v22 = a3;
  v22[1] = a5;
  v22[2] = a6;
  v22[3] = a4;
  v22[4] = a8;
  v22[5] = a9;
  v22[6] = a7;
  v37 = v22 + 7;
  turi::neural_net::createNetworkGraph(a2, (__int128 **)&__p, a10, &v35);
  v23 = v35;
  v35 = 0;
  v24 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v23;
  if (v24)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v35;
    v35 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  v26 = *(_DWORD *)(a1 + 24);
  v27 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v27 + 40) = a3;
  turi::neural_net::MPSGraphNetwork::Init(v27, *(void **)(a1 + 8), *(void **)(a1 + 16), v26, a10, a11);
  v28 = *(_DWORD *)(a1 + 24);
  if (v28)
  {
    if (v28 == 1)
    {
      __p = (void *)a3;
      v37 = (void *)a5;
      v38 = (_DWORD *)a6;
      v39 = a4;
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 40), (char *)&__p, (uint64_t)&v40, 4uLL);
    }
    else if (v28 == 2)
    {
      __p = (void *)a3;
      v37 = (void *)a8;
      v38 = (_DWORD *)a9;
      v39 = a7;
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 40), (char *)&__p, (uint64_t)&v40, 4uLL);
    }
  }
  else
  {
    __p = (void *)a3;
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 40), (char *)&__p, (uint64_t)&v37, 1uLL);
  }
  v29 = objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", 2);
  v30 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v29;

  v31 = objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", 2);
  v32 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v31;

  objc_autoreleasePoolPop(context);
}

void sub_217E81BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::neural_net::mps_graph_cnn_module::train(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  TCMPSGraphModuleBatch *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  uint64_t v22;
  id v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  TCMPSGraphModuleBatch *v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[2];
  std::__shared_weak_count *v54;
  __int128 v55;
  __int128 v56;
  _QWORD v57[4];
  TCMPSGraphModuleBatch *v58;
  id v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  uint64_t *v63;
  std::__shared_weak_count *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void *__p;
  void *v70;
  _QWORD *v71;
  void *v72;
  _QWORD v73[2];
  __int128 v74;
  __int128 v75;
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v6 = (void *)MEMORY[0x219A19FE4]();
  objc_msgSend(*(id *)(a1 + 16), "commandBuffer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[TCMPSGraphModuleBatch initWithCommandBuffer:]([TCMPSGraphModuleBatch alloc], "initWithCommandBuffer:", v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  v9 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&__p);
  if (SHIBYTE(v71) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels");
  v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&__p);
  if (SHIBYTE(v71) < 0)
    operator delete(__p);
  if (a2 + 8 == v9)
    turi::neural_net::mps_graph_cnn_module::train(std::map<std::string,turi::neural_net::shared_float_array> const&)::$_0::operator()();
  if (a2 + 8 == v10)
    turi::neural_net::mps_graph_cnn_module::train(std::map<std::string,turi::neural_net::shared_float_array> const&)::$_1::operator()();
  turi::neural_net::mps_graph_cnn_module::copy_input(a1, v9 + 56);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCMPSGraphModuleBatch setInput:](v8, "setInput:", v11);

  turi::neural_net::mps_graph_cnn_module::copy_labels(a1, v10 + 56);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCMPSGraphModuleBatch setLossState:](v8, "setLossState:", v12);

  v13 = *(_QWORD *)(a1 + 32);
  -[TCMPSGraphModuleBatch input](v8, "input");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCMPSGraphModuleBatch lossState](v8, "lossState");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::MPSGraphNetwork::RunGraph(v13, v7, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCMPSGraphModuleBatch setOutput:](v8, "setOutput:", v16);

  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  -[TCMPSGraphModuleBatch lossState](v8, "lossState");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v65, v76, 16);
  if (v18)
  {
    v19 = *(_QWORD *)v66;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v66 != v19)
          objc_enumerationMutation(v17);
        objc_msgSend(*(id *)(*((_QWORD *)&v65 + 1) + 8 * i), "synchronizeOnCommandBuffer:", v7);
      }
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v65, v76, 16);
    }
    while (v18);
  }

  -[TCMPSGraphModuleBatch lossState](v8, "lossState");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "count");

  _ZNSt3__115allocate_sharedB8ne180100INS_7promiseIN4turi10neural_net18shared_float_arrayEEENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v63);
  v23 = *(id *)(a1 + 80);
  v57[0] = MEMORY[0x24BDAC760];
  v57[1] = 3321888768;
  v57[2] = ___ZN4turi10neural_net20mps_graph_cnn_module5trainERKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_18shared_float_arrayENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEE_block_invoke;
  v57[3] = &unk_24D917A00;
  v60 = v63;
  v61 = v64;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  v62 = v22;
  v26 = v8;
  v58 = v26;
  v27 = v23;
  v59 = v27;
  objc_msgSend(v7, "addCompletedHandler:", v57);
  objc_msgSend(v7, "commit");
  v28 = *v63;
  if (!*v63)
    std::__throw_future_error[abi:ne180100](3u);
  v50 = *v63;
  std::__assoc_sub_state::__attach_future[abi:ne180100](v28);
  v29 = operator new(8uLL);
  __p = v29;
  *v29 = v22;
  v70 = v29 + 1;
  v71 = v29 + 1;
  std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>,void>(&v50, (uint64_t)&__p, &v51);
  v52 = v51;
  v51 = 0uLL;
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)v53, &v52);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (__p)
  {
    v70 = __p;
    operator delete(__p);
  }
  v36 = v50;
  if (v50)
  {
    v37 = (unint64_t *)(v50 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "loss");
  v72 = &unk_24D9175B8;
  v73[0] = v53[1];
  v73[1] = v54;
  if (v54)
  {
    v39 = (unint64_t *)&v54->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v74 = v55;
  v75 = v56;
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](a3, (const void **)&__p, 1);
  v72 = &unk_24D9175B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v73);
  if (SHIBYTE(v71) < 0)
    operator delete(__p);
  v53[0] = &unk_24D9175B8;
  v41 = v54;
  if (v54)
  {
    v42 = (unint64_t *)&v54->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  v44 = v61;
  if (v61)
  {
    v45 = (unint64_t *)&v61->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

  v47 = v64;
  if (v64)
  {
    v48 = (unint64_t *)&v64->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }

  objc_autoreleasePoolPop(v6);
}

void sub_217E8218C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  void *v48;
  void *v49;

  std::pair<std::string const,turi::neural_net::shared_float_array>::~pair((uint64_t)&__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a31);

  _Unwind_Resume(a1);
}

id turi::neural_net::mps_graph_cnn_module::copy_input(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  void *v6;

  v4 = (void *)MEMORY[0x219A19FE4]();
  v5 = *(id *)(a1 + 80);
  objc_sync_enter(v5);
  if (objc_msgSend(*(id *)(a1 + 80), "count"))
  {
    objc_msgSend(*(id *)(a1 + 80), "lastObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 80), "removeLastObject");
  }
  else
  {
    v6 = 0;
  }
  objc_sync_exit(v5);

  if (!v6)
  {
    turi::neural_net::mps_graph_cnn_module::create_image_batch((turi::neural_net::mps_graph_cnn_module *)a1, *(MPSImageDescriptor **)(a1 + 64));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  turi::neural_net::fill_image_batch(a2, v6);
  objc_autoreleasePoolPop(v4);
  return v6;
}

void sub_217E823D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id turi::neural_net::mps_graph_cnn_module::copy_labels(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = (void *)MEMORY[0x219A19FE4]();
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 8), a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v4);
  return v5;
}

void ___ZN4turi10neural_net20mps_graph_cnn_module5trainERKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_18shared_float_arrayENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEE_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  float *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  turi::neural_net *v10;
  MPSImage *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  _QWORD *v23;
  void *v24[2];
  uint64_t v25;
  _QWORD v26[2];
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  std::runtime_error v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (objc_msgSend(v3, "status") == 5)
  {
    objc_msgSend(v3, "error");
    objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "localizedDescription");
    v4 = (const char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    std::runtime_error::runtime_error(&v34, v4);
    std::make_exception_ptr[abi:ne180100]<std::runtime_error>(&v34);
  }
  std::vector<float>::vector(&v32, *(_QWORD *)(a1 + 64));
  v5 = (float *)v32;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "lossState");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v35, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v29 != v8)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * i), "lossImage");
        v10 = (turi::neural_net *)objc_claimAutoreleasedReturnValue();
        *v5 = turi::neural_net::sumImage(v10, v11) * 0.125;

        ++v5;
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v35, 16);
    }
    while (v7);
  }

  v12 = *(id *)(a1 + 40);
  objc_sync_enter(v12);
  v13 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "input");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "addObject:", v14);

  objc_sync_exit(v12);
  v15 = *(uint64_t **)(a1 + 48);
  *(_OWORD *)v24 = v32;
  v25 = v33;
  v32 = 0uLL;
  v33 = 0;
  v16 = *(_QWORD *)(a1 + 64);
  v17 = operator new(8uLL);
  __p = v17;
  *v17 = v16;
  v22 = v17 + 1;
  v23 = v17 + 1;
  turi::neural_net::shared_float_array::wrap((uint64_t)v24, (uint64_t)&__p, (uint64_t)v26);
  std::promise<turi::neural_net::shared_float_array>::set_value(v15, (uint64_t)v26);
  v26[0] = &unk_24D9175B8;
  v18 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if ((_QWORD)v32)
  {
    *((_QWORD *)&v32 + 1) = v32;
    operator delete((void *)v32);
  }

}

void sub_217E82724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,std::runtime_error a35,std::exception_ptr a36)
{
  void *v36;
  uint64_t v37;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v37 + 8);
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a31)
    operator delete(a31);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE(uint64_t a1)
{
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 48);
}

void turi::neural_net::mps_graph_cnn_module::predict(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  TCMPSGraphModuleBatch *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  TCMPSGraphModuleBatch *v24;
  id v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *context;
  uint64_t v48;
  __int128 v49;
  _QWORD v50[2];
  std::__shared_weak_count *v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[4];
  TCMPSGraphModuleBatch *v55;
  id v56;
  uint64_t *v57;
  std::__shared_weak_count *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t *v62;
  std::__shared_weak_count *v63;
  void *v64;
  _BYTE *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *__p[2];
  char v72;
  void *v73;
  _QWORD v74[2];
  __int128 v75;
  __int128 v76;
  _BYTE v77[128];
  const __CFString *v78;
  _QWORD v79[4];

  v79[1] = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x219A19FE4]();
  objc_msgSend(*(id *)(a1 + 16), "commandBuffer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[TCMPSGraphModuleBatch initWithCommandBuffer:]([TCMPSGraphModuleBatch alloc], "initWithCommandBuffer:", v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)__p);
  if (v72 < 0)
    operator delete(__p[0]);
  if (a2 + 8 == v8)
    turi::neural_net::mps_graph_cnn_module::predict(std::map<std::string,turi::neural_net::shared_float_array> const&)const::$_0::operator()();
  turi::neural_net::mps_graph_cnn_module::copy_input(a1, v8 + 56);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCMPSGraphModuleBatch setInput:](v7, "setInput:", v9);

  v10 = *(_QWORD *)(a1 + 32);
  v78 = CFSTR("input");
  -[TCMPSGraphModuleBatch input](v7, "input");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v79[0] = v11;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v79, &v78, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::MPSGraphNetwork::RunGraph(v10, v6, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCMPSGraphModuleBatch setOutput:](v7, "setOutput:", v13);

  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  -[TCMPSGraphModuleBatch output](v7, "output");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v67, v77, 16);
  if (v15)
  {
    v16 = *(_QWORD *)v68;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v68 != v16)
          objc_enumerationMutation(v14);
        objc_msgSend(*(id *)(*((_QWORD *)&v67 + 1) + 8 * i), "synchronizeOnCommandBuffer:", v6);
      }
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v67, v77, 16);
    }
    while (v15);
  }

  v18 = *(const void **)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = a1 + 40;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v64, v18, v19, (v19 - (uint64_t)v18) >> 3);
  _ZNSt3__115allocate_sharedB8ne180100INS_7promiseIN4turi10neural_net18shared_float_arrayEEENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v62);
  v21 = *(id *)(a1 + 80);
  v54[0] = MEMORY[0x24BDAC760];
  v54[1] = 3321888768;
  v54[2] = ___ZNK4turi10neural_net20mps_graph_cnn_module7predictERKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_18shared_float_arrayENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEE_block_invoke;
  v54[3] = &unk_24D917A38;
  v57 = v62;
  v58 = v63;
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  v59 = 0;
  v60 = 0;
  v61 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v59, v64, (uint64_t)v65, (v65 - (_BYTE *)v64) >> 3);
  v24 = v7;
  v55 = v24;
  v25 = v21;
  v56 = v25;
  objc_msgSend(v6, "addCompletedHandler:", v54);
  objc_msgSend(v6, "commit");
  v26 = *v62;
  if (!*v62)
    std::__throw_future_error[abi:ne180100](3u);
  v48 = *v62;
  std::__assoc_sub_state::__attach_future[abi:ne180100](v26);
  std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> const&,void>(&v48, v20, __p);
  v49 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)v50, &v49);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v31 = (unint64_t *)((char *)__p[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v48;
  if (v48)
  {
    v34 = (unint64_t *)(v48 + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  v73 = &unk_24D9175B8;
  v74[0] = v50[1];
  v74[1] = v51;
  if (v51)
  {
    v36 = (unint64_t *)&v51->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v75 = v52;
  v76 = v53;
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](a3, (const void **)__p, 1);
  v73 = &unk_24D9175B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v74);
  if (v72 < 0)
    operator delete(__p[0]);
  v50[0] = &unk_24D9175B8;
  v38 = v51;
  if (v51)
  {
    v39 = (unint64_t *)&v51->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }

  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  v41 = v58;
  if (v58)
  {
    v42 = (unint64_t *)&v58->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  v44 = v63;
  if (v63)
  {
    v45 = (unint64_t *)&v63->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }

  objc_autoreleasePoolPop(context);
}

void sub_217E82D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;

  std::pair<std::string const,turi::neural_net::shared_float_array>::~pair((uint64_t)&a47);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v54 + 48);

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }

  _Unwind_Resume(a1);
}

void ___ZNK4turi10neural_net20mps_graph_cnn_module7predictERKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_18shared_float_arrayENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEE_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  std::runtime_error *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  uint64_t v15;
  _QWORD v16[2];
  std::__shared_weak_count *v17;
  std::runtime_error v18;

  v3 = a2;
  if (objc_msgSend(v3, "status") == 5)
  {
    objc_msgSend(v3, "error");
    objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "localizedDescription");
    v4 = (const char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    v5 = std::runtime_error::runtime_error(&v18, v4);
    std::make_exception_ptr[abi:ne180100]<std::runtime_error>(v5);
  }
  v14 = 0;
  v15 = 0;
  __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(a1 + 64), *(_QWORD *)(a1 + 72), (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3);
  objc_msgSend(*(id *)(a1 + 32), "output");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::copy_image_batch_float16((uint64_t **)&__p, v6, (uint64_t)v16);

  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  v7 = *(id *)(a1 + 40);
  objc_sync_enter(v7);
  v8 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "input");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addObject:", v9);

  objc_sync_exit(v7);
  std::promise<turi::neural_net::shared_float_array>::set_value(*(uint64_t **)(a1 + 48), (uint64_t)v16);
  v16[0] = &unk_24D9175B8;
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

}

void sub_217E830B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_48c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE64c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a2 + 56);
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  a1[8] = 0;
  a1[9] = 0;
  v5 = a1 + 8;
  v5[2] = 0;
  return std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v5, *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3);
}

void sub_217E831B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_48c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE64c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 48);
}

void turi::neural_net::mps_graph_cnn_module::export_weights(turi::neural_net::MPSGraphNetwork **this@<X0>, uint64_t *a2@<X8>)
{
  void *v4;

  v4 = (void *)MEMORY[0x219A19FE4]();
  turi::neural_net::MPSGraphNetwork::Export(this[4], a2);
  objc_autoreleasePoolPop(v4);
}

void turi::neural_net::mps_graph_cnn_module::set_learning_rate(turi::neural_net::mps_graph_cnn_module *this, float a2)
{
  void *v4;
  uint64_t v5;
  unint64_t v6;

  v4 = (void *)MEMORY[0x219A19FE4]();
  v5 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (*(_QWORD *)(*((_QWORD *)this + 4) + 16) != v5)
  {
    v6 = 0;
    do
    {
      (*(void (**)(_QWORD, float))(**(_QWORD **)(v5 + 8 * v6) + 32))(*(_QWORD *)(v5 + 8 * v6), a2);
      ++v6;
      v5 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    }
    while (v6 < (*(_QWORD *)(*((_QWORD *)this + 4) + 16) - v5) >> 3);
  }
  objc_autoreleasePoolPop(v4);
}

id turi::neural_net::mps_graph_cnn_module::create_image_batch(turi::neural_net::mps_graph_cnn_module *this, MPSImageDescriptor *a2)
{
  MPSImageDescriptor *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = *(int *)(*((_QWORD *)this + 4) + 40);
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", v4);
  if ((_DWORD)v4)
  {
    do
    {
      v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE368]), "initWithDevice:imageDescriptor:", *((_QWORD *)this + 1), v3);
      objc_msgSend(v5, "addObject:", v6);

      --v4;
    }
    while (v4);
  }
  v7 = (void *)objc_msgSend(v5, "copy");

  return v7;
}

void sub_217E8335C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void turi::neural_net::mps_graph_cnn_module::~mps_graph_cnn_module(id *this)
{
  id v2;
  id v3;

  *this = &off_24D9179C8;

  v2 = this[5];
  if (v2)
  {
    this[6] = v2;
    operator delete(v2);
  }
  v3 = this[4];
  this[4] = 0;
  if (v3)
    (*(void (**)(id))(*(_QWORD *)v3 + 8))(v3);

}

{
  id v2;
  id v3;

  *this = &off_24D9179C8;

  v2 = this[5];
  if (v2)
  {
    this[6] = v2;
    operator delete(v2);
  }
  v3 = this[4];
  this[4] = 0;
  if (v3)
    (*(void (**)(id))(*(_QWORD *)v3 + 8))(v3);

  JUMPOUT(0x219A19A08);
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_217E83600(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::__shared_ptr_emplace[abi:ne180100]<std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> const&,std::allocator<turi::neural_net::deferred_float_array>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_217E836A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::__shared_ptr_emplace[abi:ne180100]<std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> const&,std::allocator<turi::neural_net::deferred_float_array>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_24D917748;
  a1[1] = 0;
  std::allocator<turi::neural_net::deferred_float_array>::construct[abi:ne180100]<turi::neural_net::deferred_float_array,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> const&>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_217E8370C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<turi::neural_net::deferred_float_array>::construct[abi:ne180100]<turi::neural_net::deferred_float_array,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> const&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  unint64_t *v7;
  unint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a3;
  v11 = 0;
  v12 = v5;
  *a3 = 0;
  __p = 0;
  v10 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  turi::neural_net::deferred_float_array::deferred_float_array(a2, &v12, &__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  result = v12;
  if (v12)
  {
    v7 = (unint64_t *)(v12 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_217E837B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, unint64_t *a12)
{
  unint64_t *v13;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  if (a12)
  {
    v13 = a12 + 1;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
      (*(void (**)(unint64_t *))(*a12 + 16))(a12);
  }
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_mps_graph_cnnmodule_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 16);
  turi::neural_net::SAME = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 0);
  turi::neural_net::VALID = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

void turi::neural_net::ReLUGraphLayer::InitFwd(turi::neural_net::ReLUGraphLayer *this, MPSNNImageNode *a2)
{
  MPSNNImageNode *v3;
  double v4;
  _DWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  MPSNNImageNode *v10;

  v3 = a2;
  v5 = (_DWORD *)*((_QWORD *)this + 11);
  if (*((_DWORD **)this + 12) == v5)
    LODWORD(v4) = 0;
  else
    LODWORD(v4) = *v5;
  v10 = v3;
  objc_msgSend(MEMORY[0x24BDDE2D8], "nodeWithSource:a:", v3, v4);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v6;

  objc_msgSend(*((id *)this + 20), "resultImage");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v8;

}

void sub_217E8390C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void turi::neural_net::ReLUGraphLayer::InitBwd(turi::neural_net::ReLUGraphLayer *this, MPSNNImageNode *a2)
{
  MPSNNImageNode *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)*((_QWORD *)this + 20);
  v10[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "gradientFilterWithSources:", v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v6;

  objc_msgSend(*((id *)this + 21), "resultImage");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v8;

}

void sub_217E839E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void turi::neural_net::ConvGraphLayer::Init(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  const void **v15;
  _QWORD *v16;
  const void *v17;
  size_t v18;
  const void **v19;
  const void *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  TCMPSConvolutionWeights *v25;
  void *v26;
  id v27;
  double v28;
  double v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v36;
  id v37;
  _BYTE v38[32];
  void *__p;
  char v40;
  const void *v41[2];
  char v42;
  const void *v43[2];
  char v44;

  v37 = a2;
  v36 = a3;
  v8 = *(int **)(a1 + 64);
  v10 = *v8;
  v9 = v8[1];
  v11 = v8[2];
  v12 = v8[3];
  v34 = v8[4];
  v13 = v8[6];
  *(_BYTE *)(a1 + 160) = v8[7] > 0;
  if (*(char *)(a1 + 63) >= 0)
    v14 = *(unsigned __int8 *)(a1 + 63);
  else
    v14 = *(_QWORD *)(a1 + 48);
  v15 = v43;
  std::string::basic_string[abi:ne180100]((uint64_t)v43, v14 + 7);
  v16 = (_QWORD *)(a1 + 40);
  if (v44 < 0)
    v15 = (const void **)v43[0];
  if (v14)
  {
    if (*(char *)(a1 + 63) >= 0)
      v17 = (const void *)(a1 + 40);
    else
      v17 = *(const void **)(a1 + 40);
    memmove(v15, v17, v14);
  }
  strcpy((char *)v15 + v14, "_weight");
  if (*(char *)(a1 + 63) >= 0)
    v18 = *(unsigned __int8 *)(a1 + 63);
  else
    v18 = *(_QWORD *)(a1 + 48);
  v19 = v41;
  std::string::basic_string[abi:ne180100]((uint64_t)v41, v18 + 5);
  v33 = v12;
  if (v42 < 0)
    v19 = (const void **)v41[0];
  if (v18)
  {
    if (*(char *)(a1 + 63) >= 0)
      v20 = (const void *)(a1 + 40);
    else
      v20 = *(const void **)(a1 + 40);
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "_bias");
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a5, v43))
  {
    std::operator+<char>();
    if (v40 < 0)
      operator delete(__p);
    v21 = std::map<std::string,turi::neural_net::shared_float_array>::at(a5, v43);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    v22 = (char *)operator new[]();
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    turi::neural_net::convert_chw_to_hwc(v21, v22);
  }
  else
  {
    v22 = 0;
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a5, v41))
  {
    std::operator+<char>();
    if (v40 < 0)
      operator delete(__p);
    v23 = std::map<std::string,turi::neural_net::shared_float_array>::at(a5, v41);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  }
  else
  {
    v24 = 0;
  }
  v25 = [TCMPSConvolutionWeights alloc];
  v26 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v25;

  v27 = *(id *)(a1 + 192);
  if (*(char *)(a1 + 63) < 0)
    v16 = (_QWORD *)*v16;
  turi::neural_net::get_array_map_optimizer_options(a4, (uint64_t)v38);
  LODWORD(v28) = 0;
  LODWORD(v29) = 0;
  v30 = objc_msgSend(v27, "initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:neuronType:neuronA:neuronB:stride:kernelParamsBinaryName:device:cmd_queue:init_weight_ptr:init_bias_ptr:optimizerOptions:", v9, v10, v11, v33, 0, v34, v28, v29, v16, v37, v36, v22, v24, v38);
  v31 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v30;

  v32 = &turi::neural_net::SAME;
  if (v13)
    v32 = &turi::neural_net::VALID;
  objc_storeStrong((id *)(a1 + 184), (id)*v32);
  if (v22)
    MEMORY[0x219A199F0](v22, 0x1000C8052888210);
  if (v42 < 0)
    operator delete((void *)v41[0]);
  if (v44 < 0)
    operator delete((void *)v43[0]);

}

void sub_217E83D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  uint64_t v20;
  uint64_t v21;

  if (v20)
    MEMORY[0x219A199F0](v20, 0x1000C8052888210);
  if (*(char *)(v21 - 113) < 0)
    operator delete(*(void **)(v21 - 136));
  if (*(char *)(v21 - 89) < 0)
    operator delete(*(void **)(v21 - 112));

  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,turi::neural_net::shared_float_array>::at(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

void turi::neural_net::ConvGraphLayer::InitFwd(turi::neural_net::ConvGraphLayer *this, MPSNNImageNode *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  MPSNNImageNode *v7;

  v7 = a2;
  objc_msgSend(MEMORY[0x24BDDE270], "nodeWithSource:weights:");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v3;

  objc_msgSend(*((id *)this + 21), "setPaddingPolicy:", *((_QWORD *)this + 23));
  objc_msgSend(*((id *)this + 21), "resultImage");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v5;

}

void sub_217E83EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void turi::neural_net::ConvGraphLayer::InitBwd(turi::neural_net::ConvGraphLayer *this, MPSNNImageNode *a2)
{
  MPSNNImageNode *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)*((_QWORD *)this + 21);
  v10[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "gradientFilterWithSources:", v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v6;

  objc_msgSend(*((id *)this + 22), "resultImage");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v8;

}

void sub_217E83F8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::ConvGraphLayer::SetLearningRate(id *this, float a2)
{
  return objc_msgSend(this[24], "setLearningRate:");
}

void turi::neural_net::ConvGraphLayer::Export(turi::neural_net::ConvGraphLayer *this@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  const void **v10;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  size_t v18;
  void **v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  void *v31[2];
  char v32;
  void *__p;
  void *v34;
  _QWORD *v35;
  void *v36[2];
  uint64_t v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  const void *v44[2];
  char v45;
  void **v46;
  unint64_t v47[7];

  v47[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v4 = (int *)*((_QWORD *)this + 8);
  v5 = *v4;
  v6 = v4[1];
  v8 = v4[2];
  v7 = v4[3];
  objc_msgSend(*((id *)this + 24), "load");
  if (*((char *)this + 63) >= 0)
    v9 = *((unsigned __int8 *)this + 63);
  else
    v9 = *((_QWORD *)this + 6);
  v10 = v44;
  std::string::basic_string[abi:ne180100]((uint64_t)v44, v9 + 7);
  if (v45 < 0)
    v10 = (const void **)v44[0];
  if (v9)
  {
    if (*((char *)this + 63) >= 0)
      v11 = (char *)this + 40;
    else
      v11 = (char *)*((_QWORD *)this + 5);
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "_weight");
  std::vector<float>::vector(&v42, (int)v6 * (uint64_t)(int)v5 * v8 * v7);
  v47[0] = v7;
  v47[1] = v5;
  v47[2] = v6;
  v47[3] = v8;
  turi::neural_net::external_float_array::external_float_array((turi::neural_net::external_float_array *)&v38, (const float *)objc_msgSend(*((id *)this + 24), "weights"), (int)v6 * (uint64_t)(int)v5 * v8 * v7, v47, 4uLL);
  turi::neural_net::convert_hwc_to_chw((uint64_t *)&v38, v42);
  *(_OWORD *)v36 = v42;
  v37 = v43;
  v42 = 0uLL;
  v43 = 0;
  v12 = operator new(0x20uLL);
  v34 = v12 + 4;
  v35 = v12 + 4;
  *v12 = v7;
  v12[1] = v8;
  v12[2] = v5;
  v12[3] = v6;
  __p = v12;
  turi::neural_net::shared_float_array::wrap((uint64_t)v36, (uint64_t)&__p, (uint64_t)&v38);
  v31[0] = v44;
  v13 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v44, (uint64_t)&std::piecewise_construct, (__int128 **)v31);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v13 + 8), &v39);
  v14 = v41;
  *((_OWORD *)v13 + 5) = v40;
  *((_OWORD *)v13 + 6) = v14;
  v38 = &unk_24D9175B8;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  if (*((_BYTE *)this + 160))
  {
    if (*((char *)this + 63) >= 0)
      v18 = *((unsigned __int8 *)this + 63);
    else
      v18 = *((_QWORD *)this + 6);
    v19 = v31;
    std::string::basic_string[abi:ne180100]((uint64_t)v31, v18 + 5);
    if (v32 < 0)
      v19 = (void **)v31[0];
    if (v18)
    {
      if (*((char *)this + 63) >= 0)
        v20 = (char *)this + 40;
      else
        v20 = (char *)*((_QWORD *)this + 5);
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "_bias");
    v21 = objc_msgSend(*((id *)this + 24), "biasTerms");
    v22 = operator new(8uLL);
    v28 = v22;
    *v22 = v7;
    v29 = v22 + 1;
    v30 = v22 + 1;
    turi::neural_net::shared_float_array::copy(v21, (uint64_t)&v28, (uint64_t)&v38);
    v46 = v31;
    v23 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v31, (uint64_t)&std::piecewise_construct, (__int128 **)&v46);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v23 + 8), &v39);
    v24 = v41;
    *((_OWORD *)v23 + 5) = v40;
    *((_OWORD *)v23 + 6) = v24;
    v38 = &unk_24D9175B8;
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v28)
    {
      v29 = v28;
      operator delete(v28);
    }
    if (v32 < 0)
      operator delete(v31[0]);
  }
  if ((_QWORD)v42)
  {
    *((_QWORD *)&v42 + 1) = v42;
    operator delete((void *)v42);
  }
  if (v45 < 0)
    operator delete((void *)v44[0]);
}

void sub_217E8438C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (__p)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  if (*(char *)(v34 - 153) < 0)
    operator delete(*(void **)(v34 - 176));
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v33, *(_QWORD **)(v33 + 8));
  _Unwind_Resume(a1);
}

void turi::neural_net::MaxPoolGraphLayer::InitFwd(turi::neural_net::MaxPoolGraphLayer *this, MPSNNImageNode *a2)
{
  MPSNNImageNode *v3;
  int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  MPSNNImageNode *v10;

  v3 = a2;
  v4 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
  v10 = v3;
  objc_msgSend(MEMORY[0x24BDDE310], "nodeWithSource:filterSize:stride:");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v5;

  if (v4 == 1)
    objc_msgSend(MEMORY[0x24BDDE480], "paddingForTensorflowAveragePooling");
  else
    objc_msgSend(MEMORY[0x24BDDE480], "paddingForTensorflowAveragePoolingValidOnly");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*((id *)this + 20), "setPaddingPolicy:", v7);

  objc_msgSend(*((id *)this + 20), "resultImage");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v8;

}

void sub_217E84544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void turi::neural_net::MaxPoolGraphLayer::InitBwd(turi::neural_net::MaxPoolGraphLayer *this, MPSNNImageNode *a2)
{
  MPSNNImageNode *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)*((_QWORD *)this + 20);
  v10[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "gradientFilterWithSources:", v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v6;

  objc_msgSend(*((id *)this + 21), "resultImage");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v8;

}

void sub_217E8462C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void turi::neural_net::BNGraphLayer::Init(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  size_t v10;
  const void **v11;
  _QWORD *v12;
  const void *v13;
  size_t v14;
  void **v15;
  const void *v16;
  size_t v17;
  void **v18;
  const void *v19;
  size_t v20;
  void **v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float array_map_scalar;
  TCMPSBatchNormWeights *v32;
  void *v33;
  id v34;
  double v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  _BYTE v40[32];
  void *__p[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  const void *v49[2];
  char v50;

  v39 = a2;
  v38 = a3;
  v9 = *(int *)(*(_QWORD *)(a1 + 112) + 12);
  if (*(char *)(a1 + 63) >= 0)
    v10 = *(unsigned __int8 *)(a1 + 63);
  else
    v10 = *(_QWORD *)(a1 + 48);
  v11 = v49;
  std::string::basic_string[abi:ne180100]((uint64_t)v49, v10 + 6);
  v12 = (_QWORD *)(a1 + 40);
  if (v50 < 0)
    v11 = (const void **)v49[0];
  if (v10)
  {
    if (*(char *)(a1 + 63) >= 0)
      v13 = (const void *)(a1 + 40);
    else
      v13 = *(const void **)(a1 + 40);
    memmove(v11, v13, v10);
  }
  strcpy((char *)v11 + v10, "_gamma");
  if (*(char *)(a1 + 63) >= 0)
    v14 = *(unsigned __int8 *)(a1 + 63);
  else
    v14 = *(_QWORD *)(a1 + 48);
  v15 = v47;
  std::string::basic_string[abi:ne180100]((uint64_t)v47, v14 + 5);
  if (v48 < 0)
    v15 = (void **)v47[0];
  if (v14)
  {
    if (*(char *)(a1 + 63) >= 0)
      v16 = (const void *)(a1 + 40);
    else
      v16 = *(const void **)(a1 + 40);
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "_beta");
  if (*(char *)(a1 + 63) >= 0)
    v17 = *(unsigned __int8 *)(a1 + 63);
  else
    v17 = *(_QWORD *)(a1 + 48);
  v18 = v45;
  std::string::basic_string[abi:ne180100]((uint64_t)v45, v17 + 12);
  if (v46 < 0)
    v18 = (void **)v45[0];
  if (v17)
  {
    if (*(char *)(a1 + 63) >= 0)
      v19 = (const void *)(a1 + 40);
    else
      v19 = *(const void **)(a1 + 40);
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, "_running_var");
  if (*(char *)(a1 + 63) >= 0)
    v20 = *(unsigned __int8 *)(a1 + 63);
  else
    v20 = *(_QWORD *)(a1 + 48);
  v21 = v43;
  std::string::basic_string[abi:ne180100]((uint64_t)v43, v20 + 13);
  if (v44 < 0)
    v21 = (void **)v43[0];
  if (v20)
  {
    if (*(char *)(a1 + 63) >= 0)
      v22 = (const void *)(a1 + 40);
    else
      v22 = *(const void **)(a1 + 40);
    memmove(v21, v22, v20);
  }
  strcpy((char *)v21 + v20, "_running_mean");
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a5, v49))
  {
    std::operator+<char>();
    if (v42 < 0)
      operator delete(__p[0]);
    v23 = std::map<std::string,turi::neural_net::shared_float_array>::at(a5, v49);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  }
  else
  {
    v24 = 0;
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a5, (const void **)v47))
  {
    std::operator+<char>();
    if (v42 < 0)
      operator delete(__p[0]);
    v25 = std::map<std::string,turi::neural_net::shared_float_array>::at(a5, (const void **)v47);
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
  }
  else
  {
    v26 = 0;
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a5, (const void **)v45))
  {
    std::operator+<char>();
    if (v42 < 0)
      operator delete(__p[0]);
    v27 = std::map<std::string,turi::neural_net::shared_float_array>::at(a5, (const void **)v45);
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
  }
  else
  {
    v28 = 0;
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a5, (const void **)v43))
  {
    std::operator+<char>();
    if (v42 < 0)
      operator delete(__p[0]);
    v29 = std::map<std::string,turi::neural_net::shared_float_array>::at(a5, (const void **)v43);
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  }
  else
  {
    v30 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_norm_epsilon");
  array_map_scalar = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, 0.00001);
  if (v42 < 0)
    operator delete(__p[0]);
  v32 = [TCMPSBatchNormWeights alloc];
  v33 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v32;

  v34 = *(id *)(a1 + 160);
  if (*(char *)(a1 + 63) < 0)
    v12 = (_QWORD *)*v12;
  turi::neural_net::get_array_map_optimizer_options(a4, (uint64_t)v40);
  *(float *)&v35 = array_map_scalar;
  v36 = objc_msgSend(v34, "initWithChannels:kernelParamsBinaryName:device:cmd_queue:gamma:beta:moving_avg:moving_var:optimizerOptions:batchNormEpsilon:", v9, v12, v39, v38, v24, v26, v35, v30, v28, v40);
  v37 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v36;

  if (v44 < 0)
    operator delete(v43[0]);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v48 < 0)
    operator delete(v47[0]);
  if (v50 < 0)
    operator delete((void *)v49[0]);

}

void sub_217E84AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a30 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  if (*(char *)(v42 - 105) < 0)
    operator delete(*(void **)(v42 - 128));

  _Unwind_Resume(a1);
}

void turi::neural_net::BNGraphLayer::Export(turi::neural_net::BNGraphLayer *this@<X0>, uint64_t a2@<X8>)
{
  size_t v4;
  const void **v5;
  char *v6;
  size_t v7;
  const void **v8;
  char *v9;
  size_t v10;
  const void **v11;
  char *v12;
  size_t v13;
  void **v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  _QWORD *v53;
  void *__p;
  void *v55;
  _QWORD *v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  void *v61[2];
  char v62;
  const void *v63[2];
  char v64;
  const void *v65[2];
  char v66;
  const void *v67[2];
  char v68;
  const void **v69;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  if (*((char *)this + 63) >= 0)
    v4 = *((unsigned __int8 *)this + 63);
  else
    v4 = *((_QWORD *)this + 6);
  v5 = v67;
  std::string::basic_string[abi:ne180100]((uint64_t)v67, v4 + 6);
  if (v68 < 0)
    v5 = (const void **)v67[0];
  if (v4)
  {
    if (*((char *)this + 63) >= 0)
      v6 = (char *)this + 40;
    else
      v6 = (char *)*((_QWORD *)this + 5);
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "_gamma");
  if (*((char *)this + 63) >= 0)
    v7 = *((unsigned __int8 *)this + 63);
  else
    v7 = *((_QWORD *)this + 6);
  v8 = v65;
  std::string::basic_string[abi:ne180100]((uint64_t)v65, v7 + 5);
  if (v66 < 0)
    v8 = (const void **)v65[0];
  if (v7)
  {
    if (*((char *)this + 63) >= 0)
      v9 = (char *)this + 40;
    else
      v9 = (char *)*((_QWORD *)this + 5);
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "_beta");
  if (*((char *)this + 63) >= 0)
    v10 = *((unsigned __int8 *)this + 63);
  else
    v10 = *((_QWORD *)this + 6);
  v11 = v63;
  std::string::basic_string[abi:ne180100]((uint64_t)v63, v10 + 12);
  if (v64 < 0)
    v11 = (const void **)v63[0];
  if (v10)
  {
    if (*((char *)this + 63) >= 0)
      v12 = (char *)this + 40;
    else
      v12 = (char *)*((_QWORD *)this + 5);
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "_running_var");
  if (*((char *)this + 63) >= 0)
    v13 = *((unsigned __int8 *)this + 63);
  else
    v13 = *((_QWORD *)this + 6);
  v14 = v61;
  std::string::basic_string[abi:ne180100]((uint64_t)v61, v13 + 13);
  if (v62 < 0)
    v14 = (void **)v61[0];
  if (v13)
  {
    if (*((char *)this + 63) >= 0)
      v15 = (char *)this + 40;
    else
      v15 = (char *)*((_QWORD *)this + 5);
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "_running_mean");
  v16 = *(int *)(*((_QWORD *)this + 14) + 12);
  objc_msgSend(*((id *)this + 20), "load");
  v17 = objc_msgSend(*((id *)this + 20), "gamma");
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v16;
  v55 = v18 + 1;
  v56 = v18 + 1;
  turi::neural_net::shared_float_array::copy(v17, (uint64_t)&__p, (uint64_t)&v57);
  v69 = v67;
  v19 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v67, (uint64_t)&std::piecewise_construct, (__int128 **)&v69);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v19 + 8), &v58);
  v20 = v60;
  *((_OWORD *)v19 + 5) = v59;
  *((_OWORD *)v19 + 6) = v20;
  v57 = &unk_24D9175B8;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (__p)
  {
    v55 = __p;
    operator delete(__p);
  }
  v24 = objc_msgSend(*((id *)this + 20), "beta");
  v25 = operator new(8uLL);
  v51 = v25;
  *v25 = v16;
  v52 = v25 + 1;
  v53 = v25 + 1;
  turi::neural_net::shared_float_array::copy(v24, (uint64_t)&v51, (uint64_t)&v57);
  v69 = v65;
  v26 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v65, (uint64_t)&std::piecewise_construct, (__int128 **)&v69);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v26 + 8), &v58);
  v27 = v60;
  *((_OWORD *)v26 + 5) = v59;
  *((_OWORD *)v26 + 6) = v27;
  v57 = &unk_24D9175B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  v31 = objc_msgSend(*((id *)this + 20), "variance");
  v32 = operator new(8uLL);
  v48 = v32;
  *v32 = v16;
  v49 = v32 + 1;
  v50 = v32 + 1;
  turi::neural_net::shared_float_array::copy(v31, (uint64_t)&v48, (uint64_t)&v57);
  v69 = v63;
  v33 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v63, (uint64_t)&std::piecewise_construct, (__int128 **)&v69);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v33 + 8), &v58);
  v34 = v60;
  *((_OWORD *)v33 + 5) = v59;
  *((_OWORD *)v33 + 6) = v34;
  v57 = &unk_24D9175B8;
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  v38 = objc_msgSend(*((id *)this + 20), "mean");
  v39 = operator new(8uLL);
  v45 = v39;
  *v39 = v16;
  v46 = v39 + 1;
  v47 = v39 + 1;
  turi::neural_net::shared_float_array::copy(v38, (uint64_t)&v45, (uint64_t)&v57);
  v69 = (const void **)v61;
  v40 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v61, (uint64_t)&std::piecewise_construct, (__int128 **)&v69);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v40 + 8), &v58);
  v41 = v60;
  *((_OWORD *)v40 + 5) = v59;
  *((_OWORD *)v40 + 6) = v41;
  v57 = &unk_24D9175B8;
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete((void *)v63[0]);
  if (v66 < 0)
    operator delete((void *)v65[0]);
  if (v68 < 0)
    operator delete((void *)v67[0]);
}

void sub_217E85158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (__p)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  if (*(char *)(v35 - 81) < 0)
    operator delete(*(void **)(v35 - 104));
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v34, *(_QWORD **)(v34 + 8));
  _Unwind_Resume(a1);
}

void sub_217E8529C()
{
  JUMPOUT(0x217E85258);
}

void sub_217E852A4()
{
  JUMPOUT(0x217E85268);
}

void sub_217E852AC()
{
  JUMPOUT(0x217E85278);
}

void sub_217E852B4()
{
  JUMPOUT(0x217E85288);
}

void turi::neural_net::BNGraphLayer::InitFwd(turi::neural_net::BNGraphLayer *this, MPSNNImageNode *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  MPSNNImageNode *v7;

  v7 = a2;
  objc_msgSend(MEMORY[0x24BDDE240], "nodeWithSource:dataSource:");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v3;

  objc_msgSend(*((id *)this + 21), "resultImage");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v5;

}

void sub_217E85328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void turi::neural_net::BNGraphLayer::InitBwd(turi::neural_net::BNGraphLayer *this, MPSNNImageNode *a2)
{
  MPSNNImageNode *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)*((_QWORD *)this + 21);
  v10[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "gradientFilterWithSources:", v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v6;

  objc_msgSend(*((id *)this + 22), "resultImage");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v8;

}

void sub_217E85400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::BNGraphLayer::SetLearningRate(id *this, float a2)
{
  return objc_msgSend(this[20], "setLearningRate:");
}

_QWORD *turi::neural_net::YoloLossGraphLayer::GetDefaultAnchorBoxes@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, &turi::neural_net::YoloLossGraphLayer::GetDefaultAnchorBoxes(void)::default_anchor_boxes, (uint64_t)&xmmword_2186C1510, 0xFuLL);
}

uint64_t turi::neural_net::YoloLossGraphLayer::YoloLossGraphLayer(uint64_t a1, __int128 *a2, __n128 *a3, __n128 *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  *(_OWORD *)(a1 + 40) = 0u;
  v10 = a1 + 40;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v11 = a1 + 168;
  *(_QWORD *)a1 = &off_24D917A90;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 168), &turi::neural_net::YoloLossGraphLayer::GetDefaultAnchorBoxes(void)::default_anchor_boxes, (uint64_t)&xmmword_2186C1510, 0xFuLL);
  *(_OWORD *)(a1 + 192) = xmmword_2186C1630;
  *(_QWORD *)(a1 + 208) = 0x3F33333340000000;
  *(_DWORD *)(a1 + 216) = 1050253722;
  *(_BYTE *)(a1 + 220) = 1;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 32) = 9;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)v10);
  v12 = *a2;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v10 = v12;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 112, a3);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 136, a4);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(v11, (__n128 *)a5);
  v13 = *(_OWORD *)(a5 + 24);
  *(_OWORD *)(a1 + 205) = *(_OWORD *)(a5 + 37);
  *(_OWORD *)(a1 + 192) = v13;
  return a1;
}

void sub_217E85588(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::YoloLossGraphLayer::Init(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  id v28;
  id v29;
  void *__p[2];
  char v31;

  v29 = a2;
  v28 = a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "od_anchors");
  v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a4, (const void **)__p);
  v8 = v7;
  if (v31 < 0)
  {
    operator delete(__p[0]);
    if (!v8)
      goto LABEL_28;
  }
  else if (!v7)
  {
    goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "od_anchors");
  v9 = std::map<std::string,turi::neural_net::shared_float_array>::at(a4, (const void **)__p);
  if (v31 < 0)
    operator delete(__p[0]);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  if (v10)
  {
    if ((v10 & 1) == 0)
    {
      v13 = (char **)(a1 + 168);
      v12 = *(char **)(a1 + 168);
      *(_QWORD *)(a1 + 176) = v12;
      if (v10 >= 2)
      {
        v14 = v11;
        v15 = 0;
        v16 = v10 >> 1;
        v17 = (_QWORD *)(a1 + 184);
        do
        {
          v18 = *(_QWORD *)(v14 + 8 * v15);
          if ((unint64_t)v12 >= *v17)
          {
            v19 = (v12 - *v13) >> 3;
            if ((unint64_t)(v19 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v20 = *v17 - (_QWORD)*v13;
            v21 = v20 >> 2;
            if (v20 >> 2 <= (unint64_t)(v19 + 1))
              v21 = v19 + 1;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
              v22 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v22 = v21;
            if (v22)
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 184, v22);
            else
              v23 = 0;
            v24 = &v23[8 * v19];
            *(_QWORD *)v24 = v18;
            v12 = v24 + 8;
            v26 = *(char **)(a1 + 168);
            v25 = *(char **)(a1 + 176);
            if (v25 != v26)
            {
              do
              {
                v27 = *((_QWORD *)v25 - 1);
                v25 -= 8;
                *((_QWORD *)v24 - 1) = v27;
                v24 -= 8;
              }
              while (v25 != v26);
              v25 = *v13;
            }
            *(_QWORD *)(a1 + 168) = v24;
            *(_QWORD *)(a1 + 176) = v12;
            *(_QWORD *)(a1 + 184) = &v23[8 * v22];
            if (v25)
              operator delete(v25);
          }
          else
          {
            *(_QWORD *)v12 = v18;
            v12 += 8;
          }
          *(_QWORD *)(a1 + 176) = v12;
          ++v15;
        }
        while (v15 != v16);
      }
    }
  }
LABEL_28:
  std::string::basic_string[abi:ne180100]<0>(__p, "od_scale_xy");
  *(float *)(a1 + 192) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 192));
  if (v31 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "od_scale_wh");
  *(float *)(a1 + 196) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 196));
  if (v31 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "od_scale_no_object");
  *(float *)(a1 + 200) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 200));
  if (v31 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "od_scale_object");
  *(float *)(a1 + 204) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 204));
  if (v31 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "od_scale_class");
  *(float *)(a1 + 208) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 208));
  if (v31 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "od_max_iou_for_no_object");
  *(float *)(a1 + 216) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 216));
  if (v31 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "od_min_iou_for_object");
  *(float *)(a1 + 212) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 212));
  if (v31 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "od_rescore");
  *(_BYTE *)(a1 + 220) = turi::neural_net::get_array_map_BOOL(a4, (const void **)__p, *(unsigned __int8 *)(a1 + 220));
  if (v31 < 0)
    operator delete(__p[0]);

}

void sub_217E8593C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{

  _Unwind_Resume(a1);
}

void turi::neural_net::YoloLossGraphLayer::InitFwd(turi::neural_net::YoloLossGraphLayer *this, MPSNNImageNode *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  MPSNNImageNode *v20;

  v20 = a2;
  v3 = *((_QWORD *)this + 22) - *((_QWORD *)this + 21);
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE330], "cnnLossDescriptorWithXYLossType:WHLossType:confidenceLossType:classesLossType:reductionType:anchorBoxes:numberOfAnchorBoxes:", 1, 6, 3, 2, 1, v4, v3 >> 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = **((_DWORD **)this + 17);
  objc_msgSend(v5, "setRescore:", *((unsigned __int8 *)this + 220));
  LODWORD(v7) = *((_DWORD *)this + 48);
  objc_msgSend(v5, "setScaleXY:", v7);
  LODWORD(v8) = *((_DWORD *)this + 49);
  objc_msgSend(v5, "setScaleWH:", v8);
  *(float *)&v9 = *((float *)this + 50) / (float)v6;
  objc_msgSend(v5, "setScaleNoObject:", v9);
  *(float *)&v10 = *((float *)this + 51) / (float)v6;
  objc_msgSend(v5, "setScaleObject:", v10);
  LODWORD(v11) = *((_DWORD *)this + 52);
  objc_msgSend(v5, "setScaleClass:", v11);
  LODWORD(v12) = *((_DWORD *)this + 53);
  objc_msgSend(v5, "setMinIOUForObjectPresence:", v12);
  LODWORD(v13) = *((_DWORD *)this + 54);
  objc_msgSend(v5, "setMaxIOUForObjectAbsence:", v13);
  objc_msgSend(MEMORY[0x24BDDE338], "nodeWithSource:lossDescriptor:", v20, v5);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = (void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = v14;

  objc_msgSend(*((id *)this + 28), "inputLabels");
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v16;

  objc_msgSend(*((id *)this + 28), "resultImage");
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v18;

}

void sub_217E85B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void turi::neural_net::YoloLossGraphLayer::InitBwd(id *this, MPSNNImageNode *a2)
{
  objc_storeStrong(this + 3, this[2]);
}

id turi::neural_net::YoloLossGraphLayer::CreateLossState(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v19;
  id v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[3];

  v20 = a2;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v6 = *(int **)(a1 + 136);
  v7 = *v6;
  if ((int)v7 < 1)
  {
    v17 = (void *)MEMORY[0x24BDBD1A8];
  }
  else
  {
    v8 = v5;
    v9 = v6[2];
    v10 = v6[3];
    v19 = v6[1];
    v11 = 4 * (int)v9 * (uint64_t)(int)v19 * v10;
    v12 = (void *)MEMORY[0x24BDBD1A8];
    do
    {
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v8, v11, v19);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v23[0] = v9;
      v23[1] = v19;
      v23[2] = v10;
      objc_msgSend(MEMORY[0x24BDDE2A8], "cnnLossDataDescriptorWithData:layout:size:", v13, 0, v23);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_alloc(MEMORY[0x24BDDE2B8]);
      v21 = xmmword_2186C1510;
      v22 = 1;
      v16 = (void *)objc_msgSend(v15, "initWithDevice:lossImageSize:labelsDescriptor:weightsDescriptor:", v20, &v21, v14, 0);
      objc_msgSend(v12, "arrayByAddingObject:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v8 += v11;
      v12 = v17;
      --v7;
    }
    while (v7);
  }

  return v17;
}

void sub_217E85CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void turi::neural_net::GraphLayer::Export(_QWORD *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

void turi::neural_net::ReLUGraphLayer::~ReLUGraphLayer(id *this)
{
  turi::neural_net::ReLUGraphLayer::~ReLUGraphLayer(this);
  JUMPOUT(0x219A19A08);
}

{

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)this);
}

void turi::neural_net::ConvGraphLayer::~ConvGraphLayer(id *this)
{
  turi::neural_net::ConvGraphLayer::~ConvGraphLayer(this);
  JUMPOUT(0x219A19A08);
}

{

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)this);
}

void turi::neural_net::BNGraphLayer::~BNGraphLayer(id *this)
{
  turi::neural_net::BNGraphLayer::~BNGraphLayer(this);
  JUMPOUT(0x219A19A08);
}

{

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)this);
}

void turi::neural_net::YoloLossGraphLayer::~YoloLossGraphLayer(id *this)
{
  id v2;

  *this = &off_24D917A90;

  v2 = this[21];
  if (v2)
  {
    this[22] = v2;
    operator delete(v2);
  }

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)this);
}

{
  id v2;

  *this = &off_24D917A90;

  v2 = this[21];
  if (v2)
  {
    this[22] = v2;
    operator delete(v2);
  }

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)this);
  JUMPOUT(0x219A19A08);
}

__n128 _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void turi::neural_net::GraphLayer::~GraphLayer(turi::neural_net::GraphLayer *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &unk_24D917CC8;
  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 15) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 9) = v5;
    operator delete(v5);
  }
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));

}

uint64_t std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24D916A80, (void (*)(void *))MEMORY[0x24BEDAB00]);
}

void sub_217E86088(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void _GLOBAL__sub_I_mps_graph_layers_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 16);
  turi::neural_net::SAME = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 0);
  turi::neural_net::VALID = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

uint64_t turi::neural_net::createNetworkGraph@<X0>(int a1@<W0>, __int128 **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  std::logic_error *exception;

  *a4 = 0;
  switch(a1)
  {
    case 0:
      v7 = operator new();
      result = turi::neural_net::SingleReLUNetworkGraph::SingleReLUNetworkGraph(v7, a2, a3);
      break;
    case 1:
      v7 = operator new();
      result = turi::neural_net::SingleConvNetworkGraph::SingleConvNetworkGraph(v7, a2, a3);
      break;
    case 2:
      v7 = operator new();
      result = turi::neural_net::SingleBNNetworkGraph::SingleBNNetworkGraph(v7, a2);
      break;
    case 3:
      v7 = operator new();
      result = turi::neural_net::SingleMPNetworkGraph::SingleMPNetworkGraph(v7, a2, a3);
      break;
    case 4:
      v7 = operator new();
      result = turi::neural_net::ODNetworkGraph::ODNetworkGraph(v7, (int **)a2, a3);
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Undefined network.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  *a4 = v7;
  return result;
}

void sub_217E8633C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  __cxa_free_exception(v2);
  *v1 = 0;
  _Unwind_Resume(a1);
}

void turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(turi::neural_net::MPSGraphNetwork *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_24D917D18;
  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }

  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
}

{
  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(this);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::MPSGraphNetwork::Init(uint64_t a1, void *a2, void *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  void (***v23)(_QWORD, id, id, uint64_t, uint64_t);
  void *v24;
  id v25;
  id *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;

  v38 = a2;
  v11 = a3;
  v12 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v12)
  {
    v13 = 0;
    do
    {
      (***(void (****)(_QWORD, id, id, uint64_t, uint64_t))(v12 + 8 * v13))(*(_QWORD *)(v12 + 8 * v13), v38, v11, a5, a6);
      ++v13;
      v12 = *(_QWORD *)(a1 + 8);
    }
    while (v13 < (*(_QWORD *)(a1 + 16) - v12) >> 3);
  }
  v14 = (void *)MEMORY[0x24BDDE4A0];
  +[TCMPSGraphNodeHandle handleWithLabel:](TCMPSGraphNodeHandle, "handleWithLabel:", CFSTR("input"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "nodeWithHandle:", v15);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v16;

  v18 = *(id *)(a1 + 56);
  v19 = v18;
  v20 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) == v20)
  {
    v22 = v18;
  }
  else
  {
    v21 = 0;
    do
    {
      (*(void (**)(_QWORD, void *))(**(_QWORD **)(v20 + 8 * v21) + 8))(*(_QWORD *)(v20 + 8 * v21), v19);
      v22 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) + 16);

      ++v21;
      v20 = *(_QWORD *)(a1 + 8);
      v19 = v22;
    }
    while (v21 < (*(_QWORD *)(a1 + 16) - v20) >> 3);
  }
  if (a4 >= 2)
  {
    v27 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE498]), "initWithDevice:resultImage:resultImageIsNeeded:", v38, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16), 1);
  }
  else
  {
    v23 = *(void (****)(_QWORD, id, id, uint64_t, uint64_t))(a1 + 32);
    if (v23)
    {
      (**v23)(v23, v38, v11, a5, a6);
      +[TCMPSGraphNodeHandle handleWithLabel:](TCMPSGraphNodeHandle, "handleWithLabel:", CFSTR("labels"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "setHandle:", v24);

      (*(void (**)(_QWORD, id))(**(_QWORD **)(a1 + 32) + 8))(*(_QWORD *)(a1 + 32), v22);
      v25 = *(id *)(*(_QWORD *)(a1 + 32) + 16);

      (*(void (**)(_QWORD, id))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v25);
      v26 = (id *)(*(_QWORD *)(a1 + 32) + 24);
    }
    else
    {
      v28 = (void *)MEMORY[0x24BDDE4A0];
      +[TCMPSGraphNodeHandle handleWithLabel:](TCMPSGraphNodeHandle, "handleWithLabel:", CFSTR("grad"));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "nodeWithHandle:", v29);
      v30 = objc_claimAutoreleasedReturnValue();
      v26 = (id *)(a1 + 64);
      v31 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v30;

      v25 = v22;
    }
    v32 = *v26;

    v33 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    if (v33 && (int)(v33 >> 3) >= 1)
    {
      v34 = (v33 >> 3) + 1;
      do
      {
        v35 = (v34 - 2);
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v35);
        (*(void (**)(uint64_t, id))(*(_QWORD *)v36 + 16))(v36, v32);
        v22 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v35) + 24);

        --v34;
        v32 = v22;
      }
      while (v34 > 1);
    }
    else
    {
      v22 = v32;
    }
    v27 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE498]), "initWithDevice:resultImage:resultImageIsNeeded:", v38, *(_QWORD *)(**(_QWORD **)(a1 + 8) + 24), a4 == 1);
  }
  v37 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v27;

}

void sub_217E86778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

id turi::neural_net::MPSGraphNetwork::RunGraph(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  unint64_t v7;
  void *i;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;

  v5 = a2;
  v6 = a3;
  v7 = 0;
  for (i = (void *)MEMORY[0x24BDBD1A8]; ; i = (void *)v16)
  {
    objc_msgSend(*(id *)(a1 + 48), "sourceImageHandles");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "count");

    v11 = *(void **)(a1 + 48);
    if (v7 >= v10)
      break;
    objc_msgSend(v11, "sourceImageHandles");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectAtIndexedSubscript:", v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "label");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKey:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(i, "arrayByAddingObject:", v15);
    v16 = objc_claimAutoreleasedReturnValue();

    ++v7;
  }
  objc_msgSend(v11, "encodeBatchToCommandBuffer:sourceImages:sourceStates:intermediateImages:destinationStates:", v5, i, 0, 0, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_217E868F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id turi::neural_net::MPSGraphNetwork::RunGraph(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(void **)(a1 + 48);
  v16[0] = v8;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v16, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v9;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v15, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "encodeBatchToCommandBuffer:sourceImages:sourceStates:intermediateImages:destinationStates:", v7, v11, v12, 0, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

void sub_217E86A3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void turi::neural_net::MPSGraphNetwork::Export(turi::neural_net::MPSGraphNetwork *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  const void **v6;
  const void **v7;

  a2[2] = 0;
  a2[1] = 0;
  *a2 = (uint64_t)(a2 + 1);
  v3 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) != v3)
  {
    v5 = 0;
    do
    {
      (*(void (**)(const void ***__return_ptr))(**(_QWORD **)(v3 + 8 * v5) + 40))(&v6);
      std::map<std::string,turi::neural_net::shared_float_array>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>>(a2, v6, &v7);
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v6, v7);
      ++v5;
      v3 = *((_QWORD *)this + 1);
    }
    while (v5 < (*((_QWORD *)this + 2) - v3) >> 3);
  }
}

void sub_217E86B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v11, *(_QWORD **)(v11 + 8));
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SingleReLUNetworkGraph::SingleReLUNetworkGraph(uint64_t a1, __int128 **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t v6;
  int v7;
  float array_map_scalar;
  uint64_t v9;
  float *v10;
  _OWORD *v11;
  char *v12;
  __int128 v14;
  void *__p;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  _OWORD *v20;
  void *v21;
  void *v22;
  _DWORD *v23;
  std::string v24;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = (uint64_t **)(a1 + 8);
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24D917D48;
  v14 = **a2;
  v6 = *((_QWORD *)*a2 + 2);
  v7 = *((_DWORD *)*a2 + 6);
  std::string::basic_string[abi:ne180100]<0>(&v24, "single_relu_leak");
  array_map_scalar = turi::neural_net::get_array_map_scalar(a3, (const void **)&v24.__r_.__value_.__l.__data_, 0.0);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)v5, 1uLL);
  v9 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v24, "relu0");
  v10 = (float *)operator new(4uLL);
  v21 = v10;
  *v10 = array_map_scalar;
  v22 = v10 + 1;
  v23 = v10 + 1;
  v11 = operator new(0x10uLL);
  v18 = v11;
  *v11 = v14;
  v19 = v11 + 1;
  v20 = v11 + 1;
  v12 = (char *)operator new(0x10uLL);
  v16 = v12 + 16;
  v17 = v12 + 16;
  *(_DWORD *)v12 = v14;
  *(_QWORD *)(v12 + 4) = v6;
  *((_DWORD *)v12 + 3) = v7;
  __p = v12;
  turi::neural_net::ReLUGraphLayer::ReLUGraphLayer(v9, &v24, (uint64_t)&v21, (uint64_t)&v18, (uint64_t)&__p);
  **v5 = v9;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E86CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  turi::neural_net::MPSGraphNetwork *v18;
  uint64_t v19;
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  MEMORY[0x219A19A08](v19, 0x1093C40F449FE22);
  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(v18);
  _Unwind_Resume(a1);
}

void std::vector<turi::neural_net::GraphLayer *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<turi::neural_net::GraphLayer *>::__append((void **)a1, a2 - v2);
  }
}

void turi::neural_net::SingleReLUNetworkGraph::~SingleReLUNetworkGraph(turi::neural_net::SingleReLUNetworkGraph *this)
{
  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(this);
  JUMPOUT(0x219A19A08);
}

void std::vector<turi::neural_net::GraphLayer *>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t turi::neural_net::ReLUGraphLayer::ReLUGraphLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)a1 = &unk_24D917AE8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::string::operator=((std::string *)(a1 + 40), a2);
  if (a1 + 88 != a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 88), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v9 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  if (a1 + 112 != a4)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 112), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  if (a1 + 136 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 136), *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_217E86FB0(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)v1);
  _Unwind_Resume(a1);
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t turi::neural_net::SingleConvNetworkGraph::SingleConvNetworkGraph(uint64_t a1, __int128 **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t v6;
  int v7;
  float array_map_scalar;
  uint64_t v9;
  _DWORD *v10;
  _OWORD *v11;
  char *v12;
  __int128 v14;
  void *__p;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  _OWORD *v20;
  void *v21;
  void *v22;
  char *v23;
  std::string v24;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = (uint64_t **)(a1 + 8);
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24D917D80;
  v14 = **a2;
  v6 = *((_QWORD *)*a2 + 2);
  v7 = *((_DWORD *)*a2 + 6);
  std::string::basic_string[abi:ne180100]<0>(&v24, "single_conv_kernel_size");
  array_map_scalar = turi::neural_net::get_array_map_scalar(a3, (const void **)&v24.__r_.__value_.__l.__data_, 3.0);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)v5, 1uLL);
  v9 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v24, "conv0");
  v10 = operator new(0x20uLL);
  v22 = v10 + 8;
  v23 = (char *)(v10 + 8);
  *v10 = (int)array_map_scalar;
  v10[1] = (int)array_map_scalar;
  v10[2] = HIDWORD(v14);
  v10[3] = v7;
  *((_OWORD *)v10 + 1) = xmmword_2186C17C0;
  v21 = v10;
  v11 = operator new(0x10uLL);
  v18 = v11;
  *v11 = v14;
  v19 = v11 + 1;
  v20 = v11 + 1;
  v12 = (char *)operator new(0x10uLL);
  v16 = v12 + 16;
  v17 = v12 + 16;
  *(_DWORD *)v12 = v14;
  *(_QWORD *)(v12 + 4) = v6;
  *((_DWORD *)v12 + 3) = v7;
  __p = v12;
  turi::neural_net::ConvGraphLayer::ConvGraphLayer(v9, &v24, (uint64_t)&v21, (uint64_t)&v18, (uint64_t)&__p);
  **v5 = v9;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E87298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  turi::neural_net::MPSGraphNetwork *v18;
  uint64_t v19;
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  MEMORY[0x219A19A08](v19, 0x1093C4026654831);
  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::ConvGraphLayer::ConvGraphLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)a1 = &unk_24D917B60;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 32) = 2;
  std::string::operator=((std::string *)(a1 + 40), a2);
  if (a1 + 64 != a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 64), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v9 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  if (a1 + 112 != a4)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 112), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  if (a1 + 136 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 136), *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_217E8742C(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SingleMPNetworkGraph::SingleMPNetworkGraph(uint64_t a1, __int128 **a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t v7;
  int v8;
  float array_map_scalar;
  float v10;
  uint64_t v11;
  _DWORD *v12;
  _OWORD *v13;
  char *v14;
  __int128 v16;
  void *v17;
  void *v18;
  char *v19;
  void *v20;
  void *v21;
  _OWORD *v22;
  void *v23;
  void *v24;
  _DWORD *v25;
  std::string __p;

  *(_OWORD *)(a1 + 8) = 0u;
  v6 = (uint64_t **)(a1 + 8);
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24D917DB8;
  std::vector<turi::neural_net::GraphLayer *>::resize(a1 + 8, 1uLL);
  v16 = **a2;
  v7 = *((_QWORD *)*a2 + 2);
  v8 = *((_DWORD *)*a2 + 6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "single_maxpool_kernel_size");
  array_map_scalar = turi::neural_net::get_array_map_scalar(a3, (const void **)&__p.__r_.__value_.__l.__data_, 2.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "single_maxpool_stride");
  v10 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__p.__r_.__value_.__l.__data_, 2.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "mp0");
  v12 = operator new(0x10uLL);
  v24 = v12 + 4;
  v25 = v12 + 4;
  *v12 = (int)array_map_scalar;
  v12[1] = (int)array_map_scalar;
  v12[2] = (int)v10;
  v12[3] = (int)v10;
  v23 = v12;
  v13 = operator new(0x10uLL);
  v20 = v13;
  *v13 = v16;
  v21 = v13 + 1;
  v22 = v13 + 1;
  v14 = (char *)operator new(0x10uLL);
  v18 = v14 + 16;
  v19 = v14 + 16;
  *(_DWORD *)v14 = v16;
  *(_QWORD *)(v14 + 4) = v7;
  *((_DWORD *)v14 + 3) = v8;
  v17 = v14;
  turi::neural_net::MaxPoolGraphLayer::MaxPoolGraphLayer(v11, &__p, (uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17);
  **v6 = v11;
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E87648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  turi::neural_net::MPSGraphNetwork *v25;
  uint64_t v26;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (a25 < 0)
    operator delete(a20);
  MEMORY[0x219A19A08](v26, 0x1093C40F449FE22);
  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(v25);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::MaxPoolGraphLayer::MaxPoolGraphLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)a1 = &unk_24D917C30;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 32) = 4;
  std::string::operator=((std::string *)(a1 + 40), a2);
  if (a1 + 64 != a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 64), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v9 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  if (a1 + 112 != a4)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 112), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  if (a1 + 136 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 136), *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_217E877E0(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SingleBNNetworkGraph::SingleBNNetworkGraph(uint64_t a1, __int128 **a2)
{
  uint64_t **v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  _OWORD *v8;
  char *v9;
  __int128 v11;
  void *__p;
  void *v13;
  char *v14;
  void *v15;
  void *v16;
  _OWORD *v17;
  void *v18;
  void *v19;
  _DWORD *v20;
  std::string v21;

  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (uint64_t **)(a1 + 8);
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24D917DF0;
  v11 = **a2;
  v4 = *((_QWORD *)*a2 + 2);
  v5 = *((_DWORD *)*a2 + 6);
  std::vector<turi::neural_net::GraphLayer *>::resize(a1 + 8, 1uLL);
  v6 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v21, "bn0");
  v7 = operator new(4uLL);
  v18 = v7;
  *v7 = HIDWORD(v11);
  v19 = v7 + 1;
  v20 = v7 + 1;
  v8 = operator new(0x10uLL);
  v15 = v8;
  *v8 = v11;
  v16 = v8 + 1;
  v17 = v8 + 1;
  v9 = (char *)operator new(0x10uLL);
  v13 = v9 + 16;
  v14 = v9 + 16;
  *(_DWORD *)v9 = v11;
  *(_QWORD *)(v9 + 4) = v4;
  *((_DWORD *)v9 + 3) = v5;
  __p = v9;
  turi::neural_net::BNGraphLayer::BNGraphLayer(v6, &v21, (uint64_t)&v18, (uint64_t)&v15, (uint64_t)&__p);
  **v3 = v6;
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E87968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  turi::neural_net::MPSGraphNetwork *v18;
  uint64_t v19;
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  MEMORY[0x219A19A08](v19, 0x1093C4025DAB825);
  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::BNGraphLayer::BNGraphLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)a1 = &unk_24D917BC8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 32) = 3;
  std::string::operator=((std::string *)(a1 + 40), a2);
  if (a1 + 64 != a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 64), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  if (a1 + 112 != a4)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 112), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  if (a1 + 136 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 136), *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_217E87ACC(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::ODNetworkGraph::ODNetworkGraph(uint64_t a1, int **a2, uint64_t a3)
{
  char **v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 array_map_BOOL;
  _DWORD *v10;
  int v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  _DWORD *v48;
  _DWORD *v49;
  unint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 v64;
  unint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  _OWORD *v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _DWORD *v95;
  unint64_t v96;
  uint64_t *v97;
  _QWORD *v98;
  _BOOL4 v99;
  int v100;
  uint64_t v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  unint64_t v105;
  uint64_t *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  void *v123;
  uint64_t *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  uint64_t v131;
  int v133;
  _BOOL4 v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  void *v139[2];
  _OWORD v140[2];
  uint64_t v141;
  void *v142;
  void *v143;
  _DWORD *v144;
  void *v145;
  void *v146;
  uint64_t v147;
  void *v148[2];
  char v149;
  void *__p;
  void *v151;
  _DWORD *v152;
  void *v153;
  void *v154;
  _DWORD *v155;
  void *v156;
  void *v157;
  _DWORD *v158;
  std::string v159;
  std::string v160;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = (char **)(a1 + 8);
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24D917E28;
  v7 = **a2;
  v6 = (*a2)[1];
  v137 = *((_QWORD *)*a2 + 1);
  v8 = (*a2)[4];
  v135 = (*a2)[5];
  v136 = (*a2)[6];
  std::string::basic_string[abi:ne180100]<0>(&v160, "od_include_network");
  array_map_BOOL = turi::neural_net::get_array_map_BOOL(a3, (const void **)&v160.__r_.__value_.__l.__data_, 1);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v160, "od_include_loss");
  v134 = turi::neural_net::get_array_map_BOOL(a3, (const void **)&v160.__r_.__value_.__l.__data_, 1);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v160.__r_.__value_.__l.__data_);
    if (array_map_BOOL)
    {
LABEL_5:
      v133 = v8;
      v10 = operator new(0x24uLL);
      v10[8] = 1024;
      *(_OWORD *)v10 = xmmword_2186C1720;
      *((_OWORD *)v10 + 1) = unk_2186C1730;
      v138 = a1 + 24;
      v11 = v137;
      for (i = 1; i != 9; ++i)
      {
        std::to_string(&v160, i - 1);
        v13 = operator new();
        std::operator+<char>();
        v14 = *(_QWORD *)&v10[i - 1];
        v15 = operator new(0x20uLL);
        v157 = v15 + 4;
        v158 = v15 + 4;
        *v15 = 0x300000003;
        v15[1] = v14;
        *((_OWORD *)v15 + 1) = xmmword_2186C17C0;
        v155 = 0;
        v156 = v15;
        v153 = 0;
        v154 = 0;
        __p = 0;
        v151 = 0;
        v152 = 0;
        turi::neural_net::ConvGraphLayer::ConvGraphLayer(v13, &v159, (uint64_t)&v156, (uint64_t)&v153, (uint64_t)&__p);
        v17 = *(uint64_t **)(a1 + 16);
        v16 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v17 >= v16)
        {
          v19 = ((char *)v17 - *v5) >> 3;
          if ((unint64_t)(v19 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v20 = v16 - (_QWORD)*v5;
          v21 = v20 >> 2;
          if (v20 >> 2 <= (unint64_t)(v19 + 1))
            v21 = v19 + 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v138, v22);
          else
            v23 = 0;
          v24 = (uint64_t *)&v23[8 * v19];
          *v24 = v13;
          v18 = v24 + 1;
          v26 = *(char **)(a1 + 8);
          v25 = *(char **)(a1 + 16);
          if (v25 != v26)
          {
            do
            {
              v27 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *--v24 = v27;
            }
            while (v25 != v26);
            v25 = *v5;
          }
          *(_QWORD *)(a1 + 8) = v24;
          *(_QWORD *)(a1 + 16) = v18;
          *(_QWORD *)(a1 + 24) = &v23[8 * v22];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v17 = v13;
          v18 = v17 + 1;
        }
        *(_QWORD *)(a1 + 16) = v18;
        if (__p)
        {
          v151 = __p;
          operator delete(__p);
        }
        if (v153)
        {
          v154 = v153;
          operator delete(v153);
        }
        if (v156)
        {
          v157 = v156;
          operator delete(v156);
        }
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v159.__r_.__value_.__l.__data_);
        v28 = operator new();
        std::operator+<char>();
        v29 = v10[i];
        v30 = operator new(4uLL);
        v156 = v30;
        *v30 = v29;
        v157 = v30 + 1;
        v158 = v30 + 1;
        v31 = operator new(0x10uLL);
        v154 = v31 + 4;
        v155 = v31 + 4;
        *v31 = v7;
        v31[1] = v6;
        v31[2] = v11;
        v31[3] = v29;
        v153 = v31;
        v32 = operator new(0x10uLL);
        v151 = v32 + 4;
        v152 = v32 + 4;
        *v32 = v7;
        v32[1] = v6;
        v32[2] = v11;
        v32[3] = v29;
        __p = v32;
        turi::neural_net::BNGraphLayer::BNGraphLayer(v28, &v159, (uint64_t)&v156, (uint64_t)&v153, (uint64_t)&__p);
        v34 = *(uint64_t **)(a1 + 16);
        v33 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v34 >= v33)
        {
          v36 = ((char *)v34 - *v5) >> 3;
          if ((unint64_t)(v36 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v37 = v33 - (_QWORD)*v5;
          v38 = v37 >> 2;
          if (v37 >> 2 <= (unint64_t)(v36 + 1))
            v38 = v36 + 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v39 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v39 = v38;
          if (v39)
            v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v138, v39);
          else
            v40 = 0;
          v41 = (uint64_t *)&v40[8 * v36];
          *v41 = v28;
          v35 = v41 + 1;
          v43 = *(char **)(a1 + 8);
          v42 = *(char **)(a1 + 16);
          if (v42 != v43)
          {
            do
            {
              v44 = *((_QWORD *)v42 - 1);
              v42 -= 8;
              *--v41 = v44;
            }
            while (v42 != v43);
            v42 = *v5;
          }
          *(_QWORD *)(a1 + 8) = v41;
          *(_QWORD *)(a1 + 16) = v35;
          *(_QWORD *)(a1 + 24) = &v40[8 * v39];
          if (v42)
            operator delete(v42);
        }
        else
        {
          *v34 = v28;
          v35 = v34 + 1;
        }
        *(_QWORD *)(a1 + 16) = v35;
        if (__p)
        {
          v151 = __p;
          operator delete(__p);
        }
        if (v153)
        {
          v154 = v153;
          operator delete(v153);
        }
        if (v156)
        {
          v157 = v156;
          operator delete(v156);
        }
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v159.__r_.__value_.__l.__data_);
        v45 = operator new();
        std::operator+<char>();
        v46 = operator new(4uLL);
        v156 = v46;
        *v46 = 1036831949;
        v157 = v46 + 1;
        v158 = v46 + 1;
        v47 = v10[i];
        v48 = operator new(0x10uLL);
        v154 = v48 + 4;
        v155 = v48 + 4;
        *v48 = v7;
        v48[1] = v6;
        v48[2] = v11;
        v48[3] = v47;
        v153 = v48;
        v49 = operator new(0x10uLL);
        v151 = v49 + 4;
        v152 = v49 + 4;
        *v49 = v7;
        v49[1] = v6;
        v49[2] = v11;
        v49[3] = v47;
        __p = v49;
        turi::neural_net::ReLUGraphLayer::ReLUGraphLayer(v45, &v159, (uint64_t)&v156, (uint64_t)&v153, (uint64_t)&__p);
        v51 = *(uint64_t **)(a1 + 16);
        v50 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v51 >= v50)
        {
          v53 = ((char *)v51 - *v5) >> 3;
          if ((unint64_t)(v53 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v54 = v50 - (_QWORD)*v5;
          v55 = v54 >> 2;
          if (v54 >> 2 <= (unint64_t)(v53 + 1))
            v55 = v53 + 1;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
            v56 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v56 = v55;
          if (v56)
            v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v138, v56);
          else
            v57 = 0;
          v58 = (uint64_t *)&v57[8 * v53];
          *v58 = v45;
          v52 = v58 + 1;
          v60 = *(char **)(a1 + 8);
          v59 = *(char **)(a1 + 16);
          if (v59 != v60)
          {
            do
            {
              v61 = *((_QWORD *)v59 - 1);
              v59 -= 8;
              *--v58 = v61;
            }
            while (v59 != v60);
            v59 = *v5;
          }
          *(_QWORD *)(a1 + 8) = v58;
          *(_QWORD *)(a1 + 16) = v52;
          *(_QWORD *)(a1 + 24) = &v57[8 * v56];
          if (v59)
            operator delete(v59);
        }
        else
        {
          *v51 = v45;
          v52 = v51 + 1;
        }
        *(_QWORD *)(a1 + 16) = v52;
        if (__p)
        {
          v151 = __p;
          operator delete(__p);
        }
        if (v153)
        {
          v154 = v153;
          operator delete(v153);
        }
        if (v156)
        {
          v157 = v156;
          operator delete(v156);
        }
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v159.__r_.__value_.__l.__data_);
        if (i > 5)
        {
          if (i == 6)
          {
            v68 = operator new();
            std::operator+<char>();
            v69 = operator new(0x10uLL);
            v155 = 0;
            v156 = v69;
            *v69 = xmmword_2186C17D0;
            v157 = v69 + 1;
            v158 = v69 + 1;
            v153 = 0;
            v154 = 0;
            __p = 0;
            v151 = 0;
            v152 = 0;
            turi::neural_net::MaxPoolGraphLayer::MaxPoolGraphLayer(v68, &v159, (uint64_t)&v156, (uint64_t)&v153, (uint64_t)&__p);
            v71 = *(uint64_t **)(a1 + 16);
            v70 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v71 >= v70)
            {
              v78 = ((char *)v71 - *v5) >> 3;
              if ((unint64_t)(v78 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v79 = v70 - (_QWORD)*v5;
              v80 = v79 >> 2;
              if (v79 >> 2 <= (unint64_t)(v78 + 1))
                v80 = v78 + 1;
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
                v81 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v81 = v80;
              if (v81)
                v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v138, v81);
              else
                v82 = 0;
              v89 = (uint64_t *)&v82[8 * v78];
              *v89 = v68;
              v72 = v89 + 1;
              v91 = *(char **)(a1 + 8);
              v90 = *(char **)(a1 + 16);
              if (v90 != v91)
              {
                do
                {
                  v92 = *((_QWORD *)v90 - 1);
                  v90 -= 8;
                  *--v89 = v92;
                }
                while (v90 != v91);
                v90 = *v5;
              }
              *(_QWORD *)(a1 + 8) = v89;
              *(_QWORD *)(a1 + 16) = v72;
              *(_QWORD *)(a1 + 24) = &v82[8 * v81];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *v71 = v68;
              v72 = v71 + 1;
            }
            *(_QWORD *)(a1 + 16) = v72;
            if (__p)
            {
              v151 = __p;
              operator delete(__p);
            }
            if (v153)
            {
              v154 = v153;
              operator delete(v153);
            }
            if (v156)
            {
              v157 = v156;
              operator delete(v156);
            }
            if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v159.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          v62 = operator new();
          std::operator+<char>();
          v63 = operator new(0x10uLL);
          v155 = 0;
          v156 = v63;
          *(_QWORD *)&v64 = 0x200000002;
          *((_QWORD *)&v64 + 1) = 0x200000002;
          *v63 = v64;
          v157 = v63 + 1;
          v158 = v63 + 1;
          v153 = 0;
          v154 = 0;
          __p = 0;
          v151 = 0;
          v152 = 0;
          turi::neural_net::MaxPoolGraphLayer::MaxPoolGraphLayer(v62, &v159, (uint64_t)&v156, (uint64_t)&v153, (uint64_t)&__p);
          v66 = *(uint64_t **)(a1 + 16);
          v65 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v66 >= v65)
          {
            v73 = ((char *)v66 - *v5) >> 3;
            if ((unint64_t)(v73 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v74 = v65 - (_QWORD)*v5;
            v75 = v74 >> 2;
            if (v74 >> 2 <= (unint64_t)(v73 + 1))
              v75 = v73 + 1;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
              v76 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v76 = v75;
            if (v76)
              v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v138, v76);
            else
              v77 = 0;
            v83 = (uint64_t *)&v77[8 * v73];
            *v83 = v62;
            v67 = v83 + 1;
            v85 = *(char **)(a1 + 8);
            v84 = *(char **)(a1 + 16);
            if (v84 != v85)
            {
              do
              {
                v86 = *((_QWORD *)v84 - 1);
                v84 -= 8;
                *--v83 = v86;
              }
              while (v84 != v85);
              v84 = *v5;
            }
            *(_QWORD *)(a1 + 8) = v83;
            *(_QWORD *)(a1 + 16) = v67;
            *(_QWORD *)(a1 + 24) = &v77[8 * v76];
            if (v84)
              operator delete(v84);
          }
          else
          {
            *v66 = v62;
            v67 = v66 + 1;
          }
          *(_QWORD *)(a1 + 16) = v67;
          if (__p)
          {
            v151 = __p;
            operator delete(__p);
          }
          if (v153)
          {
            v154 = v153;
            operator delete(v153);
          }
          if (v156)
          {
            v157 = v156;
            operator delete(v156);
          }
          if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v159.__r_.__value_.__l.__data_);
          if (v6 >= 0)
            v87 = v6;
          else
            v87 = v6 + 1;
          v6 = v87 >> 1;
          if (v11 >= 0)
            v88 = v11;
          else
            v88 = v11 + 1;
          v11 = v88 >> 1;
        }
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v160.__r_.__value_.__l.__data_);
      }
      v93 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&v160, "conv8");
      v8 = v133;
      v94 = v10[8];
      v95 = operator new(0x20uLL);
      v159.__r_.__value_.__l.__size_ = (std::string::size_type)(v95 + 8);
      v159.__r_.__value_.__r.__words[2] = (std::string::size_type)(v95 + 8);
      *(_QWORD *)v95 = 0x100000001;
      v95[2] = v94;
      v95[3] = v136;
      *((_OWORD *)v95 + 1) = xmmword_2186C17E0;
      v158 = 0;
      v159.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
      v156 = 0;
      v157 = 0;
      v153 = 0;
      v154 = 0;
      v155 = 0;
      turi::neural_net::ConvGraphLayer::ConvGraphLayer(v93, &v160, (uint64_t)&v159, (uint64_t)&v156, (uint64_t)&v153);
      v97 = *(uint64_t **)(a1 + 16);
      v96 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v97 >= v96)
      {
        v113 = ((char *)v97 - *v5) >> 3;
        if ((unint64_t)(v113 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v114 = v96 - (_QWORD)*v5;
        v115 = v114 >> 2;
        if (v114 >> 2 <= (unint64_t)(v113 + 1))
          v115 = v113 + 1;
        if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
          v116 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v116 = v115;
        if (v116)
          v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v138, v116);
        else
          v117 = 0;
        v124 = (uint64_t *)&v117[8 * v113];
        v125 = &v117[8 * v116];
        *v124 = v93;
        v98 = v124 + 1;
        v127 = *(char **)(a1 + 8);
        v126 = *(char **)(a1 + 16);
        if (v126 == v127)
        {
          v100 = v135;
        }
        else
        {
          v100 = v135;
          do
          {
            v128 = *((_QWORD *)v126 - 1);
            v126 -= 8;
            *--v124 = v128;
          }
          while (v126 != v127);
          v126 = *v5;
        }
        *(_QWORD *)(a1 + 8) = v124;
        *(_QWORD *)(a1 + 16) = v98;
        *(_QWORD *)(a1 + 24) = v125;
        v99 = v134;
        if (v126)
          operator delete(v126);
      }
      else
      {
        *v97 = v93;
        v98 = v97 + 1;
        v99 = v134;
        v100 = v135;
      }
      *(_QWORD *)(a1 + 16) = v98;
      if (v153)
      {
        v154 = v153;
        operator delete(v153);
      }
      if (v156)
      {
        v157 = v156;
        operator delete(v156);
      }
      if (v159.__r_.__value_.__r.__words[0])
      {
        v159.__r_.__value_.__l.__size_ = v159.__r_.__value_.__r.__words[0];
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v160.__r_.__value_.__l.__data_);
      v123 = v10;
LABEL_192:
      operator delete(v123);
      if (!v99)
        return a1;
      goto LABEL_193;
    }
  }
  else if (array_map_BOOL)
  {
    goto LABEL_5;
  }
  v101 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v160, "nop");
  v102 = operator new(4uLL);
  v159.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
  *v102 = 1065353216;
  v159.__r_.__value_.__l.__size_ = (std::string::size_type)(v102 + 1);
  v159.__r_.__value_.__r.__words[2] = (std::string::size_type)(v102 + 1);
  v103 = operator new(0x10uLL);
  v157 = v103 + 4;
  v158 = v103 + 4;
  *v103 = v7;
  v103[1] = v6;
  *((_QWORD *)v103 + 1) = v137;
  v156 = v103;
  v104 = operator new(0x10uLL);
  v154 = v104 + 4;
  v155 = v104 + 4;
  *v104 = v7;
  v104[1] = v8;
  v100 = v135;
  v104[2] = v135;
  v104[3] = v136;
  v153 = v104;
  turi::neural_net::ReLUGraphLayer::ReLUGraphLayer(v101, &v160, (uint64_t)&v159, (uint64_t)&v156, (uint64_t)&v153);
  v105 = *(_QWORD *)(a1 + 24);
  v106 = *(uint64_t **)(a1 + 16);
  if ((unint64_t)v106 >= v105)
  {
    v108 = ((char *)v106 - *v5) >> 3;
    if ((unint64_t)(v108 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v109 = v105 - (_QWORD)*v5;
    v110 = v109 >> 2;
    if (v109 >> 2 <= (unint64_t)(v108 + 1))
      v110 = v108 + 1;
    if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
      v111 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v111 = v110;
    if (v111)
      v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 24, v111);
    else
      v112 = 0;
    v118 = (uint64_t *)&v112[8 * v108];
    v119 = &v112[8 * v111];
    *v118 = v101;
    v107 = v118 + 1;
    v121 = *(char **)(a1 + 8);
    v120 = *(char **)(a1 + 16);
    if (v120 != v121)
    {
      do
      {
        v122 = *((_QWORD *)v120 - 1);
        v120 -= 8;
        *--v118 = v122;
      }
      while (v120 != v121);
      v120 = *v5;
    }
    *(_QWORD *)(a1 + 8) = v118;
    *(_QWORD *)(a1 + 16) = v107;
    *(_QWORD *)(a1 + 24) = v119;
    v99 = v134;
    if (v120)
      operator delete(v120);
  }
  else
  {
    *v106 = v101;
    v107 = v106 + 1;
    v99 = v134;
  }
  *(_QWORD *)(a1 + 16) = v107;
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  if (v159.__r_.__value_.__r.__words[0])
  {
    v159.__r_.__value_.__l.__size_ = v159.__r_.__value_.__r.__words[0];
    operator delete(v159.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
  {
    v123 = (void *)v160.__r_.__value_.__r.__words[0];
    goto LABEL_192;
  }
  if (!v99)
    return a1;
LABEL_193:
  v129 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v148, "yololoss");
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v130 = operator new(0x10uLL);
  v143 = v130 + 4;
  v144 = v130 + 4;
  *v130 = v7;
  v130[1] = v8;
  v130[2] = v100;
  v130[3] = v136;
  v141 = 0;
  v142 = v130;
  *(_OWORD *)v139 = 0u;
  memset(v140, 0, sizeof(v140));
  turi::neural_net::YoloLossGraphLayer::GetDefaultAnchorBoxes(v139);
  *(_OWORD *)((char *)v140 + 8) = xmmword_2186C1630;
  *((_QWORD *)&v140[1] + 1) = 0x3F33333340000000;
  LODWORD(v141) = 1050253722;
  BYTE4(v141) = 1;
  turi::neural_net::YoloLossGraphLayer::YoloLossGraphLayer(v129, v148, &v145, &v142, v139);
  v131 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v129;
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 56))(v131);
  if (v139[0])
  {
    v139[1] = v139[0];
    operator delete(v139[0]);
  }
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (v145)
  {
    v146 = v145;
    operator delete(v145);
  }
  if (v149 < 0)
    operator delete(v148[0]);
  return a1;
}

void sub_217E88888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37)
{
  turi::neural_net::MPSGraphNetwork *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;

  if (*(char *)(v40 - 105) < 0)
    operator delete(*(void **)(v40 - 128));
  MEMORY[0x219A19A08](v39, 0x1093C4026654831);
  operator delete(v38);
  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(v37);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mps_graph_networks_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 16);
  turi::neural_net::SAME = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 0);
  turi::neural_net::VALID = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

void _GLOBAL__sub_I_mps_graph_trainer_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 16);
  turi::neural_net::SAME = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 0);
  turi::neural_net::VALID = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

void sub_217E890C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_217E892FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  _Unwind_Resume(a1);
}

void sub_217E8949C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mps_layer_helper_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void sub_217E89D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_217E89EE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_217E89F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217E8A03C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217E8A0E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_217E8A168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217E8A234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217E8A5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_217E8A7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_217E8A874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mps_layer_instance_norm_data_loader_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void sub_217E8AA60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_217E8AB60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217E8ACF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void turi::neural_net::ReLULayer::Forward(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v6 = a2;
  v7 = a3;
  v8 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  objc_storeStrong((id *)(a1 + 8), a2);
  v9 = *(void **)(a1 + 168);
  v14 = 0;
  objc_msgSend(v9, "encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationStateIsTemporary:", v7, v6, &v14, 0);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v14;
  v12 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;

  v13 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;

}

void sub_217E8AEC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void turi::neural_net::ReLULayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 176), "encodeBatchToCommandBuffer:sourceGradients:sourceImages:gradientStates:", v5, v8, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;

}

void sub_217E8AF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void turi::neural_net::ReLULayer::Init(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int v11;
  double v12;
  void *v13;
  id v14;
  double v15;
  uint64_t v16;
  void *v17;
  TCMPSImageAllocator *v18;
  uint64_t v19;
  void *v20;
  TCMPSImageAllocator *v21;
  id v22;

  v22 = a2;
  v11 = **(_DWORD **)(a1 + 96);
  LODWORD(v12) = v11;
  objc_msgSend(MEMORY[0x24BDDE4B8], "cnnNeuronDescriptorWithType:a:", 1, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_alloc(MEMORY[0x24BDDE2D0]);
  LODWORD(v15) = v11;
  v16 = objc_msgSend(v14, "initWithDevice:a:", v22, v15);
  v17 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v16;

  if (a6 == 2 || a7)
  {
    v18 = -[TCMPSImageAllocator initWithFormat:]([TCMPSImageAllocator alloc], "initWithFormat:", 4);
    objc_msgSend(*(id *)(a1 + 168), "setDestinationImageAllocator:", v18);

    if (!a5)
      goto LABEL_8;
  }
  else if (!a5)
  {
    goto LABEL_8;
  }
  v19 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE2C8]), "initWithDevice:neuronDescriptor:", v22, v13);
  v20 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v19;

  if (a6 == 2)
  {
    v21 = -[TCMPSImageAllocator initWithFormat:]([TCMPSImageAllocator alloc], "initWithFormat:", 4);
    objc_msgSend(*(id *)(a1 + 176), "setDestinationImageAllocator:", v21);

  }
LABEL_8:

}

void sub_217E8B088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void turi::neural_net::ConvLayer::Forward(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v6 = a2;
  v7 = a3;
  v8 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  objc_storeStrong((id *)(a1 + 8), a2);
  v9 = *(void **)(a1 + 176);
  v14 = 0;
  objc_msgSend(v9, "encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationStateIsTemporary:", v7, v6, &v14, 0);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v14;
  v12 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;

  v13 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;

}

void sub_217E8B174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void turi::neural_net::ConvLayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 184), "encodeBatchToCommandBuffer:sourceGradients:sourceImages:gradientStates:", v5, v8, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;

}

void sub_217E8B1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void turi::neural_net::ConvLayer::Init(uint64_t a1, void *a2, void *a3, uint64_t a4, int a5, int a6, int a7)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  TCMPSConvolutionWeights *v16;
  void *v17;
  id v18;
  _QWORD *v19;
  double v20;
  double v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  TCMPSImageAllocator *v27;
  uint64_t v28;
  void *v29;
  TCMPSImageAllocator *v30;
  void *v31;
  uint64_t v34;
  int v36;
  id v37;
  id v38;
  _BYTE v39[32];

  v38 = a2;
  v37 = a3;
  v10 = *(int **)(a1 + 72);
  v11 = v10[1];
  v34 = *v10;
  v13 = v10[2];
  v12 = v10[3];
  v15 = v10[4];
  v14 = v10[5];
  v36 = v10[6];
  *(_BYTE *)(a1 + 168) = v10[7] > 0;
  v16 = [TCMPSConvolutionWeights alloc];
  v17 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v16;

  v18 = *(id *)(a1 + 200);
  v19 = (_QWORD *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v19 = (_QWORD *)*v19;
  turi::neural_net::get_array_map_optimizer_options(a4, (uint64_t)v39);
  LODWORD(v20) = 0;
  LODWORD(v21) = 0;
  v22 = objc_msgSend(v18, "initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:neuronType:strideX:strideY:neuronA:neuronB:kernelParamsBinaryName:device:cmd_queue:init_weight_ptr:init_bias_ptr:optimizerOptions:", v11, v34, v13, v12, 0, v15, v20, v21, v14, v19, v38, v37, 0, 0, v39);
  v23 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v22;

  v24 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE258]), "initWithDevice:weights:", v38, *(_QWORD *)(a1 + 200));
  v25 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v24;

  turi::neural_net::Layer::SetPaddingType(a1, v36);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 176), "setPadding:", v26);

  if (a6 == 2 || a7)
  {
    v27 = -[TCMPSImageAllocator initWithFormat:]([TCMPSImageAllocator alloc], "initWithFormat:", 4);
    objc_msgSend(*(id *)(a1 + 176), "setDestinationImageAllocator:", v27);

  }
  if (a5)
  {
    v28 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE268]), "initWithDevice:weights:", v38, *(_QWORD *)(a1 + 200));
    v29 = *(void **)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v28;

    if (a6 == 2)
    {
      v30 = -[TCMPSImageAllocator initWithFormat:]([TCMPSImageAllocator alloc], "initWithFormat:", 4);
      objc_msgSend(*(id *)(a1 + 184), "setDestinationImageAllocator:", v30);

    }
    turi::neural_net::Layer::SetPaddingType(a1, v36);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 184), "setPadding:", v31);

  }
}

void sub_217E8B43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

id turi::neural_net::Layer::SetPaddingType(uint64_t a1, int a2)
{
  uint64_t *v2;
  std::logic_error *exception;

  if (a2)
  {
    if (a2 != 1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Undefined padding type");
      __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    v2 = &turi::neural_net::VALID;
  }
  else
  {
    v2 = &turi::neural_net::SAME;
  }
  return (id)*v2;
}

void sub_217E8B4DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::ConvLayer::Load(uint64_t a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void **v6;
  const void *v7;
  size_t v8;
  void **v9;
  const void *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *__p;
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;

  v4 = (const void *)(a1 + 48);
  if (*(char *)(a1 + 71) >= 0)
    v5 = *(unsigned __int8 *)(a1 + 71);
  else
    v5 = *(_QWORD *)(a1 + 56);
  v6 = v20;
  std::string::basic_string[abi:ne180100]((uint64_t)v20, v5 + 7);
  if (v21 < 0)
    v6 = (void **)v20[0];
  if (v5)
  {
    if (*(char *)(a1 + 71) >= 0)
      v7 = v4;
    else
      v7 = *(const void **)(a1 + 48);
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "_weight");
  if (*(char *)(a1 + 71) >= 0)
    v8 = *(unsigned __int8 *)(a1 + 71);
  else
    v8 = *(_QWORD *)(a1 + 56);
  v9 = v18;
  std::string::basic_string[abi:ne180100]((uint64_t)v18, v8 + 5);
  if (v19 < 0)
    v9 = (void **)v18[0];
  if (v8)
  {
    if (*(char *)(a1 + 71) >= 0)
      v10 = v4;
    else
      v10 = *(const void **)(a1 + 48);
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "_bias");
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)v20))
  {
    std::operator+<char>();
    if (v17 < 0)
      operator delete(__p);
    v11 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    v12 = (char *)operator new[]();
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    turi::neural_net::convert_chw_to_hwc(v11, v12);
    objc_msgSend(*(id *)(a1 + 200), "loadWeight:", v12);
    MEMORY[0x219A199F0](v12, 0x1000C8052888210);
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)v18))
  {
    std::operator+<char>();
    if (v17 < 0)
      operator delete(__p);
    v13 = *(void **)(a1 + 200);
    v14 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)v18);
    objc_msgSend(v13, "loadBias:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14));
  }
  objc_msgSend(*(id *)(a1 + 176), "reloadWeightsAndBiasesFromDataSource");
  v15 = *(void **)(a1 + 184);
  if (v15)
    objc_msgSend(v15, "reloadWeightsAndBiasesFromDataSource");
  if (v19 < 0)
    operator delete(v18[0]);
  if (v21 < 0)
    operator delete(v20[0]);
}

void sub_217E8B760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void turi::neural_net::ConvLayer::Export(turi::neural_net::ConvLayer *this@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  const void **v10;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  size_t v18;
  void **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  void *v32[2];
  char v33;
  void *__p;
  void *v35;
  _QWORD *v36;
  void *v37[2];
  uint64_t v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  const void *v45[2];
  char v46;
  void **v47;
  unint64_t v48[7];

  v48[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v4 = (int *)*((_QWORD *)this + 9);
  v5 = *v4;
  v6 = v4[1];
  v7 = v4[2];
  v8 = v4[3];
  if (objc_msgSend(*((id *)this + 25), "load"))
  {
    if (*((char *)this + 71) >= 0)
      v9 = *((unsigned __int8 *)this + 71);
    else
      v9 = *((_QWORD *)this + 7);
    v10 = v45;
    std::string::basic_string[abi:ne180100]((uint64_t)v45, v9 + 7);
    if (v46 < 0)
      v10 = (const void **)v45[0];
    if (v9)
    {
      if (*((char *)this + 71) >= 0)
        v11 = (char *)this + 48;
      else
        v11 = (char *)*((_QWORD *)this + 6);
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, "_weight");
    std::vector<float>::vector(&v43, (int)v6 * (uint64_t)(int)v5 * v7 * v8);
    v48[0] = v8;
    v48[1] = v5;
    v48[2] = v6;
    v48[3] = v7;
    turi::neural_net::external_float_array::external_float_array((turi::neural_net::external_float_array *)&v39, (const float *)objc_msgSend(*((id *)this + 25), "weights"), (int)v6 * (uint64_t)(int)v5 * v7 * v8, v48, 4uLL);
    turi::neural_net::convert_hwc_to_chw((uint64_t *)&v39, v43);
    *(_OWORD *)v37 = v43;
    v38 = v44;
    v43 = 0uLL;
    v44 = 0;
    v12 = operator new(0x20uLL);
    v35 = v12 + 4;
    v36 = v12 + 4;
    *v12 = v8;
    v12[1] = v7;
    v12[2] = v5;
    v12[3] = v6;
    __p = v12;
    turi::neural_net::shared_float_array::wrap((uint64_t)v37, (uint64_t)&__p, (uint64_t)&v39);
    v32[0] = v45;
    v13 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v45, (uint64_t)&std::piecewise_construct, (__int128 **)v32);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v13 + 8), &v40);
    v14 = v42;
    *((_OWORD *)v13 + 5) = v41;
    *((_OWORD *)v13 + 6) = v14;
    v39 = &unk_24D9175B8;
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
    if (v37[0])
    {
      v37[1] = v37[0];
      operator delete(v37[0]);
    }
    if (*((char *)this + 71) >= 0)
      v18 = *((unsigned __int8 *)this + 71);
    else
      v18 = *((_QWORD *)this + 7);
    v19 = v32;
    std::string::basic_string[abi:ne180100]((uint64_t)v32, v18 + 5);
    if (v33 < 0)
      v19 = (void **)v32[0];
    if (v18)
    {
      if (*((char *)this + 71) >= 0)
        v20 = (char *)this + 48;
      else
        v20 = (char *)*((_QWORD *)this + 6);
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "_bias");
    v21 = objc_msgSend(*((id *)this + 25), "biasSize");
    v22 = objc_msgSend(*((id *)this + 25), "biasTerms");
    v23 = operator new(8uLL);
    v29 = v23;
    *v23 = v21;
    v30 = v23 + 1;
    v31 = v23 + 1;
    turi::neural_net::shared_float_array::copy(v22, (uint64_t)&v29, (uint64_t)&v39);
    v47 = v32;
    v24 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v32, (uint64_t)&std::piecewise_construct, (__int128 **)&v47);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v24 + 8), &v40);
    v25 = v42;
    *((_OWORD *)v24 + 5) = v41;
    *((_OWORD *)v24 + 6) = v25;
    v39 = &unk_24D9175B8;
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
    if (v33 < 0)
      operator delete(v32[0]);
    if ((_QWORD)v43)
    {
      *((_QWORD *)&v43 + 1) = v43;
      operator delete((void *)v43);
    }
    if (v46 < 0)
      operator delete((void *)v45[0]);
  }
}

void sub_217E8BBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (__p)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  if (*(char *)(v34 - 153) < 0)
    operator delete(*(void **)(v34 - 176));
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v33, *(_QWORD **)(v33 + 8));
  _Unwind_Resume(a1);
}

void turi::neural_net::ConvLayer::GpuUpdate(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (id)objc_msgSend(*(id *)(a1 + 200), "updateWithCommandBuffer:gradientState:", v9, v3);
  v5 = *(void **)(a1 + 176);
  objc_msgSend(*(id *)(a1 + 200), "state");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "reloadWeightsAndBiasesWithCommandBuffer:state:", v9, v6);

  v7 = *(void **)(a1 + 184);
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 200), "state");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "reloadWeightsAndBiasesWithCommandBuffer:state:", v9, v8);

  }
}

void sub_217E8BD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void turi::neural_net::ConvLayer::Update(id *this, turi::neural_net::MPSUpdater *a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;

  objc_msgSend(this[4], "objectAtIndexedSubscript:", 0);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "gradientForWeights");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v7 = objc_msgSend(v6, "contents");

  objc_msgSend(v11, "gradientForBiases");
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v9 = objc_msgSend(v8, "contents");

  (*(void (**)(turi::neural_net::MPSUpdater *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 8))(a2, objc_msgSend(this[25], "weights"), v7, objc_msgSend(this[25], "weightSize"), a3, 0);
  if (*((_BYTE *)this + 168))
    (*(void (**)(turi::neural_net::MPSUpdater *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, objc_msgSend(this[25], "biasTerms"), v9, objc_msgSend(this[25], "biasSize"), a3, 1);
  objc_msgSend(this[22], "reloadWeightsAndBiasesFromDataSource");
  v10 = this[23];
  if (v10)
    objc_msgSend(v10, "reloadWeightsAndBiasesFromDataSource");

}

void sub_217E8BEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void turi::neural_net::BNLayer::Forward(uint64_t a1, void *a2, void *a3, int a4)
{
  id v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;

  v17 = a2;
  v8 = a3;
  if (*(_BYTE *)(a1 + 170))
  {
    (*(void (**)(uint64_t, id, _QWORD, _QWORD))(*(_QWORD *)a1 + 64))(a1, v8, *(_QWORD *)(a1 + 192), 0);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;

  }
  if (*(_BYTE *)(a1 + 169))
    v11 = a4 == 0;
  else
    v11 = 1;
  if (v11)
  {
    objc_msgSend(*(id *)(a1 + 192), "encodeBatchToCommandBuffer:sourceImages:destinationImages:", v8, v17, *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (!*(_BYTE *)(a1 + 168))
    {
      *(_BYTE *)(a1 + 168) = 1;
      v12 = *(void **)(a1 + 192);
      objc_msgSend(v17, "objectAtIndexedSubscript:", 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 16), "objectAtIndexedSubscript:", 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "resultStateForSourceImage:sourceStates:destinationImage:", v13, 0, v14);
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = *(void **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v15;

    }
    objc_storeStrong((id *)(a1 + 8), a2);
    objc_msgSend(*(id *)(a1 + 184), "encodeBatchToCommandBuffer:sourceImages:batchNormalizationState:", v8, v17, *(_QWORD *)(a1 + 216));
    objc_msgSend(*(id *)(a1 + 192), "encodeBatchToCommandBuffer:sourceImages:batchNormalizationState:destinationImages:", v8, v17, *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 16));
  }

}

void sub_217E8C028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void turi::neural_net::BNLayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (*(_BYTE *)(a1 + 170))
  {
    (*(void (**)(uint64_t, id, _QWORD, uint64_t))(*(_QWORD *)a1 + 64))(a1, v5, *(_QWORD *)(a1 + 200), 1);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v6;

  }
  objc_msgSend(*(id *)(a1 + 208), "encodeBatchToCommandBuffer:sourceGradients:sourceImages:batchNormalizationState:", v5, v8, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 216));
  objc_msgSend(*(id *)(a1 + 200), "encodeBatchToCommandBuffer:sourceGradients:sourceImages:batchNormalizationState:destinationGradients:", v5, v8, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 24));
  objc_msgSend(*(id *)(a1 + 216), "synchronizeOnCommandBuffer:", v5);

}

void sub_217E8C108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void turi::neural_net::BNLayer::Init(uint64_t a1, void *a2, void *a3, uint64_t a4, int a5, int a6, int a7)
{
  id v13;
  uint64_t v14;
  float array_map_scalar;
  TCMPSBatchNormWeights *v16;
  void *v17;
  id v18;
  _QWORD *v19;
  double v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  double v25;
  TCMPSImageAllocator *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  TCMPSImageAllocator *v33;
  id v34;
  _BYTE v35[32];
  void *__p[2];
  char v37;

  v13 = a2;
  v34 = a3;
  v14 = *(int *)(*(_QWORD *)(a1 + 120) + 12);
  *(_BYTE *)(a1 + 169) = a5;
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_norm_epsilon");
  array_map_scalar = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, 0.001);
  if (v37 < 0)
    operator delete(__p[0]);
  v16 = [TCMPSBatchNormWeights alloc];
  v17 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v16;

  v18 = *(id *)(a1 + 176);
  v19 = (_QWORD *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v19 = (_QWORD *)*v19;
  turi::neural_net::get_array_map_optimizer_options(a4, (uint64_t)v35);
  *(float *)&v20 = array_map_scalar;
  v21 = objc_msgSend(v18, "initWithChannels:kernelParamsBinaryName:device:cmd_queue:gamma:beta:moving_avg:moving_var:optimizerOptions:batchNormEpsilon:", v14, v19, v13, v34, 0, 0, v20, 0, 0, v35);
  v22 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v21;

  v23 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE230]), "initWithDevice:dataSource:", v13, *(_QWORD *)(a1 + 176));
  v24 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v23;

  *(float *)&v25 = array_map_scalar;
  objc_msgSend(*(id *)(a1 + 192), "setEpsilon:", v25);
  if (a6 == 2 || a7)
  {
    v26 = -[TCMPSImageAllocator initWithFormat:]([TCMPSImageAllocator alloc], "initWithFormat:", 4);
    objc_msgSend(*(id *)(a1 + 192), "setDestinationImageAllocator:", v26);

    if (!a5)
      goto LABEL_12;
  }
  else if (!a5)
  {
    goto LABEL_12;
  }
  v27 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE248]), "initWithDevice:", v13);
  v28 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v27;

  v29 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE250]), "initWithDevice:", v13);
  v30 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v29;

  v31 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE238]), "initWithDevice:", v13);
  v32 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v31;

  if (a6 == 2)
  {
    v33 = -[TCMPSImageAllocator initWithFormat:]([TCMPSImageAllocator alloc], "initWithFormat:", 4);
    objc_msgSend(*(id *)(a1 + 200), "setDestinationImageAllocator:", v33);

    (*(void (**)(uint64_t, id, uint64_t))(*(_QWORD *)a1 + 56))(a1, v13, 1);
    *(_BYTE *)(a1 + 170) = 0;
  }
LABEL_12:

}

void sub_217E8C378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void turi::neural_net::BNLayer::Load(uint64_t a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void **v6;
  const void *v7;
  size_t v8;
  void **v9;
  const void *v10;
  size_t v11;
  void **v12;
  const void *v13;
  size_t v14;
  void **v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;

  v4 = (const void *)(a1 + 48);
  if (*(char *)(a1 + 71) >= 0)
    v5 = *(unsigned __int8 *)(a1 + 71);
  else
    v5 = *(_QWORD *)(a1 + 56);
  v6 = v27;
  std::string::basic_string[abi:ne180100]((uint64_t)v27, v5 + 6);
  if (v28 < 0)
    v6 = (void **)v27[0];
  if (v5)
  {
    if (*(char *)(a1 + 71) >= 0)
      v7 = v4;
    else
      v7 = *(const void **)(a1 + 48);
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "_gamma");
  if (*(char *)(a1 + 71) >= 0)
    v8 = *(unsigned __int8 *)(a1 + 71);
  else
    v8 = *(_QWORD *)(a1 + 56);
  v9 = v25;
  std::string::basic_string[abi:ne180100]((uint64_t)v25, v8 + 5);
  if (v26 < 0)
    v9 = (void **)v25[0];
  if (v8)
  {
    if (*(char *)(a1 + 71) >= 0)
      v10 = v4;
    else
      v10 = *(const void **)(a1 + 48);
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "_beta");
  if (*(char *)(a1 + 71) >= 0)
    v11 = *(unsigned __int8 *)(a1 + 71);
  else
    v11 = *(_QWORD *)(a1 + 56);
  v12 = v23;
  std::string::basic_string[abi:ne180100]((uint64_t)v23, v11 + 12);
  if (v24 < 0)
    v12 = (void **)v23[0];
  if (v11)
  {
    if (*(char *)(a1 + 71) >= 0)
      v13 = v4;
    else
      v13 = *(const void **)(a1 + 48);
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "_running_var");
  if (*(char *)(a1 + 71) >= 0)
    v14 = *(unsigned __int8 *)(a1 + 71);
  else
    v14 = *(_QWORD *)(a1 + 56);
  v15 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 13);
  if (v22 < 0)
    v15 = (void **)__p[0];
  if (v14)
  {
    if (*(char *)(a1 + 71) >= 0)
      v16 = v4;
    else
      v16 = *(const void **)(a1 + 48);
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "_running_mean");
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)v27))
  {
    v17 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)v27);
    objc_msgSend(*(id *)(a1 + 176), "loadGamma:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17));
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)v25))
  {
    v18 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)v25);
    objc_msgSend(*(id *)(a1 + 176), "loadBeta:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18));
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p))
  {
    v19 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)__p);
    objc_msgSend(*(id *)(a1 + 176), "loadMovingAvg:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19));
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)v23))
  {
    v20 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)v23);
    objc_msgSend(*(id *)(a1 + 176), "loadMovingVar:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20));
  }
  objc_msgSend(*(id *)(a1 + 192), "reloadGammaAndBetaFromDataSource");
  objc_msgSend(*(id *)(a1 + 192), "reloadMeanAndVarianceFromDataSource");
  if (v22 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v28 < 0)
    operator delete(v27[0]);
}

void sub_217E8C708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void turi::neural_net::BNLayer::Export(turi::neural_net::BNLayer *this@<X0>, uint64_t a2@<X8>)
{
  size_t v4;
  const void **v5;
  char *v6;
  size_t v7;
  const void **v8;
  char *v9;
  size_t v10;
  const void **v11;
  char *v12;
  size_t v13;
  void **v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  _QWORD *v53;
  void *__p;
  void *v55;
  _QWORD *v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  void *v61[2];
  char v62;
  const void *v63[2];
  char v64;
  const void *v65[2];
  char v66;
  const void *v67[2];
  char v68;
  const void **v69;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  if (*((char *)this + 71) >= 0)
    v4 = *((unsigned __int8 *)this + 71);
  else
    v4 = *((_QWORD *)this + 7);
  v5 = v67;
  std::string::basic_string[abi:ne180100]((uint64_t)v67, v4 + 6);
  if (v68 < 0)
    v5 = (const void **)v67[0];
  if (v4)
  {
    if (*((char *)this + 71) >= 0)
      v6 = (char *)this + 48;
    else
      v6 = (char *)*((_QWORD *)this + 6);
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "_gamma");
  if (*((char *)this + 71) >= 0)
    v7 = *((unsigned __int8 *)this + 71);
  else
    v7 = *((_QWORD *)this + 7);
  v8 = v65;
  std::string::basic_string[abi:ne180100]((uint64_t)v65, v7 + 5);
  if (v66 < 0)
    v8 = (const void **)v65[0];
  if (v7)
  {
    if (*((char *)this + 71) >= 0)
      v9 = (char *)this + 48;
    else
      v9 = (char *)*((_QWORD *)this + 6);
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "_beta");
  if (*((char *)this + 71) >= 0)
    v10 = *((unsigned __int8 *)this + 71);
  else
    v10 = *((_QWORD *)this + 7);
  v11 = v63;
  std::string::basic_string[abi:ne180100]((uint64_t)v63, v10 + 12);
  if (v64 < 0)
    v11 = (const void **)v63[0];
  if (v10)
  {
    if (*((char *)this + 71) >= 0)
      v12 = (char *)this + 48;
    else
      v12 = (char *)*((_QWORD *)this + 6);
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "_running_var");
  if (*((char *)this + 71) >= 0)
    v13 = *((unsigned __int8 *)this + 71);
  else
    v13 = *((_QWORD *)this + 7);
  v14 = v61;
  std::string::basic_string[abi:ne180100]((uint64_t)v61, v13 + 13);
  if (v62 < 0)
    v14 = (void **)v61[0];
  if (v13)
  {
    if (*((char *)this + 71) >= 0)
      v15 = (char *)this + 48;
    else
      v15 = (char *)*((_QWORD *)this + 6);
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "_running_mean");
  v16 = objc_msgSend(*((id *)this + 22), "numberOfFeatureChannels");
  if (objc_msgSend(*((id *)this + 22), "load"))
  {
    v17 = objc_msgSend(*((id *)this + 22), "gamma");
    v18 = operator new(8uLL);
    __p = v18;
    *v18 = v16;
    v55 = v18 + 1;
    v56 = v18 + 1;
    turi::neural_net::shared_float_array::copy(v17, (uint64_t)&__p, (uint64_t)&v57);
    v69 = v67;
    v19 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v67, (uint64_t)&std::piecewise_construct, (__int128 **)&v69);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v19 + 8), &v58);
    v20 = v60;
    *((_OWORD *)v19 + 5) = v59;
    *((_OWORD *)v19 + 6) = v20;
    v57 = &unk_24D9175B8;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (__p)
    {
      v55 = __p;
      operator delete(__p);
    }
    v24 = objc_msgSend(*((id *)this + 22), "beta");
    v25 = operator new(8uLL);
    v51 = v25;
    *v25 = v16;
    v52 = v25 + 1;
    v53 = v25 + 1;
    turi::neural_net::shared_float_array::copy(v24, (uint64_t)&v51, (uint64_t)&v57);
    v69 = v65;
    v26 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v65, (uint64_t)&std::piecewise_construct, (__int128 **)&v69);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v26 + 8), &v58);
    v27 = v60;
    *((_OWORD *)v26 + 5) = v59;
    *((_OWORD *)v26 + 6) = v27;
    v57 = &unk_24D9175B8;
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    v31 = objc_msgSend(*((id *)this + 22), "variance");
    v32 = operator new(8uLL);
    v48 = v32;
    *v32 = v16;
    v49 = v32 + 1;
    v50 = v32 + 1;
    turi::neural_net::shared_float_array::copy(v31, (uint64_t)&v48, (uint64_t)&v57);
    v69 = v63;
    v33 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v63, (uint64_t)&std::piecewise_construct, (__int128 **)&v69);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v33 + 8), &v58);
    v34 = v60;
    *((_OWORD *)v33 + 5) = v59;
    *((_OWORD *)v33 + 6) = v34;
    v57 = &unk_24D9175B8;
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    v38 = objc_msgSend(*((id *)this + 22), "mean");
    v39 = operator new(8uLL);
    v45 = v39;
    *v39 = v16;
    v46 = v39 + 1;
    v47 = v39 + 1;
    turi::neural_net::shared_float_array::copy(v38, (uint64_t)&v45, (uint64_t)&v57);
    v69 = (const void **)v61;
    v40 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v61, (uint64_t)&std::piecewise_construct, (__int128 **)&v69);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v40 + 8), &v58);
    v41 = v60;
    *((_OWORD *)v40 + 5) = v59;
    *((_OWORD *)v40 + 6) = v41;
    v57 = &unk_24D9175B8;
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
  }
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete((void *)v63[0]);
  if (v66 < 0)
    operator delete((void *)v65[0]);
  if (v68 < 0)
    operator delete((void *)v67[0]);
}

void sub_217E8CD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (__p)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  if (*(char *)(v35 - 81) < 0)
    operator delete(*(void **)(v35 - 104));
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v34, *(_QWORD **)(v34 + 8));
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::BNLayer::Update(id *this, turi::neural_net::MPSUpdater *a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v6 = objc_msgSend(this[22], "numberOfFeatureChannels");
  objc_msgSend(this[27], "gradientForGamma");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v8 = objc_msgSend(v7, "contents");

  objc_msgSend(this[27], "gradientForBeta");
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v10 = objc_msgSend(v9, "contents");

  objc_msgSend(this[27], "mean");
  v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v12 = objc_msgSend(v11, "contents");

  objc_msgSend(this[27], "variance");
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v14 = objc_msgSend(v13, "contents");

  (*(void (**)(turi::neural_net::MPSUpdater *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 8))(a2, objc_msgSend(this[22], "gamma"), v8, v6, a3, 0);
  (*(void (**)(turi::neural_net::MPSUpdater *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, objc_msgSend(this[22], "beta"), v10, v6, a3, 1);
  (*(void (**)(turi::neural_net::MPSUpdater *, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a2 + 24))(a2, objc_msgSend(this[22], "mean"), v12, v6, 0.9);
  (*(void (**)(turi::neural_net::MPSUpdater *, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a2 + 24))(a2, objc_msgSend(this[22], "variance"), v14, v6, 0.9);
  objc_msgSend(this[24], "reloadGammaAndBetaFromDataSource");
  return objc_msgSend(this[24], "reloadMeanAndVarianceFromDataSource");
}

void sub_217E8D030(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void turi::neural_net::BNLayer::GpuUpdate(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v3 = (id)objc_msgSend(*(id *)(a1 + 176), "updateGammaAndBetaWithCommandBuffer:batchNormalizationState:");
  v4 = *(void **)(a1 + 192);
  objc_msgSend(*(id *)(a1 + 176), "gammaBetaState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "reloadGammaAndBetaWithCommandBuffer:gammaAndBetaState:", v8, v5);

  v6 = *(void **)(a1 + 192);
  objc_msgSend(*(id *)(a1 + 176), "meanVarianceState");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "reloadMeanAndVarianceWithCommandBuffer:meanAndVarianceState:", v8, v7);

}

void sub_217E8D0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void turi::neural_net::MaxPoolLayer::Forward(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v6 = a2;
  v7 = a3;
  v8 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  objc_storeStrong((id *)(a1 + 8), a2);
  v9 = *(void **)(a1 + 168);
  v14 = 0;
  objc_msgSend(v9, "encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationStateIsTemporary:", v7, v6, &v14, 0);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v14;
  v12 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;

  v13 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;

}

void sub_217E8D1C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void turi::neural_net::MaxPoolLayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 176), "encodeBatchToCommandBuffer:sourceGradients:sourceImages:gradientStates:", v5, v8, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;

}

void sub_217E8D240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void turi::neural_net::MaxPoolLayer::Init(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  TCMPSImageAllocator *v18;
  uint64_t v19;
  void *v20;
  TCMPSImageAllocator *v21;
  id v22;

  v22 = a2;
  v11 = *(int **)(a1 + 72);
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  v15 = v11[3];
  v16 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE300]), "initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:", v22, v13, v12, v15, v14);
  v17 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v16;

  objc_msgSend(*(id *)(a1 + 168), "setPadding:", turi::neural_net::SAME);
  if (a6 == 2 || a7)
  {
    v18 = -[TCMPSImageAllocator initWithFormat:]([TCMPSImageAllocator alloc], "initWithFormat:", 4);
    objc_msgSend(*(id *)(a1 + 168), "setDestinationImageAllocator:", v18);

    if (!a5)
      goto LABEL_9;
  }
  else if (!a5)
  {
    goto LABEL_9;
  }
  v19 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE308]), "initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:", v22, v13, v12, v15, v14);
  v20 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v19;

  if (a6 == 2)
  {
    v21 = -[TCMPSImageAllocator initWithFormat:]([TCMPSImageAllocator alloc], "initWithFormat:", 4);
    objc_msgSend(*(id *)(a1 + 176), "setDestinationImageAllocator:", v21);

  }
  objc_msgSend(*(id *)(a1 + 176), "setPadding:", turi::neural_net::SAME);
LABEL_9:

}

void sub_217E8D3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void turi::neural_net::DropOutLayer::Forward(uint64_t a1, void *a2, void *a3, char a4)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  id v16;

  v8 = a2;
  v9 = a3;
  if ((a4 & 1) != 0)
  {
    v10 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;

    objc_storeStrong((id *)(a1 + 8), a2);
    v11 = *(void **)(a1 + 168);
    v16 = 0;
    objc_msgSend(v11, "encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationStateIsTemporary:", v9, v8, &v16, 0);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = v16;
    v14 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v12;

    v15 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v13;

  }
  else
  {
    objc_storeStrong((id *)(a1 + 16), a2);
  }

}

void sub_217E8D4A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void turi::neural_net::DropOutLayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 176), "encodeBatchToCommandBuffer:sourceGradients:sourceImages:gradientStates:", v5, v8, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;

}

void sub_217E8D520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void turi::neural_net::DropOutLayer::Init(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  id v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float array_map_scalar;
  unsigned int v18;
  id v19;
  double v20;
  uint64_t v21;
  void *v22;
  TCMPSImageAllocator *v23;
  id v24;
  int64x2_t v25;
  uint64_t v26;
  void *v27;
  TCMPSImageAllocator *v28;
  int64x2_t v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  void *__p[2];
  char v34;

  v11 = a2;
  v12 = *(int **)(a1 + 72);
  v13 = *v12;
  v14 = v12[1];
  std::string::basic_string[abi:ne180100]<0>(__p, "random_seed");
  v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a4, (const void **)__p);
  v16 = v15;
  if (v34 < 0)
  {
    operator delete(__p[0]);
    if (v16)
      goto LABEL_3;
  }
  else if (v15)
  {
LABEL_3:
    std::string::basic_string[abi:ne180100]<0>(__p, "random_seed");
    array_map_scalar = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, 0.0);
    if (v34 < 0)
      operator delete(__p[0]);
    v14 = LODWORD(array_map_scalar);
    goto LABEL_9;
  }
  if (v14 == -1)
  {
    v18 = time(0);
    srand(v18);
    v14 = rand();
  }
LABEL_9:
  v19 = objc_alloc(MEMORY[0x24BDDE280]);
  v31 = vdupq_n_s64(1uLL);
  v32 = 1;
  *(float *)&v20 = (float)v13 / 100.0;
  v21 = objc_msgSend(v19, "initWithDevice:keepProbability:seed:maskStrideInPixels:", v11, v14, &v31, v20);
  v22 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v21;

  if (a6 == 2 || a7)
  {
    v23 = -[TCMPSImageAllocator initWithFormat:]([TCMPSImageAllocator alloc], "initWithFormat:", 4);
    objc_msgSend(*(id *)(a1 + 168), "setDestinationImageAllocator:", v23);

  }
  v24 = objc_alloc(MEMORY[0x24BDDE288]);
  v25 = vdupq_n_s64(1uLL);
  v29 = v25;
  v30 = 1;
  *(float *)v25.i32 = (float)v13 / 100.0;
  v26 = objc_msgSend(v24, "initWithDevice:keepProbability:seed:maskStrideInPixels:", v11, v14, &v29, *(double *)v25.i64);
  v27 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v26;

  if (a6 == 2)
  {
    v28 = -[TCMPSImageAllocator initWithFormat:]([TCMPSImageAllocator alloc], "initWithFormat:", 4);
    objc_msgSend(*(id *)(a1 + 176), "setDestinationImageAllocator:", v28);

  }
}

void sub_217E8D720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void turi::neural_net::SoftMaxLayer::Forward(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v6 = a2;
  v7 = a3;
  v8 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  objc_storeStrong((id *)(a1 + 8), a2);
  v9 = *(void **)(a1 + 168);
  v14 = 0;
  objc_msgSend(v9, "encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationStateIsTemporary:", v7, v6, &v14, 0);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v14;
  v12 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;

  v13 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;

}

void sub_217E8D820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void turi::neural_net::SoftMaxLayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 176), "encodeBatchToCommandBuffer:sourceGradients:sourceImages:gradientStates:", v5, v8, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;

}

void sub_217E8D89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void turi::neural_net::SoftMaxLayer::Init(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v11;
  void *v12;
  TCMPSImageAllocator *v13;
  uint64_t v14;
  void *v15;
  TCMPSImageAllocator *v16;
  id v17;

  v17 = a2;
  v11 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE318]), "initWithDevice:", v17);
  v12 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v11;

  if (a6 != 2 && !a7)
  {
    if (!a5)
      goto LABEL_7;
    goto LABEL_6;
  }
  v13 = -[TCMPSImageAllocator initWithFormat:]([TCMPSImageAllocator alloc], "initWithFormat:", 4);
  objc_msgSend(*(id *)(a1 + 168), "setDestinationImageAllocator:", v13);

  if (a5)
  {
LABEL_6:
    v14 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE320]), "initWithDevice:", v17);
    v15 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v14;

    v16 = -[TCMPSImageAllocator initWithFormat:]([TCMPSImageAllocator alloc], "initWithFormat:", 4);
    objc_msgSend(*(id *)(a1 + 176), "setDestinationImageAllocator:", v16);

  }
LABEL_7:

}

void sub_217E8D9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void turi::neural_net::SmceLossLayer::Loss(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  v7 = a3;
  v8 = a4;
  objc_msgSend(*(id *)(a1 + 168), "encodeBatchToCommandBuffer:sourceImages:labels:", v8, v11, v7);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v9;

}

void sub_217E8DA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void turi::neural_net::SmceLossLayer::Init(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v8;
  double v9;
  uint64_t v10;
  void *v11;
  TCMPSImageAllocator *v12;
  id v13;

  v13 = a2;
  objc_msgSend(MEMORY[0x24BDDE2B0], "cnnLossDescriptorWithType:reductionType:", 2, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v9) = 1.0;
  objc_msgSend(v8, "setWeight:", v9);
  v10 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE2A0]), "initWithDevice:lossDescriptor:", v13, v8);
  v11 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v10;

  if (a6 == 2)
  {
    v12 = -[TCMPSImageAllocator initWithFormat:]([TCMPSImageAllocator alloc], "initWithFormat:", 4);
    objc_msgSend(*(id *)(a1 + 168), "setDestinationImageAllocator:", v12);

  }
}

void sub_217E8DB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::Init(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  id v12;
  int *v13;
  uint64_t v14;
  __int128 v15;
  MPSCNNWeight *v16;
  double v17;
  double v18;
  uint64_t v19;
  MPSCNNWeight *v20;
  double v21;
  double v22;
  MPSCNNWeight *v23;
  double v24;
  double v25;
  MPSCNNWeight *v26;
  double v27;
  double v28;
  MPSCNNWeight *v29;
  double v30;
  double v31;
  MPSCNNWeight *v32;
  double v33;
  double v34;
  MPSCNNWeight *v35;
  double v36;
  double v37;
  MPSCNNWeight *v38;
  double v39;
  double v40;
  MPSCNNWeight *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  unint64_t i;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  id v56;
  double v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  char v83;
  void *v84;
  void *v85;
  MPSCNNWeight *v86;
  MPSCNNWeight *v87;
  MPSCNNWeight *v88;
  MPSCNNWeight *v89;
  MPSCNNWeight *v90;
  MPSCNNWeight *v91;
  id v92;

  v92 = a2;
  v12 = a3;
  v13 = *(int **)(a1 + 120);
  *(_QWORD *)(a1 + 168) = *v13;
  v14 = *((_QWORD *)v13 + 1);
  *(_QWORD *)&v15 = (int)v14;
  *((_QWORD *)&v15 + 1) = SHIDWORD(v14);
  *(_OWORD *)(a1 + 176) = v15;
  *(_QWORD *)(a1 + 192) = *(int *)(*(_QWORD *)(a1 + 144) + 12);
  objc_storeStrong((id *)(a1 + 320), a2);
  objc_storeStrong((id *)(a1 + 312), a3);
  v16 = [MPSCNNWeight alloc];
  LODWORD(v74) = 3;
  LODWORD(v17) = 0;
  LODWORD(v18) = 0;
  v19 = -[MPSCNNWeight initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:](v16, "initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:", 1, 1, *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), 1, 1, v17, v18, v74);
  v20 = [MPSCNNWeight alloc];
  LODWORD(v75) = 5;
  LODWORD(v21) = 1.0;
  LODWORD(v22) = 1.0;
  v91 = -[MPSCNNWeight initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:](v20, "initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:", 1, 1, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192), 1, 1, v21, v22, v75);
  v23 = [MPSCNNWeight alloc];
  LODWORD(v76) = 3;
  LODWORD(v24) = 0;
  LODWORD(v25) = 0;
  v90 = -[MPSCNNWeight initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:](v23, "initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:", 1, 1, *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), 1, 1, v24, v25, v76);
  v26 = [MPSCNNWeight alloc];
  LODWORD(v77) = 5;
  LODWORD(v27) = 1.0;
  LODWORD(v28) = 1.0;
  v89 = -[MPSCNNWeight initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:](v26, "initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:", 1, 1, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192), 1, 1, v27, v28, v77);
  v29 = [MPSCNNWeight alloc];
  LODWORD(v78) = 5;
  LODWORD(v30) = 1.0;
  LODWORD(v31) = 1.0;
  v88 = -[MPSCNNWeight initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:](v29, "initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:", 1, 1, *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), 1, 1, v30, v31, v78);
  v32 = [MPSCNNWeight alloc];
  LODWORD(v79) = 5;
  LODWORD(v33) = 1.0;
  LODWORD(v34) = 1.0;
  v87 = -[MPSCNNWeight initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:](v32, "initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:", 1, 1, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192), 1, 1, v33, v34, v79);
  v35 = [MPSCNNWeight alloc];
  LODWORD(v80) = 3;
  LODWORD(v36) = 0;
  LODWORD(v37) = 0;
  v86 = -[MPSCNNWeight initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:](v35, "initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:", 1, 1, *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), 1, 1, v36, v37, v80);
  v82 = a6;
  v83 = a7;
  v85 = v12;
  v38 = [MPSCNNWeight alloc];
  LODWORD(v81) = 5;
  LODWORD(v39) = 1.0;
  LODWORD(v40) = 1.0;
  v41 = -[MPSCNNWeight initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:](v38, "initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:neuronType:neuronA:neuronB:", 1, 1, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192), 1, 1, v39, v40, v81);
  objc_msgSend(MEMORY[0x24BDDE438], "createLSTMDescriptorWithInputFeatureChannels:outputFeatureChannels:", *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192));
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v84 = (void *)v19;
  objc_msgSend(v42, "setInputGateInputWeights:", v19);
  objc_msgSend(v42, "setInputGateRecurrentWeights:", v91);
  objc_msgSend(v42, "setForgetGateInputWeights:", v90);
  objc_msgSend(v42, "setForgetGateRecurrentWeights:", v89);
  objc_msgSend(v42, "setOutputGateInputWeights:", v86);
  objc_msgSend(v42, "setOutputGateRecurrentWeights:", v41);
  objc_msgSend(v42, "setCellGateInputWeights:", v88);
  objc_msgSend(v42, "setCellGateRecurrentWeights:", v87);
  objc_msgSend(v42, "setCellToOutputNeuronType:", 5);
  objc_msgSend(v42, "setUseFloat32Weights:", 1);
  v43 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE4E8]), "initWithDevice:rnnDescriptor:trainableWeights:", v92, v42, *(_QWORD *)(a1 + 240));
  v44 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v43;

  objc_msgSend(*(id *)(a1 + 232), "createWeightMatrices:", *(_QWORD *)(a1 + 264));
  objc_msgSend(*(id *)(a1 + 232), "createWeightMatrices:", *(_QWORD *)(a1 + 272));
  objc_msgSend(*(id *)(a1 + 232), "createWeightGradientMatrices:dataType:", *(_QWORD *)(a1 + 248), 268435488);
  v45 = objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 264), "count"));
  v46 = *(void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v45;

  for (i = 0; i < objc_msgSend(*(id *)(a1 + 264), "count"); ++i)
  {
    objc_msgSend(*(id *)(a1 + 264), "objectAtIndexedSubscript:", i);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 272), "objectAtIndexedSubscript:", i);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "data");
    v50 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v51 = (void *)objc_msgSend(v50, "contents");
    objc_msgSend(v48, "data");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    bzero(v51, objc_msgSend(v52, "length"));

    objc_msgSend(v49, "data");
    v53 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v54 = (void *)objc_msgSend(v53, "contents");
    objc_msgSend(v49, "data");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    bzero(v54, objc_msgSend(v55, "length"));

    v56 = objc_alloc(MEMORY[0x24BDDE4C0]);
    LODWORD(v57) = 981668463;
    v58 = (void *)objc_msgSend(v56, "initWithDevice:learningRate:", v92, v57);
    objc_msgSend(*(id *)(a1 + 224), "addObject:", v58);

  }
  v59 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE3B0]), "initWithDevice:dataLayout:", v92, 0);
  v60 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v59;

  v61 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE458]), "initWithDevice:dataLayout:", v92, 0);
  v62 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v61;

  v63 = 4 * *(_QWORD *)(a1 + 184);
  v64 = objc_msgSend(v92, "newBufferWithLength:options:", v63 * *(_QWORD *)(a1 + 176) * *(_QWORD *)(a1 + 168), 0);
  v65 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v64;

  v66 = objc_msgSend(v92, "newBufferWithLength:options:", *(_QWORD *)(a1 + 176) * v63 * *(_QWORD *)(a1 + 168), 0);
  v67 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v66;

  v68 = 4 * *(_QWORD *)(a1 + 192);
  v69 = objc_msgSend(v92, "newBufferWithLength:options:", v68 * *(_QWORD *)(a1 + 176) * *(_QWORD *)(a1 + 168), 0);
  v70 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v69;

  v71 = objc_msgSend(v92, "newBufferWithLength:options:", *(_QWORD *)(a1 + 176) * v68 * *(_QWORD *)(a1 + 168), 0);
  v72 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v71;

  v73 = v83 ^ 1;
  if (v82 == 2)
    v73 = 0;
  *(_BYTE *)(a1 + 200) = v73;
  turi::neural_net::LstmLayer::InitWeightCopyMatrices((turi::neural_net::LstmLayer *)a1);

}

void sub_217E8E11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, id a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::InitWeightCopyMatrices(turi::neural_net::LstmLayer *this)
{
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  void *v8;
  std::string __p;
  unsigned __int8 *v10;

  v2 = 0;
  v3 = (char *)this + 328;
  do
  {
    v4 = (uint64_t *)&turi::neural_net::lstm_weight_names_mxnet_format[v2];
    if ((char)turi::neural_net::lstm_weight_names_mxnet_format[v2 + 23] < 0)
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v4, v4[1]);
    else
      __p = *(std::string *)v4;
    v5 = turi::neural_net::MxnetNameToMatrixId((const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    turi::neural_net::createWeightMatrix(*((void **)this + 40), v5, *((_DWORD *)this + 46), *((_DWORD *)this + 48));
    v6 = objc_claimAutoreleasedReturnValue();
    v10 = &turi::neural_net::lstm_weight_names_mxnet_format[v2];
    v7 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, &turi::neural_net::lstm_weight_names_mxnet_format[v2], (uint64_t)&std::piecewise_construct, (__int128 **)&v10);
    v8 = (void *)*((_QWORD *)v7 + 5);
    *((_QWORD *)v7 + 5) = v6;

    v2 += 24;
  }
  while (v2 != 288);
}

void sub_217E8E300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id turi::neural_net::LstmLayer::CreateMatrixViews(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;

  v5 = a2;
  objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", *(_QWORD *)(a1 + 168), a3, 4 * a3 * *(_QWORD *)(a1 + 176), 268435488);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v5, v6);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", *(_QWORD *)(a1 + 176));
  if (*(_QWORD *)(a1 + 176))
  {
    v9 = 0;
    do
    {
      objc_msgSend(v8, "addObject:", v7);
      ++v9;
    }
    while (v9 < *(_QWORD *)(a1 + 176));
  }

  return v8;
}

void sub_217E8E3EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::CreateMatrixOffsets(turi::neural_net::LstmLayer *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<unsigned long>::reserve((void **)a3, *((_QWORD *)this + 22));
  if (*((_QWORD *)this + 22))
  {
    v6 = 0;
    v7 = 4 * a2;
    v8 = (_QWORD *)(a3 + 16);
    v9 = *(uint64_t **)(a3 + 8);
    do
    {
      v10 = v6 * v7;
      if ((unint64_t)v9 >= *v8)
      {
        v12 = *(uint64_t **)a3;
        v13 = ((uint64_t)v9 - *(_QWORD *)a3) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v15 = *v8 - (_QWORD)v12;
        if (v15 >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a3 + 16, v16);
          v12 = *(uint64_t **)a3;
          v9 = *(uint64_t **)(a3 + 8);
        }
        else
        {
          v17 = 0;
        }
        v18 = (uint64_t *)&v17[8 * v13];
        *v18 = v10;
        v11 = v18 + 1;
        while (v9 != v12)
        {
          v19 = *--v9;
          *--v18 = v19;
        }
        *(_QWORD *)a3 = v18;
        *(_QWORD *)(a3 + 8) = v11;
        *(_QWORD *)(a3 + 16) = &v17[8 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v9 = v10;
        v11 = v9 + 1;
      }
      *(_QWORD *)(a3 + 8) = v11;
      ++v6;
      v9 = v11;
    }
    while (v6 < *((_QWORD *)this + 22));
  }
}

void sub_217E8E558(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::LstmLayer::CopyImageBatchToBuffer(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  MPSImageBatch *batch;

  batch = a2;
  v9 = a3;
  v10 = a5;
  objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176) * a4, 4 * *(_QWORD *)(a1 + 176) * a4, 268435488);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v9, v11);
  objc_msgSend(*(id *)(a1 + 208), "encodeBatchToCommandBuffer:sourceImages:destinationMatrix:", v10, batch, v12);
  MPSImageBatchIncrementReadCount(batch, -1);

}

void sub_217E8E64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id turi::neural_net::LstmLayer::CopyImageBatchFromBuffer(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v7 = a2;
  v8 = a4;
  objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176) * a3, 4 * *(_QWORD *)(a1 + 176) * a3, 268435488);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v7, v9);
  objc_msgSend(MEMORY[0x24BDDE3B8], "imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:", 4, *(_QWORD *)(a1 + 176), 1, a3, 1, 3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_BYTE *)(a1 + 200))
    objc_msgSend(MEMORY[0x24BDDE4F8], "defaultAllocator");
  else
    objc_msgSend(MEMORY[0x24BDDE368], "defaultAllocator");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "imageBatchForCommandBuffer:imageDescriptor:kernel:count:", v8, v11, *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 168));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 216), "encodeBatchToCommandBuffer:sourceMatrix:destinationImages:", v8, v10, v13);

  return v13;
}

void sub_217E8E7B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::Forward(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *__p[3];
  void *v13[3];

  v6 = a2;
  v7 = a3;
  objc_storeStrong((id *)(a1 + 8), a2);
  turi::neural_net::LstmLayer::CopyImageBatchToBuffer(a1, v6, *(void **)(a1 + 280), *(_QWORD *)(a1 + 184), v7);
  turi::neural_net::LstmLayer::CreateMatrixViews(a1, *(void **)(a1 + 280), *(_QWORD *)(a1 + 184));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::LstmLayer::CreateMatrixViews(a1, *(void **)(a1 + 288), *(_QWORD *)(a1 + 192));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::LstmLayer::CreateMatrixOffsets((turi::neural_net::LstmLayer *)a1, *(_QWORD *)(a1 + 184), (uint64_t)v13);
  turi::neural_net::LstmLayer::CreateMatrixOffsets((turi::neural_net::LstmLayer *)a1, *(_QWORD *)(a1 + 192), (uint64_t)__p);
  objc_msgSend(*(id *)(a1 + 256), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 232), "encodeForwardSequenceToCommandBuffer:sourceMatrices:sourceOffsets:destinationMatrices:destinationOffsets:trainingStates:recurrentInputState:recurrentOutputStates:weights:", v7, v8, v13[0], v9, __p[0], *(_QWORD *)(a1 + 256), 0, 0, *(_QWORD *)(a1 + 240));
  turi::neural_net::LstmLayer::CopyImageBatchFromBuffer(a1, *(void **)(a1 + 288), *(_QWORD *)(a1 + 192), v7);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }

}

void sub_217E8E950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *__p[3];
  void *v12[3];

  v5 = a3;
  turi::neural_net::LstmLayer::CopyImageBatchToBuffer(a1, a2, *(void **)(a1 + 296), *(_QWORD *)(a1 + 192), v5);
  turi::neural_net::LstmLayer::CreateMatrixViews(a1, *(void **)(a1 + 280), *(_QWORD *)(a1 + 184));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::LstmLayer::CreateMatrixViews(a1, *(void **)(a1 + 296), *(_QWORD *)(a1 + 192));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::LstmLayer::CreateMatrixViews(a1, *(void **)(a1 + 304), *(_QWORD *)(a1 + 184));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::LstmLayer::CreateMatrixOffsets((turi::neural_net::LstmLayer *)a1, *(_QWORD *)(a1 + 184), (uint64_t)v12);
  turi::neural_net::LstmLayer::CreateMatrixOffsets((turi::neural_net::LstmLayer *)a1, *(_QWORD *)(a1 + 192), (uint64_t)__p);
  objc_msgSend(*(id *)(a1 + 232), "encodeGradientSequenceToCommandBuffer:forwardSources:forwardSourceOffsets:sourceGradients:sourceGradientOffsets:destinationGradients:destinationOffsets:weightGradients:trainingStates:recurrentInputState:recurrentOutputStates:weights:", v5, v6, v12[0], *(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 256), 0, 0, *(_QWORD *)(a1 + 240));
  turi::neural_net::LstmLayer::CopyImageBatchFromBuffer(a1, *(void **)(a1 + 304), *(_QWORD *)(a1 + 184), v5);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v9;

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }

}

void sub_217E8EAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::Load(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t i;
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *v9;
  unsigned __int8 *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  id v19;
  id v20;
  void *v21;
  const void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[3];
  std::string v27;
  std::string v28;
  void *__p[2];
  std::string::size_type v30;

  objc_msgSend(*(id *)(a1 + 312), "commandBuffer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 288; i += 24)
  {
    if (*(char *)(a1 + 71) >= 0)
      v6 = *(unsigned __int8 *)(a1 + 71);
    else
      v6 = *(_QWORD *)(a1 + 56);
    std::string::basic_string[abi:ne180100]((uint64_t)&v28, v6 + 1);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v28;
    else
      v7 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if (v6)
    {
      if (*(char *)(a1 + 71) >= 0)
        v8 = (const void *)(a1 + 48);
      else
        v8 = *(const void **)(a1 + 48);
      memmove(v7, v8, v6);
    }
    v9 = (std::string *)&turi::neural_net::lstm_weight_names_mxnet_format[i];
    *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
    v10 = &turi::neural_net::lstm_weight_names_mxnet_format[i];
    v11 = (char)turi::neural_net::lstm_weight_names_mxnet_format[i + 23];
    if (v11 >= 0)
      v12 = (const std::string::value_type *)&turi::neural_net::lstm_weight_names_mxnet_format[i];
    else
      v12 = *(const std::string::value_type **)&turi::neural_net::lstm_weight_names_mxnet_format[i];
    if (v11 >= 0)
      v13 = turi::neural_net::lstm_weight_names_mxnet_format[i + 23];
    else
      v13 = *(_QWORD *)&turi::neural_net::lstm_weight_names_mxnet_format[i + 8];
    v14 = std::string::append(&v28, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v30 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p))
    {
      v16 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)__p);
      if ((char)v10[23] < 0)
        std::string::__init_copy_ctor_external(&v27, v9->__r_.__value_.__l.__data_, *((_QWORD *)v10 + 1));
      else
        v27 = *v9;
      v17 = turi::neural_net::MxnetNameToMatrixId((const void **)&v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      v18 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>((_QWORD *)(a1 + 328), &turi::neural_net::lstm_weight_names_mxnet_format[i]);
      if (!v18)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v19 = *((id *)v18 + 5);
      std::operator+<char>();
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      objc_msgSend(v19, "data");
      v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v21 = (void *)objc_msgSend(v20, "contents");
      v22 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      objc_msgSend(v19, "data");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      memcpy(v21, v22, objc_msgSend(v23, "length"));

      v24 = *(void **)(a1 + 232);
      v25 = *(_QWORD *)(a1 + 240);
      memset(v26, 0, sizeof(v26));
      objc_msgSend(v24, "encodeCopyWeightsToCommandBuffer:weights:matrixId:matrix:copyFromWeightsToMatrix:matrixOffset:", v4, v25, v17, v19, 0, v26);

    }
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
  }
  objc_msgSend(v4, "commit");
  objc_msgSend(v4, "waitUntilCompleted");

}

void sub_217E8EDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;

  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::Export(id *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  size_t v4;
  std::string *v5;
  char *v6;
  std::string *v7;
  unsigned __int8 *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  void *v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  unsigned __int8 *v23;
  size_t v24;
  std::string *v25;
  char *v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  unsigned __int8 *v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  char *v39;
  unsigned __int8 *v40;
  char *v41;
  _QWORD *v42;
  uint64_t *v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  void *v58;
  void *__p;
  void *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  std::string v65;
  __int128 v66;
  __int128 v67;
  void *v68[2];
  std::string::size_type v69;
  _QWORD v70[3];
  std::string v71;
  __int128 *v72[2];

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  objc_msgSend(this[39], "commandBuffer");
  v3 = 0;
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  do
  {
    if (*((char *)this + 71) >= 0)
      v4 = *((unsigned __int8 *)this + 71);
    else
      v4 = (size_t)this[7];
    std::string::basic_string[abi:ne180100]((uint64_t)&v65, v4 + 1);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v65;
    else
      v5 = (std::string *)v65.__r_.__value_.__r.__words[0];
    if (v4)
    {
      if (*((char *)this + 71) >= 0)
        v6 = (char *)(this + 6);
      else
        v6 = (char *)this[6];
      memmove(v5, v6, v4);
    }
    v7 = (std::string *)&turi::neural_net::lstm_weight_names_mxnet_format[v3];
    *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 95;
    v8 = &turi::neural_net::lstm_weight_names_mxnet_format[v3];
    v9 = (char)turi::neural_net::lstm_weight_names_mxnet_format[v3 + 23];
    if (v9 >= 0)
      v10 = (const std::string::value_type *)&turi::neural_net::lstm_weight_names_mxnet_format[v3];
    else
      v10 = *(const std::string::value_type **)&turi::neural_net::lstm_weight_names_mxnet_format[v3];
    if (v9 >= 0)
      v11 = turi::neural_net::lstm_weight_names_mxnet_format[v3 + 23];
    else
      v11 = *(_QWORD *)&turi::neural_net::lstm_weight_names_mxnet_format[v3 + 8];
    v12 = std::string::append(&v65, v10, v11);
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v14 = SHIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__r.__words[0] = 0;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if ((char)v8[23] < 0)
      std::string::__init_copy_ctor_external(&v71, v7->__r_.__value_.__l.__data_, *((_QWORD *)v8 + 1));
    else
      v71 = *v7;
    v15 = turi::neural_net::MxnetNameToMatrixId((const void **)&v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    v16 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(this + 41, &turi::neural_net::lstm_weight_names_mxnet_format[v3]);
    if (!v16)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = *((id *)v16 + 5);
    objc_msgSend(v17, "data");
    v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v19 = (void *)objc_msgSend(v18, "contents");
    objc_msgSend(v17, "data");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    bzero(v19, objc_msgSend(v20, "length"));

    v21 = this[29];
    v22 = this[30];
    memset(v70, 0, sizeof(v70));
    objc_msgSend(v21, "encodeCopyWeightsToCommandBuffer:weights:matrixId:matrix:copyFromWeightsToMatrix:matrixOffset:", v58, v22, v15, v17, 1, v70);
    objc_msgSend(v17, "synchronizeOnCommandBuffer:", v58);

    if (v14 < 0)
      operator delete(v13);
    v3 += 24;
  }
  while (v3 != 288);
  objc_msgSend(v58, "commit");
  objc_msgSend(v58, "waitUntilCompleted");
  v56 = &unk_24D9175B8;
  v23 = turi::neural_net::lstm_weight_names_mxnet_format;
  do
  {
    if (*((char *)this + 71) >= 0)
      v24 = *((unsigned __int8 *)this + 71);
    else
      v24 = (size_t)this[7];
    std::string::basic_string[abi:ne180100]((uint64_t)&v65, v24 + 1);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v65;
    else
      v25 = (std::string *)v65.__r_.__value_.__r.__words[0];
    if (v24)
    {
      if (*((char *)this + 71) >= 0)
        v26 = (char *)(this + 6);
      else
        v26 = (char *)this[6];
      memmove(v25, v26, v24);
    }
    *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v24) = 95;
    v27 = (char)v23[23];
    if (v27 >= 0)
      v28 = (const std::string::value_type *)v23;
    else
      v28 = *(const std::string::value_type **)v23;
    if (v27 >= 0)
      v29 = v23[23];
    else
      v29 = *((_QWORD *)v23 + 1);
    v30 = std::string::append(&v65, v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v69 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)v68 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    v32 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(this + 41, v23);
    if (!v32)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v33 = *((id *)v32 + 5);
    v34 = objc_msgSend(v33, "columns");
    objc_msgSend(v33, "data");
    v35 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v36 = objc_msgSend(v35, "contents");

    if ((char)v23[23] < 0)
    {
      v38 = *(unsigned __int8 **)v23;
      v37 = *((_QWORD *)v23 + 1);
    }
    else
    {
      v37 = v23[23];
      v38 = v23;
    }
    if (v37 >= 4)
    {
      v39 = (char *)&v38[v37];
      v40 = v38;
      do
      {
        v41 = (char *)memchr(v40, 98, v37 - 3);
        if (!v41)
          break;
        if (*(_DWORD *)v41 == 1935763810)
        {
          if (v41 == v39 || v41 - (char *)v38 == -1)
            break;
          v63 = 0;
          v64 = 0;
          v62 = 0;
          v42 = operator new(8uLL);
          v62 = v42;
          *v42 = v34;
          v63 = v42 + 1;
          v64 = v42 + 1;
          turi::neural_net::shared_float_array::copy(v36, (uint64_t)&v62, (uint64_t)&v65);
          v72[0] = (__int128 *)v68;
          v43 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v68, (uint64_t)&std::piecewise_construct, v72);
          std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v43 + 8), (__int128 *)&v65.__r_.__value_.__r.__words[1]);
          v44 = v67;
          *((_OWORD *)v43 + 5) = v66;
          *((_OWORD *)v43 + 6) = v44;
          v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D9175B8;
          v45 = (std::__shared_weak_count *)v65.__r_.__value_.__r.__words[2];
          if (v65.__r_.__value_.__r.__words[2])
          {
            v46 = (unint64_t *)(v65.__r_.__value_.__r.__words[2] + 8);
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = v62;
          if (v62)
          {
            v63 = v62;
            goto LABEL_76;
          }
          goto LABEL_77;
        }
        v40 = (unsigned __int8 *)(v41 + 1);
        v37 = v39 - (char *)v40;
      }
      while (v39 - (char *)v40 >= 4);
    }
    v49 = objc_msgSend(v33, "rows", v56);
    v60 = 0;
    v61 = 0;
    __p = 0;
    v50 = operator new(0x10uLL);
    v60 = v50 + 2;
    v61 = v50 + 2;
    *v50 = v49;
    v50[1] = v34;
    __p = v50;
    turi::neural_net::shared_float_array::copy(v36, (uint64_t)&__p, (uint64_t)&v65);
    v72[0] = (__int128 *)v68;
    v51 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v68, (uint64_t)&std::piecewise_construct, v72);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v51 + 8), (__int128 *)&v65.__r_.__value_.__r.__words[1]);
    v52 = v67;
    *((_OWORD *)v51 + 5) = v66;
    *((_OWORD *)v51 + 6) = v52;
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
    v53 = (std::__shared_weak_count *)v65.__r_.__value_.__r.__words[2];
    if (v65.__r_.__value_.__r.__words[2])
    {
      v54 = (unint64_t *)(v65.__r_.__value_.__r.__words[2] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v48 = __p;
    if (__p)
    {
      v60 = __p;
LABEL_76:
      operator delete(v48);
    }
LABEL_77:

    if (SHIBYTE(v69) < 0)
      operator delete(v68[0]);
    v23 += 24;
  }
  while (v23 != (unsigned __int8 *)&turi::capi_server_initialized);

}

void sub_217E8F414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a11, *(_QWORD **)(a11 + 8));
  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::GpuUpdate(id *a1, void *a2)
{
  uint64_t v3;
  turi::neural_net *v4;
  MPSMatrix *v5;
  uint64_t v6;
  turi::neural_net *v7;
  MPSMatrix *v8;
  void *v9;
  MPSMatrix *v10;
  void *v11;
  MPSMatrix *v12;
  void *v13;
  turi::neural_net *v14;
  void *v15;
  MPSMatrix *v16;
  void *v17;
  id v18;
  turi::neural_net *v19;
  turi::neural_net *v20;
  void *v21;
  turi::neural_net *v22;
  turi::neural_net *v23;
  id *v24;
  unint64_t i;

  v18 = a2;
  v24 = a1;
  for (i = 0; i < objc_msgSend(a1[30], "count", v18); ++i)
  {
    objc_msgSend(a1[28], "objectAtIndexedSubscript:", i);
    v3 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[31], "objectAtIndexedSubscript:", i);
    v4 = (turi::neural_net *)objc_claimAutoreleasedReturnValue();
    turi::neural_net::MPSMatrixToVector(v4, v5);
    v6 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[30], "objectAtIndexedSubscript:", i);
    v7 = (turi::neural_net *)objc_claimAutoreleasedReturnValue();
    turi::neural_net::MPSMatrixToVector(v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[33], "objectAtIndexedSubscript:", i);
    v22 = (turi::neural_net *)objc_claimAutoreleasedReturnValue();
    v23 = v7;
    turi::neural_net::MPSMatrixToVector(v22, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[34], "objectAtIndexedSubscript:", i);
    v20 = v4;
    v21 = (void *)v3;
    v19 = (turi::neural_net *)objc_claimAutoreleasedReturnValue();
    turi::neural_net::MPSMatrixToVector(v19, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24[30], "objectAtIndexedSubscript:", i);
    v14 = (turi::neural_net *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)v6;
    turi::neural_net::MPSMatrixToVector(v14, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "encodeToCommandBuffer:inputGradientVector:inputValuesVector:inputMomentumVector:inputVelocityVector:resultValuesVector:", v18, v15, v9, v11, v13, v17);

    a1 = v24;
  }

}

void sub_217E8F718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_217E8F78C()
{
  JUMPOUT(0x217E8F760);
}

void sub_217E8F794()
{
  JUMPOUT(0x217E8F768);
}

void sub_217E8F79C()
{
  JUMPOUT(0x217E8F76CLL);
}

void sub_217E8F7A4()
{
  JUMPOUT(0x217E8F770);
}

void sub_217E8F7AC()
{
  JUMPOUT(0x217E8F774);
}

void sub_217E8F7B4()
{
  JUMPOUT(0x217E8F778);
}

void sub_217E8F7BC()
{
  JUMPOUT(0x217E8F77CLL);
}

void turi::neural_net::Layer::AllocImage(uint64_t a1, void *a2, int a3)
{
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;

  v22 = a2;
  v5 = *(int **)(a1 + 120);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  v9 = *(int *)(*(_QWORD *)(a1 + 144) + 12);
  objc_msgSend(MEMORY[0x24BDDE3B8], "imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:", 4, v8, v7, v5[3], 1, 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE3B8], "imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:", 4, v8, v7, v9, 1, 3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *(void **)(a1 + 16);
  v13 = MEMORY[0x24BDBD1A8];
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BDBD1A8];

  v14 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;

  if (v6 >= 1)
  {
    v15 = v6;
    do
    {
      v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE368]), "initWithDevice:imageDescriptor:", v22, v10);
      objc_msgSend(*(id *)(a1 + 16), "arrayByAddingObject:", v16);
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v17;

      --v15;
    }
    while (v15);
    if (a3)
    {
      do
      {
        v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE368]), "initWithDevice:imageDescriptor:", v22, v11);
        objc_msgSend(*(id *)(a1 + 24), "arrayByAddingObject:", v19);
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v20;

        --v6;
      }
      while (v6);
    }
  }

}

void sub_217E8F93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id turi::neural_net::Layer::AllocTempImageBatch(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  id v8;
  int *v9;
  int *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  v7 = a2;
  v8 = a3;
  v9 = *(int **)(a1 + 120);
  v10 = v9;
  if (a4)
    v10 = *(int **)(a1 + 144);
  v11 = *v9;
  objc_msgSend(MEMORY[0x24BDDE3B8], "imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:", 4, v9[2], v9[1], v10[3], 1, 3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE4F8], "defaultAllocator");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "imageBatchForCommandBuffer:imageDescriptor:kernel:count:", v7, v12, v8, v11);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void sub_217E8FA48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void turi::neural_net::ReLULayer::~ReLULayer(id *this)
{
  turi::neural_net::DropOutLayer::~DropOutLayer(this);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::ConvLayer::~ConvLayer(id *this)
{
  turi::neural_net::ConvLayer::~ConvLayer(this);
  JUMPOUT(0x219A19A08);
}

{

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
}

void turi::neural_net::BNLayer::~BNLayer(id *this)
{
  turi::neural_net::BNLayer::~BNLayer(this);
  JUMPOUT(0x219A19A08);
}

{

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
}

void turi::neural_net::DropOutLayer::~DropOutLayer(id *this)
{

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
}

{

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::SmceLossLayer::~SmceLossLayer(id *this)
{

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
}

{

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::LstmLayer::~LstmLayer(id *this)
{
  turi::neural_net::LstmLayer::~LstmLayer(this);
  JUMPOUT(0x219A19A08);
}

{
  *this = off_24D918210;
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::~__hash_table((uint64_t)(this + 41));

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

void turi::neural_net::Layer::~Layer(turi::neural_net::Layer *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &unk_24D918290;
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 16) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 12);
  if (v4)
  {
    *((_QWORD *)this + 13) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 9);
  if (v5)
  {
    *((_QWORD *)this + 10) = v5;
    operator delete(v5);
  }
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));

}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MPSMatrix * {__strong}>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,MPSMatrix * {__strong}>,0>(uint64_t a1)
{

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_217E90868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_217E90904(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MPSMatrix * {__strong}>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void _GLOBAL__sub_I_mps_layers_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 16);
  turi::neural_net::SAME = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 0);
  turi::neural_net::VALID = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

id turi::neural_net::createWeightMatrix(void *a1, unint64_t a2, int a3, int a4)
{
  id v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;

  v7 = a1;
  if (((1 << a2) & 0x22220) != 0)
    v8 = 1;
  else
    v8 = a4;
  if (((1 << a2) & 0x11244444) != 0)
    v9 = 1;
  else
    v9 = v8;
  if (((1 << a2) & 0x2488889) != 0)
    v10 = a3;
  else
    v10 = a4;
  if (((1 << a2) & 0x2488889) != 0)
    v11 = a4;
  else
    v11 = v9;
  v12 = a2 > 0x1C;
  if (a2 <= 0x1C)
    v13 = v10;
  else
    v13 = a4;
  if (v12)
    v14 = a4;
  else
    v14 = v11;
  v15 = v7;
  v16 = (void *)MEMORY[0x219A19FE4]();
  objc_msgSend(MEMORY[0x24BDDE460], "rowBytesForColumns:dataType:", v13, 268435488);
  v17 = 4 * v13;
  objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", v14, v13, v17, 268435488);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_retainAutorelease((id)objc_msgSend(v15, "newBufferWithLength:options:", v17 * v14, 0));
  bzero((void *)objc_msgSend(v19, "contents"), objc_msgSend(v19, "length"));
  v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v19, v18);

  objc_autoreleasePoolPop(v16);
  return v20;
}

void sub_217E90D74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::MxnetNameToMatrixId(const void **a1)
{
  unsigned __int8 v2;
  uint64_t v4;
  const void *v5[4];
  _QWORD v6[4];
  _QWORD v7[4];
  _QWORD v8[4];
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[4];
  _QWORD v12[4];
  _QWORD v13[4];
  _QWORD v14[4];
  _QWORD v15[4];
  _QWORD v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  if ((v2 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "i2h_i_weight");
    v5[3] = (const void *)3;
    std::string::basic_string[abi:ne180100]<0>(v6, "h2h_i_weight");
    v6[3] = 4;
    std::string::basic_string[abi:ne180100]<0>(v7, "h2h_i_bias");
    v7[3] = 6;
    std::string::basic_string[abi:ne180100]<0>(v8, "i2h_f_weight");
    v8[3] = 7;
    std::string::basic_string[abi:ne180100]<0>(v9, "h2h_f_weight");
    v9[3] = 8;
    std::string::basic_string[abi:ne180100]<0>(v10, "h2h_f_bias");
    v10[3] = 10;
    std::string::basic_string[abi:ne180100]<0>(v11, "i2h_c_weight");
    v11[3] = 11;
    std::string::basic_string[abi:ne180100]<0>(v12, "h2h_c_weight");
    v12[3] = 12;
    std::string::basic_string[abi:ne180100]<0>(v13, "h2h_c_bias");
    v13[3] = 14;
    std::string::basic_string[abi:ne180100]<0>(v14, "i2h_o_weight");
    v14[3] = 15;
    std::string::basic_string[abi:ne180100]<0>(v15, "h2h_o_weight");
    v15[3] = 16;
    std::string::basic_string[abi:ne180100]<0>(v16, "h2h_o_bias");
    v16[3] = 18;
    std::map<std::string,MPSRNNMatrixId>::map[abi:ne180100]((uint64_t)&turi::neural_net::MxnetNameToMatrixId(std::string)::MXnetNamesToMatId, v5, 12);
    v4 = 48;
    do
    {
      if (*((char *)&v5[v4 - 1] - 1) < 0)
        operator delete((void *)v5[v4 - 4]);
      v4 -= 4;
    }
    while (v4 * 8);
    __cxa_atexit((void (*)(void *))std::map<std::string,MPSRNNMatrixId>::~map[abi:ne180100], &turi::neural_net::MxnetNameToMatrixId(std::string)::MXnetNamesToMatId, &dword_217E69000);
  }
  return *(_QWORD *)(std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&turi::neural_net::MxnetNameToMatrixId(std::string)::MXnetNamesToMatId, a1)+ 56);
}

void sub_217E91010(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 384;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0)
      operator delete(*(void **)(v1 + v3 - 32));
    v3 -= 32;
    if (!v3)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string,MPSRNNMatrixId>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

id turi::neural_net::MPSMatrixToVector(turi::neural_net *this, MPSMatrix *a2)
{
  turi::neural_net *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;

  v2 = this;
  v3 = -[turi::neural_net dataType](v2, "dataType");
  v4 = -[turi::neural_net rows](v2, "rows");
  v5 = -[turi::neural_net rowBytes](v2, "rowBytes");
  objc_msgSend(MEMORY[0x24BDDE510], "vectorDescriptorWithLength:dataType:", v5 / ((v3 >> 3) & 0xF) * v4, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_alloc(MEMORY[0x24BDDE508]);
  -[turi::neural_net data](v2, "data");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v7, "initWithBuffer:descriptor:", v8, v6);

  return v9;
}

void sub_217E9117C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,MPSRNNMatrixId>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MPSRNNMatrixId> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_217E91214(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MPSRNNMatrixId> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::__construct_node<std::pair<std::string const,MPSRNNMatrixId> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::__construct_node<std::pair<std::string const,MPSRNNMatrixId> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_217E91334(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void __cxx_global_array_dtor()
{
  uint64_t v0;

  v0 = 0x120u;
  do
  {
    if ((char)turi::neural_net::lstm_weight_names_mxnet_format[v0 - 1] < 0)
      operator delete(*(void **)&turi::neural_net::lstm_weight_names_mxnet_format[v0 - 24]);
    v0 -= 24;
  }
  while (v0);
}

void _GLOBAL__sub_I_mps_lstm_helper_mm()
{
  void *v0;
  _QWORD *v1;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  v1 = std::string::basic_string[abi:ne180100]<0>(turi::neural_net::lstm_weight_names_mxnet_format, "i2h_i_weight");
  std::string::basic_string[abi:ne180100]<0>(v1 + 3, "h2h_i_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_254FF5ED0, "h2h_i_bias");
  std::string::basic_string[abi:ne180100]<0>(qword_254FF5EE8, "i2h_f_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_254FF5F00, "h2h_f_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_254FF5F18, "h2h_f_bias");
  std::string::basic_string[abi:ne180100]<0>(qword_254FF5F30, "i2h_c_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_254FF5F48, "h2h_c_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_254FF5F60, "h2h_c_bias");
  std::string::basic_string[abi:ne180100]<0>(qword_254FF5F78, "i2h_o_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_254FF5F90, "h2h_o_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_254FF5FA8, "h2h_o_bias");
  __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void sub_217E915AC(_Unwind_Exception *a1)
{
  unsigned __int8 *v1;

  _GLOBAL__sub_I_mps_lstm_helper_mm_cold_1(v1);
  _Unwind_Resume(a1);
}

_QWORD *turi::neural_net::createNetwork(int a1, __int128 **a2, uint64_t a3)
{
  _QWORD *v5;
  std::logic_error *exception;

  switch(a1)
  {
    case 0:
      v5 = (_QWORD *)operator new();
      turi::neural_net::SingleReLUNetwork::SingleReLUNetwork((uint64_t)v5, a2, a3);
      break;
    case 1:
      v5 = (_QWORD *)operator new();
      turi::neural_net::SingleConvNetwork::SingleConvNetwork((uint64_t)v5, a2, a3);
      break;
    case 2:
      v5 = (_QWORD *)operator new();
      turi::neural_net::SingleBNNetwork::SingleBNNetwork((uint64_t)v5, a2, a3);
      break;
    case 3:
      v5 = (_QWORD *)operator new();
      turi::neural_net::SingleMPNetwork::SingleMPNetwork((uint64_t)v5, a2, a3);
      break;
    case 4:
      v5 = (_QWORD *)operator new();
      turi::neural_net::Single1DConvNetwork::Single1DConvNetwork((uint64_t)v5, a2, a3);
      break;
    case 5:
      v5 = (_QWORD *)operator new();
      turi::neural_net::ODNetwork::ODNetwork(v5, (int **)a2, a3);
      break;
    case 6:
      v5 = (_QWORD *)operator new();
      turi::neural_net::SingleDropOutNetwork::SingleDropOutNetwork((uint64_t)v5, a2, a3);
      break;
    case 7:
      v5 = (_QWORD *)operator new();
      turi::neural_net::SingleFcNetwork::SingleFcNetwork((uint64_t)v5, a2, a3);
      break;
    case 8:
      v5 = (_QWORD *)operator new();
      turi::neural_net::SingleSoftMaxNetwork::SingleSoftMaxNetwork((uint64_t)v5, a2, a3);
      break;
    case 9:
      v5 = (_QWORD *)operator new();
      turi::neural_net::ActivityClassifierNetwork::ActivityClassifierNetwork((uint64_t)v5, (int **)a2, a3);
      break;
    case 10:
      v5 = (_QWORD *)operator new();
      turi::neural_net::SingleLstmNetwork::SingleLstmNetwork((uint64_t)v5, a2, a3);
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Undefined network.");
      __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return v5;
}

void sub_217E91820(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::MPSNetwork::~MPSNetwork(turi::neural_net::MPSNetwork *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24D9182F8;
  v4 = (char *)this + 8;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v6 + 80))(v2[v5]);
        v2 = (_QWORD *)*((_QWORD *)this + 1);
        v3 = (_QWORD *)*((_QWORD *)this + 2);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  v7 = *((_QWORD *)this + 4);
  if (v7)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v7 + 80))(*((_QWORD *)this + 4));
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  turi::neural_net::MPSNetwork::~MPSNetwork(this);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::MPSNetwork::Init(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16) - v8;
  if (v9)
  {
    v10 = 0;
    v11 = v9 >> 3;
    do
    {
      (*(void (**)(_QWORD, id, id, uint64_t, _QWORD, _QWORD, BOOL))(**(_QWORD **)(v8 + 8 * v10) + 16))(*(_QWORD *)(v8 + 8 * v10), v13, v7, a4, *(unsigned __int8 *)(a1 + 48), *(unsigned int *)(a1 + 44), v10 == v11 - 1);
      ++v10;
      v8 = *(_QWORD *)(a1 + 8);
      v11 = (*(_QWORD *)(a1 + 16) - v8) >> 3;
    }
    while (v10 < v11);
  }
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
    (*(void (**)(uint64_t, id, id, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 16))(v12, v13, v7, a4, 1, *(unsigned int *)(a1 + 44), 1);

}

void sub_217E91A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

MPSImageBatch *turi::neural_net::MPSNetwork::Forward(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  MPSImageBatch *v9;
  MPSImageBatch *v10;
  uint64_t v11;
  MPSImageBatch *v12;
  unint64_t v13;
  MPSImageBatch *v14;
  NSInteger v15;

  v7 = a2;
  v8 = a3;
  v9 = (MPSImageBatch *)v7;
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = v9;
  if (*(_QWORD *)(a1 + 16) != v11)
  {
    v13 = 0;
    v14 = v9;
    do
    {
      if ((_DWORD)a4)
      {
        if (*(_DWORD *)(*(_QWORD *)(v11 + 8 * v13) + 40) == 3)
          v15 = 3;
        else
          v15 = 1;
        MPSImageBatchIncrementReadCount(v14, v15);
        v11 = *(_QWORD *)(a1 + 8);
      }
      (***(void (****)(_QWORD, MPSImageBatch *, id, uint64_t))(v11 + 8 * v13))(*(_QWORD *)(v11 + 8 * v13), v14, v8, a4);
      v12 = (MPSImageBatch *)*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v13) + 16);

      ++v13;
      v11 = *(_QWORD *)(a1 + 8);
      v14 = v12;
    }
    while (v13 < (*(_QWORD *)(a1 + 16) - v11) >> 3);
  }

  return v12;
}

void sub_217E91B14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

MPSImageBatch *turi::neural_net::MPSNetwork::Backward(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  MPSImageBatch *v7;
  MPSImageBatch *v8;
  uint64_t v9;
  MPSImageBatch *v10;
  uint64_t v11;
  MPSImageBatch *v12;
  _DWORD *v13;

  v5 = a2;
  v6 = a3;
  v7 = (MPSImageBatch *)v5;
  v8 = v7;
  v9 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  v10 = v7;
  if ((int)v9 - 1 >= 0)
  {
    v11 = 8 * (v9 - 1);
    v12 = v7;
    do
    {
      v13 = *(_DWORD **)(*(_QWORD *)(a1 + 8) + v11);
      if (v13[10] == 3)
      {
        MPSImageBatchIncrementReadCount(v12, 1);
        v13 = *(_DWORD **)(*(_QWORD *)(a1 + 8) + v11);
      }
      (*(void (**)(_DWORD *, MPSImageBatch *, id))(*(_QWORD *)v13 + 8))(v13, v12, v6);
      v10 = (MPSImageBatch *)*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + v11) + 24);

      LODWORD(v9) = v9 - 1;
      v11 -= 8;
      v12 = v10;
    }
    while ((int)v9 > 0);
  }

  return v10;
}

void sub_217E91C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::MPSNetwork::Load(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(result + 16) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 24))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 8);
    }
    while (v5 < (*(_QWORD *)(v4 + 16) - v2) >> 3);
  }
  return result;
}

void turi::neural_net::MPSNetwork::Export(turi::neural_net::MPSNetwork *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  const void **v6;
  const void **v7;

  a2[2] = 0;
  a2[1] = 0;
  *a2 = (uint64_t)(a2 + 1);
  v3 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) != v3)
  {
    v5 = 0;
    do
    {
      (*(void (**)(const void ***__return_ptr))(**(_QWORD **)(v3 + 8 * v5) + 32))(&v6);
      std::map<std::string,turi::neural_net::shared_float_array>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>>(a2, v6, &v7);
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v6, v7);
      ++v5;
      v3 = *((_QWORD *)this + 1);
    }
    while (v5 < (*((_QWORD *)this + 2) - v3) >> 3);
  }
}

void sub_217E91D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v11, *(_QWORD **)(v11 + 8));
  _Unwind_Resume(a1);
}

void turi::neural_net::MPSNetwork::GpuUpdate(uint64_t a1, void *a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;

  v5 = a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v3)
  {
    v4 = 0;
    do
    {
      (*(void (**)(_QWORD, id))(**(_QWORD **)(v3 + 8 * v4) + 48))(*(_QWORD *)(v3 + 8 * v4), v5);
      ++v4;
      v3 = *(_QWORD *)(a1 + 8);
    }
    while (v4 < (*(_QWORD *)(a1 + 16) - v3) >> 3);
  }

}

void sub_217E91DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id turi::neural_net::MPSNetwork::Loss(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  std::logic_error *exception;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a1 + 32);
  if (!v10)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Calling network Loss without defining a loss layer");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  (*(void (**)(uint64_t, id, id, id))(*(_QWORD *)v10 + 88))(v10, v7, v8, v9);
  v11 = *(id *)(*(_QWORD *)(a1 + 32) + 24);

  return v11;
}

void sub_217E91E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  __cxa_free_exception(v4);

  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SingleReLUNetwork::SingleReLUNetwork(uint64_t a1, __int128 **a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  _OWORD *v11;
  char *v12;
  __int128 v14;
  void *__p;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  _OWORD *v20;
  void *v21;
  void *v22;
  _DWORD *v23;
  std::string v24;

  v5 = (_QWORD *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *v5 = &unk_24D918328;
  v6 = (uint64_t **)(v5 + 1);
  v14 = **a2;
  v7 = *((_QWORD *)*a2 + 2);
  v8 = *((_DWORD *)*a2 + 6);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v5 + 1), 1uLL);
  v9 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v24, "relu0");
  v10 = operator new(4uLL);
  v21 = v10;
  *v10 = 0;
  v22 = v10 + 1;
  v23 = v10 + 1;
  v11 = operator new(0x10uLL);
  v18 = v11;
  *v11 = v14;
  v19 = v11 + 1;
  v20 = v11 + 1;
  v12 = (char *)operator new(0x10uLL);
  v16 = v12 + 16;
  v17 = v12 + 16;
  *(_DWORD *)v12 = v14;
  *(_QWORD *)(v12 + 4) = v7;
  *((_DWORD *)v12 + 3) = v8;
  __p = v12;
  turi::neural_net::ReLULayer::ReLULayer(v9, &v24, (uint64_t)&v21, (uint64_t)&v18, (uint64_t)&__p);
  **v6 = v9;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E92018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  turi::neural_net::MPSNetwork *v18;
  uint64_t v19;
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  MEMORY[0x219A19A08](v19, 0x1093C4050D042D5);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::MPSNetwork::MPSNetwork(uint64_t a1, uint64_t a2)
{
  float array_map_scalar;
  void *__p[2];
  char v7;

  *(_QWORD *)a1 = &off_24D9182F8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "mode");
  array_map_scalar = turi::neural_net::get_array_map_scalar(a2, (const void **)__p, 0.0);
  *(_DWORD *)(a1 + 44) = array_map_scalar;
  *(_BYTE *)(a1 + 48) = (array_map_scalar & 0xFFFFFFFD) == 0;
  if (v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_217E9214C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  void *v18;

  if (a15 < 0)
    operator delete(__p);
  v18 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v15 + 16) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::SingleReLUNetwork::~SingleReLUNetwork(turi::neural_net::SingleReLUNetwork *this)
{
  turi::neural_net::MPSNetwork::~MPSNetwork(this);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::ReLULayer::ReLULayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)a1 = &unk_24D917E60;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 96 != a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 96), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v9 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  if (a1 + 120 != a4)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  if (a1 + 144 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_217E92278(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SingleConvNetwork::SingleConvNetwork(uint64_t a1, __int128 **a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  _OWORD *v11;
  char *v12;
  __int128 v14;
  void *__p;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  _OWORD *v20;
  void *v21;
  void *v22;
  char *v23;
  std::string v24;

  v5 = (_QWORD *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *v5 = &unk_24D918360;
  v6 = (uint64_t **)(v5 + 1);
  v14 = **a2;
  v7 = *((_QWORD *)*a2 + 2);
  v8 = *((_DWORD *)*a2 + 6);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v5 + 1), 1uLL);
  v9 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v24, "conv0");
  v10 = operator new(0x20uLL);
  v22 = v10 + 8;
  v23 = (char *)(v10 + 8);
  *(_QWORD *)v10 = 0x300000003;
  v10[2] = HIDWORD(v14);
  v10[3] = v8;
  *((_OWORD *)v10 + 1) = xmmword_2186C17C0;
  v21 = v10;
  v11 = operator new(0x10uLL);
  v18 = v11;
  *v11 = v14;
  v19 = v11 + 1;
  v20 = v11 + 1;
  v12 = (char *)operator new(0x10uLL);
  v16 = v12 + 16;
  v17 = v12 + 16;
  *(_DWORD *)v12 = v14;
  *(_QWORD *)(v12 + 4) = v7;
  *((_DWORD *)v12 + 3) = v8;
  __p = v12;
  turi::neural_net::ConvLayer::ConvLayer(v9, &v24, (uint64_t)&v21, (uint64_t)&v18, (uint64_t)&__p);
  **v6 = v9;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E92414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  turi::neural_net::MPSNetwork *v18;
  uint64_t v19;
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  MEMORY[0x219A19A08](v19, 0x1093C409E45F289);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::ConvLayer::ConvLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)a1 = &unk_24D917EF0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 40) = 2;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 72 != a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v9 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  if (a1 + 120 != a4)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  if (a1 + 144 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_217E92580(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SingleBNNetwork::SingleBNNetwork(uint64_t a1, __int128 **a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  _OWORD *v11;
  char *v12;
  __int128 v14;
  void *__p;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  _OWORD *v20;
  void *v21;
  void *v22;
  _DWORD *v23;
  std::string v24;

  v5 = (_QWORD *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *v5 = &unk_24D918398;
  v6 = (uint64_t **)(v5 + 1);
  v14 = **a2;
  v7 = *((_QWORD *)*a2 + 2);
  v8 = *((_DWORD *)*a2 + 6);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v5 + 1), 1uLL);
  v9 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v24, "bn0");
  v10 = operator new(4uLL);
  v21 = v10;
  *v10 = 5;
  v22 = v10 + 1;
  v23 = v10 + 1;
  v11 = operator new(0x10uLL);
  v18 = v11;
  *v11 = v14;
  v19 = v11 + 1;
  v20 = v11 + 1;
  v12 = (char *)operator new(0x10uLL);
  v16 = v12 + 16;
  v17 = v12 + 16;
  *(_DWORD *)v12 = v14;
  *(_QWORD *)(v12 + 4) = v7;
  *((_DWORD *)v12 + 3) = v8;
  __p = v12;
  turi::neural_net::BNLayer::BNLayer(v9, &v24, (uint64_t)&v21, (uint64_t)&v18, (uint64_t)&__p);
  **v6 = v9;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E9270C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  turi::neural_net::MPSNetwork *v18;
  uint64_t v19;
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  MEMORY[0x219A19A08](v19, 0x1093C4009BD9334);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::BNLayer::BNLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  void *v10;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)a1 = &unk_24D917F70;
  *(_WORD *)(a1 + 168) = 256;
  *(_BYTE *)(a1 + 170) = 1;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 40) = 3;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 72 != a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v9 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  v10 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;

  if (a1 + 120 != a4)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  if (a1 + 144 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_217E92894(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SingleMPNetwork::SingleMPNetwork(uint64_t a1, __int128 **a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  _OWORD *v12;
  char *v13;
  __int128 v15;
  void *__p;
  void *v17;
  char *v18;
  void *v19;
  void *v20;
  _OWORD *v21;
  void *v22;
  void *v23;
  _OWORD *v24;
  std::string v25;

  v5 = (_QWORD *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *v5 = &unk_24D9183D0;
  v6 = (uint64_t **)(v5 + 1);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v5 + 1), 1uLL);
  v15 = **a2;
  v7 = *((_QWORD *)*a2 + 2);
  v8 = *((_DWORD *)*a2 + 6);
  v9 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v25, "mp0");
  v10 = operator new(0x10uLL);
  v22 = v10;
  *(_QWORD *)&v11 = 0x200000002;
  *((_QWORD *)&v11 + 1) = 0x200000002;
  *v10 = v11;
  v23 = v10 + 1;
  v24 = v10 + 1;
  v12 = operator new(0x10uLL);
  v19 = v12;
  *v12 = v15;
  v20 = v12 + 1;
  v21 = v12 + 1;
  v13 = (char *)operator new(0x10uLL);
  v17 = v13 + 16;
  v18 = v13 + 16;
  *(_DWORD *)v13 = v15;
  *(_QWORD *)(v13 + 4) = v7;
  *((_DWORD *)v13 + 3) = v8;
  __p = v13;
  turi::neural_net::MaxPoolLayer::MaxPoolLayer(v9, &v25, (uint64_t)&v22, (uint64_t)&v19, (uint64_t)&__p);
  **v6 = v9;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E92A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  turi::neural_net::MPSNetwork *v18;
  uint64_t v19;
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  MEMORY[0x219A19A08](v19, 0x1093C4050D042D5);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::MaxPoolLayer::MaxPoolLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)a1 = &unk_24D917FF0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 40) = 4;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 72 != a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v9 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  if (a1 + 120 != a4)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  if (a1 + 144 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_217E92B9C(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::Single1DConvNetwork::Single1DConvNetwork(uint64_t a1, __int128 **a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  _OWORD *v11;
  char *v12;
  __int128 v14;
  void *__p;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  _OWORD *v20;
  void *v21;
  void *v22;
  char *v23;
  std::string v24;

  v5 = (_QWORD *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *v5 = &unk_24D918408;
  v6 = (uint64_t **)(v5 + 1);
  v14 = **a2;
  v7 = *((_QWORD *)*a2 + 2);
  v8 = *((_DWORD *)*a2 + 6);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v5 + 1), 1uLL);
  v9 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v24, "conv0");
  v10 = operator new(0x20uLL);
  v22 = v10 + 8;
  v23 = (char *)(v10 + 8);
  *(_QWORD *)v10 = 0x300000001;
  v10[2] = HIDWORD(v14);
  v10[3] = v8;
  *((_OWORD *)v10 + 1) = xmmword_2186C1B80;
  v21 = v10;
  v11 = operator new(0x10uLL);
  v18 = v11;
  *v11 = v14;
  v19 = v11 + 1;
  v20 = v11 + 1;
  v12 = (char *)operator new(0x10uLL);
  v16 = v12 + 16;
  v17 = v12 + 16;
  *(_DWORD *)v12 = v14;
  *(_QWORD *)(v12 + 4) = v7;
  *((_DWORD *)v12 + 3) = v8;
  __p = v12;
  turi::neural_net::ConvLayer::ConvLayer(v9, &v24, (uint64_t)&v21, (uint64_t)&v18, (uint64_t)&__p);
  **v6 = v9;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E92D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  turi::neural_net::MPSNetwork *v18;
  uint64_t v19;
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  MEMORY[0x219A19A08](v19, 0x1093C409E45F289);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

_QWORD *turi::neural_net::ODNetwork::ODNetwork(_QWORD *a1, int **a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  unint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  unint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  _DWORD *v47;
  _DWORD *v48;
  unint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 v63;
  unint64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  _OWORD *v68;
  unint64_t v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  unint64_t v94;
  uint64_t *v95;
  _QWORD *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  int v109;
  uint64_t v110;
  _DWORD *v111;
  void *__p;
  void *v113;
  _DWORD *v114;
  void *v115;
  void *v116;
  _DWORD *v117;
  void *v118;
  void *v119;
  _DWORD *v120;
  std::string v121;
  std::string v122;

  *(_QWORD *)turi::neural_net::MPSNetwork::MPSNetwork((uint64_t)a1, a3) = &unk_24D918440;
  v6 = **a2;
  v5 = (*a2)[1];
  v7 = (*a2)[2];
  v109 = (*a2)[6];
  v8 = operator new(0x24uLL);
  v9 = 0;
  v8[8] = 1024;
  *(_OWORD *)v8 = xmmword_2186C1A4C;
  *((_OWORD *)v8 + 1) = unk_2186C1A5C;
  v10 = (char **)(a1 + 1);
  v110 = (uint64_t)(a1 + 3);
  v111 = v8;
  do
  {
    std::to_string(&v122, v9);
    v11 = operator new();
    std::operator+<char>();
    v12 = *(_QWORD *)&v111[v9];
    v13 = operator new(0x20uLL);
    v119 = v13 + 4;
    v120 = v13 + 4;
    *v13 = 0x300000003;
    v13[1] = v12;
    *((_OWORD *)v13 + 1) = xmmword_2186C17C0;
    v117 = 0;
    v118 = v13;
    v115 = 0;
    v116 = 0;
    __p = 0;
    v113 = 0;
    v114 = 0;
    turi::neural_net::ConvLayer::ConvLayer(v11, &v121, (uint64_t)&v118, (uint64_t)&v115, (uint64_t)&__p);
    v15 = (uint64_t *)a1[2];
    v14 = a1[3];
    if ((unint64_t)v15 >= v14)
    {
      v17 = ((char *)v15 - *v10) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v18 = v14 - (_QWORD)*v10;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v110, v20);
      else
        v21 = 0;
      v22 = (uint64_t *)&v21[8 * v17];
      *v22 = v11;
      v16 = v22 + 1;
      v24 = (char *)a1[1];
      v23 = (char *)a1[2];
      if (v23 != v24)
      {
        do
        {
          v25 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *--v22 = v25;
        }
        while (v23 != v24);
        v23 = *v10;
      }
      a1[1] = v22;
      a1[2] = v16;
      a1[3] = &v21[8 * v20];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v15 = v11;
      v16 = v15 + 1;
    }
    a1[2] = v16;
    if (__p)
    {
      v113 = __p;
      operator delete(__p);
    }
    if (v115)
    {
      v116 = v115;
      operator delete(v115);
    }
    if (v118)
    {
      v119 = v118;
      operator delete(v118);
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    v26 = operator new();
    std::operator+<char>();
    v27 = v9 + 1;
    v28 = v111[v9 + 1];
    v29 = operator new(4uLL);
    v118 = v29;
    *v29 = v28;
    v119 = v29 + 1;
    v120 = v29 + 1;
    v30 = operator new(0x10uLL);
    v116 = v30 + 4;
    v117 = v30 + 4;
    *v30 = v6;
    v30[1] = v5;
    v30[2] = v7;
    v30[3] = v28;
    v115 = v30;
    v31 = operator new(0x10uLL);
    v113 = v31 + 4;
    v114 = v31 + 4;
    *v31 = v6;
    v31[1] = v5;
    v31[2] = v7;
    v31[3] = v28;
    __p = v31;
    turi::neural_net::BNLayer::BNLayer(v26, &v121, (uint64_t)&v118, (uint64_t)&v115, (uint64_t)&__p);
    v33 = (uint64_t *)a1[2];
    v32 = a1[3];
    if ((unint64_t)v33 >= v32)
    {
      v35 = ((char *)v33 - *v10) >> 3;
      if ((unint64_t)(v35 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v36 = v32 - (_QWORD)*v10;
      v37 = v36 >> 2;
      if (v36 >> 2 <= (unint64_t)(v35 + 1))
        v37 = v35 + 1;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      if (v38)
        v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v110, v38);
      else
        v39 = 0;
      v40 = (uint64_t *)&v39[8 * v35];
      *v40 = v26;
      v34 = v40 + 1;
      v42 = (char *)a1[1];
      v41 = (char *)a1[2];
      if (v41 != v42)
      {
        do
        {
          v43 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *--v40 = v43;
        }
        while (v41 != v42);
        v41 = *v10;
      }
      a1[1] = v40;
      a1[2] = v34;
      a1[3] = &v39[8 * v38];
      if (v41)
        operator delete(v41);
    }
    else
    {
      *v33 = v26;
      v34 = v33 + 1;
    }
    a1[2] = v34;
    if (__p)
    {
      v113 = __p;
      operator delete(__p);
    }
    if (v115)
    {
      v116 = v115;
      operator delete(v115);
    }
    if (v118)
    {
      v119 = v118;
      operator delete(v118);
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    v44 = operator new();
    std::operator+<char>();
    v45 = operator new(4uLL);
    v118 = v45;
    *v45 = 1036831949;
    v119 = v45 + 1;
    v120 = v45 + 1;
    v46 = v111[v27];
    v47 = operator new(0x10uLL);
    v116 = v47 + 4;
    v117 = v47 + 4;
    *v47 = v6;
    v47[1] = v5;
    v47[2] = v7;
    v47[3] = v46;
    v115 = v47;
    v48 = operator new(0x10uLL);
    v113 = v48 + 4;
    v114 = v48 + 4;
    *v48 = v6;
    v48[1] = v5;
    v48[2] = v7;
    v48[3] = v46;
    __p = v48;
    turi::neural_net::ReLULayer::ReLULayer(v44, &v121, (uint64_t)&v118, (uint64_t)&v115, (uint64_t)&__p);
    v50 = (uint64_t *)a1[2];
    v49 = a1[3];
    if ((unint64_t)v50 >= v49)
    {
      v52 = ((char *)v50 - *v10) >> 3;
      if ((unint64_t)(v52 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v53 = v49 - (_QWORD)*v10;
      v54 = v53 >> 2;
      if (v53 >> 2 <= (unint64_t)(v52 + 1))
        v54 = v52 + 1;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
        v55 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v55 = v54;
      if (v55)
        v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v110, v55);
      else
        v56 = 0;
      v57 = (uint64_t *)&v56[8 * v52];
      *v57 = v44;
      v51 = v57 + 1;
      v59 = (char *)a1[1];
      v58 = (char *)a1[2];
      if (v58 != v59)
      {
        do
        {
          v60 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *--v57 = v60;
        }
        while (v58 != v59);
        v58 = *v10;
      }
      a1[1] = v57;
      a1[2] = v51;
      a1[3] = &v56[8 * v55];
      if (v58)
        operator delete(v58);
    }
    else
    {
      *v50 = v44;
      v51 = v50 + 1;
    }
    a1[2] = v51;
    if (__p)
    {
      v113 = __p;
      operator delete(__p);
    }
    if (v115)
    {
      v116 = v115;
      operator delete(v115);
    }
    if (v118)
    {
      v119 = v118;
      operator delete(v118);
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    if (v9 > 4)
    {
      if (v9 == 5)
      {
        v67 = operator new();
        std::operator+<char>();
        v68 = operator new(0x10uLL);
        v117 = 0;
        v118 = v68;
        *v68 = xmmword_2186C17D0;
        v119 = v68 + 1;
        v120 = v68 + 1;
        v115 = 0;
        v116 = 0;
        __p = 0;
        v113 = 0;
        v114 = 0;
        turi::neural_net::MaxPoolLayer::MaxPoolLayer(v67, &v121, (uint64_t)&v118, (uint64_t)&v115, (uint64_t)&__p);
        v70 = (uint64_t *)a1[2];
        v69 = a1[3];
        if ((unint64_t)v70 >= v69)
        {
          v77 = ((char *)v70 - *v10) >> 3;
          if ((unint64_t)(v77 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v78 = v69 - (_QWORD)*v10;
          v79 = v78 >> 2;
          if (v78 >> 2 <= (unint64_t)(v77 + 1))
            v79 = v77 + 1;
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
            v80 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v80 = v79;
          if (v80)
            v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v110, v80);
          else
            v81 = 0;
          v88 = (uint64_t *)&v81[8 * v77];
          *v88 = v67;
          v71 = v88 + 1;
          v90 = (char *)a1[1];
          v89 = (char *)a1[2];
          if (v89 != v90)
          {
            do
            {
              v91 = *((_QWORD *)v89 - 1);
              v89 -= 8;
              *--v88 = v91;
            }
            while (v89 != v90);
            v89 = *v10;
          }
          a1[1] = v88;
          a1[2] = v71;
          a1[3] = &v81[8 * v80];
          if (v89)
            operator delete(v89);
        }
        else
        {
          *v70 = v67;
          v71 = v70 + 1;
        }
        a1[2] = v71;
        if (__p)
        {
          v113 = __p;
          operator delete(__p);
        }
        if (v115)
        {
          v116 = v115;
          operator delete(v115);
        }
        if (v118)
        {
          v119 = v118;
          operator delete(v118);
        }
        if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v121.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v61 = operator new();
      std::operator+<char>();
      v62 = operator new(0x10uLL);
      v117 = 0;
      v118 = v62;
      *(_QWORD *)&v63 = 0x200000002;
      *((_QWORD *)&v63 + 1) = 0x200000002;
      *v62 = v63;
      v119 = v62 + 1;
      v120 = v62 + 1;
      v115 = 0;
      v116 = 0;
      __p = 0;
      v113 = 0;
      v114 = 0;
      turi::neural_net::MaxPoolLayer::MaxPoolLayer(v61, &v121, (uint64_t)&v118, (uint64_t)&v115, (uint64_t)&__p);
      v65 = (uint64_t *)a1[2];
      v64 = a1[3];
      if ((unint64_t)v65 >= v64)
      {
        v72 = ((char *)v65 - *v10) >> 3;
        if ((unint64_t)(v72 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v73 = v64 - (_QWORD)*v10;
        v74 = v73 >> 2;
        if (v73 >> 2 <= (unint64_t)(v72 + 1))
          v74 = v72 + 1;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v75 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v75 = v74;
        if (v75)
          v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v110, v75);
        else
          v76 = 0;
        v82 = (uint64_t *)&v76[8 * v72];
        *v82 = v61;
        v66 = v82 + 1;
        v84 = (char *)a1[1];
        v83 = (char *)a1[2];
        if (v83 != v84)
        {
          do
          {
            v85 = *((_QWORD *)v83 - 1);
            v83 -= 8;
            *--v82 = v85;
          }
          while (v83 != v84);
          v83 = *v10;
        }
        a1[1] = v82;
        a1[2] = v66;
        a1[3] = &v76[8 * v75];
        if (v83)
          operator delete(v83);
      }
      else
      {
        *v65 = v61;
        v66 = v65 + 1;
      }
      a1[2] = v66;
      if (__p)
      {
        v113 = __p;
        operator delete(__p);
      }
      if (v115)
      {
        v116 = v115;
        operator delete(v115);
      }
      if (v118)
      {
        v119 = v118;
        operator delete(v118);
      }
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      if (v5 >= 0)
        v86 = v5;
      else
        v86 = v5 + 1;
      v5 = v86 >> 1;
      if (v7 >= 0)
        v87 = v7;
      else
        v87 = v7 + 1;
      v7 = v87 >> 1;
    }
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v122.__r_.__value_.__l.__data_);
    v9 = v27;
  }
  while (v27 != 8);
  v92 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v122, "conv8");
  v93 = operator new(0x20uLL);
  v121.__r_.__value_.__l.__size_ = (std::string::size_type)(v93 + 8);
  v121.__r_.__value_.__r.__words[2] = (std::string::size_type)(v93 + 8);
  *(_QWORD *)v93 = 0x100000001;
  v93[2] = 1024;
  v93[3] = v109;
  *((_OWORD *)v93 + 1) = xmmword_2186C17E0;
  v120 = 0;
  v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
  v118 = 0;
  v119 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  turi::neural_net::ConvLayer::ConvLayer(v92, &v122, (uint64_t)&v121, (uint64_t)&v118, (uint64_t)&v115);
  v95 = (uint64_t *)a1[2];
  v94 = a1[3];
  if ((unint64_t)v95 >= v94)
  {
    v98 = ((char *)v95 - *v10) >> 3;
    if ((unint64_t)(v98 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v99 = v94 - (_QWORD)*v10;
    v100 = v99 >> 2;
    if (v99 >> 2 <= (unint64_t)(v98 + 1))
      v100 = v98 + 1;
    if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
      v101 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v101 = v100;
    if (v101)
      v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v110, v101);
    else
      v102 = 0;
    v103 = (uint64_t *)&v102[8 * v98];
    v104 = &v102[8 * v101];
    *v103 = v92;
    v96 = v103 + 1;
    v106 = (char *)a1[1];
    v105 = (char *)a1[2];
    if (v105 != v106)
    {
      do
      {
        v107 = *((_QWORD *)v105 - 1);
        v105 -= 8;
        *--v103 = v107;
      }
      while (v105 != v106);
      v105 = *v10;
    }
    a1[1] = v103;
    a1[2] = v96;
    a1[3] = v104;
    v97 = v111;
    if (v105)
      operator delete(v105);
  }
  else
  {
    *v95 = v92;
    v96 = v95 + 1;
    v97 = v111;
  }
  a1[2] = v96;
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  if (v121.__r_.__value_.__r.__words[0])
  {
    v121.__r_.__value_.__l.__size_ = v121.__r_.__value_.__r.__words[0];
    operator delete(v121.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
  operator delete(v97);
  return a1;
}

void sub_217E93808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  turi::neural_net::MPSNetwork *v31;
  uint64_t v32;
  uint64_t v33;

  if (*(char *)(v33 - 105) < 0)
    operator delete(*(void **)(v33 - 128));
  MEMORY[0x219A19A08](v32, 0x1093C409E45F289);
  operator delete(__p);
  turi::neural_net::MPSNetwork::~MPSNetwork(v31);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SingleDropOutNetwork::SingleDropOutNetwork(uint64_t a1, __int128 **a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  char *v12;
  __int128 v14;
  void *__p;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  _OWORD *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  std::string v24;

  v5 = (_QWORD *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *v5 = &unk_24D918478;
  v6 = (uint64_t **)(v5 + 1);
  v14 = **a2;
  v7 = *((_QWORD *)*a2 + 2);
  v8 = *((_DWORD *)*a2 + 6);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v5 + 1), 1uLL);
  v9 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v24, "do0");
  v10 = operator new(8uLL);
  v21 = v10;
  *v10 = -4294967246;
  v22 = v10 + 1;
  v23 = v10 + 1;
  v11 = operator new(0x10uLL);
  v18 = v11;
  *v11 = v14;
  v19 = v11 + 1;
  v20 = v11 + 1;
  v12 = (char *)operator new(0x10uLL);
  v16 = v12 + 16;
  v17 = v12 + 16;
  *(_DWORD *)v12 = v14;
  *(_QWORD *)(v12 + 4) = v7;
  *((_DWORD *)v12 + 3) = v8;
  __p = v12;
  turi::neural_net::DropOutLayer::DropOutLayer(v9, &v24, (uint64_t)&v21, (uint64_t)&v18, (uint64_t)&__p);
  **v6 = v9;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E93CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  turi::neural_net::MPSNetwork *v18;
  uint64_t v19;
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  MEMORY[0x219A19A08](v19, 0x1093C4050D042D5);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::DropOutLayer::DropOutLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)a1 = &unk_24D918070;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 40) = 5;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 72 != a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v9 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  if (a1 + 120 != a4)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  if (a1 + 144 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_217E93E1C(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::ActivityClassifierNetwork::ActivityClassifierNetwork(uint64_t a1, int **a2, uint64_t a3)
{
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  float array_map_scalar;
  float v15;
  uint64_t v16;
  char *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  char **v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  unint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  unint64_t v72;
  uint64_t *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  __int128 v87;
  _DWORD *v88;
  _DWORD *v89;
  unint64_t v90;
  uint64_t *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t *v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD *v105;
  unint64_t v106;
  uint64_t *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  _DWORD *v121;
  _DWORD *v122;
  unint64_t v123;
  uint64_t *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t *v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  _QWORD *v138;
  _DWORD *v139;
  _DWORD *v140;
  unint64_t v141;
  uint64_t *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t *v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  _DWORD *v155;
  __int128 v156;
  _DWORD *v157;
  _DWORD *v158;
  unint64_t v159;
  uint64_t *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  uint64_t *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  _DWORD *v173;
  _DWORD *v174;
  unint64_t v175;
  uint64_t *v176;
  _QWORD *v177;
  uint64_t v178;
  _DWORD *v179;
  _DWORD *v180;
  _DWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  uint64_t *v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  int v193;
  void *v194;
  void *v195;
  _DWORD *v196;
  void *v197;
  void *v198;
  _DWORD *v199;
  void *v200;
  void *v201;
  _DWORD *v202;
  std::string __p;

  *(_QWORD *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3) = &unk_24D9184B0;
  v6 = *a2;
  v7 = **a2;
  v8 = (*a2)[1];
  v9 = (*a2)[2];
  v10 = v6[3];
  v12 = v6[4];
  v11 = v6[5];
  v13 = v6[6];
  std::string::basic_string[abi:ne180100]<0>(&__p, "ac_pred_window");
  array_map_scalar = turi::neural_net::get_array_map_scalar(a3, (const void **)&__p.__r_.__value_.__l.__data_, (float)(v9 / v11));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ac_seq_len");
  v15 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__p.__r_.__value_.__l.__data_, (float)v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
  v17 = (char *)operator new(0x20uLL);
  v201 = v17 + 32;
  v202 = v17 + 32;
  *(_DWORD *)v17 = 1;
  *((_DWORD *)v17 + 1) = (int)array_map_scalar;
  *((_DWORD *)v17 + 2) = v10;
  *((_DWORD *)v17 + 3) = 64;
  *((_DWORD *)v17 + 4) = (int)array_map_scalar;
  *(_QWORD *)(v17 + 20) = 0x100000001;
  *((_DWORD *)v17 + 7) = 1;
  v200 = v17;
  v18 = operator new(0x10uLL);
  v193 = v13;
  v198 = v18 + 4;
  v199 = v18 + 4;
  *v18 = v7;
  v18[1] = v8;
  v18[2] = v9;
  v18[3] = v10;
  v197 = v18;
  v19 = operator new(0x10uLL);
  v20 = (int)v15;
  v195 = v19 + 4;
  v196 = v19 + 4;
  *v19 = v7;
  v19[1] = v12;
  v19[2] = (int)v15;
  v19[3] = 64;
  v194 = v19;
  turi::neural_net::ConvLayer::ConvLayer(v16, &__p, (uint64_t)&v200, (uint64_t)&v197, (uint64_t)&v194);
  v21 = (char **)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 24);
  v23 = *(uint64_t **)(a1 + 16);
  if ((unint64_t)v23 >= v22)
  {
    v25 = ((char *)v23 - *v21) >> 3;
    if ((unint64_t)(v25 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v26 = v22 - (_QWORD)*v21;
    v27 = v26 >> 2;
    if (v26 >> 2 <= (unint64_t)(v25 + 1))
      v27 = v25 + 1;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v27;
    if (v28)
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 24, v28);
    else
      v29 = 0;
    v30 = (uint64_t *)&v29[8 * v25];
    v31 = &v29[8 * v28];
    *v30 = v16;
    v24 = v30 + 1;
    v33 = *(char **)(a1 + 8);
    v32 = *(char **)(a1 + 16);
    if (v32 != v33)
    {
      do
      {
        v34 = *((_QWORD *)v32 - 1);
        v32 -= 8;
        *--v30 = v34;
      }
      while (v32 != v33);
      v32 = *v21;
    }
    *(_QWORD *)(a1 + 8) = v30;
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(a1 + 24) = v31;
    if (v32)
      operator delete(v32);
  }
  else
  {
    *v23 = v16;
    v24 = v23 + 1;
  }
  *(_QWORD *)(a1 + 16) = v24;
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v35 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "relu1");
  v36 = operator new(4uLL);
  v200 = v36;
  *v36 = 0;
  v201 = v36 + 1;
  v202 = v36 + 1;
  v37 = operator new(0x10uLL);
  v198 = v37 + 4;
  v199 = v37 + 4;
  *v37 = v7;
  v37[1] = v8;
  v37[2] = v20;
  v37[3] = 64;
  v197 = v37;
  v38 = operator new(0x10uLL);
  v195 = v38 + 4;
  v196 = v38 + 4;
  *v38 = v7;
  v38[1] = v12;
  v38[2] = v20;
  v38[3] = 64;
  v194 = v38;
  turi::neural_net::ReLULayer::ReLULayer(v35, &__p, (uint64_t)&v200, (uint64_t)&v197, (uint64_t)&v194);
  v40 = *(uint64_t **)(a1 + 16);
  v39 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v40 >= v39)
  {
    v42 = ((char *)v40 - *v21) >> 3;
    if ((unint64_t)(v42 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v43 = v39 - (_QWORD)*v21;
    v44 = v43 >> 2;
    if (v43 >> 2 <= (unint64_t)(v42 + 1))
      v44 = v42 + 1;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v45 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v45 = v44;
    if (v45)
      v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 24, v45);
    else
      v46 = 0;
    v47 = (uint64_t *)&v46[8 * v42];
    v48 = &v46[8 * v45];
    *v47 = v35;
    v41 = v47 + 1;
    v50 = *(char **)(a1 + 8);
    v49 = *(char **)(a1 + 16);
    if (v49 != v50)
    {
      do
      {
        v51 = *((_QWORD *)v49 - 1);
        v49 -= 8;
        *--v47 = v51;
      }
      while (v49 != v50);
      v49 = *v21;
    }
    *(_QWORD *)(a1 + 8) = v47;
    *(_QWORD *)(a1 + 16) = v41;
    *(_QWORD *)(a1 + 24) = v48;
    if (v49)
      operator delete(v49);
  }
  else
  {
    *v40 = v35;
    v41 = v40 + 1;
  }
  *(_QWORD *)(a1 + 16) = v41;
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*(_DWORD *)(a1 + 44))
  {
    v52 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "do2");
    v53 = operator new(8uLL);
    v200 = v53;
    *v53 = -4294967216;
    v201 = v53 + 1;
    v202 = v53 + 1;
    v54 = operator new(0x10uLL);
    v198 = v54 + 4;
    v199 = v54 + 4;
    *v54 = v7;
    v54[1] = v8;
    v54[2] = v20;
    v54[3] = 64;
    v197 = v54;
    v55 = operator new(0x10uLL);
    v195 = v55 + 4;
    v196 = v55 + 4;
    *v55 = v7;
    v55[1] = v12;
    v55[2] = v20;
    v55[3] = 64;
    v194 = v55;
    turi::neural_net::DropOutLayer::DropOutLayer(v52, &__p, (uint64_t)&v200, (uint64_t)&v197, (uint64_t)&v194);
    v57 = *(uint64_t **)(a1 + 16);
    v56 = *(_QWORD *)(a1 + 24);
    if ((unint64_t)v57 >= v56)
    {
      v59 = ((char *)v57 - *v21) >> 3;
      if ((unint64_t)(v59 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v60 = v56 - (_QWORD)*v21;
      v61 = v60 >> 2;
      if (v60 >> 2 <= (unint64_t)(v59 + 1))
        v61 = v59 + 1;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
        v62 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v62 = v61;
      if (v62)
        v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 24, v62);
      else
        v63 = 0;
      v64 = (uint64_t *)&v63[8 * v59];
      v65 = &v63[8 * v62];
      *v64 = v52;
      v58 = v64 + 1;
      v67 = *(char **)(a1 + 8);
      v66 = *(char **)(a1 + 16);
      if (v66 != v67)
      {
        do
        {
          v68 = *((_QWORD *)v66 - 1);
          v66 -= 8;
          *--v64 = v68;
        }
        while (v66 != v67);
        v66 = *v21;
      }
      *(_QWORD *)(a1 + 8) = v64;
      *(_QWORD *)(a1 + 16) = v58;
      *(_QWORD *)(a1 + 24) = v65;
      if (v66)
        operator delete(v66);
    }
    else
    {
      *v57 = v52;
      v58 = v57 + 1;
    }
    *(_QWORD *)(a1 + 16) = v58;
    if (v194)
    {
      v195 = v194;
      operator delete(v194);
    }
    if (v197)
    {
      v198 = v197;
      operator delete(v197);
    }
    if (v200)
    {
      v201 = v200;
      operator delete(v200);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v69 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "lstm");
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v70 = operator new(0x10uLL);
  v198 = v70 + 4;
  v199 = v70 + 4;
  *v70 = v7;
  v70[1] = v8;
  v70[2] = v20;
  v70[3] = 64;
  v197 = v70;
  v71 = operator new(0x10uLL);
  v195 = v71 + 4;
  v196 = v71 + 4;
  *v71 = v7;
  v71[1] = v12;
  v71[2] = v20;
  v71[3] = 200;
  v194 = v71;
  turi::neural_net::LstmLayer::LstmLayer(v69, &__p, (uint64_t)&v200, (uint64_t)&v197, (uint64_t)&v194);
  v73 = *(uint64_t **)(a1 + 16);
  v72 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v73 >= v72)
  {
    v75 = ((char *)v73 - *v21) >> 3;
    if ((unint64_t)(v75 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v76 = v72 - (_QWORD)*v21;
    v77 = v76 >> 2;
    if (v76 >> 2 <= (unint64_t)(v75 + 1))
      v77 = v75 + 1;
    if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
      v78 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v78 = v77;
    if (v78)
      v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 24, v78);
    else
      v79 = 0;
    v80 = (uint64_t *)&v79[8 * v75];
    v81 = &v79[8 * v78];
    *v80 = v69;
    v74 = v80 + 1;
    v83 = *(char **)(a1 + 8);
    v82 = *(char **)(a1 + 16);
    if (v82 != v83)
    {
      do
      {
        v84 = *((_QWORD *)v82 - 1);
        v82 -= 8;
        *--v80 = v84;
      }
      while (v82 != v83);
      v82 = *v21;
    }
    *(_QWORD *)(a1 + 8) = v80;
    *(_QWORD *)(a1 + 16) = v74;
    *(_QWORD *)(a1 + 24) = v81;
    if (v82)
      operator delete(v82);
  }
  else
  {
    *v73 = v69;
    v74 = v73 + 1;
  }
  *(_QWORD *)(a1 + 16) = v74;
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "dense0");
  v86 = operator new(0x20uLL);
  v201 = v86 + 2;
  v202 = v86 + 2;
  *(_QWORD *)&v87 = 0x100000001;
  *((_QWORD *)&v87 + 1) = 0x100000001;
  *v86 = xmmword_2186C1B90;
  v86[1] = v87;
  v200 = v86;
  v88 = operator new(0x10uLL);
  v198 = v88 + 4;
  v199 = v88 + 4;
  *v88 = v7;
  v88[1] = v8;
  v88[2] = v20;
  v88[3] = 200;
  v197 = v88;
  v89 = operator new(0x10uLL);
  v195 = v89 + 4;
  v196 = v89 + 4;
  *v89 = v7;
  v89[1] = v12;
  v89[2] = v20;
  v89[3] = 128;
  v194 = v89;
  turi::neural_net::ConvLayer::ConvLayer(v85, &__p, (uint64_t)&v200, (uint64_t)&v197, (uint64_t)&v194);
  v91 = *(uint64_t **)(a1 + 16);
  v90 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v91 >= v90)
  {
    v93 = ((char *)v91 - *v21) >> 3;
    if ((unint64_t)(v93 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v94 = v90 - (_QWORD)*v21;
    v95 = v94 >> 2;
    if (v94 >> 2 <= (unint64_t)(v93 + 1))
      v95 = v93 + 1;
    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
      v96 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v96 = v95;
    if (v96)
      v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 24, v96);
    else
      v97 = 0;
    v98 = (uint64_t *)&v97[8 * v93];
    v99 = &v97[8 * v96];
    *v98 = v85;
    v92 = v98 + 1;
    v101 = *(char **)(a1 + 8);
    v100 = *(char **)(a1 + 16);
    if (v100 != v101)
    {
      do
      {
        v102 = *((_QWORD *)v100 - 1);
        v100 -= 8;
        *--v98 = v102;
      }
      while (v100 != v101);
      v100 = *v21;
    }
    *(_QWORD *)(a1 + 8) = v98;
    *(_QWORD *)(a1 + 16) = v92;
    *(_QWORD *)(a1 + 24) = v99;
    if (v100)
      operator delete(v100);
  }
  else
  {
    *v91 = v85;
    v92 = v91 + 1;
  }
  *(_QWORD *)(a1 + 16) = v92;
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v103 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "bn");
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v104 = operator new(0x10uLL);
  v198 = v104 + 4;
  v199 = v104 + 4;
  *v104 = v7;
  v104[1] = v8;
  v104[2] = v20;
  v104[3] = 128;
  v197 = v104;
  v105 = operator new(0x10uLL);
  v195 = v105 + 4;
  v196 = v105 + 4;
  *v105 = v7;
  v105[1] = v12;
  v105[2] = v20;
  v105[3] = 128;
  v194 = v105;
  turi::neural_net::BNLayer::BNLayer(v103, &__p, (uint64_t)&v200, (uint64_t)&v197, (uint64_t)&v194);
  v107 = *(uint64_t **)(a1 + 16);
  v106 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v107 >= v106)
  {
    v109 = ((char *)v107 - *v21) >> 3;
    if ((unint64_t)(v109 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v110 = v106 - (_QWORD)*v21;
    v111 = v110 >> 2;
    if (v110 >> 2 <= (unint64_t)(v109 + 1))
      v111 = v109 + 1;
    if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
      v112 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v112 = v111;
    if (v112)
      v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 24, v112);
    else
      v113 = 0;
    v114 = (uint64_t *)&v113[8 * v109];
    v115 = &v113[8 * v112];
    *v114 = v103;
    v108 = v114 + 1;
    v117 = *(char **)(a1 + 8);
    v116 = *(char **)(a1 + 16);
    if (v116 != v117)
    {
      do
      {
        v118 = *((_QWORD *)v116 - 1);
        v116 -= 8;
        *--v114 = v118;
      }
      while (v116 != v117);
      v116 = *v21;
    }
    *(_QWORD *)(a1 + 8) = v114;
    *(_QWORD *)(a1 + 16) = v108;
    *(_QWORD *)(a1 + 24) = v115;
    if (v116)
      operator delete(v116);
  }
  else
  {
    *v107 = v103;
    v108 = v107 + 1;
  }
  *(_QWORD *)(a1 + 16) = v108;
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v119 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "relu6");
  v120 = operator new(4uLL);
  v200 = v120;
  *v120 = 0;
  v201 = v120 + 1;
  v202 = v120 + 1;
  v121 = operator new(0x10uLL);
  v198 = v121 + 4;
  v199 = v121 + 4;
  *v121 = v7;
  v121[1] = v8;
  v121[2] = v20;
  v121[3] = 128;
  v197 = v121;
  v122 = operator new(0x10uLL);
  v195 = v122 + 4;
  v196 = v122 + 4;
  *v122 = v7;
  v122[1] = v12;
  v122[2] = v20;
  v122[3] = 128;
  v194 = v122;
  turi::neural_net::ReLULayer::ReLULayer(v119, &__p, (uint64_t)&v200, (uint64_t)&v197, (uint64_t)&v194);
  v124 = *(uint64_t **)(a1 + 16);
  v123 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v124 >= v123)
  {
    v126 = ((char *)v124 - *v21) >> 3;
    if ((unint64_t)(v126 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v127 = v123 - (_QWORD)*v21;
    v128 = v127 >> 2;
    if (v127 >> 2 <= (unint64_t)(v126 + 1))
      v128 = v126 + 1;
    if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
      v129 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v129 = v128;
    if (v129)
      v130 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 24, v129);
    else
      v130 = 0;
    v131 = (uint64_t *)&v130[8 * v126];
    v132 = &v130[8 * v129];
    *v131 = v119;
    v125 = v131 + 1;
    v134 = *(char **)(a1 + 8);
    v133 = *(char **)(a1 + 16);
    if (v133 != v134)
    {
      do
      {
        v135 = *((_QWORD *)v133 - 1);
        v133 -= 8;
        *--v131 = v135;
      }
      while (v133 != v134);
      v133 = *v21;
    }
    *(_QWORD *)(a1 + 8) = v131;
    *(_QWORD *)(a1 + 16) = v125;
    *(_QWORD *)(a1 + 24) = v132;
    if (v133)
      operator delete(v133);
  }
  else
  {
    *v124 = v119;
    v125 = v124 + 1;
  }
  *(_QWORD *)(a1 + 16) = v125;
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  v136 = v193;
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*(_DWORD *)(a1 + 44))
  {
    v137 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "do7");
    v138 = operator new(8uLL);
    v200 = v138;
    *v138 = -4294967246;
    v201 = v138 + 1;
    v202 = v138 + 1;
    v139 = operator new(0x10uLL);
    v198 = v139 + 4;
    v199 = v139 + 4;
    *v139 = v7;
    v139[1] = v8;
    v139[2] = v20;
    v139[3] = 128;
    v197 = v139;
    v140 = operator new(0x10uLL);
    v195 = v140 + 4;
    v196 = v140 + 4;
    *v140 = v7;
    v140[1] = v12;
    v140[2] = v20;
    v140[3] = 128;
    v194 = v140;
    turi::neural_net::DropOutLayer::DropOutLayer(v137, &__p, (uint64_t)&v200, (uint64_t)&v197, (uint64_t)&v194);
    v142 = *(uint64_t **)(a1 + 16);
    v141 = *(_QWORD *)(a1 + 24);
    if ((unint64_t)v142 >= v141)
    {
      v144 = ((char *)v142 - *v21) >> 3;
      if ((unint64_t)(v144 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v145 = v141 - (_QWORD)*v21;
      v146 = v145 >> 2;
      if (v145 >> 2 <= (unint64_t)(v144 + 1))
        v146 = v144 + 1;
      if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8)
        v147 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v147 = v146;
      if (v147)
        v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 24, v147);
      else
        v148 = 0;
      v149 = (uint64_t *)&v148[8 * v144];
      v150 = &v148[8 * v147];
      *v149 = v137;
      v143 = v149 + 1;
      v152 = *(char **)(a1 + 8);
      v151 = *(char **)(a1 + 16);
      if (v151 != v152)
      {
        do
        {
          v153 = *((_QWORD *)v151 - 1);
          v151 -= 8;
          *--v149 = v153;
        }
        while (v151 != v152);
        v151 = *v21;
      }
      *(_QWORD *)(a1 + 8) = v149;
      *(_QWORD *)(a1 + 16) = v143;
      *(_QWORD *)(a1 + 24) = v150;
      if (v151)
        operator delete(v151);
    }
    else
    {
      *v142 = v137;
      v143 = v142 + 1;
    }
    *(_QWORD *)(a1 + 16) = v143;
    if (v194)
    {
      v195 = v194;
      operator delete(v194);
    }
    v136 = v193;
    if (v197)
    {
      v198 = v197;
      operator delete(v197);
    }
    if (v200)
    {
      v201 = v200;
      operator delete(v200);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v154 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "dense1");
  v155 = operator new(0x20uLL);
  v201 = v155 + 8;
  v202 = v155 + 8;
  *(_QWORD *)v155 = 0x100000001;
  v155[2] = 128;
  v155[3] = v136;
  *(_QWORD *)&v156 = 0x100000001;
  *((_QWORD *)&v156 + 1) = 0x100000001;
  *((_OWORD *)v155 + 1) = v156;
  v200 = v155;
  v157 = operator new(0x10uLL);
  v198 = v157 + 4;
  v199 = v157 + 4;
  *v157 = v7;
  v157[1] = v8;
  v157[2] = v20;
  v157[3] = 128;
  v197 = v157;
  v158 = operator new(0x10uLL);
  v195 = v158 + 4;
  v196 = v158 + 4;
  *v158 = v7;
  v158[1] = v12;
  v158[2] = v20;
  v158[3] = v136;
  v194 = v158;
  turi::neural_net::ConvLayer::ConvLayer(v154, &__p, (uint64_t)&v200, (uint64_t)&v197, (uint64_t)&v194);
  v160 = *(uint64_t **)(a1 + 16);
  v159 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v160 >= v159)
  {
    v162 = ((char *)v160 - *v21) >> 3;
    if ((unint64_t)(v162 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v163 = v159 - (_QWORD)*v21;
    v164 = v163 >> 2;
    if (v163 >> 2 <= (unint64_t)(v162 + 1))
      v164 = v162 + 1;
    if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
      v165 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v165 = v164;
    if (v165)
      v166 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 24, v165);
    else
      v166 = 0;
    v167 = (uint64_t *)&v166[8 * v162];
    v168 = &v166[8 * v165];
    *v167 = v154;
    v161 = v167 + 1;
    v170 = *(char **)(a1 + 8);
    v169 = *(char **)(a1 + 16);
    if (v169 != v170)
    {
      do
      {
        v171 = *((_QWORD *)v169 - 1);
        v169 -= 8;
        *--v167 = v171;
      }
      while (v169 != v170);
      v169 = *v21;
    }
    *(_QWORD *)(a1 + 8) = v167;
    *(_QWORD *)(a1 + 16) = v161;
    *(_QWORD *)(a1 + 24) = v168;
    if (v169)
      operator delete(v169);
  }
  else
  {
    *v160 = v154;
    v161 = v160 + 1;
  }
  *(_QWORD *)(a1 + 16) = v161;
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 44) == 1)
  {
    v172 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "softmax");
    v200 = 0;
    v201 = 0;
    v202 = 0;
    v173 = operator new(0x10uLL);
    v198 = v173 + 4;
    v199 = v173 + 4;
    *v173 = v7;
    v173[1] = v12;
    v173[2] = v20;
    v173[3] = v136;
    v197 = v173;
    v174 = operator new(0x10uLL);
    v195 = v174 + 4;
    v196 = v174 + 4;
    *v174 = v7;
    v174[1] = v12;
    v174[2] = v20;
    v174[3] = v136;
    v194 = v174;
    turi::neural_net::SoftMaxLayer::SoftMaxLayer(v172, &__p, (uint64_t)&v200, (uint64_t)&v197, (uint64_t)&v194);
    v176 = *(uint64_t **)(a1 + 16);
    v175 = *(_QWORD *)(a1 + 24);
    if ((unint64_t)v176 >= v175)
    {
      v182 = ((char *)v176 - *v21) >> 3;
      if ((unint64_t)(v182 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v183 = v175 - (_QWORD)*v21;
      v184 = v183 >> 2;
      if (v183 >> 2 <= (unint64_t)(v182 + 1))
        v184 = v182 + 1;
      if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF8)
        v185 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v185 = v184;
      if (v185)
        v186 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 24, v185);
      else
        v186 = 0;
      v187 = (uint64_t *)&v186[8 * v182];
      v188 = &v186[8 * v185];
      *v187 = v172;
      v177 = v187 + 1;
      v190 = *(char **)(a1 + 8);
      v189 = *(char **)(a1 + 16);
      if (v189 != v190)
      {
        do
        {
          v191 = *((_QWORD *)v189 - 1);
          v189 -= 8;
          *--v187 = v191;
        }
        while (v189 != v190);
        v189 = *v21;
      }
      *(_QWORD *)(a1 + 8) = v187;
      *(_QWORD *)(a1 + 16) = v177;
      *(_QWORD *)(a1 + 24) = v188;
      if (v189)
        operator delete(v189);
    }
    else
    {
      *v176 = v172;
      v177 = v176 + 1;
    }
    *(_QWORD *)(a1 + 16) = v177;
  }
  else
  {
    v178 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "Smce");
    v179 = operator new(4uLL);
    v200 = v179;
    *v179 = v7;
    v201 = v179 + 1;
    v202 = v179 + 1;
    v180 = operator new(0x10uLL);
    v198 = v180 + 4;
    v199 = v180 + 4;
    *v180 = v7;
    v180[1] = v12;
    v180[2] = v20;
    v180[3] = v136;
    v197 = v180;
    v181 = operator new(0x10uLL);
    v195 = v181 + 4;
    v196 = v181 + 4;
    *v181 = v7;
    v181[1] = v12;
    v181[2] = v20;
    v181[3] = v136;
    v194 = v181;
    turi::neural_net::SmceLossLayer::SmceLossLayer(v178, &__p, (uint64_t)&v200, (uint64_t)&v197, (uint64_t)&v194);
    *(_QWORD *)(a1 + 32) = v178;
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E94FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  turi::neural_net::MPSNetwork *v25;
  uint64_t v26;

  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a25 < 0)
    operator delete(a20);
  MEMORY[0x219A19A08](v26, 0x1093C4050D042D5);
  turi::neural_net::MPSNetwork::~MPSNetwork(v25);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::LstmLayer::LstmLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string *v10;
  void *v11;

  *(_OWORD *)(a1 + 48) = 0u;
  v10 = (std::string *)(a1 + 48);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)a1 = off_24D918210;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = objc_opt_new();
  *(_QWORD *)(a1 + 248) = objc_opt_new();
  *(_QWORD *)(a1 + 256) = objc_opt_new();
  *(_QWORD *)(a1 + 264) = objc_opt_new();
  *(_QWORD *)(a1 + 272) = objc_opt_new();
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_DWORD *)(a1 + 40) = 8;
  std::string::operator=(v10, a2);
  if (a1 + 72 != a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v11 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  if (a1 + 120 != a4)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  if (a1 + 144 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_217E95584(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SoftMaxLayer::SoftMaxLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)a1 = &unk_24D9180F0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 40) = 6;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 72 != a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v9 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  if (a1 + 120 != a4)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  if (a1 + 144 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_217E95714(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SmceLossLayer::SmceLossLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)a1 = &unk_24D918170;
  *(_DWORD *)(a1 + 40) = 7;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 72 != a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v9 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  if (a1 + 120 != a4)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  if (a1 + 144 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_217E95808(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SingleFcNetwork::SingleFcNetwork(uint64_t a1, __int128 **a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  char *v12;
  __int128 v14;
  void *__p;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  _OWORD *v20;
  void *v21;
  void *v22;
  _OWORD *v23;
  std::string v24;

  v5 = (_QWORD *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *v5 = &unk_24D9184E8;
  v6 = (uint64_t **)(v5 + 1);
  v14 = **a2;
  v7 = *((_QWORD *)*a2 + 2);
  v8 = *((_DWORD *)*a2 + 6);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v5 + 1), 1uLL);
  v9 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v24, "fc0");
  v10 = operator new(0x20uLL);
  v22 = v10 + 2;
  v23 = v10 + 2;
  *v10 = xmmword_2186C1AE8;
  v10[1] = unk_2186C1AF8;
  v21 = v10;
  v11 = operator new(0x10uLL);
  v18 = v11;
  *v11 = v14;
  v19 = v11 + 1;
  v20 = v11 + 1;
  v12 = (char *)operator new(0x10uLL);
  v16 = v12 + 16;
  v17 = v12 + 16;
  *(_DWORD *)v12 = v14;
  *(_QWORD *)(v12 + 4) = v7;
  *((_DWORD *)v12 + 3) = v8;
  __p = v12;
  turi::neural_net::ConvLayer::ConvLayer(v9, &v24, (uint64_t)&v21, (uint64_t)&v18, (uint64_t)&__p);
  **v6 = v9;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E95988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  turi::neural_net::MPSNetwork *v18;
  uint64_t v19;
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  MEMORY[0x219A19A08](v19, 0x1093C409E45F289);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SingleSoftMaxNetwork::SingleSoftMaxNetwork(uint64_t a1, __int128 **a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  char *v11;
  __int128 v13;
  void *__p;
  void *v15;
  char *v16;
  void *v17;
  void *v18;
  _OWORD *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  std::string v23;

  v5 = (_QWORD *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *v5 = &unk_24D918520;
  v6 = (uint64_t **)(v5 + 1);
  v13 = **a2;
  v7 = *((_QWORD *)*a2 + 2);
  v8 = *((_DWORD *)*a2 + 6);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v5 + 1), 1uLL);
  v9 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v23, "sm0");
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v10 = operator new(0x10uLL);
  v17 = v10;
  *v10 = v13;
  v18 = v10 + 1;
  v19 = v10 + 1;
  v11 = (char *)operator new(0x10uLL);
  v15 = v11 + 16;
  v16 = v11 + 16;
  *(_DWORD *)v11 = v13;
  *(_QWORD *)(v11 + 4) = v7;
  *((_DWORD *)v11 + 3) = v8;
  __p = v11;
  turi::neural_net::SoftMaxLayer::SoftMaxLayer(v9, &v23, (uint64_t)&v20, (uint64_t)&v17, (uint64_t)&__p);
  **v6 = v9;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E95B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  turi::neural_net::MPSNetwork *v18;
  uint64_t v19;
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  MEMORY[0x219A19A08](v19, 0x1093C4050D042D5);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SingleLstmNetwork::SingleLstmNetwork(uint64_t a1, __int128 **a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  char *v11;
  __int128 v13;
  void *__p;
  void *v15;
  char *v16;
  void *v17;
  void *v18;
  _OWORD *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  std::string v23;

  v5 = (_QWORD *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *v5 = &unk_24D918558;
  v6 = (uint64_t **)(v5 + 1);
  v13 = **a2;
  v7 = *((_QWORD *)*a2 + 2);
  v8 = *((_DWORD *)*a2 + 6);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v5 + 1), 1uLL);
  v9 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v23, "lstm0");
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v10 = operator new(0x10uLL);
  v17 = v10;
  *v10 = v13;
  v18 = v10 + 1;
  v19 = v10 + 1;
  v11 = (char *)operator new(0x10uLL);
  v15 = v11 + 16;
  v16 = v11 + 16;
  *(_DWORD *)v11 = v13;
  *(_QWORD *)(v11 + 4) = v7;
  *((_DWORD *)v11 + 3) = v8;
  __p = v11;
  turi::neural_net::LstmLayer::LstmLayer(v9, &v23, (uint64_t)&v20, (uint64_t)&v17, (uint64_t)&__p);
  **v6 = v9;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217E95D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  turi::neural_net::MPSNetwork *v18;
  uint64_t v19;
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  MEMORY[0x219A19A08](v19, 0x10B3C40E1FA6E55);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mps_networks_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 16);
  turi::neural_net::SAME = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 0);
  turi::neural_net::VALID = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

void turi::neural_net::mps_od_backend::ensure_training_module(turi::neural_net::mps_od_backend *this)
{
  uint64_t v2;
  uint64_t v3;

  if (!*((_QWORD *)this + 13))
  {
    v2 = operator new();
    turi::neural_net::mps_graph_cnn_module::mps_graph_cnn_module(v2, *((_QWORD *)this + 1));
    v3 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v2;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v2 = *((_QWORD *)this + 13);
    }
    turi::neural_net::mps_graph_cnn_module::init(v2, 4, *((_DWORD *)this + 6), *((_DWORD *)this + 7), *((_DWORD *)this + 8), *((_DWORD *)this + 9), *((_DWORD *)this + 10), *((_DWORD *)this + 11), *((_DWORD *)this + 12), (uint64_t)this + 56, (uint64_t)this + 80);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
    *((_QWORD *)this + 10) = (char *)this + 88;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
  }
}

void sub_217E960C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B1C40669011DBLL);
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_od_backend::ensure_prediction_module(turi::neural_net::mps_od_backend *this)
{
  uint64_t *v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t *v22[3];
  void **p_p;

  if (!*((_QWORD *)this + 14))
  {
    std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t *)v22, (const void ***)this + 7);
    turi::neural_net::shared_float_array::wrap(2.0, (uint64_t)&v18);
    std::string::basic_string[abi:ne180100]<0>(&__p, "mode");
    p_p = &__p;
    v2 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22, (const void **)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v2 + 8), &v19);
    v3 = v21;
    *((_OWORD *)v2 + 5) = v20;
    *((_OWORD *)v2 + 6) = v3;
    if (SHIBYTE(v17) < 0)
      operator delete(__p);
    v18 = (__int128 *)&unk_24D9175B8;
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    turi::neural_net::shared_float_array::wrap(0.0, (uint64_t)&v18);
    std::string::basic_string[abi:ne180100]<0>(&__p, "od_include_loss");
    p_p = &__p;
    v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22, (const void **)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v7 + 8), &v19);
    v8 = v21;
    *((_OWORD *)v7 + 5) = v20;
    *((_OWORD *)v7 + 6) = v8;
    if (SHIBYTE(v17) < 0)
      operator delete(__p);
    v18 = (__int128 *)&unk_24D9175B8;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v19 = 0uLL;
    v18 = &v19;
    v12 = *((_QWORD *)this + 13);
    if (v12)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v12 + 16))(&__p);
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v18, (_QWORD *)v19);
      v13 = (_QWORD *)v17;
      v18 = (__int128 *)__p;
      v19 = v17;
      if (*((_QWORD *)&v17 + 1))
      {
        *(_QWORD *)(v17 + 16) = &v19;
        __p = &v17;
        v17 = 0uLL;
        v13 = 0;
      }
      else
      {
        v18 = &v19;
      }
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&__p, v13);
    }
    else if (&v18 != (__int128 **)((char *)this + 80))
    {
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>((uint64_t **)&v18, *((__int128 **)this + 10), (__int128 *)((char *)this + 88));
    }
    v14 = operator new();
    turi::neural_net::mps_graph_cnn_module::mps_graph_cnn_module(v14, *((_QWORD *)this + 1));
    v15 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v14 = *((_QWORD *)this + 14);
    }
    turi::neural_net::mps_graph_cnn_module::init(v14, 4, *((_DWORD *)this + 6), *((_DWORD *)this + 7), *((_DWORD *)this + 8), *((_DWORD *)this + 9), *((_DWORD *)this + 10), *((_DWORD *)this + 11), *((_DWORD *)this + 12), (uint64_t)v22, (uint64_t)&v18);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v18, (_QWORD *)v19);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v22, v22[1]);
  }
}

void sub_217E963A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, _QWORD *a19)
{
  uint64_t v19;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a18, a19);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v19 - 72, *(_QWORD **)(v19 - 64));
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_od_backend::mps_od_backend(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  void *__p[2];
  char v17;

  *(_QWORD *)a1 = &off_24D918590;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 36) = *(_OWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v4 = (_QWORD *)(a1 + 56);
  v5 = (_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = a1 + 64;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    *(_QWORD *)(a2 + 48) = v5;
    *v5 = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  else
  {
    *v4 = v7;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 72);
  v9 = (_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = a1 + 88;
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v12;
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v11;
    *(_QWORD *)(a2 + 72) = v9;
    *v9 = 0;
    *(_QWORD *)(a2 + 88) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v11;
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "mode");
  v13 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)__p);
  v14 = *(float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v14 == 0.0)
    turi::neural_net::mps_od_backend::ensure_training_module((turi::neural_net::mps_od_backend *)a1);
  else
    turi::neural_net::mps_od_backend::ensure_prediction_module((turi::neural_net::mps_od_backend *)a1);
  return a1;
}

void sub_217E9658C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  turi::neural_net::mps_od_backend::parameters *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;

  v19 = *(_QWORD *)(v16 + 112);
  *(_QWORD *)(v16 + 112) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *v17;
  *v17 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  turi::neural_net::mps_od_backend::parameters::~parameters(v15);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_od_backend::set_learning_rate(turi::neural_net::mps_od_backend *this, float a2)
{
  turi::neural_net::mps_od_backend::ensure_training_module(this);
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), a2);
}

uint64_t turi::neural_net::mps_od_backend::train(turi::neural_net::mps_od_backend *this, uint64_t a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  turi::neural_net::mps_od_backend::ensure_training_module(this);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), a2);
}

uint64_t turi::neural_net::mps_od_backend::predict(turi::neural_net::mps_od_backend *a1, uint64_t a2)
{
  turi::neural_net::mps_od_backend::ensure_prediction_module(a1);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(**((_QWORD **)a1 + 14) + 24))(*((_QWORD **)a1 + 14), a2);
}

uint64_t *turi::neural_net::mps_od_backend::export_weights@<X0>(turi::neural_net::mps_od_backend *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 13);
  if (v3)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  else
    return std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](a2, (const void ***)this + 10);
}

void turi::neural_net::mps_od_backend::~mps_od_backend(turi::neural_net::mps_od_backend *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D918590;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D918590;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x219A19A08);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<std::string&&>((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217E968FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<std::string&&>(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  turi::neural_net::shared_float_array::shared_float_array((turi::neural_net::shared_float_array *)(a1 + 24));
  return a1;
}

void sub_217E96950(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_mps_od_backend_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 16);
  turi::neural_net::SAME = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 0);
  turi::neural_net::VALID = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

void _GLOBAL__sub_I_mps_trainer_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 16);
  turi::neural_net::SAME = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 0);
  turi::neural_net::VALID = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

float turi::neural_net::SGDUpdater::Init(uint64_t a1, uint64_t a2, float **a3)
{
  float result;

  result = **a3;
  *(float *)(a1 + 8) = result;
  return result;
}

float turi::neural_net::SGDUpdater::Update(turi::neural_net::SGDUpdater *this, float *a2, float *a3, int a4)
{
  uint64_t v4;
  float v5;
  float result;

  if (a4 >= 1)
  {
    v4 = a4;
    do
    {
      v5 = *a3++;
      result = *a2 - (float)(*((float *)this + 2) * v5);
      *a2++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

void turi::neural_net::MomUpdater::Init(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = (_QWORD *)(a1 + 16);
  std::vector<std::vector<std::vector<float>>>::resize((uint64_t *)(a1 + 16), (a2[1] - *a2) >> 3);
  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if ((*(_DWORD *)(*(_QWORD *)(v5 + 8 * v7) + 40) & 0xFFFFFFFE) == 2)
      {
        std::vector<std::vector<float>>::resize((uint64_t *)(*v3 + v6), 2uLL);
        v5 = *a2;
        v4 = a2[1];
      }
      ++v7;
      v6 += 24;
    }
    while (v7 < (v4 - v5) >> 3);
  }
}

void std::vector<std::vector<std::vector<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<float>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

float turi::neural_net::MomUpdater::Update(turi::neural_net::MomUpdater *this, float *a2, float *a3, int a4, int a5, int a6, float result)
{
  _QWORD *v13;
  float *v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  v13 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24 * a5) + 24 * a6);
  if (v13[1] == *v13)
  {
    std::vector<float>::resize((uint64_t)v13, a4);
    if (a4 < 1)
      return result;
    bzero(*(void **)(*(_QWORD *)(*((_QWORD *)this + 2) + 24 * a5) + 24 * a6), 4 * a4);
  }
  else if (a4 < 1)
  {
    return result;
  }
  v14 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 2) + 24 * a5) + 24 * a6);
  v15 = a4;
  do
  {
    v16 = *a3++;
    v17 = v16;
    v18 = *((float *)this + 11);
    if (v16 > v18)
      v17 = *((float *)this + 11);
    v19 = -v18;
    if (v17 < v19)
      v17 = v19;
    v20 = (float)(*((float *)this + 12) * *v14) - (float)(*((float *)this + 10) * v17);
    *v14++ = v20;
    result = *a2 + (float)(v20 - (float)(*((float *)this + 13) * *a2));
    *a2++ = result;
    --v15;
  }
  while (v15);
  return result;
}

uint64_t turi::neural_net::createUpdater(turi::neural_net *this)
{
  uint64_t result;
  __int128 v2;
  std::logic_error *exception;

  if ((_DWORD)this == 2)
  {
    result = operator new();
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_DWORD *)(result + 8) = 981668463;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = &off_24D9186B8;
    v2 = xmmword_2186C1C50;
LABEL_7:
    *(_OWORD *)(result + 40) = v2;
    return result;
  }
  if ((_DWORD)this == 1)
  {
    result = operator new();
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 8) = 981668463;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)result = &off_24D918658;
    v2 = xmmword_2186C1C60;
    goto LABEL_7;
  }
  if ((_DWORD)this)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Undefined updater id.");
    __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  result = operator new();
  *(_QWORD *)result = &off_24D9185E8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 8) = 981668463;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void sub_217E96E98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::AdamUpdater::Init(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = (_QWORD *)(a1 + 16);
  std::vector<std::vector<std::vector<float>>>::resize((uint64_t *)(a1 + 16), (a2[1] - *a2) >> 3);
  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if ((*(_DWORD *)(*(_QWORD *)(v5 + 8 * v7) + 40) & 0xFFFFFFFE) == 2)
      {
        std::vector<std::vector<float>>::resize((uint64_t *)(*v3 + v6), 4uLL);
        v5 = *a2;
        v4 = a2[1];
      }
      ++v7;
      v6 += 24;
    }
    while (v7 < (v4 - v5) >> 3);
  }
}

void turi::neural_net::AdamUpdater::Update(turi::neural_net::AdamUpdater *this, float *a2, float *a3, int a4, int a5, int a6)
{
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  unint64_t v29;

  v10 = 0;
  v28 = 4 * a4;
  v29 = a4;
  v12 = a6;
  v13 = 1;
  v14 = a4;
  do
  {
    while (1)
    {
      v15 = v13;
      v16 = v10 + v12;
      v17 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24 * a5) + 24 * (v10 + v12));
      if (v17[1] != *v17)
        break;
      std::vector<float>::resize((uint64_t)v17, v29);
      if (a4 <= 0)
      {
        v13 = 0;
        v10 = 2;
        if ((v15 & 1) == 0)
          return;
      }
      else
      {
        bzero(*(void **)(*(_QWORD *)(*((_QWORD *)this + 2) + 24 * a5) + 24 * v16), v28);
        v13 = 0;
        v10 = 2;
        if ((v15 & 1) == 0)
          goto LABEL_11;
      }
    }
    v13 = 0;
    v10 = 2;
  }
  while ((v15 & 1) != 0);
  if (a4 < 1)
    return;
LABEL_11:
  v18 = *(_QWORD *)(*((_QWORD *)this + 2) + 24 * a5) + 24 * (int)v12;
  v19 = *((float *)this + 14);
  v20 = 1.0 - powf(*((float *)this + 11), v19);
  v21 = powf(*((float *)this + 12), v19);
  v22 = *(float **)v18;
  v23 = *(float **)(v18 + 48);
  v24 = (float)-(float)(*((float *)this + 10) * sqrtf(1.0 - v21)) / v20;
  do
  {
    *v22 = (float)((float)(1.0 - *((float *)this + 11)) * *a3) + (float)(*((float *)this + 11) * *v22);
    v25 = *a3++;
    v26 = (float)(v25 * (float)((float)(1.0 - *((float *)this + 12)) * v25)) + (float)(*((float *)this + 12) * *v23);
    *v23++ = v26;
    v27 = *v22++;
    *a2 = *a2 + (float)(v24 * (float)(v27 / (float)(*((float *)this + 13) + sqrtf(v26))));
    ++a2;
    --v14;
  }
  while (v14);
}

float turi::neural_net::AdamUpdater::NewIteration(turi::neural_net::AdamUpdater *this)
{
  float result;

  result = *((float *)this + 14) + 1.0;
  *((float *)this + 14) = result;
  return result;
}

void turi::neural_net::MPSUpdater::MovingAvg(turi::neural_net::MPSUpdater *this, float *a2, float *a3, int a4, float a5)
{
  uint64_t v5;
  float v6;

  if (a4 >= 1)
  {
    v5 = a4;
    do
    {
      v6 = *a3++;
      *a2 = (float)((float)(1.0 - a5) * v6) + (float)(a5 * *a2);
      ++a2;
      --v5;
    }
    while (v5);
  }
}

uint64_t turi::neural_net::SGDUpdater::SetLearningRate(uint64_t this, float a2)
{
  *(float *)(this + 8) = a2;
  return this;
}

void turi::neural_net::SGDUpdater::~SGDUpdater(turi::neural_net::SGDUpdater *this)
{
  void **v1;

  *(_QWORD *)this = &off_24D9185E8;
  v1 = (void **)((char *)this + 16);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = &off_24D9185E8;
  v2 = (void **)((char *)this + 16);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A19A08](this, 0x10A1C4037ACD87BLL);
}

void turi::neural_net::MomUpdater::~MomUpdater(turi::neural_net::MomUpdater *this)
{
  void **v2;

  *(_QWORD *)this = &off_24D9185E8;
  v2 = (void **)((char *)this + 16);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A19A08](this, 0x10A1C40C9E8D6FDLL);
}

void turi::neural_net::AdamUpdater::~AdamUpdater(turi::neural_net::AdamUpdater *this)
{
  void **v2;

  *(_QWORD *)this = &off_24D9185E8;
  v2 = (void **)((char *)this + 16);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A19A08](this, 0x10A1C40CB05DBA4);
}

void std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::vector<std::vector<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(&v15);
  }
}

void sub_217E974EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<float>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<float>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_217E978A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void _GLOBAL__sub_I_mps_updater_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 16);
  turi::neural_net::SAME = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE480], "paddingWithMethod:", 0);
  turi::neural_net::VALID = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

void sub_217E97CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_217E97EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_217E98068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_217E981D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_217E98754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_217E98908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_217E98A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_217E98AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_217E9921C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v18;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void sub_217E99544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217E9970C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_217E99A3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_mps_weight_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void _GLOBAL__sub_I_plot_macos_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

BOOL CoreML::Specification::isEquivalent(CoreML::Specification *this, const CoreML::Specification::FeatureDescription *a2, const CoreML::Specification::FeatureDescription *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 **v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v11;
  uint64_t *v13;
  uint64_t *v14;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  v4 = (unsigned __int8 **)*((_QWORD *)a2 + 2);
  v5 = v3[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v3[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v4[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  else
    v11 = *v4;
  if ((v5 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v3, v11, *((_QWORD *)v3 + 1)))
      goto LABEL_17;
    return 0;
  }
  if (v3[23])
  {
    while (*v3 == *v11)
    {
      ++v3;
      ++v11;
      if (!--v5)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  if (*((_QWORD *)this + 4))
    v13 = (uint64_t *)*((_QWORD *)this + 4);
  else
    v13 = &CoreML::Specification::_FeatureType_default_instance_;
  if (*((_QWORD *)a2 + 4))
    v14 = (uint64_t *)*((_QWORD *)a2 + 4);
  else
    v14 = &CoreML::Specification::_FeatureType_default_instance_;
  return CoreML::Specification::operator==((uint64_t)v13, (uint64_t)v14);
}

BOOL CoreML::Specification::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  _BOOL8 result;
  int v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v27;

  v3 = *(_DWORD *)(a1 + 36);
  if (v3 != *(_DWORD *)(a2 + 36))
    return 0;
  switch(v3)
  {
    case 4:
      v4 = *(_QWORD *)(a1 + 24);
      v5 = *(_QWORD *)(a2 + 24);
      if (*(_QWORD *)(v4 + 16) != *(_QWORD *)(v5 + 16) || *(_QWORD *)(v4 + 24) != *(_QWORD *)(v5 + 24))
        return 0;
      return *(_DWORD *)(v4 + 32) == *(_DWORD *)(v5 + 32);
    case 5:
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a2 + 24);
      v9 = *(unsigned int *)(v7 + 36);
      if ((_DWORD)v9 != *(_DWORD *)(v8 + 36))
        return 0;
      v10 = *(_DWORD *)(v7 + 60);
      if (v10)
      {
        if (v10 == 31)
        {
          v11 = (int *)(*(_QWORD *)(v7 + 40) + 24);
        }
        else
        {
          if (v10 != 21)
            goto LABEL_20;
          v11 = (int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 32) + 8) + 16);
        }
      }
      else
      {
        v11 = (int *)(v7 + 16);
      }
      v9 = *v11;
LABEL_20:
      v15 = *(_DWORD *)(v8 + 60);
      if (v15)
      {
        if (v15 == 31)
        {
          v16 = (int *)(*(_QWORD *)(v8 + 40) + 24);
        }
        else
        {
          if (v15 != 21)
            goto LABEL_27;
          v16 = (int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 32) + 8) + 16);
        }
      }
      else
      {
        v16 = (int *)(v8 + 16);
      }
      v2 = *v16;
LABEL_27:
      if (v9 != v2)
        return 0;
      if (v15 | v10 || (v17 = *(unsigned int *)(v7 + 16), (int)v17 < 1))
      {
LABEL_29:
        result = 1;
      }
      else
      {
        v18 = *(_QWORD *)(v7 + 24);
        v19 = v17 - 1;
        v20 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 8);
        v21 = (uint64_t *)(v18 + 8);
        do
        {
          v23 = *v21++;
          v22 = v23;
          v25 = *v20++;
          v24 = v25;
          v27 = v19-- != 0;
          result = v22 == v24;
        }
        while (v22 == v24 && v27);
      }
      break;
    case 6:
      v12 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 28);
      v13 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 28);
      return v13 == v12;
    case 7:
      v12 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 36);
      v13 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 36);
      return v13 == v12;
    default:
      goto LABEL_29;
  }
  return result;
}

void CoreML::Recommender::_ItemSimilarityRecommenderData::~_ItemSimilarityRecommenderData(CoreML::Recommender::_ItemSimilarityRecommenderData *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 224);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

void std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::begin@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)(result + 16);
  v3 = v2[3];
  v4 = v2[1];
  if (v4 <= v3)
  {
    v6 = 0;
  }
  else
  {
    v5 = v2[4];
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v3);
      if (v6)
        break;
      if (v4 == ++v3)
      {
        v6 = 0;
        v3 = v2[1];
        goto LABEL_9;
      }
    }
    if (v6 == *(_QWORD *)(v5 + 8 * (v3 ^ 1)))
      v6 = *(_QWORD *)(*(_QWORD *)v6 + 32);
  }
LABEL_9:
  *a2 = v6;
  a2[1] = v2;
  a2[2] = v3;
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  char v14;

  result = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(a1, a2);
  v9 = result;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(v10 + 8 * result);
  if (v11)
  {
    if (v11 != *(_QWORD *)(v10 + 8 * (result ^ 1)))
    {
      while (1)
      {
        result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v14, (unsigned __int8 *)v11, a2);
        if ((_DWORD)result)
          break;
        v11 = *(_QWORD *)(v11 + 32);
        if (!v11)
          goto LABEL_10;
      }
      *a4 = v11;
      goto LABEL_12;
    }
    v9 = result & 0xFFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD *)(v10 + 8 * (result & 0xFFFFFFFFFFFFFFFELL));
    v13 = (const void **)a2;
    result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, &v13);
    if (v12 + 8 != result)
    {
      if (a3)
        *a3 = result;
      *a4 = *(_QWORD *)(result + 32);
LABEL_12:
      a4[1] = a1;
      a4[2] = v9;
      goto LABEL_13;
    }
  }
LABEL_10:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
LABEL_13:
  a4[3] = v9;
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(uint64_t a1, _BYTE *a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  if ((char)a2[23] >= 0)
    v2 = a2;
  else
    v2 = *(_BYTE **)a2;
  v3 = *v2;
  if (*v2)
  {
    v4 = 0;
    v5 = v2 + 1;
    do
    {
      v4 = 5 * v4 + v3;
      v6 = *v5++;
      v3 = v6;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  return (*(_QWORD *)(a1 + 8) - 1) & (*(_QWORD *)(a1 + 16) + v4);
}

uint64_t std::__tree<std::string *,_tc_google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(uint64_t a1, const void ***a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 24;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, *(const void ***)(v3 + 32), *a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, *a2, *(const void ***)(v6 + 32)))
    return v2;
  return v6;
}

_QWORD *_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v11;

  v2 = *(_QWORD *)(*a1 + 32);
  if (v2)
    goto LABEL_2;
  if (_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::revalidate_if_necessary((uint64_t)a1, (uint64_t *)&v11))
  {
    v3 = a1[2] + 1;
LABEL_13:
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::SearchFrom(a1, v3);
    return a1;
  }
  v4 = a1[2];
  v5 = *(_QWORD *)(*(_QWORD *)(a1[1] + 32) + 8 * v4);
  v6 = (uint64_t)v11;
  v7 = (_QWORD *)v11[1];
  if (v7)
  {
    do
    {
      v8 = v7;
      v7 = (_QWORD *)*v7;
    }
    while (v7);
  }
  else
  {
    do
    {
      v8 = *(_QWORD **)(v6 + 16);
      v9 = *v8 == v6;
      v6 = (uint64_t)v8;
    }
    while (!v9);
  }
  v11 = v8;
  if (v8 == (_QWORD *)(v5 + 8))
  {
    v3 = v4 + 2;
    goto LABEL_13;
  }
  v2 = v8[4];
LABEL_2:
  *a1 = v2;
  return a1;
}

BOOL _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::revalidate_if_necessary(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)a1;
  v6 = *(_QWORD *)(a1 + 16) & (*(_QWORD *)(v4 + 8) - 1);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_QWORD *)(v7 + 8 * v6);
  if ((unsigned __int8 *)v8 == v5)
    return 1;
  if (v8 && v8 != *(_QWORD *)(v7 + 8 * (v6 ^ 1)))
  {
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 32);
      if (!v8)
        break;
      if ((unsigned __int8 *)v8 == v5)
        return 1;
    }
  }
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v4, v5, a2, &v13);
  v9 = v14;
  *(_QWORD *)(a1 + 16) = v14;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  return !v11 || v11 != *(_QWORD *)(v10 + 8 * (v9 ^ 1));
}

_QWORD *_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::SearchFrom(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *result = 0;
  v2 = result[1];
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 <= a2)
  {
LABEL_6:
    result[2] = a2;
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 32);
    while (1)
    {
      v5 = *(_QWORD *)(v4 + 8 * a2);
      if (v5)
        break;
      if (v3 == ++a2)
      {
        a2 = v3;
        goto LABEL_6;
      }
    }
    v6 = *(_QWORD *)(v4 + 8 * (a2 ^ 1));
    result[2] = a2;
    if (v5 == v6)
      *result = *(_QWORD *)(*(_QWORD *)v5 + 32);
    else
      *result = v5;
  }
  return result;
}

_QWORD *_tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t *v11;

  v5 = (result[1] - 1) & (result[2] + *a2);
  v6 = result[4];
  v7 = *(_QWORD **)(v6 + 8 * v5);
  if (v7)
  {
    v8 = result;
    if (v7 != *(_QWORD **)(v6 + 8 * (v5 ^ 1)))
    {
      while (*v7 != *a2)
      {
        v7 = (_QWORD *)v7[2];
        if (!v7)
          goto LABEL_10;
      }
      *a4 = v7;
      goto LABEL_12;
    }
    v5 &= ~1uLL;
    v10 = *(_QWORD *)(v6 + 8 * v5);
    v11 = a2;
    result = (_QWORD *)std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::find<long long *>(v10, &v11);
    if ((_QWORD *)(v10 + 8) != result)
    {
      if (a3)
        *a3 = result;
      *a4 = result[4];
LABEL_12:
      a4[1] = v8;
      a4[2] = v5;
      goto LABEL_13;
    }
  }
LABEL_10:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
LABEL_13:
  a4[3] = v5;
  return result;
}

uint64_t std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::find<long long *>(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = **a2;
  v6 = v2;
  do
  {
    v7 = **(_QWORD **)(v3 + 32);
    v8 = v7 < v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (!v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < **(_QWORD **)(v6 + 32))
    return v2;
  return v6;
}

_QWORD *_tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v11;

  v2 = *(_QWORD *)(*a1 + 16);
  if (v2)
    goto LABEL_2;
  if (_tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::revalidate_if_necessary((uint64_t)a1, &v11))
  {
    v3 = a1[2] + 1;
LABEL_13:
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::SearchFrom(a1, v3);
    return a1;
  }
  v4 = a1[2];
  v5 = *(_QWORD *)(*(_QWORD *)(a1[1] + 32) + 8 * v4);
  v6 = v11;
  v7 = (_QWORD *)v11[1];
  if (v7)
  {
    do
    {
      v8 = v7;
      v7 = (_QWORD *)*v7;
    }
    while (v7);
  }
  else
  {
    do
    {
      v8 = (_QWORD *)v6[2];
      v9 = *v8 == (_QWORD)v6;
      v6 = v8;
    }
    while (!v9);
  }
  v11 = v8;
  if (v8 == (_QWORD *)(v5 + 8))
  {
    v3 = v4 + 2;
    goto LABEL_13;
  }
  v2 = v8[4];
LABEL_2:
  *a1 = v2;
  return a1;
}

BOOL _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::revalidate_if_necessary(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(uint64_t **)a1;
  v6 = *(_QWORD *)(a1 + 16) & (v4[1] - 1);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = v4[4];
  v8 = *(uint64_t **)(v7 + 8 * v6);
  if (v8 == v5)
    return 1;
  if (v8 && v8 != *(uint64_t **)(v7 + 8 * (v6 ^ 1)))
  {
    while (1)
    {
      v8 = (uint64_t *)v8[2];
      if (!v8)
        break;
      if (v8 == v5)
        return 1;
    }
  }
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(v4, v5, a2, &v13);
  v9 = v14;
  *(_QWORD *)(a1 + 16) = v14;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  return !v11 || v11 != *(_QWORD *)(v10 + 8 * (v9 ^ 1));
}

uint64_t _GLOBAL__sub_I_Comparison_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool(uint64_t a1)
{
  void **v2;

  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100]((_QWORD *)(a1 + 96));
  v2 = (void **)(a1 + 72);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  turi::mutex::~mutex((pthread_mutex_t *)a1);
}

uint64_t assert_msg(uint64_t result, const char *a2, ...)
{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "invalid url cache predix";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

void vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(uint64_t **a1)
{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  _QWORD *exception;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD v15[33];

  v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  v8 = (const char *)**a1;
  v9 = (va_list)*a1[1];
  v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0)
    v12 = &v13;
  else
    v12 = v13;
  *exception = v12;
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

void sub_217E9EA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 256;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void turi::mutex::~mutex(pthread_mutex_t *this)
{
  _QWORD *v1;

  if (pthread_mutex_destroy(this))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Mutex destroy error ", 20);
    v1 = (_QWORD *)std::ostream::operator<<();
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v1);
    abort();
  }
}

void __cxx_global_var_init_26()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void _GLOBAL__sub_I_activity_classifier_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,std::vector<std::string>>>((uint64_t *)a2, a1);
}

void sub_217E9EE88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_converter<std::vector<std::string>>::set(__int128 **a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<12>::set<std::vector<std::string>>((uint64_t *)a2, a1);
}

void sub_217E9EF58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t *turi::flexible_type_converter<std::string>::set@<X0>(const std::string *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  return turi::flexible_type::operator=<std::string>((uint64_t *)a2, a1);
}

void sub_217E9F028(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::toolkit_class_specification::~toolkit_class_specification(turi::toolkit_class_specification *this)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

_QWORD *std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

uint64_t turi::flexible_type_impl::ndarray<double>::~ndarray(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)a1);
}

void turi::ml_model_base::perform_registration(turi::ml_model_base *this)
{
  __int128 *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string __str;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  std::string __p;
  std::string **v26;
  char v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[24];
  _BYTE *v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;
  __int128 v40;
  char v41;
  __int128 v42;
  __int128 *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  turi::model_base::perform_registration(this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ml_model_base::list_fields");
  v22 = 0;
  v23 = 0;
  v24 = 0;
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEJEJEEENS3_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSL_INS_10model_baseEEENSL_INS_17unity_sframe_baseEEENSL_INS_17unity_sarray_baseEEENS3_3mapISA_NSE_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SW_EEEEEENS4_ISW_NS8_ISW_EEEENSE_17recursive_wrapperINS_21function_closure_infoEEEEEEPSP_NSV_ISA_S19_SY_NS8_INSZ_IS10_S19_EEEEEEEEEMT_FT0_DpT1_EDpT2_((std::string::size_type)turi::ml_model_base::list_fields, 0, (uint64_t)&v42);
  turi::model_base::register_function((uint64_t)this, &__p, (uint64_t)&v22, (uint64_t)&v42);
  v2 = v43;
  if (v43 == &v42)
  {
    v3 = 4;
    v2 = &v42;
  }
  else
  {
    if (!v43)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  *(_QWORD *)&v40 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "get_value");
  std::string::basic_string[abi:ne180100]<0>(&v40, "field");
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v26 = &v22;
  v27 = 0;
  v22 = (std::string *)operator new(0x18uLL);
  v23 = v22;
  v24 = v22 + 1;
  v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v24, &v40, &v42, v22);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>("field", (std::string::size_type)turi::ml_model_base::get_value_from_state, 0, (uint64_t)v38);
  turi::model_base::register_function((uint64_t)this, &__str, (uint64_t)&v22, (uint64_t)v38);
  v4 = v39;
  if (v39 == v38)
  {
    v5 = 4;
    v4 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
  v26 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v41 < 0)
    operator delete((void *)v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v20, "ml_model_base::get_option_value");
  v22 = 0;
  v23 = 0;
  v24 = 0;
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,turi::flexible_type const&,std::string const&>((std::string::size_type)turi::ml_model_base::get_option_value, 0, (uint64_t)v36);
  turi::model_base::register_function((uint64_t)this, &v20, (uint64_t)&v22, (uint64_t)v36);
  v6 = v37;
  if (v37 == v36)
  {
    v7 = 4;
    v6 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_22;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_22:
  *(_QWORD *)&v40 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v19, "ml_model_base::is_trained");
  v22 = 0;
  v23 = 0;
  v24 = 0;
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseEbJEJEEENSt3__18functionIFN5boost7variantINS5_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSC_INS_10model_baseEEENSC_INS_17unity_sframe_baseEEENSC_INS_17unity_sarray_baseEEENS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS5_18recursive_variant_ENS3_4lessISS_EENSQ_INS3_4pairIKSS_ST_EEEEEENS3_6vectorIST_NSQ_IST_EEEENS5_17recursive_wrapperINS_21function_closure_infoEEEEEEPSG_NSM_ISS_S17_SV_NSQ_INSW_ISX_S17_EEEEEEEEEMT_KFT0_DpT1_EDpT2_((std::string::size_type)turi::ml_model_base::is_trained, 0, (uint64_t)v34);
  turi::model_base::register_function((uint64_t)this, &v19, (uint64_t)&v22, (uint64_t)v34);
  v8 = v35;
  if (v35 == v34)
  {
    v9 = 4;
    v8 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_29;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_29:
  *(_QWORD *)&v40 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v18, "ml_model_base::get_default_options");
  v22 = 0;
  v23 = 0;
  v24 = 0;
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_13flexible_typeENS3_4lessISA_EENS8_INS3_4pairIKSA_SB_EEEEEEJEJEEENS3_8functionIFN5boost7variantINSK_6detail7variant14recursive_flagISB_EEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSQ_INS_10model_baseEEENSQ_INS_17unity_sframe_baseEEENSQ_INS_17unity_sarray_baseEEENS4_ISA_NSK_18recursive_variant_ESD_NS8_INSE_ISF_S10_EEEEEENS3_6vectorIS10_NS8_IS10_EEEENSK_17recursive_wrapperINS_21function_closure_infoEEEEEEPSU_NS4_ISA_S1A_SD_NS8_INSE_ISF_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_((std::string::size_type)turi::ml_model_base::get_default_options, 0, (uint64_t)v32);
  turi::model_base::register_function((uint64_t)this, &v18, (uint64_t)&v22, (uint64_t)v32);
  v10 = v33;
  if (v33 == v32)
  {
    v11 = 4;
    v10 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_36;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_36:
  *(_QWORD *)&v40 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v17, "ml_model_base::get_state");
  v22 = 0;
  v23 = 0;
  v24 = 0;
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseERKNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN5boost7variantINSB_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSI_INS_10model_baseEEENSI_INS_17unity_sframe_baseEEENSI_INS_17unity_sarray_baseEEENS4_ISA_NSB_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SS_EEEEEENS3_6vectorISS_NS8_ISS_EEEENSB_17recursive_wrapperINS_21function_closure_infoEEEEEESU_NS8_INSV_ISW_S16_EEEEEEJEJEEENS3_8functionIFS16_PSM_S19_EEEMT_KFT0_DpT1_EDpT2_((std::string::size_type)turi::ml_model_base::get_state, 0, (uint64_t)v30);
  turi::model_base::register_function((uint64_t)this, &v17, (uint64_t)&v22, (uint64_t)v30);
  v12 = v31;
  if (v31 == v30)
  {
    v13 = 4;
    v12 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_43;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_43:
  *(_QWORD *)&v40 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "ml_model_base::set_options");
  v22 = 0;
  v23 = 0;
  v24 = 0;
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>((std::string::size_type)turi::ml_model_base::set_options, 0, (uint64_t)v28);
  turi::model_base::register_function((uint64_t)this, &v16, (uint64_t)&v22, (uint64_t)v28);
  v14 = v29;
  if (v29 == v28)
  {
    v15 = 4;
    v14 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_50;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_50:
  *(_QWORD *)&v40 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  *((_BYTE *)this + 24) = 1;
}

void sub_217E9F648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char *a41)
{
  char *v41;
  uint64_t v42;
  char *v44;
  uint64_t v45;

  v44 = a41;
  if (a41 == v41)
  {
    v45 = 4;
    v44 = &a38;
  }
  else
  {
    if (!a41)
      goto LABEL_6;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_6:
  *(_QWORD *)(v42 - 96) = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 96));
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

_QWORD *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEJEJEEENS3_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSL_INS_10model_baseEEENSL_INS_17unity_sframe_baseEEENSL_INS_17unity_sarray_baseEEENS3_3mapISA_NSE_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SW_EEEEEENS4_ISW_NS8_ISW_EEEENSE_17recursive_wrapperINS_21function_closure_infoEEEEEEPSP_NSV_ISA_S19_SY_NS8_INSZ_IS10_S19_EEEEEEEEEMT_FT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  void **v11;
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(a1, a2, (uint64_t)v10, (uint64_t)v14);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v4 = (*(uint64_t (**)(void))(*v15 + 16))();
LABEL_4:
    v13 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _BYTE *))(v14[0] + 24))(v14, v12);
LABEL_6:
  *(_QWORD *)(a3 + 24) = 0;
  v5 = operator new(0x28uLL);
  *v5 = &unk_24D918958;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v12);
  *(_QWORD *)(a3 + 24) = v5;
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_217E9FA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 *result;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string **v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  void *__p[2];
  char v21;
  __int128 v22;
  __int128 *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = &v13;
  v17 = 0;
  v13 = (std::string *)operator new(0x18uLL);
  v14 = v13;
  v15 = v13 + 1;
  v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (__int128 *)__p, &v22, v13);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(a2, a3, (uint64_t)&v13, (uint64_t)&v22);
  v16 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  if (v21 < 0)
    operator delete(__p[0]);
  v7 = (uint64_t)v23;
  if (!v23)
    goto LABEL_6;
  if (v23 != &v22)
  {
    v7 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v23 + 16))(v23);
LABEL_6:
    v19 = (_BYTE *)v7;
    goto LABEL_8;
  }
  v19 = v18;
  (*(void (**)(__int128 *, _BYTE *))(v22 + 24))(&v22, v18);
LABEL_8:
  *(_QWORD *)(a4 + 24) = 0;
  v8 = operator new(0x28uLL);
  *v8 = &unk_24D918C78;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v8 + 1), (uint64_t)v18);
  *(_QWORD *)(a4 + 24) = v8;
  v9 = v19;
  if (v19 == v18)
  {
    v10 = 4;
    v9 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
  result = v23;
  if (v23 == &v22)
  {
    v12 = 4;
    result = &v22;
  }
  else
  {
    if (!v23)
      return result;
    v12 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
}

void sub_217E9FC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = *(_QWORD **)(v24 - 64);
  if (v26 == (_QWORD *)(v24 - 88))
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 88);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,turi::flexible_type const&,std::string const&>@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  void **v11;
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(a1, a2, (uint64_t)v10, (uint64_t)v14);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v4 = (*(uint64_t (**)(void))(*v15 + 16))();
LABEL_4:
    v13 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _BYTE *))(v14[0] + 24))(v14, v12);
LABEL_6:
  *(_QWORD *)(a3 + 24) = 0;
  v5 = operator new(0x28uLL);
  *v5 = &unk_24D918D78;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v12);
  *(_QWORD *)(a3 + 24) = v5;
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_217E9FE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseEbJEJEEENSt3__18functionIFN5boost7variantINS5_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSC_INS_10model_baseEEENSC_INS_17unity_sframe_baseEEENSC_INS_17unity_sarray_baseEEENS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS5_18recursive_variant_ENS3_4lessISS_EENSQ_INS3_4pairIKSS_ST_EEEEEENS3_6vectorIST_NSQ_IST_EEEENS5_17recursive_wrapperINS_21function_closure_infoEEEEEEPSG_NSM_ISS_S17_SV_NSQ_INSW_ISX_S17_EEEEEEEEEMT_KFT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  void **v11;
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(a1, a2, (uint64_t)v10, (uint64_t)v14);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v4 = (*(uint64_t (**)(void))(*v15 + 16))();
LABEL_4:
    v13 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _BYTE *))(v14[0] + 24))(v14, v12);
LABEL_6:
  *(_QWORD *)(a3 + 24) = 0;
  v5 = operator new(0x28uLL);
  *v5 = &unk_24D918E78;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v12);
  *(_QWORD *)(a3 + 24) = v5;
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_217EA0054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_13flexible_typeENS3_4lessISA_EENS8_INS3_4pairIKSA_SB_EEEEEEJEJEEENS3_8functionIFN5boost7variantINSK_6detail7variant14recursive_flagISB_EEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSQ_INS_10model_baseEEENSQ_INS_17unity_sframe_baseEEENSQ_INS_17unity_sarray_baseEEENS4_ISA_NSK_18recursive_variant_ESD_NS8_INSE_ISF_S10_EEEEEENS3_6vectorIS10_NS8_IS10_EEEENSK_17recursive_wrapperINS_21function_closure_infoEEEEEEPSU_NS4_ISA_S1A_SD_NS8_INSE_ISF_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  void **v11;
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(a1, a2, (uint64_t)v10, (uint64_t)v14);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v4 = (*(uint64_t (**)(void))(*v15 + 16))();
LABEL_4:
    v13 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _BYTE *))(v14[0] + 24))(v14, v12);
LABEL_6:
  *(_QWORD *)(a3 + 24) = 0;
  v5 = operator new(0x28uLL);
  *v5 = &unk_24D918F78;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v12);
  *(_QWORD *)(a3 + 24) = v5;
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_217EA0228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseERKNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN5boost7variantINSB_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSI_INS_10model_baseEEENSI_INS_17unity_sframe_baseEEENSI_INS_17unity_sarray_baseEEENS4_ISA_NSB_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SS_EEEEEENS3_6vectorISS_NS8_ISS_EEEENSB_17recursive_wrapperINS_21function_closure_infoEEEEEESU_NS8_INSV_ISW_S16_EEEEEEJEJEEENS3_8functionIFS16_PSM_S19_EEEMT_KFT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  void **v11;
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(a1, a2, (uint64_t)v10, (uint64_t)v14);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v4 = (*(uint64_t (**)(void))(*v15 + 16))();
LABEL_4:
    v13 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _BYTE *))(v14[0] + 24))(v14, v12);
LABEL_6:
  *(_QWORD *)(a3 + 24) = 0;
  v5 = operator new(0x28uLL);
  *v5 = &unk_24D919078;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v12);
  *(_QWORD *)(a3 + 24) = v5;
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_217EA03FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  void **v11;
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(a1, a2, (uint64_t)v10, (uint64_t)v14);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v4 = (*(uint64_t (**)(void))(*v15 + 16))();
LABEL_4:
    v13 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _BYTE *))(v14[0] + 24))(v14, v12);
LABEL_6:
  *(_QWORD *)(a3 + 24) = 0;
  v5 = operator new(0x28uLL);
  *v5 = &unk_24D919178;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v12);
  *(_QWORD *)(a3 + 24) = v5;
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_217EA05D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D9188C8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217EA0874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

std::vector<std::string>::iterator std::vector<std::string>::insert(std::vector<std::string> *this, std::vector<std::string>::const_iterator __position, std::vector<std::string>::value_type *__x)
{
  std::string *i;
  std::vector<std::string>::pointer end;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v8;
  std::string *value;
  __int128 v10;
  std::vector<std::string>::pointer begin;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  __int128 v18;
  std::__split_buffer<std::string> __v;

  i = (std::string *)__position.__i_;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    begin = this->__begin_;
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)__position.__i_ - (char *)begin) >> 3);
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)begin) >> 3);
    v15 = 2 * v14;
    if (2 * v14 <= v12)
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v14 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v15;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v16)
      v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v16);
    else
      v17 = 0;
    __v.__first_ = v17;
    __v.__begin_ = v17 + v13;
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v17[v16];
    std::__split_buffer<std::string>::push_back(&__v, __x);
    i = std::vector<std::string>::__swap_out_circular_buffer(this, &__v, i);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else if (__position.__i_ == end)
  {
    v18 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    __position.__i_->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__position.__i_->__r_.__value_.__l.__data_ = v18;
    __x->__r_.__value_.__l.__size_ = 0;
    __x->__r_.__value_.__r.__words[2] = 0;
    __x->__r_.__value_.__r.__words[0] = 0;
    this->__end_ = (std::vector<std::string>::pointer)&__position.__i_[1];
  }
  else
  {
    std::vector<std::string>::__move_range(this, (std::vector<std::string>::pointer)__position.__i_, end, (std::vector<std::string>::pointer)&__position.__i_[1]);
    if (SHIBYTE(i->__r_.__value_.__r.__words[2]) < 0)
      operator delete(i->__r_.__value_.__l.__data_);
    v10 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    i->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&i->__r_.__value_.__l.__data_ = v10;
    *((_BYTE *)&__x->__r_.__value_.__s + 23) = 0;
    __x->__r_.__value_.__s.__data_[0] = 0;
  }
  return (std::vector<std::string>::iterator)i;
}

void sub_217EA0A34(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_specification::~toolkit_function_specification(turi::toolkit_function_specification *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  turi::toolkit_function_specification *v5;
  uint64_t v6;

  v2 = (char *)this + 104;
  v3 = (char *)*((_QWORD *)this + 16);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (turi::toolkit_function_specification *)*((_QWORD *)this + 12);
  if (v5 == (turi::toolkit_function_specification *)((char *)this + 72))
  {
    v6 = 4;
    v5 = (turi::toolkit_function_specification *)((char *)this + 72);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end;
  char *v7;
  std::vector<std::string>::pointer v8;
  unint64_t v9;
  __int128 v10;
  char v11;

  end = this->__end_;
  v7 = (char *)__from_s + (char *)end - (char *)__to;
  v8 = end;
  if (v7 < (char *)__from_e)
  {
    v9 = (unint64_t)v7;
    v8 = this->__end_;
    do
    {
      v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

void std::__split_buffer<std::string>::push_back(std::__split_buffer<std::string> *this, std::__split_buffer<std::string>::value_type *__x)
{
  std::__split_buffer<std::string>::pointer end;
  __int128 *begin;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  std::allocator<std::string> *value;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::__split_buffer<std::string>::pointer v16;
  int64_t v17;
  uint64_t v18;
  std::string *v19;
  uint64_t v20;
  std::string *v21;
  __int128 v22;
  int64x2_t v23;
  std::string *v24;
  __int128 v25;
  std::__split_buffer<std::string> v26;

  end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    begin = (__int128 *)this->__begin_;
    if ((std::__split_buffer<std::string>::pointer)begin <= this->__first_)
    {
      if (end == this->__first_)
        v10 = 1;
      else
        v10 = 0x5555555555555556 * (((char *)end - (char *)this->__first_) >> 3);
      v11 = v10 >> 2;
      value = this->__end_cap_.__value_;
      v26.__end_cap_.__value_ = this->__end_cap_.__value_;
      v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)value, v10);
      v15 = &v13[v11];
      v16 = this->__begin_;
      v17 = (char *)this->__end_ - (char *)v16;
      if (v17)
      {
        v18 = v17 / 24;
        v19 = &v15[v18];
        v20 = 24 * v18;
        v21 = &v13[v11];
        do
        {
          v22 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          v21->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
          ++v21;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          ++v16;
          v20 -= 24;
        }
        while (v20);
        v23 = *(int64x2_t *)&this->__begin_;
      }
      else
      {
        v23 = vdupq_n_s64((unint64_t)v16);
        v19 = &v13[v11];
      }
      v26.__first_ = this->__first_;
      this->__first_ = v13;
      this->__begin_ = v15;
      *(int64x2_t *)&v26.__begin_ = v23;
      v24 = this->__end_cap_.__value_;
      this->__end_ = v19;
      this->__end_cap_.__value_ = &v13[v14];
      v26.__end_cap_.__value_ = v24;
      std::__split_buffer<std::string>::~__split_buffer(&v26);
      end = this->__end_;
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)begin - (char *)this->__first_) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -3 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v26, begin, (__int128 *)end, (uint64_t)begin - 24 * (v7 >> 1));
      end = v9;
      this->__begin_ = (std::__split_buffer<std::string>::pointer)((char *)this->__begin_ + 8 * v8);
      this->__end_ = v9;
    }
  }
  v25 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
  end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v25;
  __x->__r_.__value_.__l.__size_ = 0;
  __x->__r_.__value_.__r.__words[2] = 0;
  __x->__r_.__value_.__r.__words[0] = 0;
  ++this->__end_;
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::string *begin;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v8;
  std::string *v9;
  std::string *end;
  std::string *value;

  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__p, (__int128 *)this->__end_, (uint64_t)__v->__end_);
  v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v4 += 24;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_217EA10F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_217EA1208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EED1Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D9188C8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EED0Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D9188C8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EE7__cloneEv(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D9188C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217EA1328(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EE7__cloneEPNS0_6__baseIS1R_EE(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D9188C8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EE7destroyEv(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EE18destroy_deallocateEv(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EEclEOS1O_OS1G_(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::vector<std::string> (turi::ml_model_base::*)(),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::vector<std::string> (turi::ml_model_base::*)(),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::vector<std::string> (turi::ml_model_base::*)(),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::vector<std::string> (turi::ml_model_base::*)(),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::vector<std::string> (turi::ml_model_base::*)(),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217EA14A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::vector<std::string> (turi::ml_model_base::*)(),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  std::vector<std::string> v8;
  uint64_t *v9;
  std::string v10;
  uint64_t v11;
  uint64_t *v12;
  std::vector<std::string> v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *__p;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  char *v21[2];
  _BYTE v22[13];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v16 = 1;
  __p = 0;
  v18 = 0;
  v21[0] = 0;
  v21[1] = 0;
  v19 = 0;
  v20 = v21;
  v14 = a3;
  v15 = a2;
  memset(&v13, 0, sizeof(v13));
  if (&v13 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v13.__begin_;
    end = (__int128 *)v13.__end_;
  }
  v12 = &v15;
  v9 = &v15;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v11 = v14;
  v8.__begin_ = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  memset(&v8, 0, sizeof(v8));
  _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE4callIZZNS0_32generate_member_function_wrapperILm0ENS_13ml_model_baseESB_JEEENS2_8functionIFN5boost7variantINSH_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSO_INS_10model_baseEEENSO_INS_17unity_sframe_baseEEENSO_INS_17unity_sarray_baseEEENS2_3mapIS9_NSH_18recursive_variant_ENS2_4lessIS9_EENS7_INS2_4pairIKS9_SZ_EEEEEENS3_ISZ_NS7_ISZ_EEEENSH_17recursive_wrapperINS_21function_closure_infoEEEEEEPT0_NSY_IS9_S1C_S11_NS7_INS12_IS13_S1C_EEEEEEEEEMS1D_FT1_DpT2_ESB_ENKUlPSF_S1H_E_clES1P_S1H_EUlvE_EEvT_(&v8, a1, &v15);
  turi::flexible_type_converter<std::vector<std::string>>::set((__int128 **)&v8, (uint64_t)v22);
  *(_QWORD *)(a4 + 13) = *(_QWORD *)&v22[5];
  *(_QWORD *)(a4 + 8) = *(_QWORD *)v22;
  *(_BYTE *)(a4 + 20) = v22[12];
  *(_DWORD *)a4 = 0;
  *(_QWORD *)v22 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  v8.__begin_ = (std::vector<std::string>::pointer)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v20, v21[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
}

void sub_217EA1660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a23);
  _Unwind_Resume(a1);
}

void _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE4callIZZNS0_32generate_member_function_wrapperILm0ENS_13ml_model_baseESB_JEEENS2_8functionIFN5boost7variantINSH_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSO_INS_10model_baseEEENSO_INS_17unity_sframe_baseEEENSO_INS_17unity_sarray_baseEEENS2_3mapIS9_NSH_18recursive_variant_ENS2_4lessIS9_EENS7_INS2_4pairIKS9_SZ_EEEEEENS3_ISZ_NS7_ISZ_EEEENSH_17recursive_wrapperINS_21function_closure_infoEEEEEEPT0_NSY_IS9_S1C_S11_NS7_INS12_IS13_S1C_EEEEEEEEEMS1D_FT1_DpT2_ESB_ENKUlPSF_S1H_E_clES1P_S1H_EUlvE_EEvT_(std::vector<std::string> *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  void (*v5)(__int128 *__return_ptr, _QWORD *);
  _QWORD *v6;
  __int128 v7;
  std::string *v8;
  void **v9;

  v5 = *(void (**)(__int128 *__return_ptr, _QWORD *))a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = (_QWORD *)(*a3 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v6 + v5);
  v5(&v7, v6);
  std::vector<std::string>::__vdeallocate(a1);
  *(_OWORD *)&a1->__begin_ = v7;
  a1->__end_cap_.__value_ = v8;
  v8 = 0;
  v7 = 0uLL;
  v9 = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void turi::toolkit_function_response_type::~toolkit_function_response_type(turi::toolkit_function_response_type *this)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 32, *((char **)this + 5));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_217EA18AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_217EA18B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)a2 + 14);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,0>(uint64_t a1)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~pair(uint64_t a1)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(unsigned int *a1)
{
  char v1;

  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::destroyer,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31), (uint64_t)&v1, (void ***)a1 + 1);
}

void boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::destroyer,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t a3, void ***a4)
{
  switch(a2)
  {
    case 0:
      boost::detail::variant::destroyer::internal_visit<turi::flexible_type>(a3, (uint64_t)a4);
      break;
    case 1:
    case 3:
    case 4:
    case 5:
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)a4);
      break;
    case 2:
      boost::detail::variant::destroyer::internal_visit<turi::dataframe_t>(a3, (uint64_t)a4);
      break;
    case 6:
      boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::~recursive_wrapper(a4);
      break;
    case 7:
      boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::~recursive_wrapper(a4);
      break;
    case 8:
      boost::recursive_wrapper<turi::function_closure_info>::~recursive_wrapper((uint64_t *)a4);
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
}

void boost::detail::variant::destroyer::internal_visit<turi::flexible_type>(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  void *v30;
  void *v31;
  void **v32;

  switch(*(_BYTE *)(a2 + 12))
  {
    case 2:
      v3 = *(unint64_t **)a2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        v6 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          if (*((char *)v6 + 31) < 0)
            operator delete((void *)v6[1]);
          v7 = v6;
          v8 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v9 = *(unint64_t **)a2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v13 = (void *)v12[1];
          if (v13)
          {
            v12[2] = (unint64_t)v13;
            operator delete(v13);
          }
          v7 = v12;
          v8 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v14 = *(unint64_t **)a2;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v32 = (void **)(v17 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v18 = *(unint64_t **)a2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v17 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v32 = (void **)(v17 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v7 = v17;
          v8 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v21 = *(unint64_t **)a2;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v24 + 2);
          v7 = v24;
          v25 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v26 = *(unint64_t **)a2;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v30 = (void *)v29[6];
          if (v30)
          {
            v29[7] = (unint64_t)v30;
            operator delete(v30);
          }
          v31 = (void *)v29[3];
          if (v31)
          {
            v29[4] = (unint64_t)v31;
            operator delete(v31);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v29 + 1));
          v7 = v29;
          v25 = 2071181815;
LABEL_41:
          v8 = v25 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v7, v8);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
}

void boost::detail::variant::destroyer::internal_visit<turi::dataframe_t>(uint64_t a1, uint64_t a2)
{
  void **v3;

  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(a2 + 48, *(_QWORD **)(a2 + 56));
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a2 + 24, *(char **)(a2 + 32));
  v3 = (void **)a2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<turi::flexible_type>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<turi::flexible_type>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::~recursive_wrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(*a1, *(_QWORD *)(v2 + 8));
    MEMORY[0x219A19A08](v2, 0x1020C4062D53EE8);
  }
  return a1;
}

void ***boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::~recursive_wrapper(void ***a1)
{
  void **v2;
  void **v4;

  v2 = *a1;
  if (*a1)
  {
    v4 = *a1;
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x219A19A08](v2, 0x20C40960023A9);
  }
  return a1;
}

void std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 80;
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *boost::recursive_wrapper<turi::function_closure_info>::~recursive_wrapper(uint64_t *a1)
{
  uint64_t v2;
  void **v4;

  v2 = *a1;
  if (*a1)
  {
    v4 = (void **)(v2 + 24);
    std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x219A19A08](v2, 0x1032C402D514303);
  }
  return a1;
}

void std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 16));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void boost::detail::variant::forced_return<void>(boost::detail::variant *a1)
{
  boost::detail::variant::forced_return_no_return(a1);
}

void boost::detail::variant::forced_return_no_return(boost::detail::variant *this)
{
  abort();
}

void std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1, a2[1]);
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::pair<std::string const,turi::flexible_type>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 24);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 24);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 24);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 24);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 24);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 24);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 24);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 24);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 24);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 24);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 24);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 24);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_ED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D918958;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_ED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D918958;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_E7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D918958;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217EA23A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_E7__cloneEPNS0_6__baseIS1G_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D918958;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_E7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_E18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_EclEOS1C_OS1F_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEJEJEEENS3_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSL_INS_10model_baseEEENSL_INS_17unity_sframe_baseEEENSL_INS_17unity_sarray_baseEEENS3_3mapISA_NSE_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SW_EEEEEENS4_ISW_NS8_ISW_EEEENSE_17recursive_wrapperINS_21function_closure_infoEEEEEEPSP_NSV_ISA_S19_SY_NS8_INSZ_IS10_S19_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1A_S1D_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEJEJEEENS3_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSL_INS_10model_baseEEENSL_INS_17unity_sframe_baseEEENSL_INS_17unity_sarray_baseEEENS3_3mapISA_NSE_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SW_EEEEEENS4_ISW_NS8_ISW_EEEENSE_17recursive_wrapperINS_21function_closure_infoEEEEEEPSP_NSV_ISA_S19_SY_NS8_INSZ_IS10_S19_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1A_S1D_E_;
}

void _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = (_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(char ***)a3;
  v8 = (char *)v6;
  if (*(_QWORD *)(a3 + 16))
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *(_QWORD *)a3 = v5;
    *v5 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v7 = &v8;
  }
  _ZZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEJEJEEENS3_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSL_INS_10model_baseEEENSL_INS_17unity_sframe_baseEEENSL_INS_17unity_sarray_baseEEENS3_3mapISA_NSE_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SW_EEEEEENS4_ISW_NS8_ISW_EEEENSE_17recursive_wrapperINS_21function_closure_infoEEEEEEPSP_NSV_ISA_S19_SY_NS8_INSZ_IS10_S19_EEEEEEEEEMT_FT0_DpT1_EDpT2_ENKUlS1A_S1D_E_clES1A_S1D_(v4, a1, (const void ***)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217EA2580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void _ZZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEJEJEEENS3_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSL_INS_10model_baseEEENSL_INS_17unity_sframe_baseEEENSL_INS_17unity_sarray_baseEEENS3_3mapISA_NSE_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SW_EEEEEENS4_ISW_NS8_ISW_EEEENSE_17recursive_wrapperINS_21function_closure_infoEEEEEEPSP_NSV_ISA_S19_SY_NS8_INSZ_IS10_S19_EEEEEEEEEMT_FT0_DpT1_EDpT2_ENKUlS1A_S1D_E_clES1A_S1D_(void *lpsrc@<X1>, uint64_t a2@<X0>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v7;
  uint64_t v8;
  uint64_t v9[3];
  std::string *v10;
  uint64_t v11;
  _QWORD v12[10];

  v12[9] = *MEMORY[0x24BDAC8D0];
  if (lpsrc)
  else
    v7 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v9, a3);
  v10 = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string **, uint64_t *))(*(_QWORD *)v8 + 48))(&v11, v8, &v10, v9);
  v10 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v11, v11 ^ ((int)v11 >> 31), &v10, (uint64_t)v12);
  *(_DWORD *)a4 = v11 ^ ((int)v11 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v11);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v9, (char *)v9[1]);
}

void sub_217EA26A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, char *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

boost::detail::variant *boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *result, int a2, std::string **a3, uint64_t a4)
{
  std::string *v4;
  const void ***v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;
  std::string *v11;
  std::string::size_type v12;
  unint64_t *v13;
  unint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  unint64_t *v21;
  unint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  unint64_t *v25;
  unint64_t v26;

  switch(a2)
  {
    case 0:
      v4 = *a3;
      v4->__r_.__value_.__r.__words[0] = 0;
      LODWORD(v4->__r_.__value_.__r.__words[1]) = 0;
      v4->__r_.__value_.__s.__data_[12] = 0;
      if (v4 != (std::string *)a4)
      {
        v5 = *(const void ****)a4;
        *(std::string::size_type *)((char *)v4->__r_.__value_.__r.__words + 5) = *(_QWORD *)(a4 + 5);
        v4->__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
        LODWORD(v5) = *(unsigned __int8 *)(a4 + 12);
        v4->__r_.__value_.__s.__data_[12] = (char)v5;
        v6 = v5 > 9;
        v7 = (1 << (char)v5) & 0x33C;
        if (!v6 && v7 != 0)
        {
          v9 = (unint64_t *)v4->__r_.__value_.__r.__words[0];
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
        }
      }
      break;
    case 1:
      v11 = *a3;
      v12 = *(_QWORD *)(a4 + 8);
      v11->__r_.__value_.__r.__words[0] = *(_QWORD *)a4;
      v11->__r_.__value_.__l.__size_ = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      break;
    case 2:
      result = (boost::detail::variant *)boost::detail::variant::copy_into::internal_visit<turi::dataframe_t>(a3, a4);
      break;
    case 3:
      v15 = *a3;
      v16 = *(_QWORD *)(a4 + 8);
      v15->__r_.__value_.__r.__words[0] = *(_QWORD *)a4;
      v15->__r_.__value_.__l.__size_ = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      break;
    case 4:
      v19 = *a3;
      v20 = *(_QWORD *)(a4 + 8);
      v19->__r_.__value_.__r.__words[0] = *(_QWORD *)a4;
      v19->__r_.__value_.__l.__size_ = v20;
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      break;
    case 5:
      v23 = *a3;
      v24 = *(_QWORD *)(a4 + 8);
      v23->__r_.__value_.__r.__words[0] = *(_QWORD *)a4;
      v23->__r_.__value_.__l.__size_ = v24;
      if (v24)
      {
        v25 = (unint64_t *)(v24 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      break;
    case 6:
      result = (boost::detail::variant *)boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper((uint64_t **)*a3, (const void ****)a4);
      break;
    case 7:
      result = (boost::detail::variant *)boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(*a3, (uint64_t **)a4);
      break;
    case 8:
      result = (boost::detail::variant *)boost::recursive_wrapper<turi::function_closure_info>::recursive_wrapper((std::string **)*a3, (__int128 **)a4);
      break;
    default:
      boost::detail::variant::forced_return<void>(result);
  }
  return result;
}

uint64_t *boost::detail::variant::copy_into::internal_visit<turi::dataframe_t>(std::string **a1, uint64_t a2)
{
  std::string *v3;

  v3 = *a1;
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)&v3[1], (const void ***)(a2 + 24));
  return std::map<std::string,std::vector<turi::flexible_type>>::map[abi:ne180100]((uint64_t *)&v3[2], (const void ***)(a2 + 48));
}

void sub_217EA28CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v11, *(char **)(v10 + 32));
  a10 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,turi::flex_type_enum>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,turi::flex_type_enum>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_217EA2934(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,turi::flex_type_enum>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flex_type_enum> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flex_type_enum> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__construct_node<std::pair<std::string const,turi::flex_type_enum> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__construct_node<std::pair<std::string const,turi::flex_type_enum> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  v6[56] = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_217EA2AD8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<turi::flexible_type>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<turi::flexible_type>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_217EA2B30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<turi::flexible_type>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<turi::flexible_type>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<turi::flexible_type>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::pair<std::string const,std::vector<turi::flexible_type>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::pair<std::string const,std::vector<turi::flexible_type>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<turi::flexible_type>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217EA2CB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<turi::flexible_type>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(this[1].__r_.__value_.__r.__words, *((uint64_t **)a2 + 3), *((uint64_t **)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 4);
  return this;
}

{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(__int128 *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  return this;
}

void sub_217EA2D30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_217EA2DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::flexible_type>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  BOOL v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[3];
  char i;
  uint64_t v14;
  uint64_t v15;

  v4 = a4;
  v15 = a4;
  v14 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  for (i = 0; a2 != a3; v15 = v4)
  {
    *(_QWORD *)v4 = 0;
    *(_DWORD *)(v4 + 8) = 0;
    *(_BYTE *)(v4 + 12) = 0;
    if (a2 != (uint64_t *)v4)
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 5) = *(uint64_t *)((char *)a2 + 5);
      *(_QWORD *)v4 = v5;
      LODWORD(v5) = *((unsigned __int8 *)a2 + 12);
      *(_BYTE *)(v4 + 12) = v5;
      v6 = v5 >= 9;
      v8 = (_DWORD)v5 == 9;
      v7 = (1 << v5) & 0x33C;
      v8 = !v8 && v6 || v7 == 0;
      if (!v8)
      {
        v9 = *(unint64_t **)v4;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        v4 = v15;
      }
    }
    a2 += 2;
    v4 += 16;
  }
  i = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 16;
      std::allocator<turi::flexible_type>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<turi::flexible_type>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t **boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(uint64_t **a1, const void ****a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)operator new();
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v4, *a2);
  *a1 = v4;
  return a1;
}

void sub_217EA3030(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

_QWORD *boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(_QWORD *a1, uint64_t **a2)
{
  _QWORD *v4;
  uint64_t *v5;

  v4 = (_QWORD *)operator new();
  v5 = *a2;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__init_with_size[abi:ne180100]<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(v4, *v5, v5[1], 0xCCCCCCCCCCCCCCCDLL * ((v5[1] - *v5) >> 4));
  *a1 = v4;
  return a1;
}

void sub_217EA30C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__init_with_size[abi:ne180100]<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_217EA3150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v10 = a4 + v7 + 8;
      v8 = a2 + v7 + 8;
      boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*(unsigned int *)(a2 + v7), *(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31), &v10, v8, 0, 0);
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31);
      v7 += 80;
    }
    while (v8 + 72 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_217EA329C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 80;
    do
    {
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v4 + v2));
      v2 -= 80;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string **boost::recursive_wrapper<turi::function_closure_info>::recursive_wrapper(std::string **a1, __int128 **a2)
{
  std::string *v4;
  std::string *v5;
  __int128 *v6;
  __int128 v7;

  v4 = (std::string *)operator new();
  v5 = v4;
  v6 = *a2;
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
  }
  v5[1].__r_.__value_.__r.__words[0] = 0;
  v5[1].__r_.__value_.__l.__size_ = 0;
  v5[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>((char *)&v5[1], *((_QWORD **)v6 + 3), *((_QWORD **)v6 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v6 + 4) - *((_QWORD *)v6 + 3)) >> 3));
  *a1 = v5;
  return a1;
}

void sub_217EA3360(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1032C402D514303);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v7[1] = a2[1];
      v8 = a2[2];
      v7[2] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 3;
      v7 += 3;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_217EA3430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_217EA3480(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__construct_node<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__construct_node<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x88uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217EA3600(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::value_type *v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v6 = &this[1].__r_.__value_.__s.__data_[8];
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*((unsigned int *)a2 + 6), *((_DWORD *)a2 + 6) ^ (*((int *)a2 + 6) >> 31), &v6, a2 + 2, 0, 0);
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6) ^ (*((int *)a2 + 6) >> 31);
  return this;
}

void sub_217EA369C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D9189E8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217EA3918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D9189E8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D9189E8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D9189E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217EA3A74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D9189E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217EA3BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  uint64_t *v8;
  std::string v9;
  uint64_t v10;
  uint64_t *v11;
  std::vector<std::string> v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  char *v23[2];
  std::string *v24;
  std::string *v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  v21 = 0;
  v22 = v23;
  v16 = 0;
  v17 = 0;
  v14 = a2;
  __p = 0;
  memset(&v12, 0, sizeof(v12));
  v13 = a3;
  if (&v12 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v12.__begin_;
    end = (__int128 *)v12.__end_;
  }
  v11 = &v14;
  v8 = &v14;
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v10 = v13;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>((uint64_t *)&v8);
  v25 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  LODWORD(v25) = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((unsigned int *)&v25, (__int128 *)a1, &v14);
  v24 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v25, v25 ^ ((int)v25 >> 31), &v24, (uint64_t)&v26);
  *(_DWORD *)a4 = v25 ^ ((int)v25 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v25);
  v25 = (std::string *)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(v19);
}

void sub_217EA3DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v28 - 136) = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 136));
  if (a26 < 0)
    operator delete(__p);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a27);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(unsigned int *a1, __int128 *a2, _QWORD *a3)
{
  int *v4;
  __int128 v5;
  int v6;
  _QWORD v7[10];

  v7[9] = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v4 = (int *)std::__mem_fn<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string)>::operator()[abi:ne180100]<turi::ml_model_base*&,std::string&>((uint64_t)&v5, a3, (uint64_t)(a3 + 1));
  *(_QWORD *)&v5 = v7;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*v4, *v4 ^ (*v4 >> 31), (std::string **)&v5, (uint64_t)(v4 + 2));
  v6 = *v4 ^ (*v4 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v6);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v6);
}

void sub_217EA3ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

__n128 turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  std::string v7;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 24));
    if (a1[4] + 8 == v3)
    {
      v7.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::string,void>::get((int *)(v3 + 56), &v7);
    v4 = *a1;
    v5 = *a1 + 8;
    if (*(char *)(v4 + 31) < 0)
      operator delete(*(void **)v5);
    result = *(__n128 *)&v7.__r_.__value_.__l.__data_;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)&v7.__r_.__value_.__l + 2);
    *(__n128 *)v5 = result;
  }
  return result;
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const std::string *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

std::string *turi::variant_converter<std::string,void>::get@<X0>(int *a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  std::string *result;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void **v38[3];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x24BDAC8D0];
  memset(v39, 0, 13);
  v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((_QWORD *)v3 != v39)
  {
    v4 = *(_QWORD *)v3;
    *(_QWORD *)((char *)v39 + 5) = *(_QWORD *)(v3 + 5);
    v39[0] = v4;
    BYTE4(v39[1]) = *(_BYTE *)(v3 + 12);
    if (BYTE4(v39[1]) <= 9u && ((1 << SBYTE4(v39[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v39[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  result = turi::flexible_type_converter<std::string>::get((char *)v39, a2);
  switch(BYTE4(v39[1]))
  {
    case 2:
      v9 = (unint64_t *)v39[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v39[0];
        if (v39[0])
        {
          if (*(char *)(v39[0] + 31) < 0)
            operator delete(*(void **)(v39[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v39[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v39[0];
        if (v39[0])
        {
          v30 = *(void **)(v39[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v39[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v39[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v39[0];
        if (v39[0])
        {
          v38[0] = (void **)(v39[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v38);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v39[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v39[0];
        if (v39[0])
        {
          v38[0] = (void **)(v39[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v38);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v39[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v39[0];
        if (v39[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v39[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v39[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v39[0];
        if (v39[0])
        {
          v23 = *(void **)(v39[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v39[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          result = (std::string *)MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_217EA4250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

uint64_t turi::variant_get_ref<turi::flexible_type>(int *a1)
{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

void sub_217EA456C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_217EA4590(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *turi::get_variant_which_name@<X0>(turi *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (this > 8)
    v2 = "";
  else
    v2 = off_24D9191E8[(int)this];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

std::string *turi::flexible_type_converter<std::string>::get@<X0>(char *a1@<X1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return turi::flexible_type_internals::ft_converter<1>::get<std::string>(a2, a1);
}

void sub_217EA4600(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void boost::throw_exception<boost::bad_get>()
{
  void *exception;
  _QWORD v1[5];
  int v2;

  exception = __cxa_allocate_exception(0x38uLL);
  memset(&v1[2], 0, 24);
  v2 = -1;
  v1[0] = &unk_24D918BD8;
  v1[1] = &unk_24D918C00;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::clone_impl((uint64_t)exception, (uint64_t)v1);
}

void sub_217EA468C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  void *v11;
  int v12;

  a10 = &unk_24D918C48;
  if (a11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a11 + 32))(a11))
    a11 = 0;
  std::exception::~exception((std::exception *)&a9);
  if (v12)
    __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 0:
      return a4;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      a4 = 0;
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
  return a4;
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 48) = &unk_24D918BA8;
  *(_QWORD *)a1 = &unk_24D918C20;
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  v4 = a1 + 8;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v6;
  *(_QWORD *)a1 = &unk_24D918B08;
  *(_QWORD *)(a1 + 8) = &unk_24D918B40;
  *(_QWORD *)(a1 + 48) = &unk_24D918B78;
  boost::exception_detail::copy_boost_exception(v4, a2 + 8);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 48) = &unk_24D918BA8;
  *(_QWORD *)a1 = &unk_24D918C20;
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)a1 = &unk_24D918B08;
  *(_QWORD *)(a1 + 8) = &unk_24D918B40;
  *(_QWORD *)(a1 + 48) = &unk_24D918B78;
  return a1;
}

void sub_217EA4818(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_217EA4910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

const char *boost::bad_get::what(boost::bad_get *this)
{
  return "boost::bad_get: failed value get using boost::get";
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217EA4A08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40F6FF0CB6);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::clone_impl((uint64_t)exception, a1);
}

void sub_217EA4A68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::~clone_impl(_QWORD *a1)
{
  std::exception *v1;

  v1 = (std::exception *)(a1 - 1);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::~clone_impl(a1 - 8);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 1) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 2);
  std::exception::~exception((std::exception *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::bad_get>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::bad_get>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::bad_get>::~error_info_injector(a1 - 8);
}

void boost::bad_get::~bad_get(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

void sub_217EA4C74(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *turi::full_type_name<turi::flexible_type>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v35 = 0;
  v36 = 0;
  v37 = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v35, a1);
  if ((unint64_t)v37 > 9)
    v3 = "undefined";
  else
    v3 = off_24D919230[v37];
  result = std::string::basic_string[abi:ne180100]<0>(a2, v3);
  switch(v37)
  {
    case 2:
      v5 = (unint64_t *)v35;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        v8 = v35;
        if (v35)
        {
          if (*(char *)(v35 + 31) < 0)
            operator delete(*(void **)(v35 + 8));
          v9 = v8;
          v10 = 0x1012C404EF22A49;
          goto LABEL_45;
        }
      }
      break;
    case 3:
      v11 = (unint64_t *)v35;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = v35;
        if (v35)
        {
          v15 = *(void **)(v35 + 8);
          if (v15)
          {
            *(_QWORD *)(v35 + 16) = v15;
            operator delete(v15);
          }
          v9 = v14;
          v10 = 0x1080C409938AC02;
          goto LABEL_45;
        }
      }
      break;
    case 4:
      v16 = (unint64_t *)v35;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v35;
        if (v35)
        {
          v34 = (void **)(v35 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v34);
          goto LABEL_29;
        }
      }
      break;
    case 5:
      v20 = (unint64_t *)v35;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v19 = v35;
        if (v35)
        {
          v34 = (void **)(v35 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_29:
          v9 = v19;
          v10 = 0x1020C405E66F15BLL;
          goto LABEL_45;
        }
      }
      break;
    case 8:
      v30 = (unint64_t *)v35;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = v35;
        if (v35)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v35 + 16));
          v9 = v33;
          v29 = -235920773;
          goto LABEL_44;
        }
      }
      break;
    case 9:
      v23 = (unint64_t *)v35;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = v35;
        if (v35)
        {
          v27 = *(void **)(v35 + 48);
          if (v27)
          {
            *(_QWORD *)(v35 + 56) = v27;
            operator delete(v27);
          }
          v28 = *(void **)(v26 + 24);
          if (v28)
          {
            *(_QWORD *)(v26 + 32) = v28;
            operator delete(v28);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v26 + 8);
          v9 = v26;
          v29 = 2071181815;
LABEL_44:
          v10 = v29 | 0x1030C4000000000;
LABEL_45:
          result = (_QWORD *)MEMORY[0x219A19A08](v9, v10);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_217EA4EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 3:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 8:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>(uint64_t result, uint64_t *a2)
{
  void **v2;
  void **v3;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  unint64_t *v39;
  unint64_t v40;
  void **v41[7];

  if (a2 != (uint64_t *)result)
  {
    v41[5] = v2;
    v41[6] = v3;
    v5 = result;
    switch(*(_BYTE *)(result + 12))
    {
      case 2:
        v6 = *(unint64_t **)result;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          v9 = *(unint64_t **)result;
          if (!*(_QWORD *)result)
            goto LABEL_44;
          if (*((char *)v9 + 31) < 0)
            operator delete((void *)v9[1]);
          v10 = v9;
          v11 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v12 = *(unint64_t **)result;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = *(unint64_t **)result;
          if (!*(_QWORD *)result)
            goto LABEL_44;
          v16 = (void *)v15[1];
          if (v16)
          {
            v15[2] = (unint64_t)v16;
            operator delete(v16);
          }
          v10 = v15;
          v11 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v17 = *(unint64_t **)result;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *(unint64_t **)result;
          if (!*(_QWORD *)result)
            goto LABEL_44;
          v41[0] = (void **)(v20 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v41);
          goto LABEL_27;
        }
        break;
      case 5:
        v21 = *(unint64_t **)result;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v20 = *(unint64_t **)result;
          if (!*(_QWORD *)result)
            goto LABEL_44;
          v41[0] = (void **)(v20 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v41);
LABEL_27:
          v10 = v20;
          v11 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v24 = *(unint64_t **)result;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *(unint64_t **)result;
          if (!*(_QWORD *)result)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v27 + 2);
          v10 = v27;
          v28 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v29 = *(unint64_t **)result;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = *(unint64_t **)result;
          if (*(_QWORD *)result)
          {
            v33 = (void *)v32[6];
            if (v33)
            {
              v32[7] = (unint64_t)v33;
              operator delete(v33);
            }
            v34 = (void *)v32[3];
            if (v34)
            {
              v32[4] = (unint64_t)v34;
              operator delete(v34);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 1));
            v10 = v32;
            v28 = 2071181815;
LABEL_42:
            v11 = v28 | 0x1030C4000000000;
LABEL_43:
            result = MEMORY[0x219A19A08](v10, v11);
          }
LABEL_44:
          *(_QWORD *)v5 = 0;
        }
        break;
      default:
        break;
    }
    v35 = *a2;
    *(_QWORD *)(v5 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)v5 = v35;
    LODWORD(v35) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(v5 + 12) = v35;
    v36 = v35 > 9;
    v37 = (1 << v35) & 0x33C;
    if (!v36 && v37 != 0)
    {
      v39 = *(unint64_t **)v5;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
  }
  return result;
}

std::string *turi::flexible_type_internals::ft_converter<1>::get<std::string>(std::string *a1, char *a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  unint64_t v8;
  const std::string::value_type *v9;
  std::string *v10;
  std::string::size_type v11;
  char v12;
  _QWORD *exception;
  uint64_t v14;
  std::string v15;
  std::string v16;
  std::string v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  if (a2[12] != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "Expecting ");
    v4 = std::string::append(&v15, "string");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v16, ". But we got a ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = a2[12];
    if (v8 > 9)
      v9 = "undefined";
    else
      v9 = off_24D919230[v8];
    v10 = std::string::append(&v17, v9);
    v11 = v10->__r_.__value_.__r.__words[0];
    v18[0] = v10->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v18 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
    v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x18uLL);
    v14 = v18[0];
    *exception = v11;
    exception[1] = v14;
    *(_QWORD *)((char *)exception + 15) = *(_QWORD *)((char *)v18 + 7);
    *((_BYTE *)exception + 23) = v12;
  }
  return std::string::operator=(a1, (const std::string *)(*(_QWORD *)a2 + 8));
}

void sub_217EA5328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__mem_fn<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string)>::operator()[abi:ne180100]<turi::ml_model_base*&,std::string&>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, std::string *);
  _QWORD *v5;
  uint64_t v6;
  std::string __p;

  v4 = *(uint64_t (**)(_QWORD *, std::string *))a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = (_QWORD *)(*a2 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, std::string *))(*v5 + v4);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v6 = v4(v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_217EA5400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(unsigned int *a1, unsigned int *a2)
{
  boost::detail::variant *v3;
  boost::detail::variant *v4;
  double result;
  uint64_t *v6;
  unsigned int v7;

  v3 = (boost::detail::variant *)*a1;
  v4 = (boost::detail::variant *)*a2;
  if ((_DWORD)v3 == (_DWORD)v4)
  {
    v6 = (uint64_t *)(a2 + 2);
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_storage,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v3, v3 ^ ((int)v3 >> 31), &v6, (std::vector<std::string> *)(a1 + 2));
  }
  else
  {
    v6 = (uint64_t *)a1;
    v7 = v4 ^ ((int)v4 >> 31);
    return boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v4, v7, (uint64_t)&v6, (uint64_t)(a2 + 2));
  }
  return result;
}

void boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_storage,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t **a3, std::vector<std::string> *a4)
{
  std::string *v4;

  switch(a2)
  {
    case 0:
      boost::detail::variant::move_storage::internal_visit<turi::flexible_type>(a3, (uint64_t)a4);
      break;
    case 1:
    case 3:
    case 4:
    case 5:
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a4, (__int128 *)*a3);
      break;
    case 2:
      boost::detail::variant::move_storage::internal_visit<turi::dataframe_t>((std::vector<std::string> **)a3, a4);
      break;
    case 6:
    case 7:
    case 8:
      v4 = (std::string *)**a3;
      **a3 = (uint64_t)a4->__begin_;
      a4->__begin_ = v4;
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
}

uint64_t **boost::detail::variant::move_storage::internal_visit<turi::flexible_type>(uint64_t **result, uint64_t a2)
{
  uint64_t *v2;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void **v34;

  v2 = *result;
  if (*result != (uint64_t *)a2)
  {
    switch(*(_BYTE *)(a2 + 12))
    {
      case 2:
        v4 = *(unint64_t **)a2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a2;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v34 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v34);
          goto LABEL_27;
        }
        break;
      case 5:
        v19 = *(unint64_t **)a2;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v34 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_27:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v22 = *(unint64_t **)a2;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a2;
          if (*(_QWORD *)a2)
          {
            v31 = (void *)v30[6];
            if (v31)
            {
              v30[7] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[3];
            if (v32)
            {
              v30[4] = (unint64_t)v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            result = (uint64_t **)MEMORY[0x219A19A08](v8, v9);
          }
LABEL_44:
          *(_QWORD *)a2 = 0;
        }
        break;
      default:
        break;
    }
    v33 = *v2;
    *(_QWORD *)(a2 + 5) = *(uint64_t *)((char *)v2 + 5);
    *(_QWORD *)a2 = v33;
    *(_BYTE *)(a2 + 12) = *((_BYTE *)v2 + 12);
    *((_BYTE *)v2 + 12) = 0;
  }
  return result;
}

void boost::detail::variant::move_storage::internal_visit<turi::dataframe_t>(std::vector<std::string> **a1, std::vector<std::string> *this)
{
  std::vector<std::string> *v3;

  v3 = *a1;
  std::vector<std::string>::__vdeallocate(this);
  *this = *v3;
  v3->__begin_ = 0;
  v3->__end_ = 0;
  v3->__end_cap_.__value_ = 0;
  std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__move_assign((uint64_t)&this[1], &v3[1].__begin_);
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__move_assign((uint64_t)&this[2], &v3[2].__begin_);
}

void std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1, *(char **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

void std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

double boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  unsigned int *v7;
  _QWORD *v8;

  switch(a2)
  {
    case 0:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a3);
      v7 = *(unsigned int **)a3;
      *((_QWORD *)v7 + 1) = 0;
      v7[4] = 0;
      *((_BYTE *)v7 + 20) = 0;
      v8 = *(_QWORD **)a4;
      *(_QWORD *)((char *)v7 + 13) = *(_QWORD *)(a4 + 5);
      *((_QWORD *)v7 + 1) = v8;
      *((_BYTE *)v7 + 20) = *(_BYTE *)(a4 + 12);
      *(_BYTE *)(a4 + 12) = 0;
      goto LABEL_3;
    case 1:
    case 3:
    case 4:
    case 5:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a3);
      v6 = *(_OWORD *)a4;
      *(_OWORD *)(*(_QWORD *)a3 + 8) = *(_OWORD *)a4;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
LABEL_3:
      **(_DWORD **)a3 = *(_DWORD *)(a3 + 8);
      break;
    case 2:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<turi::dataframe_t,mpl_::BOOL_<true>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(a3, a4);
      break;
    case 6:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(a3, (_QWORD **)a4);
      break;
    case 7:
      *(_QWORD *)&v6 = boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(a3, (__n128 **)a4).n128_u64[0];
      break;
    case 8:
      *(_QWORD *)&v6 = boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<boost::recursive_wrapper<turi::function_closure_info>>(a3, (_OWORD **)a4).n128_u64[0];
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
  return *(double *)&v6;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<turi::dataframe_t,mpl_::BOOL_<true>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;

  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  v4 = *(unsigned int **)a1;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *(_OWORD *)(v4 + 2) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 3) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 24);
  v5 = (_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v4 + 5) = v6;
  v7 = v4 + 10;
  v8 = *(_QWORD *)(a2 + 40);
  *((_QWORD *)v4 + 6) = v8;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v5;
    *v5 = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  else
  {
    *((_QWORD *)v4 + 4) = v7;
  }
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a2 + 48);
  v9 = (_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 56);
  *((_QWORD *)v4 + 8) = v10;
  v11 = v4 + 16;
  v12 = *(_QWORD *)(a2 + 64);
  *((_QWORD *)v4 + 9) = v12;
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v11;
    *(_QWORD *)(a2 + 48) = v9;
    *v9 = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  else
  {
    *((_QWORD *)v4 + 7) = v11;
  }
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
}

_QWORD *boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(uint64_t a1, _QWORD **a2)
{
  _QWORD *result;

  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  result = boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper((_QWORD *)(*(_QWORD *)a1 + 8), a2);
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_217EA5A90(void *a1)
{
  _DWORD **v1;

  __cxa_begin_catch(a1);
  **v1 = 0;
  __cxa_rethrow();
}

void sub_217EA5AA4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (_QWORD *)operator new();
  v5 = *a2;
  *v4 = **a2;
  v6 = v5 + 1;
  v7 = v5[1];
  v4[1] = v7;
  v8 = v4 + 1;
  v9 = v5[2];
  v4[2] = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *v5 = v6;
    *v6 = 0;
    v5[2] = 0;
  }
  else
  {
    *v4 = v8;
  }
  *a1 = v4;
  return a1;
}

__n128 boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(uint64_t a1, __n128 **a2)
{
  unsigned int *v4;
  __n128 *v5;
  __n128 *v6;
  __n128 result;

  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  v4 = *(unsigned int **)a1;
  v5 = (__n128 *)operator new();
  v6 = *a2;
  result = **a2;
  *v5 = result;
  v5[1].n128_u64[0] = v6[1].n128_u64[0];
  v6->n128_u64[0] = 0;
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  *((_QWORD *)v4 + 1) = v5;
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_217EA5BAC(void *a1)
{
  _DWORD **v1;

  __cxa_begin_catch(a1);
  **v1 = 0;
  __cxa_rethrow();
}

void sub_217EA5BC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

__n128 boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<boost::recursive_wrapper<turi::function_closure_info>>(uint64_t a1, _OWORD **a2)
{
  unsigned int *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __n128 result;

  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  v4 = *(unsigned int **)a1;
  v5 = operator new();
  v6 = *a2;
  v7 = *((_QWORD *)*a2 + 2);
  *(_OWORD *)v5 = **a2;
  *(_QWORD *)(v5 + 16) = v7;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = 0;
  result = *(__n128 *)((char *)v6 + 24);
  *(__n128 *)(v5 + 24) = result;
  *(_QWORD *)(v5 + 40) = *((_QWORD *)v6 + 5);
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v4 + 1) = v5;
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_217EA5C64(void *a1)
{
  _DWORD **v1;

  __cxa_begin_catch(a1);
  **v1 = 0;
  __cxa_rethrow();
}

void sub_217EA5C78(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D918C78;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D918C78;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D918C78;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217EA5DA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D918C78;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D918CF8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217EA60C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D918CF8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D918CF8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D918CF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217EA6220(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D918CF8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217EA639C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  uint64_t *v8;
  std::string v9;
  uint64_t v10;
  uint64_t *v11;
  std::vector<std::string> v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  char *v23[2];
  uint64_t v24;
  int v25;
  char v26;
  void **v27[3];

  v27[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  v21 = 0;
  v22 = v23;
  v16 = 0;
  v17 = 0;
  v14 = a2;
  __p = 0;
  memset(&v12, 0, sizeof(v12));
  v13 = a3;
  if (&v12 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v12.__begin_;
    end = (__int128 *)v12.__end_;
  }
  v11 = &v14;
  v8 = &v14;
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v10 = v13;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>((uint64_t *)&v8);
  v27[0] = (void **)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v27);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::flexible_type>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&v24, a1, &v14);
  memset(v27, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v27, &v24);
  *(void ***)(a4 + 13) = *(void ***)((char *)v27 + 5);
  *(void ***)(a4 + 8) = v27[0];
  *(_BYTE *)(a4 + 20) = BYTE4(v27[1]);
  *(_DWORD *)a4 = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::flexible_type>::~result_of_function_wrapper((uint64_t)&v24);
  v27[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v27);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(v19);
}

void sub_217EA656C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 72) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 72));
  if (a25 < 0)
    operator delete(__p);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a26);
  _Unwind_Resume(a1);
}

uint64_t turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::flexible_type>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, _QWORD *);
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t *v8;
  int v9;
  unsigned int v10;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  void *v41;
  void **v42;

  v4 = *(uint64_t (**)(_QWORD *, _QWORD *))a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (_QWORD *)(*a3 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD *))(*v6 + v4);
  result = v4(v6, a3 + 1);
  v8 = *(unint64_t **)result;
  v9 = *(_DWORD *)(result + 8);
  v10 = *(unsigned __int8 *)(result + 12);
  if (v10 <= 9 && ((1 << v10) & 0x33C) != 0)
  {
    do
      v12 = __ldaxr(v8);
    while (__stlxr(v12 + 1, v8));
  }
  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v16 + 31) < 0)
            operator delete((void *)v16[1]);
          v17 = v16;
          v18 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v19 = *(unint64_t **)a1;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v23 = (void *)v22[1];
          if (v23)
          {
            v22[2] = (unint64_t)v23;
            operator delete(v23);
          }
          v17 = v22;
          v18 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v24 = *(unint64_t **)a1;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v42 = (void **)(v27 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v42);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      v28 = *(unint64_t **)a1;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v27 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v42 = (void **)(v27 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v42);
LABEL_33:
          v17 = v27;
          v18 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v31 = *(unint64_t **)a1;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v34 + 2);
          v17 = v34;
          v35 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v36 = *(unint64_t **)a1;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v39 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v40 = (void *)v39[6];
          if (v40)
          {
            v39[7] = (unint64_t)v40;
            operator delete(v40);
          }
          v41 = (void *)v39[3];
          if (v41)
          {
            v39[4] = (unint64_t)v41;
            operator delete(v41);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v39 + 1));
          v17 = v39;
          v35 = 2071181815;
LABEL_48:
          v18 = v35 | 0x1030C4000000000;
LABEL_49:
          result = MEMORY[0x219A19A08](v17, v18);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 12) = v10;
  return result;
}

uint64_t turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::flexible_type>::~result_of_function_wrapper(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_ED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D918D78;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_ED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D918D78;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_E7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D918D78;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217EA6B3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_E7__cloneEPNS0_6__baseIS1H_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D918D78;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_E7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_E18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_EclEOS1D_OS1G_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_E11target_typeEv()
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D918DF8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217EA6E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EED1Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D918DF8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EED0Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D918DF8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EE7__cloneEv(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D918DF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217EA6FBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EE7__cloneEPNS0_6__baseIS1R_EE(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D918DF8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EE7destroyEv(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EE18destroy_deallocateEv(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EEclEOS1O_OS1E_(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(BOOL (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(BOOL (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(BOOL (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(BOOL (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(BOOL (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217EA7138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(BOOL (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  uint64_t (*v8)(_QWORD *);
  uint64_t v9;
  _QWORD *v10;
  std::string v11;
  uint64_t v12;
  uint64_t *v13;
  std::vector<std::string> v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  char *v22[2];
  unsigned __int8 v23[8];
  _BYTE v24[13];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v17 = 1;
  __p = 0;
  v19 = 0;
  v22[0] = 0;
  v22[1] = 0;
  v20 = 0;
  v21 = v22;
  v15 = a3;
  v16 = a2;
  memset(&v14, 0, sizeof(v14));
  if (&v14 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v14.__begin_;
    end = (__int128 *)v14.__end_;
  }
  v13 = &v16;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v12 = v15;
  *(_QWORD *)v24 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  v8 = *(uint64_t (**)(_QWORD *))a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_QWORD *)(v16 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *))(*v10 + v8);
  v23[0] = v8(v10);
  turi::flexible_type_converter<BOOL>::set(v23, (uint64_t)v24);
  *(_QWORD *)(a4 + 13) = *(_QWORD *)&v24[5];
  *(_QWORD *)(a4 + 8) = *(_QWORD *)v24;
  *(_BYTE *)(a4 + 20) = v24[12];
  *(_DWORD *)a4 = 0;
  *(_QWORD *)v24 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v21, v22[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
}

void sub_217EA72E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  *(_QWORD *)(v14 - 80) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 80));
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

void turi::flexible_type_converter<BOOL>::set(unsigned __int8 *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_resolver<3>::set<BOOL const&>(a2, a1);
}

void sub_217EA733C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_resolver<3>::set<BOOL const&>(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v33 = 0;
  v32 = *a2;
  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>(a1, &v32);
  switch(v34)
  {
    case 2:
      v2 = (unint64_t *)v32;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = v32;
        if (v32)
        {
          if (*(char *)(v32 + 31) < 0)
            operator delete(*(void **)(v32 + 8));
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)v32;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = v32;
        if (v32)
        {
          v12 = *(void **)(v32 + 8);
          if (v12)
          {
            *(_QWORD *)(v32 + 16) = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)v32;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v32;
        if (v32)
        {
          v31 = (void **)(v32 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)v32;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = v32;
        if (v32)
        {
          v31 = (void **)(v32 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v27 = (unint64_t *)v32;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v32;
        if (v32)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v32 + 16));
          v6 = v30;
          v26 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v20 = (unint64_t *)v32;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v32;
        if (v32)
        {
          v24 = *(void **)(v32 + 48);
          if (v24)
          {
            *(_QWORD *)(v32 + 56) = v24;
            operator delete(v24);
          }
          v25 = *(void **)(v23 + 24);
          if (v25)
          {
            *(_QWORD *)(v23 + 32) = v25;
            operator delete(v25);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v23 + 8);
          v6 = v23;
          v26 = 2071181815;
LABEL_41:
          v7 = v26 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      return;
  }
}

void sub_217EA760C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 3:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 8:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  std::runtime_error *exception;
  std::string *v49;
  __int128 v50;
  void *__p[2];
  void *v52[2];
  __int128 v53;
  __int128 v54;
  std::string v55;
  size_t __idx;

  v3 = 0;
  switch(a2[12])
  {
    case 0:
      v3 = *(_QWORD *)a2;
      goto LABEL_29;
    case 1:
      v3 = (uint64_t)*(double *)a2;
      goto LABEL_29;
    case 2:
      v7 = *(_QWORD *)a2;
      v8 = (char **)(*(_QWORD *)a2 + 8);
      __idx = 0;
      v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0)
        v9 = *v8;
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      v3 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v52[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v7 + 31) < 0)
        v10 = *(_QWORD *)(v7 + 16);
      else
        v10 = *(unsigned __int8 *)(v7 + 31);
      if (__idx != v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v49 = std::string::append(&v55, " cannot be interpreted as an integer");
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v52[0] = (void *)v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v4 = *(_QWORD *)a2;
      __p[1] = 0;
      v52[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v4 + 8), *(_QWORD *)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      v11 = *(_QWORD *)a2;
      __p[1] = 0;
      v52[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v55.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
      goto LABEL_28;
    case 5:
      v12 = *(_QWORD *)a2;
      __p[1] = 0;
      v52[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v55.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
      goto LABEL_28;
    case 6:
      v3 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v13 = *(_QWORD *)a2;
      v14 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v14;
      if (v14)
      {
        v15 = v14 + 2;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = *(_OWORD *)(v13 + 24);
      v18 = *(_OWORD *)(v13 + 56);
      v53 = *(_OWORD *)(v13 + 40);
      v54 = v18;
      *(_OWORD *)v52 = v17;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v53 + 1))
      {
        *(_QWORD *)&v54 = *((_QWORD *)&v53 + 1);
        operator delete(*((void **)&v53 + 1));
      }
      if (v52[0])
      {
        v52[1] = v52[0];
        operator delete(v52[0]);
      }
      v3 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_29;
      v5 = (unint64_t *)((char *)__p[1] + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
      }
LABEL_28:
      v3 = 0;
LABEL_29:
      switch(*(_BYTE *)(a1 + 12))
      {
        case 2:
          v19 = *(unint64_t **)a1;
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = *(unint64_t **)a1;
            if (!*(_QWORD *)a1)
              goto LABEL_71;
            if (*((char *)v22 + 31) < 0)
              operator delete((void *)v22[1]);
            v23 = v22;
            v24 = 0x1012C404EF22A49;
            goto LABEL_70;
          }
          break;
        case 3:
          v36 = *(unint64_t **)a1;
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = *(unint64_t **)a1;
            if (!*(_QWORD *)a1)
              goto LABEL_71;
            v40 = (void *)v39[1];
            if (v40)
            {
              v39[2] = (unint64_t)v40;
              operator delete(v40);
            }
            v23 = v39;
            v24 = 0x1080C409938AC02;
            goto LABEL_70;
          }
          break;
        case 4:
          v25 = *(unint64_t **)a1;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            v28 = *(unint64_t **)a1;
            if (!*(_QWORD *)a1)
              goto LABEL_71;
            __p[0] = v28 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_63;
          }
          break;
        case 5:
          v41 = *(unint64_t **)a1;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            v28 = *(unint64_t **)a1;
            if (!*(_QWORD *)a1)
              goto LABEL_71;
            __p[0] = v28 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_63:
            v23 = v28;
            v24 = 0x1020C405E66F15BLL;
            goto LABEL_70;
          }
          break;
        case 8:
          v44 = *(unint64_t **)a1;
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            v47 = *(unint64_t **)a1;
            if (!*(_QWORD *)a1)
              goto LABEL_71;
            boost::detail::shared_count::~shared_count((unsigned int **)v47 + 2);
            v23 = v47;
            v35 = -235920773;
            goto LABEL_69;
          }
          break;
        case 9:
          v29 = *(unint64_t **)a1;
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            v32 = *(unint64_t **)a1;
            if (*(_QWORD *)a1)
            {
              v33 = (void *)v32[6];
              if (v33)
              {
                v32[7] = (unint64_t)v33;
                operator delete(v33);
              }
              v34 = (void *)v32[3];
              if (v34)
              {
                v32[4] = (unint64_t)v34;
                operator delete(v34);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 1));
              v23 = v32;
              v35 = 2071181815;
LABEL_69:
              v24 = v35 | 0x1030C4000000000;
LABEL_70:
              MEMORY[0x219A19A08](v23, v24);
            }
LABEL_71:
            *(_QWORD *)a1 = 0;
          }
          break;
        default:
          break;
      }
      *(_QWORD *)a1 = v3;
      *(_DWORD *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 12) = 0;
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_217EA7B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 41) < 0)
  {
    operator delete(*(void **)(v16 - 64));
    if ((v15 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

_QWORD *turi::flexible_type_impl::ndarray<double>::ndarray(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 2, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 5, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
  a1[8] = *(_QWORD *)(a2 + 64);
  return a1;
}

void sub_217EA7CA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)v6[1];
    while (a2 != a3)
    {
      v7 = std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]((uint64_t)result, a2);
      a2 += 4;
      result = (_QWORD *)(v7 + 32);
    }
    v6[1] = result;
  }
  return result;
}

void sub_217EA7D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100](uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  if (a2 == (uint64_t *)result)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 28) = 0;
  }
  else
  {
    v2 = *a2;
    *(_QWORD *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)result = v2;
    LODWORD(v2) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(result + 12) = v2;
    v3 = v2 > 9;
    v4 = (1 << v2) & 0x33C;
    if (!v3 && v4 != 0)
    {
      v6 = *(unint64_t **)result;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    *(_QWORD *)(result + 16) = 0;
    v8 = (unint64_t **)(result + 16);
    *(_DWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 28) = 0;
    v9 = a2[2];
    *(_QWORD *)(result + 21) = *(uint64_t *)((char *)a2 + 21);
    *(_QWORD *)(result + 16) = v9;
    LODWORD(v9) = *((unsigned __int8 *)a2 + 28);
    *(_BYTE *)(result + 28) = v9;
    switch((int)v9)
    {
      case 2:
        v10 = *v8;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        break;
      case 3:
        v12 = *v8;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        break;
      case 4:
        v14 = *v8;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        break;
      case 5:
        v16 = *v8;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
        break;
      case 8:
        v18 = *v8;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
        break;
      case 9:
        v20 = *v8;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        break;
      default:
        return result;
    }
  }
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_ED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D918E78;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_ED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D918E78;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_E7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D918E78;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217EA801C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_E7__cloneEPNS0_6__baseIS1E_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D918E78;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_E7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_E18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_EclEOS1A_OS1D_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseEbJEJEEENSt3__18functionIFN5boost7variantINS5_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSC_INS_10model_baseEEENSC_INS_17unity_sframe_baseEEENSC_INS_17unity_sarray_baseEEENS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS5_18recursive_variant_ENS3_4lessISS_EENSQ_INS3_4pairIKSS_ST_EEEEEENS3_6vectorIST_NSQ_IST_EEEENS5_17recursive_wrapperINS_21function_closure_infoEEEEEEPSG_NSM_ISS_S17_SV_NSQ_INSW_ISX_S17_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS18_S1B_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseEbJEJEEENSt3__18functionIFN5boost7variantINS5_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSC_INS_10model_baseEEENSC_INS_17unity_sframe_baseEEENSC_INS_17unity_sarray_baseEEENS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS5_18recursive_variant_ENS3_4lessISS_EENSQ_INS3_4pairIKSS_ST_EEEEEENS3_6vectorIST_NSQ_IST_EEEENS5_17recursive_wrapperINS_21function_closure_infoEEEEEEPSG_NSM_ISS_S17_SV_NSQ_INSW_ISX_S17_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS18_S1B_E_;
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D918EF8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217EA8340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EED1Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D918EF8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EED0Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D918EF8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EE7__cloneEv(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D918EF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217EA849C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EE7__cloneEPNS0_6__baseIS1U_EE(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D918EF8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EE7destroyEv(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EE18destroy_deallocateEv(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EEclEOS1R_OS1H_(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217EA8618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  std::string *v8;
  _QWORD *v9[3];
  std::string v10;
  uint64_t v11;
  uint64_t *v12;
  std::vector<std::string> v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *__p;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  char *v21[2];
  _BYTE v22[13];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v16 = 1;
  __p = 0;
  v18 = 0;
  v21[0] = 0;
  v21[1] = 0;
  v19 = 0;
  v20 = v21;
  v14 = a3;
  v15 = a2;
  memset(&v13, 0, sizeof(v13));
  if (&v13 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v13.__begin_;
    end = (__int128 *)v13.__end_;
  }
  v12 = &v15;
  v9[2] = &v15;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v11 = v14;
  v8 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v9[0] = 0;
  v9[1] = 0;
  v8 = (std::string *)v9;
  _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_13flexible_typeENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEEE4callIZZNS0_38generate_const_member_function_wrapperILm0ENS_13ml_model_baseESH_JEEENS2_8functionIFN5boost7variantINSN_6detail7variant14recursive_flagISA_EEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENST_INS_10model_baseEEENST_INS_17unity_sframe_baseEEENST_INS_17unity_sarray_baseEEENS3_IS9_NSN_18recursive_variant_ESC_NS7_INSD_ISE_S13_EEEEEENS2_6vectorIS13_NS7_IS13_EEEENSN_17recursive_wrapperINS_21function_closure_infoEEEEEEPT0_NS3_IS9_S1D_SC_NS7_INSD_ISE_S1D_EEEEEEEEEMS1E_KFT1_DpT2_ENS17_IS9_NS7_IS9_EEEEENKUlPSL_S1I_E_clES1S_S1I_EUlvE_EEvT_((uint64_t)&v8, a1, &v15);
  turi::flexible_type_converter<std::map<std::string,turi::flexible_type>>::set(&v8, (uint64_t)v22);
  *(_QWORD *)(a4 + 13) = *(_QWORD *)&v22[5];
  *(_QWORD *)(a4 + 8) = *(_QWORD *)v22;
  *(_BYTE *)(a4 + 20) = v22[12];
  *(_DWORD *)a4 = 0;
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v9[0]);
  v8 = (std::string *)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v20, v21[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
}

void sub_217EA87CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va1);
  _Unwind_Resume(a1);
}

void _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_13flexible_typeENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEEE4callIZZNS0_38generate_const_member_function_wrapperILm0ENS_13ml_model_baseESH_JEEENS2_8functionIFN5boost7variantINSN_6detail7variant14recursive_flagISA_EEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENST_INS_10model_baseEEENST_INS_17unity_sframe_baseEEENST_INS_17unity_sarray_baseEEENS3_IS9_NSN_18recursive_variant_ESC_NS7_INSD_ISE_S13_EEEEEENS2_6vectorIS13_NS7_IS13_EEEENSN_17recursive_wrapperINS_21function_closure_infoEEEEEEPT0_NS3_IS9_S1D_SC_NS7_INSD_ISE_S1D_EEEEEEEEEMS1E_KFT1_DpT2_ENS17_IS9_NS7_IS9_EEEEENKUlPSL_S1I_E_clES1S_S1I_EUlvE_EEvT_(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  void (*v5)(_QWORD **__return_ptr, _QWORD *);
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v5 = *(void (**)(_QWORD **__return_ptr, _QWORD *))a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = (_QWORD *)(*a3 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(void (**)(_QWORD **__return_ptr, _QWORD *))(*v6 + v5);
  v5(&v10, v6);
  v7 = a1 + 8;
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  v8 = v11;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v12;
  *(_QWORD *)(a1 + 16) = v12;
  if (v9)
  {
    v8[2] = v7;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)a1 = v7;
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v10, v8);
}

void turi::flexible_type_converter<std::map<std::string,turi::flexible_type>>::set(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,turi::flexible_type>>((uint64_t *)a2, a1);
}

void sub_217EA88D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,turi::flexible_type>>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  void **v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  void **v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  unsigned int v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  BOOL v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  void *v86;
  void *v87;
  unsigned int v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  _QWORD *v101;
  _QWORD *v102;
  void **v103;
  _QWORD *v104;
  unint64_t *v105;
  std::string *v106;
  __int128 v107;
  _QWORD *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  void *v113;
  _QWORD *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  __int128 v127;
  __int128 v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t *v137;
  __int128 v138;
  unint64_t v139;
  void **v140;
  uint64_t v141[2];
  _BYTE v142[13];
  _BYTE v143[13];
  void **v144[3];

  v144[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v138 = 0uLL;
  v139 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v138, a2[2]);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      memset(v141, 0, 13);
      turi::flexible_type::operator=<std::string>(v141, (const std::string *)(v5 + 4));
      memset(v144, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v144, v5 + 7);
      *(_QWORD *)&v142[5] = *(uint64_t *)((char *)v141 + 5);
      *(_QWORD *)v142 = v141[0];
      v142[12] = BYTE4(v141[1]);
      BYTE4(v141[1]) = 0;
      *(void ***)&v143[5] = *(void ***)((char *)v144 + 5);
      *(void ***)v143 = v144[0];
      v143[12] = BYTE4(v144[1]);
      BYTE4(v144[1]) = 0;
      v7 = *((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1) >= v139)
      {
        v10 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v138, (uint64_t *)v142);
      }
      else
      {
        **((_QWORD **)&v138 + 1) = 0;
        *(_DWORD *)(v7 + 8) = 0;
        *(_BYTE *)(v7 + 12) = 0;
        v8 = *(_QWORD *)v142;
        *(_QWORD *)(v7 + 5) = *(_QWORD *)&v142[5];
        *(_QWORD *)v7 = v8;
        *(_BYTE *)(v7 + 12) = v142[12];
        v142[12] = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_BYTE *)(v7 + 28) = 0;
        v9 = *(_QWORD *)v143;
        *(_QWORD *)(v7 + 21) = *(_QWORD *)&v143[5];
        *(_QWORD *)(v7 + 16) = v9;
        *(_BYTE *)(v7 + 28) = v143[12];
        v143[12] = 0;
        v10 = v7 + 32;
      }
      *((_QWORD *)&v138 + 1) = v10;
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v142);
      switch(BYTE4(v144[1]))
      {
        case 2:
          v11 = (unint64_t *)v144[0];
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            v14 = v144[0];
            if (v144[0])
            {
              if (*((char *)v144[0] + 31) < 0)
                operator delete(v144[0][1]);
              v15 = v14;
              v16 = 0x1012C404EF22A49;
              goto LABEL_46;
            }
          }
          break;
        case 3:
          v28 = (unint64_t *)v144[0];
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v31 = v144[0];
            if (v144[0])
            {
              v32 = v144[0][1];
              if (v32)
              {
                v144[0][2] = v32;
                operator delete(v32);
              }
              v15 = v31;
              v16 = 0x1080C409938AC02;
              goto LABEL_46;
            }
          }
          break;
        case 4:
          v17 = (unint64_t *)v144[0];
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = v144[0];
            if (v144[0])
            {
              v140 = v144[0] + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v140);
              goto LABEL_39;
            }
          }
          break;
        case 5:
          v33 = (unint64_t *)v144[0];
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v20 = v144[0];
            if (v144[0])
            {
              v140 = v144[0] + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v140);
LABEL_39:
              v15 = v20;
              v16 = 0x1020C405E66F15BLL;
              goto LABEL_46;
            }
          }
          break;
        case 8:
          v36 = (unint64_t *)v144[0];
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = v144[0];
            if (v144[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v144[0] + 2);
              v15 = v39;
              v27 = -235920773;
              goto LABEL_45;
            }
          }
          break;
        case 9:
          v21 = (unint64_t *)v144[0];
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v24 = v144[0];
            if (v144[0])
            {
              v25 = v144[0][6];
              if (v25)
              {
                v144[0][7] = v25;
                operator delete(v25);
              }
              v26 = v24[3];
              if (v26)
              {
                v24[4] = v26;
                operator delete(v26);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v24 + 1));
              v15 = v24;
              v27 = 2071181815;
LABEL_45:
              v16 = v27 | 0x1030C4000000000;
LABEL_46:
              MEMORY[0x219A19A08](v15, v16);
            }
          }
          break;
        default:
          break;
      }
      switch(BYTE4(v141[1]))
      {
        case 2:
          v40 = (unint64_t *)v141[0];
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            v43 = v141[0];
            if (v141[0])
            {
              if (*(char *)(v141[0] + 31) < 0)
                operator delete(*(void **)(v141[0] + 8));
              v44 = v43;
              v45 = 0x1012C404EF22A49;
              goto LABEL_88;
            }
          }
          break;
        case 3:
          v57 = (unint64_t *)v141[0];
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            v60 = v141[0];
            if (v141[0])
            {
              v61 = *(void **)(v141[0] + 8);
              if (v61)
              {
                *(_QWORD *)(v141[0] + 16) = v61;
                operator delete(v61);
              }
              v44 = v60;
              v45 = 0x1080C409938AC02;
              goto LABEL_88;
            }
          }
          break;
        case 4:
          v46 = (unint64_t *)v141[0];
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            v49 = v141[0];
            if (v141[0])
            {
              v144[0] = (void **)(v141[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v144);
              goto LABEL_81;
            }
          }
          break;
        case 5:
          v62 = (unint64_t *)v141[0];
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v49 = v141[0];
            if (v141[0])
            {
              v144[0] = (void **)(v141[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v144);
LABEL_81:
              v44 = v49;
              v45 = 0x1020C405E66F15BLL;
              goto LABEL_88;
            }
          }
          break;
        case 8:
          v65 = (unint64_t *)v141[0];
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            v68 = v141[0];
            if (v141[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v141[0] + 16));
              v44 = v68;
              v56 = -235920773;
              goto LABEL_87;
            }
          }
          break;
        case 9:
          v50 = (unint64_t *)v141[0];
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v53 = v141[0];
            if (v141[0])
            {
              v54 = *(void **)(v141[0] + 48);
              if (v54)
              {
                *(_QWORD *)(v141[0] + 56) = v54;
                operator delete(v54);
              }
              v55 = *(void **)(v53 + 24);
              if (v55)
              {
                *(_QWORD *)(v53 + 32) = v55;
                operator delete(v55);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v53 + 8);
              v44 = v53;
              v56 = 2071181815;
LABEL_87:
              v45 = v56 | 0x1030C4000000000;
LABEL_88:
              MEMORY[0x219A19A08](v44, v45);
            }
          }
          break;
        default:
          break;
      }
      v69 = (_QWORD *)v5[1];
      if (v69)
      {
        do
        {
          v70 = v69;
          v69 = (_QWORD *)*v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          v70 = (_QWORD *)v5[2];
          v71 = *v70 == (_QWORD)v5;
          v5 = v70;
        }
        while (!v71);
      }
      v5 = v70;
    }
    while (v70 != v4);
  }
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      v72 = (unint64_t *)*a1;
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        v75 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        if (*((char *)v75 + 31) < 0)
          operator delete((void *)v75[1]);
        v76 = v75;
        v77 = 0x1012C404EF22A49;
        goto LABEL_136;
      }
      break;
    case 3:
      v89 = (unint64_t *)*a1;
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v92 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        v93 = (void *)v92[1];
        if (v93)
        {
          v92[2] = (unint64_t)v93;
          operator delete(v93);
        }
        v76 = v92;
        v77 = 0x1080C409938AC02;
        goto LABEL_136;
      }
      break;
    case 4:
      v78 = (unint64_t *)*a1;
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        v81 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        *(_QWORD *)v142 = v81 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v142);
        goto LABEL_129;
      }
      break;
    case 5:
      v94 = (unint64_t *)*a1;
      do
      {
        v95 = __ldaxr(v94);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, v94));
      if (!v96)
      {
        v81 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        *(_QWORD *)v142 = v81 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v142);
LABEL_129:
        v76 = v81;
        v77 = 0x1020C405E66F15BLL;
        goto LABEL_136;
      }
      break;
    case 8:
      v97 = (unint64_t *)*a1;
      do
      {
        v98 = __ldaxr(v97);
        v99 = v98 - 1;
      }
      while (__stlxr(v99, v97));
      if (!v99)
      {
        v100 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        boost::detail::shared_count::~shared_count((unsigned int **)v100 + 2);
        v76 = v100;
        v88 = -235920773;
        goto LABEL_135;
      }
      break;
    case 9:
      v82 = (unint64_t *)*a1;
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        v85 = (unint64_t *)*a1;
        if (*a1)
        {
          v86 = (void *)v85[6];
          if (v86)
          {
            v85[7] = (unint64_t)v86;
            operator delete(v86);
          }
          v87 = (void *)v85[3];
          if (v87)
          {
            v85[4] = (unint64_t)v87;
            operator delete(v87);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v85 + 1));
          v76 = v85;
          v88 = 2071181815;
LABEL_135:
          v77 = v88 | 0x1030C4000000000;
LABEL_136:
          MEMORY[0x219A19A08](v76, v77);
        }
LABEL_137:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 5;
  v101 = (_QWORD *)operator new();
  v102 = v101;
  *v101 = 0;
  v101[1] = 0;
  v103 = (void **)(v101 + 1);
  v101[2] = 0;
  v101[3] = 0;
  *a1 = (uint64_t)v101;
  *v101 = 1;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      if (*v101 != 1)
      {
        v104 = (_QWORD *)operator new();
        v105 = (unint64_t *)*a1;
        *v104 = *(_QWORD *)*a1;
        v106 = (std::string *)(v104 + 1);
        if (*((char *)v105 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v106, (const std::string::value_type *)v105[1], v105[2]);
        }
        else
        {
          v107 = *(_OWORD *)(v105 + 1);
          v104[3] = v105[3];
          *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v107;
        }
        *a1 = (uint64_t)v104;
        *v104 = 1;
        do
        {
          v135 = __ldaxr(v102);
          v136 = v135 - 1;
        }
        while (__stlxr(v136, v102));
        if (!v136)
        {
          v112 = 0x1012C404EF22A49;
          if ((*((char *)v102 + 31) & 0x80000000) == 0)
            goto LABEL_178;
          v113 = *v103;
          goto LABEL_177;
        }
      }
      break;
    case 3:
      if (*v101 != 1)
      {
        v108 = (_QWORD *)operator new();
        v109 = (unint64_t *)*a1;
        *v108 = *(_QWORD *)*a1;
        v108[2] = 0;
        v108[3] = 0;
        v108[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v108 + 1, (const void *)v109[1], v109[2], (uint64_t)(v109[2] - v109[1]) >> 3);
        *a1 = (uint64_t)v108;
        *v108 = 1;
        do
        {
          v110 = __ldaxr(v102);
          v111 = v110 - 1;
        }
        while (__stlxr(v111, v102));
        if (!v111)
        {
          v112 = 0x1080C409938AC02;
          v113 = *v103;
          if (*v103)
          {
            v102[2] = v113;
LABEL_177:
            operator delete(v113);
          }
          goto LABEL_178;
        }
      }
      break;
    case 4:
      if (*v101 != 1)
      {
        v114 = (_QWORD *)operator new();
        v115 = (unint64_t *)*a1;
        *v114 = *(_QWORD *)*a1;
        v114[2] = 0;
        v114[3] = 0;
        v114[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v114 + 1, (uint64_t *)v115[1], (uint64_t *)v115[2], (uint64_t)(v115[2] - v115[1]) >> 4);
        *a1 = (uint64_t)v114;
        *v114 = 1;
        do
        {
          v116 = __ldaxr(v102);
          v117 = v116 - 1;
        }
        while (__stlxr(v117, v102));
        if (!v117)
        {
          v112 = 0x1020C405E66F15BLL;
          *(_QWORD *)v142 = v103;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v142);
          goto LABEL_178;
        }
      }
      break;
    case 5:
      if (*v101 != 1)
      {
        v118 = (_QWORD *)operator new();
        v119 = (unint64_t *)*a1;
        *v118 = *(_QWORD *)*a1;
        v118[2] = 0;
        v118[3] = 0;
        v118[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v118 + 1, (uint64_t *)v119[1], (uint64_t *)v119[2], (uint64_t)(v119[2] - v119[1]) >> 5);
        *a1 = (uint64_t)v118;
        *v118 = 1;
        do
        {
          v120 = __ldaxr(v102);
          v121 = v120 - 1;
        }
        while (__stlxr(v121, v102));
        if (!v121)
        {
          v112 = 0x1020C405E66F15BLL;
          *(_QWORD *)v142 = v103;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v142);
          goto LABEL_178;
        }
      }
      break;
    case 8:
      if (*v101 != 1)
      {
        v122 = operator new();
        v123 = (unint64_t *)*a1;
        *(_QWORD *)v122 = *(_QWORD *)*a1;
        *(_QWORD *)(v122 + 8) = v123[1];
        v124 = v123[2];
        *(_QWORD *)(v122 + 16) = v124;
        if (v124)
        {
          v125 = (unsigned int *)(v124 + 8);
          do
            v126 = __ldxr(v125);
          while (__stxr(v126 + 1, v125));
        }
        v127 = *(_OWORD *)(v123 + 3);
        v128 = *(_OWORD *)(v123 + 5);
        *(_OWORD *)(v122 + 56) = *(_OWORD *)(v123 + 7);
        *(_OWORD *)(v122 + 40) = v128;
        *(_OWORD *)(v122 + 24) = v127;
        *a1 = v122;
        *(_QWORD *)v122 = 1;
        do
        {
          v129 = __ldaxr(v102);
          v130 = v129 - 1;
        }
        while (__stlxr(v130, v102));
        if (!v130)
        {
          v112 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)v102 + 2);
          goto LABEL_178;
        }
      }
      break;
    case 9:
      if (*v101 != 1)
      {
        v131 = (_QWORD *)operator new();
        v132 = *a1 + 8;
        *v131 = *(_QWORD *)*a1;
        turi::flexible_type_impl::ndarray<double>::ndarray(v131 + 1, v132);
        *a1 = (uint64_t)v131;
        *v131 = 1;
        do
        {
          v133 = __ldaxr(v102);
          v134 = v133 - 1;
        }
        while (__stlxr(v134, v102));
        if (!v134)
        {
          v112 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v102);
LABEL_178:
          MEMORY[0x219A19A08](v102, v112);
        }
      }
      break;
    default:
      break;
  }
  v137 = (unint64_t *)*a1;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)v137 + 1);
  *(_OWORD *)(v137 + 1) = v138;
  v137[3] = v139;
  v138 = 0uLL;
  v139 = 0;
  *(_QWORD *)v142 = &v138;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v142);
}

void sub_217EA9494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  uint64_t v16;

  MEMORY[0x219A19A08](v16, 0x1012C404EF22A49);
  a16 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_217EA9834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 32) = 0;
      *(_DWORD *)(v6 - 24) = 0;
      *(_BYTE *)(v6 - 20) = 0;
      v8 = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 27) = *(_QWORD *)(v2 + v5 - 27);
      *(_QWORD *)(v6 - 32) = v8;
      *(_BYTE *)(v6 - 20) = *(_BYTE *)(v2 + v5 - 20);
      *(_BYTE *)(v7 - 20) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_DWORD *)(v6 - 8) = 0;
      *(_BYTE *)(v6 - 4) = 0;
      v9 = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v6 - 11) = *(_QWORD *)(v2 + v5 - 11);
      *(_QWORD *)(v6 - 16) = v9;
      *(_BYTE *)(v6 - 4) = *(_BYTE *)(v2 + v5 - 4);
      *(_BYTE *)(v7 - 4) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::pair<turi::flexible_type,turi::flexible_type>::~pair(i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v7, v9);
  v11 = &v10[32 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[32 * v12];
  *(_QWORD *)v11 = 0;
  *((_DWORD *)v11 + 2) = 0;
  v11[12] = 0;
  v13 = *a2;
  *(_QWORD *)(v11 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)v11 = v13;
  v11[12] = *((_BYTE *)a2 + 12);
  *((_BYTE *)a2 + 12) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_DWORD *)v11 + 6) = 0;
  v11[28] = 0;
  v14 = a2[2];
  *(_QWORD *)(v11 + 21) = *(uint64_t *)((char *)a2 + 21);
  *((_QWORD *)v11 + 2) = v14;
  v11[28] = *((_BYTE *)a2 + 28);
  *((_BYTE *)a2 + 28) = 0;
  v17[2] = v11 + 32;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_217EA9A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *turi::flexible_type::operator=<std::string>(uint64_t *a1, const std::string *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  void **v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t *v38;
  std::string *v39;
  __int128 v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void **v70;

  v4 = 0x1012C404EF22A49;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      v5 = (unint64_t *)*a1;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        v8 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        if (*((char *)v8 + 31) < 0)
          operator delete((void *)v8[1]);
        v9 = v8;
        v10 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      v11 = (unint64_t *)*a1;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v15 = (void *)v14[1];
        if (v15)
        {
          v14[2] = (unint64_t)v15;
          operator delete(v15);
        }
        v9 = v14;
        v10 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      v16 = (unint64_t *)*a1;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v70 = (void **)(v19 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v70);
        goto LABEL_26;
      }
      break;
    case 5:
      v20 = (unint64_t *)*a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v19 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v70 = (void **)(v19 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v70);
LABEL_26:
        v9 = v19;
        v10 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      v23 = (unint64_t *)*a1;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        boost::detail::shared_count::~shared_count((unsigned int **)v26 + 2);
        v9 = v26;
        v27 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      v28 = (unint64_t *)*a1;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = (unint64_t *)*a1;
        if (*a1)
        {
          v32 = (void *)v31[6];
          if (v32)
          {
            v31[7] = (unint64_t)v32;
            operator delete(v32);
          }
          v33 = (void *)v31[3];
          if (v33)
          {
            v31[4] = (unint64_t)v33;
            operator delete(v33);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
          v9 = v31;
          v27 = 2071181815;
LABEL_41:
          v10 = v27 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v9, v10);
        }
LABEL_43:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 2;
  v34 = (_QWORD *)operator new();
  *v34 = 0;
  v34[1] = 0;
  v35 = (void **)(v34 + 1);
  v34[2] = 0;
  v34[3] = 0;
  *a1 = (uint64_t)v34;
  *v34 = 1;
  v36 = v34;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      if (*v34 != 1)
      {
        v37 = (_QWORD *)operator new();
        v38 = (unint64_t *)*a1;
        *v37 = *(_QWORD *)*a1;
        v39 = (std::string *)(v37 + 1);
        if (*((char *)v38 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v39, (const std::string::value_type *)v38[1], v38[2]);
        }
        else
        {
          v40 = *(_OWORD *)(v38 + 1);
          v37[3] = v38[3];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        }
        *a1 = (uint64_t)v37;
        *v37 = 1;
        do
        {
          v67 = __ldaxr(v36);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v36));
        if (!v68)
        {
          if ((*((char *)v36 + 31) & 0x80000000) == 0)
            goto LABEL_84;
          v45 = *v35;
          goto LABEL_83;
        }
      }
      break;
    case 3:
      if (*v34 != 1)
      {
        v4 = 0x1080C409938AC02;
        v41 = (_QWORD *)operator new();
        v42 = (unint64_t *)*a1;
        *v41 = *(_QWORD *)*a1;
        v41[2] = 0;
        v41[3] = 0;
        v41[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v41 + 1, (const void *)v42[1], v42[2], (uint64_t)(v42[2] - v42[1]) >> 3);
        *a1 = (uint64_t)v41;
        *v41 = 1;
        do
        {
          v43 = __ldaxr(v36);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v36));
        if (!v44)
        {
          v45 = *v35;
          if (*v35)
          {
            v36[2] = v45;
LABEL_83:
            operator delete(v45);
          }
          goto LABEL_84;
        }
      }
      break;
    case 4:
      if (*v34 != 1)
      {
        v4 = 0x1020C405E66F15BLL;
        v46 = (_QWORD *)operator new();
        v47 = (unint64_t *)*a1;
        *v46 = *(_QWORD *)*a1;
        v46[2] = 0;
        v46[3] = 0;
        v46[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v46 + 1, (uint64_t *)v47[1], (uint64_t *)v47[2], (uint64_t)(v47[2] - v47[1]) >> 4);
        *a1 = (uint64_t)v46;
        *v46 = 1;
        do
        {
          v48 = __ldaxr(v36);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v36));
        if (!v49)
        {
          v70 = v35;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v70);
          goto LABEL_84;
        }
      }
      break;
    case 5:
      if (*v34 != 1)
      {
        v4 = 0x1020C405E66F15BLL;
        v50 = (_QWORD *)operator new();
        v51 = (unint64_t *)*a1;
        *v50 = *(_QWORD *)*a1;
        v50[2] = 0;
        v50[3] = 0;
        v50[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v50 + 1, (uint64_t *)v51[1], (uint64_t *)v51[2], (uint64_t)(v51[2] - v51[1]) >> 5);
        *a1 = (uint64_t)v50;
        *v50 = 1;
        do
        {
          v52 = __ldaxr(v36);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v36));
        if (!v53)
        {
          v70 = v35;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v70);
          goto LABEL_84;
        }
      }
      break;
    case 8:
      if (*v34 != 1)
      {
        v4 = 0x1030C40F1F0227BLL;
        v54 = operator new();
        v55 = (unint64_t *)*a1;
        *(_QWORD *)v54 = *(_QWORD *)*a1;
        *(_QWORD *)(v54 + 8) = v55[1];
        v56 = v55[2];
        *(_QWORD *)(v54 + 16) = v56;
        if (v56)
        {
          v57 = (unsigned int *)(v56 + 8);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        v59 = *(_OWORD *)(v55 + 3);
        v60 = *(_OWORD *)(v55 + 5);
        *(_OWORD *)(v54 + 56) = *(_OWORD *)(v55 + 7);
        *(_OWORD *)(v54 + 40) = v60;
        *(_OWORD *)(v54 + 24) = v59;
        *a1 = v54;
        *(_QWORD *)v54 = 1;
        do
        {
          v61 = __ldaxr(v36);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v36));
        if (!v62)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v36 + 2);
          goto LABEL_84;
        }
      }
      break;
    case 9:
      if (*v34 != 1)
      {
        v4 = 0x1030C407B73B9F7;
        v63 = (_QWORD *)operator new();
        v64 = *a1 + 8;
        *v63 = *(_QWORD *)*a1;
        turi::flexible_type_impl::ndarray<double>::ndarray(v63 + 1, v64);
        *a1 = (uint64_t)v63;
        *v63 = 1;
        do
        {
          v65 = __ldaxr(v36);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v36));
        if (!v66)
        {
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v36);
LABEL_84:
          MEMORY[0x219A19A08](v36, v4);
        }
      }
      break;
    default:
      break;
  }
  std::string::operator=((std::string *)(*a1 + 8), a2);
  return a1;
}

void sub_217EAA05C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::pair<turi::flexible_type,turi::flexible_type>::~pair(v3 - 32);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_ED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D918F78;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_ED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D918F78;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_E7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D918F78;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217EAA248(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_E7__cloneEPNS0_6__baseIS1H_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D918F78;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_E7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_E18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_EclEOS1D_OS1G_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_13flexible_typeENS3_4lessISA_EENS8_INS3_4pairIKSA_SB_EEEEEEJEJEEENS3_8functionIFN5boost7variantINSK_6detail7variant14recursive_flagISB_EEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSQ_INS_10model_baseEEENSQ_INS_17unity_sframe_baseEEENSQ_INS_17unity_sarray_baseEEENS4_ISA_NSK_18recursive_variant_ESD_NS8_INSE_ISF_S10_EEEEEENS3_6vectorIS10_NS8_IS10_EEEENSK_17recursive_wrapperINS_21function_closure_infoEEEEEEPSU_NS4_ISA_S1A_SD_NS8_INSE_ISF_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_13flexible_typeENS3_4lessISA_EENS8_INS3_4pairIKSA_SB_EEEEEEJEJEEENS3_8functionIFN5boost7variantINSK_6detail7variant14recursive_flagISB_EEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSQ_INS_10model_baseEEENSQ_INS_17unity_sframe_baseEEENSQ_INS_17unity_sarray_baseEEENS4_ISA_NSK_18recursive_variant_ESD_NS8_INSE_ISF_S10_EEEEEENS3_6vectorIS10_NS8_IS10_EEEENSK_17recursive_wrapperINS_21function_closure_infoEEEEEEPSU_NS4_ISA_S1A_SD_NS8_INSE_ISF_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_;
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D918FF8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217EAA56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EED1Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D918FF8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EED0Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D918FF8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EE7__cloneEv(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D918FF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217EAA6C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EE7__cloneEPNS0_6__baseIS1T_EE(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D918FF8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EE7destroyEv(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EE18destroy_deallocateEv(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EEclEOS1Q_OS1B_(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const& (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const& (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const& (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const& (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const& (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217EAA844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const& (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  std::string *v8;
  char *v9[3];
  std::string v10;
  uint64_t v11;
  uint64_t *v12;
  std::vector<std::string> v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  char *v21[2];

  v16 = 1;
  v17 = 0;
  v18 = 0;
  v21[0] = 0;
  v21[1] = 0;
  v19 = 0;
  v20 = v21;
  v14 = a3;
  v15 = a2;
  memset(&v13, 0, sizeof(v13));
  if (&v13 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v13.__begin_;
    end = (__int128 *)v13.__end_;
  }
  v12 = &v15;
  v9[2] = (char *)&v15;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v11 = v14;
  v8 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v9[0] = 0;
  v9[1] = 0;
  v8 = (std::string *)v9;
  _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN5boost7variantINSA_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSH_INS_10model_baseEEENSH_INS_17unity_sframe_baseEEENSH_INS_17unity_sarray_baseEEENS3_IS9_NSA_18recursive_variant_ENS2_4lessIS9_EENS7_INS2_4pairIKS9_SR_EEEEEENS2_6vectorISR_NS7_ISR_EEEENSA_17recursive_wrapperINS_21function_closure_infoEEEEEEST_NS7_INSU_ISV_S15_EEEEEEE4callIZZNS0_38generate_const_member_function_wrapperILm0ENS_13ml_model_baseERKS18_JEEENS2_8functionIFS15_PT0_S18_EEEMS1G_KFT1_DpT2_ENSZ_IS9_NS7_IS9_EEEEENKUlPS1C_S18_E_clES1R_S18_EUlvE_EEvT_((uint64_t)&v8, a1, &v15);
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper((uint64_t **)(a4 + 8), (const void ***)&v8);
  *(_DWORD *)a4 = 6;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v8, v9[0]);
  v8 = (std::string *)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v20, v21[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v17);
}

void sub_217EAA9B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v2 - 104));
  _Unwind_Resume(a1);
}

void _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN5boost7variantINSA_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSH_INS_10model_baseEEENSH_INS_17unity_sframe_baseEEENSH_INS_17unity_sarray_baseEEENS3_IS9_NSA_18recursive_variant_ENS2_4lessIS9_EENS7_INS2_4pairIKS9_SR_EEEEEENS2_6vectorISR_NS7_ISR_EEEENSA_17recursive_wrapperINS_21function_closure_infoEEEEEEST_NS7_INSU_ISV_S15_EEEEEEE4callIZZNS0_38generate_const_member_function_wrapperILm0ENS_13ml_model_baseERKS18_JEEENS2_8functionIFS15_PT0_S18_EEEMS1G_KFT1_DpT2_ENSZ_IS9_NS7_IS9_EEEEENKUlPS1C_S18_E_clES1R_S18_EUlvE_EEvT_(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *);
  uint64_t v5;
  _QWORD *v6;
  const void ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(uint64_t (**)(_QWORD *))a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (_QWORD *)(*a3 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *))(*v6 + v4);
  v7 = (const void ***)v4(v6);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t *)&v11, v7);
  v8 = a1 + 8;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *(char **)(a1 + 8));
  v9 = v12;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v9;
  v10 = v13;
  *(_QWORD *)(a1 + 16) = v13;
  if (v10)
  {
    *(_QWORD *)(v9 + 16) = v8;
    v11 = &v12;
    v12 = 0;
    v13 = 0;
    v9 = 0;
  }
  else
  {
    *(_QWORD *)a1 = v8;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v11, (char *)v9);
}

uint64_t **boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(uint64_t **a1, const void ***a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)operator new();
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v4, a2);
  *a1 = v4;
  return a1;
}

void sub_217EAAAE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_ED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D919078;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_ED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D919078;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_E7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D919078;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217EAAC1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_E7__cloneEPNS0_6__baseIS1G_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D919078;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_E7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_E18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_EclEOS1F_OS1B_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseERKNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN5boost7variantINSB_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSI_INS_10model_baseEEENSI_INS_17unity_sframe_baseEEENSI_INS_17unity_sarray_baseEEENS4_ISA_NSB_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SS_EEEEEENS3_6vectorISS_NS8_ISS_EEEENSB_17recursive_wrapperINS_21function_closure_infoEEEEEESU_NS8_INSV_ISW_S16_EEEEEEJEJEEENS3_8functionIFS16_PSM_S19_EEEMT_KFT0_DpT1_EDpT2_EUlS1D_S19_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseERKNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN5boost7variantINSB_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSI_INS_10model_baseEEENSI_INS_17unity_sframe_baseEEENSI_INS_17unity_sarray_baseEEENS4_ISA_NSB_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SS_EEEEEENS3_6vectorISS_NS8_ISS_EEEENSB_17recursive_wrapperINS_21function_closure_infoEEEEEESU_NS8_INSV_ISW_S16_EEEEEEJEJEEENS3_8functionIFS16_PSM_S19_EEEMT_KFT0_DpT1_EDpT2_EUlS1D_S19_E_;
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D9190F8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217EAAF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D9190F8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D9190F8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D9190F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217EAB09C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D9190F8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217EAB218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  void (*v8)(_QWORD *, _QWORD ***);
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  std::string v12;
  uint64_t v13;
  uint64_t *v14;
  std::vector<std::string> v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD *v19[2];
  char v20;
  void *__p;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  char *v25[2];
  void **v26[3];

  v26[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v20 = 1;
  __p = 0;
  v22 = 0;
  v25[0] = 0;
  v25[1] = 0;
  v23 = 0;
  v24 = v25;
  v19[0] = 0;
  v19[1] = 0;
  v17 = a2;
  v18 = v19;
  memset(&v15, 0, sizeof(v15));
  v16 = a3;
  if (&v15 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v15.__begin_;
    end = (__int128 *)v15.__end_;
  }
  v14 = &v17;
  v11 = &v17;
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v13 = v16;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v11);
  v26[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  v8 = *(void (**)(_QWORD *, _QWORD ***))a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_QWORD *)(v17 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(void (**)(_QWORD *, _QWORD ***))(*v10 + v8);
  v8(v10, &v18);
  memset(v26, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v26, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + 13) = *(void ***)((char *)v26 + 5);
  *(void ***)(a4 + 8) = v26[0];
  *(_BYTE *)(a4 + 20) = BYTE4(v26[1]);
  *(_DWORD *)a4 = 0;
  v26[0] = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v18, v19[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v24, v25[0]);
  if (SHIBYTE(v23) < 0)
    operator delete(__p);
}

void sub_217EAB3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, ...)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va;

  va_start(va, a15);
  *(_QWORD *)(v17 - 88) = v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 88));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v15, a14);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::map<std::string,turi::flexible_type>>>::operator()<1>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 24));
    if (a1[4] + 8 == v3)
    {
      v9 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v9);
    v4 = *a1 + 16;
    v5 = (uint64_t *)(*a1 + 8);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(_QWORD **)v4);
    *(_QWORD *)(v4 - 8) = v9;
    v6 = v10;
    *(_QWORD *)v4 = v10;
    v7 = v11;
    *(_QWORD *)(v4 + 8) = v11;
    if (v7)
    {
      v8 = 0;
      v6[2] = v4;
      v9 = &v10;
      v10 = 0;
      v11 = 0;
    }
    else
    {
      *v5 = v4;
      v8 = v10;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v9, v8);
  }
}

uint64_t turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void **v39[3];
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  memset(v40, 0, 13);
  v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((_QWORD *)v3 != v40)
  {
    v5 = *(_QWORD *)v3;
    *(_QWORD *)((char *)v40 + 5) = *(_QWORD *)(v3 + 5);
    v40[0] = v5;
    BYTE4(v40[1]) = *(_BYTE *)(v3 + 12);
    if (BYTE4(v40[1]) <= 9u && ((1 << SBYTE4(v40[1])) & 0x33C) != 0)
    {
      v7 = (unint64_t *)v40[0];
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  result = turi::flexible_type_converter<std::map<std::string,turi::flexible_type>>::get((turi::flexible_type_internals *)v40, v4, a2);
  switch(BYTE4(v40[1]))
  {
    case 2:
      v10 = (unint64_t *)v40[0];
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = v40[0];
        if (v40[0])
        {
          if (*(char *)(v40[0] + 31) < 0)
            operator delete(*(void **)(v40[0] + 8));
          v14 = v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v27 = (unint64_t *)v40[0];
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v40[0];
        if (v40[0])
        {
          v31 = *(void **)(v40[0] + 8);
          if (v31)
          {
            *(_QWORD *)(v40[0] + 16) = v31;
            operator delete(v31);
          }
          v14 = v30;
          v15 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v16 = (unint64_t *)v40[0];
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v40[0];
        if (v40[0])
        {
          v39[0] = (void **)(v40[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v39);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v32 = (unint64_t *)v40[0];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v19 = v40[0];
        if (v40[0])
        {
          v39[0] = (void **)(v40[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v39);
LABEL_42:
          v14 = v19;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v35 = (unint64_t *)v40[0];
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = v40[0];
        if (v40[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v40[0] + 16));
          v14 = v38;
          v26 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v20 = (unint64_t *)v40[0];
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v40[0];
        if (v40[0])
        {
          v24 = *(void **)(v40[0] + 48);
          if (v24)
          {
            *(_QWORD *)(v40[0] + 56) = v24;
            operator delete(v24);
          }
          v25 = *(void **)(v23 + 24);
          if (v25)
          {
            *(_QWORD *)(v23 + 32) = v25;
            operator delete(v25);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v23 + 8);
          v14 = v23;
          v26 = 2071181815;
LABEL_48:
          v15 = v26 | 0x1030C4000000000;
LABEL_49:
          result = MEMORY[0x219A19A08](v14, v15);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_217EAB7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

uint64_t turi::flexible_type_converter<std::map<std::string,turi::flexible_type>>::get@<X0>(turi::flexible_type_internals *a1@<X1>, const char *a2@<X2>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  return turi::flexible_type_internals::ft_converter<9>::get<std::map<std::string,turi::flexible_type>>((uint64_t **)a3, a1, a2);
}

void sub_217EABA98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_internals::ft_converter<9>::get<std::map<std::string,turi::flexible_type>>(uint64_t **a1, turi::flexible_type_internals *this, const char *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE v14[37];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  memset(v14, 0, sizeof(v14));
  v4 = *((unsigned __int8 *)this + 12);
  if (v4 == 4)
  {
    v9 = *(_QWORD *)this;
    v10 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (*(_QWORD *)(*(_QWORD *)this + 16) != v10)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>((std::string *)v14, (turi::flexible_type_internals *)(v10 + v11), a3);
        std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string,turi::flexible_type>>(a1, (const void **)v14, (uint64_t)v14);
        ++v12;
        v10 = *(_QWORD *)(v9 + 8);
        v11 += 16;
      }
      while (v12 < (*(_QWORD *)(v9 + 16) - v10) >> 4);
    }
  }
  else
  {
    if (v4 != 5)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"flex_dict / list of 2-element flex_lists/flex_vec", a3);
    v5 = *(_QWORD *)this;
    v6 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (*(_QWORD *)(*(_QWORD *)this + 16) != v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        turi::flexible_type_internals::ft_converter<1>::get<std::string>((std::string *)v14, (char *)(v6 + v7));
        turi::flexible_type_internals::ft_converter<1>::get((uint64_t)&v14[24], (uint64_t *)(*(_QWORD *)(v5 + 8) + v7 + 16));
        std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string,turi::flexible_type>>(a1, (const void **)v14, (uint64_t)v14);
        ++v8;
        v6 = *(_QWORD *)(v5 + 8);
        v7 += 32;
      }
      while (v8 < (*(_QWORD *)(v5 + 16) - v6) >> 5);
    }
  }
  return std::pair<std::string,turi::flexible_type>::~pair((uint64_t)v14);
}

void sub_217EABC04()
{
  turi::flexible_type_internals::ft_converter<9>::get<std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void sub_217EABC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::string,turi::flexible_type>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_converter<9>::get<std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 548, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<9>::get<std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EABD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_internals::ft_converter<1>::get(uint64_t result, uint64_t *a2)
{
  void **v2;
  void **v3;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  unint64_t *v39;
  unint64_t v40;
  void **v41[7];

  if (a2 != (uint64_t *)result)
  {
    v41[5] = v2;
    v41[6] = v3;
    v5 = result;
    switch(*(_BYTE *)(result + 12))
    {
      case 2:
        v6 = *(unint64_t **)result;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          v9 = *(unint64_t **)result;
          if (!*(_QWORD *)result)
            goto LABEL_44;
          if (*((char *)v9 + 31) < 0)
            operator delete((void *)v9[1]);
          v10 = v9;
          v11 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v12 = *(unint64_t **)result;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = *(unint64_t **)result;
          if (!*(_QWORD *)result)
            goto LABEL_44;
          v16 = (void *)v15[1];
          if (v16)
          {
            v15[2] = (unint64_t)v16;
            operator delete(v16);
          }
          v10 = v15;
          v11 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v17 = *(unint64_t **)result;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *(unint64_t **)result;
          if (!*(_QWORD *)result)
            goto LABEL_44;
          v41[0] = (void **)(v20 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v41);
          goto LABEL_27;
        }
        break;
      case 5:
        v21 = *(unint64_t **)result;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v20 = *(unint64_t **)result;
          if (!*(_QWORD *)result)
            goto LABEL_44;
          v41[0] = (void **)(v20 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v41);
LABEL_27:
          v10 = v20;
          v11 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v24 = *(unint64_t **)result;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *(unint64_t **)result;
          if (!*(_QWORD *)result)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v27 + 2);
          v10 = v27;
          v28 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v29 = *(unint64_t **)result;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = *(unint64_t **)result;
          if (*(_QWORD *)result)
          {
            v33 = (void *)v32[6];
            if (v33)
            {
              v32[7] = (unint64_t)v33;
              operator delete(v33);
            }
            v34 = (void *)v32[3];
            if (v34)
            {
              v32[4] = (unint64_t)v34;
              operator delete(v34);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 1));
            v10 = v32;
            v28 = 2071181815;
LABEL_42:
            v11 = v28 | 0x1030C4000000000;
LABEL_43:
            result = MEMORY[0x219A19A08](v10, v11);
          }
LABEL_44:
          *(_QWORD *)v5 = 0;
        }
        break;
      default:
        break;
    }
    v35 = *a2;
    *(_QWORD *)(v5 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)v5 = v35;
    LODWORD(v35) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(v5 + 12) = v35;
    v36 = v35 > 9;
    v37 = (1 << v35) & 0x33C;
    if (!v36 && v37 != 0)
    {
      v39 = *(unint64_t **)v5;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
  }
  return result;
}

char *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string,turi::flexible_type>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x48uLL);
    v11[1] = a1 + 1;
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(v6 + 61) = *(_QWORD *)(a3 + 29);
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *((_QWORD *)v6 + 6) = v8;
    *((_QWORD *)v6 + 7) = v9;
    v6[68] = *(_BYTE *)(a3 + 36);
    *(_BYTE *)(a3 + 36) = 0;
    v12 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>(std::string *a1, turi::flexible_type_internals *this, const char *a3)
{
  uint64_t v3;

  if (*((_BYTE *)this + 12) != 4)
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"2-element flex_list/flex_vec", a3);
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8) != 32)
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"2-element flex_list/flex_vec (list size != 2)", a3);
  turi::flexible_type_internals::ft_converter<1>::get<std::string>(a1, *(char **)(*(_QWORD *)this + 8));
  return turi::flexible_type_internals::ft_converter<1>::get((uint64_t)&a1[1], (uint64_t *)(*(_QWORD *)(v3 + 8) + 16));
}

void sub_217EAC19C()
{
  turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>(std::pair<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>(std::pair<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 591, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>(std::pair<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EAC2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>(std::pair<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 597, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>(std::pair<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EAC420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,turi::flexible_type>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 24);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 24);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 24);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 24);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 24);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 24);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 24);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 24);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 24);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 24);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 24);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 24);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_ED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D919178;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_ED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D919178;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_E7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D919178;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217EAC7CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_E7__cloneEPNS0_6__baseIS1J_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D919178;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_E7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_E18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_EclEOS1F_OS1I_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_E11target_typeEv()
{
}

turi::neural_net::model_spec *std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](turi::neural_net::model_spec **a1, turi::neural_net::model_spec *a2)
{
  turi::neural_net::model_spec *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::neural_net::model_spec::~model_spec(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

void std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)(v4 - 128));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void turi::option_handling::option_info::~option_info(turi::option_handling::option_info *this)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  void *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  void *v87;
  void *v88;
  void **v89;

  v89 = (void **)((char *)this + 104);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v89);
  switch(*((_BYTE *)this + 100))
  {
    case 2:
      v2 = (unint64_t *)*((_QWORD *)this + 11);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *((_QWORD *)this + 11);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)*((_QWORD *)this + 11);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = (_QWORD *)*((_QWORD *)this + 11);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)*((_QWORD *)this + 11);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *((_QWORD *)this + 11);
        if (v16)
        {
          v89 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v89);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)*((_QWORD *)this + 11);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *((_QWORD *)this + 11);
        if (v16)
        {
          v89 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v89);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = (unint64_t *)*((_QWORD *)this + 11);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *((_QWORD *)this + 11);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = (unint64_t *)*((_QWORD *)this + 11);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (_QWORD *)*((_QWORD *)this + 11);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 100) = 0;
  switch(*((_BYTE *)this + 84))
  {
    case 2:
      v31 = (unint64_t *)*((_QWORD *)this + 9);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = *((_QWORD *)this + 9);
        if (v34)
        {
          if (*(char *)(v34 + 31) < 0)
            operator delete(*(void **)(v34 + 8));
          v35 = (_QWORD *)v34;
          v36 = 0x1012C404EF22A49;
          goto LABEL_84;
        }
      }
      break;
    case 3:
      v37 = (unint64_t *)*((_QWORD *)this + 9);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = (_QWORD *)*((_QWORD *)this + 9);
        if (v40)
        {
          v41 = (void *)v40[1];
          if (v41)
          {
            v40[2] = v41;
            operator delete(v41);
          }
          v35 = v40;
          v36 = 0x1080C409938AC02;
          goto LABEL_84;
        }
      }
      break;
    case 4:
      v42 = (unint64_t *)*((_QWORD *)this + 9);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = *((_QWORD *)this + 9);
        if (v45)
        {
          v89 = (void **)(v45 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v89);
          goto LABEL_68;
        }
      }
      break;
    case 5:
      v46 = (unint64_t *)*((_QWORD *)this + 9);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v45 = *((_QWORD *)this + 9);
        if (v45)
        {
          v89 = (void **)(v45 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v89);
LABEL_68:
          v35 = (_QWORD *)v45;
          v36 = 0x1020C405E66F15BLL;
          goto LABEL_84;
        }
      }
      break;
    case 8:
      v49 = (unint64_t *)*((_QWORD *)this + 9);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v52 = *((_QWORD *)this + 9);
        if (v52)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v52 + 16));
          v35 = (_QWORD *)v52;
          v53 = -235920773;
          goto LABEL_83;
        }
      }
      break;
    case 9:
      v54 = (unint64_t *)*((_QWORD *)this + 9);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        v57 = (_QWORD *)*((_QWORD *)this + 9);
        if (v57)
        {
          v58 = (void *)v57[6];
          if (v58)
          {
            v57[7] = v58;
            operator delete(v58);
          }
          v59 = (void *)v57[3];
          if (v59)
          {
            v57[4] = v59;
            operator delete(v59);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v57 + 1));
          v35 = v57;
          v53 = 2071181815;
LABEL_83:
          v36 = v53 | 0x1030C4000000000;
LABEL_84:
          MEMORY[0x219A19A08](v35, v36);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_BYTE *)this + 84) = 0;
  switch(*((_BYTE *)this + 60))
  {
    case 2:
      v60 = (unint64_t *)*((_QWORD *)this + 6);
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        v63 = *((_QWORD *)this + 6);
        if (v63)
        {
          if (*(char *)(v63 + 31) < 0)
            operator delete(*(void **)(v63 + 8));
          v64 = (_QWORD *)v63;
          v65 = 0x1012C404EF22A49;
          goto LABEL_126;
        }
      }
      break;
    case 3:
      v66 = (unint64_t *)*((_QWORD *)this + 6);
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        v69 = (_QWORD *)*((_QWORD *)this + 6);
        if (v69)
        {
          v70 = (void *)v69[1];
          if (v70)
          {
            v69[2] = v70;
            operator delete(v70);
          }
          v64 = v69;
          v65 = 0x1080C409938AC02;
          goto LABEL_126;
        }
      }
      break;
    case 4:
      v71 = (unint64_t *)*((_QWORD *)this + 6);
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
      {
        v74 = *((_QWORD *)this + 6);
        if (v74)
        {
          v89 = (void **)(v74 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v89);
          goto LABEL_110;
        }
      }
      break;
    case 5:
      v75 = (unint64_t *)*((_QWORD *)this + 6);
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
      {
        v74 = *((_QWORD *)this + 6);
        if (v74)
        {
          v89 = (void **)(v74 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v89);
LABEL_110:
          v64 = (_QWORD *)v74;
          v65 = 0x1020C405E66F15BLL;
          goto LABEL_126;
        }
      }
      break;
    case 8:
      v78 = (unint64_t *)*((_QWORD *)this + 6);
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        v81 = *((_QWORD *)this + 6);
        if (v81)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v81 + 16));
          v64 = (_QWORD *)v81;
          v82 = -235920773;
          goto LABEL_125;
        }
      }
      break;
    case 9:
      v83 = (unint64_t *)*((_QWORD *)this + 6);
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (!v85)
      {
        v86 = (_QWORD *)*((_QWORD *)this + 6);
        if (v86)
        {
          v87 = (void *)v86[6];
          if (v87)
          {
            v86[7] = v87;
            operator delete(v87);
          }
          v88 = (void *)v86[3];
          if (v88)
          {
            v86[4] = v88;
            operator delete(v88);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v86 + 1));
          v64 = v86;
          v82 = 2071181815;
LABEL_125:
          v65 = v82 | 0x1030C4000000000;
LABEL_126:
          MEMORY[0x219A19A08](v64, v65);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_BYTE *)this + 60) = 0;
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::map<std::string,turi::flexible_type>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,turi::flexible_type>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_217EACFDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,turi::flexible_type>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type> const&>(v5, v6, (const void **)v4 + 4, (std::string *)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type> const&>(uint64_t **a1, uint64_t *a2, const void **a3, std::string *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string const,turi::flexible_type> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string const,turi::flexible_type> const&>@<X0>(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217EAD15C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100](std::string *this, std::string *a2)
{
  __int128 v4;
  std::string *v5;
  std::string::size_type v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;

  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  v5 = this + 1;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__s.__data_[12] = 0;
  if (a2 != this)
  {
    v6 = a2[1].__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 5) = *(std::string::size_type *)((char *)a2[1].__r_.__value_.__r.__words + 5);
    v5->__r_.__value_.__r.__words[0] = v6;
    v7 = a2[1].__r_.__value_.__s.__data_[12];
    this[1].__r_.__value_.__s.__data_[12] = v7;
    if (v7 <= 9 && ((1 << v7) & 0x33C) != 0)
    {
      v8 = (unint64_t *)v5->__r_.__value_.__r.__words[0];
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  return this;
}

uint64_t std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>(uint64_t a1, char *a2, unsigned int *a3)
{
  __int128 **v6;

  v6 = (__int128 **)(std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2) + 4);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_into,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((__int128 *)*a3, *a3 ^ ((int)*a3 >> 31), &v6, (__int128 **)a3 + 1);
  *(_DWORD *)(a1 + 24) = *a3 ^ ((int)*a3 >> 31);
  return a1;
}

void sub_217EAD280(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__int128 *boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_into,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(__int128 *result, int a2, __int128 ***a3, __int128 **a4)
{
  __int128 **v5;
  __int128 *v6;
  __int128 **v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;

  switch(a2)
  {
    case 0:
      v5 = *a3;
      *v5 = 0;
      *((_DWORD *)v5 + 2) = 0;
      *((_BYTE *)v5 + 12) = 0;
      v6 = *a4;
      *(__int128 **)((char *)v5 + 5) = *(__int128 **)((char *)a4 + 5);
      *v5 = v6;
      *((_BYTE *)v5 + 12) = *((_BYTE *)a4 + 12);
      *((_BYTE *)a4 + 12) = 0;
      return result;
    case 1:
    case 3:
    case 4:
    case 5:
      *(_OWORD *)*a3 = *(_OWORD *)a4;
      *a4 = 0;
      a4[1] = 0;
      return result;
    case 2:
      return (__int128 *)boost::detail::variant::move_into::internal_visit<turi::dataframe_t>(a3, (uint64_t)a4);
    case 6:
      return (__int128 *)boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(*a3, (_QWORD **)a4);
    case 7:
      v7 = *a3;
      result = (__int128 *)operator new();
      v8 = *a4;
      *result = **a4;
      *((_QWORD *)result + 2) = *((_QWORD *)v8 + 2);
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
      goto LABEL_8;
    case 8:
      v7 = *a3;
      result = (__int128 *)operator new();
      v9 = *a4;
      v10 = **a4;
      *((_QWORD *)result + 2) = *((_QWORD *)*a4 + 2);
      *result = v10;
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *(_QWORD *)v9 = 0;
      *(__int128 *)((char *)result + 24) = *(__int128 *)((char *)v9 + 24);
      *((_QWORD *)result + 5) = *((_QWORD *)v9 + 5);
      *((_QWORD *)v9 + 3) = 0;
      *((_QWORD *)v9 + 4) = 0;
      *((_QWORD *)v9 + 5) = 0;
LABEL_8:
      *v7 = result;
      return result;
    default:
      boost::detail::variant::forced_return<void>((boost::detail::variant *)result);
  }
}

_QWORD **boost::detail::variant::move_into::internal_visit<turi::dataframe_t>(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *result;
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *(_OWORD *)v2 = *(_OWORD *)a2;
  v2[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2[3] = *(_QWORD *)(a2 + 24);
  v3 = (_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 32);
  v2[4] = v4;
  v5 = v2 + 4;
  v6 = *(_QWORD *)(a2 + 40);
  v2[5] = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *(_QWORD *)(a2 + 24) = v3;
    *v3 = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  else
  {
    v2[3] = v5;
  }
  v2[6] = *(_QWORD *)(a2 + 48);
  v7 = (_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 56);
  v2[7] = v8;
  v9 = v2 + 7;
  v10 = *(_QWORD *)(a2 + 64);
  v2[8] = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(a2 + 48) = v7;
    *v7 = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  else
  {
    v2[6] = v9;
  }
  return result;
}

uint64_t std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 104 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 13;
      v6 -= 104;
    }
    while (v6);
  }
  return a1;
}

void sub_217EAD4E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_217EAD570(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[12],std::string,0>(uint64_t a1, char *a2, __int128 *a3)
{
  _BYTE v6[13];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  turi::flexible_type::flexible_type<std::string>((uint64_t)v6, a3);
  *(_QWORD *)(a1 + 37) = *(_QWORD *)&v6[5];
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v6;
  *(_BYTE *)(a1 + 44) = v6[12];
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

void sub_217EAD614(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type::flexible_type<std::string>(uint64_t a1, __int128 *a2)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  turi::flexible_type::operator=<std::string>((uint64_t *)a1, a2);
  return a1;
}

void sub_217EAD660(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t *turi::flexible_type::operator=<std::string>(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  void **v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t *v38;
  std::string *v39;
  __int128 v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __int128 v70;
  void **v72;

  v4 = 0x1012C404EF22A49;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      v5 = (unint64_t *)*a1;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        v8 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        if (*((char *)v8 + 31) < 0)
          operator delete((void *)v8[1]);
        v9 = v8;
        v10 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      v11 = (unint64_t *)*a1;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v15 = (void *)v14[1];
        if (v15)
        {
          v14[2] = (unint64_t)v15;
          operator delete(v15);
        }
        v9 = v14;
        v10 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      v16 = (unint64_t *)*a1;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v72 = (void **)(v19 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v72);
        goto LABEL_26;
      }
      break;
    case 5:
      v20 = (unint64_t *)*a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v19 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v72 = (void **)(v19 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v72);
LABEL_26:
        v9 = v19;
        v10 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      v23 = (unint64_t *)*a1;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        boost::detail::shared_count::~shared_count((unsigned int **)v26 + 2);
        v9 = v26;
        v27 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      v28 = (unint64_t *)*a1;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = (unint64_t *)*a1;
        if (*a1)
        {
          v32 = (void *)v31[6];
          if (v32)
          {
            v31[7] = (unint64_t)v32;
            operator delete(v32);
          }
          v33 = (void *)v31[3];
          if (v33)
          {
            v31[4] = (unint64_t)v33;
            operator delete(v33);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
          v9 = v31;
          v27 = 2071181815;
LABEL_41:
          v10 = v27 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v9, v10);
        }
LABEL_43:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 2;
  v34 = (_QWORD *)operator new();
  *v34 = 0;
  v34[1] = 0;
  v35 = (void **)(v34 + 1);
  v34[2] = 0;
  v34[3] = 0;
  *a1 = (uint64_t)v34;
  *v34 = 1;
  v36 = v34;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      if (*v34 != 1)
      {
        v37 = (_QWORD *)operator new();
        v38 = (unint64_t *)*a1;
        *v37 = *(_QWORD *)*a1;
        v39 = (std::string *)(v37 + 1);
        if (*((char *)v38 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v39, (const std::string::value_type *)v38[1], v38[2]);
        }
        else
        {
          v40 = *(_OWORD *)(v38 + 1);
          v37[3] = v38[3];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        }
        *a1 = (uint64_t)v37;
        *v37 = 1;
        do
        {
          v67 = __ldaxr(v36);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v36));
        if (!v68)
        {
          if ((*((char *)v36 + 31) & 0x80000000) == 0)
            goto LABEL_84;
          v45 = *v35;
          goto LABEL_83;
        }
      }
      break;
    case 3:
      if (*v34 != 1)
      {
        v4 = 0x1080C409938AC02;
        v41 = (_QWORD *)operator new();
        v42 = (unint64_t *)*a1;
        *v41 = *(_QWORD *)*a1;
        v41[2] = 0;
        v41[3] = 0;
        v41[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v41 + 1, (const void *)v42[1], v42[2], (uint64_t)(v42[2] - v42[1]) >> 3);
        *a1 = (uint64_t)v41;
        *v41 = 1;
        do
        {
          v43 = __ldaxr(v36);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v36));
        if (!v44)
        {
          v45 = *v35;
          if (*v35)
          {
            v36[2] = v45;
LABEL_83:
            operator delete(v45);
          }
          goto LABEL_84;
        }
      }
      break;
    case 4:
      if (*v34 != 1)
      {
        v4 = 0x1020C405E66F15BLL;
        v46 = (_QWORD *)operator new();
        v47 = (unint64_t *)*a1;
        *v46 = *(_QWORD *)*a1;
        v46[2] = 0;
        v46[3] = 0;
        v46[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v46 + 1, (uint64_t *)v47[1], (uint64_t *)v47[2], (uint64_t)(v47[2] - v47[1]) >> 4);
        *a1 = (uint64_t)v46;
        *v46 = 1;
        do
        {
          v48 = __ldaxr(v36);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v36));
        if (!v49)
        {
          v72 = v35;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v72);
          goto LABEL_84;
        }
      }
      break;
    case 5:
      if (*v34 != 1)
      {
        v4 = 0x1020C405E66F15BLL;
        v50 = (_QWORD *)operator new();
        v51 = (unint64_t *)*a1;
        *v50 = *(_QWORD *)*a1;
        v50[2] = 0;
        v50[3] = 0;
        v50[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v50 + 1, (uint64_t *)v51[1], (uint64_t *)v51[2], (uint64_t)(v51[2] - v51[1]) >> 5);
        *a1 = (uint64_t)v50;
        *v50 = 1;
        do
        {
          v52 = __ldaxr(v36);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v36));
        if (!v53)
        {
          v72 = v35;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v72);
          goto LABEL_84;
        }
      }
      break;
    case 8:
      if (*v34 != 1)
      {
        v4 = 0x1030C40F1F0227BLL;
        v54 = operator new();
        v55 = (unint64_t *)*a1;
        *(_QWORD *)v54 = *(_QWORD *)*a1;
        *(_QWORD *)(v54 + 8) = v55[1];
        v56 = v55[2];
        *(_QWORD *)(v54 + 16) = v56;
        if (v56)
        {
          v57 = (unsigned int *)(v56 + 8);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        v59 = *(_OWORD *)(v55 + 3);
        v60 = *(_OWORD *)(v55 + 5);
        *(_OWORD *)(v54 + 56) = *(_OWORD *)(v55 + 7);
        *(_OWORD *)(v54 + 40) = v60;
        *(_OWORD *)(v54 + 24) = v59;
        *a1 = v54;
        *(_QWORD *)v54 = 1;
        do
        {
          v61 = __ldaxr(v36);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v36));
        if (!v62)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v36 + 2);
          goto LABEL_84;
        }
      }
      break;
    case 9:
      if (*v34 != 1)
      {
        v4 = 0x1030C407B73B9F7;
        v63 = (_QWORD *)operator new();
        v64 = *a1 + 8;
        *v63 = *(_QWORD *)*a1;
        turi::flexible_type_impl::ndarray<double>::ndarray(v63 + 1, v64);
        *a1 = (uint64_t)v63;
        *v63 = 1;
        do
        {
          v65 = __ldaxr(v36);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v36));
        if (!v66)
        {
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v36);
LABEL_84:
          MEMORY[0x219A19A08](v36, v4);
        }
      }
      break;
    default:
      break;
  }
  v69 = *a1 + 8;
  if (*(char *)(*a1 + 31) < 0)
    operator delete(*(void **)v69);
  v70 = *a2;
  *(_QWORD *)(v69 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v69 = v70;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  return a1;
}

void sub_217EADD14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

turi::flexible_type *turi::flexible_type::flexible_type(turi::flexible_type *this, char *a2)
{
  void *__p[2];
  char v5;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  turi::flexible_type::operator=<std::string>((uint64_t *)this, (__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_217EADDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unint64_t **v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  if (a15 < 0)
    operator delete(__p);
  switch(*((_BYTE *)v15 + 12))
  {
    case 2:
      v17 = *v15;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_42;
      v20 = *v15;
      if (!*v15)
        goto LABEL_41;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v31 = *v15;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_42;
      v34 = *v15;
      if (!*v15)
        goto LABEL_41;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v23 = *v15;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_42;
      v26 = *v15;
      if (!*v15)
        goto LABEL_41;
      __p = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_33;
    case 5:
      v36 = *v15;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_42;
      v26 = *v15;
      if (!*v15)
        goto LABEL_41;
      __p = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_33:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v39 = *v15;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_42;
      v42 = *v15;
      if (!*v15)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_39;
    case 9:
      v27 = *v15;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_42;
      if (!*v15)
        goto LABEL_41;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v15);
      v30 = 2071181815;
LABEL_39:
      v22 = v30 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v21, v22);
LABEL_41:
      *v15 = 0;
LABEL_42:
      *v15 = 0;
      *((_DWORD *)v15 + 2) = 0;
      *((_BYTE *)v15 + 12) = 0;
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_42;
  }
}

unint64_t turi::variant_converter<unsigned long,void>::get(uint64_t a1, int *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v39[3];
  void **v40[3];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  memset(v41, 0, 13);
  v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((_QWORD *)v2 != v41)
  {
    v4 = *(_QWORD *)v2;
    *(_QWORD *)((char *)v41 + 5) = *(_QWORD *)(v2 + 5);
    v41[0] = v4;
    BYTE4(v41[1]) = *(_BYTE *)(v2 + 12);
    if (BYTE4(v41[1]) <= 9u && ((1 << SBYTE4(v41[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v41[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  v39[0] = 0;
  turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(v39, (turi::flexible_type_internals *)v41, v3);
  v8 = v39[0];
  switch(BYTE4(v41[1]))
  {
    case 2:
      v9 = (unint64_t *)v41[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v41[0];
        if (v41[0])
        {
          if (*(char *)(v41[0] + 31) < 0)
            operator delete(*(void **)(v41[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v41[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v41[0];
        if (v41[0])
        {
          v30 = *(void **)(v41[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v41[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v41[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v40);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v41[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v40);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v41[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v41[0];
        if (v41[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v41[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v41[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v41[0];
        if (v41[0])
        {
          v23 = *(void **)(v41[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v41[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return v8;
  }
  return v8;
}

void sub_217EAE264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

unint64_t *turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(unint64_t *result, turi::flexible_type_internals *this, const char *a3)
{
  unint64_t v3;

  if (*((_BYTE *)this + 12))
  {
    if (*((_BYTE *)this + 12) != 1)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer", a3);
    if (*(double *)this != (double)(unint64_t)*(double *)this)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer / convertable float", a3);
    v3 = (unint64_t)*(double *)this;
  }
  else
  {
    v3 = *(_QWORD *)this;
  }
  *result = v3;
  return result;
}

void sub_217EAE598()
{
  turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(unsigned long &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(unsigned long &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 248, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(unsigned long &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EAE69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(unsigned long &,turi::flexible_type const&)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 255, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(unsigned long &,turi::flexible_type const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EAE81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[18],char const(&)[1],0>(uint64_t a1, char *a2, char *a3)
{
  _BYTE v6[13];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  turi::flexible_type::flexible_type((turi::flexible_type *)v6, a3);
  *(_QWORD *)(a1 + 37) = *(_QWORD *)&v6[5];
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v6;
  *(_BYTE *)(a1 + 44) = v6[12];
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

void sub_217EAE928(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::read_arg<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  uint64_t *v5;
  uint64_t *i;
  uint64_t *v7;
  unsigned int v8;
  _BYTE v9[13];
  __int128 *v10[3];

  v10[2] = *(__int128 **)MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)a1 == *(int *)a1 >> 31
    && (v4 = (_BYTE *)turi::variant_get_ref<turi::flexible_type>((int *)a1), v4[12] == 5))
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = a2 + 8;
    v5 = *(uint64_t **)(*(_QWORD *)v4 + 8);
    for (i = *(uint64_t **)(*(_QWORD *)v4 + 16); v5 != i; v5 += 4)
    {
      memset(v10, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v10, v5 + 2);
      *(__int128 **)&v9[5] = *(__int128 **)((char *)v10 + 5);
      *(__int128 **)v9 = v10[0];
      v9[12] = BYTE4(v10[1]);
      v8 = 0;
      v10[0] = (__int128 *)(*v5 + 8);
      v7 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v10[0], (uint64_t)std::piecewise_construct, v10);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v7 + 14, &v8);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v8);
    }
  }
  else
  {
    turi::variant_converter<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get(a1, (uint64_t *)a2);
  }
}

void sub_217EAEA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x88uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217EAEBA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = 0;
  this[1].__r_.__value_.__s.__data_[20] = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  return this;
}

uint64_t *turi::variant_converter<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  const void ***has_fallback_type;
  char v5;
  char *v6;

  v6 = &v5;
  has_fallback_type = (const void ***)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*(unsigned int *)a1, *(_DWORD *)a1 ^ (*(int *)a1 >> 31), (uint64_t)&v6, a1 + 1);
  if (!has_fallback_type)
  {
    v6 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](a2, has_fallback_type);
}

void sub_217EAEC8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(v10);
}

void sub_217EAECB0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;

  result = 0;
  if (a2 >= 6)
  {
    switch(a2)
    {
      case 6u:
        result = *a4;
        break;
      case 7u:
      case 8u:
        return result;
      default:
        boost::detail::variant::forced_return<void>(0);
    }
  }
  return result;
}

void turi::full_type_name<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(const void ***a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v3;
  uint64_t *v4[10];

  v4[9] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(v4, a1);
  v3 = 6;
  std::string::basic_string[abi:ne180100]<0>(a2, "Dictionary");
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v3);
}

void sub_217EAED8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

turi::table_printer *std::unique_ptr<turi::table_printer>::reset[abi:ne180100](turi::table_printer **a1, turi::table_printer *a2)
{
  turi::table_printer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::table_printer::~table_printer(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

void sub_217EAEF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<turi::toolkit_class_specification>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::toolkit_class_specification>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a2 + 24, *(_QWORD **)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

_OWORD *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_DWORD *)v7 + 16) = 0;
    *((_BYTE *)v7 + 68) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,std::vector<std::string>>>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  unsigned int v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  BOOL v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  void *v86;
  void *v87;
  unsigned int v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  _QWORD *v101;
  _QWORD *v102;
  void **v103;
  _QWORD *v104;
  unint64_t *v105;
  std::string *v106;
  __int128 v107;
  _QWORD *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  void *v113;
  _QWORD *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  __int128 v127;
  __int128 v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t *v137;
  __int128 v138;
  unint64_t v139;
  void **v140[2];
  uint64_t v141[2];
  uint64_t v142[2];
  _BYTE v143[13];
  _BYTE v144[13];
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v138 = 0uLL;
  v139 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v138, a2[2]);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      memset(v142, 0, 13);
      turi::flexible_type::operator=<std::string>(v142, (const std::string *)(v5 + 4));
      memset(v141, 0, 13);
      turi::flexible_type_internals::ft_converter<12>::set<std::vector<std::string>>(v141, (__int128 **)v5 + 7);
      *(_QWORD *)&v143[5] = *(uint64_t *)((char *)v142 + 5);
      *(_QWORD *)v143 = v142[0];
      v143[12] = BYTE4(v142[1]);
      BYTE4(v142[1]) = 0;
      *(_QWORD *)&v144[5] = *(uint64_t *)((char *)v141 + 5);
      *(_QWORD *)v144 = v141[0];
      v144[12] = BYTE4(v141[1]);
      BYTE4(v141[1]) = 0;
      v7 = *((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1) >= v139)
      {
        v10 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v138, (uint64_t *)v143);
      }
      else
      {
        **((_QWORD **)&v138 + 1) = 0;
        *(_DWORD *)(v7 + 8) = 0;
        *(_BYTE *)(v7 + 12) = 0;
        v8 = *(_QWORD *)v143;
        *(_QWORD *)(v7 + 5) = *(_QWORD *)&v143[5];
        *(_QWORD *)v7 = v8;
        *(_BYTE *)(v7 + 12) = v143[12];
        v143[12] = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_BYTE *)(v7 + 28) = 0;
        v9 = *(_QWORD *)v144;
        *(_QWORD *)(v7 + 21) = *(_QWORD *)&v144[5];
        *(_QWORD *)(v7 + 16) = v9;
        *(_BYTE *)(v7 + 28) = v144[12];
        v144[12] = 0;
        v10 = v7 + 32;
      }
      *((_QWORD *)&v138 + 1) = v10;
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v143);
      switch(BYTE4(v141[1]))
      {
        case 2:
          v11 = (unint64_t *)v141[0];
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            v14 = v141[0];
            if (v141[0])
            {
              if (*(char *)(v141[0] + 31) < 0)
                operator delete(*(void **)(v141[0] + 8));
              v15 = v14;
              v16 = 0x1012C404EF22A49;
              goto LABEL_46;
            }
          }
          break;
        case 3:
          v28 = (unint64_t *)v141[0];
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v31 = v141[0];
            if (v141[0])
            {
              v32 = *(void **)(v141[0] + 8);
              if (v32)
              {
                *(_QWORD *)(v141[0] + 16) = v32;
                operator delete(v32);
              }
              v15 = v31;
              v16 = 0x1080C409938AC02;
              goto LABEL_46;
            }
          }
          break;
        case 4:
          v17 = (unint64_t *)v141[0];
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = v141[0];
            if (v141[0])
            {
              v140[0] = (void **)(v141[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v140);
              goto LABEL_39;
            }
          }
          break;
        case 5:
          v33 = (unint64_t *)v141[0];
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v20 = v141[0];
            if (v141[0])
            {
              v140[0] = (void **)(v141[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v140);
LABEL_39:
              v15 = v20;
              v16 = 0x1020C405E66F15BLL;
              goto LABEL_46;
            }
          }
          break;
        case 8:
          v36 = (unint64_t *)v141[0];
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = v141[0];
            if (v141[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v141[0] + 16));
              v15 = v39;
              v27 = -235920773;
              goto LABEL_45;
            }
          }
          break;
        case 9:
          v21 = (unint64_t *)v141[0];
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v24 = v141[0];
            if (v141[0])
            {
              v25 = *(void **)(v141[0] + 48);
              if (v25)
              {
                *(_QWORD *)(v141[0] + 56) = v25;
                operator delete(v25);
              }
              v26 = *(void **)(v24 + 24);
              if (v26)
              {
                *(_QWORD *)(v24 + 32) = v26;
                operator delete(v26);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v24 + 8);
              v15 = v24;
              v27 = 2071181815;
LABEL_45:
              v16 = v27 | 0x1030C4000000000;
LABEL_46:
              MEMORY[0x219A19A08](v15, v16);
            }
          }
          break;
        default:
          break;
      }
      switch(BYTE4(v142[1]))
      {
        case 2:
          v40 = (unint64_t *)v142[0];
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            v43 = v142[0];
            if (v142[0])
            {
              if (*(char *)(v142[0] + 31) < 0)
                operator delete(*(void **)(v142[0] + 8));
              v44 = v43;
              v45 = 0x1012C404EF22A49;
              goto LABEL_88;
            }
          }
          break;
        case 3:
          v57 = (unint64_t *)v142[0];
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            v60 = v142[0];
            if (v142[0])
            {
              v61 = *(void **)(v142[0] + 8);
              if (v61)
              {
                *(_QWORD *)(v142[0] + 16) = v61;
                operator delete(v61);
              }
              v44 = v60;
              v45 = 0x1080C409938AC02;
              goto LABEL_88;
            }
          }
          break;
        case 4:
          v46 = (unint64_t *)v142[0];
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            v49 = v142[0];
            if (v142[0])
            {
              v140[0] = (void **)(v142[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v140);
              goto LABEL_81;
            }
          }
          break;
        case 5:
          v62 = (unint64_t *)v142[0];
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v49 = v142[0];
            if (v142[0])
            {
              v140[0] = (void **)(v142[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v140);
LABEL_81:
              v44 = v49;
              v45 = 0x1020C405E66F15BLL;
              goto LABEL_88;
            }
          }
          break;
        case 8:
          v65 = (unint64_t *)v142[0];
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            v68 = v142[0];
            if (v142[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v142[0] + 16));
              v44 = v68;
              v56 = -235920773;
              goto LABEL_87;
            }
          }
          break;
        case 9:
          v50 = (unint64_t *)v142[0];
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v53 = v142[0];
            if (v142[0])
            {
              v54 = *(void **)(v142[0] + 48);
              if (v54)
              {
                *(_QWORD *)(v142[0] + 56) = v54;
                operator delete(v54);
              }
              v55 = *(void **)(v53 + 24);
              if (v55)
              {
                *(_QWORD *)(v53 + 32) = v55;
                operator delete(v55);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v53 + 8);
              v44 = v53;
              v56 = 2071181815;
LABEL_87:
              v45 = v56 | 0x1030C4000000000;
LABEL_88:
              MEMORY[0x219A19A08](v44, v45);
            }
          }
          break;
        default:
          break;
      }
      v69 = (_QWORD *)v5[1];
      if (v69)
      {
        do
        {
          v70 = v69;
          v69 = (_QWORD *)*v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          v70 = (_QWORD *)v5[2];
          v71 = *v70 == (_QWORD)v5;
          v5 = v70;
        }
        while (!v71);
      }
      v5 = v70;
    }
    while (v70 != v4);
  }
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      v72 = (unint64_t *)*a1;
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        v75 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        if (*((char *)v75 + 31) < 0)
          operator delete((void *)v75[1]);
        v76 = v75;
        v77 = 0x1012C404EF22A49;
        goto LABEL_136;
      }
      break;
    case 3:
      v89 = (unint64_t *)*a1;
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v92 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        v93 = (void *)v92[1];
        if (v93)
        {
          v92[2] = (unint64_t)v93;
          operator delete(v93);
        }
        v76 = v92;
        v77 = 0x1080C409938AC02;
        goto LABEL_136;
      }
      break;
    case 4:
      v78 = (unint64_t *)*a1;
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        v81 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        *(_QWORD *)v143 = v81 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
        goto LABEL_129;
      }
      break;
    case 5:
      v94 = (unint64_t *)*a1;
      do
      {
        v95 = __ldaxr(v94);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, v94));
      if (!v96)
      {
        v81 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        *(_QWORD *)v143 = v81 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
LABEL_129:
        v76 = v81;
        v77 = 0x1020C405E66F15BLL;
        goto LABEL_136;
      }
      break;
    case 8:
      v97 = (unint64_t *)*a1;
      do
      {
        v98 = __ldaxr(v97);
        v99 = v98 - 1;
      }
      while (__stlxr(v99, v97));
      if (!v99)
      {
        v100 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        boost::detail::shared_count::~shared_count((unsigned int **)v100 + 2);
        v76 = v100;
        v88 = -235920773;
        goto LABEL_135;
      }
      break;
    case 9:
      v82 = (unint64_t *)*a1;
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        v85 = (unint64_t *)*a1;
        if (*a1)
        {
          v86 = (void *)v85[6];
          if (v86)
          {
            v85[7] = (unint64_t)v86;
            operator delete(v86);
          }
          v87 = (void *)v85[3];
          if (v87)
          {
            v85[4] = (unint64_t)v87;
            operator delete(v87);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v85 + 1));
          v76 = v85;
          v88 = 2071181815;
LABEL_135:
          v77 = v88 | 0x1030C4000000000;
LABEL_136:
          MEMORY[0x219A19A08](v76, v77);
        }
LABEL_137:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 5;
  v101 = (_QWORD *)operator new();
  v102 = v101;
  *v101 = 0;
  v101[1] = 0;
  v103 = (void **)(v101 + 1);
  v101[2] = 0;
  v101[3] = 0;
  *a1 = (uint64_t)v101;
  *v101 = 1;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      if (*v101 != 1)
      {
        v104 = (_QWORD *)operator new();
        v105 = (unint64_t *)*a1;
        *v104 = *(_QWORD *)*a1;
        v106 = (std::string *)(v104 + 1);
        if (*((char *)v105 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v106, (const std::string::value_type *)v105[1], v105[2]);
        }
        else
        {
          v107 = *(_OWORD *)(v105 + 1);
          v104[3] = v105[3];
          *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v107;
        }
        *a1 = (uint64_t)v104;
        *v104 = 1;
        do
        {
          v135 = __ldaxr(v102);
          v136 = v135 - 1;
        }
        while (__stlxr(v136, v102));
        if (!v136)
        {
          v112 = 0x1012C404EF22A49;
          if ((*((char *)v102 + 31) & 0x80000000) == 0)
            goto LABEL_178;
          v113 = *v103;
          goto LABEL_177;
        }
      }
      break;
    case 3:
      if (*v101 != 1)
      {
        v108 = (_QWORD *)operator new();
        v109 = (unint64_t *)*a1;
        *v108 = *(_QWORD *)*a1;
        v108[2] = 0;
        v108[3] = 0;
        v108[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v108 + 1, (const void *)v109[1], v109[2], (uint64_t)(v109[2] - v109[1]) >> 3);
        *a1 = (uint64_t)v108;
        *v108 = 1;
        do
        {
          v110 = __ldaxr(v102);
          v111 = v110 - 1;
        }
        while (__stlxr(v111, v102));
        if (!v111)
        {
          v112 = 0x1080C409938AC02;
          v113 = *v103;
          if (*v103)
          {
            v102[2] = v113;
LABEL_177:
            operator delete(v113);
          }
          goto LABEL_178;
        }
      }
      break;
    case 4:
      if (*v101 != 1)
      {
        v114 = (_QWORD *)operator new();
        v115 = (unint64_t *)*a1;
        *v114 = *(_QWORD *)*a1;
        v114[2] = 0;
        v114[3] = 0;
        v114[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v114 + 1, (uint64_t *)v115[1], (uint64_t *)v115[2], (uint64_t)(v115[2] - v115[1]) >> 4);
        *a1 = (uint64_t)v114;
        *v114 = 1;
        do
        {
          v116 = __ldaxr(v102);
          v117 = v116 - 1;
        }
        while (__stlxr(v117, v102));
        if (!v117)
        {
          v112 = 0x1020C405E66F15BLL;
          *(_QWORD *)v143 = v103;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
          goto LABEL_178;
        }
      }
      break;
    case 5:
      if (*v101 != 1)
      {
        v118 = (_QWORD *)operator new();
        v119 = (unint64_t *)*a1;
        *v118 = *(_QWORD *)*a1;
        v118[2] = 0;
        v118[3] = 0;
        v118[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v118 + 1, (uint64_t *)v119[1], (uint64_t *)v119[2], (uint64_t)(v119[2] - v119[1]) >> 5);
        *a1 = (uint64_t)v118;
        *v118 = 1;
        do
        {
          v120 = __ldaxr(v102);
          v121 = v120 - 1;
        }
        while (__stlxr(v121, v102));
        if (!v121)
        {
          v112 = 0x1020C405E66F15BLL;
          *(_QWORD *)v143 = v103;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
          goto LABEL_178;
        }
      }
      break;
    case 8:
      if (*v101 != 1)
      {
        v122 = operator new();
        v123 = (unint64_t *)*a1;
        *(_QWORD *)v122 = *(_QWORD *)*a1;
        *(_QWORD *)(v122 + 8) = v123[1];
        v124 = v123[2];
        *(_QWORD *)(v122 + 16) = v124;
        if (v124)
        {
          v125 = (unsigned int *)(v124 + 8);
          do
            v126 = __ldxr(v125);
          while (__stxr(v126 + 1, v125));
        }
        v127 = *(_OWORD *)(v123 + 3);
        v128 = *(_OWORD *)(v123 + 5);
        *(_OWORD *)(v122 + 56) = *(_OWORD *)(v123 + 7);
        *(_OWORD *)(v122 + 40) = v128;
        *(_OWORD *)(v122 + 24) = v127;
        *a1 = v122;
        *(_QWORD *)v122 = 1;
        do
        {
          v129 = __ldaxr(v102);
          v130 = v129 - 1;
        }
        while (__stlxr(v130, v102));
        if (!v130)
        {
          v112 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)v102 + 2);
          goto LABEL_178;
        }
      }
      break;
    case 9:
      if (*v101 != 1)
      {
        v131 = (_QWORD *)operator new();
        v132 = *a1 + 8;
        *v131 = *(_QWORD *)*a1;
        turi::flexible_type_impl::ndarray<double>::ndarray(v131 + 1, v132);
        *a1 = (uint64_t)v131;
        *v131 = 1;
        do
        {
          v133 = __ldaxr(v102);
          v134 = v133 - 1;
        }
        while (__stlxr(v134, v102));
        if (!v134)
        {
          v112 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v102);
LABEL_178:
          MEMORY[0x219A19A08](v102, v112);
        }
      }
      break;
    default:
      break;
  }
  v137 = (unint64_t *)*a1;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)v137 + 1);
  *(_OWORD *)(v137 + 1) = v138;
  v137[3] = v139;
  v138 = 0uLL;
  v139 = 0;
  *(_QWORD *)v143 = &v138;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
}

void sub_217EAFCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  MEMORY[0x219A19A08](v18, 0x1012C404EF22A49);
  a18 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_converter<12>::set<std::vector<std::string>>(uint64_t *a1, __int128 **a2)
{
  unint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  void *v22;
  void *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  void *v81;
  void *v82;
  unsigned int v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  _QWORD *v97;
  void **v98;
  _QWORD *v99;
  unint64_t *v100;
  std::string *v101;
  __int128 v102;
  _QWORD *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  _QWORD *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  __int128 v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t *v132;
  std::string __p;
  __int128 v134;
  unint64_t v135;
  void **v136;
  uint64_t v137[3];

  v137[2] = *MEMORY[0x24BDAC8D0];
  std::vector<turi::flexible_type>::vector(&v134, 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  if (*((_QWORD *)&v134 + 1) != (_QWORD)v134)
  {
    v4 = 0;
    v5 = *a2;
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v6 = *v5;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      }
      memset(v137, 0, 13);
      turi::flexible_type::operator=<std::string>(v137, (__int128 *)&__p);
      v7 = v134 + 16 * v4;
      if (v137 == (uint64_t *)v7)
      {
        switch(BYTE4(v137[1]))
        {
          case 2:
            v38 = (unint64_t *)v137[0];
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              v41 = v137[0];
              if (v137[0])
              {
                if (*(char *)(v137[0] + 31) < 0)
                  operator delete(*(void **)(v137[0] + 8));
                v42 = v41;
                v43 = 0x1012C404EF22A49;
                goto LABEL_96;
              }
            }
            break;
          case 3:
            v44 = (unint64_t *)v137[0];
            do
            {
              v45 = __ldaxr(v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v44));
            if (!v46)
            {
              v47 = v137[0];
              if (v137[0])
              {
                v48 = *(void **)(v137[0] + 8);
                if (v48)
                {
                  *(_QWORD *)(v137[0] + 16) = v48;
                  operator delete(v48);
                }
                v42 = v47;
                v43 = 0x1080C409938AC02;
                goto LABEL_96;
              }
            }
            break;
          case 4:
            v49 = (unint64_t *)v137[0];
            do
            {
              v50 = __ldaxr(v49);
              v51 = v50 - 1;
            }
            while (__stlxr(v51, v49));
            if (!v51)
            {
              v52 = v137[0];
              if (v137[0])
              {
                v136 = (void **)(v137[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v136);
                goto LABEL_80;
              }
            }
            break;
          case 5:
            v53 = (unint64_t *)v137[0];
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              v52 = v137[0];
              if (v137[0])
              {
                v136 = (void **)(v137[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v136);
LABEL_80:
                v42 = v52;
                v43 = 0x1020C405E66F15BLL;
                goto LABEL_96;
              }
            }
            break;
          case 8:
            v56 = (unint64_t *)v137[0];
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
            {
              v59 = v137[0];
              if (v137[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v137[0] + 16));
                v42 = v59;
                v60 = -235920773;
                goto LABEL_95;
              }
            }
            break;
          case 9:
            v61 = (unint64_t *)v137[0];
            do
            {
              v62 = __ldaxr(v61);
              v63 = v62 - 1;
            }
            while (__stlxr(v63, v61));
            if (!v63)
            {
              v64 = v137[0];
              if (v137[0])
              {
                v65 = *(void **)(v137[0] + 48);
                if (v65)
                {
                  *(_QWORD *)(v137[0] + 56) = v65;
                  operator delete(v65);
                }
                v66 = *(void **)(v64 + 24);
                if (v66)
                {
                  *(_QWORD *)(v64 + 32) = v66;
                  operator delete(v66);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v64 + 8);
                v42 = v64;
                v60 = 2071181815;
LABEL_95:
                v43 = v60 | 0x1030C4000000000;
LABEL_96:
                MEMORY[0x219A19A08](v42, v43);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        switch(*(_BYTE *)(v7 + 12))
        {
          case 2:
            v8 = *(unint64_t **)v7;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              v11 = *(unint64_t **)v7;
              if (!*(_QWORD *)v7)
                goto LABEL_49;
              if (*((char *)v11 + 31) < 0)
                operator delete((void *)v11[1]);
              v12 = v11;
              v13 = 0x1012C404EF22A49;
              goto LABEL_48;
            }
            break;
          case 3:
            v25 = *(unint64_t **)v7;
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v28 = *(unint64_t **)v7;
              if (!*(_QWORD *)v7)
                goto LABEL_49;
              v29 = (void *)v28[1];
              if (v29)
              {
                v28[2] = (unint64_t)v29;
                operator delete(v29);
              }
              v12 = v28;
              v13 = 0x1080C409938AC02;
              goto LABEL_48;
            }
            break;
          case 4:
            v14 = *(unint64_t **)v7;
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              v17 = *(unint64_t **)v7;
              if (!*(_QWORD *)v7)
                goto LABEL_49;
              v136 = (void **)(v17 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v136);
              goto LABEL_41;
            }
            break;
          case 5:
            v30 = *(unint64_t **)v7;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v17 = *(unint64_t **)v7;
              if (!*(_QWORD *)v7)
                goto LABEL_49;
              v136 = (void **)(v17 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v136);
LABEL_41:
              v12 = v17;
              v13 = 0x1020C405E66F15BLL;
              goto LABEL_48;
            }
            break;
          case 8:
            v33 = *(unint64_t **)v7;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              v36 = *(unint64_t **)v7;
              if (!*(_QWORD *)v7)
                goto LABEL_49;
              boost::detail::shared_count::~shared_count((unsigned int **)v36 + 2);
              v12 = v36;
              v24 = -235920773;
              goto LABEL_47;
            }
            break;
          case 9:
            v18 = *(unint64_t **)v7;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v21 = *(unint64_t **)v7;
              if (*(_QWORD *)v7)
              {
                v22 = (void *)v21[6];
                if (v22)
                {
                  v21[7] = (unint64_t)v22;
                  operator delete(v22);
                }
                v23 = (void *)v21[3];
                if (v23)
                {
                  v21[4] = (unint64_t)v23;
                  operator delete(v23);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v21 + 1));
                v12 = v21;
                v24 = 2071181815;
LABEL_47:
                v13 = v24 | 0x1030C4000000000;
LABEL_48:
                MEMORY[0x219A19A08](v12, v13);
              }
LABEL_49:
              *(_QWORD *)v7 = 0;
            }
            break;
          default:
            break;
        }
        v37 = v137[0];
        *(_QWORD *)(v7 + 5) = *(uint64_t *)((char *)v137 + 5);
        *(_QWORD *)v7 = v37;
        *(_BYTE *)(v7 + 12) = BYTE4(v137[1]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v4;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v4 < (uint64_t)(*((_QWORD *)&v134 + 1) - v134) >> 4);
  }
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      v67 = (unint64_t *)*a1;
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        v70 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_139;
        if (*((char *)v70 + 31) < 0)
          operator delete((void *)v70[1]);
        v71 = v70;
        v72 = 0x1012C404EF22A49;
        goto LABEL_138;
      }
      break;
    case 3:
      v84 = (unint64_t *)*a1;
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v87 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_139;
        v88 = (void *)v87[1];
        if (v88)
        {
          v87[2] = (unint64_t)v88;
          operator delete(v88);
        }
        v71 = v87;
        v72 = 0x1080C409938AC02;
        goto LABEL_138;
      }
      break;
    case 4:
      v73 = (unint64_t *)*a1;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        v76 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_139;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v76 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_131;
      }
      break;
    case 5:
      v89 = (unint64_t *)*a1;
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v76 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_139;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v76 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_131:
        v71 = v76;
        v72 = 0x1020C405E66F15BLL;
        goto LABEL_138;
      }
      break;
    case 8:
      v92 = (unint64_t *)*a1;
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        v95 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_139;
        boost::detail::shared_count::~shared_count((unsigned int **)v95 + 2);
        v71 = v95;
        v83 = -235920773;
        goto LABEL_137;
      }
      break;
    case 9:
      v77 = (unint64_t *)*a1;
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (!v79)
      {
        v80 = (unint64_t *)*a1;
        if (*a1)
        {
          v81 = (void *)v80[6];
          if (v81)
          {
            v80[7] = (unint64_t)v81;
            operator delete(v81);
          }
          v82 = (void *)v80[3];
          if (v82)
          {
            v80[4] = (unint64_t)v82;
            operator delete(v82);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v80 + 1));
          v71 = v80;
          v83 = 2071181815;
LABEL_137:
          v72 = v83 | 0x1030C4000000000;
LABEL_138:
          MEMORY[0x219A19A08](v71, v72);
        }
LABEL_139:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 4;
  v96 = (_QWORD *)operator new();
  v97 = v96;
  *v96 = 0;
  v96[1] = 0;
  v98 = (void **)(v96 + 1);
  v96[2] = 0;
  v96[3] = 0;
  *a1 = (uint64_t)v96;
  *v96 = 1;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      if (*v96 != 1)
      {
        v99 = (_QWORD *)operator new();
        v100 = (unint64_t *)*a1;
        *v99 = *(_QWORD *)*a1;
        v101 = (std::string *)(v99 + 1);
        if (*((char *)v100 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v101, (const std::string::value_type *)v100[1], v100[2]);
        }
        else
        {
          v102 = *(_OWORD *)(v100 + 1);
          v99[3] = v100[3];
          *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v102;
        }
        *a1 = (uint64_t)v99;
        *v99 = 1;
        do
        {
          v130 = __ldaxr(v97);
          v131 = v130 - 1;
        }
        while (__stlxr(v131, v97));
        if (!v131)
        {
          v107 = 0x1012C404EF22A49;
          if ((*((char *)v97 + 31) & 0x80000000) == 0)
            goto LABEL_180;
          v108 = *v98;
          goto LABEL_179;
        }
      }
      break;
    case 3:
      if (*v96 != 1)
      {
        v103 = (_QWORD *)operator new();
        v104 = (unint64_t *)*a1;
        *v103 = *(_QWORD *)*a1;
        v103[2] = 0;
        v103[3] = 0;
        v103[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v103 + 1, (const void *)v104[1], v104[2], (uint64_t)(v104[2] - v104[1]) >> 3);
        *a1 = (uint64_t)v103;
        *v103 = 1;
        do
        {
          v105 = __ldaxr(v97);
          v106 = v105 - 1;
        }
        while (__stlxr(v106, v97));
        if (!v106)
        {
          v107 = 0x1080C409938AC02;
          v108 = *v98;
          if (*v98)
          {
            v97[2] = v108;
LABEL_179:
            operator delete(v108);
          }
          goto LABEL_180;
        }
      }
      break;
    case 4:
      if (*v96 != 1)
      {
        v109 = (_QWORD *)operator new();
        v110 = (unint64_t *)*a1;
        *v109 = *(_QWORD *)*a1;
        v109[2] = 0;
        v109[3] = 0;
        v109[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v109 + 1, (uint64_t *)v110[1], (uint64_t *)v110[2], (uint64_t)(v110[2] - v110[1]) >> 4);
        *a1 = (uint64_t)v109;
        *v109 = 1;
        do
        {
          v111 = __ldaxr(v97);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v97));
        if (!v112)
        {
          v107 = 0x1020C405E66F15BLL;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_180;
        }
      }
      break;
    case 5:
      if (*v96 != 1)
      {
        v113 = (_QWORD *)operator new();
        v114 = (unint64_t *)*a1;
        *v113 = *(_QWORD *)*a1;
        v113[2] = 0;
        v113[3] = 0;
        v113[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v113 + 1, (uint64_t *)v114[1], (uint64_t *)v114[2], (uint64_t)(v114[2] - v114[1]) >> 5);
        *a1 = (uint64_t)v113;
        *v113 = 1;
        do
        {
          v115 = __ldaxr(v97);
          v116 = v115 - 1;
        }
        while (__stlxr(v116, v97));
        if (!v116)
        {
          v107 = 0x1020C405E66F15BLL;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_180;
        }
      }
      break;
    case 8:
      if (*v96 != 1)
      {
        v117 = operator new();
        v118 = (unint64_t *)*a1;
        *(_QWORD *)v117 = *(_QWORD *)*a1;
        *(_QWORD *)(v117 + 8) = v118[1];
        v119 = v118[2];
        *(_QWORD *)(v117 + 16) = v119;
        if (v119)
        {
          v120 = (unsigned int *)(v119 + 8);
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 1, v120));
        }
        v122 = *(_OWORD *)(v118 + 3);
        v123 = *(_OWORD *)(v118 + 5);
        *(_OWORD *)(v117 + 56) = *(_OWORD *)(v118 + 7);
        *(_OWORD *)(v117 + 40) = v123;
        *(_OWORD *)(v117 + 24) = v122;
        *a1 = v117;
        *(_QWORD *)v117 = 1;
        do
        {
          v124 = __ldaxr(v97);
          v125 = v124 - 1;
        }
        while (__stlxr(v125, v97));
        if (!v125)
        {
          v107 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)v97 + 2);
          goto LABEL_180;
        }
      }
      break;
    case 9:
      if (*v96 != 1)
      {
        v126 = (_QWORD *)operator new();
        v127 = *a1 + 8;
        *v126 = *(_QWORD *)*a1;
        turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
        *a1 = (uint64_t)v126;
        *v126 = 1;
        do
        {
          v128 = __ldaxr(v97);
          v129 = v128 - 1;
        }
        while (__stlxr(v129, v97));
        if (!v129)
        {
          v107 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v97);
LABEL_180:
          MEMORY[0x219A19A08](v97, v107);
        }
      }
      break;
    default:
      break;
  }
  v132 = (unint64_t *)*a1;
  std::vector<turi::flexible_type>::__vdeallocate((void **)v132 + 1);
  *(_OWORD *)(v132 + 1) = v134;
  v132[3] = v135;
  v134 = 0uLL;
  v135 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_217EB0BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,int a23,char a24)
{
  uint64_t v24;

  MEMORY[0x219A19A08](v24, 0x1012C404EF22A49);
  __p = &a16;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::flexible_type>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 16 * a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 12) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_217EB0D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<turi::flexible_type>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 16;
        std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<turi::toolkit_class_specification>::__push_back_slow_path<turi::toolkit_class_specification const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  std::string *v11;
  std::string::value_type *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (std::string *)&v7[56 * v3];
  v13 = &v7[56 * v6];
  std::allocator<turi::toolkit_class_specification>::construct[abi:ne180100]<turi::toolkit_class_specification,turi::toolkit_class_specification const&>((_DWORD)a1 + 16, v11, a2);
  v12 = &v11[2].__r_.__value_.__s.__data_[8];
  std::vector<turi::toolkit_class_specification>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<turi::toolkit_class_specification>::~__split_buffer(&v10);
  return v8;
}

void sub_217EB0F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::toolkit_class_specification>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<turi::toolkit_class_specification>::construct[abi:ne180100]<turi::toolkit_class_specification,turi::toolkit_class_specification const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  uint64_t *result;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  result = std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a3 + 24);
  this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  return result;
}

void sub_217EB0F74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<turi::toolkit_class_specification>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::toolkit_class_specification>,std::reverse_iterator<turi::toolkit_class_specification*>,std::reverse_iterator<turi::toolkit_class_specification*>,std::reverse_iterator<turi::toolkit_class_specification*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::toolkit_class_specification>,std::reverse_iterator<turi::toolkit_class_specification*>,std::reverse_iterator<turi::toolkit_class_specification*>,std::reverse_iterator<turi::toolkit_class_specification*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3 - 3;
    do
    {
      v9 = *((_OWORD *)v8 - 2);
      *(_QWORD *)(v7 - 40) = *(v8 - 2);
      *(_OWORD *)(v7 - 56) = v9;
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      *(v8 - 4) = 0;
      *(_QWORD *)(v7 - 32) = *(v8 - 1);
      v10 = *v8;
      *(_QWORD *)(v7 - 24) = *v8;
      v11 = v7 - 24;
      v12 = v8[1];
      *(_QWORD *)(v7 - 16) = v12;
      if (v12)
      {
        *(_QWORD *)(v10 + 16) = v11;
        *(v8 - 1) = v8;
        *v8 = 0;
        v8[1] = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 32) = v11;
      }
      *(_QWORD *)(v7 - 8) = v8[2];
      v7 = *((_QWORD *)&v19 + 1) - 56;
      *((_QWORD *)&v19 + 1) -= 56;
      v13 = v8 - 4;
      v8 -= 7;
    }
    while (v13 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,std::reverse_iterator<turi::toolkit_class_specification*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,std::reverse_iterator<turi::toolkit_class_specification*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,std::reverse_iterator<turi::toolkit_class_specification*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,std::reverse_iterator<turi::toolkit_class_specification*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::toolkit_class_specification>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::toolkit_class_specification>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::toolkit_class_specification>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::toolkit_class_specification>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<turi::toolkit_class_specification>::destroy[abi:ne180100](v4, i - 56);
  }
}

void OUTLINED_FUNCTION_0_2()
{
  JUMPOUT(0x219A19A08);
}

void OUTLINED_FUNCTION_1_1(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

void OUTLINED_FUNCTION_3_1()
{
  JUMPOUT(0x219A19A08);
}

void OUTLINED_FUNCTION_4_0()
{
  JUMPOUT(0x219A19A08);
}

void OUTLINED_FUNCTION_5_0()
{
  JUMPOUT(0x219A19A08);
}

void OUTLINED_FUNCTION_6_0(unint64_t *a1@<X8>)
{
  __ldaxr(a1);
}

void OUTLINED_FUNCTION_7_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
}

void OUTLINED_FUNCTION_8_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 8);
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
}

void OUTLINED_FUNCTION_9_0(void **a1@<X8>, uint64_t a2, void **a3)
{
  a3 = a1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a3);
}

void OUTLINED_FUNCTION_10_0(void **a1@<X8>, uint64_t a2, void **a3)
{
  a3 = a1;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a3);
}

void OUTLINED_FUNCTION_13_0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_QWORD *)v0 = v2;
  *(_DWORD *)(v0 + 8) = v1;
}

void OUTLINED_FUNCTION_20(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_21_0()
{
  uint64_t v0;

  boost::detail::shared_count::~shared_count((unsigned int **)(v0 + 16));
}

void OUTLINED_FUNCTION_22()
{
  uint64_t v0;

  operator delete(*(void **)(v0 + 8));
}

void OUTLINED_FUNCTION_24(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_25()
{
  uint64_t v0;

  boost::detail::shared_count::~shared_count((unsigned int **)(v0 + 16));
}

void __cxx_global_var_init_7()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double tc_datetime_create_empty(turi *a1)
{
  uint64_t v1;
  double result;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v1 = operator new();
  result = 5.16449976e120;
  *(_OWORD *)(v1 + 8) = xmmword_2186C4860;
  *(_QWORD *)v1 = &capi_struct_type_info_tc_datetime_inst;
  return result;
}

void sub_217EB14BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB14ACLL);
}

void sub_217EB14E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void fill_error_from_exception(std::exception_ptr *a1)
{
  std::exception_ptr v1;
  std::exception_ptr v2;

  if (a1->__ptr_)
  {
    v1.__ptr_ = std::exception_ptr::exception_ptr(&v2, a1);
    std::rethrow_exception(v1);
    __break(1u);
  }
}

void sub_217EB1548(void *a1, std::string *a2, void *__p, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 __pa, std::string::size_type a17)
{
  uint64_t v17;
  int v18;
  void *v20;
  const std::string::value_type *v21;
  std::string *v22;
  __int128 v23;
  void *v24;
  const std::string::value_type *v25;
  const std::string::value_type *v26;
  std::string *v27;
  __int128 v28;

  v18 = (int)a2;
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v17 - 24));
  if (v18 == 4)
  {
    v20 = __cxa_begin_catch(a1);
    std::string::basic_string[abi:ne180100]<0>(&a10, "Error: ");
    v21 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
    v22 = std::string::append((std::string *)&a10, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    a17 = v22->__r_.__value_.__r.__words[2];
    __pa = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    set_error(a9, (const std::string *)&__pa);
    goto LABEL_3;
  }
  if (v18 == 3)
  {
    __cxa_begin_catch(a1);
    std::operator+<char>();
    set_error(a9, (const std::string *)&__pa);
  }
  else
  {
    v25 = (const std::string::value_type *)__cxa_begin_catch(a1);
    if (v18 == 2)
    {
      v26 = v25;
      std::string::basic_string[abi:ne180100]<0>(&a10, "Error: ");
      v27 = std::string::append((std::string *)&a10, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      a17 = v27->__r_.__value_.__r.__words[2];
      __pa = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      set_error(a9, (const std::string *)&__pa);
LABEL_3:
      if (SHIBYTE(a17) < 0)
        operator delete((void *)__pa);
      if (a15 < 0)
      {
        v24 = a10;
LABEL_14:
        operator delete(v24);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    std::string::basic_string[abi:ne180100]<0>(&__pa, "Unknown internal error occurred.");
    set_error(a9, (const std::string *)&__pa);
  }
  if (SHIBYTE(a17) < 0)
  {
    v24 = (void *)__pa;
    goto LABEL_14;
  }
LABEL_15:
  __cxa_end_catch();
  JUMPOUT(0x217EB151CLL);
}

void sub_217EB1694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_datetime_create_from_posix_timestamp(turi *a1)
{
  _QWORD *result;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  result = (_QWORD *)operator new();
  *result = &capi_struct_type_info_tc_datetime_inst;
  result[1] = (unint64_t)a1 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
  result[2] = 0;
  return result;
}

void sub_217EB17C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB17B4);
}

void sub_217EB17F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_datetime_create_from_posix_highres_timestamp(turi *a1, double a2)
{
  int v3;
  unsigned int v4;
  _QWORD *result;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v3 = (int)((a2 - (double)(uint64_t)floor(a2)) * 1000000.0);
  if (v3 >= 999999)
    v4 = 999999;
  else
    v4 = v3;
  if (v4 >= 0xF4240)
    turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
  result = (_QWORD *)operator new();
  result[1] = vcvtmd_s64_f64(a2) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
  result[2] = 0;
  *result = &capi_struct_type_info_tc_datetime_inst;
  *((_DWORD *)result + 4) = v4;
  return result;
}

void sub_217EB18D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a9);
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB18B0);
}

void sub_217EB1900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_datetime_create_from_string(turi *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  std::string v11;
  void *__p[2];
  uint64_t v13;
  std::string v14;
  _QWORD v15[12];
  char v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v18 = 0uLL;
    v19 = 0;
    if (a2)
      MEMORY[0x219A19390](&v18, a2);
    *(_OWORD *)__p = v18;
    v13 = v19;
    v18 = 0uLL;
    v19 = 0;
    turi::flexible_type_impl::date_time_string_reader::date_time_string_reader(&v14, __p);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(&v11, (char *)a1);
    v6 = turi::flexible_type_impl::date_time_string_reader::read((uint64_t)&v14, &v11);
    v8 = v7;
    v9 = (_QWORD *)operator new();
    v9[1] = v6;
    v9[2] = 0;
    *v9 = &capi_struct_type_info_tc_datetime_inst;
    *((_DWORD *)v9 + 4) = v8;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    v15[0] = *MEMORY[0x24BEDB7F8];
    *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
    v15[2] = MEMORY[0x24BEDB848] + 16;
    if (v16 < 0)
      operator delete((void *)v15[10]);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x219A198F4](&v17);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19) < 0)
      operator delete((void *)v18);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "\"Datetime string\" is null.");
    set_error(a3, &v14);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    return 0;
  }
  return v9;
}

void sub_217EB1AD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB1AB4);
}

void sub_217EB1B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::string *set_error(uint64_t *a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  if (v4)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 8))(v4, a1);
  v5 = operator new();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)v5 = &capi_struct_type_info_tc_error_inst;
  *a1 = v5;
  *(_QWORD *)(v5 + 8) = 0;
  return std::string::operator=((std::string *)(v5 + 8), a2);
}

void turi::flexible_type_impl::date_time_string_reader::~date_time_string_reader(turi::flexible_type_impl::date_time_string_reader *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *((_QWORD *)this + 3) = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 24) = *(_QWORD *)(v2 + 24);
  *((_QWORD *)this + 5) = MEMORY[0x24BEDB848] + 16;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x219A198F4]((char *)this + 144);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void tc_datetime_set_time_zone_offset(turi *a1, int a2, int a3, uint64_t *a4)
{
  int v8;
  char v9;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v8 = a3 + 4 * a2;
    if (v8 != 64 && (v8 - 49) <= 0xFFFFFF9E)
      turi::flex_date_time::set_time_zone_offset(int)::{lambda(void)#1}::operator()();
    if (v8 >= 0)
      v9 = 25;
    else
      v9 = -25;
    *((_BYTE *)a1 + 15) = v9 + v8;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_217EB1D4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB1D2CLL);
}

void sub_217EB1D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_datetime_get_time_zone_offset_minutes(char *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v4 = a1[15];
    v5 = -25;
    if ((int)v4 < 0)
      v5 = 25;
    return 15 * (v5 + v4);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
}

void sub_217EB1E40(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB1E2CLL);
}

void sub_217EB1E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_datetime_set_microsecond(turi *a1, unsigned int a2, uint64_t *a3)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a2 >= 0xF4240)
      turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
    *((_DWORD *)a1 + 4) = a2;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_217EB1F40(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB1F20);
}

void sub_217EB1F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_datetime_get_microsecond(int *a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
    return a1[4];
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB201C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB2008);
}

void sub_217EB2068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_datetime_set_timestamp(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    *(_QWORD *)(a1 + 8) = a2 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a1 + 15) << 56);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_217EB2108(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB20F4);
}

void sub_217EB2154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_datetime_get_timestamp(turi *a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
    return (uint64_t)(*((_QWORD *)a1 + 1) << 8) >> 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB21E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB21D4);
}

void sub_217EB2234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_datetime_set_highres_timestamp(uint64_t a1, uint64_t *a2, double a3)
{
  int v6;
  unsigned int v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v6 = (int)((a3 - (double)(uint64_t)floor(a3)) * 1000000.0);
    *(_QWORD *)(a1 + 8) = vcvtmd_s64_f64(a3) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a1 + 15) << 56);
    if (v6 >= 999999)
      v7 = 999999;
    else
      v7 = v6;
    if (v7 >= 0xF4240)
      turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
    *(_DWORD *)(a1 + 16) = v7;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_217EB2328(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB2308);
}

void sub_217EB2374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

double tc_datetime_get_highres_timestamp(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
    return (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0.0;
}

void sub_217EB2424(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB2410);
}

void sub_217EB2470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_datetime_less_than(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1 && a2)
  {
    v6 = (uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8;
    v7 = *(_QWORD *)(a2 + 8);
    if (v6 < v7 << 8 >> 8)
      return 1;
    if (v6 == v7 << 8 >> 8)
      return *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217EB25BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_datetime_equal(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1 && a2)
  {
    if (((*(_QWORD *)(a2 + 8) ^ *(_QWORD *)(a1 + 8)) & 0xFFFFFFFFFFFFFFLL) == 0)
      return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217EB269C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB2684);
}

void sub_217EB26F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_flex_dict_create(turi *a1)
{
  _QWORD *result;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  result = (_QWORD *)operator new();
  result[2] = 0;
  result[3] = 0;
  *result = &capi_struct_type_info_tc_flex_dict_inst;
  result[1] = 0;
  return result;
}

void sub_217EB2768(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB2758);
}

void sub_217EB2794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_flex_dict_add_element(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE __p[13];
  _BYTE v17[13];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v8 = a1[1];
        v9 = a1[2];
        std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>((uint64_t)__p, (uint64_t *)(a2 + 8), a3 + 8);
        v10 = a1[2];
        if (v10 >= a1[3])
        {
          v13 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>(a1 + 1, (uint64_t *)__p);
        }
        else
        {
          *(_QWORD *)v10 = 0;
          *(_DWORD *)(v10 + 8) = 0;
          *(_BYTE *)(v10 + 12) = 0;
          v11 = *(_QWORD *)__p;
          *(_QWORD *)(v10 + 5) = *(_QWORD *)&__p[5];
          *(_QWORD *)v10 = v11;
          *(_BYTE *)(v10 + 12) = __p[12];
          __p[12] = 0;
          *(_QWORD *)(v10 + 16) = 0;
          *(_DWORD *)(v10 + 24) = 0;
          *(_BYTE *)(v10 + 28) = 0;
          v12 = *(_QWORD *)v17;
          *(_QWORD *)(v10 + 21) = *(_QWORD *)&v17[5];
          *(_QWORD *)(v10 + 16) = v12;
          *(_BYTE *)(v10 + 28) = v17[12];
          v17[12] = 0;
          v13 = v10 + 32;
        }
        v14 = (v9 - v8) >> 5;
        a1[2] = v13;
        std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)__p);
        return v14;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "\"value flexible_type\" is null.");
      set_error(a4, (const std::string *)__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "\"key flexible_type\" is null.");
      set_error(a4, (const std::string *)__p);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flex dict\" is null.");
    set_error(a4, (const std::string *)__p);
  }
  if ((v17[7] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return -1;
}

void sub_217EB2954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EB28F0);
  }
  _Unwind_Resume(exception_object);
}

void tc_flex_dict_extract_entry(turi *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  BOOL v40;
  int v41;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t **v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  void *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a3)
    {
      if (a4)
      {
        v10 = *((_QWORD *)a1 + 1);
        if (a2 < (*((_QWORD *)a1 + 2) - v10) >> 5)
        {
          v11 = v10 + 32 * a2;
          v12 = (unint64_t **)(a3 + 8);
          if (v11 != a3 + 8)
          {
            switch(*(_BYTE *)(a3 + 20))
            {
              case 2:
                v13 = *v12;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                {
                  v16 = *v12;
                  if (!*v12)
                    goto LABEL_53;
                  if (*((char *)v16 + 31) < 0)
                    operator delete((void *)v16[1]);
                  v17 = v16;
                  v18 = 0x1012C404EF22A49;
                  goto LABEL_52;
                }
                break;
              case 3:
                v27 = *v12;
                do
                {
                  v28 = __ldaxr(v27);
                  v29 = v28 - 1;
                }
                while (__stlxr(v29, v27));
                if (!v29)
                {
                  v30 = *v12;
                  if (!*v12)
                    goto LABEL_53;
                  v31 = (void *)v30[1];
                  if (v31)
                  {
                    v30[2] = (unint64_t)v31;
                    operator delete(v31);
                  }
                  v17 = v30;
                  v18 = 0x1080C409938AC02;
                  goto LABEL_52;
                }
                break;
              case 4:
                v19 = *v12;
                do
                {
                  v20 = __ldaxr(v19);
                  v21 = v20 - 1;
                }
                while (__stlxr(v21, v19));
                if (!v21)
                {
                  v22 = *v12;
                  if (!*v12)
                    goto LABEL_53;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v22 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  goto LABEL_45;
                }
                break;
              case 5:
                v32 = *v12;
                do
                {
                  v33 = __ldaxr(v32);
                  v34 = v33 - 1;
                }
                while (__stlxr(v34, v32));
                if (!v34)
                {
                  v22 = *v12;
                  if (!*v12)
                    goto LABEL_53;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v22 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_45:
                  v17 = v22;
                  v18 = 0x1020C405E66F15BLL;
                  goto LABEL_52;
                }
                break;
              case 8:
                v35 = *v12;
                do
                {
                  v36 = __ldaxr(v35);
                  v37 = v36 - 1;
                }
                while (__stlxr(v37, v35));
                if (!v37)
                {
                  v38 = *v12;
                  if (!*v12)
                    goto LABEL_53;
                  boost::detail::shared_count::~shared_count((unsigned int **)v38 + 2);
                  v17 = v38;
                  v26 = -235920773;
                  goto LABEL_51;
                }
                break;
              case 9:
                v23 = *v12;
                do
                {
                  v24 = __ldaxr(v23);
                  v25 = v24 - 1;
                }
                while (__stlxr(v25, v23));
                if (!v25)
                {
                  if (*v12)
                  {
                    v17 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
                    v26 = 2071181815;
LABEL_51:
                    v18 = v26 | 0x1030C4000000000;
LABEL_52:
                    MEMORY[0x219A19A08](v17, v18);
                  }
LABEL_53:
                  *v12 = 0;
                }
                break;
              default:
                break;
            }
            v39 = *(unint64_t **)v11;
            *(_QWORD *)(a3 + 13) = *(_QWORD *)(v11 + 5);
            *v12 = v39;
            LODWORD(v39) = *(unsigned __int8 *)(v11 + 12);
            *(_BYTE *)(a3 + 20) = (_BYTE)v39;
            v40 = v39 > 9;
            v41 = (1 << (char)v39) & 0x33C;
            if (!v40 && v41 != 0)
            {
              v43 = *v12;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 + 1, v43));
            }
          }
          v45 = v11 + 16;
          v46 = (unint64_t **)(a4 + 8);
          if (v45 != a4 + 8)
          {
            switch(*(_BYTE *)(a4 + 20))
            {
              case 2:
                v47 = *v46;
                do
                {
                  v48 = __ldaxr(v47);
                  v49 = v48 - 1;
                }
                while (__stlxr(v49, v47));
                if (!v49)
                {
                  v50 = *v46;
                  if (!*v46)
                    goto LABEL_99;
                  if (*((char *)v50 + 31) < 0)
                    operator delete((void *)v50[1]);
                  v51 = v50;
                  v52 = 0x1012C404EF22A49;
                  goto LABEL_98;
                }
                break;
              case 3:
                v61 = *v46;
                do
                {
                  v62 = __ldaxr(v61);
                  v63 = v62 - 1;
                }
                while (__stlxr(v63, v61));
                if (!v63)
                {
                  v64 = *v46;
                  if (!*v46)
                    goto LABEL_99;
                  v65 = (void *)v64[1];
                  if (v65)
                  {
                    v64[2] = (unint64_t)v65;
                    operator delete(v65);
                  }
                  v51 = v64;
                  v52 = 0x1080C409938AC02;
                  goto LABEL_98;
                }
                break;
              case 4:
                v53 = *v46;
                do
                {
                  v54 = __ldaxr(v53);
                  v55 = v54 - 1;
                }
                while (__stlxr(v55, v53));
                if (!v55)
                {
                  v56 = *v46;
                  if (!*v46)
                    goto LABEL_99;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v56 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  goto LABEL_91;
                }
                break;
              case 5:
                v66 = *v46;
                do
                {
                  v67 = __ldaxr(v66);
                  v68 = v67 - 1;
                }
                while (__stlxr(v68, v66));
                if (!v68)
                {
                  v56 = *v46;
                  if (!*v46)
                    goto LABEL_99;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v56 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_91:
                  v51 = v56;
                  v52 = 0x1020C405E66F15BLL;
                  goto LABEL_98;
                }
                break;
              case 8:
                v69 = *v46;
                do
                {
                  v70 = __ldaxr(v69);
                  v71 = v70 - 1;
                }
                while (__stlxr(v71, v69));
                if (!v71)
                {
                  v72 = *v46;
                  if (!*v46)
                    goto LABEL_99;
                  boost::detail::shared_count::~shared_count((unsigned int **)v72 + 2);
                  v51 = v72;
                  v60 = -235920773;
                  goto LABEL_97;
                }
                break;
              case 9:
                v57 = *v46;
                do
                {
                  v58 = __ldaxr(v57);
                  v59 = v58 - 1;
                }
                while (__stlxr(v59, v57));
                if (!v59)
                {
                  if (*v46)
                  {
                    v51 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v46);
                    v60 = 2071181815;
LABEL_97:
                    v52 = v60 | 0x1030C4000000000;
LABEL_98:
                    MEMORY[0x219A19A08](v51, v52);
                  }
LABEL_99:
                  *v46 = 0;
                }
                break;
              default:
                break;
            }
            v73 = *(unint64_t **)v45;
            *(_QWORD *)(a4 + 13) = *(_QWORD *)(v45 + 5);
            *v46 = v73;
            LODWORD(v73) = *(unsigned __int8 *)(v45 + 12);
            *(_BYTE *)(a4 + 20) = (_BYTE)v73;
            switch((int)v73)
            {
              case 2:
                v74 = *v46;
                do
                  v75 = __ldaxr(v74);
                while (__stlxr(v75 + 1, v74));
                break;
              case 3:
                v80 = *v46;
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 + 1, v80));
                break;
              case 4:
                v76 = *v46;
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 + 1, v76));
                break;
              case 5:
                v82 = *v46;
                do
                  v83 = __ldaxr(v82);
                while (__stlxr(v83 + 1, v82));
                break;
              case 8:
                v84 = *v46;
                do
                  v85 = __ldaxr(v84);
                while (__stlxr(v85 + 1, v84));
                break;
              case 9:
                v78 = *v46;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 + 1, v78));
                break;
              default:
                return;
            }
          }
          return;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "Index out of range.");
        set_error(a5, &__p);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "\"value dest flexible_type\" is null.");
        set_error(a5, &__p);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "\"key dest flexible_type\" is null.");
      set_error(a5, &__p);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"flex dict\" is null.");
    set_error(a5, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217EB2F80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB2B64);
}

void sub_217EB2FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_flex_enum_list_create(turi *a1)
{
  _QWORD *result;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  result = (_QWORD *)operator new();
  result[2] = 0;
  result[3] = 0;
  *result = &capi_struct_type_info_tc_flex_enum_list_inst;
  result[1] = 0;
  return result;
}

void sub_217EB305C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB304CLL);
}

void sub_217EB3088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_flex_enum_list_create_with_capacity(turi *a1)
{
  uint64_t v2;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  std::vector<turi::flex_type_enum>::reserve((unint64_t *)(v2 + 8), (size_t)a1);
  return v2;
}

void sub_217EB3118(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB3100);
}

void sub_217EB3148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::vector<turi::flex_type_enum>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

uint64_t tc_flex_enum_list_add_element(turi *a1, char a2, uint64_t *a3)
{
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  void *v14;
  char *v15;
  _BYTE *v16;
  char v17;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v6 = *((_QWORD *)a1 + 1);
    v7 = (_BYTE *)*((_QWORD *)a1 + 2);
    v8 = *((_QWORD *)a1 + 3);
    v9 = &v7[-v6];
    if ((unint64_t)v7 >= v8)
    {
      v11 = (unint64_t)(v9 + 1);
      if ((uint64_t)(v9 + 1) < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v12 = v8 - v6;
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
        v13 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
        v14 = operator new(v13);
      else
        v14 = 0;
      v15 = (char *)v14 + v13;
      v9[(_QWORD)v14] = a2;
      v10 = (uint64_t)&v9[(_QWORD)v14 + 1];
      if (v7 == (_BYTE *)v6)
      {
        v14 = &v9[(_QWORD)v14];
      }
      else
      {
        v16 = &v7[~v6];
        do
        {
          v17 = *--v7;
          (v16--)[(_QWORD)v14] = v17;
        }
        while (v7 != (_BYTE *)v6);
      }
      *((_QWORD *)a1 + 1) = v14;
      *((_QWORD *)a1 + 2) = v10;
      *((_QWORD *)a1 + 3) = v15;
      if (v6)
        operator delete((void *)v6);
    }
    else
    {
      *v7 = a2;
      v10 = (uint64_t)(v7 + 1);
    }
    *((_QWORD *)a1 + 2) = v10;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "tc_flex_enum_list instance null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return -1;
  }
  return (uint64_t)v9;
}

void sub_217EB3358(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB3298);
}

void sub_217EB33A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_flex_enum_list_extract_element(turi *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v6 = *((_QWORD *)a1 + 1);
    if (*((_QWORD *)a1 + 2) - v6 > a2)
      return *(char *)(v6 + a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "tc_flex_enum_list index out of bounds.");
    set_error(a3, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "tc_flex_enum_list instance null.");
    set_error(a3, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 7;
}

void sub_217EB3474(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB345CLL);
}

void sub_217EB34C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_flex_image_create_from_path(turi *__s, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *__p[2];
  char v44;
  void *v45;
  unsigned int *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(__s);
  std::string::basic_string[abi:ne180100]<0>(&v45, (char *)__s);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  turi::image_util::load_image((uint64_t)&v45, (uint64_t *)__p, &v52);
  if (v44 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v47) < 0)
    operator delete(v45);
  v4 = v52;
  v5 = operator new();
  *(_QWORD *)v5 = &capi_struct_type_info_tc_flex_image_inst;
  v7 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
    v8 = (unsigned int *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_OWORD *)(v4 + 24);
  v11 = *(_OWORD *)(v4 + 56);
  v48 = *(_OWORD *)(v4 + 40);
  v49 = v11;
  v47 = v10;
  v45 = 0;
  v46 = 0;
  *(_QWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 16) = v6;
  v50 = 0;
  v51 = 0;
  boost::detail::shared_count::~shared_count(&v51);
  v12 = v48;
  *(_OWORD *)(v5 + 24) = v47;
  *(_OWORD *)(v5 + 40) = v12;
  *(_OWORD *)(v5 + 56) = v49;
  boost::detail::shared_count::~shared_count(&v46);
  switch(v53)
  {
    case 2:
      v13 = (unint64_t *)v52;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v52;
        if (v52)
        {
          if (*(char *)(v52 + 31) < 0)
            operator delete(*(void **)(v52 + 8));
          v17 = v16;
          v18 = 0x1012C404EF22A49;
          goto LABEL_51;
        }
      }
      break;
    case 3:
      v30 = (unint64_t *)v52;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = v52;
        if (v52)
        {
          v34 = *(void **)(v52 + 8);
          if (v34)
          {
            *(_QWORD *)(v52 + 16) = v34;
            operator delete(v34);
          }
          v17 = v33;
          v18 = 0x1080C409938AC02;
          goto LABEL_51;
        }
      }
      break;
    case 4:
      v19 = (unint64_t *)v52;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v52;
        if (v52)
        {
          v45 = (void *)(v52 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          goto LABEL_44;
        }
      }
      break;
    case 5:
      v35 = (unint64_t *)v52;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v22 = v52;
        if (v52)
        {
          v45 = (void *)(v52 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
LABEL_44:
          v17 = v22;
          v18 = 0x1020C405E66F15BLL;
          goto LABEL_51;
        }
      }
      break;
    case 8:
      v38 = (unint64_t *)v52;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v41 = v52;
        if (v52)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v52 + 16));
          v17 = v41;
          v29 = -235920773;
          goto LABEL_50;
        }
      }
      break;
    case 9:
      v23 = (unint64_t *)v52;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = v52;
        if (v52)
        {
          v27 = *(void **)(v52 + 48);
          if (v27)
          {
            *(_QWORD *)(v52 + 56) = v27;
            operator delete(v27);
          }
          v28 = *(void **)(v26 + 24);
          if (v28)
          {
            *(_QWORD *)(v26 + 32) = v28;
            operator delete(v28);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v26 + 8);
          v17 = v26;
          v29 = 2071181815;
LABEL_50:
          v18 = v29 | 0x1030C4000000000;
LABEL_51:
          MEMORY[0x219A19A08](v17, v18);
        }
      }
      break;
    default:
      return v5;
  }
  return v5;
}

void sub_217EB3804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EB37D0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_flex_image_create_from_data(turi *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, char *__s)
{
  void **v21;
  int v23;
  int v24;
  int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  std::logic_error *exception;
  void *__p[2];
  char v33;
  _OWORD v34[4];
  uint64_t v35;
  unsigned int *v36;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  if (v33 < 0)
  {
    if (__p[1] != (void *)3)
      goto LABEL_62;
    if ((*(_WORD *)__p[0] != 28778 || *((_BYTE *)__p[0] + 2) != 103)
      && (*(_WORD *)__p[0] != 20554 || *((_BYTE *)__p[0] + 2) != 71))
    {
      if ((*(_WORD *)__p[0] != 28272 || *((_BYTE *)__p[0] + 2) != 103)
        && (*(_WORD *)__p[0] != 20048 || *((_BYTE *)__p[0] + 2) != 71))
      {
        v21 = (void **)__p[0];
        if (*(_WORD *)__p[0] != 16722 || *((_BYTE *)__p[0] + 2) != 87)
        {
          if (v33 < 0)
            goto LABEL_51;
          if (v33 != 3)
            goto LABEL_62;
LABEL_50:
          v21 = __p;
LABEL_51:
          v23 = *(unsigned __int16 *)v21;
          v24 = *((unsigned __int8 *)v21 + 2);
          if (v23 != 24946 || v24 != 119)
          {
LABEL_62:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "format string must be one of \"jpg\", \"png\", or \"raw\".");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
          }
        }
LABEL_56:
        v26 = 2;
        goto LABEL_59;
      }
      goto LABEL_58;
    }
LABEL_57:
    v26 = 0;
    goto LABEL_59;
  }
  if (v33 != 3)
    goto LABEL_62;
  if (LOWORD(__p[0]) == 28778 && BYTE2(__p[0]) == 103)
    goto LABEL_57;
  if (LOWORD(__p[0]) == 20554 && BYTE2(__p[0]) == 71)
    goto LABEL_57;
  if ((LOWORD(__p[0]) != 28272 || BYTE2(__p[0]) != 103) && (LOWORD(__p[0]) != 20048 || BYTE2(__p[0]) != 71))
  {
    if (LOWORD(__p[0]) != 16722 || BYTE2(__p[0]) != 87)
      goto LABEL_50;
    goto LABEL_56;
  }
LABEL_58:
  v26 = 1;
LABEL_59:
  v27 = operator new();
  *(_QWORD *)v27 = &capi_struct_type_info_tc_flex_image_inst;
  turi::image_type::image_type((turi::image_type *)v34, (const char *)a1, a2, a3, a4, a5, 0, v26);
  v28 = v34[0];
  v34[0] = 0uLL;
  *(_OWORD *)(v27 + 8) = v28;
  v35 = 0;
  v36 = 0;
  boost::detail::shared_count::~shared_count(&v36);
  v29 = v34[2];
  *(_OWORD *)(v27 + 24) = v34[1];
  *(_OWORD *)(v27 + 40) = v29;
  *(_OWORD *)(v27 + 56) = v34[3];
  boost::detail::shared_count::~shared_count((unsigned int **)v34 + 1);
  if (v33 < 0)
    operator delete(__p[0]);
  return v27;
}

void sub_217EB3C50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB3BE8);
}

void sub_217EB3CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_flex_image_width(turi *a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
    return *((_QWORD *)a1 + 4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"image\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB3D44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB3D30);
}

void sub_217EB3D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_flex_image_height(turi *a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
    return *((_QWORD *)a1 + 3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"image\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB3E20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB3E0CLL);
}

void sub_217EB3E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_flex_image_num_channels(turi *a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
    return *((_QWORD *)a1 + 5);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"image\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB3EFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB3EE8);
}

void sub_217EB3F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_flex_image_data_size(turi *a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
    return *((_QWORD *)a1 + 6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"image\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB3FD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB3FC4);
}

void sub_217EB4024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_flex_image_data(turi *a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
    return *((_QWORD *)a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"image\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB40B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB40A0);
}

void sub_217EB4100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

char *tc_flex_image_format(turi *a1, uint64_t *a2)
{
  unint64_t v4;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v4 = *((_QWORD *)a1 + 8);
    if (v4 >= 4)
      tc_flex_image_format::$_0::operator()();
    return off_24D919ED0[v4];
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"image\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
}

void sub_217EB41AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB4190);
}

void sub_217EB41FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_flex_list_create(turi *a1)
{
  _QWORD *result;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  result = (_QWORD *)operator new();
  result[2] = 0;
  result[3] = 0;
  *result = &capi_struct_type_info_tc_flex_list_inst;
  result[1] = 0;
  return result;
}

void sub_217EB4274(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB4264);
}

void sub_217EB42A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_flex_list_create_with_capacity(turi *a1)
{
  _QWORD *v2;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v2 = (_QWORD *)operator new();
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  *v2 = &capi_struct_type_info_tc_flex_list_inst;
  std::vector<turi::flexible_type>::reserve(v2 + 1, (unint64_t)a1);
  return v2;
}

void sub_217EB4338(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB4320);
}

void sub_217EB4368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void **std::vector<turi::flexible_type>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<turi::flexible_type>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<turi::flexible_type>::~__split_buffer(v7);
  }
  return result;
}

void sub_217EB4400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::flexible_type>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t tc_flex_list_add_element(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a2)
    {
      v6 = a1[1];
      v7 = a1[2];
      v8 = (char *)(a2 + 8);
      if (v7 >= a1[3])
      {
        v13 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(a1 + 1, v8);
      }
      else
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        *(_BYTE *)(v7 + 12) = 0;
        if ((char *)v7 != v8)
        {
          v9 = *(_QWORD *)v8;
          *(_QWORD *)(v7 + 5) = *(_QWORD *)(a2 + 13);
          *(_QWORD *)v7 = v9;
          v10 = *(unsigned __int8 *)(a2 + 20);
          *(_BYTE *)(v7 + 12) = v10;
          if (v10 <= 9 && ((1 << v10) & 0x33C) != 0)
          {
            v11 = *(unint64_t **)v7;
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 + 1, v11));
          }
        }
        v13 = v7 + 16;
      }
      result = (uint64_t)(v7 - v6) >> 4;
      a1[2] = v13;
      return result;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "tc_flexible_type instance null.");
    set_error(a3, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "tc_flex_list instance null.");
    set_error(a3, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return -1;
}

void sub_217EB454C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB4518);
}

void sub_217EB45A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_flex_list_extract_element(turi *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t empty;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t **v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "tc_flex_list instance null.");
    set_error(a3, &__p);
    goto LABEL_17;
  }
  empty = tc_ft_create_empty((turi *)a3);
  if (*a3)
    return 0;
  v7 = *((_QWORD *)a1 + 1);
  if (a2 >= (*((_QWORD *)a1 + 2) - v7) >> 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "tc_flex_list index out of bounds.");
    set_error(a3, &__p);
LABEL_17:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  v8 = empty;
  v9 = v7 + 16 * a2;
  v10 = (unint64_t **)(empty + 8);
  if (v9 != empty + 8)
  {
    switch(*(_BYTE *)(empty + 20))
    {
      case 2:
        v11 = *v10;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          v14 = *v10;
          if (!*v10)
            goto LABEL_51;
          if (*((char *)v14 + 31) < 0)
            operator delete((void *)v14[1]);
          v15 = v14;
          v16 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
        break;
      case 3:
        v26 = *v10;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v29 = *v10;
          if (!*v10)
            goto LABEL_51;
          v30 = (void *)v29[1];
          if (v30)
          {
            v29[2] = (unint64_t)v30;
            operator delete(v30);
          }
          v15 = v29;
          v16 = 0x1080C409938AC02;
          goto LABEL_50;
        }
        break;
      case 4:
        v18 = *v10;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = *v10;
          if (!*v10)
            goto LABEL_51;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v21 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_43;
        }
        break;
      case 5:
        v31 = *v10;
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v21 = *v10;
          if (!*v10)
            goto LABEL_51;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v21 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_43:
          v15 = v21;
          v16 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
        break;
      case 8:
        v34 = *v10;
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          v37 = *v10;
          if (!*v10)
            goto LABEL_51;
          boost::detail::shared_count::~shared_count((unsigned int **)v37 + 2);
          v15 = v37;
          v25 = -235920773;
          goto LABEL_49;
        }
        break;
      case 9:
        v22 = *v10;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          if (*v10)
          {
            v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v10);
            v25 = 2071181815;
LABEL_49:
            v16 = v25 | 0x1030C4000000000;
LABEL_50:
            MEMORY[0x219A19A08](v15, v16);
          }
LABEL_51:
          *v10 = 0;
        }
        break;
      default:
        break;
    }
    v38 = *(unint64_t **)v9;
    *(unint64_t **)((char *)v10 + 5) = *(unint64_t **)(v9 + 5);
    *v10 = v38;
    LODWORD(v38) = *(unsigned __int8 *)(v9 + 12);
    *(_BYTE *)(v8 + 20) = (_BYTE)v38;
    switch((int)v38)
    {
      case 2:
        v39 = *v10;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 + 1, v39));
        break;
      case 3:
        v45 = *v10;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 + 1, v45));
        break;
      case 4:
        v41 = *v10;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 + 1, v41));
        break;
      case 5:
        v47 = *v10;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 + 1, v47));
        break;
      case 8:
        v49 = *v10;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 + 1, v49));
        break;
      case 9:
        v43 = *v10;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 + 1, v43));
        break;
      default:
        return v8;
    }
  }
  return v8;
}

void sub_217EB4904(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB46E4);
}

void sub_217EB495C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_create_empty(turi *a1)
{
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  return new_tc_flexible_type<turi::flexible_type &>((uint64_t)&turi::FLEX_UNDEFINED);
}

void sub_217EB49B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB49A8);
}

void sub_217EB49E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t new_tc_flexible_type<turi::flexible_type &>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t **v4;
  unint64_t *v5;
  int v6;
  unsigned int v7;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  void *v37;
  void *v38;
  void **v40;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)(v2 + 8) = 0;
  v4 = (unint64_t **)(v2 + 8);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &capi_struct_type_info_tc_flexible_type_inst;
  v5 = *(unint64_t **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned __int8 *)(a1 + 12);
  if (v7 <= 9 && ((1 << v7) & 0x33C) != 0)
  {
    do
      v9 = __ldaxr(v5);
    while (__stlxr(v9 + 1, v5));
  }
  switch(*(_BYTE *)(v2 + 20))
  {
    case 2:
      v10 = *v4;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *v4;
        if (*v4)
        {
          if (*((char *)v13 + 31) < 0)
            operator delete((void *)v13[1]);
          v14 = v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_47;
        }
      }
      break;
    case 3:
      v16 = *v4;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = *v4;
        if (*v4)
        {
          v20 = (void *)v19[1];
          if (v20)
          {
            v19[2] = (unint64_t)v20;
            operator delete(v20);
          }
          v14 = v19;
          v15 = 0x1080C409938AC02;
          goto LABEL_47;
        }
      }
      break;
    case 4:
      v21 = *v4;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = *v4;
        if (*v4)
        {
          v40 = (void **)(v24 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v40);
          goto LABEL_31;
        }
      }
      break;
    case 5:
      v25 = *v4;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v24 = *v4;
        if (*v4)
        {
          v40 = (void **)(v24 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v40);
LABEL_31:
          v14 = v24;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_47;
        }
      }
      break;
    case 8:
      v28 = *v4;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = *v4;
        if (*v4)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v31 + 2);
          v14 = v31;
          v32 = -235920773;
          goto LABEL_46;
        }
      }
      break;
    case 9:
      v33 = *v4;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = *v4;
        if (*v4)
        {
          v37 = (void *)v36[6];
          if (v37)
          {
            v36[7] = (unint64_t)v37;
            operator delete(v37);
          }
          v38 = (void *)v36[3];
          if (v38)
          {
            v36[4] = (unint64_t)v38;
            operator delete(v38);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v36 + 1));
          v14 = v36;
          v32 = 2071181815;
LABEL_46:
          v15 = v32 | 0x1030C4000000000;
LABEL_47:
          MEMORY[0x219A19A08](v14, v15);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(v3 + 8) = v5;
  *(_DWORD *)(v3 + 16) = v6;
  *(_BYTE *)(v3 + 20) = v7;
  return v3;
}

uint64_t tc_ft_create_copy(turi *a1)
{
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  return new_tc_flexible_type<turi::flexible_type const&>((uint64_t)a1 + 8);
}

void sub_217EB4CBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB4CACLL);
}

void sub_217EB4CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t new_tc_flexible_type<turi::flexible_type const&>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t **v4;
  unint64_t *v5;
  int v6;
  unsigned int v7;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  void *v37;
  void *v38;
  void **v40;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)(v2 + 8) = 0;
  v4 = (unint64_t **)(v2 + 8);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &capi_struct_type_info_tc_flexible_type_inst;
  v5 = *(unint64_t **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned __int8 *)(a1 + 12);
  if (v7 <= 9 && ((1 << v7) & 0x33C) != 0)
  {
    do
      v9 = __ldaxr(v5);
    while (__stlxr(v9 + 1, v5));
  }
  switch(*(_BYTE *)(v2 + 20))
  {
    case 2:
      v10 = *v4;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *v4;
        if (*v4)
        {
          if (*((char *)v13 + 31) < 0)
            operator delete((void *)v13[1]);
          v14 = v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_47;
        }
      }
      break;
    case 3:
      v16 = *v4;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = *v4;
        if (*v4)
        {
          v20 = (void *)v19[1];
          if (v20)
          {
            v19[2] = (unint64_t)v20;
            operator delete(v20);
          }
          v14 = v19;
          v15 = 0x1080C409938AC02;
          goto LABEL_47;
        }
      }
      break;
    case 4:
      v21 = *v4;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = *v4;
        if (*v4)
        {
          v40 = (void **)(v24 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v40);
          goto LABEL_31;
        }
      }
      break;
    case 5:
      v25 = *v4;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v24 = *v4;
        if (*v4)
        {
          v40 = (void **)(v24 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v40);
LABEL_31:
          v14 = v24;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_47;
        }
      }
      break;
    case 8:
      v28 = *v4;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = *v4;
        if (*v4)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v31 + 2);
          v14 = v31;
          v32 = -235920773;
          goto LABEL_46;
        }
      }
      break;
    case 9:
      v33 = *v4;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = *v4;
        if (*v4)
        {
          v37 = (void *)v36[6];
          if (v37)
          {
            v36[7] = (unint64_t)v37;
            operator delete(v37);
          }
          v38 = (void *)v36[3];
          if (v38)
          {
            v36[4] = (unint64_t)v38;
            operator delete(v38);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v36 + 1));
          v14 = v36;
          v32 = 2071181815;
LABEL_46:
          v15 = v32 | 0x1030C4000000000;
LABEL_47:
          MEMORY[0x219A19A08](v14, v15);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(v3 + 8) = v5;
  *(_DWORD *)(v3 + 16) = v6;
  *(_BYTE *)(v3 + 20) = v7;
  return v3;
}

uint64_t tc_ft_create_from_cstring(turi *a1)
{
  uint64_t v2;
  _BYTE v4[13];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &capi_struct_type_info_tc_flexible_type_inst;
  turi::flexible_type::flexible_type((turi::flexible_type *)v4, (char *)a1);
  *(_QWORD *)(v2 + 13) = *(_QWORD *)&v4[5];
  *(_QWORD *)(v2 + 8) = *(_QWORD *)v4;
  *(_BYTE *)(v2 + 20) = v4[12];
  return v2;
}

void sub_217EB5040(_Unwind_Exception *exception_object, int a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)va);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)va);
    __cxa_end_catch();
    JUMPOUT(0x217EB500CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_ft_create_from_string(turi *__src, size_t __len)
{
  uint64_t v4;
  void *__p[2];
  char v7;
  _BYTE v8[13];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(__src);
  std::string::basic_string[abi:ne180100](__p, __src, __len);
  v4 = operator new();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = &capi_struct_type_info_tc_flexible_type_inst;
  turi::flexible_type::flexible_type<std::string>((uint64_t)v8, (__int128 *)__p);
  *(_QWORD *)(v4 + 13) = *(_QWORD *)&v8[5];
  *(_QWORD *)(v4 + 8) = *(_QWORD *)v8;
  *(_BYTE *)(v4 + 20) = v8[12];
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_217EB5194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EB5160);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_ft_create_from_double(turi *a1, double a2)
{
  uint64_t result;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  result = operator new();
  *(_QWORD *)(result + 16) = 0x100000000;
  *(_QWORD *)result = &capi_struct_type_info_tc_flexible_type_inst;
  *(double *)(result + 8) = a2;
  return result;
}

void sub_217EB5290(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB527CLL);
}

void sub_217EB52BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_ft_create_from_int64(turi *a1)
{
  _QWORD *result;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  result = (_QWORD *)operator new();
  result[1] = a1;
  result[2] = 0;
  *result = &capi_struct_type_info_tc_flexible_type_inst;
  return result;
}

void sub_217EB5338(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB5328);
}

void sub_217EB5364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_create_from_double_array(turi *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t **v5;
  _QWORD *v6;
  unint64_t *v7;
  void **v8;
  _QWORD *v9;
  const void *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  void *v44;
  void *__p[2];
  uint64_t v47;
  void **v48;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  __p[0] = 0;
  __p[1] = 0;
  v47 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, a1, (uint64_t)a1 + 8 * a2, a2);
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t **)(v4 + 8);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = &capi_struct_type_info_tc_flexible_type_inst;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  *v6 = 0;
  v6[1] = 0;
  v8 = (void **)(v6 + 1);
  v6[2] = 0;
  v6[3] = 0;
  *v6 = 1;
  if (*v6 == 1)
  {
    v9 = v6;
  }
  else
  {
    v9 = (_QWORD *)operator new();
    v10 = (const void *)v7[1];
    *v9 = *v7;
    v9[2] = 0;
    v9[3] = 0;
    v9[1] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v9 + 1, v10, v7[2], (uint64_t)(v7[2] - (_QWORD)v10) >> 3);
    *v9 = 1;
    do
    {
      v11 = __ldaxr(v7);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v7));
    if (!v12)
    {
      v13 = *v8;
      if (*v8)
      {
        v7[2] = (unint64_t)v13;
        operator delete(v13);
      }
      MEMORY[0x219A19A08](v7, 0x1080C409938AC02);
    }
  }
  v14 = (void *)v9[1];
  if (v14)
  {
    v9[2] = v14;
    operator delete(v14);
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = 0;
  }
  *(_OWORD *)(v9 + 1) = *(_OWORD *)__p;
  v9[3] = v47;
  __p[1] = 0;
  v47 = 0;
  __p[0] = 0;
  switch(*(_BYTE *)(v4 + 20))
  {
    case 2:
      v15 = *v5;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (v17)
        goto LABEL_56;
      v18 = *v5;
      if (!*v5)
        goto LABEL_56;
      if (*((char *)v18 + 31) < 0)
        operator delete((void *)v18[1]);
      v19 = v18;
      v20 = 0x1012C404EF22A49;
      goto LABEL_55;
    case 3:
      v32 = *v5;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_56;
      v35 = *v5;
      if (!*v5)
        goto LABEL_56;
      v36 = (void *)v35[1];
      if (v36)
      {
        v35[2] = (unint64_t)v36;
        operator delete(v36);
      }
      v19 = v35;
      v20 = 0x1080C409938AC02;
      goto LABEL_55;
    case 4:
      v21 = *v5;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (v23)
        goto LABEL_56;
      v24 = *v5;
      if (!*v5)
        goto LABEL_56;
      v48 = (void **)(v24 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v48);
      goto LABEL_48;
    case 5:
      v37 = *v5;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_56;
      v24 = *v5;
      if (!*v5)
        goto LABEL_56;
      v48 = (void **)(v24 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v48);
LABEL_48:
      v19 = v24;
      v20 = 0x1020C405E66F15BLL;
      goto LABEL_55;
    case 8:
      v40 = *v5;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_56;
      v43 = *v5;
      if (!*v5)
        goto LABEL_56;
      boost::detail::shared_count::~shared_count((unsigned int **)v43 + 2);
      v19 = v43;
      v31 = -235920773;
      goto LABEL_54;
    case 9:
      v25 = *v5;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_56;
      v28 = *v5;
      if (!*v5)
        goto LABEL_56;
      v29 = (void *)v28[6];
      if (v29)
      {
        v28[7] = (unint64_t)v29;
        operator delete(v29);
      }
      v30 = (void *)v28[3];
      if (v30)
      {
        v28[4] = (unint64_t)v30;
        operator delete(v30);
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
      v19 = v28;
      v31 = 2071181815;
LABEL_54:
      v20 = v31 | 0x1030C4000000000;
LABEL_55:
      MEMORY[0x219A19A08](v19, v20);
LABEL_56:
      v44 = __p[0];
      *(_QWORD *)(v4 + 8) = v9;
      *(_DWORD *)(v4 + 16) = 0;
      *(_BYTE *)(v4 + 20) = 3;
      if (v44)
      {
        __p[1] = v44;
        operator delete(v44);
      }
      return v4;
    default:
      *(_QWORD *)(v4 + 8) = v9;
      *(_DWORD *)(v4 + 16) = 0;
      *(_BYTE *)(v4 + 20) = 3;
      return v4;
  }
}

void sub_217EB572C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB570CLL);
}

void sub_217EB57EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_create_from_flex_list(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unint64_t **)(v4 + 8);
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_flexible_type_inst;
    v6 = operator new();
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)v6 = 1;
    v7 = (_QWORD *)v6;
    if (*(_QWORD *)v6 != 1)
    {
      v8 = (_QWORD *)operator new();
      v9 = *(uint64_t **)(v6 + 8);
      *v8 = *(_QWORD *)v6;
      v8[2] = 0;
      v8[3] = 0;
      v8[1] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v8 + 1, v9, *(uint64_t **)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - (_QWORD)v9) >> 4);
      *v8 = 1;
      do
      {
        v10 = __ldaxr((unint64_t *)v6);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unint64_t *)v6));
      v7 = v8;
      if (!v11)
      {
        __p.__r_.__value_.__r.__words[0] = v6 + 8;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        MEMORY[0x219A19A08](v6, 0x1020C405E66F15BLL);
        v7 = v8;
      }
    }
    if (v7 + 1 != a1 + 1)
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(v7 + 1), a1[1], a1[2], ((char *)a1[2] - (char *)a1[1]) >> 4);
    switch(*(_BYTE *)(v4 + 20))
    {
      case 2:
        v12 = *v5;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = *v5;
          if (*v5)
          {
            if (*((char *)v15 + 31) < 0)
              operator delete((void *)v15[1]);
            v16 = v15;
            v17 = 0x1012C404EF22A49;
            goto LABEL_55;
          }
        }
        break;
      case 3:
        v29 = *v5;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = *v5;
          if (*v5)
          {
            v33 = (void *)v32[1];
            if (v33)
            {
              v32[2] = (unint64_t)v33;
              operator delete(v33);
            }
            v16 = v32;
            v17 = 0x1080C409938AC02;
            goto LABEL_55;
          }
        }
        break;
      case 4:
        v18 = *v5;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = *v5;
          if (*v5)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v21 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_48;
          }
        }
        break;
      case 5:
        v34 = *v5;
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          v21 = *v5;
          if (*v5)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v21 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_48:
            v16 = v21;
            v17 = 0x1020C405E66F15BLL;
            goto LABEL_55;
          }
        }
        break;
      case 8:
        v37 = *v5;
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          v40 = *v5;
          if (*v5)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v40 + 2);
            v16 = v40;
            v28 = -235920773;
            goto LABEL_54;
          }
        }
        break;
      case 9:
        v22 = *v5;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *v5;
          if (*v5)
          {
            v26 = (void *)v25[6];
            if (v26)
            {
              v25[7] = (unint64_t)v26;
              operator delete(v26);
            }
            v27 = (void *)v25[3];
            if (v27)
            {
              v25[4] = (unint64_t)v27;
              operator delete(v27);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v25 + 1));
            v16 = v25;
            v28 = 2071181815;
LABEL_54:
            v17 = v28 | 0x1030C4000000000;
LABEL_55:
            MEMORY[0x219A19A08](v16, v17);
          }
        }
        break;
      default:
        break;
    }
    *(_QWORD *)(v4 + 8) = v7;
    *(_DWORD *)(v4 + 16) = 0;
    *(_BYTE *)(v4 + 20) = 4;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flex list\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EB5B94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unint64_t *v15;
  uint64_t v16;
  unint64_t v18;

  MEMORY[0x219A19A08](v16, 0x1020C405E66F15BLL);
  do
    v18 = __ldaxr(v15);
  while (__stlxr(v18 - 1, v15));
  if (v15 && v18 == 1)
  {
    __p = v15 + 1;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB5A00);
}

void sub_217EB5C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_ft_create_from_datetime(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  int v5;
  uint64_t v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    result = (_QWORD *)operator new();
    v5 = *(_DWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 8);
    *result = &capi_struct_type_info_tc_flexible_type_inst;
    result[1] = v6;
    result[2] = 0x600000000;
    *((_DWORD *)result + 4) = v5;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_datetime\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return result;
}

void sub_217EB5D14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB5D00);
}

void sub_217EB5D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_create_from_flex_dict(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t **v5;
  uint64_t v6;
  char **v7;
  char **v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unint64_t **)(v4 + 8);
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_flexible_type_inst;
    v6 = operator new();
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)v6 = 1;
    v7 = (char **)v6;
    if (*(_QWORD *)v6 != 1)
    {
      v8 = (char **)operator new();
      v9 = *(uint64_t **)(v6 + 8);
      *v8 = *(char **)v6;
      v8[2] = 0;
      v8[3] = 0;
      v8[1] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v8 + 1, v9, *(uint64_t **)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - (_QWORD)v9) >> 5);
      *v8 = (char *)1;
      do
      {
        v10 = __ldaxr((unint64_t *)v6);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unint64_t *)v6));
      v7 = v8;
      if (!v11)
      {
        __p.__r_.__value_.__r.__words[0] = v6 + 8;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        MEMORY[0x219A19A08](v6, 0x1020C405E66F15BLL);
        v7 = v8;
      }
    }
    if (v7 + 1 != (char **)(a1 + 1))
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v7 + 1, a1[1], a1[2], ((char *)a1[2] - (char *)a1[1]) >> 5);
    switch(*(_BYTE *)(v4 + 20))
    {
      case 2:
        v12 = *v5;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = *v5;
          if (*v5)
          {
            if (*((char *)v15 + 31) < 0)
              operator delete((void *)v15[1]);
            v16 = v15;
            v17 = 0x1012C404EF22A49;
            goto LABEL_55;
          }
        }
        break;
      case 3:
        v29 = *v5;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = *v5;
          if (*v5)
          {
            v33 = (void *)v32[1];
            if (v33)
            {
              v32[2] = (unint64_t)v33;
              operator delete(v33);
            }
            v16 = v32;
            v17 = 0x1080C409938AC02;
            goto LABEL_55;
          }
        }
        break;
      case 4:
        v18 = *v5;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = *v5;
          if (*v5)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v21 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_48;
          }
        }
        break;
      case 5:
        v34 = *v5;
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          v21 = *v5;
          if (*v5)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v21 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_48:
            v16 = v21;
            v17 = 0x1020C405E66F15BLL;
            goto LABEL_55;
          }
        }
        break;
      case 8:
        v37 = *v5;
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          v40 = *v5;
          if (*v5)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v40 + 2);
            v16 = v40;
            v28 = -235920773;
            goto LABEL_54;
          }
        }
        break;
      case 9:
        v22 = *v5;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *v5;
          if (*v5)
          {
            v26 = (void *)v25[6];
            if (v26)
            {
              v25[7] = (unint64_t)v26;
              operator delete(v26);
            }
            v27 = (void *)v25[3];
            if (v27)
            {
              v25[4] = (unint64_t)v27;
              operator delete(v27);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v25 + 1));
            v16 = v25;
            v28 = 2071181815;
LABEL_54:
            v17 = v28 | 0x1030C4000000000;
LABEL_55:
            MEMORY[0x219A19A08](v16, v17);
          }
        }
        break;
      default:
        break;
    }
    *(_QWORD *)(v4 + 8) = v7;
    *(_DWORD *)(v4 + 16) = 0;
    *(_BYTE *)(v4 + 20) = 5;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_flex_dict\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EB6108(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unint64_t *v15;
  uint64_t v16;
  unint64_t v18;

  MEMORY[0x219A19A08](v16, 0x1020C405E66F15BLL);
  do
    v18 = __ldaxr(v15);
  while (__stlxr(v18 - 1, v15));
  if (v15 && v18 == 1)
  {
    __p = v15 + 1;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB5F74);
}

void sub_217EB61C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_create_from_image(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unint64_t **)(v4 + 8);
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_flexible_type_inst;
    v6 = operator new();
    v7 = v6;
    *(_QWORD *)v6 = 0;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = 3;
    *(_QWORD *)v6 = 1;
    if (*(_QWORD *)v6 == 1)
    {
      v8 = v6;
    }
    else
    {
      v8 = operator new();
      v9 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)v8 = *(_QWORD *)v7;
      *(_QWORD *)(v8 + 8) = v9;
      v10 = *(_QWORD *)(v7 + 16);
      *(_QWORD *)(v8 + 16) = v10;
      if (v10)
      {
        v11 = (unsigned int *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(v7 + 24);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v7 + 40);
      *(_OWORD *)(v8 + 56) = *(_OWORD *)(v7 + 56);
      *(_QWORD *)v8 = 1;
      do
      {
        v13 = __ldaxr((unint64_t *)v7);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unint64_t *)v7));
      if (!v14)
      {
        boost::detail::shared_count::~shared_count((unsigned int **)(v7 + 16));
        MEMORY[0x219A19A08](v7, 0x1030C40F1F0227BLL);
      }
    }
    boost::shared_ptr<char []>::operator=((__int128 *)(v8 + 8), (uint64_t *)(a1 + 8));
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(v8 + 56) = *(_OWORD *)(a1 + 56);
    switch(*(_BYTE *)(v4 + 20))
    {
      case 2:
        v15 = *v5;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *v5;
          if (*v5)
          {
            if (*((char *)v18 + 31) < 0)
              operator delete((void *)v18[1]);
            v19 = v18;
            v20 = 0x1012C404EF22A49;
            goto LABEL_57;
          }
        }
        break;
      case 3:
        v32 = *v5;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v35 = *v5;
          if (*v5)
          {
            v36 = (void *)v35[1];
            if (v36)
            {
              v35[2] = (unint64_t)v36;
              operator delete(v36);
            }
            v19 = v35;
            v20 = 0x1080C409938AC02;
            goto LABEL_57;
          }
        }
        break;
      case 4:
        v21 = *v5;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v24 = *v5;
          if (*v5)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v24 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_50;
          }
        }
        break;
      case 5:
        v37 = *v5;
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          v24 = *v5;
          if (*v5)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v24 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_50:
            v19 = v24;
            v20 = 0x1020C405E66F15BLL;
            goto LABEL_57;
          }
        }
        break;
      case 8:
        v40 = *v5;
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          v43 = *v5;
          if (*v5)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v43 + 2);
            v19 = v43;
            v31 = -235920773;
            goto LABEL_56;
          }
        }
        break;
      case 9:
        v25 = *v5;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          v28 = *v5;
          if (*v5)
          {
            v29 = (void *)v28[6];
            if (v29)
            {
              v28[7] = (unint64_t)v29;
              operator delete(v29);
            }
            v30 = (void *)v28[3];
            if (v30)
            {
              v28[4] = (unint64_t)v30;
              operator delete(v30);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
            v19 = v28;
            v31 = 2071181815;
LABEL_56:
            v20 = v31 | 0x1030C4000000000;
LABEL_57:
            MEMORY[0x219A19A08](v19, v20);
          }
        }
        break;
      default:
        break;
    }
    *(_QWORD *)(v4 + 8) = v8;
    *(_DWORD *)(v4 + 16) = 0;
    *(_BYTE *)(v4 + 20) = 8;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_flex_image\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EB6584(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (v17)
  {
    __cxa_begin_catch(a1);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EB62C8);
  }
  tc_ft_create_from_image_cold_1((uint64_t)v15);
}

void sub_217EB6610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_create_from_ndarray(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t **v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unint64_t **)(v4 + 8);
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_flexible_type_inst;
    v6 = (unint64_t *)operator new();
    std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v6);
    *v6 = 1;
    v7 = v6;
    if (*v6 != 1)
    {
      v8 = (unint64_t *)operator new();
      *v8 = *v6;
      turi::flexible_type_impl::ndarray<double>::ndarray(v8 + 1, (uint64_t)(v6 + 1));
      *v8 = 1;
      do
      {
        v9 = __ldaxr(v6);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v6));
      v7 = v8;
      if (!v10)
      {
        v11 = (void *)v6[6];
        if (v11)
        {
          v6[7] = (unint64_t)v11;
          operator delete(v11);
        }
        v12 = (void *)v6[3];
        if (v12)
        {
          v6[4] = (unint64_t)v12;
          operator delete(v12);
        }
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v6 + 1));
        MEMORY[0x219A19A08](v6, 0x1030C407B73B9F7);
        v7 = v8;
      }
    }
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v7 + 1, (uint64_t *)(a1 + 8));
    if (v7 != (unint64_t *)a1)
    {
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v7 + 24, *(char **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v7 + 48, *(char **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
    }
    v7[9] = *(_QWORD *)(a1 + 72);
    switch(*(_BYTE *)(v4 + 20))
    {
      case 2:
        v13 = *v5;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = *v5;
          if (*v5)
          {
            if (*((char *)v16 + 31) < 0)
              operator delete((void *)v16[1]);
            v17 = v16;
            v18 = 0x1012C404EF22A49;
            goto LABEL_59;
          }
        }
        break;
      case 3:
        v30 = *v5;
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          v33 = *v5;
          if (*v5)
          {
            v34 = (void *)v33[1];
            if (v34)
            {
              v33[2] = (unint64_t)v34;
              operator delete(v34);
            }
            v17 = v33;
            v18 = 0x1080C409938AC02;
            goto LABEL_59;
          }
        }
        break;
      case 4:
        v19 = *v5;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v22 = *v5;
          if (*v5)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v22 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_52;
          }
        }
        break;
      case 5:
        v35 = *v5;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v22 = *v5;
          if (*v5)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v22 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_52:
            v17 = v22;
            v18 = 0x1020C405E66F15BLL;
            goto LABEL_59;
          }
        }
        break;
      case 8:
        v38 = *v5;
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          v41 = *v5;
          if (*v5)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v41 + 2);
            v17 = v41;
            v29 = -235920773;
            goto LABEL_58;
          }
        }
        break;
      case 9:
        v23 = *v5;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = *v5;
          if (*v5)
          {
            v27 = (void *)v26[6];
            if (v27)
            {
              v26[7] = (unint64_t)v27;
              operator delete(v27);
            }
            v28 = (void *)v26[3];
            if (v28)
            {
              v26[4] = (unint64_t)v28;
              operator delete(v28);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v26 + 1));
            v17 = v26;
            v29 = 2071181815;
LABEL_58:
            v18 = v29 | 0x1030C4000000000;
LABEL_59:
            MEMORY[0x219A19A08](v17, v18);
          }
        }
        break;
      default:
        break;
    }
    *(_QWORD *)(v4 + 8) = v7;
    *(_DWORD *)(v4 + 16) = 0;
    *(_BYTE *)(v4 + 20) = 9;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_ndarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EB69E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unint64_t *v15;
  uint64_t v16;
  unint64_t v18;
  _QWORD *v19;

  MEMORY[0x219A19A08](v16, 0x1030C407B73B9F7);
  do
    v18 = __ldaxr(v15);
  while (__stlxr(v18 - 1, v15));
  if (v15 && v18 == 1)
  {
    v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v15);
    MEMORY[0x219A19A08](v19, 0x1030C407B73B9F7);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB6854);
}

void sub_217EB6ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_ft_double(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  std::runtime_error *exception;
  std::string *v20;
  __int128 v21;
  void *__p[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::string v26;
  size_t __idx;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    switch(*(_BYTE *)(a1 + 20))
    {
      case 0:
      case 1:
      case 6:
      case 7:
        return;
      case 2:
        v8 = *(_QWORD *)(a1 + 8);
        __idx = 0;
        v9 = (char *)(v8 + 8);
        if (*(char *)(v8 + 31) < 0)
          v9 = *(char **)(v8 + 8);
        std::string::basic_string[abi:ne180100]<0>(__p, v9);
        std::stod((const std::string *)__p, &__idx);
        if (SBYTE7(v23) < 0)
          operator delete(__p[0]);
        if (*(char *)(v8 + 31) < 0)
          v10 = *(_QWORD *)(v8 + 16);
        else
          v10 = *(unsigned __int8 *)(v8 + 31);
        if (__idx != v10)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v20 = std::string::append(&v26, " cannot be interpreted as a float");
          v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          *(_QWORD *)&v23 = *((_QWORD *)&v20->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        return;
      case 3:
        v4 = *(_QWORD *)(a1 + 8);
        __p[1] = 0;
        *(_QWORD *)&v23 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v4 + 8), *(_QWORD *)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        break;
      case 4:
        v11 = *(_QWORD *)(a1 + 8);
        __p[1] = 0;
        *(_QWORD *)&v23 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v26.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
        break;
      case 5:
        v12 = *(_QWORD *)(a1 + 8);
        __p[1] = 0;
        *(_QWORD *)&v23 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v26.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
        break;
      case 8:
        v13 = *(_QWORD *)(a1 + 8);
        v14 = *(unsigned int **)(v13 + 16);
        __p[0] = *(void **)(v13 + 8);
        __p[1] = v14;
        if (v14)
        {
          v15 = v14 + 2;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v17 = *(_OWORD *)(v13 + 24);
        v18 = *(_OWORD *)(v13 + 56);
        v24 = *(_OWORD *)(v13 + 40);
        v25 = v18;
        v23 = v17;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)(a1 + 8) + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v24 + 1))
        {
          *(_QWORD *)&v25 = *((_QWORD *)&v24 + 1);
          operator delete(*((void **)&v24 + 1));
        }
        if ((_QWORD)v23)
        {
          *((_QWORD *)&v23 + 1) = v23;
          operator delete((void *)v23);
        }
        v5 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v6 = (unint64_t *)((char *)__p[1] + 8);
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 - 1, v6));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        break;
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        break;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
    set_error(a2, (const std::string *)__p);
    if (SBYTE7(v23) < 0)
      operator delete(__p[0]);
  }
}

void sub_217EB6E3C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  int v17;
  uint64_t v18;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v18 - 57) < 0)
  {
    operator delete(*(void **)(v18 - 80));
    if ((v17 & 1) == 0)
    {
LABEL_8:
      __cxa_begin_catch(a1);
      std::current_exception();
      fill_error_from_exception(&a10);
      std::exception_ptr::~exception_ptr(&a10);
      __cxa_end_catch();
      JUMPOUT(0x217EB6B7CLL);
    }
  }
  else if (!v17)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v16);
  goto LABEL_8;
}

void sub_217EB6F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_int64(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v23;
  __int128 v24;
  void *__p[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  std::string v29;
  size_t __idx;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v4 = 0;
    switch(*(_BYTE *)(a1 + 20))
    {
      case 0:
        return *(_QWORD *)(a1 + 8);
      case 1:
        return (uint64_t)*(double *)(a1 + 8);
      case 2:
        v10 = *(_QWORD *)(a1 + 8);
        __idx = 0;
        v11 = (char *)(v10 + 8);
        if (*(char *)(v10 + 31) < 0)
          v11 = *(char **)(v10 + 8);
        std::string::basic_string[abi:ne180100]<0>(__p, v11);
        v4 = std::stoll((const std::string *)__p, &__idx, 10);
        if (SBYTE7(v26) < 0)
          operator delete(__p[0]);
        if (*(char *)(v10 + 31) < 0)
          v12 = *(_QWORD *)(v10 + 16);
        else
          v12 = *(unsigned __int8 *)(v10 + 31);
        if (__idx != v12)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v23 = std::string::append(&v29, " cannot be interpreted as an integer");
          v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          *(_QWORD *)&v26 = *((_QWORD *)&v23->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        return v4;
      case 3:
        v6 = *(_QWORD *)(a1 + 8);
        __p[1] = 0;
        *(_QWORD *)&v26 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
        turi::flexible_type_fail(0);
        v5 = __p[0];
        if (!__p[0])
          return 0;
        __p[1] = __p[0];
        goto LABEL_10;
      case 4:
        v13 = *(_QWORD *)(a1 + 8);
        __p[1] = 0;
        *(_QWORD *)&v26 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        return 0;
      case 5:
        v14 = *(_QWORD *)(a1 + 8);
        __p[1] = 0;
        *(_QWORD *)&v26 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        return 0;
      case 6:
        return (uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8;
      case 7:
        return v4;
      case 8:
        v15 = *(_QWORD *)(a1 + 8);
        v16 = *(unsigned int **)(v15 + 16);
        __p[0] = *(void **)(v15 + 8);
        __p[1] = v16;
        if (v16)
        {
          v17 = v16 + 2;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = *(_OWORD *)(v15 + 24);
        v20 = *(_OWORD *)(v15 + 56);
        v27 = *(_OWORD *)(v15 + 40);
        v28 = v20;
        v26 = v19;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
        return 0;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)(a1 + 8) + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v27 + 1))
        {
          *(_QWORD *)&v28 = *((_QWORD *)&v27 + 1);
          operator delete(*((void **)&v27 + 1));
        }
        if ((_QWORD)v26)
        {
          *((_QWORD *)&v26 + 1) = v26;
          operator delete((void *)v26);
        }
        v7 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v8 = (unint64_t *)((char *)__p[1] + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        return 0;
      default:
        result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
  set_error(a2, (const std::string *)__p);
  if (SBYTE7(v26) < 0)
  {
    v5 = __p[0];
LABEL_10:
    operator delete(v5);
  }
  return 0;
}

void sub_217EB728C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  int v17;
  uint64_t v18;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v18 - 41) < 0)
  {
    operator delete(*(void **)(v18 - 64));
    if ((v17 & 1) == 0)
    {
LABEL_8:
      __cxa_begin_catch(a1);
      std::current_exception();
      fill_error_from_exception(&a10);
      std::exception_ptr::~exception_ptr(&a10);
      __cxa_end_catch();
      JUMPOUT(0x217EB71E0);
    }
  }
  else if (!v17)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v16);
  goto LABEL_8;
}

void sub_217EB739C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_string_length(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (*(_BYTE *)(a1 + 20) == 2)
    {
      v4 = *(_QWORD *)(a1 + 8);
      if (*(char *)(v4 + 31) < 0)
        return *(_QWORD *)(v4 + 16);
      else
        return *(unsigned __int8 *)(v4 + 31);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not a string.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type is null");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB746C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB7450);
}

void sub_217EB74C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_string_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (*(_BYTE *)(a1 + 20) == 2)
    {
      v4 = *(_QWORD *)(a1 + 8);
      result = v4 + 8;
      if (*(char *)(v4 + 31) < 0)
        return *(_QWORD *)result;
      return result;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not a string.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB758C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB7578);
}

void sub_217EB75E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_array_length(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (*(_BYTE *)(a1 + 20) == 3)
      return (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)) >> 3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not an array.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type is null");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB76A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB7694);
}

void sub_217EB76FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_array_data(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (*(_BYTE *)(a1 + 20) == 3)
      return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not an array.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB77BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB77A8);
}

void sub_217EB7810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_flex_list(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string __p;
  std::string *p_p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (*(_BYTE *)(a1 + 20) == 4)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = operator new();
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)v5 = &capi_struct_type_info_tc_flex_list_inst;
      memset(&__p, 0, sizeof(__p));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v4 + 8), *(uint64_t **)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 4);
      std::vector<turi::flexible_type>::__vdeallocate((void **)(v5 + 8));
      *(std::string *)(v5 + 8) = __p;
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      return v5;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not a list.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB7958(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB793CLL);
}

void sub_217EB79AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_flex_dict(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string __p;
  std::string *p_p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (*(_BYTE *)(a1 + 20) == 5)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = operator new();
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)v5 = &capi_struct_type_info_tc_flex_dict_inst;
      memset(&__p, 0, sizeof(__p));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v4 + 8), *(uint64_t **)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 5);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(v5 + 8));
      *(std::string *)(v5 + 8) = __p;
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      return v5;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not a dict.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB7AF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB7AD8);
}

void sub_217EB7B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_flex_image(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *__p;
  unsigned int *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (*(_BYTE *)(a1 + 20) == 8)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = operator new();
      *(_QWORD *)v5 = &capi_struct_type_info_tc_flex_image_inst;
      v7 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v4 + 16);
      if (v6)
      {
        v8 = (unsigned int *)(v6 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = *(_OWORD *)(v4 + 24);
      v11 = *(_OWORD *)(v4 + 56);
      v17 = *(_OWORD *)(v4 + 40);
      v18 = v11;
      v16 = v10;
      __p = 0;
      v15 = 0;
      *(_QWORD *)(v5 + 8) = v7;
      *(_QWORD *)(v5 + 16) = v6;
      v19 = 0;
      v20 = 0;
      boost::detail::shared_count::~shared_count(&v20);
      v12 = v17;
      *(_OWORD *)(v5 + 24) = v16;
      *(_OWORD *)(v5 + 40) = v12;
      *(_OWORD *)(v5 + 56) = v18;
      boost::detail::shared_count::~shared_count(&v15);
      return v5;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not an image.");
    set_error(a2, (const std::string *)&__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
    set_error(a2, (const std::string *)&__p);
  }
  if (SBYTE7(v16) < 0)
    operator delete(__p);
  return 0;
}

void sub_217EB7CA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EB7C88);
}

void sub_217EB7CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_ft_datetime(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (*(_BYTE *)(a1 + 20) == 6)
    {
      result = (_QWORD *)operator new();
      v5 = *(_QWORD *)(a1 + 8);
      *result = &capi_struct_type_info_tc_datetime_inst;
      result[1] = v5;
      result[2] = 0;
      *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
      return result;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not a datetime object.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB7DE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB7DD4);
}

void sub_217EB7E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_ndarray(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  std::string v10;
  std::string::size_type v11;
  void *__p;
  void *v13;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (*(_BYTE *)(a1 + 20) == 9)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = operator new();
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)v5 = 0u;
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v5);
      *(_QWORD *)v5 = &capi_struct_type_info_tc_ndarray_inst;
      turi::flexible_type_impl::ndarray<double>::ndarray(&v10, v4 + 8);
      turi::flexible_type_impl::ndarray<double>::operator=(v5 + 8, (uint64_t)&v10);
      if (__p)
      {
        v13 = __p;
        operator delete(__p);
      }
      if (v10.__r_.__value_.__r.__words[2])
      {
        v11 = v10.__r_.__value_.__r.__words[2];
        operator delete((void *)v10.__r_.__value_.__r.__words[2]);
      }
      size = (std::__shared_weak_count *)v10.__r_.__value_.__l.__size_;
      if (v10.__r_.__value_.__l.__size_)
      {
        v7 = (unint64_t *)(v10.__r_.__value_.__l.__size_ + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      return v5;
    }
    std::string::basic_string[abi:ne180100]<0>(&v10, "Flexible type not an ndarray object.");
    set_error(a2, &v10);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "\"Flexible type\" is null.");
    set_error(a2, &v10);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB7FB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EB7F94);
}

void sub_217EB8024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ft_to_string(_BYTE *a1, uint64_t *a2)
{
  turi::flexible_type_impl *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  std::string::size_type v8;
  uint64_t result;
  std::string v10;
  std::string __p;
  uint64_t v12;
  void *v13;
  char v14;
  _QWORD v15[20];

  v15[19] = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v4 = (turi::flexible_type_impl *)(a1 + 8);
    switch(a1[20])
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_16;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_16:
        __p.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
        v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                  + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        __p.__r_.__value_.__r.__words[2] = v8;
        v12 = MEMORY[0x24BEDB848] + 16;
        if (v14 < 0)
          operator delete(v13);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](v15);
        goto LABEL_23;
      case 2:
        v6 = *(_QWORD *)v4;
        if (*(char *)(*(_QWORD *)v4 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v6 + 8), *(_QWORD *)(v6 + 16));
        }
        else
        {
          v7 = *(_OWORD *)(v6 + 8);
          v10.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 24);
          *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v7;
        }
        goto LABEL_23;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v4 + 8));
        goto LABEL_23;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)v4 + 8));
        goto LABEL_23;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v4 + 8));
        goto LABEL_23;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v4, &v10);
        goto LABEL_23;
      case 7:
        memset(&v10, 0, sizeof(v10));
        goto LABEL_23;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_23;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v4 + 8));
LABEL_23:
        v5 = operator new();
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)v5 = &capi_struct_type_info_tc_flexible_type_inst;
        turi::flexible_type::flexible_type<std::string>((uint64_t)&__p, (__int128 *)&v10);
        *(_QWORD *)(v5 + 13) = *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 5);
        *(_QWORD *)(v5 + 8) = __p.__r_.__value_.__r.__words[0];
        *(_BYTE *)(v5 + 20) = __p.__r_.__value_.__s.__data_[12];
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v10.__r_.__value_.__l.__data_);
        return v5;
      default:
        result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EB8314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EB8110);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_ft_to_type(uint64_t a1, char a2, uint64_t *a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double v10;
  double v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  char ***v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  double v26;
  char **v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  double v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  char *v47;
  uint64_t *v48;
  uint64_t *v49;
  _QWORD *v50;
  _QWORD *v52;
  unint64_t v53;
  BOOL v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  BOOL v77;
  _QWORD *v78;
  unint64_t v79;
  BOOL v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  void *v97;
  void *v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  void *v102;
  _QWORD *v103;
  void *v104;
  _QWORD *v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  void **v122;
  __int128 v123;
  double v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  __int128 v135;
  __int128 v136;
  unint64_t v137;
  BOOL v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  BOOL v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int *v164;
  unsigned int v165;
  __int128 v166;
  __int128 v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  void *v181;
  void *v182;
  _QWORD *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int *v188;
  unsigned int v189;
  __int128 v190;
  __int128 v191;
  unint64_t v192;
  _QWORD *v193;
  unint64_t v194;
  void *v195;
  _QWORD *v196;
  unint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  unint64_t v201;
  _QWORD *v202;
  unint64_t v203;
  unint64_t v204;
  int v205;
  _QWORD *v206;
  unint64_t v207;
  _QWORD *v208;
  unint64_t v209;
  _QWORD *v210;
  unint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int v217;
  __int128 v218;
  __int128 v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  unsigned int v225;
  __int128 v226;
  __int128 v227;
  unint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  _QWORD *v231;
  unint64_t v232;
  _QWORD *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int *v238;
  unsigned int v239;
  __int128 v240;
  __int128 v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int *v246;
  unsigned int v247;
  __int128 v248;
  __int128 v249;
  unint64_t v250;
  _QWORD *v251;
  unint64_t v252;
  _QWORD *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  __int128 v260;
  __int128 v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int *v278;
  unsigned int v279;
  __int128 v280;
  __int128 v281;
  unint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  void *v297;
  void *v298;
  unsigned int v299;
  unint64_t *v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  void *v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t result;
  uint64_t v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  void **v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t *v339;
  void **v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  void *__p[2];
  __int128 v353;
  _BYTE v354[32];
  uint64_t v355;
  void *v356;
  void *v357;
  uint64_t v358;
  void **v359;
  void **v360;
  uint64_t v361;
  __int128 v362;
  uint64_t v363;
  uint64_t v364[3];

  v364[2] = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v7 = 0;
    memset(v364, 0, 13);
    BYTE4(v364[1]) = a2;
    switch(a2)
    {
      case 2:
      case 3:
      case 4:
      case 5:
        v7 = operator new();
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 8) = 0;
        goto LABEL_11;
      case 6:
        v7 = 0x1900000000000000;
        v364[0] = 0x1900000000000000;
        LODWORD(v364[1]) = 0;
        break;
      case 8:
        v7 = operator new();
        *(_QWORD *)v7 = 0;
        a4 = 0.0;
        *(_OWORD *)(v7 + 8) = 0u;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 64) = 3;
        goto LABEL_11;
      case 9:
        v7 = operator new();
        std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v7);
LABEL_11:
        v364[0] = v7;
        *(_QWORD *)v7 = 1;
        break;
      default:
        break;
    }
    v9 = (double *)(a1 + 8);
    if ((uint64_t *)(a1 + 8) != v364)
    {
      switch(*(_BYTE *)(a1 + 20))
      {
        case 0:
          switch(BYTE4(v364[1]))
          {
            case 0:
              v10 = *v9;
              goto LABEL_69;
            case 1:
              v124 = (double)*(uint64_t *)v9;
              goto LABEL_298;
            case 2:
              if (*(_QWORD *)v7 != 1)
              {
                v118 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v118, v364[0]);
                v364[0] = (uint64_t)v118;
                *v118 = 1;
                do
                {
                  v119 = __ldaxr((unint64_t *)v7);
                  v120 = v119 - 1;
                }
                while (__stlxr(v120, (unint64_t *)v7));
                if (!v120)
                {
                  if (*(char *)(v7 + 31) < 0)
                    operator delete(*(void **)(v7 + 8));
                  MEMORY[0x219A19A08](v7, 0x1012C404EF22A49);
                }
              }
              v121 = v364[0];
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
              v122 = (void **)(v121 + 8);
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)__p);
              if (*(char *)(v121 + 31) < 0)
                operator delete(*v122);
              v123 = v362;
              *(_QWORD *)(v121 + 24) = v363;
              *(_OWORD *)v122 = v123;
              goto LABEL_432;
            case 3:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v87 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v87, v364[0]);
              v364[0] = (uint64_t)v87;
              *v87 = 1;
              do
              {
                v88 = __ldaxr((unint64_t *)v7);
                v54 = --v88 == 0;
              }
              while (__stlxr(v88, (unint64_t *)v7));
              goto LABEL_309;
            case 4:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v206 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v206, v364[0]);
              v364[0] = (uint64_t)v206;
              *v206 = 1;
              do
              {
                v207 = __ldaxr((unint64_t *)v7);
                v148 = --v207 == 0;
              }
              while (__stlxr(v207, (unint64_t *)v7));
              goto LABEL_418;
            case 5:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v231 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v231, v364[0]);
              v364[0] = (uint64_t)v231;
              *v231 = 1;
              do
              {
                v232 = __ldaxr((unint64_t *)v7);
                v80 = --v232 == 0;
              }
              while (__stlxr(v232, (unint64_t *)v7));
              goto LABEL_405;
            case 6:
              v364[0] = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
              LODWORD(v364[1]) = 0;
              goto LABEL_432;
            case 7:
              goto LABEL_431;
            case 8:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v235 = operator new();
              v236 = v364[0];
              *(_QWORD *)v235 = *(_QWORD *)v364[0];
              *(_QWORD *)(v235 + 8) = *(_QWORD *)(v236 + 8);
              v237 = *(_QWORD *)(v236 + 16);
              *(_QWORD *)(v235 + 16) = v237;
              if (v237)
              {
                v238 = (unsigned int *)(v237 + 8);
                do
                  v239 = __ldxr(v238);
                while (__stxr(v239 + 1, v238));
              }
              v240 = *(_OWORD *)(v236 + 24);
              v241 = *(_OWORD *)(v236 + 40);
              *(_OWORD *)(v235 + 56) = *(_OWORD *)(v236 + 56);
              *(_OWORD *)(v235 + 40) = v241;
              *(_OWORD *)(v235 + 24) = v240;
              v364[0] = v235;
              *(_QWORD *)v235 = 1;
              do
              {
                v242 = __ldaxr((unint64_t *)v7);
                v138 = --v242 == 0;
              }
              while (__stlxr(v242, (unint64_t *)v7));
              goto LABEL_427;
            case 9:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v110 = (_QWORD *)operator new();
              v111 = v364[0] + 8;
              *v110 = *(_QWORD *)v364[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v110 + 1, v111);
              v364[0] = (uint64_t)v110;
              *v110 = 1;
              do
              {
                v112 = __ldaxr((unint64_t *)v7);
                v77 = --v112 == 0;
              }
              while (__stlxr(v112, (unint64_t *)v7));
              goto LABEL_255;
            default:
              goto LABEL_537;
          }
        case 1:
          switch(BYTE4(v364[1]))
          {
            case 0:
              *(_QWORD *)&v10 = (uint64_t)*v9;
              goto LABEL_69;
            case 1:
              v124 = *v9;
              goto LABEL_298;
            case 2:
              if (*(_QWORD *)v7 != 1)
              {
                v153 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v153, v364[0]);
                v364[0] = (uint64_t)v153;
                *v153 = 1;
                do
                {
                  v154 = __ldaxr((unint64_t *)v7);
                  v155 = v154 - 1;
                }
                while (__stlxr(v155, (unint64_t *)v7));
                if (!v155)
                {
                  if (*(char *)(v7 + 31) < 0)
                    operator delete(*(void **)(v7 + 8));
                  MEMORY[0x219A19A08](v7, 0x1012C404EF22A49);
                }
              }
              v156 = v364[0];
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
              v157 = v156 + 8;
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)__p);
              if (*(char *)(v156 + 31) < 0)
                operator delete(*(void **)v157);
              v158 = v362;
              v159 = v363;
              goto LABEL_479;
            case 3:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v89 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v89, v364[0]);
              v364[0] = (uint64_t)v89;
              *v89 = 1;
              do
              {
                v90 = __ldaxr((unint64_t *)v7);
                v54 = --v90 == 0;
              }
              while (__stlxr(v90, (unint64_t *)v7));
              goto LABEL_309;
            case 4:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v208 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v208, v364[0]);
              v364[0] = (uint64_t)v208;
              *v208 = 1;
              do
              {
                v209 = __ldaxr((unint64_t *)v7);
                v148 = --v209 == 0;
              }
              while (__stlxr(v209, (unint64_t *)v7));
              goto LABEL_418;
            case 5:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v233 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v233, v364[0]);
              v364[0] = (uint64_t)v233;
              *v233 = 1;
              do
              {
                v234 = __ldaxr((unint64_t *)v7);
                v80 = --v234 == 0;
              }
              while (__stlxr(v234, (unint64_t *)v7));
              goto LABEL_405;
            case 6:
              v160 = (int)((*v9 - (double)(uint64_t)floor(*v9)) * 1000000.0);
              if (v160 >= 999999)
                v160 = 999999;
              if (v160 >= 0xF4240)
                turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
              v364[0] = vcvtmd_s64_f64(*v9) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
              LODWORD(v364[1]) = v160;
              goto LABEL_432;
            case 7:
              goto LABEL_431;
            case 8:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v243 = operator new();
              v244 = v364[0];
              *(_QWORD *)v243 = *(_QWORD *)v364[0];
              *(_QWORD *)(v243 + 8) = *(_QWORD *)(v244 + 8);
              v245 = *(_QWORD *)(v244 + 16);
              *(_QWORD *)(v243 + 16) = v245;
              if (v245)
              {
                v246 = (unsigned int *)(v245 + 8);
                do
                  v247 = __ldxr(v246);
                while (__stxr(v247 + 1, v246));
              }
              v248 = *(_OWORD *)(v244 + 24);
              v249 = *(_OWORD *)(v244 + 40);
              *(_OWORD *)(v243 + 56) = *(_OWORD *)(v244 + 56);
              *(_OWORD *)(v243 + 40) = v249;
              *(_OWORD *)(v243 + 24) = v248;
              v364[0] = v243;
              *(_QWORD *)v243 = 1;
              do
              {
                v250 = __ldaxr((unint64_t *)v7);
                v138 = --v250 == 0;
              }
              while (__stlxr(v250, (unint64_t *)v7));
              goto LABEL_427;
            case 9:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v113 = (_QWORD *)operator new();
              v114 = v364[0] + 8;
              *v113 = *(_QWORD *)v364[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v113 + 1, v114);
              v364[0] = (uint64_t)v113;
              *v113 = 1;
              do
              {
                v115 = __ldaxr((unint64_t *)v7);
                v77 = --v115 == 0;
              }
              while (__stlxr(v115, (unint64_t *)v7));
              goto LABEL_255;
            default:
              goto LABEL_537;
          }
        case 2:
          switch(BYTE4(v364[1]))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_431;
            case 2:
              v21 = *v9;
              if (*(_QWORD *)v7 != 1)
              {
                v22 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, v364[0]);
                v364[0] = (uint64_t)v22;
                *v22 = 1;
                do
                {
                  v23 = __ldaxr((unint64_t *)v7);
                  v24 = v23 - 1;
                }
                while (__stlxr(v24, (unint64_t *)v7));
                if (!v24)
                {
                  if (*(char *)(v7 + 31) < 0)
                    operator delete(*(void **)(v7 + 8));
                  MEMORY[0x219A19A08](v7, 0x1012C404EF22A49);
                }
              }
              v15 = v364[0];
              if (*(char *)(*(_QWORD *)&v21 + 31) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(*(_QWORD *)&v21 + 8), *(_QWORD *)(*(_QWORD *)&v21 + 16));
              }
              else
              {
                v25 = *(_OWORD *)(*(_QWORD *)&v21 + 8);
                *(_QWORD *)&v353 = *(_QWORD *)(*(_QWORD *)&v21 + 24);
                *(_OWORD *)__p = v25;
              }
              goto LABEL_476;
            case 3:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v52 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v52, v364[0]);
              v364[0] = (uint64_t)v52;
              *v52 = 1;
              do
              {
                v53 = __ldaxr((unint64_t *)v7);
                v54 = --v53 == 0;
              }
              while (__stlxr(v53, (unint64_t *)v7));
              goto LABEL_309;
            case 4:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v183 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v183, v364[0]);
              v364[0] = (uint64_t)v183;
              *v183 = 1;
              do
              {
                v184 = __ldaxr((unint64_t *)v7);
                v148 = --v184 == 0;
              }
              while (__stlxr(v184, (unint64_t *)v7));
              goto LABEL_418;
            case 5:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v116 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v116, v364[0]);
              v364[0] = (uint64_t)v116;
              *v116 = 1;
              do
              {
                v117 = __ldaxr((unint64_t *)v7);
                v80 = --v117 == 0;
              }
              while (__stlxr(v117, (unint64_t *)v7));
              goto LABEL_405;
            case 8:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v185 = operator new();
              v186 = v364[0];
              *(_QWORD *)v185 = *(_QWORD *)v364[0];
              *(_QWORD *)(v185 + 8) = *(_QWORD *)(v186 + 8);
              v187 = *(_QWORD *)(v186 + 16);
              *(_QWORD *)(v185 + 16) = v187;
              if (v187)
              {
                v188 = (unsigned int *)(v187 + 8);
                do
                  v189 = __ldxr(v188);
                while (__stxr(v189 + 1, v188));
              }
              v190 = *(_OWORD *)(v186 + 24);
              v191 = *(_OWORD *)(v186 + 40);
              *(_OWORD *)(v185 + 56) = *(_OWORD *)(v186 + 56);
              *(_OWORD *)(v185 + 40) = v191;
              *(_OWORD *)(v185 + 24) = v190;
              v364[0] = v185;
              *(_QWORD *)v185 = 1;
              do
              {
                v192 = __ldaxr((unint64_t *)v7);
                v138 = --v192 == 0;
              }
              while (__stlxr(v192, (unint64_t *)v7));
              goto LABEL_427;
            case 9:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v74 = (_QWORD *)operator new();
              v75 = v364[0] + 8;
              *v74 = *(_QWORD *)v364[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v74 + 1, v75);
              v364[0] = (uint64_t)v74;
              *v74 = 1;
              do
              {
                v76 = __ldaxr((unint64_t *)v7);
                v77 = --v76 == 0;
              }
              while (__stlxr(v76, (unint64_t *)v7));
              goto LABEL_255;
            default:
              goto LABEL_537;
          }
        case 3:
          v26 = *v9;
          v27 = (char **)(*(_QWORD *)&v26 + 8);
          switch(BYTE4(v364[1]))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_431;
            case 2:
              if (*(_QWORD *)v7 != 1)
              {
                v28 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, v364[0]);
                v364[0] = (uint64_t)v28;
                *v28 = 1;
                do
                {
                  v29 = __ldaxr((unint64_t *)v7);
                  v30 = v29 - 1;
                }
                while (__stlxr(v30, (unint64_t *)v7));
                if (!v30)
                {
                  if (*(char *)(v7 + 31) < 0)
                    operator delete(*(void **)(v7 + 8));
                  MEMORY[0x219A19A08](v7, 0x1012C404EF22A49);
                }
              }
              v15 = v364[0];
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v362, (_QWORD *)(*(_QWORD *)&v26 + 8));
              goto LABEL_476;
            case 3:
              if (*(_QWORD *)v7 != 1)
              {
                v63 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v63, v364[0]);
                v364[0] = (uint64_t)v63;
                *v63 = 1;
                do
                {
                  v64 = __ldaxr((unint64_t *)v7);
                  v65 = v64 - 1;
                }
                while (__stlxr(v65, (unint64_t *)v7));
                if (!v65)
                {
                  v66 = *(void **)(v7 + 8);
                  if (v66)
                  {
                    *(_QWORD *)(v7 + 16) = v66;
                    operator delete(v66);
                  }
                  MEMORY[0x219A19A08](v7, 0x1080C409938AC02);
                }
              }
              if (v364[0] == *(_QWORD *)&v26)
                goto LABEL_432;
              v47 = (char *)(v364[0] + 8);
              v67 = (uint64_t *)(*(_QWORD *)&v26 + 16);
              goto LABEL_124;
            case 4:
              if (*(_QWORD *)v7 != 1)
              {
                v199 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v199, v364[0]);
                v364[0] = (uint64_t)v199;
                *v199 = 1;
                do
                {
                  v200 = __ldaxr((unint64_t *)v7);
                  v201 = v200 - 1;
                }
                while (__stlxr(v201, (unint64_t *)v7));
                if (!v201)
                {
                  __p[0] = (void *)(v7 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  MEMORY[0x219A19A08](v7, 0x1020C405E66F15BLL);
                }
              }
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(v364[0] + 8), *(_QWORD **)(*(_QWORD *)&v26 + 8), *(_QWORD **)(*(_QWORD *)&v26 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v26 + 16) - *(_QWORD *)(*(_QWORD *)&v26 + 8)) >> 3);
              goto LABEL_432;
            case 5:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v142 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v142, v364[0]);
              v364[0] = (uint64_t)v142;
              *v142 = 1;
              do
              {
                v143 = __ldaxr((unint64_t *)v7);
                v80 = --v143 == 0;
              }
              while (__stlxr(v143, (unint64_t *)v7));
              goto LABEL_405;
            case 8:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v213 = operator new();
              v214 = v364[0];
              *(_QWORD *)v213 = *(_QWORD *)v364[0];
              *(_QWORD *)(v213 + 8) = *(_QWORD *)(v214 + 8);
              v215 = *(_QWORD *)(v214 + 16);
              *(_QWORD *)(v213 + 16) = v215;
              if (v215)
              {
                v216 = (unsigned int *)(v215 + 8);
                do
                  v217 = __ldxr(v216);
                while (__stxr(v217 + 1, v216));
              }
              v218 = *(_OWORD *)(v214 + 24);
              v219 = *(_OWORD *)(v214 + 40);
              *(_OWORD *)(v213 + 56) = *(_OWORD *)(v214 + 56);
              *(_OWORD *)(v213 + 40) = v219;
              *(_OWORD *)(v213 + 24) = v218;
              v364[0] = v213;
              *(_QWORD *)v213 = 1;
              do
              {
                v220 = __ldaxr((unint64_t *)v7);
                v138 = --v220 == 0;
              }
              while (__stlxr(v220, (unint64_t *)v7));
              goto LABEL_427;
            case 9:
              if (*(_QWORD *)v7 != 1)
              {
                v91 = (_QWORD *)operator new();
                v92 = v364[0] + 8;
                *v91 = *(_QWORD *)v364[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v91 + 1, v92);
                v364[0] = (uint64_t)v91;
                *v91 = 1;
                do
                {
                  v93 = __ldaxr((unint64_t *)v7);
                  v94 = v93 - 1;
                }
                while (__stlxr(v94, (unint64_t *)v7));
                if (!v94)
                {
                  v95 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v7);
                  MEMORY[0x219A19A08](v95, 0x1030C407B73B9F7);
                }
              }
              v96 = (_QWORD *)v364[0];
              v362 = 0uLL;
              v363 = 0;
              v359 = 0;
              v360 = 0;
              v361 = 0;
              std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>(*(_QWORD *)&v26 + 8, &v356);
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, &v356, (uint64_t)&v362, (uint64_t)&v359, 0);
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v356);
              if (v359)
              {
                v360 = v359;
                operator delete(v359);
              }
              if ((_QWORD)v362)
              {
                *((_QWORD *)&v362 + 1) = v362;
                operator delete((void *)v362);
              }
              std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v96 + 1), (__int128 *)__p);
              v97 = (void *)v96[3];
              if (v97)
              {
                v96[4] = v97;
                operator delete(v97);
                v96[3] = 0;
                v96[4] = 0;
                v96[5] = 0;
              }
              v98 = (void *)v96[6];
              *(_OWORD *)(v96 + 3) = v353;
              v96[5] = *(_QWORD *)v354;
              v353 = 0uLL;
              *(_QWORD *)v354 = 0;
              if (v98)
              {
                v96[7] = v98;
                operator delete(v98);
                v96[6] = 0;
                v96[7] = 0;
                v96[8] = 0;
              }
              *((_OWORD *)v96 + 3) = *(_OWORD *)&v354[8];
              v96[8] = *(_QWORD *)&v354[24];
              memset(&v354[8], 0, 24);
              v96[9] = v355;
              goto LABEL_533;
            default:
              goto LABEL_537;
          }
        case 4:
          v11 = *v9;
          switch(BYTE4(v364[1]))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_431;
            case 2:
              if (*(_QWORD *)v7 != 1)
              {
                v12 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v12, v364[0]);
                v364[0] = (uint64_t)v12;
                *v12 = 1;
                do
                {
                  v13 = __ldaxr((unint64_t *)v7);
                  v14 = v13 - 1;
                }
                while (__stlxr(v14, (unint64_t *)v7));
                if (!v14)
                {
                  if (*(char *)(v7 + 31) < 0)
                    operator delete(*(void **)(v7 + 8));
                  MEMORY[0x219A19A08](v7, 0x1012C404EF22A49);
                }
              }
              v15 = v364[0];
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v362, (uint64_t *)(*(_QWORD *)&v11 + 8));
              goto LABEL_476;
            case 3:
              if (*(_QWORD *)v7 != 1)
              {
                v39 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v39, v364[0]);
                v364[0] = (uint64_t)v39;
                *v39 = 1;
                do
                {
                  v40 = __ldaxr((unint64_t *)v7);
                  v41 = v40 - 1;
                }
                while (__stlxr(v41, (unint64_t *)v7));
                if (!v41)
                {
                  v42 = *(void **)(v7 + 8);
                  if (v42)
                  {
                    *(_QWORD *)(v7 + 16) = v42;
                    operator delete(v42);
                  }
                  MEMORY[0x219A19A08](v7, 0x1080C409938AC02);
                }
              }
              turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)__p, (_QWORD *)(v364[0] + 8), (_QWORD *)(*(_QWORD *)&v11 + 8));
              goto LABEL_432;
            case 4:
              if (*(_QWORD *)v7 != 1)
              {
                v125 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v125, v364[0]);
                v364[0] = (uint64_t)v125;
                *v125 = 1;
                do
                {
                  v126 = __ldaxr((unint64_t *)v7);
                  v127 = v126 - 1;
                }
                while (__stlxr(v127, (unint64_t *)v7));
                if (!v127)
                {
                  __p[0] = (void *)(v7 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  MEMORY[0x219A19A08](v7, 0x1020C405E66F15BLL);
                }
              }
              if (v364[0] != *(_QWORD *)&v11)
                std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v364[0] + 8, *(uint64_t **)(*(_QWORD *)&v11 + 8), *(uint64_t **)(*(_QWORD *)&v11 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v11 + 16) - *(_QWORD *)(*(_QWORD *)&v11 + 8)) >> 4);
              goto LABEL_432;
            case 5:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v78 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v78, v364[0]);
              v364[0] = (uint64_t)v78;
              *v78 = 1;
              do
              {
                v79 = __ldaxr((unint64_t *)v7);
                v80 = --v79 == 0;
              }
              while (__stlxr(v79, (unint64_t *)v7));
              goto LABEL_405;
            case 8:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v130 = operator new();
              v131 = v364[0];
              *(_QWORD *)v130 = *(_QWORD *)v364[0];
              *(_QWORD *)(v130 + 8) = *(_QWORD *)(v131 + 8);
              v132 = *(_QWORD *)(v131 + 16);
              *(_QWORD *)(v130 + 16) = v132;
              if (v132)
              {
                v133 = (unsigned int *)(v132 + 8);
                do
                  v134 = __ldxr(v133);
                while (__stxr(v134 + 1, v133));
              }
              v135 = *(_OWORD *)(v131 + 24);
              v136 = *(_OWORD *)(v131 + 40);
              *(_OWORD *)(v130 + 56) = *(_OWORD *)(v131 + 56);
              *(_OWORD *)(v130 + 40) = v136;
              *(_OWORD *)(v130 + 24) = v135;
              v364[0] = v130;
              *(_QWORD *)v130 = 1;
              do
              {
                v137 = __ldaxr((unint64_t *)v7);
                v138 = --v137 == 0;
              }
              while (__stlxr(v137, (unint64_t *)v7));
              goto LABEL_427;
            case 9:
              if (*(_QWORD *)v7 != 1)
              {
                v55 = (_QWORD *)operator new();
                v56 = v364[0] + 8;
                *v55 = *(_QWORD *)v364[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v55 + 1, v56);
                v364[0] = (uint64_t)v55;
                *v55 = 1;
                do
                {
                  v57 = __ldaxr((unint64_t *)v7);
                  v58 = v57 - 1;
                }
                while (__stlxr(v58, (unint64_t *)v7));
                if (!v58)
                {
                  v59 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v7);
                  MEMORY[0x219A19A08](v59, 0x1030C407B73B9F7);
                }
              }
              v60 = (_QWORD *)v364[0];
              v363 = 0;
              v362 = 0uLL;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v362, *(uint64_t **)(*(_QWORD *)&v11 + 8), *(uint64_t **)(*(_QWORD *)&v11 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v11 + 16) - *(_QWORD *)(*(_QWORD *)&v11 + 8)) >> 4);
              turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v362, __p);
              std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v60 + 1), (__int128 *)__p);
              v61 = (void *)v60[3];
              if (v61)
              {
                v60[4] = v61;
                operator delete(v61);
                v60[3] = 0;
                v60[4] = 0;
                v60[5] = 0;
              }
              v62 = (void *)v60[6];
              *(_OWORD *)(v60 + 3) = v353;
              v60[5] = *(_QWORD *)v354;
              v353 = 0uLL;
              *(_QWORD *)v354 = 0;
              if (v62)
              {
                v60[7] = v62;
                operator delete(v62);
                v60[6] = 0;
                v60[7] = 0;
                v60[8] = 0;
              }
              *((_OWORD *)v60 + 3) = *(_OWORD *)&v354[8];
              v60[8] = *(_QWORD *)&v354[24];
              memset(&v354[8], 0, 24);
              v60[9] = v355;
              turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
              v359 = (void **)&v362;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v359);
              goto LABEL_432;
            default:
              goto LABEL_537;
          }
        case 5:
          v31 = *v9;
          switch(BYTE4(v364[1]))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_431;
            case 2:
              if (*(_QWORD *)v7 != 1)
              {
                v32 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v32, v364[0]);
                v364[0] = (uint64_t)v32;
                *v32 = 1;
                do
                {
                  v33 = __ldaxr((unint64_t *)v7);
                  v34 = v33 - 1;
                }
                while (__stlxr(v34, (unint64_t *)v7));
                if (!v34)
                {
                  if (*(char *)(v7 + 31) < 0)
                    operator delete(*(void **)(v7 + 8));
                  MEMORY[0x219A19A08](v7, 0x1012C404EF22A49);
                }
              }
              v15 = v364[0];
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v362, (_QWORD *)(*(_QWORD *)&v31 + 8));
              goto LABEL_476;
            case 3:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v85 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v85, v364[0]);
              v364[0] = (uint64_t)v85;
              *v85 = 1;
              do
              {
                v86 = __ldaxr((unint64_t *)v7);
                v54 = --v86 == 0;
              }
              while (__stlxr(v86, (unint64_t *)v7));
              goto LABEL_309;
            case 4:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v251 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v251, v364[0]);
              v364[0] = (uint64_t)v251;
              *v251 = 1;
              do
              {
                v252 = __ldaxr((unint64_t *)v7);
                v148 = --v252 == 0;
              }
              while (__stlxr(v252, (unint64_t *)v7));
              goto LABEL_418;
            case 5:
              if (*(_QWORD *)v7 != 1)
              {
                v196 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v196, v364[0]);
                v364[0] = (uint64_t)v196;
                *v196 = 1;
                do
                {
                  v197 = __ldaxr((unint64_t *)v7);
                  v198 = v197 - 1;
                }
                while (__stlxr(v198, (unint64_t *)v7));
                if (!v198)
                {
                  __p[0] = (void *)(v7 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  MEMORY[0x219A19A08](v7, 0x1020C405E66F15BLL);
                }
              }
              if (v364[0] != *(_QWORD *)&v31)
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(v364[0] + 8), *(uint64_t **)(*(_QWORD *)&v31 + 8), *(uint64_t **)(*(_QWORD *)&v31 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v31 + 16) - *(_QWORD *)(*(_QWORD *)&v31 + 8)) >> 5);
              goto LABEL_432;
            case 8:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v255 = operator new();
              v256 = v364[0];
              *(_QWORD *)v255 = *(_QWORD *)v364[0];
              *(_QWORD *)(v255 + 8) = *(_QWORD *)(v256 + 8);
              v257 = *(_QWORD *)(v256 + 16);
              *(_QWORD *)(v255 + 16) = v257;
              if (v257)
              {
                v258 = (unsigned int *)(v257 + 8);
                do
                  v259 = __ldxr(v258);
                while (__stxr(v259 + 1, v258));
              }
              v260 = *(_OWORD *)(v256 + 24);
              v261 = *(_OWORD *)(v256 + 40);
              *(_OWORD *)(v255 + 56) = *(_OWORD *)(v256 + 56);
              *(_OWORD *)(v255 + 40) = v261;
              *(_OWORD *)(v255 + 24) = v260;
              v364[0] = v255;
              *(_QWORD *)v255 = 1;
              do
              {
                v262 = __ldaxr((unint64_t *)v7);
                v138 = --v262 == 0;
              }
              while (__stlxr(v262, (unint64_t *)v7));
              goto LABEL_427;
            case 9:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v139 = (_QWORD *)operator new();
              v140 = v364[0] + 8;
              *v139 = *(_QWORD *)v364[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v139 + 1, v140);
              v364[0] = (uint64_t)v139;
              *v139 = 1;
              do
              {
                v141 = __ldaxr((unint64_t *)v7);
                v77 = --v141 == 0;
              }
              while (__stlxr(v141, (unint64_t *)v7));
              goto LABEL_255;
            default:
              goto LABEL_537;
          }
        case 6:
          switch(BYTE4(v364[1]))
          {
            case 0:
              *(_QWORD *)&v10 = (uint64_t)(*(_QWORD *)v9 << 8) >> 8;
              goto LABEL_69;
            case 1:
              v124 = (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8);
LABEL_298:
              *(double *)v364 = v124;
              goto LABEL_432;
            case 2:
              if (*(_QWORD *)v7 != 1)
              {
                v202 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v202, v364[0]);
                v364[0] = (uint64_t)v202;
                *v202 = 1;
                do
                {
                  v203 = __ldaxr((unint64_t *)v7);
                  v204 = v203 - 1;
                }
                while (__stlxr(v204, (unint64_t *)v7));
                if (!v204)
                {
                  if (*(char *)(v7 + 31) < 0)
                    operator delete(*(void **)(v7 + 8));
                  MEMORY[0x219A19A08](v7, 0x1012C404EF22A49);
                }
              }
              v15 = v364[0];
              v205 = *(_DWORD *)(a1 + 16);
              *(_QWORD *)&v362 = *(_QWORD *)(a1 + 8);
              DWORD2(v362) = v205;
              turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v362, (std::string *)__p);
              goto LABEL_476;
            case 3:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v128 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v128, v364[0]);
              v364[0] = (uint64_t)v128;
              *v128 = 1;
              do
              {
                v129 = __ldaxr((unint64_t *)v7);
                v54 = --v129 == 0;
              }
              while (__stlxr(v129, (unint64_t *)v7));
              goto LABEL_309;
            case 4:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v253 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v253, v364[0]);
              v364[0] = (uint64_t)v253;
              *v253 = 1;
              do
              {
                v254 = __ldaxr((unint64_t *)v7);
                v148 = --v254 == 0;
              }
              while (__stlxr(v254, (unint64_t *)v7));
              goto LABEL_418;
            case 5:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v263 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v263, v364[0]);
              v364[0] = (uint64_t)v263;
              *v263 = 1;
              do
              {
                v264 = __ldaxr((unint64_t *)v7);
                v80 = --v264 == 0;
              }
              while (__stlxr(v264, (unint64_t *)v7));
              goto LABEL_405;
            case 6:
              v212 = *(_DWORD *)(a1 + 16);
              v364[0] = *(_QWORD *)(a1 + 8);
              LODWORD(v364[1]) = v212;
              goto LABEL_432;
            case 7:
              goto LABEL_431;
            case 8:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v265 = operator new();
              v266 = v364[0];
              *(_QWORD *)v265 = *(_QWORD *)v364[0];
              *(_QWORD *)(v265 + 8) = *(_QWORD *)(v266 + 8);
              v267 = *(_QWORD *)(v266 + 16);
              *(_QWORD *)(v265 + 16) = v267;
              if (v267)
              {
                v268 = (unsigned int *)(v267 + 8);
                do
                  v269 = __ldxr(v268);
                while (__stxr(v269 + 1, v268));
              }
              v270 = *(_OWORD *)(v266 + 24);
              v271 = *(_OWORD *)(v266 + 40);
              *(_OWORD *)(v265 + 56) = *(_OWORD *)(v266 + 56);
              *(_OWORD *)(v265 + 40) = v271;
              *(_OWORD *)(v265 + 24) = v270;
              v364[0] = v265;
              *(_QWORD *)v265 = 1;
              do
              {
                v272 = __ldaxr((unint64_t *)v7);
                v138 = --v272 == 0;
              }
              while (__stlxr(v272, (unint64_t *)v7));
              goto LABEL_427;
            case 9:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v149 = (_QWORD *)operator new();
              v150 = v364[0] + 8;
              *v149 = *(_QWORD *)v364[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v149 + 1, v150);
              v364[0] = (uint64_t)v149;
              *v149 = 1;
              do
              {
                v151 = __ldaxr((unint64_t *)v7);
                v77 = --v151 == 0;
              }
              while (__stlxr(v151, (unint64_t *)v7));
              goto LABEL_255;
            default:
              goto LABEL_537;
          }
        case 7:
          switch(BYTE4(v364[1]))
          {
            case 0:
            case 6:
              goto LABEL_431;
            case 1:
              v10 = NAN;
LABEL_69:
              *(double *)v364 = v10;
              goto LABEL_432;
            case 2:
              if (*(_QWORD *)v7 != 1)
              {
                v81 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v81, v364[0]);
                v364[0] = (uint64_t)v81;
                *v81 = 1;
                do
                {
                  v82 = __ldaxr((unint64_t *)v7);
                  v83 = v82 - 1;
                }
                while (__stlxr(v83, (unint64_t *)v7));
                if (!v83)
                {
                  if (*(char *)(v7 + 31) < 0)
                    operator delete(*(void **)(v7 + 8));
                  MEMORY[0x219A19A08](v7, 0x1012C404EF22A49);
                }
              }
              v84 = v364[0] + 8;
              if (*(char *)(v364[0] + 31) < 0)
                operator delete(*(void **)v84);
              *(_QWORD *)v84 = 0;
              *(_QWORD *)(v84 + 8) = 0;
              *(_QWORD *)(v84 + 16) = 0;
              goto LABEL_432;
            case 3:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v193 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v193, v364[0]);
              v364[0] = (uint64_t)v193;
              *v193 = 1;
              do
              {
                v194 = __ldaxr((unint64_t *)v7);
                v54 = --v194 == 0;
              }
              while (__stlxr(v194, (unint64_t *)v7));
LABEL_309:
              if (!v54)
                goto LABEL_431;
              v152 = 0x1080C409938AC02;
              v195 = *(void **)(v7 + 8);
              if (v195)
              {
                *(_QWORD *)(v7 + 16) = v195;
                operator delete(v195);
              }
              goto LABEL_430;
            case 4:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v210 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v210, v364[0]);
              v364[0] = (uint64_t)v210;
              *v210 = 1;
              do
              {
                v211 = __ldaxr((unint64_t *)v7);
                v148 = --v211 == 0;
              }
              while (__stlxr(v211, (unint64_t *)v7));
              goto LABEL_418;
            case 5:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v144 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v144, v364[0]);
              v364[0] = (uint64_t)v144;
              *v144 = 1;
              do
              {
                v145 = __ldaxr((unint64_t *)v7);
                v80 = --v145 == 0;
              }
              while (__stlxr(v145, (unint64_t *)v7));
              goto LABEL_405;
            case 7:
              goto LABEL_432;
            case 8:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v221 = operator new();
              v222 = v364[0];
              *(_QWORD *)v221 = *(_QWORD *)v364[0];
              *(_QWORD *)(v221 + 8) = *(_QWORD *)(v222 + 8);
              v223 = *(_QWORD *)(v222 + 16);
              *(_QWORD *)(v221 + 16) = v223;
              if (v223)
              {
                v224 = (unsigned int *)(v223 + 8);
                do
                  v225 = __ldxr(v224);
                while (__stxr(v225 + 1, v224));
              }
              v226 = *(_OWORD *)(v222 + 24);
              v227 = *(_OWORD *)(v222 + 40);
              *(_OWORD *)(v221 + 56) = *(_OWORD *)(v222 + 56);
              *(_OWORD *)(v221 + 40) = v227;
              *(_OWORD *)(v221 + 24) = v226;
              v364[0] = v221;
              *(_QWORD *)v221 = 1;
              do
              {
                v228 = __ldaxr((unint64_t *)v7);
                v138 = --v228 == 0;
              }
              while (__stlxr(v228, (unint64_t *)v7));
              goto LABEL_427;
            case 9:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v107 = (_QWORD *)operator new();
              v108 = v364[0] + 8;
              *v107 = *(_QWORD *)v364[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v107 + 1, v108);
              v364[0] = (uint64_t)v107;
              *v107 = 1;
              do
              {
                v109 = __ldaxr((unint64_t *)v7);
                v77 = --v109 == 0;
              }
              while (__stlxr(v109, (unint64_t *)v7));
LABEL_255:
              if (!v77)
                goto LABEL_431;
              v152 = 0x1030C407B73B9F7;
              std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v7);
              goto LABEL_430;
            default:
              goto LABEL_537;
          }
        case 8:
          v35 = (uint64_t *)(*(_QWORD *)v9 + 8);
          switch(BYTE4(v364[1]))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_431;
            case 2:
              if (*(_QWORD *)v7 != 1)
              {
                v36 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v36, v364[0]);
                v364[0] = (uint64_t)v36;
                *v36 = 1;
                do
                {
                  v37 = __ldaxr((unint64_t *)v7);
                  v38 = v37 - 1;
                }
                while (__stlxr(v38, (unint64_t *)v7));
                if (!v38)
                {
                  if (*(char *)(v7 + 31) < 0)
                    operator delete(*(void **)(v7 + 8));
                  MEMORY[0x219A19A08](v7, 0x1012C404EF22A49);
                }
              }
              v15 = v364[0];
              turi::flexible_type_impl::get_string_visitor::operator()();
              goto LABEL_476;
            case 3:
              if (*(_QWORD *)v7 != 1)
              {
                v99 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v99, v364[0]);
                v364[0] = (uint64_t)v99;
                *v99 = 1;
                do
                {
                  v100 = __ldaxr((unint64_t *)v7);
                  v101 = v100 - 1;
                }
                while (__stlxr(v101, (unint64_t *)v7));
                if (!v101)
                {
                  v102 = *(void **)(v7 + 8);
                  if (v102)
                  {
                    *(_QWORD *)(v7 + 16) = v102;
                    operator delete(v102);
                  }
                  a4 = MEMORY[0x219A19A08](v7, 0x1080C409938AC02);
                }
              }
              v103 = (_QWORD *)v364[0];
              turi::flexible_type_impl::get_vec_visitor::operator()(v35, (double **)__p, *(unint64_t *)&a4);
              v104 = (void *)v103[1];
              if (v104)
              {
                v103[2] = v104;
                operator delete(v104);
                v103[1] = 0;
                v103[2] = 0;
                v103[3] = 0;
              }
              *(_OWORD *)(v103 + 1) = *(_OWORD *)__p;
              v103[3] = v353;
              goto LABEL_432;
            case 4:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v273 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v273, v364[0]);
              v364[0] = (uint64_t)v273;
              *v273 = 1;
              do
              {
                v274 = __ldaxr((unint64_t *)v7);
                v148 = --v274 == 0;
              }
              while (__stlxr(v274, (unint64_t *)v7));
              goto LABEL_418;
            case 5:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v229 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v229, v364[0]);
              v364[0] = (uint64_t)v229;
              *v229 = 1;
              do
              {
                v230 = __ldaxr((unint64_t *)v7);
                v80 = --v230 == 0;
              }
              while (__stlxr(v230, (unint64_t *)v7));
              goto LABEL_405;
            case 8:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v275 = operator new();
              v276 = v364[0];
              *(_QWORD *)v275 = *(_QWORD *)v364[0];
              *(_QWORD *)(v275 + 8) = *(_QWORD *)(v276 + 8);
              v277 = *(_QWORD *)(v276 + 16);
              *(_QWORD *)(v275 + 16) = v277;
              if (v277)
              {
                v278 = (unsigned int *)(v277 + 8);
                do
                  v279 = __ldxr(v278);
                while (__stxr(v279 + 1, v278));
              }
              v280 = *(_OWORD *)(v276 + 24);
              v281 = *(_OWORD *)(v276 + 40);
              *(_OWORD *)(v275 + 56) = *(_OWORD *)(v276 + 56);
              *(_OWORD *)(v275 + 40) = v281;
              *(_OWORD *)(v275 + 24) = v280;
              v364[0] = v275;
              *(_QWORD *)v275 = 1;
              do
              {
                v282 = __ldaxr((unint64_t *)v7);
                v138 = --v282 == 0;
              }
              while (__stlxr(v282, (unint64_t *)v7));
LABEL_427:
              if (!v138)
                goto LABEL_431;
              v152 = 0x1030C40F1F0227BLL;
              boost::detail::shared_count::~shared_count((unsigned int **)(v7 + 16));
              goto LABEL_430;
            case 9:
              if (*(_QWORD *)v7 != 1)
              {
                v175 = (_QWORD *)operator new();
                v176 = v364[0] + 8;
                *v175 = *(_QWORD *)v364[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v175 + 1, v176);
                v364[0] = (uint64_t)v175;
                *v175 = 1;
                do
                {
                  v177 = __ldaxr((unint64_t *)v7);
                  v178 = v177 - 1;
                }
                while (__stlxr(v178, (unint64_t *)v7));
                if (!v178)
                {
                  v179 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v7);
                  a4 = MEMORY[0x219A19A08](v179, 0x1030C407B73B9F7);
                }
              }
              v180 = (_QWORD *)v364[0];
              turi::flexible_type_impl::get_ndvec_visitor::operator()(v35, __p, *(unint64_t *)&a4);
              std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v180 + 1), (__int128 *)__p);
              v181 = (void *)v180[3];
              if (v181)
              {
                v180[4] = v181;
                operator delete(v181);
                v180[3] = 0;
                v180[4] = 0;
                v180[5] = 0;
              }
              v182 = (void *)v180[6];
              *(_OWORD *)(v180 + 3) = v353;
              v180[5] = *(_QWORD *)v354;
              v353 = 0uLL;
              *(_QWORD *)v354 = 0;
              if (v182)
              {
                v180[7] = v182;
                operator delete(v182);
                v180[6] = 0;
                v180[7] = 0;
                v180[8] = 0;
              }
              *((_OWORD *)v180 + 3) = *(_OWORD *)&v354[8];
              v180[8] = *(_QWORD *)&v354[24];
              memset(&v354[8], 0, 24);
              v180[9] = v355;
              goto LABEL_533;
            default:
              goto LABEL_537;
          }
        case 9:
          v16 = *v9;
          v17 = (char ***)(*(_QWORD *)&v16 + 8);
          switch(BYTE4(v364[1]))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_431;
            case 2:
              if (*(_QWORD *)v7 != 1)
              {
                v18 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, v364[0]);
                v364[0] = (uint64_t)v18;
                *v18 = 1;
                do
                {
                  v19 = __ldaxr((unint64_t *)v7);
                  v20 = v19 - 1;
                }
                while (__stlxr(v20, (unint64_t *)v7));
                if (!v20)
                {
                  if (*(char *)(v7 + 31) < 0)
                    operator delete(*(void **)(v7 + 8));
                  MEMORY[0x219A19A08](v7, 0x1012C404EF22A49);
                }
              }
              v15 = v364[0];
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v362, (_QWORD *)(*(_QWORD *)&v16 + 8));
LABEL_476:
              v157 = v15 + 8;
              if (*(char *)(v15 + 31) < 0)
                operator delete(*(void **)v157);
              v158 = *(_OWORD *)__p;
              v159 = v353;
LABEL_479:
              *(_QWORD *)(v157 + 16) = v159;
              *(_OWORD *)v157 = v158;
              goto LABEL_432;
            case 3:
              if (*(_QWORD *)v7 != 1)
              {
                v43 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v43, v364[0]);
                v364[0] = (uint64_t)v43;
                *v43 = 1;
                do
                {
                  v44 = __ldaxr((unint64_t *)v7);
                  v45 = v44 - 1;
                }
                while (__stlxr(v45, (unint64_t *)v7));
                if (!v45)
                {
                  v46 = *(void **)(v7 + 8);
                  if (v46)
                  {
                    *(_QWORD *)(v7 + 16) = v46;
                    operator delete(v46);
                  }
                  MEMORY[0x219A19A08](v7, 0x1080C409938AC02);
                }
              }
              v47 = (char *)(v364[0] + 8);
              if (*(_QWORD *)(*(_QWORD *)&v16 + 72))
                goto LABEL_486;
              v49 = *(uint64_t **)(*(_QWORD *)&v16 + 24);
              v48 = *(uint64_t **)(*(_QWORD *)&v16 + 32);
              v50 = *(_QWORD **)(*(_QWORD *)&v16 + 8);
              if (v48 == v49 || v50 == 0)
              {
                v313 = 0;
              }
              else
              {
                v313 = 1;
                do
                {
                  v314 = *v49++;
                  v313 *= v314;
                }
                while (v49 != v48);
              }
              if (v313 == (uint64_t)(v50[1] - *v50) >> 3
                && turi::flexible_type_impl::ndarray<double>::last_index((_QWORD *)(*(_QWORD *)&v16 + 8)) == ((*v17)[1] - **v17) >> 3)
              {
                if (!turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)(*(_QWORD *)&v16 + 8)))
                  turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                v27 = *v17;
                if (v47 != (char *)v27)
                {
                  v67 = (uint64_t *)(v27 + 1);
LABEL_124:
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v47, *v27, *v67, (*v67 - (uint64_t)*v27) >> 3);
                }
              }
              else
              {
LABEL_486:
                if (!turi::flexible_type_impl::ndarray<double>::is_valid((_QWORD *)(*(_QWORD *)&v16 + 8)))
                  turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
                if (turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)(*(_QWORD *)&v16 + 8)))
                {
                  turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)&v16 + 8);
                }
                else
                {
                  v362 = 0uLL;
                  v363 = 0;
                  v359 = 0;
                  v360 = 0;
                  v361 = 0;
                  v356 = 0;
                  v357 = 0;
                  v358 = 0;
                  turi::flexible_type_impl::ndarray<double>::ndarray(__p, (uint64_t)&v362, (uint64_t)&v359, (uint64_t)&v356, 0);
                  if (v356)
                  {
                    v357 = v356;
                    operator delete(v356);
                  }
                  if (v359)
                  {
                    v360 = v359;
                    operator delete(v359);
                  }
                  if ((_QWORD)v362)
                  {
                    *((_QWORD *)&v362 + 1) = v362;
                    operator delete((void *)v362);
                  }
                  v355 = 0;
                  if (__p != (void **)(*(_QWORD *)&v16 + 8))
                    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v353, *(char **)(*(_QWORD *)&v16 + 24), *(_QWORD *)(*(_QWORD *)&v16 + 32), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v16 + 32) - *(_QWORD *)(*(_QWORD *)&v16 + 24)) >> 3);
                  v316 = *(uint64_t **)(*(_QWORD *)&v16 + 24);
                  v315 = *(uint64_t **)(*(_QWORD *)&v16 + 32);
                  if (v315 == v316 || !*v17)
                  {
                    v317 = 0;
                  }
                  else
                  {
                    v317 = 1;
                    do
                    {
                      v318 = *v316++;
                      v317 *= v318;
                    }
                    while (v316 != v315);
                  }
                  std::vector<double>::resize((uint64_t)__p[0], v317);
                  std::vector<unsigned long>::resize((uint64_t)&v354[8], (uint64_t)(*(_QWORD *)(*(_QWORD *)&v16 + 32) - *(_QWORD *)(*(_QWORD *)&v16 + 24)) >> 3);
                  if (*((_QWORD *)&v353 + 1) != (_QWORD)v353 && *((_QWORD *)__p[0] + 1) != *(_QWORD *)__p[0])
                  {
                    std::vector<std::pair<unsigned long,unsigned long>>::vector(&v362, (uint64_t)(*(_QWORD *)(*(_QWORD *)&v16 + 56) - *(_QWORD *)(*(_QWORD *)&v16 + 48)) >> 3);
                    v319 = *(_QWORD *)(*(_QWORD *)&v16 + 48);
                    v320 = *(_QWORD *)(*(_QWORD *)&v16 + 56);
                    v321 = (unint64_t *)v362;
                    v322 = v320 - v319;
                    if (v320 != v319)
                    {
                      v323 = 0;
                      v324 = v322 >> 3;
                      if (v324 <= 1)
                        v324 = 1;
                      v325 = (_QWORD *)(v362 + 8);
                      do
                      {
                        *(v325 - 1) = *(_QWORD *)(v319 + 8 * v323);
                        *v325 = v323++;
                        v325 += 2;
                      }
                      while (v324 != v323);
                    }
                    std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v362 + 1), *((unint64_t **)&v362 + 1), (uint64_t)v321, v321);
                    v326 = v362;
                    v327 = *(_QWORD *)&v354[8];
                    *(_QWORD *)(*(_QWORD *)&v354[8] + 8 * *(_QWORD *)(v362 + 8)) = 1;
                    v328 = *(_QWORD *)(*(_QWORD *)&v16 + 56) - *(_QWORD *)(*(_QWORD *)&v16 + 48);
                    if ((unint64_t)v328 >= 9)
                    {
                      v329 = v328 >> 3;
                      v330 = v353;
                      if (v329 <= 2)
                        v329 = 2;
                      v331 = (uint64_t *)(v326 + 24);
                      v332 = v329 - 1;
                      do
                      {
                        v333 = *(_QWORD *)(v330 + 8 * *(v331 - 2)) * *(_QWORD *)(v327 + 8 * *(v331 - 2));
                        v334 = *v331;
                        v331 += 2;
                        *(_QWORD *)(v327 + 8 * v334) = v333;
                        --v332;
                      }
                      while (v332);
                    }
                    v335 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v16 + 32) - *(_QWORD *)(*(_QWORD *)&v16 + 24)) >> 3;
                    v356 = 0;
                    std::vector<unsigned long>::vector(&v359, v335, &v356);
                    do
                    {
                      v336 = v359;
                      if (v360 == v359)
                      {
                        v345 = 0;
                        v346 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)&v16 + 8)
                                         + 8 * *(_QWORD *)(*(_QWORD *)&v16 + 72));
                        v347 = __p[0];
                      }
                      else
                      {
                        v337 = 0;
                        v338 = v360 - v359;
                        v339 = *(uint64_t **)(*(_QWORD *)&v16 + 48);
                        if (v338 <= 1)
                          v338 = 1;
                        v340 = v359;
                        v341 = v338;
                        do
                        {
                          v343 = (uint64_t)*v340++;
                          v342 = v343;
                          v344 = *v339++;
                          v337 += v344 * v342;
                          --v341;
                        }
                        while (v341);
                        v345 = 0;
                        v346 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)&v16 + 8)
                                         + 8 * (*(_QWORD *)(*(_QWORD *)&v16 + 72) + v337));
                        v347 = __p[0];
                        v348 = *(uint64_t **)&v354[8];
                        do
                        {
                          v350 = (uint64_t)*v336++;
                          v349 = v350;
                          v351 = *v348++;
                          v345 += v351 * v349;
                          --v338;
                        }
                        while (v338);
                      }
                      *(_QWORD *)(*v347 + 8 * v345) = v346;
                    }
                    while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(_QWORD *)&v16 + 8, (uint64_t *)&v359));
                    if (v359)
                    {
                      v360 = v359;
                      operator delete(v359);
                    }
                    if ((_QWORD)v362)
                    {
                      *((_QWORD *)&v362 + 1) = v362;
                      operator delete((void *)v362);
                    }
                  }
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)__p);
                if (!turi::flexible_type_impl::ndarray<double>::is_full(__p))
                  turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
                if (v47 != __p[0])
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v47, *(char **)__p[0], *((_QWORD *)__p[0] + 1), (uint64_t)(*((_QWORD *)__p[0] + 1) - *(_QWORD *)__p[0]) >> 3);
LABEL_533:
                turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
              }
              goto LABEL_432;
            case 4:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v146 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v146, v364[0]);
              v364[0] = (uint64_t)v146;
              *v146 = 1;
              do
              {
                v147 = __ldaxr((unint64_t *)v7);
                v148 = --v147 == 0;
              }
              while (__stlxr(v147, (unint64_t *)v7));
LABEL_418:
              if (!v148)
                goto LABEL_431;
              v152 = 0x1020C405E66F15BLL;
              __p[0] = (void *)(v7 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              break;
            case 5:
              if (*(_QWORD *)v7 == 1)
                goto LABEL_431;
              v105 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v105, v364[0]);
              v364[0] = (uint64_t)v105;
              *v105 = 1;
              do
              {
                v106 = __ldaxr((unint64_t *)v7);
                v80 = --v106 == 0;
              }
              while (__stlxr(v106, (unint64_t *)v7));
LABEL_405:
              if (!v80)
                goto LABEL_431;
              v152 = 0x1020C405E66F15BLL;
              __p[0] = (void *)(v7 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              break;
            case 8:
              if (*(_QWORD *)v7 != 1)
              {
                v161 = operator new();
                v162 = v364[0];
                *(_QWORD *)v161 = *(_QWORD *)v364[0];
                *(_QWORD *)(v161 + 8) = *(_QWORD *)(v162 + 8);
                v163 = *(_QWORD *)(v162 + 16);
                *(_QWORD *)(v161 + 16) = v163;
                if (v163)
                {
                  v164 = (unsigned int *)(v163 + 8);
                  do
                    v165 = __ldxr(v164);
                  while (__stxr(v165 + 1, v164));
                }
                v166 = *(_OWORD *)(v162 + 24);
                v167 = *(_OWORD *)(v162 + 40);
                *(_OWORD *)(v161 + 56) = *(_OWORD *)(v162 + 56);
                *(_OWORD *)(v161 + 40) = v167;
                *(_OWORD *)(v161 + 24) = v166;
                v364[0] = v161;
                *(_QWORD *)v161 = 1;
                do
                {
                  v168 = __ldaxr((unint64_t *)v7);
                  v169 = v168 - 1;
                }
                while (__stlxr(v169, (unint64_t *)v7));
                if (!v169)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v7 + 16));
                  MEMORY[0x219A19A08](v7, 0x1030C40F1F0227BLL);
                }
              }
              v170 = v364[0];
              turi::flexible_type_impl::get_img_visitor::operator()(*(_QWORD *)&v16 + 8, (turi::image_type *)__p);
              v171 = *(_OWORD *)__p;
              __p[0] = 0;
              __p[1] = 0;
              v172 = *(_OWORD *)(v170 + 8);
              *(_OWORD *)(v170 + 8) = v171;
              v362 = v172;
              boost::detail::shared_count::~shared_count((unsigned int **)&v362 + 1);
              v173 = v353;
              v174 = *(_OWORD *)v354;
              *(_OWORD *)(v170 + 56) = *(_OWORD *)&v354[16];
              *(_OWORD *)(v170 + 40) = v174;
              *(_OWORD *)(v170 + 24) = v173;
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              goto LABEL_432;
            case 9:
              if (*(_QWORD *)v7 != 1)
              {
                v68 = (_QWORD *)operator new();
                v69 = v364[0] + 8;
                *v68 = *(_QWORD *)v364[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v68 + 1, v69);
                v364[0] = (uint64_t)v68;
                *v68 = 1;
                do
                {
                  v70 = __ldaxr((unint64_t *)v7);
                  v71 = v70 - 1;
                }
                while (__stlxr(v71, (unint64_t *)v7));
                if (!v71)
                {
                  v72 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v7);
                  MEMORY[0x219A19A08](v72, 0x1030C407B73B9F7);
                }
              }
              v73 = v364[0];
              std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v364[0] + 8), (uint64_t *)(*(_QWORD *)&v16 + 8));
              if (v73 != *(_QWORD *)&v16)
              {
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v73 + 24), *(char **)(*(_QWORD *)&v16 + 24), *(_QWORD *)(*(_QWORD *)&v16 + 32), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v16 + 32) - *(_QWORD *)(*(_QWORD *)&v16 + 24)) >> 3);
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v73 + 48), *(char **)(*(_QWORD *)&v16 + 48), *(_QWORD *)(*(_QWORD *)&v16 + 56), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v16 + 56) - *(_QWORD *)(*(_QWORD *)&v16 + 48)) >> 3);
              }
              *(_QWORD *)(v73 + 72) = *(_QWORD *)(*(_QWORD *)&v16 + 72);
              goto LABEL_432;
            default:
              goto LABEL_537;
          }
LABEL_430:
          MEMORY[0x219A19A08](v7, v152);
LABEL_431:
          turi::flexible_type_fail(0);
          break;
        default:
LABEL_537:
          result = turi::flexible_type_fail(0);
          __break(1u);
          return result;
      }
    }
LABEL_432:
    v8 = new_tc_flexible_type<turi::flexible_type &>((uint64_t)v364);
    switch(BYTE4(v364[1]))
    {
      case 2:
        v283 = (unint64_t *)v364[0];
        do
        {
          v284 = __ldaxr(v283);
          v285 = v284 - 1;
        }
        while (__stlxr(v285, v283));
        if (!v285)
        {
          v286 = v364[0];
          if (v364[0])
          {
            if (*(char *)(v364[0] + 31) < 0)
              operator delete(*(void **)(v364[0] + 8));
            v287 = v286;
            v288 = 0x1012C404EF22A49;
            goto LABEL_473;
          }
        }
        break;
      case 3:
        v300 = (unint64_t *)v364[0];
        do
        {
          v301 = __ldaxr(v300);
          v302 = v301 - 1;
        }
        while (__stlxr(v302, v300));
        if (!v302)
        {
          v303 = v364[0];
          if (v364[0])
          {
            v304 = *(void **)(v364[0] + 8);
            if (v304)
            {
              *(_QWORD *)(v364[0] + 16) = v304;
              operator delete(v304);
            }
            v287 = v303;
            v288 = 0x1080C409938AC02;
            goto LABEL_473;
          }
        }
        break;
      case 4:
        v289 = (unint64_t *)v364[0];
        do
        {
          v290 = __ldaxr(v289);
          v291 = v290 - 1;
        }
        while (__stlxr(v291, v289));
        if (!v291)
        {
          v292 = v364[0];
          if (v364[0])
          {
            __p[0] = (void *)(v364[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_466;
          }
        }
        break;
      case 5:
        v305 = (unint64_t *)v364[0];
        do
        {
          v306 = __ldaxr(v305);
          v307 = v306 - 1;
        }
        while (__stlxr(v307, v305));
        if (!v307)
        {
          v292 = v364[0];
          if (v364[0])
          {
            __p[0] = (void *)(v364[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_466:
            v287 = v292;
            v288 = 0x1020C405E66F15BLL;
            goto LABEL_473;
          }
        }
        break;
      case 8:
        v308 = (unint64_t *)v364[0];
        do
        {
          v309 = __ldaxr(v308);
          v310 = v309 - 1;
        }
        while (__stlxr(v310, v308));
        if (!v310)
        {
          v311 = v364[0];
          if (v364[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v364[0] + 16));
            v287 = v311;
            v299 = -235920773;
            goto LABEL_472;
          }
        }
        break;
      case 9:
        v293 = (unint64_t *)v364[0];
        do
        {
          v294 = __ldaxr(v293);
          v295 = v294 - 1;
        }
        while (__stlxr(v295, v293));
        if (!v295)
        {
          v296 = v364[0];
          if (v364[0])
          {
            v297 = *(void **)(v364[0] + 48);
            if (v297)
            {
              *(_QWORD *)(v364[0] + 56) = v297;
              operator delete(v297);
            }
            v298 = *(void **)(v296 + 24);
            if (v298)
            {
              *(_QWORD *)(v296 + 32) = v298;
              operator delete(v298);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v296 + 8);
            v287 = v296;
            v299 = 2071181815;
LABEL_472:
            v288 = v299 | 0x1030C4000000000;
LABEL_473:
            MEMORY[0x219A19A08](v287, v288);
          }
        }
        break;
      default:
        return v8;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
    set_error(a3, (const std::string *)__p);
    if (SBYTE7(v353) < 0)
      operator delete(__p[0]);
    return 0;
  }
  return v8;
}

void sub_217EBAD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;

  if (a2)
  {
    v18 = *(void **)(v16 - 144);
    if (v18)
    {
      *(_QWORD *)(v16 - 136) = v18;
      operator delete(v18);
    }
    turi::flexible_type_impl::ndarray<double>::~ndarray(&__p);
    switch(*(_BYTE *)(v16 - 92))
    {
      case 2:
        v19 = *(unint64_t **)(v16 - 104);
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (v21)
          goto LABEL_44;
        v22 = *(_QWORD *)(v16 - 104);
        if (!v22)
          goto LABEL_44;
        if (*(char *)(v22 + 31) < 0)
          operator delete(*(void **)(v22 + 8));
        v23 = (_QWORD *)v22;
        v24 = 0x1012C404EF22A49;
        goto LABEL_43;
      case 3:
        v34 = *(unint64_t **)(v16 - 104);
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (v36)
          goto LABEL_44;
        v37 = *(_QWORD **)(v16 - 104);
        if (!v37)
          goto LABEL_44;
        v38 = (void *)v37[1];
        if (v38)
        {
          v37[2] = v38;
          operator delete(v38);
        }
        v23 = v37;
        v24 = 0x1080C409938AC02;
        goto LABEL_43;
      case 4:
        v25 = *(unint64_t **)(v16 - 104);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (v27)
          goto LABEL_44;
        v28 = *(_QWORD **)(v16 - 104);
        if (!v28)
          goto LABEL_44;
        *(_QWORD *)(v16 - 112) = v28 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 112));
        goto LABEL_36;
      case 5:
        v39 = *(unint64_t **)(v16 - 104);
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (v41)
          goto LABEL_44;
        v28 = *(_QWORD **)(v16 - 104);
        if (!v28)
          goto LABEL_44;
        *(_QWORD *)(v16 - 112) = v28 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 112));
LABEL_36:
        v23 = v28;
        v24 = 0x1020C405E66F15BLL;
        goto LABEL_43;
      case 8:
        v42 = *(unint64_t **)(v16 - 104);
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (v44)
          goto LABEL_44;
        v45 = *(_QWORD *)(v16 - 104);
        if (!v45)
          goto LABEL_44;
        boost::detail::shared_count::~shared_count((unsigned int **)(v45 + 16));
        v23 = (_QWORD *)v45;
        v33 = -235920773;
        goto LABEL_42;
      case 9:
        v29 = *(unint64_t **)(v16 - 104);
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (v31)
          goto LABEL_44;
        v32 = *(_QWORD **)(v16 - 104);
        if (!v32)
          goto LABEL_44;
        v23 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v32);
        v33 = 2071181815;
LABEL_42:
        v24 = v33 | 0x1030C4000000000;
LABEL_43:
        MEMORY[0x219A19A08](v23, v24);
LABEL_44:
        __cxa_begin_catch(exception_object);
        std::current_exception();
        fill_error_from_exception(&a10);
        std::exception_ptr::~exception_ptr(&a10);
        __cxa_end_catch();
        JUMPOUT(0x217EB84A4);
      default:
        goto LABEL_44;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_217EBB204(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EBB008);
}

void sub_217EBB21C()
{
  JUMPOUT(0x217EBB008);
}

uint64_t tc_function_call(turi *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  void *v18[2];
  char v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::string v23;
  uint64_t *v24[3];
  char **v25;
  char *v26[2];
  void **v27;
  uint64_t v28;
  _QWORD v29[10];

  v29[9] = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v26[0] = 0;
  v26[1] = 0;
  v25 = v26;
  if (a2 && &v25 != (char ***)(a2 + 8))
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>((uint64_t **)&v25, *(__int128 **)(a2 + 8), (__int128 *)(a2 + 16));
  turi::get_unity_global_singleton((uint64_t)a3, a4, a5, a6, a7, a8, &v28);
  v11 = v28;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, char ***))(*(_QWORD *)v11 + 88))(&v22, v11, __p, &v25);
  if (v21 < 0)
    operator delete(__p[0]);
  v12 = (std::__shared_weak_count *)v29[0];
  if (v29[0])
  {
    v13 = (unint64_t *)(v29[0] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if ((_BYTE)v22)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "return_value");
    v27 = v18;
    v15 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
    v27 = (void **)v29;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_into,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((__int128 *)*((unsigned int *)v15 + 14), *((_DWORD *)v15 + 14) ^ (*((int *)v15 + 14) >> 31), (__int128 ***)&v27, (__int128 **)v15 + 8);
    LODWORD(v28) = *((_DWORD *)v15 + 14) ^ (*((int *)v15 + 14) >> 31);
    if (v19 < 0)
      operator delete(v18[0]);
    v16 = operator new();
    *(_OWORD *)(v16 + 72) = 0u;
    *(_OWORD *)(v16 + 56) = 0u;
    *(_OWORD *)(v16 + 40) = 0u;
    *(_OWORD *)(v16 + 24) = 0u;
    *(_OWORD *)(v16 + 8) = 0u;
    *(_QWORD *)v16 = &capi_struct_type_info_tc_variant_inst;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v16 + 8), (unsigned int *)&v28);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v28);
  }
  else
  {
    set_error(a3, &v23);
    v16 = 0;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v24, (char *)v24[1]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v25, v26[0]);
  return v16;
}

void sub_217EBB460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,char *a30)
{
  if (a2)
  {
    turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a22);
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a29, a30);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EBB42CLL);
  }
  _Unwind_Resume(exception_object);
}

void turi::_tc_initialize(turi *this)
{
  turi *v1;
  uint64_t server_options;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::mutex::lock(&turi::_capi_server_initializer_lock);
  if (!turi::capi_server_initialized)
  {
    server_options = turi::_get_server_options(v1);
    turi::capi_server_initializer(&v9);
    turi::start_server(server_options, v9);
    v3 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    turi::capi_server_initialized = 1;
    v6 = global_logger();
    v11[0] = &off_24D919638;
    v12 = v11;
    file_logger::add_observer((uint64_t)v6, 4, (uint64_t)v11);
    v7 = v12;
    if (v12 == v11)
    {
      v8 = 4;
      v7 = v11;
      goto LABEL_11;
    }
    if (v12)
    {
      v8 = 5;
LABEL_11:
      (*(void (**)(void))(*v7 + 8 * v8))();
    }
  }
  std::mutex::unlock(&turi::_capi_server_initializer_lock);
}

void sub_217EBB67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::mutex::unlock(&turi::_capi_server_initializer_lock);
  _Unwind_Resume(a1);
}

uint64_t turi::_get_server_options(turi *this)
{
  unsigned __int8 v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  {
    __cxa_atexit((void (*)(void *))std::unique_ptr<turi::unity_server_options>::~unique_ptr[abi:ne180100], &turi::_get_server_options(void)::_server_options, &dword_217E69000);
  }
  result = turi::_get_server_options(void)::_server_options;
  if (!turi::_get_server_options(void)::_server_options)
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_BYTE *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = 0;
    v4 = turi::_get_server_options(void)::_server_options;
    turi::_get_server_options(void)::_server_options = v3;
    if (v4)
    {
      std::default_delete<turi::unity_server_options>::operator()[abi:ne180100]((uint64_t)&turi::_get_server_options(void)::_server_options, v4);
      v3 = turi::_get_server_options(void)::_server_options;
    }
    MEMORY[0x219A19390](v3, "/var/log/");
    MEMORY[0x219A19390](turi::_get_server_options(void)::_server_options + 24, "");
    result = turi::_get_server_options(void)::_server_options;
    *(_BYTE *)(turi::_get_server_options(void)::_server_options + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
  }
  return result;
}

uint64_t file_logger::add_observer(uint64_t a1, int a2, uint64_t a3)
{
  pthread_mutex_t *v6;

  v6 = (pthread_mutex_t *)(a1 + 608);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 608));
  std::function<void ()(int,char const*,unsigned long)>::operator=((_QWORD *)(a1 + 32 * a2 + 688), a3);
  *(_DWORD *)(a1 + 4 * a2 + 944) = *(_QWORD *)(a3 + 24) != 0;
  return pthread_mutex_unlock(v6);
}

void tc_init_set_log_location(uint64_t a1, uint64_t *a2)
{
  turi *v4;
  uint64_t server_options;
  std::string __p;

  std::mutex::lock(&turi::_capi_server_initializer_lock);
  if (turi::capi_server_initialized)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "CAPI server is already initialized; call setup functions before all other functions.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    server_options = turi::_get_server_options(v4);
    MEMORY[0x219A19390](server_options, a1);
  }
  std::mutex::unlock(&turi::_capi_server_initializer_lock);
}

void sub_217EBB8B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(&turi::_capi_server_initializer_lock);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EBB8A0);
}

void sub_217EBB910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_init_set_log_callback_function(int a1, uint64_t a2)
{
  void *v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = global_logger();
  v7[0] = &off_24D9196C8;
  v7[1] = a2;
  v8 = v7;
  file_logger::add_observer((uint64_t)v4, a1, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_217EBB9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  if (!a2)
    _Unwind_Resume(exception_object);
  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
    {
LABEL_7:
      __cxa_begin_catch(exception_object);
      std::current_exception();
      fill_error_from_exception((std::exception_ptr *)&a9);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
      __cxa_end_catch();
      JUMPOUT(0x217EBB9ACLL);
    }
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  goto LABEL_7;
}

void tc_init_set_config_parameter(char *__s, uint64_t a2, uint64_t *a3)
{
  unint64_t *v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  std::logic_error *v39;
  std::string *v40;
  __int128 v41;
  std::logic_error *exception;
  std::string *v43;
  __int128 v44;
  std::string v45;
  std::string v46;
  void *__p[2];
  char v48;
  _QWORD v49[3];

  v49[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  memset(v49, 0, 13);
  if ((_QWORD *)(a2 + 8) != v49)
  {
    *(_QWORD *)((char *)v49 + 5) = *(_QWORD *)(a2 + 13);
    v49[0] = *(_QWORD *)(a2 + 8);
    BYTE4(v49[1]) = *(_BYTE *)(a2 + 20);
    if (BYTE4(v49[1]) <= 9u && ((1 << SBYTE4(v49[1])) & 0x33C) != 0)
    {
      v7 = (unint64_t *)v49[0];
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  v9 = turi::globals::set_global((uint64_t)__p, (uint64_t)v49);
  switch(BYTE4(v49[1]))
  {
    case 2:
      v10 = (unint64_t *)v49[0];
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = v49[0];
        if (v49[0])
        {
          if (*(char *)(v49[0] + 31) < 0)
            operator delete(*(void **)(v49[0] + 8));
          v14 = v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v27 = (unint64_t *)v49[0];
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v49[0];
        if (v49[0])
        {
          v31 = *(void **)(v49[0] + 8);
          if (v31)
          {
            *(_QWORD *)(v49[0] + 16) = v31;
            operator delete(v31);
          }
          v14 = v30;
          v15 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v16 = (unint64_t *)v49[0];
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v49[0];
        if (v49[0])
        {
          v46.__r_.__value_.__r.__words[0] = v49[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v32 = (unint64_t *)v49[0];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v19 = v49[0];
        if (v49[0])
        {
          v46.__r_.__value_.__r.__words[0] = v49[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
LABEL_42:
          v14 = v19;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v35 = (unint64_t *)v49[0];
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = v49[0];
        if (v49[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v49[0] + 16));
          v14 = v38;
          v26 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v20 = (unint64_t *)v49[0];
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v49[0];
        if (v49[0])
        {
          v24 = *(void **)(v49[0] + 48);
          if (v24)
          {
            *(_QWORD *)(v49[0] + 56) = v24;
            operator delete(v24);
          }
          v25 = *(void **)(v23 + 24);
          if (v25)
          {
            *(_QWORD *)(v23 + 32) = v25;
            operator delete(v25);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v23 + 8);
          v14 = v23;
          v26 = 2071181815;
LABEL_48:
          v15 = v26 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v14, v15);
        }
      }
      break;
    default:
      break;
  }
  memset(v49, 0, 13);
  if (v48 < 0)
    operator delete(__p[0]);
  switch(v9)
  {
    case 2:
      std::string::basic_string[abi:ne180100]<0>(&v46, "CAPI server is already initialized; call setup functions before all other functions.");
      set_error(a3, &v46);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      break;
    case 1:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v45, "Unknown config parameter ");
      v43 = std::string::append(&v45, __s);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v46);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
    case 3:
      v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v45, "Invalid value for config parameter ");
      v40 = std::string::append(&v45, __s);
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(v39, &v46);
      v39->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v39, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
}

void sub_217EBBE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
    {
LABEL_9:
      __cxa_begin_catch(exception_object);
      std::current_exception();
      fill_error_from_exception((std::exception_ptr *)&a9);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
      __cxa_end_catch();
      JUMPOUT(0x217EBBDDCLL);
    }
  }
  else if (!v29)
  {
    goto LABEL_9;
  }
  __cxa_free_exception(v28);
  goto LABEL_9;
}

_QWORD *tc_model_new(turi *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  turi *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p[2];
  char v23;
  __int128 v24;
  __int128 v25;

  if (!turi::capi_server_initialized)
  {
    turi::_tc_initialize(a1);
    if (!turi::capi_server_initialized)
      turi::_tc_initialize(v9);
  }
  turi::get_unity_global_singleton(a3, a4, a5, a6, a7, a8, (uint64_t *)&v25);
  v10 = v25;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a1);
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v10 + 64))(&v24, v10, __p);
  if (v23 < 0)
    operator delete(__p[0]);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (_QWORD *)operator new();
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &capi_struct_type_info_tc_model_inst;
  v25 = v24;
  v24 = 0uLL;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v14 + 1), &v25);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v14;
}

void sub_217EBC190(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EBC178);
}

void sub_217EBC200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_model_load(turi *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t size;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  double v18;
  char *v19;
  const std::string *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  void *v42;
  void *v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  double v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  const void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  _QWORD v80[3];
  _OWORD v81[4];
  _QWORD v82[3];
  _QWORD v83[3];
  std::string __p;
  std::string::size_type v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  std::string v91;
  std::string v92;
  size_t __idx;
  double v94;
  int v95;
  char v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    turi::get_unity_global_singleton(a3, a4, a5, a6, a7, a8, (uint64_t *)v81);
    v10 = *(_QWORD *)&v81[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)a1);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v10 + 104))(v80, v10, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v81[0] + 1);
    if (*((_QWORD *)&v81[0] + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v81[0] + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v78, "archive_version");
    turi::safe_varmap_get<turi::flexible_type>((uint64_t)v80, (const void **)v78, (uint64_t)&v94);
    size = 0;
    switch(v96)
    {
      case 0:
        size = *(_QWORD *)&v94;
        goto LABEL_85;
      case 1:
        size = (uint64_t)v94;
        goto LABEL_85;
      case 2:
        v18 = v94;
        __idx = 0;
        v19 = (char *)(*(_QWORD *)&v94 + 8);
        if (*(char *)(*(_QWORD *)&v94 + 31) < 0)
          v19 = *(char **)(*(_QWORD *)&v94 + 8);
        v20 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v92, v19);
        size = std::stoll(v20, &__idx, 10);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if (*(char *)(*(_QWORD *)&v18 + 31) < 0)
          v21 = *(_QWORD *)(*(_QWORD *)&v18 + 16);
        else
          v21 = *(unsigned __int8 *)(*(_QWORD *)&v18 + 31);
        if (__idx != v21)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v72 = std::string::append(&v91, " cannot be interpreted as an integer");
          v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
          v92.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v73;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &v92);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        goto LABEL_42;
      case 3:
        v89 = 0;
        v90 = 0;
        v88 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v88, *(const void **)(*(_QWORD *)&v94 + 8), *(_QWORD *)(*(_QWORD *)&v94 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v94 + 16) - *(_QWORD *)(*(_QWORD *)&v94 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (v88)
        {
          v89 = v88;
          operator delete(v88);
        }
        goto LABEL_41;
      case 4:
        memset(v83, 0, sizeof(v83));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v83, *(uint64_t **)(*(_QWORD *)&v94 + 8), *(uint64_t **)(*(_QWORD *)&v94 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v94 + 16) - *(_QWORD *)(*(_QWORD *)&v94 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
        goto LABEL_41;
      case 5:
        memset(v82, 0, sizeof(v82));
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v82, *(uint64_t **)(*(_QWORD *)&v94 + 8), *(uint64_t **)(*(_QWORD *)&v94 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v94 + 16) - *(_QWORD *)(*(_QWORD *)&v94 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
        goto LABEL_41;
      case 6:
        size = (uint64_t)(*(_QWORD *)&v94 << 8) >> 8;
        goto LABEL_85;
      case 7:
        goto LABEL_85;
      case 8:
        v22 = v94;
        v23 = *(_QWORD *)(*(_QWORD *)&v94 + 16);
        *(_QWORD *)&v81[0] = *(_QWORD *)(*(_QWORD *)&v94 + 8);
        *((_QWORD *)&v81[0] + 1) = v23;
        if (v23)
        {
          v24 = (unsigned int *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *(_OWORD *)(*(_QWORD *)&v22 + 24);
        v27 = *(_OWORD *)(*(_QWORD *)&v22 + 56);
        v81[2] = *(_OWORD *)(*(_QWORD *)&v22 + 40);
        v81[3] = v27;
        v81[1] = v26;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)v81 + 1);
        goto LABEL_41;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)&v94 + 8);
        turi::flexible_type_fail(0);
        if (v86)
        {
          v87 = v86;
          operator delete(v86);
        }
        if (__p.__r_.__value_.__r.__words[2])
        {
          v85 = __p.__r_.__value_.__r.__words[2];
          operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        }
        size = __p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_42;
        v16 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)size + 16))(size);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
        }
LABEL_41:
        size = 0;
LABEL_42:
        switch(v96)
        {
          case 2:
            v28 = *(unint64_t **)&v94;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              v31 = v94;
              if (v94 == 0.0)
                goto LABEL_84;
              if (*(char *)(*(_QWORD *)&v94 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v94 + 8));
              v32 = v31;
              v33 = 0x1012C404EF22A49;
              goto LABEL_83;
            }
            break;
          case 3:
            v45 = *(unint64_t **)&v94;
            do
            {
              v46 = __ldaxr(v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v45));
            if (!v47)
            {
              v48 = v94;
              if (v94 == 0.0)
                goto LABEL_84;
              v49 = *(void **)(*(_QWORD *)&v94 + 8);
              if (v49)
              {
                *(_QWORD *)(*(_QWORD *)&v94 + 16) = v49;
                operator delete(v49);
              }
              v32 = v48;
              v33 = 0x1080C409938AC02;
              goto LABEL_83;
            }
            break;
          case 4:
            v34 = *(unint64_t **)&v94;
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v37 = v94;
              if (v94 == 0.0)
                goto LABEL_84;
              __p.__r_.__value_.__r.__words[0] = *(_QWORD *)&v94 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_76;
            }
            break;
          case 5:
            v50 = *(unint64_t **)&v94;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              v37 = v94;
              if (v94 == 0.0)
                goto LABEL_84;
              __p.__r_.__value_.__r.__words[0] = *(_QWORD *)&v94 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_76:
              v32 = v37;
              v33 = 0x1020C405E66F15BLL;
              goto LABEL_83;
            }
            break;
          case 8:
            v53 = *(unint64_t **)&v94;
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              v56 = v94;
              if (v94 == 0.0)
                goto LABEL_84;
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v94 + 16));
              v32 = v56;
              v44 = -235920773;
              goto LABEL_82;
            }
            break;
          case 9:
            v38 = *(unint64_t **)&v94;
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              v41 = v94;
              if (v94 != 0.0)
              {
                v42 = *(void **)(*(_QWORD *)&v94 + 48);
                if (v42)
                {
                  *(_QWORD *)(*(_QWORD *)&v94 + 56) = v42;
                  operator delete(v42);
                }
                v43 = *(void **)(*(_QWORD *)&v41 + 24);
                if (v43)
                {
                  *(_QWORD *)(*(_QWORD *)&v41 + 32) = v43;
                  operator delete(v43);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v41 + 8);
                v32 = v41;
                v44 = 2071181815;
LABEL_82:
                v33 = v44 | 0x1030C4000000000;
LABEL_83:
                MEMORY[0x219A19A08](*(_QWORD *)&v32, v33);
              }
LABEL_84:
              v94 = 0.0;
            }
            break;
          default:
            break;
        }
LABEL_85:
        v94 = 0.0;
        v95 = 0;
        v96 = 0;
        if (v79 < 0)
        {
          operator delete(v78[0]);
          if (size)
          {
LABEL_87:
            if (size == 1)
            {
              std::string::basic_string[abi:ne180100]<0>(v74, "model");
              turi::safe_varmap_get<std::shared_ptr<turi::model_base>>((uint64_t)v80, v74, v81);
              v15 = (_QWORD *)operator new();
              v15[1] = 0;
              v15[2] = 0;
              *v15 = &capi_struct_type_info_tc_model_inst;
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v81[0];
              v81[0] = 0uLL;
              std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v15 + 1), (__int128 *)&__p);
              v57 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_)
              {
                v58 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              v60 = (std::__shared_weak_count *)*((_QWORD *)&v81[0] + 1);
              if (*((_QWORD *)&v81[0] + 1))
              {
                v61 = (unint64_t *)(*((_QWORD *)&v81[0] + 1) + 8);
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              if (v75 < 0)
              {
                v63 = (void *)v74[0];
LABEL_113:
                operator delete(v63);
                goto LABEL_117;
              }
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "Unknown model archive version");
              set_error(a2, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v15 = 0;
            }
            goto LABEL_117;
          }
        }
        else if (size)
        {
          goto LABEL_87;
        }
        std::string::basic_string[abi:ne180100]<0>(v76, "model_base");
        turi::safe_varmap_get<std::shared_ptr<turi::model_base>>((uint64_t)v80, (const void **)v76, v81);
        v15 = (_QWORD *)operator new();
        v15[1] = 0;
        v15[2] = 0;
        *v15 = &capi_struct_type_info_tc_model_inst;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v81[0];
        v81[0] = 0uLL;
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v15 + 1), (__int128 *)&__p);
        v64 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v65 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v67 = (std::__shared_weak_count *)*((_QWORD *)&v81[0] + 1);
        if (*((_QWORD *)&v81[0] + 1))
        {
          v68 = (unint64_t *)(*((_QWORD *)&v81[0] + 1) + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        if (v77 < 0)
        {
          v63 = v76[0];
          goto LABEL_113;
        }
LABEL_117:
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v80, (char *)v80[1]);
        break;
      default:
        result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"url\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return (uint64_t)v15;
}

void sub_217EBCA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,char *a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;
  int v52;
  uint64_t v53;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  unsigned int v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (*(char *)(v53 - 89) < 0)
    operator delete(*(void **)(v53 - 112));
  if (*(char *)(v53 - 113) < 0)
  {
    operator delete(*(void **)(v53 - 136));
    if ((v52 & 1) == 0)
    {
LABEL_9:
      switch(*(_BYTE *)(v53 - 60))
      {
        case 2:
          v55 = *(unint64_t **)(v53 - 72);
          do
          {
            v56 = __ldaxr(v55);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v55));
          if (v57)
            goto LABEL_47;
          v58 = *(_QWORD *)(v53 - 72);
          if (!v58)
            goto LABEL_47;
          if (*(char *)(v58 + 31) < 0)
            operator delete(*(void **)(v58 + 8));
          v59 = (_QWORD *)v58;
          v60 = 0x1012C404EF22A49;
          goto LABEL_46;
        case 3:
          v70 = *(unint64_t **)(v53 - 72);
          do
          {
            v71 = __ldaxr(v70);
            v72 = v71 - 1;
          }
          while (__stlxr(v72, v70));
          if (v72)
            goto LABEL_47;
          v73 = *(_QWORD **)(v53 - 72);
          if (!v73)
            goto LABEL_47;
          v74 = (void *)v73[1];
          if (v74)
          {
            v73[2] = v74;
            operator delete(v74);
          }
          v59 = v73;
          v60 = 0x1080C409938AC02;
          goto LABEL_46;
        case 4:
          v61 = *(unint64_t **)(v53 - 72);
          do
          {
            v62 = __ldaxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (v63)
            goto LABEL_47;
          v64 = *(_QWORD **)(v53 - 72);
          if (!v64)
            goto LABEL_47;
          *(_QWORD *)(v53 - 136) = v64 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 136));
          goto LABEL_39;
        case 5:
          v75 = *(unint64_t **)(v53 - 72);
          do
          {
            v76 = __ldaxr(v75);
            v77 = v76 - 1;
          }
          while (__stlxr(v77, v75));
          if (v77)
            goto LABEL_47;
          v64 = *(_QWORD **)(v53 - 72);
          if (!v64)
            goto LABEL_47;
          *(_QWORD *)(v53 - 136) = v64 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 136));
LABEL_39:
          v59 = v64;
          v60 = 0x1020C405E66F15BLL;
          goto LABEL_46;
        case 8:
          v78 = *(unint64_t **)(v53 - 72);
          do
          {
            v79 = __ldaxr(v78);
            v80 = v79 - 1;
          }
          while (__stlxr(v80, v78));
          if (v80)
            goto LABEL_47;
          v81 = *(_QWORD *)(v53 - 72);
          if (!v81)
            goto LABEL_47;
          boost::detail::shared_count::~shared_count((unsigned int **)(v81 + 16));
          v59 = (_QWORD *)v81;
          v69 = -235920773;
          goto LABEL_45;
        case 9:
          v65 = *(unint64_t **)(v53 - 72);
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (v67)
            goto LABEL_47;
          v68 = *(_QWORD **)(v53 - 72);
          if (!v68)
            goto LABEL_47;
          v59 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v68);
          v69 = 2071181815;
LABEL_45:
          v60 = v69 | 0x1030C4000000000;
LABEL_46:
          MEMORY[0x219A19A08](v59, v60);
LABEL_47:
          *(_QWORD *)(v53 - 72) = 0;
          *(_DWORD *)(v53 - 64) = 0;
          *(_BYTE *)(v53 - 60) = 0;
          if (a28 < 0)
            operator delete(__p);
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a29, a30);
          __cxa_begin_catch(exception_object);
          std::current_exception();
          fill_error_from_exception(&a10);
          std::exception_ptr::~exception_ptr(&a10);
          __cxa_end_catch();
          JUMPOUT(0x217EBC358);
        default:
          goto LABEL_47;
      }
    }
  }
  else if (!v52)
  {
    goto LABEL_9;
  }
  __cxa_free_exception(v51);
  goto LABEL_9;
}

uint64_t turi::safe_varmap_get<turi::flexible_type>@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;

  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1, a2))
    turi::safe_varmap_get<turi::flexible_type>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,std::string)::{lambda(void)#1}::operator()();
  v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1, a2);
  return turi::variant_converter<turi::flexible_type,void>::get(v6, a3);
}

_QWORD *turi::safe_varmap_get<std::shared_ptr<turi::model_base>>@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  int *v6;
  _QWORD *result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1, a2))
    turi::safe_varmap_get<turi::flexible_type>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,std::string)::{lambda(void)#1}::operator()();
  v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1, a2);
  result = (_QWORD *)turi::variant_get_ref<std::shared_ptr<turi::model_base>>(v6);
  v8 = result[1];
  *a3 = *result;
  a3[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

_QWORD *tc_model_load_from_data(turi *__src, size_t __len, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  double v19;
  char *v20;
  const std::string *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  void *v43;
  void *v44;
  unsigned int v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  double v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  double v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::string::size_type v71;
  _QWORD *result;
  std::runtime_error *exception;
  std::string *v74;
  __int128 v75;
  const void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  void *v80[2];
  char v81;
  char v82[8];
  char *v83;
  std::string __p;
  uint64_t v85;
  void *v86;
  char v87;
  uint64_t v88;
  std::string __dst;
  _OWORD v90[4];
  _QWORD v91[3];
  _QWORD v92[3];
  std::string v93;
  std::string::size_type v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  std::string v100;
  std::string v101;
  size_t __idx;
  double v103;
  int v104;
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(__src);
  if (__src)
  {
    std::string::basic_string[abi:ne180100](&__dst, __src, __len);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](&__p, &__dst, 24);
    turi::get_unity_global_singleton(v6, v7, v8, v9, v10, v11, (uint64_t *)&v93);
    turi::unity_global::load_model_from_data((uint64_t ***)v93.__r_.__value_.__l.__data_, (std::locale::__imp *)&__p, (uint64_t)v82);
    size = (std::__shared_weak_count *)v93.__r_.__value_.__l.__size_;
    if (v93.__r_.__value_.__l.__size_)
    {
      v13 = (unint64_t *)(v93.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v80, "archive_version");
    turi::safe_varmap_get<turi::flexible_type>((uint64_t)v82, (const void **)v80, (uint64_t)&v103);
    v15 = 0;
    switch(v105)
    {
      case 0:
        v15 = *(_QWORD *)&v103;
        goto LABEL_83;
      case 1:
        v15 = (uint64_t)v103;
        goto LABEL_83;
      case 2:
        v19 = v103;
        __idx = 0;
        v20 = (char *)(*(_QWORD *)&v103 + 8);
        if (*(char *)(*(_QWORD *)&v103 + 31) < 0)
          v20 = *(char **)(*(_QWORD *)&v103 + 8);
        v21 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v101, v20);
        v15 = std::stoll(v21, &__idx, 10);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v101.__r_.__value_.__l.__data_);
        if (*(char *)(*(_QWORD *)&v19 + 31) < 0)
          v22 = *(_QWORD *)(*(_QWORD *)&v19 + 16);
        else
          v22 = *(unsigned __int8 *)(*(_QWORD *)&v19 + 31);
        if (__idx != v22)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v74 = std::string::append(&v100, " cannot be interpreted as an integer");
          v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          v101.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &v101);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        goto LABEL_40;
      case 3:
        v98 = 0;
        v99 = 0;
        v97 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v97, *(const void **)(*(_QWORD *)&v103 + 8), *(_QWORD *)(*(_QWORD *)&v103 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v103 + 16) - *(_QWORD *)(*(_QWORD *)&v103 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (v97)
        {
          v98 = v97;
          operator delete(v97);
        }
        goto LABEL_39;
      case 4:
        memset(v92, 0, sizeof(v92));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v92, *(uint64_t **)(*(_QWORD *)&v103 + 8), *(uint64_t **)(*(_QWORD *)&v103 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v103 + 16) - *(_QWORD *)(*(_QWORD *)&v103 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
        goto LABEL_39;
      case 5:
        memset(v91, 0, sizeof(v91));
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v91, *(uint64_t **)(*(_QWORD *)&v103 + 8), *(uint64_t **)(*(_QWORD *)&v103 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v103 + 16) - *(_QWORD *)(*(_QWORD *)&v103 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
        goto LABEL_39;
      case 6:
        v15 = (uint64_t)(*(_QWORD *)&v103 << 8) >> 8;
        goto LABEL_83;
      case 7:
        goto LABEL_83;
      case 8:
        v23 = v103;
        v24 = *(_QWORD *)(*(_QWORD *)&v103 + 16);
        *(_QWORD *)&v90[0] = *(_QWORD *)(*(_QWORD *)&v103 + 8);
        *((_QWORD *)&v90[0] + 1) = v24;
        if (v24)
        {
          v25 = (unsigned int *)(v24 + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v27 = *(_OWORD *)(*(_QWORD *)&v23 + 24);
        v28 = *(_OWORD *)(*(_QWORD *)&v23 + 56);
        v90[2] = *(_OWORD *)(*(_QWORD *)&v23 + 40);
        v90[3] = v28;
        v90[1] = v27;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)v90 + 1);
        goto LABEL_39;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(&v93, *(_QWORD *)&v103 + 8);
        turi::flexible_type_fail(0);
        if (v95)
        {
          v96 = v95;
          operator delete(v95);
        }
        if (v93.__r_.__value_.__r.__words[2])
        {
          v94 = v93.__r_.__value_.__r.__words[2];
          operator delete((void *)v93.__r_.__value_.__r.__words[2]);
        }
        v15 = v93.__r_.__value_.__l.__size_;
        if (!v93.__r_.__value_.__l.__size_)
          goto LABEL_40;
        v17 = (unint64_t *)(v93.__r_.__value_.__l.__size_ + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
        }
LABEL_39:
        v15 = 0;
LABEL_40:
        switch(v105)
        {
          case 2:
            v29 = *(unint64_t **)&v103;
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              v32 = v103;
              if (v103 == 0.0)
                goto LABEL_82;
              if (*(char *)(*(_QWORD *)&v103 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v103 + 8));
              v33 = v32;
              v34 = 0x1012C404EF22A49;
              goto LABEL_81;
            }
            break;
          case 3:
            v46 = *(unint64_t **)&v103;
            do
            {
              v47 = __ldaxr(v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v46));
            if (!v48)
            {
              v49 = v103;
              if (v103 == 0.0)
                goto LABEL_82;
              v50 = *(void **)(*(_QWORD *)&v103 + 8);
              if (v50)
              {
                *(_QWORD *)(*(_QWORD *)&v103 + 16) = v50;
                operator delete(v50);
              }
              v33 = v49;
              v34 = 0x1080C409938AC02;
              goto LABEL_81;
            }
            break;
          case 4:
            v35 = *(unint64_t **)&v103;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              v38 = v103;
              if (v103 == 0.0)
                goto LABEL_82;
              v93.__r_.__value_.__r.__words[0] = *(_QWORD *)&v103 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
              goto LABEL_74;
            }
            break;
          case 5:
            v51 = *(unint64_t **)&v103;
            do
            {
              v52 = __ldaxr(v51);
              v53 = v52 - 1;
            }
            while (__stlxr(v53, v51));
            if (!v53)
            {
              v38 = v103;
              if (v103 == 0.0)
                goto LABEL_82;
              v93.__r_.__value_.__r.__words[0] = *(_QWORD *)&v103 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
LABEL_74:
              v33 = v38;
              v34 = 0x1020C405E66F15BLL;
              goto LABEL_81;
            }
            break;
          case 8:
            v54 = *(unint64_t **)&v103;
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              v57 = v103;
              if (v103 == 0.0)
                goto LABEL_82;
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v103 + 16));
              v33 = v57;
              v45 = -235920773;
              goto LABEL_80;
            }
            break;
          case 9:
            v39 = *(unint64_t **)&v103;
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              v42 = v103;
              if (v103 != 0.0)
              {
                v43 = *(void **)(*(_QWORD *)&v103 + 48);
                if (v43)
                {
                  *(_QWORD *)(*(_QWORD *)&v103 + 56) = v43;
                  operator delete(v43);
                }
                v44 = *(void **)(*(_QWORD *)&v42 + 24);
                if (v44)
                {
                  *(_QWORD *)(*(_QWORD *)&v42 + 32) = v44;
                  operator delete(v44);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v42 + 8);
                v33 = v42;
                v45 = 2071181815;
LABEL_80:
                v34 = v45 | 0x1030C4000000000;
LABEL_81:
                MEMORY[0x219A19A08](*(_QWORD *)&v33, v34);
              }
LABEL_82:
              v103 = 0.0;
            }
            break;
          default:
            break;
        }
LABEL_83:
        v103 = 0.0;
        v104 = 0;
        v105 = 0;
        if (v81 < 0)
        {
          operator delete(v80[0]);
          if (v15)
          {
LABEL_85:
            if (v15 == 1)
            {
              std::string::basic_string[abi:ne180100]<0>(v76, "model");
              turi::safe_varmap_get<std::shared_ptr<turi::model_base>>((uint64_t)v82, v76, v90);
              v16 = (_QWORD *)operator new();
              v16[1] = 0;
              v16[2] = 0;
              *v16 = &capi_struct_type_info_tc_model_inst;
              *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v90[0];
              v90[0] = 0uLL;
              std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v16 + 1), (__int128 *)&v93);
              v58 = (std::__shared_weak_count *)v93.__r_.__value_.__l.__size_;
              if (v93.__r_.__value_.__l.__size_)
              {
                v59 = (unint64_t *)(v93.__r_.__value_.__l.__size_ + 8);
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              v61 = (std::__shared_weak_count *)*((_QWORD *)&v90[0] + 1);
              if (*((_QWORD *)&v90[0] + 1))
              {
                v62 = (unint64_t *)(*((_QWORD *)&v90[0] + 1) + 8);
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              if (v77 < 0)
              {
                v64 = (void *)v76[0];
LABEL_111:
                operator delete(v64);
                goto LABEL_115;
              }
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&v93, "Unknown model archive version");
              set_error(a3, &v93);
              if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v93.__r_.__value_.__l.__data_);
              v16 = 0;
            }
            goto LABEL_115;
          }
        }
        else if (v15)
        {
          goto LABEL_85;
        }
        std::string::basic_string[abi:ne180100]<0>(v78, "model_base");
        turi::safe_varmap_get<std::shared_ptr<turi::model_base>>((uint64_t)v82, (const void **)v78, v90);
        v16 = (_QWORD *)operator new();
        v16[1] = 0;
        v16[2] = 0;
        *v16 = &capi_struct_type_info_tc_model_inst;
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v90[0];
        v90[0] = 0uLL;
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v16 + 1), (__int128 *)&v93);
        v65 = (std::__shared_weak_count *)v93.__r_.__value_.__l.__size_;
        if (v93.__r_.__value_.__l.__size_)
        {
          v66 = (unint64_t *)(v93.__r_.__value_.__l.__size_ + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v68 = (std::__shared_weak_count *)*((_QWORD *)&v90[0] + 1);
        if (*((_QWORD *)&v90[0] + 1))
        {
          v69 = (unint64_t *)(*((_QWORD *)&v90[0] + 1) + 8);
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        if (v79 < 0)
        {
          v64 = v78[0];
          goto LABEL_111;
        }
LABEL_115:
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v82, v83);
        __p.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
        v71 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                  + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        __p.__r_.__value_.__r.__words[2] = v71;
        v85 = MEMORY[0x24BEDB848] + 16;
        if (v87 < 0)
          operator delete(v86);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](&v88);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        break;
      default:
        result = (_QWORD *)turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"data\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v16;
}

void sub_217EBD780(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *v66;
  int v67;
  uint64_t v68;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  unsigned int v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  void *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;

  if (!a2)
    _Unwind_Resume(a1);
  if (*(char *)(v68 - 89) < 0)
    operator delete(*(void **)(v68 - 112));
  if (*(char *)(v68 - 113) < 0)
  {
    operator delete(*(void **)(v68 - 136));
    if ((v67 & 1) == 0)
    {
LABEL_9:
      switch(*(_BYTE *)(v68 - 60))
      {
        case 2:
          v70 = *(unint64_t **)(v68 - 72);
          do
          {
            v71 = __ldaxr(v70);
            v72 = v71 - 1;
          }
          while (__stlxr(v72, v70));
          if (v72)
            goto LABEL_47;
          v73 = *(_QWORD *)(v68 - 72);
          if (!v73)
            goto LABEL_47;
          if (*(char *)(v73 + 31) < 0)
            operator delete(*(void **)(v73 + 8));
          v74 = (_QWORD *)v73;
          v75 = 0x1012C404EF22A49;
          goto LABEL_46;
        case 3:
          v85 = *(unint64_t **)(v68 - 72);
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (v87)
            goto LABEL_47;
          v88 = *(_QWORD **)(v68 - 72);
          if (!v88)
            goto LABEL_47;
          v89 = (void *)v88[1];
          if (v89)
          {
            v88[2] = v89;
            operator delete(v89);
          }
          v74 = v88;
          v75 = 0x1080C409938AC02;
          goto LABEL_46;
        case 4:
          v76 = *(unint64_t **)(v68 - 72);
          do
          {
            v77 = __ldaxr(v76);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, v76));
          if (v78)
            goto LABEL_47;
          v79 = *(_QWORD **)(v68 - 72);
          if (!v79)
            goto LABEL_47;
          *(_QWORD *)(v68 - 136) = v79 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v68 - 136));
          goto LABEL_39;
        case 5:
          v90 = *(unint64_t **)(v68 - 72);
          do
          {
            v91 = __ldaxr(v90);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, v90));
          if (v92)
            goto LABEL_47;
          v79 = *(_QWORD **)(v68 - 72);
          if (!v79)
            goto LABEL_47;
          *(_QWORD *)(v68 - 136) = v79 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v68 - 136));
LABEL_39:
          v74 = v79;
          v75 = 0x1020C405E66F15BLL;
          goto LABEL_46;
        case 8:
          v93 = *(unint64_t **)(v68 - 72);
          do
          {
            v94 = __ldaxr(v93);
            v95 = v94 - 1;
          }
          while (__stlxr(v95, v93));
          if (v95)
            goto LABEL_47;
          v96 = *(_QWORD *)(v68 - 72);
          if (!v96)
            goto LABEL_47;
          boost::detail::shared_count::~shared_count((unsigned int **)(v96 + 16));
          v74 = (_QWORD *)v96;
          v84 = -235920773;
          goto LABEL_45;
        case 9:
          v80 = *(unint64_t **)(v68 - 72);
          do
          {
            v81 = __ldaxr(v80);
            v82 = v81 - 1;
          }
          while (__stlxr(v82, v80));
          if (v82)
            goto LABEL_47;
          v83 = *(_QWORD **)(v68 - 72);
          if (!v83)
            goto LABEL_47;
          v74 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v83);
          v84 = 2071181815;
LABEL_45:
          v75 = v84 | 0x1030C4000000000;
LABEL_46:
          MEMORY[0x219A19A08](v74, v75);
LABEL_47:
          *(_QWORD *)(v68 - 72) = 0;
          *(_DWORD *)(v68 - 64) = 0;
          *(_BYTE *)(v68 - 60) = 0;
          if (a22 < 0)
            operator delete(__p);
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a23, (char *)a24);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a26);
          if (a66 < 0)
            operator delete(a61);
          __cxa_begin_catch(a1);
          std::current_exception();
          fill_error_from_exception(&a10);
          std::exception_ptr::~exception_ptr(&a10);
          __cxa_end_catch();
          JUMPOUT(0x217EBD050);
        default:
          goto LABEL_47;
      }
    }
  }
  else if (!v67)
  {
    goto LABEL_9;
  }
  __cxa_free_exception(v66);
  goto LABEL_9;
}

_QWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  a1[16] = MEMORY[0x24BEDB858] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3);
  return a1;
}

void sub_217EBDCAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](a1 + 128);
  return a1;
}

void tc_model_save(turi *a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::string v27;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a2)
    {
      turi::get_unity_global_singleton((uint64_t)a3, a4, a5, a6, a7, a8, &v25);
      v11 = v25;
      v12 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
      v23 = *((_QWORD *)a1 + 1);
      v24 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      *(_OWORD *)&v27.__r_.__value_.__r.__words[1] = 0uLL;
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]<0>(__p, a2);
      (*(void (**)(uint64_t, uint64_t *, std::string *, void **))(*(_QWORD *)v11 + 112))(v11, &v23, &v27, __p);
      if (v22 < 0)
        operator delete(__p[0]);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, (char *)v27.__r_.__value_.__l.__size_);
      v15 = v24;
      if (v24)
      {
        v16 = (unint64_t *)&v24->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v26;
      if (v26)
      {
        v19 = (unint64_t *)&v26->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(&v27, "\"url\" is null.");
    set_error(a3, &v27);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v27, "\"model\" is null.");
    set_error(a3, &v27);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_217EBDEE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 33) < 0)
    operator delete(*(void **)(v19 - 56));
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EBDED4);
}

void sub_217EBDF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_model_save_to_data(turi *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  turi *p_p;
  size_t v21;
  uint64_t v22;
  std::string::size_type v23;
  void *__p;
  std::__shared_weak_count *v26;
  unsigned __int8 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::string v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v30);
    turi::get_unity_global_singleton(v4, v5, v6, v7, v8, v9, (uint64_t *)&__p);
    v10 = __p;
    v11 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
    v28 = *((_QWORD *)a1 + 1);
    v29 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    turi::unity_global::save_model_to_data((uint64_t)v10, &v28, (std::string::size_type)&v30.__r_.__value_.__r.__words[2]);
    v14 = v29;
    if (v29)
    {
      v15 = (unint64_t *)&v29->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v26;
    if (v26)
    {
      v18 = (unint64_t *)&v26->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    std::stringbuf::str();
    if ((v27 & 0x80u) == 0)
      p_p = (turi *)&__p;
    else
      p_p = (turi *)__p;
    if ((v27 & 0x80u) == 0)
      v21 = v27;
    else
      v21 = (size_t)v26;
    v22 = tc_ft_create_from_string(p_p, v21);
    if ((char)v27 < 0)
      operator delete(__p);
    v30.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v23 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words
                              + *(_QWORD *)(v30.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                + 64);
    v30.__r_.__value_.__r.__words[2] = v23;
    v31 = MEMORY[0x24BEDB848] + 16;
    if (v33 < 0)
      operator delete(v32);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x219A198F4](&v34);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "\"model\" is null.");
    set_error(a2, &v30);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    return 0;
  }
  return v22;
}

void sub_217EBE178(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EBE158);
}

void sub_217EBE20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_217EBE32C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](v1);
  _Unwind_Resume(a1);
}

uint64_t *tc_model_name(turi *a1)
{
  unsigned __int8 v2;
  uint64_t v3;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  {
    tc_model_name::last_name = 0;
    *(_QWORD *)algn_254FEDD28 = 0;
    unk_254FEDD30 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &tc_model_name::last_name, &dword_217E69000);
  }
  v3 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 16))(*((_QWORD **)a1 + 1));
  MEMORY[0x219A19390](&tc_model_name::last_name, v3);
  if (byte_254FEDD37 >= 0)
    return &tc_model_name::last_name;
  else
    return (uint64_t *)tc_model_name::last_name;
}

void sub_217EBE414(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EBE3C0);
}

void sub_217EBE444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_model_call_method(turi *a1, char *__s, uint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v9[3];
  std::string *v10;
  int v11;
  uint64_t v12;
  void *__p;
  _BYTE v14[72];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v6 = (_BYTE *)*((_QWORD *)a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v9, (const void ***)(a3 + 8));
  turi::model_base::call_function(v6, (const void **)&__p, (uint64_t)v9);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v9, (char *)v9[1]);
  if ((v14[15] & 0x80000000) != 0)
    operator delete(__p);
  v7 = operator new();
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_QWORD *)v7 = &capi_struct_type_info_tc_variant_inst;
  v10 = (std::string *)v14;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v11, v11 ^ (v11 >> 31), &v10, (uint64_t)&v12);
  LODWORD(__p) = v11 ^ (v11 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v7 + 8), (unsigned int *)&__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v11);
  return v7;
}

void sub_217EBE5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EBE58CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t tc_ndarray_create_empty(turi *a1)
{
  uint64_t v1;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v1 = operator new();
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)v1 = 0u;
  std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v1);
  *(_QWORD *)v1 = &capi_struct_type_info_tc_ndarray_inst;
  return v1;
}

void sub_217EBE70C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  uint64_t v10;

  MEMORY[0x219A19A08](v10, 0x1030C40620C5048);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EBE6F4);
}

void sub_217EBE760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ndarray_create_from_data(unint64_t a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v32[3];
  int v33[2];
  std::__shared_weak_count *v34;
  unint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *v44;
  void *v45;
  void *__p;
  void *v47;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a2)
  {
    v36 = 0;
    v37 = 0;
    v38 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v36, a2, &a2[a1], a1);
    v35 = 1;
    v8 = (uint64_t *)v36;
    if (v36 != v37)
    {
      v9 = 1;
      do
      {
        v10 = *v8++;
        v9 *= v10;
        v35 = v9;
      }
      while (v8 != v37);
    }
    std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,unsigned long &,void>(&v35, v33);
    v42 = 0;
    std::vector<unsigned long>::vector(v32, a1, &v42);
    if (a3)
    {
      v11 = **(_QWORD ***)v33;
      v12 = 0;
      if (a1)
      {
        v13 = (uint64_t *)v32[0];
        v14 = (char *)v32[0] - 8;
        while (1)
        {
          v15 = 0;
          v16 = v13;
          v17 = a3;
          v18 = a1;
          do
          {
            v20 = *v17++;
            v19 = v20;
            v21 = *v16++;
            v15 += v21 * v19;
            --v18;
          }
          while (v18);
          v11[v12] = *(_QWORD *)&a4[8 * v15];
          v22 = a1;
          while (1)
          {
            v23 = *(_QWORD *)&v14[8 * v22] + 1;
            *(_QWORD *)&v14[8 * v22] = v23;
            if (v23 < a2[v22 - 1])
              break;
            *(_QWORD *)&v14[8 * v22--] = 0;
            if (!v22)
              goto LABEL_20;
          }
          ++v12;
        }
      }
      *v11 = *(_QWORD *)a4;
    }
    else
    {
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(*(char **)v33, a4, (uint64_t)&a4[8 * v35], v35);
    }
LABEL_20:
    v24 = operator new();
    *(_OWORD *)(v24 + 48) = 0u;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)v24 = 0u;
    std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v24);
    *(_QWORD *)v24 = &capi_struct_type_info_tc_ndarray_inst;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    turi::flexible_type_impl::ndarray<double>::ndarray(&v42, v33, (uint64_t)&v36, (uint64_t)&v39, 0);
    turi::flexible_type_impl::ndarray<double>::operator=(v24 + 8, (uint64_t)&v42);
    if (__p)
    {
      v47 = __p;
      operator delete(__p);
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    v25 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v39)
    {
      v40 = v39;
      operator delete(v39);
    }
    if (v32[0])
    {
      v32[1] = v32[0];
      operator delete(v32[0]);
    }
    v28 = v34;
    if (v34)
    {
      v29 = (unint64_t *)&v34->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
  }
  else
  {
    v24 = operator new();
    *(_OWORD *)(v24 + 48) = 0u;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)v24 = 0u;
    std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v24);
    *(_QWORD *)v24 = &capi_struct_type_info_tc_ndarray_inst;
  }
  return v24;
}

void sub_217EBEA54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  MEMORY[0x219A19A08](v20, 0x1030C40620C5048);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EBEA38);
}

void sub_217EBEB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ndarray_num_dimensions(turi *a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
    return (uint64_t)(*((_QWORD *)a1 + 4) - *((_QWORD *)a1 + 3)) >> 3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_ndarray\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EBEBBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EBEBA8);
}

void sub_217EBEC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ndarray_shape(turi *a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
    return *((_QWORD *)a1 + 3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_ndarray\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EBEC98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EBEC84);
}

void sub_217EBECE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ndarray_strides(turi *a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
    return *((_QWORD *)a1 + 6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_ndarray\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EBED74(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EBED60);
}

void sub_217EBEDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_ndarray_data(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (*a1[1] != a1[1][1])
    {
      v5 = a1[3];
      v4 = a1[4];
      if (v4 != v5)
      {
        v6 = 1;
        do
        {
          v7 = *v5++;
          v6 *= v7;
        }
        while (v5 != v4);
        if (v6)
          return turi::flexible_type_impl::ndarray<double>::at(a1 + 1, 0);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_ndarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217EBEE8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EBEE78);
}

void sub_217EBEED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_impl::ndarray<double>::at(uint64_t **a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = (unint64_t)a1[8] + a2;
  v3 = **a1;
  if (v2 >= ((*a1)[1] - v3) >> 3)
    turi::flexible_type_impl::ndarray<double>::at(unsigned long)const::{lambda(void)#1}::operator()();
  return v3 + 8 * v2;
}

uint64_t tc_ndarray_writable_data(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (*(_QWORD *)a1[1] != *(_QWORD *)(a1[1] + 8))
    {
      v5 = (uint64_t *)a1[3];
      v4 = (uint64_t *)a1[4];
      if (v4 != v5)
      {
        v6 = 1;
        do
        {
          v7 = *v5++;
          v6 *= v7;
        }
        while (v5 != v4);
        if (v6)
        {
          turi::flexible_type_impl::ndarray<double>::ensure_unique(a1 + 1);
          return turi::flexible_type_impl::ndarray<double>::at(a1 + 1, 0);
        }
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_ndarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217EBF014(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EBEFFCLL);
}

void sub_217EBF060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::ensure_unique(uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v1 = a1[1];
  if (v1)
  {
    if (*(uint64_t *)(v1 + 8) >= 1)
    {
      std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double>&,void>(*a1, &v6);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a1, &v6);
      v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
      if (*((_QWORD *)&v6 + 1))
      {
        v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 - 1, v4));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
  }
}

uint64_t turi::flexible_type_impl::ndarray<double>::at(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  turi::flexible_type_impl::ndarray<double>::ensure_unique(a1);
  v4 = a1[8] + a2;
  v5 = *(_QWORD *)*a1;
  if (v4 >= (*(_QWORD *)(*a1 + 8) - v5) >> 3)
    turi::flexible_type_impl::ndarray<double>::at(unsigned long)::{lambda(void)#1}::operator()();
  return v5 + 8 * v4;
}

_QWORD *tc_parameters_create_empty(turi *a1)
{
  _QWORD *result;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  result = (_QWORD *)operator new();
  result[3] = 0;
  result[2] = 0;
  *result = &capi_struct_type_info_tc_parameters_inst;
  result[1] = result + 2;
  return result;
}

void sub_217EBF1DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EBF1CCLL);
}

void sub_217EBF208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_parameters_add(uint64_t **a1, char *__s, uint64_t a3, uint64_t *a4)
{
  unsigned int *v8;
  std::string __p;
  std::string *p_p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, __s);
      p_p = &__p;
      v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v8 + 14, (uint64_t *)(a3 + 8));
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_variant\" is null.");
      set_error(a4, &__p);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a4, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217EBF308(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EBF2F0);
}

void sub_217EBF364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_entry_exists(turi *a1, char *__s, uint64_t *a3)
{
  _BOOL8 v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (turi *)((char *)a1 + 16) != (turi *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217EBF434(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EBF418);
}

void sub_217EBF488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_parameters_retrieve(turi *a1, char *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v6 = operator new();
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_QWORD *)v6 = &capi_struct_type_info_tc_variant_inst;
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    v7 = (uint64_t *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v6 + 8), v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217EBF5A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EBF584);
}

void sub_217EBF5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_parameters_add_int64(uint64_t **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *v7;
  uint64_t v8;
  _OWORD *v9;
  _BYTE __p[13];
  char v11;
  std::string v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::flexible_type_converter<long long>::set(&v8, (uint64_t)__p);
    *(std::string::size_type *)((char *)&v12[0].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)&__p[5];
    v12[0].__r_.__value_.__l.__size_ = *(_QWORD *)__p;
    v12[0].__r_.__value_.__s.__data_[20] = __p[12];
    LODWORD(v12[0].__r_.__value_.__l.__data_) = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    v9 = __p;
    v7 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, &v9);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v7 + 14, (unsigned int *)v12);
    if (v11 < 0)
      operator delete(*(void **)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v12);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "\"tc_parameters\" is null.");
    set_error(a4, v12);
    if (SHIBYTE(v12[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12[0].__r_.__value_.__l.__data_);
  }
}

void sub_217EBF740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EBF710);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_double(uint64_t **a1, char *a2, uint64_t *a3, double a4)
{
  unsigned int *v7;
  double v8;
  _OWORD *v9;
  _BYTE __p[13];
  char v11;
  std::string v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = a4;
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::flexible_type_converter<double>::set(&v8, (uint64_t)__p);
    *(std::string::size_type *)((char *)&v12[0].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)&__p[5];
    v12[0].__r_.__value_.__l.__size_ = *(_QWORD *)__p;
    v12[0].__r_.__value_.__s.__data_[20] = __p[12];
    LODWORD(v12[0].__r_.__value_.__l.__data_) = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    v9 = __p;
    v7 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, &v9);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v7 + 14, (unsigned int *)v12);
    if (v11 < 0)
      operator delete(*(void **)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v12);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "\"tc_parameters\" is null.");
    set_error(a3, v12);
    if (SHIBYTE(v12[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12[0].__r_.__value_.__l.__data_);
  }
}

void sub_217EBF924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EBF8F4);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_cstring(uint64_t **a1, char *a2, char *__s, uint64_t *a4)
{
  unsigned int *v8;
  void *v9;
  std::string v10;
  _OWORD *v11;
  _BYTE __p[13];
  char v13;
  std::string v14[3];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "\"tc_parameters\" is null.");
    set_error(a4, v14);
LABEL_11:
    if ((SHIBYTE(v14[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v9 = (void *)v14[0].__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  if (!__s)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "\"cstring\" is null.");
    set_error(a4, v14);
    goto LABEL_11;
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, __s);
  turi::flexible_type_converter<std::string>::set(&v10, (uint64_t)__p);
  *(std::string::size_type *)((char *)&v14[0].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)&__p[5];
  v14[0].__r_.__value_.__l.__size_ = *(_QWORD *)__p;
  v14[0].__r_.__value_.__s.__data_[20] = __p[12];
  LODWORD(v14[0].__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v11 = __p;
  v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, &v11);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v8 + 14, (unsigned int *)v14);
  if (v13 < 0)
    operator delete(*(void **)__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v14);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (void *)v10.__r_.__value_.__r.__words[0];
LABEL_13:
    operator delete(v9);
  }
}

void sub_217EBFB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    if (a29 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EBFB14);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_string(uint64_t **a1, char *a2, void *__src, size_t __len, uint64_t *a5)
{
  unsigned int *v10;
  void *v11;
  std::string __dst;
  _OWORD *v13;
  _BYTE __p[13];
  char v15;
  std::string v16[3];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "\"tc_parameters\" is null.");
    set_error(a5, v16);
LABEL_11:
    if ((SHIBYTE(v16[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v11 = (void *)v16[0].__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  if (!__src)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "\"string\" is null.");
    set_error(a5, v16);
    goto LABEL_11;
  }
  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  turi::flexible_type_converter<std::string>::set(&__dst, (uint64_t)__p);
  *(std::string::size_type *)((char *)&v16[0].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)&__p[5];
  v16[0].__r_.__value_.__l.__size_ = *(_QWORD *)__p;
  v16[0].__r_.__value_.__s.__data_[20] = __p[12];
  LODWORD(v16[0].__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v13 = __p;
  v10 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, &v13);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v10 + 14, (unsigned int *)v16);
  if (v15 < 0)
    operator delete(*(void **)__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v16);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    v11 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_13:
    operator delete(v11);
  }
}

void sub_217EBFD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    if (a29 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EBFD60);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_double_array(uint64_t **a1, char *a2, const void *a3, unint64_t a4, uint64_t *a5)
{
  unsigned int *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _OWORD *v15;
  _BYTE __p[13];
  char v17;
  std::string v18[3];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "\"tc_parameters\" is null.");
    set_error(a5, v18);
LABEL_11:
    if ((SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v11 = (void *)v18[0].__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "\"data\" is null.");
    set_error(a5, v18);
    goto LABEL_11;
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v12, a3, (uint64_t)a3 + 8 * a4, a4);
  turi::flexible_type_converter<std::vector<double>>::set((uint64_t)&v12, (uint64_t)__p);
  *(std::string::size_type *)((char *)&v18[0].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)&__p[5];
  v18[0].__r_.__value_.__l.__size_ = *(_QWORD *)__p;
  v18[0].__r_.__value_.__s.__data_[20] = __p[12];
  LODWORD(v18[0].__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v15 = __p;
  v10 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, &v15);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v10 + 14, (unsigned int *)v18);
  if (v17 < 0)
    operator delete(*(void **)__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v18);
  v11 = v12;
  if (v12)
  {
    v13 = v12;
LABEL_13:
    operator delete(v11);
  }
}

void sub_217EBFFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
  {
    if (a26 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EBFFBCLL);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_flex_list(uint64_t **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *v8;
  _OWORD *v9;
  _BYTE __p[13];
  char v11;
  std::string v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a3)
    {
      turi::flexible_type_converter<std::vector<turi::flexible_type>>::set((uint64_t **)(a3 + 8), (uint64_t)__p);
      *(std::string::size_type *)((char *)&v12[0].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)&__p[5];
      v12[0].__r_.__value_.__l.__size_ = *(_QWORD *)__p;
      v12[0].__r_.__value_.__s.__data_[20] = __p[12];
      LODWORD(v12[0].__r_.__value_.__l.__data_) = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, a2);
      v9 = __p;
      v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, &v9);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v8 + 14, (unsigned int *)v12);
      if (v11 < 0)
        operator delete(*(void **)__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v12);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "\"tc_flex_list\" is null.");
    set_error(a4, v12);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "\"tc_parameters\" is null.");
    set_error(a4, v12);
  }
  if (SHIBYTE(v12[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12[0].__r_.__value_.__l.__data_);
}

void sub_217EC0218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC01E8);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_flex_dict(uint64_t **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *v8;
  _OWORD *v9;
  _BYTE __p[13];
  char v11;
  std::string v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a3)
    {
      turi::flexible_type_converter<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::set((uint64_t **)(a3 + 8), (uint64_t)__p);
      *(std::string::size_type *)((char *)&v12[0].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)&__p[5];
      v12[0].__r_.__value_.__l.__size_ = *(_QWORD *)__p;
      v12[0].__r_.__value_.__s.__data_[20] = __p[12];
      LODWORD(v12[0].__r_.__value_.__l.__data_) = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, a2);
      v9 = __p;
      v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, &v9);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v8 + 14, (unsigned int *)v12);
      if (v11 < 0)
        operator delete(*(void **)__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v12);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "\"tc_flex_dict\" is null.");
    set_error(a4, v12);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "\"tc_parameters\" is null.");
    set_error(a4, v12);
  }
  if (SHIBYTE(v12[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12[0].__r_.__value_.__l.__data_);
}

void sub_217EC0428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC03F8);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_datetime(uint64_t **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *v8;
  _OWORD *v9;
  _BYTE __p[13];
  char v11;
  std::string v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a3)
    {
      turi::flexible_type_converter<turi::flex_date_time>::set((uint64_t *)(a3 + 8), (uint64_t)__p);
      *(std::string::size_type *)((char *)&v12[0].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)&__p[5];
      v12[0].__r_.__value_.__l.__size_ = *(_QWORD *)__p;
      v12[0].__r_.__value_.__s.__data_[20] = __p[12];
      LODWORD(v12[0].__r_.__value_.__l.__data_) = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, a2);
      v9 = __p;
      v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, &v9);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v8 + 14, (unsigned int *)v12);
      if (v11 < 0)
        operator delete(*(void **)__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v12);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "\"tc_datetime\" is null.");
    set_error(a4, v12);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "\"tc_parameters\" is null.");
    set_error(a4, v12);
  }
  if (SHIBYTE(v12[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12[0].__r_.__value_.__l.__data_);
}

void sub_217EC0638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC0608);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_image(uint64_t **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  _QWORD *v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  unsigned int *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void **v76;
  void *v77[2];
  char v78;
  uint64_t v79[2];
  std::string __p[3];
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a3)
    {
      *(uint64_t *)((char *)v79 + 5) = 0x800000000000000;
      v8 = operator new();
      v9 = v8;
      *(_QWORD *)v8 = 0;
      *(_OWORD *)(v8 + 8) = 0u;
      v10 = (void **)(v8 + 8);
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 64) = 3;
      v79[0] = v8;
      *(_QWORD *)v8 = 1;
      switch(BYTE4(v79[1]))
      {
        case 2:
          if (*(_QWORD *)v8 != 1)
          {
            v11 = (_QWORD *)operator new();
            v12 = v79[0];
            *v11 = *(_QWORD *)v79[0];
            v13 = (std::string *)(v11 + 1);
            if (*(char *)(v12 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(v12 + 8), *(_QWORD *)(v12 + 16));
            }
            else
            {
              v14 = *(_OWORD *)(v12 + 8);
              v11[3] = *(_QWORD *)(v12 + 24);
              *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
            }
            v79[0] = (uint64_t)v11;
            *v11 = 1;
            do
            {
              v44 = __ldaxr((unint64_t *)v9);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, (unint64_t *)v9));
            if (!v45)
            {
              if (*(char *)(v9 + 31) < 0)
                operator delete(*v10);
              v23 = (_QWORD *)v9;
              v30 = 0x1012C404EF22A49;
              goto LABEL_52;
            }
          }
          break;
        case 3:
          if (*(_QWORD *)v8 != 1)
          {
            v25 = (_QWORD *)operator new();
            v26 = v79[0];
            *v25 = *(_QWORD *)v79[0];
            v25[2] = 0;
            v25[3] = 0;
            v25[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v25 + 1, *(const void **)(v26 + 8), *(_QWORD *)(v26 + 16), (uint64_t)(*(_QWORD *)(v26 + 16) - *(_QWORD *)(v26 + 8)) >> 3);
            v79[0] = (uint64_t)v25;
            *v25 = 1;
            do
            {
              v27 = __ldaxr((unint64_t *)v9);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, (unint64_t *)v9));
            if (!v28)
            {
              v29 = *v10;
              if (*v10)
              {
                *(_QWORD *)(v9 + 16) = v29;
                operator delete(v29);
              }
              v23 = (_QWORD *)v9;
              v30 = 0x1080C409938AC02;
              goto LABEL_52;
            }
          }
          break;
        case 4:
          if (*(_QWORD *)v8 != 1)
          {
            v15 = (_QWORD *)operator new();
            v16 = v79[0];
            *v15 = *(_QWORD *)v79[0];
            v15[2] = 0;
            v15[3] = 0;
            v15[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v15 + 1, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 4);
            v79[0] = (uint64_t)v15;
            *v15 = 1;
            do
            {
              v17 = __ldaxr((unint64_t *)v9);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, (unint64_t *)v9));
            if (!v18)
            {
              v77[0] = v10;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
              goto LABEL_35;
            }
          }
          break;
        case 5:
          if (*(_QWORD *)v8 != 1)
          {
            v31 = (_QWORD *)operator new();
            v32 = v79[0];
            *v31 = *(_QWORD *)v79[0];
            v31[2] = 0;
            v31[3] = 0;
            v31[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v31 + 1, *(uint64_t **)(v32 + 8), *(uint64_t **)(v32 + 16), (uint64_t)(*(_QWORD *)(v32 + 16) - *(_QWORD *)(v32 + 8)) >> 5);
            v79[0] = (uint64_t)v31;
            *v31 = 1;
            do
            {
              v33 = __ldaxr((unint64_t *)v9);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, (unint64_t *)v9));
            if (!v34)
            {
              v77[0] = v10;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
LABEL_35:
              v23 = (_QWORD *)v9;
              v30 = 0x1020C405E66F15BLL;
              goto LABEL_52;
            }
          }
          break;
        case 8:
          if (*(_QWORD *)v8 != 1)
          {
            v35 = operator new();
            v36 = v79[0];
            *(_QWORD *)v35 = *(_QWORD *)v79[0];
            *(_QWORD *)(v35 + 8) = *(_QWORD *)(v36 + 8);
            v37 = *(_QWORD *)(v36 + 16);
            *(_QWORD *)(v35 + 16) = v37;
            if (v37)
            {
              v38 = (unsigned int *)(v37 + 8);
              do
                v39 = __ldxr(v38);
              while (__stxr(v39 + 1, v38));
            }
            v40 = *(_OWORD *)(v36 + 24);
            v41 = *(_OWORD *)(v36 + 40);
            *(_OWORD *)(v35 + 56) = *(_OWORD *)(v36 + 56);
            *(_OWORD *)(v35 + 40) = v41;
            *(_OWORD *)(v35 + 24) = v40;
            v79[0] = v35;
            *(_QWORD *)v35 = 1;
            do
            {
              v42 = __ldaxr((unint64_t *)v9);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, (unint64_t *)v9));
            if (!v43)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v9 + 16));
              v23 = (_QWORD *)v9;
              v24 = -235920773;
              goto LABEL_44;
            }
          }
          break;
        case 9:
          if (*(_QWORD *)v8 != 1)
          {
            v19 = (_QWORD *)operator new();
            v20 = v79[0] + 8;
            *v19 = *(_QWORD *)v79[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v19 + 1, v20);
            v79[0] = (uint64_t)v19;
            *v19 = 1;
            do
            {
              v21 = __ldaxr((unint64_t *)v9);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, (unint64_t *)v9));
            if (!v22)
            {
              v23 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v9);
              v24 = 2071181815;
LABEL_44:
              v30 = v24 | 0x1030C4000000000;
LABEL_52:
              MEMORY[0x219A19A08](v23, v30);
            }
          }
          break;
        default:
          break;
      }
      v46 = v79[0];
      boost::shared_ptr<char []>::operator=((__int128 *)(v79[0] + 8), (uint64_t *)(a3 + 8));
      v47 = *(_OWORD *)(a3 + 56);
      v48 = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(v46 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(v46 + 40) = v48;
      *(_OWORD *)(v46 + 56) = v47;
      memset(v77, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v77, v79);
      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 5) = *(std::string::size_type *)((char *)v77 + 5);
      __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v77[0];
      __p[0].__r_.__value_.__s.__data_[20] = BYTE4(v77[1]);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      std::string::basic_string[abi:ne180100]<0>(v77, a2);
      v76 = v77;
      v49 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)v77, (uint64_t)&std::piecewise_construct, (_OWORD **)&v76);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v49 + 14, (unsigned int *)__p);
      if (v78 < 0)
        operator delete(v77[0]);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
      switch(BYTE4(v79[1]))
      {
        case 2:
          v50 = (unint64_t *)v79[0];
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v53 = v79[0];
            if (v79[0])
            {
              if (*(char *)(v79[0] + 31) < 0)
                operator delete(*(void **)(v79[0] + 8));
              v54 = (_QWORD *)v53;
              v55 = 0x1012C404EF22A49;
              goto LABEL_92;
            }
          }
          break;
        case 3:
          v64 = (unint64_t *)v79[0];
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
          {
            v67 = v79[0];
            if (v79[0])
            {
              v68 = *(void **)(v79[0] + 8);
              if (v68)
              {
                *(_QWORD *)(v79[0] + 16) = v68;
                operator delete(v68);
              }
              v54 = (_QWORD *)v67;
              v55 = 0x1080C409938AC02;
              goto LABEL_92;
            }
          }
          break;
        case 4:
          v56 = (unint64_t *)v79[0];
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (!v58)
          {
            v59 = v79[0];
            if (v79[0])
            {
              v77[0] = (void *)(v79[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
              goto LABEL_85;
            }
          }
          break;
        case 5:
          v69 = (unint64_t *)v79[0];
          do
          {
            v70 = __ldaxr(v69);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, v69));
          if (!v71)
          {
            v59 = v79[0];
            if (v79[0])
            {
              v77[0] = (void *)(v79[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
LABEL_85:
              v54 = (_QWORD *)v59;
              v55 = 0x1020C405E66F15BLL;
              goto LABEL_92;
            }
          }
          break;
        case 8:
          v72 = (unint64_t *)v79[0];
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (!v74)
          {
            v75 = v79[0];
            if (v79[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v79[0] + 16));
              v54 = (_QWORD *)v75;
              v63 = -235920773;
              goto LABEL_91;
            }
          }
          break;
        case 9:
          v60 = (unint64_t *)v79[0];
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          if (!v62 && v79[0])
          {
            v54 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v79[0]);
            v63 = 2071181815;
LABEL_91:
            v55 = v63 | 0x1030C4000000000;
LABEL_92:
            MEMORY[0x219A19A08](v54, v55);
          }
          break;
        default:
          return;
      }
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_flex_image\" is null.");
    set_error(a4, __p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a4, __p);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
}

void sub_217EC0E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, int a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;

  if (a2)
  {
    MEMORY[0x219A19A08](v27, 0x1012C404EF22A49);
    switch(a21)
    {
      case 2:
        v29 = (unint64_t *)a19;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v54 = a19;
          if (a19)
          {
            if (*(char *)(a19 + 31) < 0)
              operator delete(*(void **)(a19 + 8));
            MEMORY[0x219A19A08](v54, 0x1012C404EF22A49);
          }
        }
        goto LABEL_42;
      case 3:
        v32 = (unint64_t *)a19;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (v34)
          goto LABEL_42;
        v35 = a19;
        if (!a19)
          goto LABEL_36;
        v36 = *(void **)(a19 + 8);
        if (v36)
        {
          *(_QWORD *)(a19 + 16) = v36;
          operator delete(v36);
        }
        v37 = (_QWORD *)v35;
        v38 = 0x1080C409938AC02;
        goto LABEL_35;
      case 4:
        v39 = (unint64_t *)a19;
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (v41)
          goto LABEL_42;
        v42 = a19;
        if (!a19)
          goto LABEL_36;
        a13 = (void *)(a19 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
        goto LABEL_23;
      case 5:
        v43 = (unint64_t *)a19;
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (v45)
          goto LABEL_42;
        v42 = a19;
        if (!a19)
          goto LABEL_36;
        a13 = (void *)(a19 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
LABEL_23:
        v37 = (_QWORD *)v42;
        v38 = 0x1020C405E66F15BLL;
        goto LABEL_35;
      case 8:
        v46 = (unint64_t *)a19;
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (v48)
          goto LABEL_42;
        v49 = a19;
        if (!a19)
          goto LABEL_36;
        boost::detail::shared_count::~shared_count((unsigned int **)(a19 + 16));
        v37 = (_QWORD *)v49;
        v50 = -235920773;
        goto LABEL_34;
      case 9:
        v51 = (unint64_t *)a19;
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (v53)
          goto LABEL_42;
        if (!a19)
          goto LABEL_36;
        v37 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a19);
        v50 = 2071181815;
LABEL_34:
        v38 = v50 | 0x1030C4000000000;
LABEL_35:
        MEMORY[0x219A19A08](v37, v38);
LABEL_36:
        a19 = 0;
LABEL_42:
        __cxa_begin_catch(exception_object);
        std::current_exception();
        fill_error_from_exception(&a10);
        std::exception_ptr::~exception_ptr(&a10);
        __cxa_end_catch();
        JUMPOUT(0x217EC0DD0);
      default:
        goto LABEL_42;
    }
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_flexible_type(uint64_t **a1, char *__s, uint64_t a3, uint64_t *a4)
{
  unsigned int *v8;
  std::string __p;
  std::string *p_p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, __s);
      p_p = &__p;
      v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<turi::flexible_type>(v8 + 14, a3 + 8);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_flexible_type\" is null.");
      set_error(a4, &__p);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a4, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217EC135C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC1344);
}

void sub_217EC13B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_parameters_add_sarray(uint64_t **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p;
  std::__shared_weak_count *v18;
  char v19;
  void *v20;
  std::__shared_weak_count *v21;
  void **p_p;
  std::string v23[3];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a3)
    {
      turi::gl_sarray::get_proxy(a3 + 8, &v20);
      __p = v20;
      v18 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::set((uint64_t *)&__p, (uint64_t)v23);
      v10 = v18;
      if (v18)
      {
        v11 = (unint64_t *)&v18->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, a2);
      p_p = &__p;
      v13 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v13 + 14, (unsigned int *)v23);
      if (v19 < 0)
        operator delete(__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v23);
      v14 = v21;
      if (v21)
      {
        v15 = (unint64_t *)&v21->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v23, "\"tc_sarray\" is null.");
    set_error(a4, v23);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "\"tc_parameters\" is null.");
    set_error(a4, v23);
  }
  if (SHIBYTE(v23[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23[0].__r_.__value_.__l.__data_);
}

void sub_217EC15A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
  {
    if (a26 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC1570);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_sframe(uint64_t **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p;
  std::__shared_weak_count *v18;
  char v19;
  void *v20;
  std::__shared_weak_count *v21;
  void **p_p;
  std::string v23[3];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a3)
    {
      turi::gl_sframe::get_proxy(a3 + 8, &v20);
      __p = v20;
      v18 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)&__p, (uint64_t)v23);
      v10 = v18;
      if (v18)
      {
        v11 = (unint64_t *)&v18->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, a2);
      p_p = &__p;
      v13 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v13 + 14, (unsigned int *)v23);
      if (v19 < 0)
        operator delete(__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v23);
      v14 = v21;
      if (v21)
      {
        v15 = (unint64_t *)&v21->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v23, "\"tc_sframe\" is null.");
    set_error(a4, v23);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "\"tc_parameters\" is null.");
    set_error(a4, v23);
  }
  if (SHIBYTE(v23[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23[0].__r_.__value_.__l.__data_);
}

void sub_217EC184C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
  {
    if (a26 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC181CLL);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_parameters(uint64_t **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *v8;
  void *__p[2];
  char v10;
  void **v11;
  std::string v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1 && a3)
  {
    boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper((uint64_t **)&v12[0].__r_.__value_.__l.__size_, (const void ***)(a3 + 8));
    LODWORD(v12[0].__r_.__value_.__l.__data_) = 6;
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    v11 = __p;
    v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v11);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v8 + 14, (unsigned int *)v12);
    if (v10 < 0)
      operator delete(__p[0]);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v12);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "\"tc_parameters\" is null.");
    set_error(a4, v12);
    if (SHIBYTE(v12[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12[0].__r_.__value_.__l.__data_);
  }
}

void sub_217EC1A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC1A34);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_model(uint64_t **a1, char *__s, uint64_t a3, uint64_t *a4)
{
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int *v11;
  void *__p[2];
  char v13;
  void **v14;
  std::string v15[3];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a3)
    {
      v8 = *(_QWORD *)(a3 + 16);
      v15[0].__r_.__value_.__l.__size_ = *(_QWORD *)(a3 + 8);
      v15[0].__r_.__value_.__r.__words[2] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      LODWORD(v15[0].__r_.__value_.__l.__data_) = 3;
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      v14 = __p;
      v11 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v14);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v11 + 14, (unsigned int *)v15);
      if (v13 < 0)
        operator delete(__p[0]);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v15);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "\"tc_model\" is null.");
    set_error(a4, v15);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "\"tc_parameters\" is null.");
    set_error(a4, v15);
  }
  if (SHIBYTE(v15[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15[0].__r_.__value_.__l.__data_);
}

void sub_217EC1C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC1C40);
  }
  _Unwind_Resume(exception_object);
}

BOOL tc_parameters_is_int64(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*v6 == *v6 >> 31)
      return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217EC1DF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC1DE0);
}

void sub_217EC1E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_217EC1ED4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_217EC1EF8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_is_double(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*v6 == *v6 >> 31)
      return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217EC1FD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC1FC0);
}

void sub_217EC2030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_is_cstring(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*v6 == *v6 >> 31)
      return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 2;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217EC2114(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC20FCLL);
}

void sub_217EC216C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_is_string(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*v6 == *v6 >> 31)
      return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 2;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217EC2250(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC2238);
}

void sub_217EC22A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_is_double_array(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*v6 == *v6 >> 31)
      return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 3;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217EC238C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC2374);
}

void sub_217EC23E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_is_flex_list(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*v6 == *v6 >> 31)
      return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 4;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217EC24C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC24B0);
}

void sub_217EC2520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_is_flex_dict(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*v6 == *v6 >> 31)
      return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 5;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217EC2604(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC25ECLL);
}

void sub_217EC265C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_is_datetime(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*v6 == *v6 >> 31)
      return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 6;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217EC2740(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC2728);
}

void sub_217EC2798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_is_image(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*v6 == *v6 >> 31)
      return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 8;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217EC287C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC2864);
}

void sub_217EC28D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_is_flexible_type(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  _BOOL8 v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    v7 = *v6 == *v6 >> 31;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v7;
}

void sub_217EC29A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC2988);
}

void sub_217EC29F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_is_sarray(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  _BOOL8 v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    v7 = (*v6 ^ (*v6 >> 31)) == 5;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v7;
}

void sub_217EC2ACC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC2AB0);
}

void sub_217EC2B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_is_sframe(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  _BOOL8 v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    v7 = (*v6 ^ (*v6 >> 31)) == 4;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v7;
}

void sub_217EC2BF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC2BD8);
}

void sub_217EC2C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_is_parameters(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  _BOOL8 v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    v7 = (*v6 ^ (*v6 >> 31)) == 6;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v7;
}

void sub_217EC2D1C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC2D00);
}

void sub_217EC2D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_parameters_is_model(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  _BOOL8 v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    v7 = (*v6 ^ (*v6 >> 31)) == 3;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v7;
}

void sub_217EC2E44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC2E28);
}

void sub_217EC2E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_parameters_retrieve_int64(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return *(_QWORD *)turi::variant_get_ref<turi::flexible_type>(v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
}

void sub_217EC2F68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC2F50);
}

void sub_217EC2FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

double tc_parameters_retrieve_double(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return *(double *)turi::variant_get_ref<turi::flexible_type>(v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0.0;
  }
}

void sub_217EC3090(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC3078);
}

void sub_217EC30E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_parameters_retrieve_string(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = *(_QWORD *)turi::variant_get_ref<turi::flexible_type>(v6);
    v8 = operator new();
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = &capi_struct_type_info_tc_flexible_type_inst;
    turi::flexible_type::flexible_type<std::string>((uint64_t)&__p, (const std::string *)(v7 + 8));
    *(_QWORD *)(v8 + 13) = *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 5);
    *(_QWORD *)(v8 + 8) = __p.__r_.__value_.__r.__words[0];
    *(_BYTE *)(v8 + 20) = __p.__r_.__value_.__s.__data_[12];
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217EC323C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2)
  {
    if (a16 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC3204);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_parameters_retrieve_array(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t **v9;
  _QWORD *v10;
  void **v11;
  char *v12;
  char *v13;
  const void *v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = *(_QWORD *)turi::variant_get_ref<turi::flexible_type>(v6);
    v8 = operator new();
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (unint64_t **)(v8 + 8);
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = &capi_struct_type_info_tc_flexible_type_inst;
    v10 = (_QWORD *)operator new();
    *v10 = 0;
    v10[1] = 0;
    v11 = (void **)(v10 + 1);
    v10[2] = 0;
    v10[3] = 0;
    *v10 = 1;
    v12 = (char *)v10;
    if (*v10 != 1)
    {
      v13 = (char *)operator new();
      v14 = (const void *)v10[1];
      *(_QWORD *)v13 = *v10;
      *((_QWORD *)v13 + 2) = 0;
      *((_QWORD *)v13 + 3) = 0;
      *((_QWORD *)v13 + 1) = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)v13 + 1, v14, v10[2], (uint64_t)(v10[2] - (_QWORD)v14) >> 3);
      *(_QWORD *)v13 = 1;
      do
      {
        v15 = __ldaxr(v10);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v10));
      v12 = v13;
      if (!v16)
      {
        v17 = *v11;
        if (*v11)
        {
          v10[2] = v17;
          operator delete(v17);
        }
        MEMORY[0x219A19A08](v10, 0x1080C409938AC02);
        v12 = v13;
      }
    }
    if ((char *)v7 != v12)
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v12 + 8, *(char **)(v7 + 8), *(_QWORD *)(v7 + 16), (uint64_t)(*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 3);
    switch(*(_BYTE *)(v8 + 20))
    {
      case 2:
        v18 = *v9;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = *v9;
          if (*v9)
          {
            if (*((char *)v21 + 31) < 0)
              operator delete((void *)v21[1]);
            v22 = v21;
            v23 = 0x1012C404EF22A49;
            goto LABEL_59;
          }
        }
        break;
      case 3:
        v35 = *v9;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v38 = *v9;
          if (*v9)
          {
            v39 = (void *)v38[1];
            if (v39)
            {
              v38[2] = (unint64_t)v39;
              operator delete(v39);
            }
            v22 = v38;
            v23 = 0x1080C409938AC02;
            goto LABEL_59;
          }
        }
        break;
      case 4:
        v24 = *v9;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *v9;
          if (*v9)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v27 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_52;
          }
        }
        break;
      case 5:
        v40 = *v9;
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          v27 = *v9;
          if (*v9)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v27 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_52:
            v22 = v27;
            v23 = 0x1020C405E66F15BLL;
            goto LABEL_59;
          }
        }
        break;
      case 8:
        v43 = *v9;
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          v46 = *v9;
          if (*v9)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v46 + 2);
            v22 = v46;
            v34 = -235920773;
            goto LABEL_58;
          }
        }
        break;
      case 9:
        v28 = *v9;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = *v9;
          if (*v9)
          {
            v32 = (void *)v31[6];
            if (v32)
            {
              v31[7] = (unint64_t)v32;
              operator delete(v32);
            }
            v33 = (void *)v31[3];
            if (v33)
            {
              v31[4] = (unint64_t)v33;
              operator delete(v33);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
            v22 = v31;
            v34 = 2071181815;
LABEL_58:
            v23 = v34 | 0x1030C4000000000;
LABEL_59:
            MEMORY[0x219A19A08](v22, v23);
          }
        }
        break;
      default:
        break;
    }
    *(_QWORD *)(v8 + 8) = v12;
    *(_DWORD *)(v8 + 16) = 0;
    *(_BYTE *)(v8 + 20) = 3;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217EC3698(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unint64_t *v15;
  uint64_t v16;
  unint64_t v18;
  void *v19;

  MEMORY[0x219A19A08](v16, 0x1080C409938AC02);
  do
    v18 = __ldaxr(v15);
  while (__stlxr(v18 - 1, v15));
  if (v15 && v18 == 1)
  {
    v19 = (void *)v15[1];
    if (v19)
    {
      v15[2] = (unint64_t)v19;
      operator delete(v19);
    }
    MEMORY[0x219A19A08](v15, 0x1080C409938AC02);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC3504);
}

void sub_217EC3760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_parameters_retrieve_flex_list(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  std::string __p;
  std::string *p_p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = *(_QWORD *)turi::variant_get_ref<turi::flexible_type>(v6);
    v8 = operator new();
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)v8 = &capi_struct_type_info_tc_flex_list_inst;
    memset(&__p, 0, sizeof(__p));
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v7 + 8), *(uint64_t **)(v7 + 16), (uint64_t)(*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 4);
    std::vector<turi::flexible_type>::__vdeallocate((void **)(v8 + 8));
    *(std::string *)(v8 + 8) = __p;
    memset(&__p, 0, sizeof(__p));
    p_p = &__p;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217EC38B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC3898);
}

void sub_217EC390C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_parameters_retrieve_flex_dict(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  std::string __p;
  std::string *p_p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = *(_QWORD *)turi::variant_get_ref<turi::flexible_type>(v6);
    v8 = operator new();
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)v8 = &capi_struct_type_info_tc_flex_dict_inst;
    memset(&__p, 0, sizeof(__p));
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v7 + 8), *(uint64_t **)(v7 + 16), (uint64_t)(*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 5);
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(v8 + 8));
    *(std::string *)(v8 + 8) = __p;
    memset(&__p, 0, sizeof(__p));
    p_p = &__p;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217EC3A60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC3A44);
}

void sub_217EC3AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_parameters_retrieve_datetime(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = turi::variant_get_ref<turi::flexible_type>(v6);
    result = (_QWORD *)operator new();
    v9 = *(_QWORD *)v7;
    *result = &capi_struct_type_info_tc_datetime_inst;
    result[1] = v9;
    result[2] = 0;
    *((_DWORD *)result + 4) = *(_DWORD *)(v7 + 8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return result;
}

void sub_217EC3BBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC3BA4);
}

void sub_217EC3C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_parameters_retrieve_image(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *__p;
  unsigned int *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unsigned int *v23;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p);
    if (SBYTE7(v19) < 0)
      operator delete(__p);
    v7 = *(_QWORD *)turi::variant_get_ref<turi::flexible_type>(v6);
    v8 = operator new();
    *(_QWORD *)v8 = &capi_struct_type_info_tc_flex_image_inst;
    v10 = *(_QWORD *)(v7 + 8);
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      v11 = (unsigned int *)(v9 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(_OWORD *)(v7 + 24);
    v14 = *(_OWORD *)(v7 + 56);
    v20 = *(_OWORD *)(v7 + 40);
    v21 = v14;
    v19 = v13;
    __p = 0;
    v18 = 0;
    *(_QWORD *)(v8 + 8) = v10;
    *(_QWORD *)(v8 + 16) = v9;
    v22 = 0;
    v23 = 0;
    boost::detail::shared_count::~shared_count(&v23);
    v15 = v20;
    *(_OWORD *)(v8 + 24) = v19;
    *(_OWORD *)(v8 + 40) = v15;
    *(_OWORD *)(v8 + 56) = v21;
    boost::detail::shared_count::~shared_count(&v18);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, (const std::string *)&__p);
    if (SBYTE7(v19) < 0)
      operator delete(__p);
    return 0;
  }
  return v8;
}

void sub_217EC3D7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC3D60);
}

void sub_217EC3DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_parameters_retrieve_flexible_type(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  uint64_t v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = turi::variant_get_ref<turi::flexible_type>(v6);
    return new_tc_flexible_type<turi::flexible_type const&>(v7);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
}

void sub_217EC3EA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC3E8CLL);
}

void sub_217EC3EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_parameters_retrieve_sarray(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  uint64_t *v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = (uint64_t *)turi::variant_get_ref<std::shared_ptr<turi::unity_sarray_base>>(v6);
    return new_tc_sarray<std::shared_ptr<turi::unity_sarray_base> const&>(v7);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
}

void sub_217EC3FCC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC3FB4);
}

void sub_217EC4024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *new_tc_sarray<std::shared_ptr<turi::unity_sarray_base> const&>(uint64_t *a1)
{
  _OWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE v12[40];

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v2 + 8));
  *(_QWORD *)v2 = &capi_struct_type_info_tc_sarray_inst;
  v3 = (std::__shared_weak_count *)a1[1];
  v10 = *a1;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  turi::gl_sarray::gl_sarray(v12, &v10);
  turi::gl_sarray::operator=((uint64_t)v2 + 8, (uint64_t)v12);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v12);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v2;
}

void sub_217EC4128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::variant_get_ref<std::shared_ptr<turi::unity_sarray_base>>(int *a1)
{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sarray_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sarray_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

void sub_217EC41D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::shared_ptr<turi::unity_sarray_base>>(v10);
}

void sub_217EC41F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_parameters_retrieve_sframe(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  uint64_t *v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = (uint64_t *)turi::variant_get_ref<std::shared_ptr<turi::unity_sframe_base>>(v6);
    return new_tc_sframe<std::shared_ptr<turi::unity_sframe_base> const&>(v7);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
}

void sub_217EC42C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC42ACLL);
}

void sub_217EC431C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *new_tc_sframe<std::shared_ptr<turi::unity_sframe_base> const&>(uint64_t *a1)
{
  _OWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v2 + 8));
  *(_QWORD *)v2 = &capi_struct_type_info_tc_sframe_inst;
  v3 = (std::__shared_weak_count *)a1[1];
  v13 = *a1;
  v14 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  turi::gl_sframe::gl_sframe(v15, &v13);
  turi::gl_sframe::operator=((uint64_t)v2 + 8, (uint64_t)v15);
  v15[0] = off_24D91E9C0;
  v6 = v16;
  if (v16)
  {
    v7 = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v2;
}

void sub_217EC4460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t (**a12)(turi::gl_sframe *__hidden this))
{
  uint64_t v12;

  a12 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v12 + 8);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::variant_get_ref<std::shared_ptr<turi::unity_sframe_base>>(int *a1)
{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sframe_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sframe_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

void sub_217EC451C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::shared_ptr<turi::unity_sframe_base>>(v10);
}

void sub_217EC4540(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_parameters_retrieve_parameters(turi *a1, char *__s, uint64_t *a3)
{
  uint64_t *v6;
  const void ***v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (uint64_t *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = (const void ***)turi::variant_get_ref<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(v6);
    v8 = operator new();
    *(_QWORD *)(v8 + 16) = 0;
    v9 = v8 + 16;
    *(_QWORD *)(v8 + 8) = v8 + 16;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)v8 = &capi_struct_type_info_tc_parameters_inst;
    std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t *)&__p, v7);
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v8 + 8, *(char **)(v8 + 16));
    size = __p.__r_.__value_.__l.__size_;
    *(_QWORD *)(v8 + 8) = __p.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v8 + 16) = size;
    v11 = __p.__r_.__value_.__r.__words[2];
    *(_QWORD *)(v8 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    if (v11)
    {
      *(_QWORD *)(size + 16) = v9;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      size = 0;
    }
    else
    {
      *(_QWORD *)(v8 + 8) = v9;
    }
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, (char *)size);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217EC46A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC4678);
}

void sub_217EC4700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t turi::variant_get_ref<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t *a1)
{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*(unsigned int *)a1, *(_DWORD *)a1 ^ (*(int *)a1 >> 31), (uint64_t)&v3, a1 + 1);
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*(unsigned int *)a1, *(_DWORD *)a1 ^ (*(int *)a1 >> 31), (uint64_t)&v3, a1 + 1);
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

void sub_217EC4784(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(v10);
}

void sub_217EC47A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_parameters_retrieve_model(turi *a1, char *__s, uint64_t *a3)
{
  int *v6;
  std::string::size_type *v7;
  _QWORD *v8;
  std::string::size_type v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = (std::string::size_type *)turi::variant_get_ref<std::shared_ptr<turi::model_base>>(v6);
    v8 = (_QWORD *)operator new();
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &capi_struct_type_info_tc_model_inst;
    v9 = v7[1];
    __p.__r_.__value_.__r.__words[0] = *v7;
    __p.__r_.__value_.__l.__size_ = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v8 + 1), (__int128 *)&__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v13 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217EC4908(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC48ECLL);
}

void sub_217EC4960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t turi::variant_get_ref<std::shared_ptr<turi::model_base>>(int *a1)
{
  uint64_t result;
  char v2;
  char *v3;

  v3 = &v2;
  result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::model_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    v3 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

void sub_217EC49E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::shared_ptr<turi::model_base>>(v10);
}

void sub_217EC4A08(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_create_empty(turi *a1)
{
  _OWORD *v1;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v1 = (_OWORD *)operator new();
  v1[2] = 0u;
  *v1 = 0u;
  v1[1] = 0u;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v1 + 8));
  *(_QWORD *)v1 = &capi_struct_type_info_tc_sarray_inst;
  return v1;
}

void sub_217EC4A9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  uint64_t v10;

  MEMORY[0x219A19A08](v10, 0xA0C40E11D95CDLL);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC4A84);
}

void sub_217EC4AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_create_from_sequence(turi *a1, turi::gl_sarray *a2)
{
  turi::gl_sarray *v4;
  unint64_t v5;
  _OWORD *v6;
  _BYTE v8[40];
  _BYTE v9[40];

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a2 >= a1)
    v4 = a1;
  else
    v4 = a2;
  if (a1 <= a2)
    v5 = (unint64_t)a2;
  else
    v5 = (unint64_t)a1;
  turi::gl_sarray::from_sequence(v4, v5, a2 < a1, (uint64_t)v8);
  v6 = (_OWORD *)operator new();
  v6[1] = 0u;
  v6[2] = 0u;
  *v6 = 0u;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v6 + 8));
  *(_QWORD *)v6 = &capi_struct_type_info_tc_sarray_inst;
  turi::gl_sarray::gl_sarray(v9, v8);
  turi::gl_sarray::operator=((uint64_t)v6 + 8, (uint64_t)v9);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v9);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v8);
  return v6;
}

void sub_217EC4BD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC4BC0);
}

void sub_217EC4C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_create_from_const(uint64_t a1, const turi::flexible_type *a2, uint64_t *a3)
{
  _OWORD *v6;
  _BYTE v8[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::from_const((turi::gl_sarray *)(a1 + 8), a2, (turi::gl_sarray *)v8);
    v6 = (_OWORD *)operator new();
    v6[1] = 0u;
    v6[2] = 0u;
    *v6 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v6 + 8));
    *(_QWORD *)v6 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v8);
    turi::gl_sarray::operator=((uint64_t)v6 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"flexible_type\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217EC4D64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC4D48);
}

void sub_217EC4DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_create_copy(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  _BYTE v6[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)v6, (const turi::gl_sarray *)(a1 + 8));
    v4 = (_OWORD *)operator new();
    v4[1] = 0u;
    v4[2] = 0u;
    *v4 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v4 + 8));
    *(_QWORD *)v4 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v6);
    turi::gl_sarray::operator=((uint64_t)v4 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EC4F00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC4EE4);
}

void sub_217EC4F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_create_from_list(turi *a1, uint64_t *a2)
{
  _OWORD *v4;
  _BYTE v6[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    turi::gl_sarray::gl_sarray(v6, (char *)a1 + 8, 7);
    v4 = (_OWORD *)operator new();
    v4[1] = 0u;
    v4[2] = 0u;
    *v4 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v4 + 8));
    *(_QWORD *)v4 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v6);
    turi::gl_sarray::operator=((uint64_t)v4 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "flex_list instance null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EC50A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC5084);
}

void sub_217EC5130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_load(turi *__s)
{
  _OWORD *v2;
  void *__p[2];
  char v5;
  _BYTE v6[40];
  _BYTE v7[40];

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(__s);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)__s);
  turi::gl_sarray::gl_sarray(v6, __p);
  v2 = (_OWORD *)operator new();
  v2[1] = 0u;
  v2[2] = 0u;
  *v2 = 0u;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v2 + 8));
  *(_QWORD *)v2 = &capi_struct_type_info_tc_sarray_inst;
  turi::gl_sarray::gl_sarray(v7, v6);
  turi::gl_sarray::operator=((uint64_t)v2 + 8, (uint64_t)v7);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v7);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v6);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_217EC5220(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC5208);
}

void sub_217EC52B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sarray_save(turi *a1, char *__s, uint64_t *a3)
{
  void *__p[2];
  char v7;
  std::string v8;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, "binary");
    turi::gl_sarray::save((uint64_t)a1 + 8, (uint64_t)&v8, (uint64_t)__p);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "\"sarray\" is null.");
    set_error(a3, &v8);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_217EC5380(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC536CLL);
}

void sub_217EC53EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sarray_save_as_text(turi *a1, char *__s, uint64_t *a3)
{
  void *__p[2];
  char v7;
  std::string v8;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, "text");
    turi::gl_sarray::save((uint64_t)a1 + 8, (uint64_t)&v8, (uint64_t)__p);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "\"sarray\" is null.");
    set_error(a3, &v8);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_217EC54BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC54A8);
}

void sub_217EC5528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sarray_extract_element(turi *a1, unint64_t a2, uint64_t *a3)
{
  turi::gl_sarray *v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  char v10;
  std::string __p;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v6 = (turi *)((char *)a1 + 8);
    if (turi::gl_sarray::size(v6) > a2)
    {
      turi::gl_sarray::operator[]((_QWORD **)v6, a2, (uint64_t)&v12);
      result = operator new();
      v8 = v12;
      v9 = v13;
      v10 = v14;
      *(_QWORD *)result = &capi_struct_type_info_tc_flexible_type_inst;
      *(_QWORD *)(result + 8) = v8;
      *(_QWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 16) = v9;
      *(_BYTE *)(result + 20) = v10;
      return result;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "index out of range.");
    set_error(a3, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a3, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EC566C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC5638);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *tc_sarray_apply_mask(turi *a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v6;
  _BYTE v8[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a2)
    {
      turi::gl_sarray::operator[]((uint64_t)a1 + 8, a2 + 8, (uint64_t)v8);
      v6 = (_OWORD *)operator new();
      v6[1] = 0u;
      v6[2] = 0u;
      *v6 = 0u;
      turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v6 + 8));
      *(_QWORD *)v6 = &capi_struct_type_info_tc_sarray_inst;
      turi::gl_sarray::gl_sarray(&__p, v8);
      turi::gl_sarray::operator=((uint64_t)v6 + 8, (uint64_t)&__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v8);
      return v6;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"mask\" is null.");
    set_error(a3, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"SArray 1\" is null.");
    set_error(a3, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EC5920(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC5904);
}

void sub_217EC59BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sarray_all_nonzero(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
    return turi::gl_sarray::all((turi::gl_sarray *)(a1 + 8));
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EC5A50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC5A3CLL);
}

void sub_217EC5A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sarray_any_nonzero(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
    return turi::gl_sarray::any((turi::gl_sarray *)(a1 + 8));
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EC5B30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC5B1CLL);
}

void sub_217EC5B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sarray_materialize(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::materialize((turi::gl_sarray *)(a1 + 8));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_217EC5C0C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC5BFCLL);
}

void sub_217EC5C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_head(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v6;
  _BYTE v8[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::head((turi::gl_sarray *)(a1 + 8), a2, (uint64_t)v8);
    v6 = (_OWORD *)operator new();
    v6[1] = 0u;
    v6[2] = 0u;
    *v6 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v6 + 8));
    *(_QWORD *)v6 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v8);
    turi::gl_sarray::operator=((uint64_t)v6 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217EC5D6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC5D50);
}

void sub_217EC5DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_tail(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v6;
  _BYTE v8[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::tail((turi::gl_sarray *)(a1 + 8), a2, (uint64_t)v8);
    v6 = (_OWORD *)operator new();
    v6[1] = 0u;
    v6[2] = 0u;
    *v6 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v6 + 8));
    *(_QWORD *)v6 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v8);
    turi::gl_sarray::operator=((uint64_t)v6 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217EC5F10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC5EF4);
}

void sub_217EC5FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_count_words(turi *a1, int a2, uint64_t *a3)
{
  std::string *v6;
  _OWORD *v7;
  std::string *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::string::size_type v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::string::size_type v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::string::size_type v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::string::size_type v37;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  _BYTE v42[40];
  void **v43;
  char v44;
  std::string __p;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    turi::flexible_type::flexible_type((turi::flexible_type *)&__p, "\r");
    turi::flexible_type::flexible_type((turi::flexible_type *)&__p.__r_.__value_.__r.__words[2], "\v");
    turi::flexible_type::flexible_type((turi::flexible_type *)&v46, "\n");
    turi::flexible_type::flexible_type((turi::flexible_type *)&v47, "\f");
    turi::flexible_type::flexible_type((turi::flexible_type *)&v48, "\t");
    turi::flexible_type::flexible_type((turi::flexible_type *)&v49, " ");
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v43 = (void **)&v39;
    v44 = 0;
    v39 = (uint64_t *)operator new(0x60uLL);
    v40 = v39;
    v41 = v39 + 12;
    v6 = (std::string *)&v50;
    v40 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v41, (uint64_t *)&__p, &v50, (uint64_t)v39);
    turi::gl_sarray::count_words((uint64_t)a1 + 8, a2 != 0, &v39, (uint64_t)v42);
    v7 = (_OWORD *)operator new();
    v7[1] = 0u;
    v7[2] = 0u;
    *v7 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v7 + 8));
    *(_QWORD *)v7 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&v43, v42);
    turi::gl_sarray::operator=((uint64_t)v7 + 8, (uint64_t)&v43);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v43);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v42);
    v43 = (void **)&v39;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
    do
    {
      v8 = v6;
      v6 = (std::string *)((char *)v6 - 16);
      switch(v8[-1].__r_.__value_.__s.__data_[20])
      {
        case 2:
          v9 = (unint64_t *)v6->__r_.__value_.__r.__words[0];
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            v12 = v6->__r_.__value_.__r.__words[0];
            if (!v6->__r_.__value_.__r.__words[0])
              goto LABEL_47;
            if (*(char *)(v12 + 31) < 0)
              operator delete(*(void **)(v12 + 8));
            v13 = (_QWORD *)v12;
            v14 = 0x1012C404EF22A49;
            goto LABEL_46;
          }
          break;
        case 3:
          v26 = (unint64_t *)v6->__r_.__value_.__r.__words[0];
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            v29 = v6->__r_.__value_.__r.__words[0];
            if (!v6->__r_.__value_.__r.__words[0])
              goto LABEL_47;
            v30 = *(void **)(v29 + 8);
            if (v30)
            {
              *(_QWORD *)(v29 + 16) = v30;
              operator delete(v30);
            }
            v13 = (_QWORD *)v29;
            v14 = 0x1080C409938AC02;
            goto LABEL_46;
          }
          break;
        case 4:
          v15 = (unint64_t *)v6->__r_.__value_.__r.__words[0];
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            v18 = v6->__r_.__value_.__r.__words[0];
            if (!v6->__r_.__value_.__r.__words[0])
              goto LABEL_47;
            v43 = (void **)(v18 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
            goto LABEL_39;
          }
          break;
        case 5:
          v31 = (unint64_t *)v6->__r_.__value_.__r.__words[0];
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            v18 = v6->__r_.__value_.__r.__words[0];
            if (!v6->__r_.__value_.__r.__words[0])
              goto LABEL_47;
            v43 = (void **)(v18 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_39:
            v13 = (_QWORD *)v18;
            v14 = 0x1020C405E66F15BLL;
            goto LABEL_46;
          }
          break;
        case 8:
          v34 = (unint64_t *)v6->__r_.__value_.__r.__words[0];
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            v37 = v6->__r_.__value_.__r.__words[0];
            if (!v6->__r_.__value_.__r.__words[0])
              goto LABEL_47;
            boost::detail::shared_count::~shared_count((unsigned int **)(v37 + 16));
            v13 = (_QWORD *)v37;
            v25 = -235920773;
            goto LABEL_45;
          }
          break;
        case 9:
          v19 = (unint64_t *)v6->__r_.__value_.__r.__words[0];
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = (_QWORD *)v6->__r_.__value_.__r.__words[0];
            if (v6->__r_.__value_.__r.__words[0])
            {
              v23 = (void *)v22[6];
              if (v23)
              {
                v22[7] = v23;
                operator delete(v23);
              }
              v24 = (void *)v22[3];
              if (v24)
              {
                v22[4] = v24;
                operator delete(v24);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v22 + 1));
              v13 = v22;
              v25 = 2071181815;
LABEL_45:
              v14 = v25 | 0x1030C4000000000;
LABEL_46:
              MEMORY[0x219A19A08](v13, v14);
            }
LABEL_47:
            v6->__r_.__value_.__r.__words[0] = 0;
          }
          break;
        default:
          break;
      }
      v8[-1].__r_.__value_.__l.__size_ = 0;
      LODWORD(v8[-1].__r_.__value_.__r.__words[2]) = 0;
      v8[-1].__r_.__value_.__s.__data_[20] = 0;
    }
    while (v6 != &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v7;
}

void sub_217EC63C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    if (a29 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EC6388);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *tc_sarray_count_words_with_delimiters(turi *a1, int a2, uint64_t a3, uint64_t *a4)
{
  _OWORD *v8;
  uint64_t *v10[3];
  _BYTE v11[40];
  std::string __p[2];

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a3)
    {
      memset(v10, 0, sizeof(v10));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v10, *(uint64_t **)(a3 + 8), *(uint64_t **)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 4);
      turi::gl_sarray::count_words((uint64_t)a1 + 8, a2 != 0, v10, (uint64_t)v11);
      v8 = (_OWORD *)operator new();
      v8[1] = 0u;
      v8[2] = 0u;
      *v8 = 0u;
      turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v8 + 8));
      *(_QWORD *)v8 = &capi_struct_type_info_tc_sarray_inst;
      turi::gl_sarray::gl_sarray(__p, v11);
      turi::gl_sarray::operator=((uint64_t)v8 + 8, (uint64_t)__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v11);
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      return v8;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flex_list\" is null.");
    set_error(a4, __p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
    set_error(a4, __p);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EC6810(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC67F4);
}

void sub_217EC68C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_count_word_ngrams(turi *a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  _OWORD *v8;
  void *__p[2];
  char v11;
  _BYTE v12[40];
  std::string v13;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "word");
    turi::gl_sarray::count_ngrams((uint64_t)a1 + 8, a2, __p, a3, 1u, (uint64_t)v12);
    v8 = (_OWORD *)operator new();
    v8[1] = 0u;
    v8[2] = 0u;
    *v8 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v8 + 8));
    *(_QWORD *)v8 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&v13, v12);
    turi::gl_sarray::operator=((uint64_t)v8 + 8, (uint64_t)&v13);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v13);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v12);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "\"sarray\" is null.");
    set_error(a4, &v13);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217EC6A08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC69ECLL);
}

void sub_217EC6AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_count_character_ngrams(turi *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  _OWORD *v10;
  void *__p[2];
  char v13;
  _BYTE v14[40];
  std::string v15;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "character");
    turi::gl_sarray::count_ngrams((uint64_t)a1 + 8, a2, __p, a3, a4, (uint64_t)v14);
    v10 = (_OWORD *)operator new();
    v10[1] = 0u;
    v10[2] = 0u;
    *v10 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v10 + 8));
    *(_QWORD *)v10 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&v15, v14);
    turi::gl_sarray::operator=((uint64_t)v10 + 8, (uint64_t)&v15);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v15);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "\"sarray\" is null.");
    set_error(a5, &v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    return 0;
  }
  return v10;
}

void sub_217EC6C00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC6BE0);
}

void sub_217EC6CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_dict_trim_by_keys(turi *a1, uint64_t a2, int a3, uint64_t *a4)
{
  _OWORD *v8;
  _BYTE v10[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    turi::gl_sarray::dict_trim_by_keys((uint64_t)a1 + 8, a2 + 8, a3 != 0, (uint64_t)v10);
    v8 = (_OWORD *)operator new();
    v8[1] = 0u;
    v8[2] = 0u;
    *v8 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v8 + 8));
    *(_QWORD *)v8 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v10);
    turi::gl_sarray::operator=((uint64_t)v8 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v10);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217EC6DC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC6DACLL);
}

void sub_217EC6E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_dict_trim_by_value_range(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _OWORD *v8;
  _BYTE v10[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a2 && a3)
  {
    if (a1)
    {
      turi::gl_sarray::dict_trim_by_values((uint64_t)a1 + 8, a2 + 8, a3 + 8, (uint64_t)v10);
      v8 = (_OWORD *)operator new();
      v8[1] = 0u;
      v8[2] = 0u;
      *v8 = 0u;
      turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v8 + 8));
      *(_QWORD *)v8 = &capi_struct_type_info_tc_sarray_inst;
      turi::gl_sarray::gl_sarray(&__p, v10);
      turi::gl_sarray::operator=((uint64_t)v8 + 8, (uint64_t)&__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v10);
      return v8;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a4, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"flexible_type\" is null.");
    set_error(a4, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EC6FBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC6FA0);
}

void sub_217EC7060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sarray_max(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  char v7;
  std::string __p;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::max((turi::gl_sarray *)(a1 + 8));
    result = operator new();
    v5 = v9;
    v6 = v10;
    v7 = v11;
    *(_QWORD *)result = &capi_struct_type_info_tc_flexible_type_inst;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 16) = v6;
    *(_BYTE *)(result + 20) = v7;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return result;
}

void sub_217EC7168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC7134);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_sarray_min(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  char v7;
  std::string __p;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::min((turi::gl_sarray *)(a1 + 8));
    result = operator new();
    v5 = v9;
    v6 = v10;
    v7 = v11;
    *(_QWORD *)result = &capi_struct_type_info_tc_flexible_type_inst;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 16) = v6;
    *(_BYTE *)(result + 20) = v7;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return result;
}

void sub_217EC73E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC73B0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_sarray_mean(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  char v7;
  std::string __p;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::mean((turi::gl_sarray *)(a1 + 8));
    result = operator new();
    v5 = v9;
    v6 = v10;
    v7 = v11;
    *(_QWORD *)result = &capi_struct_type_info_tc_flexible_type_inst;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 16) = v6;
    *(_BYTE *)(result + 20) = v7;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return result;
}

void sub_217EC7660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC762CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_sarray_std(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  char v7;
  std::string __p;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::std((turi::gl_sarray *)(a1 + 8));
    result = operator new();
    v5 = v9;
    v6 = v10;
    v7 = v11;
    *(_QWORD *)result = &capi_struct_type_info_tc_flexible_type_inst;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 16) = v6;
    *(_BYTE *)(result + 20) = v7;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return result;
}

void sub_217EC78DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC78A8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_sarray_nnz(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
    return turi::gl_sarray::nnz((turi::gl_sarray *)(a1 + 8));
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EC7AE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC7AD0);
}

void sub_217EC7B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sarray_num_missing(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
    return turi::gl_sarray::num_missing((turi::gl_sarray *)(a1 + 8));
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EC7BC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC7BB0);
}

void sub_217EC7C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_dict_keys(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  _BYTE v6[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::dict_keys((turi::gl_sarray *)(a1 + 8), (uint64_t)v6);
    v4 = (_OWORD *)operator new();
    v4[1] = 0u;
    v4[2] = 0u;
    *v4 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v4 + 8));
    *(_QWORD *)v4 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v6);
    turi::gl_sarray::operator=((uint64_t)v4 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EC7D1C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC7D00);
}

void sub_217EC7DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_dict_has_any_keys(turi *a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v6;
  _BYTE v8[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a2)
    {
      turi::gl_sarray::dict_has_any_keys((uint64_t)a1 + 8, a2 + 8, (uint64_t)v8);
      v6 = (_OWORD *)operator new();
      v6[1] = 0u;
      v6[2] = 0u;
      *v6 = 0u;
      turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v6 + 8));
      *(_QWORD *)v6 = &capi_struct_type_info_tc_sarray_inst;
      turi::gl_sarray::gl_sarray(&__p, v8);
      turi::gl_sarray::operator=((uint64_t)v6 + 8, (uint64_t)&__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v8);
      return v6;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"flex_list\" is null.");
    set_error(a3, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a3, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EC7EE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC7EC8);
}

void sub_217EC7F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_dict_has_all_keys(turi *a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v6;
  _BYTE v8[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a2)
    {
      turi::gl_sarray::dict_has_all_keys((uint64_t)a1 + 8, a2 + 8, (uint64_t)v8);
      v6 = (_OWORD *)operator new();
      v6[1] = 0u;
      v6[2] = 0u;
      *v6 = 0u;
      turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v6 + 8));
      *(_QWORD *)v6 = &capi_struct_type_info_tc_sarray_inst;
      turi::gl_sarray::gl_sarray(&__p, v8);
      turi::gl_sarray::operator=((uint64_t)v6 + 8, (uint64_t)&__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v8);
      return v6;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"flex_list\" is null.");
    set_error(a3, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a3, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EC80B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC809CLL);
}

void sub_217EC8154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_sample(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  _OWORD *v8;
  _BYTE v10[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::sample((turi::gl_sarray *)(a1 + 8), a4, a2, 0, (uint64_t)v10);
    v8 = (_OWORD *)operator new();
    v8[1] = 0u;
    v8[2] = 0u;
    *v8 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v8 + 8));
    *(_QWORD *)v8 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v10);
    turi::gl_sarray::operator=((uint64_t)v8 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v10);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217EC827C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC825CLL);
}

void sub_217EC830C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_datetime_to_str_with_format(turi *a1, char *__s, uint64_t *a3)
{
  _OWORD *v6;
  void *__p[2];
  char v9;
  _BYTE v10[40];
  std::string v11;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    turi::gl_sarray::datetime_to_str((uint64_t)a1 + 8, (uint64_t)__p, (uint64_t)v10);
    v6 = (_OWORD *)operator new();
    v6[1] = 0u;
    v6[2] = 0u;
    *v6 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v6 + 8));
    *(_QWORD *)v6 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&v11, v10);
    turi::gl_sarray::operator=((uint64_t)v6 + 8, (uint64_t)&v11);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v11);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v10);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "\"sarray\" is null.");
    set_error(a3, &v11);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217EC843C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC8420);
}

void sub_217EC84E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_datetime_to_str(turi *a1, uint64_t *a2)
{
  _OWORD *v4;
  void *__p[2];
  char v7;
  _BYTE v8[40];
  std::string v9;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "%Y-%m-%dT%H:%M:%S%ZP");
    turi::gl_sarray::datetime_to_str((uint64_t)a1 + 8, (uint64_t)__p, (uint64_t)v8);
    v4 = (_OWORD *)operator new();
    v4[1] = 0u;
    v4[2] = 0u;
    *v4 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v4 + 8));
    *(_QWORD *)v4 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&v9, v8);
    turi::gl_sarray::operator=((uint64_t)v4 + 8, (uint64_t)&v9);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v9);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v8);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "\"sarray\" is null.");
    set_error(a2, &v9);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EC8614(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC85F8);
}

void sub_217EC86BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_str_to_datetime(turi *a1, char *__s, uint64_t *a3)
{
  _OWORD *v6;
  void *__p[2];
  char v9;
  _BYTE v10[40];
  std::string v11;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    turi::gl_sarray::str_to_datetime((uint64_t)a1 + 8, (uint64_t)__p, (uint64_t)v10);
    v6 = (_OWORD *)operator new();
    v6[1] = 0u;
    v6[2] = 0u;
    *v6 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v6 + 8));
    *(_QWORD *)v6 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&v11, v10);
    turi::gl_sarray::operator=((uint64_t)v6 + 8, (uint64_t)&v11);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v11);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v10);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "\"sarray\" is null.");
    set_error(a3, &v11);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217EC87EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EC87D0);
}

void sub_217EC8894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_clip(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _OWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _BYTE v66[40];
  std::string __p[2];
  _QWORD *v68[2];
  _QWORD *v69[3];

  v69[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a2 && a3)
  {
    if (a1)
    {
      memset(v69, 0, 13);
      if ((_QWORD **)(a2 + 8) != v69)
      {
        *(_QWORD **)((char *)v69 + 5) = *(_QWORD **)(a2 + 13);
        v69[0] = *(_QWORD **)(a2 + 8);
        BYTE4(v69[1]) = *(_BYTE *)(a2 + 20);
        if (BYTE4(v69[1]) <= 9u && ((1 << SBYTE4(v69[1])) & 0x33C) != 0)
        {
          v8 = v69[0];
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
        }
      }
      memset(v68, 0, 13);
      if ((_QWORD **)(a3 + 8) != v68)
      {
        *(_QWORD **)((char *)v68 + 5) = *(_QWORD **)(a3 + 13);
        v68[0] = *(_QWORD **)(a3 + 8);
        BYTE4(v68[1]) = *(_BYTE *)(a3 + 20);
        if (BYTE4(v68[1]) <= 9u && ((1 << SBYTE4(v68[1])) & 0x33C) != 0)
        {
          v10 = v68[0];
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
      }
      turi::gl_sarray::clip((uint64_t)a1 + 8, (unsigned __int8 *)v69, (unsigned __int8 *)v68, (uint64_t)v66);
      v12 = (_OWORD *)operator new();
      v12[1] = 0u;
      v12[2] = 0u;
      *v12 = 0u;
      turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v12 + 8));
      *(_QWORD *)v12 = &capi_struct_type_info_tc_sarray_inst;
      turi::gl_sarray::gl_sarray(__p, v66);
      turi::gl_sarray::operator=((uint64_t)v12 + 8, (uint64_t)__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v66);
      switch(BYTE4(v68[1]))
      {
        case 2:
          v13 = v68[0];
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            v16 = v68[0];
            if (v68[0])
            {
              if (*((char *)v68[0] + 31) < 0)
                operator delete(*((void **)v68[0] + 1));
              v17 = v16;
              v18 = 0x1012C404EF22A49;
              goto LABEL_60;
            }
          }
          break;
        case 3:
          v28 = v68[0];
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v31 = v68[0];
            if (v68[0])
            {
              v32 = (void *)v68[0][1];
              if (v32)
              {
                v68[0][2] = v32;
                operator delete(v32);
              }
              v17 = v31;
              v18 = 0x1080C409938AC02;
              goto LABEL_60;
            }
          }
          break;
        case 4:
          v20 = v68[0];
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
          {
            v23 = v68[0];
            if (v68[0])
            {
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v68[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_53;
            }
          }
          break;
        case 5:
          v33 = v68[0];
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v23 = v68[0];
            if (v68[0])
            {
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v68[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_53:
              v17 = v23;
              v18 = 0x1020C405E66F15BLL;
              goto LABEL_60;
            }
          }
          break;
        case 8:
          v36 = v68[0];
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = v68[0];
            if (v68[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v68[0] + 2);
              v17 = v39;
              v27 = -235920773;
              goto LABEL_59;
            }
          }
          break;
        case 9:
          v24 = v68[0];
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26 && v68[0])
          {
            v17 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v68[0]);
            v27 = 2071181815;
LABEL_59:
            v18 = v27 | 0x1030C4000000000;
LABEL_60:
            MEMORY[0x219A19A08](v17, v18);
          }
          break;
        default:
          break;
      }
      memset(v68, 0, 13);
      switch(BYTE4(v69[1]))
      {
        case 2:
          v40 = v69[0];
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            v43 = v69[0];
            if (v69[0])
            {
              if (*((char *)v69[0] + 31) < 0)
                operator delete(*((void **)v69[0] + 1));
              v44 = v43;
              v45 = 0x1012C404EF22A49;
              goto LABEL_98;
            }
          }
          break;
        case 3:
          v54 = v69[0];
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            v57 = v69[0];
            if (v69[0])
            {
              v58 = (void *)v69[0][1];
              if (v58)
              {
                v69[0][2] = v58;
                operator delete(v58);
              }
              v44 = v57;
              v45 = 0x1080C409938AC02;
              goto LABEL_98;
            }
          }
          break;
        case 4:
          v46 = v69[0];
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            v49 = v69[0];
            if (v69[0])
            {
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v69[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_91;
            }
          }
          break;
        case 5:
          v59 = v69[0];
          do
          {
            v60 = __ldaxr(v59);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, v59));
          if (!v61)
          {
            v49 = v69[0];
            if (v69[0])
            {
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v69[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_91:
              v44 = v49;
              v45 = 0x1020C405E66F15BLL;
              goto LABEL_98;
            }
          }
          break;
        case 8:
          v62 = v69[0];
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v65 = v69[0];
            if (v69[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v69[0] + 2);
              v44 = v65;
              v53 = -235920773;
              goto LABEL_97;
            }
          }
          break;
        case 9:
          v50 = v69[0];
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52 && v69[0])
          {
            v44 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v69[0]);
            v53 = 2071181815;
LABEL_97:
            v45 = v53 | 0x1030C4000000000;
LABEL_98:
            MEMORY[0x219A19A08](v44, v45);
          }
          break;
        default:
          return v12;
      }
      return v12;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
    set_error(a4, __p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flexible_type\" is null.");
    set_error(a4, __p);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EC8E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    if (a21 < 0)
      operator delete(__p);
    __cxa_begin_catch(a1);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC8B20);
  }
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_drop_na(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  _BYTE v6[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::dropna((turi::gl_sarray *)(a1 + 8), (uint64_t)v6);
    v4 = (_OWORD *)operator new();
    v4[1] = 0u;
    v4[2] = 0u;
    *v4 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v4 + 8));
    *(_QWORD *)v4 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v6);
    turi::gl_sarray::operator=((uint64_t)v4 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EC9380(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC9364);
}

void sub_217EC9410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_to_type(turi *a1, char a2, uint64_t a3, uint64_t *a4)
{
  _OWORD *v8;
  _BYTE v10[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    turi::gl_sarray::astype((uint64_t)a1 + 8, a2, a3, (uint64_t)v10);
    v8 = (_OWORD *)operator new();
    v8[1] = 0u;
    v8[2] = 0u;
    *v8 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v8 + 8));
    *(_QWORD *)v8 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v10);
    turi::gl_sarray::operator=((uint64_t)v8 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v10);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217EC952C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC9510);
}

void sub_217EC95BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_replace_na(turi *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t *v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE v39[40];
  std::string __p[2];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    memset(v41, 0, 13);
    if ((_QWORD *)(a2 + 8) != v41)
    {
      *(_QWORD *)((char *)v41 + 5) = *(_QWORD *)(a2 + 13);
      v41[0] = *(_QWORD *)(a2 + 8);
      BYTE4(v41[1]) = *(_BYTE *)(a2 + 20);
      if (BYTE4(v41[1]) <= 9u && ((1 << SBYTE4(v41[1])) & 0x33C) != 0)
      {
        v6 = (unint64_t *)v41[0];
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
      }
    }
    turi::gl_sarray::fillna((uint64_t)a1 + 8, (uint64_t)v41, (uint64_t)v39);
    v8 = (_OWORD *)operator new();
    v8[1] = 0u;
    v8[2] = 0u;
    *v8 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v8 + 8));
    *(_QWORD *)v8 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(__p, v39);
    turi::gl_sarray::operator=((uint64_t)v8 + 8, (uint64_t)__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v39);
    switch(BYTE4(v41[1]))
    {
      case 2:
        v9 = (unint64_t *)v41[0];
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = v41[0];
          if (v41[0])
          {
            if (*(char *)(v41[0] + 31) < 0)
              operator delete(*(void **)(v41[0] + 8));
            v13 = v12;
            v14 = 0x1012C404EF22A49;
            goto LABEL_53;
          }
        }
        break;
      case 3:
        v26 = (unint64_t *)v41[0];
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v29 = v41[0];
          if (v41[0])
          {
            v30 = *(void **)(v41[0] + 8);
            if (v30)
            {
              *(_QWORD *)(v41[0] + 16) = v30;
              operator delete(v30);
            }
            v13 = v29;
            v14 = 0x1080C409938AC02;
            goto LABEL_53;
          }
        }
        break;
      case 4:
        v15 = (unint64_t *)v41[0];
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = v41[0];
          if (v41[0])
          {
            __p[0].__r_.__value_.__r.__words[0] = v41[0] + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_46;
          }
        }
        break;
      case 5:
        v31 = (unint64_t *)v41[0];
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v18 = v41[0];
          if (v41[0])
          {
            __p[0].__r_.__value_.__r.__words[0] = v41[0] + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_46:
            v13 = v18;
            v14 = 0x1020C405E66F15BLL;
            goto LABEL_53;
          }
        }
        break;
      case 8:
        v34 = (unint64_t *)v41[0];
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          v37 = v41[0];
          if (v41[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v41[0] + 16));
            v13 = v37;
            v25 = -235920773;
            goto LABEL_52;
          }
        }
        break;
      case 9:
        v19 = (unint64_t *)v41[0];
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v22 = v41[0];
          if (v41[0])
          {
            v23 = *(void **)(v41[0] + 48);
            if (v23)
            {
              *(_QWORD *)(v41[0] + 56) = v23;
              operator delete(v23);
            }
            v24 = *(void **)(v22 + 24);
            if (v24)
            {
              *(_QWORD *)(v22 + 32) = v24;
              operator delete(v24);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
            v13 = v22;
            v25 = 2071181815;
LABEL_52:
            v14 = v25 | 0x1030C4000000000;
LABEL_53:
            MEMORY[0x219A19A08](v13, v14);
          }
        }
        break;
      default:
        return v8;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
    set_error(a3, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217EC992C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    if (a21 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EC9794);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *tc_sarray_topk_index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _OWORD *v8;
  _BYTE v10[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::topk_index((turi::gl_sarray *)(a1 + 8), a2, a3, (uint64_t)v10);
    v8 = (_OWORD *)operator new();
    v8[1] = 0u;
    v8[2] = 0u;
    *v8 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v8 + 8));
    *(_QWORD *)v8 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v10);
    turi::gl_sarray::operator=((uint64_t)v8 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v10);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217EC9CBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC9CA0);
}

void sub_217EC9D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_append(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v6;
  _BYTE v8[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1 && a2)
  {
    turi::gl_sarray::append((turi::gl_sarray *)(a1 + 8), (const turi::gl_sarray *)(a2 + 8), (uint64_t)v8);
    v6 = (_OWORD *)operator new();
    v6[1] = 0u;
    v6[2] = 0u;
    *v6 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v6 + 8));
    *(_QWORD *)v6 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v8);
    turi::gl_sarray::operator=((uint64_t)v6 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217EC9E84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EC9E68);
}

void sub_217EC9F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_unique(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  _BYTE v6[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::unique((turi::gl_sarray *)(a1 + 8), (uint64_t)v6);
    v4 = (_OWORD *)operator new();
    v4[1] = 0u;
    v4[2] = 0u;
    *v4 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v4 + 8));
    *(_QWORD *)v4 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v6);
    turi::gl_sarray::operator=((uint64_t)v4 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217ECA02C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ECA010);
}

void sub_217ECA0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sarray_is_materialized(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
    return turi::gl_sarray::is_materialized((turi::gl_sarray *)(a1 + 8));
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217ECA150(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ECA13CLL);
}

void sub_217ECA19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sarray_size_is_known(turi *a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *size;
  unint64_t *v6;
  unint64_t v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &__p);
    v4 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 104))(__p.__r_.__value_.__r.__words[0]);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v6 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217ECA284(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ECA26CLL);
}

void sub_217ECA2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sarray_sum(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  char v7;
  std::string __p;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::sum((turi::gl_sarray *)(a1 + 8));
    result = operator new();
    v5 = v9;
    v6 = v10;
    v7 = v11;
    *(_QWORD *)result = &capi_struct_type_info_tc_flexible_type_inst;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 16) = v6;
    *(_BYTE *)(result + 20) = v7;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return result;
}

void sub_217ECA3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217ECA3B8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_sarray_equals(turi *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1 && a2)
  {
    turi::gl_sarray::operator==((uint64_t)a1 + 8, a2 + 8, (uint64_t)&__p);
    v6 = turi::gl_sarray::all((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217ECA644(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ECA628);
}

void sub_217ECA6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sarray_text_summary(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 __p;
  char v7;
  std::string v8[3];
  void *v9;
  char v10;
  uint64_t v11;
  _BYTE v12[13];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    turi::operator<<(v8, (turi::gl_sarray *)(a1 + 8));
    std::stringbuf::str();
    v4 = operator new();
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_flexible_type_inst;
    turi::flexible_type::flexible_type<std::string>((uint64_t)v12, &__p);
    *(_QWORD *)(v4 + 13) = *(_QWORD *)&v12[5];
    *(_QWORD *)(v4 + 8) = *(_QWORD *)v12;
    *(_BYTE *)(v4 + 20) = v12[12];
    if (v7 < 0)
      operator delete((void *)__p);
    v8[0].__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB800];
    *(std::string::size_type *)((char *)v8[0].__r_.__value_.__r.__words
                              + *(_QWORD *)(v8[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                                  + 24);
    v8[0].__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
    if (v10 < 0)
      operator delete(v9);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x219A198F4](&v11);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "\"sarray\" is null.");
    set_error(a2, v8);
    if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217ECA860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    if (a21 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217ECA824);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](a1 + 112);
  return a1;
}

_OWORD *tc_sarray_apply(turi *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t *a7)
{
  _OWORD *v14;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _BYTE v26[40];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string __p;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"SArray passed in is null.\" is null.");
    set_error(a7, &__p);
    goto LABEL_10;
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Callback function passed in is null.\" is null.");
    set_error(a7, &__p);
    goto LABEL_10;
  }
  if (!a3 && a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Context release function passed in is null.\" is null.");
    set_error(a7, &__p);
LABEL_10:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  std::shared_ptr<void>::shared_ptr[abi:ne180100]<void,void (*)(void *),void>(&v30, a4, a3);
  v27 = a2;
  v17 = v30;
  v16 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v28 = 0;
  v29 = 0;
  v34 = 0;
  v20 = operator new(0x20uLL);
  *v20 = &off_24D9197C8;
  v20[1] = a2;
  v20[2] = v17;
  v20[3] = v16;
  v34 = v20;
  turi::gl_sarray::apply((uint64_t)a1 + 8, (uint64_t)v33, a5, a6, (uint64_t)v26);
  v14 = (_OWORD *)operator new();
  v14[1] = 0u;
  v14[2] = 0u;
  *v14 = 0u;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v14 + 8));
  *(_QWORD *)v14 = &capi_struct_type_info_tc_sarray_inst;
  turi::gl_sarray::gl_sarray(&__p, v26);
  turi::gl_sarray::operator=((uint64_t)v14 + 8, (uint64_t)&__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v26);
  v21 = v34;
  if (v34 == v33)
  {
    v22 = 4;
    v21 = v33;
    goto LABEL_21;
  }
  if (v34)
  {
    v22 = 5;
LABEL_21:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  v23 = v31;
  if (v31)
  {
    v24 = (unint64_t *)&v31->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v14;
}

void sub_217ECAC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;

  if (!a2)
    _Unwind_Resume(exception_object);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a13);
  v32 = *(_QWORD **)(v30 - 96);
  if (v32 == (_QWORD *)(v30 - 120))
  {
    v33 = 4;
    v32 = (_QWORD *)(v30 - 120);
  }
  else
  {
    if (!v32)
    {
LABEL_7:
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v28);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
      __cxa_begin_catch(exception_object);
      std::current_exception();
      fill_error_from_exception((std::exception_ptr *)&a9);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
      __cxa_end_catch();
      JUMPOUT(0x217ECAA7CLL);
    }
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
  goto LABEL_7;
}

uint64_t tc_sarray_reduce(uint64_t a1, char *__s, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t *v8;
  _BOOL4 v9;
  uint64_t *v10;
  uint64_t result;
  std::string::size_type v12;
  int v13;
  std::string::value_type v14;
  uint64_t i;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  std::logic_error *exception;
  std::string v29;
  std::string __p;
  int v31;
  _QWORD v32[3];
  int v33;
  _QWORD v34[3];
  int v35;
  _QWORD v36[3];
  int v37;
  _QWORD v38[3];
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "min");
      v31 = 0;
      std::string::basic_string[abi:ne180100]<0>(v32, "max");
      v33 = 1;
      std::string::basic_string[abi:ne180100]<0>(v34, "sum");
      v35 = 2;
      std::string::basic_string[abi:ne180100]<0>(v36, "mean");
      v37 = 3;
      std::string::basic_string[abi:ne180100]<0>(v38, "std");
      v39 = 4;
      std::map<std::string,tc_sarray_reduce::reduce_op>::map[abi:ne180100]((uint64_t *)&__p, 5);
      for (i = 0; i != -20; i -= 4)
      {
        if (SHIBYTE(v38[i + 2]) < 0)
          operator delete((void *)v38[i]);
      }
      __cxa_atexit((void (*)(void *))std::map<std::string,tc_sarray_reduce::reduce_op>::~map[abi:ne180100], &tc_sarray_reduce::_op_map, &dword_217E69000);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v7 = qword_254FEDD48;
    if (!qword_254FEDD48)
      goto LABEL_12;
    v8 = &qword_254FEDD48;
    do
    {
      v9 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_254FEDD50, (const void **)(v7 + 32), (const void **)&__p.__r_.__value_.__l.__data_);
      v10 = (uint64_t *)(v7 + 8);
      if (!v9)
      {
        v10 = (uint64_t *)v7;
        v8 = (uint64_t *)v7;
      }
      v7 = *v10;
    }
    while (*v10);
    if (v8 == &qword_254FEDD48
      || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_254FEDD50, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)v8 + 4))
    {
LABEL_12:
      v8 = &qword_254FEDD48;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v8 == &qword_254FEDD48)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reduction operator ", 19);
      v17 = strlen(__s);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)__s, v17);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" not recognized. ", 17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Available operators are ", 24);
      v20 = tc_sarray_reduce::_op_map;
      if ((uint64_t *)tc_sarray_reduce::_op_map != &qword_254FEDD48)
      {
        do
        {
          v21 = *(char *)(v20 + 55);
          if (v21 >= 0)
            v22 = v20 + 32;
          else
            v22 = *(_QWORD *)(v20 + 32);
          if (v21 >= 0)
            v23 = *(unsigned __int8 *)(v20 + 55);
          else
            v23 = *(_QWORD *)(v20 + 40);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, v22, v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" ", 1);
          v25 = *(uint64_t **)(v20 + 8);
          if (v25)
          {
            do
            {
              v26 = v25;
              v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v26 = *(uint64_t **)(v20 + 16);
              v27 = *v26 == v20;
              v20 = (uint64_t)v26;
            }
            while (!v27);
          }
          v20 = (uint64_t)v26;
        }
        while (v26 != &qword_254FEDD48);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)".", 1);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v29);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    switch(*((_DWORD *)v8 + 14))
    {
      case 0:
        turi::gl_sarray::min((turi::gl_sarray *)(a1 + 8));
        result = operator new();
        break;
      case 1:
        turi::gl_sarray::max((turi::gl_sarray *)(a1 + 8));
        result = operator new();
        break;
      case 2:
        turi::gl_sarray::sum((turi::gl_sarray *)(a1 + 8));
        result = operator new();
        break;
      case 3:
        turi::gl_sarray::mean((turi::gl_sarray *)(a1 + 8));
        result = operator new();
        break;
      case 4:
        turi::gl_sarray::std((turi::gl_sarray *)(a1 + 8));
        result = operator new();
        break;
      default:
        return 0;
    }
    *(_QWORD *)(result + 16) = 0;
    v12 = v29.__r_.__value_.__r.__words[0];
    v13 = v29.__r_.__value_.__r.__words[1];
    v14 = v29.__r_.__value_.__s.__data_[12];
    *(_QWORD *)result = &capi_struct_type_info_tc_flexible_type_inst;
    *(_QWORD *)(result + 8) = v12;
    *(_DWORD *)(result + 16) = v13;
    *(_BYTE *)(result + 20) = v14;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_sarray\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return result;
}

void sub_217ECB228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, int a11, char a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v42;

  if (a2)
  {
    v42 = 0;
    while (1)
    {
      if (*(&a41 + v42) < 0)
        operator delete(*(void **)((char *)&a36 + v42));
      v42 -= 32;
      if (v42 == -160)
      {
        __cxa_begin_catch(exception_object);
        std::current_exception();
        fill_error_from_exception((std::exception_ptr *)&a9);
        std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
        __cxa_end_catch();
        JUMPOUT(0x217ECAED8);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,tc_sarray_reduce::reduce_op>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v8;
  const void **v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14[2];
  char v15;

  qword_254FEDD50 = 0;
  qword_254FEDD48 = 0;
  tc_sarray_reduce::_op_map = (uint64_t)&qword_254FEDD48;
  if (a2)
  {
    v2 = result;
    v3 = &result[4 * a2];
    do
    {
      v5 = &qword_254FEDD48;
      v4 = qword_254FEDD48;
      if ((uint64_t *)tc_sarray_reduce::_op_map == &qword_254FEDD48)
        goto LABEL_10;
      if (qword_254FEDD48)
      {
        do
        {
          v5 = (uint64_t *)v4;
          v4 = *(_QWORD *)(v4 + 8);
        }
        while (v4);
      }
      else
      {
        v6 = &qword_254FEDD48;
        do
        {
          v5 = (uint64_t *)v6[2];
          v7 = *v5 == (_QWORD)v6;
          v6 = v5;
        }
        while (v7);
      }
      result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_254FEDD50, (const void **)v5 + 4, (const void **)v2);
      v4 = qword_254FEDD48;
      if ((_DWORD)result)
      {
LABEL_10:
        if (!v4)
          goto LABEL_22;
        v8 = v5 + 1;
      }
      else
      {
        if (!qword_254FEDD48)
        {
LABEL_22:
          v5 = &qword_254FEDD48;
          v8 = &qword_254FEDD48;
LABEL_23:
          v10 = (char *)operator new(0x40uLL);
          v14[0] = (uint64_t)v10;
          v14[1] = (uint64_t)&qword_254FEDD48;
          v15 = 0;
          v11 = (std::string *)(v10 + 32);
          if (*((char *)v2 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)*v2, v2[1]);
            v13 = (uint64_t *)v14[0];
          }
          else
          {
            v12 = *(_OWORD *)v2;
            *((_QWORD *)v10 + 6) = v2[2];
            *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
            v13 = (uint64_t *)v10;
          }
          *((_DWORD *)v10 + 14) = *((_DWORD *)v2 + 6);
          v15 = 1;
          *v13 = 0;
          v13[1] = 0;
          v13[2] = (uint64_t)v5;
          *v8 = (uint64_t)v13;
          if (*(_QWORD *)tc_sarray_reduce::_op_map)
          {
            tc_sarray_reduce::_op_map = *(_QWORD *)tc_sarray_reduce::_op_map;
            v13 = (uint64_t *)*v8;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_254FEDD48, v13);
          ++qword_254FEDD50;
          v14[0] = 0;
          result = std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>>>>::~unique_ptr[abi:ne180100](v14);
          goto LABEL_29;
        }
        v8 = &qword_254FEDD48;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t *)v4;
            v9 = (const void **)(v4 + 32);
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_254FEDD50, (const void **)v2, (const void **)(v4 + 32)))break;
            v4 = *v5;
            v8 = v5;
            if (!*v5)
              goto LABEL_23;
          }
          result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_254FEDD50, v9, (const void **)v2);
          if (!(_DWORD)result)
            break;
          v8 = v5 + 1;
          v4 = v5[1];
          if (!v4)
            goto LABEL_23;
        }
      }
      if (!*v8)
        goto LABEL_23;
LABEL_29:
      v2 += 4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_217ECB95C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  std::__tree<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::destroy((char *)qword_254FEDD48);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,tc_sarray_reduce::reduce_op>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

_OWORD *tc_sarray_hash(turi *a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _BYTE v18[40];
  std::string v19;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &v14);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 352))(&v16, v14, a2);
    turi::gl_sarray::gl_sarray(v18, &v16);
    v6 = (_OWORD *)operator new();
    v6[1] = 0u;
    v6[2] = 0u;
    *v6 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v6 + 8));
    *(_QWORD *)v6 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&v19, v18);
    turi::gl_sarray::operator=((uint64_t)v6 + 8, (uint64_t)&v19);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v19);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v18);
    v7 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v15;
    if (v15)
    {
      v11 = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "\"tc_sarray\" is null.");
    set_error(a3, &v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217ECBB34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 - 49) < 0)
    operator delete(*(void **)(v15 - 72));
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ECBB18);
}

void sub_217ECBBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_slice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v8;
  _QWORD v10[2];
  _BYTE v11[40];
  _BYTE v12[40];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a4;
  v10[0] = v13;
  v10[1] = 3;
  turi::gl_sarray::operator[]((turi::gl_sarray *)(a1 + 8), (uint64_t)v10, (uint64_t)v11);
  v8 = (_OWORD *)operator new();
  v8[1] = 0u;
  v8[2] = 0u;
  *v8 = 0u;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v8 + 8));
  *(_QWORD *)v8 = &capi_struct_type_info_tc_sarray_inst;
  turi::gl_sarray::gl_sarray(v12, v11);
  turi::gl_sarray::operator=((uint64_t)v8 + 8, (uint64_t)v12);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v12);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v11);
  return v8;
}

void sub_217ECBD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217ECBCD8);
  }
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_subslice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  unsigned int v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _BYTE v97[40];
  void **v98[6];
  uint64_t v99;
  int v100;
  char v101;
  uint64_t v102;
  int v103;
  char v104;
  uint64_t v105;
  int v106;
  char v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  v106 = 0;
  v107 = 0;
  v105 = a2;
  v103 = 0;
  v104 = 0;
  v102 = a3;
  v100 = 0;
  v101 = 0;
  v99 = a4;
  turi::gl_sarray::subslice((turi::gl_sarray *)(a1 + 8), (uint64_t)&v105, (uint64_t)&v102, (uint64_t)&v99, (uint64_t)v97);
  v8 = (_OWORD *)operator new();
  v8[1] = 0u;
  v8[2] = 0u;
  *v8 = 0u;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v8 + 8));
  *(_QWORD *)v8 = &capi_struct_type_info_tc_sarray_inst;
  turi::gl_sarray::gl_sarray(v98, v97);
  turi::gl_sarray::operator=((uint64_t)v8 + 8, (uint64_t)v98);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v98);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v97);
  switch(v101)
  {
    case 2:
      v9 = (unint64_t *)v99;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v99;
        if (v99)
        {
          if (*(char *)(v99 + 31) < 0)
            operator delete(*(void **)(v99 + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v99;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v99;
        if (v99)
        {
          v30 = *(void **)(v99 + 8);
          if (v30)
          {
            *(_QWORD *)(v99 + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v99;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v99;
        if (v99)
        {
          v98[0] = (void **)(v99 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v98);
          goto LABEL_37;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v99;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v99;
        if (v99)
        {
          v98[0] = (void **)(v99 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v98);
LABEL_37:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v99;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v99;
        if (v99)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v99 + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_43;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v99;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v99;
        if (v99)
        {
          v23 = *(void **)(v99 + 48);
          if (v23)
          {
            *(_QWORD *)(v99 + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_43:
          v14 = v25 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      break;
  }
  v99 = 0;
  v100 = 0;
  v101 = 0;
  switch(v104)
  {
    case 2:
      v38 = (unint64_t *)v102;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v41 = v102;
        if (v102)
        {
          if (*(char *)(v102 + 31) < 0)
            operator delete(*(void **)(v102 + 8));
          v42 = v41;
          v43 = 0x1012C404EF22A49;
          goto LABEL_86;
        }
      }
      break;
    case 3:
      v55 = (unint64_t *)v102;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        v58 = v102;
        if (v102)
        {
          v59 = *(void **)(v102 + 8);
          if (v59)
          {
            *(_QWORD *)(v102 + 16) = v59;
            operator delete(v59);
          }
          v42 = v58;
          v43 = 0x1080C409938AC02;
          goto LABEL_86;
        }
      }
      break;
    case 4:
      v44 = (unint64_t *)v102;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        v47 = v102;
        if (v102)
        {
          v98[0] = (void **)(v102 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v98);
          goto LABEL_79;
        }
      }
      break;
    case 5:
      v60 = (unint64_t *)v102;
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        v47 = v102;
        if (v102)
        {
          v98[0] = (void **)(v102 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v98);
LABEL_79:
          v42 = v47;
          v43 = 0x1020C405E66F15BLL;
          goto LABEL_86;
        }
      }
      break;
    case 8:
      v63 = (unint64_t *)v102;
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
      {
        v66 = v102;
        if (v102)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v102 + 16));
          v42 = v66;
          v54 = -235920773;
          goto LABEL_85;
        }
      }
      break;
    case 9:
      v48 = (unint64_t *)v102;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        v51 = v102;
        if (v102)
        {
          v52 = *(void **)(v102 + 48);
          if (v52)
          {
            *(_QWORD *)(v102 + 56) = v52;
            operator delete(v52);
          }
          v53 = *(void **)(v51 + 24);
          if (v53)
          {
            *(_QWORD *)(v51 + 32) = v53;
            operator delete(v53);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v51 + 8);
          v42 = v51;
          v54 = 2071181815;
LABEL_85:
          v43 = v54 | 0x1030C4000000000;
LABEL_86:
          MEMORY[0x219A19A08](v42, v43);
        }
      }
      break;
    default:
      break;
  }
  v102 = 0;
  v103 = 0;
  v104 = 0;
  switch(v107)
  {
    case 2:
      v67 = (unint64_t *)v105;
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        v70 = v105;
        if (v105)
        {
          if (*(char *)(v105 + 31) < 0)
            operator delete(*(void **)(v105 + 8));
          v71 = v70;
          v72 = 0x1012C404EF22A49;
          goto LABEL_128;
        }
      }
      break;
    case 3:
      v84 = (unint64_t *)v105;
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v87 = v105;
        if (v105)
        {
          v88 = *(void **)(v105 + 8);
          if (v88)
          {
            *(_QWORD *)(v105 + 16) = v88;
            operator delete(v88);
          }
          v71 = v87;
          v72 = 0x1080C409938AC02;
          goto LABEL_128;
        }
      }
      break;
    case 4:
      v73 = (unint64_t *)v105;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        v76 = v105;
        if (v105)
        {
          v98[0] = (void **)(v105 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v98);
          goto LABEL_121;
        }
      }
      break;
    case 5:
      v89 = (unint64_t *)v105;
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v76 = v105;
        if (v105)
        {
          v98[0] = (void **)(v105 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v98);
LABEL_121:
          v71 = v76;
          v72 = 0x1020C405E66F15BLL;
          goto LABEL_128;
        }
      }
      break;
    case 8:
      v92 = (unint64_t *)v105;
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        v95 = v105;
        if (v105)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v105 + 16));
          v71 = v95;
          v83 = -235920773;
          goto LABEL_127;
        }
      }
      break;
    case 9:
      v77 = (unint64_t *)v105;
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (!v79)
      {
        v80 = v105;
        if (v105)
        {
          v81 = *(void **)(v105 + 48);
          if (v81)
          {
            *(_QWORD *)(v105 + 56) = v81;
            operator delete(v81);
          }
          v82 = *(void **)(v80 + 24);
          if (v82)
          {
            *(_QWORD *)(v80 + 32) = v82;
            operator delete(v82);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v80 + 8);
          v71 = v80;
          v83 = 2071181815;
LABEL_127:
          v72 = v83 | 0x1030C4000000000;
LABEL_128:
          MEMORY[0x219A19A08](v71, v72);
        }
      }
      break;
    default:
      return v8;
  }
  return v8;
}

void sub_217ECC470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217ECC438);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *tc_sarray_to_const(turi *a1, uint64_t a2, char a3, uint64_t *a4)
{
  _OWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[40];
  std::string v21;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a2)
    {
      turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &v16);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 576))(&v18, v16, a2 + 8, a3);
      turi::gl_sarray::gl_sarray(v20, &v18);
      v8 = (_OWORD *)operator new();
      v8[1] = 0u;
      v8[2] = 0u;
      *v8 = 0u;
      turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v8 + 8));
      *(_QWORD *)v8 = &capi_struct_type_info_tc_sarray_inst;
      turi::gl_sarray::gl_sarray(&v21, v20);
      turi::gl_sarray::operator=((uint64_t)v8 + 8, (uint64_t)&v21);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v21);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v20);
      v9 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = v17;
      if (v17)
      {
        v13 = (unint64_t *)&v17->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      return v8;
    }
    std::string::basic_string[abi:ne180100]<0>(&v21, "\"tc_flexible_type\" is null.");
    set_error(a4, &v21);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "\"tc_sarray\" is null.");
    set_error(a4, &v21);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217ECCBF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 - 49) < 0)
    operator delete(*(void **)(v15 - 72));
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ECCBDCLL);
}

void sub_217ECCCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_which(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  _OWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[40];
  std::string v38;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1 && a2 && a3)
  {
    turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &v33);
    v8 = v33;
    turi::gl_sarray::get_proxy(a2 + 8, &v31);
    v32 = v31;
    v31 = 0uLL;
    turi::gl_sarray::get_proxy(a3 + 8, &v29);
    v30 = v29;
    v29 = 0uLL;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, __int128 *))(*(_QWORD *)v8 + 568))(&v35, v8, &v32, &v30);
    turi::gl_sarray::gl_sarray(v37, &v35);
    v9 = (_OWORD *)operator new();
    v9[1] = 0u;
    v9[2] = 0u;
    *v9 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v9 + 8));
    *(_QWORD *)v9 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&v38, v37);
    turi::gl_sarray::operator=((uint64_t)v9 + 8, (uint64_t)&v38);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v38);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v37);
    v10 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v34;
    if (v34)
    {
      v26 = (unint64_t *)&v34->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v38, "\"tc_sarray\" is null.");
    set_error(a4, &v38);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    return 0;
  }
  return v9;
}

void sub_217ECCFB8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 49) < 0)
    operator delete(*(void **)(v23 - 72));
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ECCF9CLL);
}

void sub_217ECD0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sarray_sort(uint64_t a1, int a2, uint64_t *a3)
{
  _OWORD *v6;
  _BYTE v8[40];
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sarray::sort((turi::gl_sarray *)(a1 + 8), a2, (uint64_t)v8);
    v6 = (_OWORD *)operator new();
    v6[1] = 0u;
    v6[2] = 0u;
    *v6 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v6 + 8));
    *(_QWORD *)v6 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v8);
    turi::gl_sarray::operator=((uint64_t)v6 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_sarray\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217ECD1BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ECD1A0);
}

void sub_217ECD24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_create_empty(turi *a1)
{
  _OWORD *v1;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v1 = (_OWORD *)operator new();
  *v1 = 0u;
  v1[1] = 0u;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v1 + 8));
  *(_QWORD *)v1 = &capi_struct_type_info_tc_sframe_inst;
  return v1;
}

void sub_217ECD2E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  uint64_t v10;

  MEMORY[0x219A19A08](v10, 0xA0C404900C826);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ECD2C8);
}

void sub_217ECD334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_create_copy(uint64_t a1)
{
  _OWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v7[2];
  std::__shared_weak_count *v8;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v2 + 8));
  *(_QWORD *)v2 = &capi_struct_type_info_tc_sframe_inst;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v7, (const turi::gl_sframe *)(a1 + 8));
  turi::gl_sframe::operator=((uint64_t)v2 + 8, (uint64_t)v7);
  v7[0] = off_24D91E9C0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_217ECD430(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ECD418);
}

void sub_217ECD4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_load(turi *a1)
{
  _OWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *__p[2];
  char v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v2 + 8));
  *(_QWORD *)v2 = &capi_struct_type_info_tc_sframe_inst;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a1);
  turi::gl_sframe::gl_sframe(v9, __p);
  turi::gl_sframe::operator=((uint64_t)v2 + 8, (uint64_t)v9);
  v9[0] = off_24D91E9C0;
  v3 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v8 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_217ECD5C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t (**a17)(turi::gl_sframe *__hidden this), uint64_t a18)
{
  a17 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a16 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ECD5B0);
}

void sub_217ECD658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sframe_save(turi *a1, char *__s, uint64_t *a3)
{
  void *__p[2];
  char v7;
  std::string v8;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, "binary");
    turi::gl_sframe::save((uint64_t)a1 + 8, (uint64_t)&v8, (uint64_t)__p);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "\"tc_sframe\" is null.");
    set_error(a3, &v8);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_217ECD728(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ECD714);
}

void sub_217ECD794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sframe_add_column(turi *a1, char *__s, uint64_t a3, uint64_t *a4)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    turi::gl_sframe::add_column((uint64_t)a1 + 8, a3 + 8, (uint64_t)&__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_sframe\" is null.");
    set_error(a4, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217ECD848(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ECD834);
}

void sub_217ECD89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sframe_remove_column(turi *a1, char *__s, uint64_t *a3)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    turi::gl_sframe::remove_column((uint64_t)a1 + 8, (unsigned __int8 **)&__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_sframe\" is null.");
    set_error(a3, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217ECD948(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ECD934);
}

void sub_217ECD99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_extract_column_by_name(turi *a1, char *__s)
{
  _OWORD *v4;
  void *__p[2];
  char v7;
  _BYTE v8[40];
  _BYTE v9[40];

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  turi::gl_sframe::select_column((uint64_t)a1 + 8, (uint64_t)__p, (uint64_t)v8);
  v4 = (_OWORD *)operator new();
  v4[1] = 0u;
  v4[2] = 0u;
  *v4 = 0u;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v4 + 8));
  *(_QWORD *)v4 = &capi_struct_type_info_tc_sarray_inst;
  turi::gl_sarray::gl_sarray(v9, v8);
  turi::gl_sarray::operator=((uint64_t)v4 + 8, (uint64_t)v9);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v9);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v8);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_217ECDA94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ECDA7CLL);
}

void sub_217ECDB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sframe_text_summary(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 __p;
  char v7;
  std::string v8[3];
  void *v9;
  char v10;
  uint64_t v11;
  _BYTE v12[13];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    turi::operator<<(v8, (turi::gl_sframe *)(a1 + 8));
    std::stringbuf::str();
    v4 = operator new();
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_flexible_type_inst;
    turi::flexible_type::flexible_type<std::string>((uint64_t)v12, &__p);
    *(_QWORD *)(v4 + 13) = *(_QWORD *)&v12[5];
    *(_QWORD *)(v4 + 8) = *(_QWORD *)v12;
    *(_BYTE *)(v4 + 20) = v12[12];
    if (v7 < 0)
      operator delete((void *)__p);
    v8[0].__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB800];
    *(std::string::size_type *)((char *)v8[0].__r_.__value_.__r.__words
                              + *(_QWORD *)(v8[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                                  + 24);
    v8[0].__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
    if (v10 < 0)
      operator delete(v9);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x219A198F4](&v11);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "SFrame passed in to summarize is null.");
    set_error(a2, v8);
    if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217ECDCD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    if (a21 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217ECDC9CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_sframe_num_rows(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
    return turi::gl_sframe::size((turi::gl_sframe *)(a1 + 8));
  std::string::basic_string[abi:ne180100]<0>(&__p, "SFrame passed in to num_rows is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217ECDE10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ECDDFCLL);
}

void sub_217ECDE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sframe_num_columns(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
    return turi::gl_sframe::num_columns((turi::gl_sframe *)(a1 + 8));
  std::string::basic_string[abi:ne180100]<0>(&__p, "SFrame passed in to num_columns is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217ECDEF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ECDEDCLL);
}

void sub_217ECDF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sframe_column_names(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  const std::string *v10;
  const std::string *v11;
  std::string v12;
  std::string *v13;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sframe::column_names((turi::gl_sframe *)(a1 + 8));
    v9 = 0;
    v8 = 0uLL;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>((uint64_t *)&v8, v10, v11, 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v10) >> 3));
    v4 = operator new();
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_flex_list_inst;
    v5 = v9;
    v7 = v8;
    v9 = 0;
    v8 = 0uLL;
    std::vector<turi::flexible_type>::__vdeallocate((void **)(v4 + 8));
    *(_OWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 24) = v5;
    memset(&v12, 0, sizeof(v12));
    v13 = &v12;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "SFrame passed in to summarize is null.");
    set_error(a2, &v12);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217ECE09C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception_ptr a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 41) < 0)
    operator delete(*(void **)(v16 - 64));
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a12);
  std::exception_ptr::~exception_ptr(&a12);
  __cxa_end_catch();
  JUMPOUT(0x217ECE080);
}

void sub_217ECE11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception_ptr a12)
{
  std::exception_ptr::~exception_ptr(&a12);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_join_on_multiple_columns(turi *a1, uint64_t a2, uint64_t a3, char *__s, uint64_t *a5)
{
  _BYTE *v10;
  _BYTE *v11;
  std::string *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  _OWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *__p[2];
  char v25;
  _QWORD v26[2];
  std::__shared_weak_count *v27;
  std::string *v28;
  std::string *v29;
  unint64_t v30;
  std::string v31;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v31, "\"left tc_sframe\" is null.");
    set_error(a5, &v31);
LABEL_29:
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    return 0;
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v31, "\"right tc_sframe\" is null.");
    set_error(a5, &v31);
    goto LABEL_29;
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *(_BYTE **)(a3 + 8);
  v11 = *(_BYTE **)(a3 + 16);
  if (v10 == v11)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    turi::gl_sframe::join((uint64_t)a1 + 8, a2 + 8, &v28, (uint64_t)__p, v26);
    v16 = (_OWORD *)operator new();
    *v16 = 0u;
    v16[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v16 + 8));
    *(_QWORD *)v16 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&v31, v26);
    turi::gl_sframe::operator=((uint64_t)v16 + 8, (uint64_t)&v31);
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v17 = (std::__shared_weak_count *)v31.__r_.__value_.__r.__words[2];
    if (v31.__r_.__value_.__r.__words[2])
    {
      v18 = (unint64_t *)(v31.__r_.__value_.__r.__words[2] + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v26[0] = off_24D91E9C0;
    v20 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v25 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v12 = 0;
    while (v10[12] == 2)
    {
      v13 = *(_QWORD *)v10;
      v14 = (__int128 *)(*(_QWORD *)v10 + 8);
      if ((unint64_t)v12 >= v30)
      {
        v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v28, v14);
      }
      else
      {
        if (*(char *)(v13 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(v13 + 8), *(_QWORD *)(v13 + 16));
        }
        else
        {
          v15 = *v14;
          v12->__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)v10 + 24);
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v15;
        }
        ++v12;
      }
      v29 = v12;
      v10 += 16;
      if (v10 == v11)
        goto LABEL_15;
    }
    std::string::basic_string[abi:ne180100]<0>(&v31, "Contains a non-string column name.");
    set_error(a5, &v31);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v16 = 0;
  }
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  return v16;
}

void sub_217ECE3CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  a17 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ECE364);
}

void sub_217ECE4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_join_on_single_column(turi *a1, uint64_t a2, turi *a3, char *a4, uint64_t *a5)
{
  uint64_t *v10;
  _QWORD *v11;
  _OWORD *v12;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"left tc_sframe\" is null.");
    set_error(a5, &__p);
    goto LABEL_15;
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"right tc_sframe\" is null.");
    set_error(a5, &__p);
    goto LABEL_15;
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"column\" is null.");
    set_error(a5, &__p);
    goto LABEL_15;
  }
  if (!a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"how\" is null.");
    set_error(a5, &__p);
LABEL_15:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  v10 = tc_flex_list_create((turi *)a5);
  if (!v10)
    return 0;
  v11 = (_QWORD *)tc_ft_create_from_cstring(a3);
  if (!v11 || tc_flex_list_add_element(v10, (uint64_t)v11, a5) == -1)
    return 0;
  v12 = tc_sframe_join_on_multiple_columns(a1, a2, (uint64_t)v10, a4, a5);
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v11 + 8))(*v11, v11);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)*v10 + 8))(*v10, v10);
  return v12;
}

void sub_217ECE678(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ECE658);
}

void sub_217ECE6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sframe_read_csv(turi *a1, uint64_t a2)
{
  char *v3;
  _OWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  turi::flexible_type_impl *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  std::runtime_error *exception;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  turi::flexible_type_impl *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  turi::flexible_type_impl *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  turi::flexible_type_impl *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  unsigned int v48;
  BOOL v49;
  double v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  char **v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  std::string::size_type size;
  _BYTE *v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  __int128 v94;
  void *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  std::string::size_type v100;
  unint64_t *v101;
  unint64_t v102;
  BOOL v103;
  std::string::size_type v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  const std::string *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string::size_type v111;
  uint64_t v112;
  unint64_t v113;
  std::string::size_type v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t *v128;
  void *v129;
  void *v130;
  unsigned int v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t *v135;
  void *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  std::string::size_type v144;
  unint64_t *v145;
  unint64_t v146;
  std::string::size_type v147;
  double v148;
  double v149;
  unint64_t *v150;
  unint64_t v151;
  std::string::size_type v152;
  std::string::size_type v153;
  uint64_t v154;
  std::string::size_type v155;
  unsigned int *v156;
  unsigned int *v157;
  unsigned int v158;
  __int128 v159;
  __int128 v160;
  std::runtime_error *v161;
  std::string *v162;
  __int128 v163;
  std::runtime_error *v164;
  std::string *v165;
  __int128 v166;
  unint64_t *v167;
  unint64_t v168;
  BOOL v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  BOOL v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  BOOL v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  BOOL v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  BOOL v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  std::string::size_type v204;
  unint64_t *v205;
  unint64_t v206;
  std::string::size_type v207;
  void *v208;
  void *v209;
  unsigned int v210;
  unint64_t *v211;
  unint64_t v212;
  std::string::size_type v213;
  void *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  std::string::size_type v219;
  std::string::size_type i;
  uint64_t v221;
  turi::flexible_type_impl *v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  std::string::size_type v228;
  unint64_t *v229;
  unint64_t v230;
  BOOL v231;
  std::string::size_type v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  const std::string *v236;
  unint64_t *v237;
  unint64_t v238;
  std::string::size_type v239;
  uint64_t v240;
  unint64_t v241;
  std::string::size_type v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t *v246;
  unint64_t *v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t *v256;
  void *v257;
  void *v258;
  unsigned int v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t *v263;
  void *v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t *v271;
  std::string::size_type v272;
  unint64_t *v273;
  unint64_t v274;
  std::string::size_type v275;
  double v276;
  double v277;
  unint64_t *v278;
  unint64_t v279;
  std::string::size_type v280;
  std::string::size_type v281;
  uint64_t v282;
  std::string::size_type v283;
  unsigned int *v284;
  unsigned int *v285;
  unsigned int v286;
  __int128 v287;
  __int128 v288;
  unint64_t *v289;
  unint64_t v290;
  BOOL v291;
  unint64_t *v292;
  unint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  BOOL v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  BOOL v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  BOOL v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t *v313;
  unint64_t v314;
  unint64_t *v315;
  unint64_t v316;
  BOOL v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t *v322;
  unint64_t v323;
  unint64_t *v324;
  unint64_t v325;
  std::string::size_type v326;
  unint64_t *v327;
  unint64_t v328;
  std::string::size_type v329;
  void *v330;
  void *v331;
  unsigned int v332;
  unint64_t *v333;
  unint64_t v334;
  std::string::size_type v335;
  void *v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t *v339;
  unint64_t v340;
  std::string::size_type v341;
  std::string::size_type j;
  uint64_t v343;
  _BYTE *v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t *v347;
  unint64_t v348;
  uint64_t v349;
  char **v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int *v356;
  unsigned int *v357;
  unsigned int v358;
  __int128 v359;
  __int128 v360;
  uint64_t v361;
  _BYTE *v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  uint64_t v367;
  char **v368;
  char *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int *v374;
  unsigned int *v375;
  unsigned int v376;
  __int128 v377;
  __int128 v378;
  uint64_t v379;
  _BYTE *v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t *v383;
  unint64_t v384;
  uint64_t v385;
  char **v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unsigned int *v392;
  unsigned int *v393;
  unsigned int v394;
  __int128 v395;
  __int128 v396;
  _QWORD *v397;
  _QWORD *v398;
  const std::locale::facet *v399;
  uint64_t result;
  std::runtime_error *v401;
  std::string *v402;
  __int128 v403;
  std::runtime_error *v404;
  std::string *v405;
  __int128 v406;
  std::runtime_error *v407;
  std::string *v408;
  __int128 v409;
  uint64_t *v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  char *v414;
  char **v415;
  uint64_t *v416;
  int v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  void *v422;
  void *v423;
  char *v424;
  uint64_t v425[3];
  uint64_t v426[3];
  void *v427[2];
  char v428;
  char **v429;
  char *v430;
  uint64_t v431;
  char **v432;
  char *v433[2];
  uint64_t *v434;
  _QWORD *v435[2];
  std::string v436;
  void **v437;
  std::string __idx;
  void *__p[2];
  __int128 v440;
  __int128 v441;
  __int128 v442;
  void *v443;
  char v444;
  _QWORD v445[22];

  v3 = (char *)a1;
  v445[19] = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v4 = (_OWORD *)operator new();
  *v4 = 0u;
  v4[1] = 0u;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v4 + 8));
  *(_QWORD *)v4 = &capi_struct_type_info_tc_sframe_inst;
  v435[0] = 0;
  v435[1] = 0;
  v433[1] = 0;
  v434 = (uint64_t *)v435;
  v432 = v433;
  v433[0] = 0;
  v430 = 0;
  v431 = 0;
  v429 = &v430;
  if (a2)
  {
    if (&v429 != (char ***)(a2 + 8))
    {
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>((uint64_t **)&v429, *(__int128 **)(a2 + 8), (__int128 *)(a2 + 16));
      if (v431)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "header");
        v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v5)
        {
          v6 = (_BYTE *)turi::variant_get_ref<turi::flexible_type>((int *)(v5 + 56));
          v7 = 0;
          switch(v6[12])
          {
            case 0:
              v7 = *(_QWORD *)v6;
              goto LABEL_37;
            case 1:
              v7 = (uint64_t)*(double *)v6;
              goto LABEL_37;
            case 2:
              v11 = *(_QWORD *)v6;
              v12 = (char **)(*(_QWORD *)v6 + 8);
              __idx.__r_.__value_.__r.__words[0] = 0;
              v13 = (char *)v12;
              if (*(char *)(v11 + 31) < 0)
                v13 = *v12;
              std::string::basic_string[abi:ne180100]<0>(__p, v13);
              v7 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
              if (SBYTE7(v440) < 0)
                operator delete(__p[0]);
              if (*(char *)(v11 + 31) < 0)
                v14 = *(_QWORD *)(v11 + 16);
              else
                v14 = *(unsigned __int8 *)(v11 + 31);
              if (__idx.__r_.__value_.__r.__words[0] != v14)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v29 = std::string::append(&v436, " cannot be interpreted as an integer");
                v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
                *(_QWORD *)&v440 = *((_QWORD *)&v29->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v30;
                v29->__r_.__value_.__l.__size_ = 0;
                v29->__r_.__value_.__r.__words[2] = 0;
                v29->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, (const std::string *)__p);
                __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_37;
            case 3:
              v8 = *(_QWORD *)v6;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v8 + 8), *(_QWORD *)(v8 + 16), (uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              goto LABEL_36;
            case 4:
              v15 = *(_QWORD *)v6;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
              goto LABEL_36;
            case 5:
              v16 = *(_QWORD *)v6;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
              goto LABEL_36;
            case 6:
              v7 = (uint64_t)(*(_QWORD *)v6 << 8) >> 8;
              goto LABEL_37;
            case 7:
              goto LABEL_37;
            case 8:
              v17 = *(_QWORD *)v6;
              v18 = *(unsigned int **)(*(_QWORD *)v6 + 16);
              __p[0] = *(void **)(*(_QWORD *)v6 + 8);
              __p[1] = v18;
              if (v18)
              {
                v19 = v18 + 2;
                do
                  v20 = __ldxr(v19);
                while (__stxr(v20 + 1, v19));
              }
              v21 = *(_OWORD *)(v17 + 24);
              v22 = *(_OWORD *)(v17 + 56);
              v441 = *(_OWORD *)(v17 + 40);
              v442 = v22;
              v440 = v21;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              goto LABEL_36;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v6 + 8);
              turi::flexible_type_fail(0);
              if (*((_QWORD *)&v441 + 1))
              {
                *(_QWORD *)&v442 = *((_QWORD *)&v441 + 1);
                operator delete(*((void **)&v441 + 1));
              }
              if ((_QWORD)v440)
              {
                *((_QWORD *)&v440 + 1) = v440;
                operator delete((void *)v440);
              }
              v7 = (uint64_t)__p[1];
              if (!__p[1])
                goto LABEL_37;
              v9 = (unint64_t *)((char *)__p[1] + 8);
              do
                v10 = __ldaxr(v9);
              while (__stlxr(v10 - 1, v9));
              if (!v10)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
              }
LABEL_36:
              v7 = 0;
LABEL_37:
              std::string::basic_string[abi:ne180100]<0>(__p, "use_header");
              BYTE4(v441) = 0;
              LODWORD(v441) = 0;
              *((_QWORD *)&v440 + 1) = v7;
              std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
              std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
              std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v5);
              break;
            default:
LABEL_758:
              result = turi::flexible_type_fail(0);
              __break(1u);
              return result;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "delimiter");
        v23 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v23)
        {
          v24 = (turi::flexible_type_impl *)turi::variant_get_ref<turi::flexible_type>((int *)(v23 + 56));
          switch(*((_BYTE *)v24 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_50;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_50:
              __p[0] = *(void **)MEMORY[0x24BEDB7F0];
              v27 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
              *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
              *(_QWORD *)&v440 = v27;
              *((_QWORD *)&v440 + 1) = MEMORY[0x24BEDB848] + 16;
              if (v444 < 0)
                operator delete(v443);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x219A198F4](v445);
              break;
            case 2:
              v25 = *(_QWORD *)v24;
              if (*(char *)(*(_QWORD *)v24 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v436, *(const std::string::value_type **)(v25 + 8), *(_QWORD *)(v25 + 16));
              }
              else
              {
                v26 = *(_OWORD *)(v25 + 8);
                v436.__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + 24);
                *(_OWORD *)&v436.__r_.__value_.__l.__data_ = v26;
              }
              break;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v24 + 8));
              break;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v24 + 8));
              break;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v24 + 8));
              break;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(v24, &v436);
              break;
            case 7:
              memset(&v436, 0, sizeof(v436));
              break;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              break;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v24 + 8));
              break;
            default:
              goto LABEL_758;
          }
          std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[10],std::string&,0>((uint64_t)__p, "delimiter", &v436);
          std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
          std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v23);
          if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v436.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "comment_char");
        v31 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v31)
        {
          v32 = (turi::flexible_type_impl *)turi::variant_get_ref<turi::flexible_type>((int *)(v31 + 56));
          switch(*((_BYTE *)v32 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_74;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_74:
              __p[0] = *(void **)MEMORY[0x24BEDB7F0];
              v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
              *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
              *(_QWORD *)&v440 = v35;
              *((_QWORD *)&v440 + 1) = MEMORY[0x24BEDB848] + 16;
              if (v444 < 0)
                operator delete(v443);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x219A198F4](v445);
              break;
            case 2:
              v33 = *(_QWORD *)v32;
              if (*(char *)(*(_QWORD *)v32 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v436, *(const std::string::value_type **)(v33 + 8), *(_QWORD *)(v33 + 16));
              }
              else
              {
                v34 = *(_OWORD *)(v33 + 8);
                v436.__r_.__value_.__r.__words[2] = *(_QWORD *)(v33 + 24);
                *(_OWORD *)&v436.__r_.__value_.__l.__data_ = v34;
              }
              break;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v32 + 8));
              break;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v32 + 8));
              break;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v32 + 8));
              break;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(v32, &v436);
              break;
            case 7:
              memset(&v436, 0, sizeof(v436));
              break;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              break;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v32 + 8));
              break;
            default:
              goto LABEL_758;
          }
          std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[13],std::string&,0>((uint64_t)__p, "comment_char", &v436);
          std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
          std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v31);
          if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v436.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "escape_char");
        v36 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v36)
        {
          v37 = (turi::flexible_type_impl *)turi::variant_get_ref<turi::flexible_type>((int *)(v36 + 56));
          switch(*((_BYTE *)v37 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_95;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_95:
              __p[0] = *(void **)MEMORY[0x24BEDB7F0];
              v40 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
              *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
              *(_QWORD *)&v440 = v40;
              *((_QWORD *)&v440 + 1) = MEMORY[0x24BEDB848] + 16;
              if (v444 < 0)
                operator delete(v443);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x219A198F4](v445);
              break;
            case 2:
              v38 = *(_QWORD *)v37;
              if (*(char *)(*(_QWORD *)v37 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v436, *(const std::string::value_type **)(v38 + 8), *(_QWORD *)(v38 + 16));
              }
              else
              {
                v39 = *(_OWORD *)(v38 + 8);
                v436.__r_.__value_.__r.__words[2] = *(_QWORD *)(v38 + 24);
                *(_OWORD *)&v436.__r_.__value_.__l.__data_ = v39;
              }
              break;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v37 + 8));
              break;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v37 + 8));
              break;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v37 + 8));
              break;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(v37, &v436);
              break;
            case 7:
              memset(&v436, 0, sizeof(v436));
              break;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              break;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v37 + 8));
              break;
            default:
              goto LABEL_758;
          }
          std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[12],std::string&,0>((uint64_t)__p, "escape_char", &v436);
          std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
          std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v36);
          if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v436.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "quote_char");
        v41 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v41)
        {
          v42 = (turi::flexible_type_impl *)turi::variant_get_ref<turi::flexible_type>((int *)(v41 + 56));
          switch(*((_BYTE *)v42 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_116;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_116:
              __p[0] = *(void **)MEMORY[0x24BEDB7F0];
              v45 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
              *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
              *(_QWORD *)&v440 = v45;
              *((_QWORD *)&v440 + 1) = MEMORY[0x24BEDB848] + 16;
              if (v444 < 0)
                operator delete(v443);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x219A198F4](v445);
              break;
            case 2:
              v43 = *(_QWORD *)v42;
              if (*(char *)(*(_QWORD *)v42 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v436, *(const std::string::value_type **)(v43 + 8), *(_QWORD *)(v43 + 16));
              }
              else
              {
                v44 = *(_OWORD *)(v43 + 8);
                v436.__r_.__value_.__r.__words[2] = *(_QWORD *)(v43 + 24);
                *(_OWORD *)&v436.__r_.__value_.__l.__data_ = v44;
              }
              break;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v42 + 8));
              break;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v42 + 8));
              break;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v42 + 8));
              break;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(v42, &v436);
              break;
            case 7:
              memset(&v436, 0, sizeof(v436));
              break;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              break;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v42 + 8));
              break;
            default:
              goto LABEL_758;
          }
          std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[11],std::string&,0>((uint64_t)__p, "quote_char", &v436);
          std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
          std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v41);
          if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v436.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "error_bad_lines");
        v46 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v46)
        {
          v47 = (_BYTE *)turi::variant_get_ref<turi::flexible_type>((int *)(v46 + 56));
          v48 = 1;
          switch(v47[12])
          {
            case 0:
              v50 = *(double *)v47;
              goto LABEL_136;
            case 1:
              v49 = *(double *)v47 == 0.0;
              goto LABEL_137;
            case 2:
              if (*(char *)(*(_QWORD *)v47 + 31) < 0)
                v50 = *(double *)(*(_QWORD *)v47 + 16);
              else
                *(_QWORD *)&v50 = *(unsigned __int8 *)(*(_QWORD *)v47 + 31);
LABEL_136:
              v49 = *(_QWORD *)&v50 == 0;
              goto LABEL_137;
            case 3:
            case 4:
            case 5:
              v49 = *(_QWORD *)(*(_QWORD *)v47 + 8) == *(_QWORD *)(*(_QWORD *)v47 + 16);
              goto LABEL_137;
            case 7:
              goto LABEL_140;
            case 8:
              v49 = *(_QWORD *)(*(_QWORD *)v47 + 64) == 3;
LABEL_137:
              v48 = v49;
LABEL_140:
              std::string::basic_string[abi:ne180100]<0>(__p, "continue_on_failure");
              BYTE4(v441) = 0;
              LODWORD(v441) = 0;
              *((_QWORD *)&v440 + 1) = v48;
              std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
              std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
              std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v46);
              break;
            default:
              turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
          }
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "double_quote");
        v51 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v51)
        {
          v52 = (_BYTE *)turi::variant_get_ref<turi::flexible_type>((int *)(v51 + 56));
          v53 = 0;
          switch(v52[12])
          {
            case 0:
              v53 = *(_QWORD *)v52;
              goto LABEL_172;
            case 1:
              v53 = (uint64_t)*(double *)v52;
              goto LABEL_172;
            case 2:
              v57 = *(_QWORD *)v52;
              v58 = (char **)(*(_QWORD *)v52 + 8);
              __idx.__r_.__value_.__r.__words[0] = 0;
              v59 = (char *)v58;
              if (*(char *)(v57 + 31) < 0)
                v59 = *v58;
              std::string::basic_string[abi:ne180100]<0>(__p, v59);
              v53 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
              if (SBYTE7(v440) < 0)
                operator delete(__p[0]);
              if (*(char *)(v57 + 31) < 0)
                v60 = *(_QWORD *)(v57 + 16);
              else
                v60 = *(unsigned __int8 *)(v57 + 31);
              if (__idx.__r_.__value_.__r.__words[0] != v60)
              {
                v161 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v162 = std::string::append(&v436, " cannot be interpreted as an integer");
                v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
                *(_QWORD *)&v440 = *((_QWORD *)&v162->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v163;
                v162->__r_.__value_.__l.__size_ = 0;
                v162->__r_.__value_.__r.__words[2] = 0;
                v162->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v161, (const std::string *)__p);
                __cxa_throw(v161, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_172;
            case 3:
              v54 = *(_QWORD *)v52;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v54 + 8), *(_QWORD *)(v54 + 16), (uint64_t)(*(_QWORD *)(v54 + 16) - *(_QWORD *)(v54 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              goto LABEL_171;
            case 4:
              v61 = *(_QWORD *)v52;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v61 + 8), *(uint64_t **)(v61 + 16), (uint64_t)(*(_QWORD *)(v61 + 16) - *(_QWORD *)(v61 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
              goto LABEL_171;
            case 5:
              v62 = *(_QWORD *)v52;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v62 + 8), *(uint64_t **)(v62 + 16), (uint64_t)(*(_QWORD *)(v62 + 16) - *(_QWORD *)(v62 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
              goto LABEL_171;
            case 6:
              v53 = (uint64_t)(*(_QWORD *)v52 << 8) >> 8;
              goto LABEL_172;
            case 7:
              goto LABEL_172;
            case 8:
              v63 = *(_QWORD *)v52;
              v64 = *(unsigned int **)(*(_QWORD *)v52 + 16);
              __p[0] = *(void **)(*(_QWORD *)v52 + 8);
              __p[1] = v64;
              if (v64)
              {
                v65 = v64 + 2;
                do
                  v66 = __ldxr(v65);
                while (__stxr(v66 + 1, v65));
              }
              v67 = *(_OWORD *)(v63 + 24);
              v68 = *(_OWORD *)(v63 + 56);
              v441 = *(_OWORD *)(v63 + 40);
              v442 = v68;
              v440 = v67;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              goto LABEL_171;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v52 + 8);
              turi::flexible_type_fail(0);
              if (*((_QWORD *)&v441 + 1))
              {
                *(_QWORD *)&v442 = *((_QWORD *)&v441 + 1);
                operator delete(*((void **)&v441 + 1));
              }
              if ((_QWORD)v440)
              {
                *((_QWORD *)&v440 + 1) = v440;
                operator delete((void *)v440);
              }
              v53 = (uint64_t)__p[1];
              if (!__p[1])
                goto LABEL_172;
              v55 = (unint64_t *)((char *)__p[1] + 8);
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v53);
              }
LABEL_171:
              v53 = 0;
LABEL_172:
              std::string::basic_string[abi:ne180100]<0>(__p, "double_quote");
              BYTE4(v441) = 0;
              LODWORD(v441) = 0;
              *((_QWORD *)&v440 + 1) = v53;
              std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
              std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
              std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v51);
              break;
            default:
              goto LABEL_758;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "skip_initial_space");
        v69 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v69)
        {
          v70 = (_BYTE *)turi::variant_get_ref<turi::flexible_type>((int *)(v69 + 56));
          v71 = 0;
          switch(v70[12])
          {
            case 0:
              v71 = *(_QWORD *)v70;
              goto LABEL_204;
            case 1:
              v71 = (uint64_t)*(double *)v70;
              goto LABEL_204;
            case 2:
              v75 = *(_QWORD *)v70;
              v76 = (char **)(*(_QWORD *)v70 + 8);
              __idx.__r_.__value_.__r.__words[0] = 0;
              v77 = (char *)v76;
              if (*(char *)(v75 + 31) < 0)
                v77 = *v76;
              std::string::basic_string[abi:ne180100]<0>(__p, v77);
              v71 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
              if (SBYTE7(v440) < 0)
                operator delete(__p[0]);
              if (*(char *)(v75 + 31) < 0)
                v78 = *(_QWORD *)(v75 + 16);
              else
                v78 = *(unsigned __int8 *)(v75 + 31);
              if (__idx.__r_.__value_.__r.__words[0] != v78)
              {
                v164 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v165 = std::string::append(&v436, " cannot be interpreted as an integer");
                v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
                *(_QWORD *)&v440 = *((_QWORD *)&v165->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v166;
                v165->__r_.__value_.__l.__size_ = 0;
                v165->__r_.__value_.__r.__words[2] = 0;
                v165->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v164, (const std::string *)__p);
                __cxa_throw(v164, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_204;
            case 3:
              v72 = *(_QWORD *)v70;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v72 + 8), *(_QWORD *)(v72 + 16), (uint64_t)(*(_QWORD *)(v72 + 16) - *(_QWORD *)(v72 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              goto LABEL_203;
            case 4:
              v79 = *(_QWORD *)v70;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v79 + 8), *(uint64_t **)(v79 + 16), (uint64_t)(*(_QWORD *)(v79 + 16) - *(_QWORD *)(v79 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
              goto LABEL_203;
            case 5:
              v80 = *(_QWORD *)v70;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v80 + 8), *(uint64_t **)(v80 + 16), (uint64_t)(*(_QWORD *)(v80 + 16) - *(_QWORD *)(v80 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
              goto LABEL_203;
            case 6:
              v71 = (uint64_t)(*(_QWORD *)v70 << 8) >> 8;
              goto LABEL_204;
            case 7:
              goto LABEL_204;
            case 8:
              v81 = *(_QWORD *)v70;
              v82 = *(unsigned int **)(*(_QWORD *)v70 + 16);
              __p[0] = *(void **)(*(_QWORD *)v70 + 8);
              __p[1] = v82;
              if (v82)
              {
                v83 = v82 + 2;
                do
                  v84 = __ldxr(v83);
                while (__stxr(v84 + 1, v83));
              }
              v85 = *(_OWORD *)(v81 + 24);
              v86 = *(_OWORD *)(v81 + 56);
              v441 = *(_OWORD *)(v81 + 40);
              v442 = v86;
              v440 = v85;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              goto LABEL_203;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v70 + 8);
              turi::flexible_type_fail(0);
              if (*((_QWORD *)&v441 + 1))
              {
                *(_QWORD *)&v442 = *((_QWORD *)&v441 + 1);
                operator delete(*((void **)&v441 + 1));
              }
              if ((_QWORD)v440)
              {
                *((_QWORD *)&v440 + 1) = v440;
                operator delete((void *)v440);
              }
              v71 = (uint64_t)__p[1];
              if (!__p[1])
                goto LABEL_204;
              v73 = (unint64_t *)((char *)__p[1] + 8);
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v71);
              }
LABEL_203:
              v71 = 0;
LABEL_204:
              std::string::basic_string[abi:ne180100]<0>(__p, "skip_initial_space");
              BYTE4(v441) = 0;
              LODWORD(v441) = 0;
              *((_QWORD *)&v440 + 1) = v71;
              std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
              std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
              std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v69);
              break;
            default:
              goto LABEL_758;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "column_type_hints");
        v87 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        v424 = v3;
        if (&v430 != (char **)v87)
        {
          turi::variant_converter<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,void>::get((int *)(v87 + 56), (uint64_t)&v436);
          size = v436.__r_.__value_.__l.__size_;
          v89 = (_BYTE *)v436.__r_.__value_.__r.__words[0];
          if (v436.__r_.__value_.__r.__words[0] != v436.__r_.__value_.__l.__size_)
          {
            v422 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
            v423 = (void *)*MEMORY[0x24BEDB7F0];
            v421 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
            v420 = MEMORY[0x24BEDB848] + 16;
            do
            {
              if (v89[12] != 2)
                tc_sframe_read_csv::$_0::operator()();
              if (v89[28])
              {
                if (v89[28] != 2)
                  tc_sframe_read_csv::$_1::operator()();
                v90 = turi::flex_type_enum_from_name((uint64_t *)(*((_QWORD *)v89 + 2) + 8));
                switch(v89[12])
                {
                  case 0:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                    std::ostream::operator<<();
                    std::stringbuf::str();
                    __p[0] = v423;
                    *(void **)((char *)__p + *((_QWORD *)v423 - 3)) = v422;
                    *(_QWORD *)&v440 = v421;
                    v91 = v420;
                    goto LABEL_227;
                  case 1:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                    std::ostream::operator<<();
                    std::stringbuf::str();
                    __p[0] = v423;
                    *(void **)((char *)__p + *((_QWORD *)v423 - 3)) = v422;
                    v91 = MEMORY[0x24BEDB848] + 16;
                    *(_QWORD *)&v440 = v421;
LABEL_227:
                    *((_QWORD *)&v440 + 1) = v91;
                    if (v444 < 0)
                      operator delete(v443);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x219A198F4](v445);
                    goto LABEL_234;
                  case 2:
                    v96 = *(_QWORD *)v89;
                    if (*(char *)(*(_QWORD *)v89 + 31) < 0)
                    {
                      std::string::__init_copy_ctor_external(&__idx, *(const std::string::value_type **)(v96 + 8), *(_QWORD *)(v96 + 16));
                    }
                    else
                    {
                      v97 = *(_OWORD *)(v96 + 8);
                      __idx.__r_.__value_.__r.__words[2] = *(_QWORD *)(v96 + 24);
                      *(_OWORD *)&__idx.__r_.__value_.__l.__data_ = v97;
                    }
                    goto LABEL_234;
                  case 3:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v89 + 8));
                    goto LABEL_234;
                  case 4:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v89 + 8));
                    goto LABEL_234;
                  case 5:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v89 + 8));
                    goto LABEL_234;
                  case 6:
                    turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v89, &__idx);
                    goto LABEL_234;
                  case 7:
                    memset(&__idx, 0, sizeof(__idx));
                    goto LABEL_234;
                  case 8:
                    turi::flexible_type_impl::get_string_visitor::operator()();
                    goto LABEL_234;
                  case 9:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v89 + 8));
LABEL_234:
                    __p[0] = &__idx;
                    *((_BYTE *)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v432, (const void **)&__idx.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__p)+ 56) = v90;
                    if ((SHIBYTE(__idx.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_237;
                    v95 = (void *)__idx.__r_.__value_.__r.__words[0];
                    break;
                  default:
                    goto LABEL_758;
                }
              }
              else
              {
                v92 = v89[16];
                v93 = *(_QWORD *)v89;
                if (*(char *)(*(_QWORD *)v89 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v93 + 8), *(_QWORD *)(v93 + 16));
                }
                else
                {
                  v94 = *(_OWORD *)(v93 + 8);
                  *(_QWORD *)&v440 = *(_QWORD *)(v93 + 24);
                  *(_OWORD *)__p = v94;
                }
                v437 = __p;
                *((_BYTE *)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v432, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v437)+ 56) = v92;
                if ((SBYTE7(v440) & 0x80000000) == 0)
                  goto LABEL_237;
                v95 = __p[0];
              }
              operator delete(v95);
LABEL_237:
              v89 += 32;
            }
            while (v89 != (_BYTE *)size);
          }
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v87);
          __p[0] = &v436;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "na_values");
        v98 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v98)
        {
          v99 = turi::variant_get_ref<turi::flexible_type>((int *)(v98 + 56));
          switch(*(_BYTE *)(v99 + 12))
          {
            case 0:
              v100 = *(_QWORD *)v99;
              __idx.__r_.__value_.__s.__data_[12] = 0;
              LODWORD(__idx.__r_.__value_.__r.__words[1]) = 0;
              __idx.__r_.__value_.__r.__words[0] = v100;
              memset(&v436, 0, sizeof(v436));
              __p[0] = &v436;
              LOBYTE(__p[1]) = 0;
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
              v436.__r_.__value_.__l.__size_ = v436.__r_.__value_.__r.__words[0];
              v436.__r_.__value_.__r.__words[2] = v436.__r_.__value_.__r.__words[0] + 16;
              v436.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v436.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, (uint64_t *)&__idx.__r_.__value_.__r.__words[2], (uint64_t)v436.__r_.__value_.__l.__data_);
              switch(__idx.__r_.__value_.__s.__data_[12])
              {
                case 2:
                  v101 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v102 = __ldaxr(v101);
                    v103 = --v102 == 0;
                  }
                  while (__stlxr(v102, v101));
                  goto LABEL_317;
                case 3:
                  v181 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v182 = __ldaxr(v181);
                    v183 = --v182 == 0;
                  }
                  while (__stlxr(v182, v181));
                  goto LABEL_396;
                case 4:
                  v167 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v168 = __ldaxr(v167);
                    v169 = --v168 == 0;
                  }
                  while (__stlxr(v168, v167));
                  goto LABEL_380;
                case 5:
                  v186 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v187 = __ldaxr(v186);
                    v188 = --v187 == 0;
                  }
                  while (__stlxr(v187, v186));
                  goto LABEL_404;
                case 8:
                  v193 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v194 = __ldaxr(v193);
                    v195 = --v194 == 0;
                  }
                  while (__stlxr(v194, v193));
                  goto LABEL_411;
                case 9:
                  v172 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v173 = __ldaxr(v172);
                    v174 = --v173 == 0;
                  }
                  while (__stlxr(v173, v172));
                  goto LABEL_386;
                default:
                  goto LABEL_417;
              }
            case 1:
              v144 = *(_QWORD *)v99;
              LODWORD(__idx.__r_.__value_.__r.__words[1]) = 0;
              __idx.__r_.__value_.__s.__data_[12] = 1;
              __idx.__r_.__value_.__r.__words[0] = v144;
              memset(&v436, 0, sizeof(v436));
              __p[0] = &v436;
              LOBYTE(__p[1]) = 0;
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
              v436.__r_.__value_.__l.__size_ = v436.__r_.__value_.__r.__words[0];
              v436.__r_.__value_.__r.__words[2] = v436.__r_.__value_.__r.__words[0] + 16;
              v436.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v436.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, (uint64_t *)&__idx.__r_.__value_.__r.__words[2], (uint64_t)v436.__r_.__value_.__l.__data_);
              switch(__idx.__r_.__value_.__s.__data_[12])
              {
                case 2:
                  v145 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v146 = __ldaxr(v145);
                    v103 = --v146 == 0;
                  }
                  while (__stlxr(v146, v145));
                  goto LABEL_317;
                case 3:
                  v184 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v185 = __ldaxr(v184);
                    v183 = --v185 == 0;
                  }
                  while (__stlxr(v185, v184));
                  goto LABEL_396;
                case 4:
                  v170 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v171 = __ldaxr(v170);
                    v169 = --v171 == 0;
                  }
                  while (__stlxr(v171, v170));
                  goto LABEL_380;
                case 5:
                  v189 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v190 = __ldaxr(v189);
                    v188 = --v190 == 0;
                  }
                  while (__stlxr(v190, v189));
                  goto LABEL_404;
                case 8:
                  v196 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v197 = __ldaxr(v196);
                    v195 = --v197 == 0;
                  }
                  while (__stlxr(v197, v196));
                  goto LABEL_411;
                case 9:
                  v175 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v176 = __ldaxr(v175);
                    v174 = --v176 == 0;
                  }
                  while (__stlxr(v176, v175));
                  goto LABEL_386;
                default:
                  goto LABEL_417;
              }
            case 2:
              v108 = (const std::string *)(*(_QWORD *)v99 + 8);
              __idx.__r_.__value_.__r.__words[0] = 0;
              LODWORD(__idx.__r_.__value_.__r.__words[1]) = 0;
              __idx.__r_.__value_.__s.__data_[12] = 0;
              turi::flexible_type::operator=<std::string>((uint64_t *)&__idx, v108);
              memset(&v436, 0, sizeof(v436));
              __p[0] = &v436;
              LOBYTE(__p[1]) = 0;
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
              v436.__r_.__value_.__l.__size_ = v436.__r_.__value_.__r.__words[0];
              v436.__r_.__value_.__r.__words[2] = v436.__r_.__value_.__r.__words[0] + 16;
              v436.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v436.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, (uint64_t *)&__idx.__r_.__value_.__r.__words[2], (uint64_t)v436.__r_.__value_.__l.__data_);
              switch(__idx.__r_.__value_.__s.__data_[12])
              {
                case 2:
                  v109 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v110 = __ldaxr(v109);
                    v103 = --v110 == 0;
                  }
                  while (__stlxr(v110, v109));
                  goto LABEL_317;
                case 3:
                  v211 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v212 = __ldaxr(v211);
                    v183 = --v212 == 0;
                  }
                  while (__stlxr(v212, v211));
                  goto LABEL_396;
                case 4:
                  v202 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v203 = __ldaxr(v202);
                    v169 = --v203 == 0;
                  }
                  while (__stlxr(v203, v202));
                  goto LABEL_380;
                case 5:
                  v215 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v216 = __ldaxr(v215);
                    v188 = --v216 == 0;
                  }
                  while (__stlxr(v216, v215));
                  goto LABEL_404;
                case 8:
                  v217 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v218 = __ldaxr(v217);
                    v195 = --v218 == 0;
                  }
                  while (__stlxr(v218, v217));
                  goto LABEL_411;
                case 9:
                  v205 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v206 = __ldaxr(v205);
                    v174 = --v206 == 0;
                  }
                  while (__stlxr(v206, v205));
                  goto LABEL_386;
                default:
                  goto LABEL_417;
              }
            case 3:
              v111 = *(_QWORD *)v99;
              std::vector<turi::flexible_type>::vector(&v436, (uint64_t)(*(_QWORD *)(*(_QWORD *)v99 + 16) - *(_QWORD *)(*(_QWORD *)v99 + 8)) >> 3);
              v112 = *(_QWORD *)(v111 + 8);
              if (*(_QWORD *)(v111 + 16) != v112)
              {
                v113 = 0;
                do
                {
                  v114 = v436.__r_.__value_.__r.__words[0] + 16 * v113;
                  switch(*(_BYTE *)(v114 + 12))
                  {
                    case 2:
                      v115 = *(unint64_t **)v114;
                      do
                      {
                        v116 = __ldaxr(v115);
                        v117 = v116 - 1;
                      }
                      while (__stlxr(v117, v115));
                      if (!v117)
                      {
                        v118 = *(unint64_t **)v114;
                        if (!*(_QWORD *)v114)
                          goto LABEL_305;
                        if (*((char *)v118 + 31) < 0)
                          operator delete((void *)v118[1]);
                        v119 = v118;
                        v120 = 0x1012C404EF22A49;
                        goto LABEL_304;
                      }
                      break;
                    case 3:
                      v132 = *(unint64_t **)v114;
                      do
                      {
                        v133 = __ldaxr(v132);
                        v134 = v133 - 1;
                      }
                      while (__stlxr(v134, v132));
                      if (!v134)
                      {
                        v135 = *(unint64_t **)v114;
                        if (!*(_QWORD *)v114)
                          goto LABEL_305;
                        v136 = (void *)v135[1];
                        if (v136)
                        {
                          v135[2] = (unint64_t)v136;
                          operator delete(v136);
                        }
                        v119 = v135;
                        v120 = 0x1080C409938AC02;
                        goto LABEL_304;
                      }
                      break;
                    case 4:
                      v121 = *(unint64_t **)v114;
                      do
                      {
                        v122 = __ldaxr(v121);
                        v123 = v122 - 1;
                      }
                      while (__stlxr(v123, v121));
                      if (!v123)
                      {
                        v124 = *(unint64_t **)v114;
                        if (!*(_QWORD *)v114)
                          goto LABEL_305;
                        __p[0] = v124 + 1;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                        goto LABEL_297;
                      }
                      break;
                    case 5:
                      v137 = *(unint64_t **)v114;
                      do
                      {
                        v138 = __ldaxr(v137);
                        v139 = v138 - 1;
                      }
                      while (__stlxr(v139, v137));
                      if (!v139)
                      {
                        v124 = *(unint64_t **)v114;
                        if (!*(_QWORD *)v114)
                          goto LABEL_305;
                        __p[0] = v124 + 1;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_297:
                        v119 = v124;
                        v120 = 0x1020C405E66F15BLL;
                        goto LABEL_304;
                      }
                      break;
                    case 8:
                      v140 = *(unint64_t **)v114;
                      do
                      {
                        v141 = __ldaxr(v140);
                        v142 = v141 - 1;
                      }
                      while (__stlxr(v142, v140));
                      if (!v142)
                      {
                        v143 = *(unint64_t **)v114;
                        if (!*(_QWORD *)v114)
                          goto LABEL_305;
                        boost::detail::shared_count::~shared_count((unsigned int **)v143 + 2);
                        v119 = v143;
                        v131 = -235920773;
                        goto LABEL_303;
                      }
                      break;
                    case 9:
                      v125 = *(unint64_t **)v114;
                      do
                      {
                        v126 = __ldaxr(v125);
                        v127 = v126 - 1;
                      }
                      while (__stlxr(v127, v125));
                      if (!v127)
                      {
                        v128 = *(unint64_t **)v114;
                        if (*(_QWORD *)v114)
                        {
                          v129 = (void *)v128[6];
                          if (v129)
                          {
                            v128[7] = (unint64_t)v129;
                            operator delete(v129);
                          }
                          v130 = (void *)v128[3];
                          if (v130)
                          {
                            v128[4] = (unint64_t)v130;
                            operator delete(v130);
                          }
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v128 + 1));
                          v119 = v128;
                          v131 = 2071181815;
LABEL_303:
                          v120 = v131 | 0x1030C4000000000;
LABEL_304:
                          MEMORY[0x219A19A08](v119, v120);
                        }
LABEL_305:
                        *(_QWORD *)v114 = 0;
                      }
                      break;
                    default:
                      break;
                  }
                  *(_QWORD *)v114 = 0;
                  *(_DWORD *)(v114 + 8) = 0;
                  *(_BYTE *)(v114 + 12) = 1;
                  *(_QWORD *)v114 = *(_QWORD *)(v112 + 8 * v113++);
                  v112 = *(_QWORD *)(v111 + 8);
                  v3 = v424;
                }
                while (v113 < (*(_QWORD *)(v111 + 16) - v112) >> 3);
              }
              break;
            case 4:
              v104 = *(_QWORD *)v99;
              memset(&v436, 0, sizeof(v436));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v436, *(uint64_t **)(v104 + 8), *(uint64_t **)(v104 + 16), (uint64_t)(*(_QWORD *)(v104 + 16) - *(_QWORD *)(v104 + 8)) >> 4);
              break;
            case 5:
              v147 = *(_QWORD *)v99;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v147 + 8), *(uint64_t **)(v147 + 16), (uint64_t)(*(_QWORD *)(v147 + 16) - *(_QWORD *)(v147 + 8)) >> 5);
              turi::flexible_type_fail(0);
              memset(&v436, 0, sizeof(v436));
              __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
              break;
            case 6:
              v148 = (double)((uint64_t)(*(_QWORD *)v99 << 8) >> 8);
              v149 = (double)*(int *)(v99 + 8) / 1000000.0;
              LODWORD(__idx.__r_.__value_.__r.__words[1]) = 0;
              __idx.__r_.__value_.__s.__data_[12] = 1;
              *(double *)&__idx.__r_.__value_.__l.__data_ = v149 + v148;
              memset(&v436, 0, sizeof(v436));
              __p[0] = &v436;
              LOBYTE(__p[1]) = 0;
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
              v436.__r_.__value_.__l.__size_ = v436.__r_.__value_.__r.__words[0];
              v436.__r_.__value_.__r.__words[2] = v436.__r_.__value_.__r.__words[0] + 16;
              v436.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v436.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, (uint64_t *)&__idx.__r_.__value_.__r.__words[2], (uint64_t)v436.__r_.__value_.__l.__data_);
              switch(__idx.__r_.__value_.__s.__data_[12])
              {
                case 2:
                  v150 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v151 = __ldaxr(v150);
                    v103 = --v151 == 0;
                  }
                  while (__stlxr(v151, v150));
LABEL_317:
                  if (v103)
                  {
                    v152 = __idx.__r_.__value_.__r.__words[0];
                    if (__idx.__r_.__value_.__r.__words[0])
                    {
                      if (*(char *)(__idx.__r_.__value_.__r.__words[0] + 31) < 0)
                        operator delete(*(void **)(__idx.__r_.__value_.__r.__words[0] + 8));
                      v153 = v152;
                      v154 = 0x1012C404EF22A49;
                      goto LABEL_416;
                    }
                  }
                  break;
                case 3:
                  v191 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v192 = __ldaxr(v191);
                    v183 = --v192 == 0;
                  }
                  while (__stlxr(v192, v191));
LABEL_396:
                  if (v183)
                  {
                    v213 = __idx.__r_.__value_.__r.__words[0];
                    if (__idx.__r_.__value_.__r.__words[0])
                    {
                      v214 = *(void **)(__idx.__r_.__value_.__r.__words[0] + 8);
                      if (v214)
                      {
                        *(_QWORD *)(__idx.__r_.__value_.__r.__words[0] + 16) = v214;
                        operator delete(v214);
                      }
                      v153 = v213;
                      v154 = 0x1080C409938AC02;
                      goto LABEL_416;
                    }
                  }
                  break;
                case 4:
                  v177 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v178 = __ldaxr(v177);
                    v169 = --v178 == 0;
                  }
                  while (__stlxr(v178, v177));
LABEL_380:
                  if (v169)
                  {
                    v204 = __idx.__r_.__value_.__r.__words[0];
                    if (__idx.__r_.__value_.__r.__words[0])
                    {
                      __p[0] = (void *)(__idx.__r_.__value_.__r.__words[0] + 8);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                      goto LABEL_408;
                    }
                  }
                  break;
                case 5:
                  v198 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v199 = __ldaxr(v198);
                    v188 = --v199 == 0;
                  }
                  while (__stlxr(v199, v198));
LABEL_404:
                  if (v188)
                  {
                    v204 = __idx.__r_.__value_.__r.__words[0];
                    if (__idx.__r_.__value_.__r.__words[0])
                    {
                      __p[0] = (void *)(__idx.__r_.__value_.__r.__words[0] + 8);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_408:
                      v153 = v204;
                      v154 = 0x1020C405E66F15BLL;
                      goto LABEL_416;
                    }
                  }
                  break;
                case 8:
                  v200 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v201 = __ldaxr(v200);
                    v195 = --v201 == 0;
                  }
                  while (__stlxr(v201, v200));
LABEL_411:
                  if (v195)
                  {
                    v219 = __idx.__r_.__value_.__r.__words[0];
                    if (__idx.__r_.__value_.__r.__words[0])
                    {
                      boost::detail::shared_count::~shared_count((unsigned int **)(__idx.__r_.__value_.__r.__words[0]
                                                                                 + 16));
                      v153 = v219;
                      v210 = -235920773;
                      goto LABEL_415;
                    }
                  }
                  break;
                case 9:
                  v179 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v180 = __ldaxr(v179);
                    v174 = --v180 == 0;
                  }
                  while (__stlxr(v180, v179));
LABEL_386:
                  if (v174)
                  {
                    v207 = __idx.__r_.__value_.__r.__words[0];
                    if (__idx.__r_.__value_.__r.__words[0])
                    {
                      v208 = *(void **)(__idx.__r_.__value_.__r.__words[0] + 48);
                      if (v208)
                      {
                        *(_QWORD *)(__idx.__r_.__value_.__r.__words[0] + 56) = v208;
                        operator delete(v208);
                      }
                      v209 = *(void **)(v207 + 24);
                      if (v209)
                      {
                        *(_QWORD *)(v207 + 32) = v209;
                        operator delete(v209);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v207 + 8);
                      v153 = v207;
                      v210 = 2071181815;
LABEL_415:
                      v154 = v210 | 0x1030C4000000000;
LABEL_416:
                      MEMORY[0x219A19A08](v153, v154);
                    }
                  }
                  break;
                default:
                  goto LABEL_417;
              }
              break;
            case 7:
              memset(&v436, 0, sizeof(v436));
              break;
            case 8:
              v155 = *(_QWORD *)v99;
              v156 = *(unsigned int **)(*(_QWORD *)v99 + 16);
              __p[0] = *(void **)(*(_QWORD *)v99 + 8);
              __p[1] = v156;
              if (v156)
              {
                v157 = v156 + 2;
                do
                  v158 = __ldxr(v157);
                while (__stxr(v158 + 1, v157));
              }
              v159 = *(_OWORD *)(v155 + 24);
              v160 = *(_OWORD *)(v155 + 56);
              v441 = *(_OWORD *)(v155 + 40);
              v442 = v160;
              v440 = v159;
              turi::flexible_type_fail(0);
              memset(&v436, 0, sizeof(v436));
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              break;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v99 + 8);
              turi::flexible_type_fail(0);
              memset(&v436, 0, sizeof(v436));
              if (*((_QWORD *)&v441 + 1))
              {
                *(_QWORD *)&v442 = *((_QWORD *)&v441 + 1);
                operator delete(*((void **)&v441 + 1));
              }
              if ((_QWORD)v440)
              {
                *((_QWORD *)&v440 + 1) = v440;
                operator delete((void *)v440);
              }
              v105 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v106 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v107 = __ldaxr(v106);
                while (__stlxr(v107 - 1, v106));
                if (!v107)
                {
                  ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                  std::__shared_weak_count::__release_weak(v105);
                }
              }
              break;
            default:
              goto LABEL_758;
          }
LABEL_417:
          for (i = v436.__r_.__value_.__r.__words[0]; i != v436.__r_.__value_.__l.__size_; i += 16)
          {
            if (*(_BYTE *)(i + 12) != 2)
              tc_sframe_read_csv::$_2::operator()();
          }
          std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[10],std::vector<turi::flexible_type> &,0>((uint64_t)__p, "na_values", (uint64_t **)&v436);
          std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
          std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v98);
          __p[0] = &v436;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "line_terminator");
        v221 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v221)
        {
          v222 = (turi::flexible_type_impl *)turi::variant_get_ref<turi::flexible_type>((int *)(v221 + 56));
          switch(*((_BYTE *)v222 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_434;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_434:
              __p[0] = *(void **)MEMORY[0x24BEDB7F0];
              v225 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
              *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
              *(_QWORD *)&v440 = v225;
              *((_QWORD *)&v440 + 1) = MEMORY[0x24BEDB848] + 16;
              if (v444 < 0)
                operator delete(v443);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x219A198F4](v445);
              break;
            case 2:
              v223 = *(_QWORD *)v222;
              if (*(char *)(*(_QWORD *)v222 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v436, *(const std::string::value_type **)(v223 + 8), *(_QWORD *)(v223 + 16));
              }
              else
              {
                v224 = *(_OWORD *)(v223 + 8);
                v436.__r_.__value_.__r.__words[2] = *(_QWORD *)(v223 + 24);
                *(_OWORD *)&v436.__r_.__value_.__l.__data_ = v224;
              }
              break;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v222 + 8));
              break;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v222 + 8));
              break;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v222 + 8));
              break;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(v222, &v436);
              break;
            case 7:
              memset(&v436, 0, sizeof(v436));
              break;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              break;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v222 + 8));
              break;
            default:
              goto LABEL_758;
          }
          std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[16],std::string&,0>((uint64_t)__p, "line_terminator", &v436);
          std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
          std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v221);
          if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v436.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "output_columns");
        v226 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v226)
        {
          v227 = turi::variant_get_ref<turi::flexible_type>((int *)(v226 + 56));
          switch(*(_BYTE *)(v227 + 12))
          {
            case 0:
              v228 = *(_QWORD *)v227;
              __idx.__r_.__value_.__s.__data_[12] = 0;
              LODWORD(__idx.__r_.__value_.__r.__words[1]) = 0;
              __idx.__r_.__value_.__r.__words[0] = v228;
              memset(&v436, 0, sizeof(v436));
              __p[0] = &v436;
              LOBYTE(__p[1]) = 0;
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
              v436.__r_.__value_.__l.__size_ = v436.__r_.__value_.__r.__words[0];
              v436.__r_.__value_.__r.__words[2] = v436.__r_.__value_.__r.__words[0] + 16;
              v436.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v436.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, (uint64_t *)&__idx.__r_.__value_.__r.__words[2], (uint64_t)v436.__r_.__value_.__l.__data_);
              switch(__idx.__r_.__value_.__s.__data_[12])
              {
                case 2:
                  v229 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v230 = __ldaxr(v229);
                    v231 = --v230 == 0;
                  }
                  while (__stlxr(v230, v229));
                  goto LABEL_521;
                case 3:
                  v303 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v304 = __ldaxr(v303);
                    v305 = --v304 == 0;
                  }
                  while (__stlxr(v304, v303));
                  goto LABEL_594;
                case 4:
                  v289 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v290 = __ldaxr(v289);
                    v291 = --v290 == 0;
                  }
                  while (__stlxr(v290, v289));
                  goto LABEL_578;
                case 5:
                  v308 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v309 = __ldaxr(v308);
                    v310 = --v309 == 0;
                  }
                  while (__stlxr(v309, v308));
                  goto LABEL_602;
                case 8:
                  v315 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v316 = __ldaxr(v315);
                    v317 = --v316 == 0;
                  }
                  while (__stlxr(v316, v315));
                  goto LABEL_609;
                case 9:
                  v294 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v295 = __ldaxr(v294);
                    v296 = --v295 == 0;
                  }
                  while (__stlxr(v295, v294));
                  goto LABEL_584;
                default:
                  goto LABEL_615;
              }
            case 1:
              v272 = *(_QWORD *)v227;
              LODWORD(__idx.__r_.__value_.__r.__words[1]) = 0;
              __idx.__r_.__value_.__s.__data_[12] = 1;
              __idx.__r_.__value_.__r.__words[0] = v272;
              memset(&v436, 0, sizeof(v436));
              __p[0] = &v436;
              LOBYTE(__p[1]) = 0;
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
              v436.__r_.__value_.__l.__size_ = v436.__r_.__value_.__r.__words[0];
              v436.__r_.__value_.__r.__words[2] = v436.__r_.__value_.__r.__words[0] + 16;
              v436.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v436.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, (uint64_t *)&__idx.__r_.__value_.__r.__words[2], (uint64_t)v436.__r_.__value_.__l.__data_);
              switch(__idx.__r_.__value_.__s.__data_[12])
              {
                case 2:
                  v273 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v274 = __ldaxr(v273);
                    v231 = --v274 == 0;
                  }
                  while (__stlxr(v274, v273));
                  goto LABEL_521;
                case 3:
                  v306 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v307 = __ldaxr(v306);
                    v305 = --v307 == 0;
                  }
                  while (__stlxr(v307, v306));
                  goto LABEL_594;
                case 4:
                  v292 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v293 = __ldaxr(v292);
                    v291 = --v293 == 0;
                  }
                  while (__stlxr(v293, v292));
                  goto LABEL_578;
                case 5:
                  v311 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v312 = __ldaxr(v311);
                    v310 = --v312 == 0;
                  }
                  while (__stlxr(v312, v311));
                  goto LABEL_602;
                case 8:
                  v318 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v319 = __ldaxr(v318);
                    v317 = --v319 == 0;
                  }
                  while (__stlxr(v319, v318));
                  goto LABEL_609;
                case 9:
                  v297 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v298 = __ldaxr(v297);
                    v296 = --v298 == 0;
                  }
                  while (__stlxr(v298, v297));
                  goto LABEL_584;
                default:
                  goto LABEL_615;
              }
            case 2:
              v236 = (const std::string *)(*(_QWORD *)v227 + 8);
              __idx.__r_.__value_.__r.__words[0] = 0;
              LODWORD(__idx.__r_.__value_.__r.__words[1]) = 0;
              __idx.__r_.__value_.__s.__data_[12] = 0;
              turi::flexible_type::operator=<std::string>((uint64_t *)&__idx, v236);
              memset(&v436, 0, sizeof(v436));
              __p[0] = &v436;
              LOBYTE(__p[1]) = 0;
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
              v436.__r_.__value_.__l.__size_ = v436.__r_.__value_.__r.__words[0];
              v436.__r_.__value_.__r.__words[2] = v436.__r_.__value_.__r.__words[0] + 16;
              v436.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v436.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, (uint64_t *)&__idx.__r_.__value_.__r.__words[2], (uint64_t)v436.__r_.__value_.__l.__data_);
              switch(__idx.__r_.__value_.__s.__data_[12])
              {
                case 2:
                  v237 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v238 = __ldaxr(v237);
                    v231 = --v238 == 0;
                  }
                  while (__stlxr(v238, v237));
                  goto LABEL_521;
                case 3:
                  v333 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v334 = __ldaxr(v333);
                    v305 = --v334 == 0;
                  }
                  while (__stlxr(v334, v333));
                  goto LABEL_594;
                case 4:
                  v324 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v325 = __ldaxr(v324);
                    v291 = --v325 == 0;
                  }
                  while (__stlxr(v325, v324));
                  goto LABEL_578;
                case 5:
                  v337 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v338 = __ldaxr(v337);
                    v310 = --v338 == 0;
                  }
                  while (__stlxr(v338, v337));
                  goto LABEL_602;
                case 8:
                  v339 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v340 = __ldaxr(v339);
                    v317 = --v340 == 0;
                  }
                  while (__stlxr(v340, v339));
                  goto LABEL_609;
                case 9:
                  v327 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v328 = __ldaxr(v327);
                    v296 = --v328 == 0;
                  }
                  while (__stlxr(v328, v327));
                  goto LABEL_584;
                default:
                  goto LABEL_615;
              }
            case 3:
              v239 = *(_QWORD *)v227;
              std::vector<turi::flexible_type>::vector(&v436, (uint64_t)(*(_QWORD *)(*(_QWORD *)v227 + 16) - *(_QWORD *)(*(_QWORD *)v227 + 8)) >> 3);
              v240 = *(_QWORD *)(v239 + 8);
              if (*(_QWORD *)(v239 + 16) != v240)
              {
                v241 = 0;
                do
                {
                  v242 = v436.__r_.__value_.__r.__words[0] + 16 * v241;
                  switch(*(_BYTE *)(v242 + 12))
                  {
                    case 2:
                      v243 = *(unint64_t **)v242;
                      do
                      {
                        v244 = __ldaxr(v243);
                        v245 = v244 - 1;
                      }
                      while (__stlxr(v245, v243));
                      if (!v245)
                      {
                        v246 = *(unint64_t **)v242;
                        if (!*(_QWORD *)v242)
                          goto LABEL_509;
                        if (*((char *)v246 + 31) < 0)
                          operator delete((void *)v246[1]);
                        v247 = v246;
                        v248 = 0x1012C404EF22A49;
                        goto LABEL_508;
                      }
                      break;
                    case 3:
                      v260 = *(unint64_t **)v242;
                      do
                      {
                        v261 = __ldaxr(v260);
                        v262 = v261 - 1;
                      }
                      while (__stlxr(v262, v260));
                      if (!v262)
                      {
                        v263 = *(unint64_t **)v242;
                        if (!*(_QWORD *)v242)
                          goto LABEL_509;
                        v264 = (void *)v263[1];
                        if (v264)
                        {
                          v263[2] = (unint64_t)v264;
                          operator delete(v264);
                        }
                        v247 = v263;
                        v248 = 0x1080C409938AC02;
                        goto LABEL_508;
                      }
                      break;
                    case 4:
                      v249 = *(unint64_t **)v242;
                      do
                      {
                        v250 = __ldaxr(v249);
                        v251 = v250 - 1;
                      }
                      while (__stlxr(v251, v249));
                      if (!v251)
                      {
                        v252 = *(unint64_t **)v242;
                        if (!*(_QWORD *)v242)
                          goto LABEL_509;
                        __p[0] = v252 + 1;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                        goto LABEL_501;
                      }
                      break;
                    case 5:
                      v265 = *(unint64_t **)v242;
                      do
                      {
                        v266 = __ldaxr(v265);
                        v267 = v266 - 1;
                      }
                      while (__stlxr(v267, v265));
                      if (!v267)
                      {
                        v252 = *(unint64_t **)v242;
                        if (!*(_QWORD *)v242)
                          goto LABEL_509;
                        __p[0] = v252 + 1;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_501:
                        v247 = v252;
                        v248 = 0x1020C405E66F15BLL;
                        goto LABEL_508;
                      }
                      break;
                    case 8:
                      v268 = *(unint64_t **)v242;
                      do
                      {
                        v269 = __ldaxr(v268);
                        v270 = v269 - 1;
                      }
                      while (__stlxr(v270, v268));
                      if (!v270)
                      {
                        v271 = *(unint64_t **)v242;
                        if (!*(_QWORD *)v242)
                          goto LABEL_509;
                        boost::detail::shared_count::~shared_count((unsigned int **)v271 + 2);
                        v247 = v271;
                        v259 = -235920773;
                        goto LABEL_507;
                      }
                      break;
                    case 9:
                      v253 = *(unint64_t **)v242;
                      do
                      {
                        v254 = __ldaxr(v253);
                        v255 = v254 - 1;
                      }
                      while (__stlxr(v255, v253));
                      if (!v255)
                      {
                        v256 = *(unint64_t **)v242;
                        if (*(_QWORD *)v242)
                        {
                          v257 = (void *)v256[6];
                          if (v257)
                          {
                            v256[7] = (unint64_t)v257;
                            operator delete(v257);
                          }
                          v258 = (void *)v256[3];
                          if (v258)
                          {
                            v256[4] = (unint64_t)v258;
                            operator delete(v258);
                          }
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v256 + 1));
                          v247 = v256;
                          v259 = 2071181815;
LABEL_507:
                          v248 = v259 | 0x1030C4000000000;
LABEL_508:
                          MEMORY[0x219A19A08](v247, v248);
                        }
LABEL_509:
                        *(_QWORD *)v242 = 0;
                      }
                      break;
                    default:
                      break;
                  }
                  *(_QWORD *)v242 = 0;
                  *(_DWORD *)(v242 + 8) = 0;
                  *(_BYTE *)(v242 + 12) = 1;
                  *(_QWORD *)v242 = *(_QWORD *)(v240 + 8 * v241++);
                  v240 = *(_QWORD *)(v239 + 8);
                  v3 = v424;
                }
                while (v241 < (*(_QWORD *)(v239 + 16) - v240) >> 3);
              }
              break;
            case 4:
              v232 = *(_QWORD *)v227;
              memset(&v436, 0, sizeof(v436));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v436, *(uint64_t **)(v232 + 8), *(uint64_t **)(v232 + 16), (uint64_t)(*(_QWORD *)(v232 + 16) - *(_QWORD *)(v232 + 8)) >> 4);
              break;
            case 5:
              v275 = *(_QWORD *)v227;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v275 + 8), *(uint64_t **)(v275 + 16), (uint64_t)(*(_QWORD *)(v275 + 16) - *(_QWORD *)(v275 + 8)) >> 5);
              turi::flexible_type_fail(0);
              memset(&v436, 0, sizeof(v436));
              __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
              break;
            case 6:
              v276 = (double)((uint64_t)(*(_QWORD *)v227 << 8) >> 8);
              v277 = (double)*(int *)(v227 + 8) / 1000000.0;
              LODWORD(__idx.__r_.__value_.__r.__words[1]) = 0;
              __idx.__r_.__value_.__s.__data_[12] = 1;
              *(double *)&__idx.__r_.__value_.__l.__data_ = v277 + v276;
              memset(&v436, 0, sizeof(v436));
              __p[0] = &v436;
              LOBYTE(__p[1]) = 0;
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
              v436.__r_.__value_.__l.__size_ = v436.__r_.__value_.__r.__words[0];
              v436.__r_.__value_.__r.__words[2] = v436.__r_.__value_.__r.__words[0] + 16;
              v436.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v436.__r_.__value_.__r.__words[2], (uint64_t *)&__idx, (uint64_t *)&__idx.__r_.__value_.__r.__words[2], (uint64_t)v436.__r_.__value_.__l.__data_);
              switch(__idx.__r_.__value_.__s.__data_[12])
              {
                case 2:
                  v278 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v279 = __ldaxr(v278);
                    v231 = --v279 == 0;
                  }
                  while (__stlxr(v279, v278));
LABEL_521:
                  if (v231)
                  {
                    v280 = __idx.__r_.__value_.__r.__words[0];
                    if (__idx.__r_.__value_.__r.__words[0])
                    {
                      if (*(char *)(__idx.__r_.__value_.__r.__words[0] + 31) < 0)
                        operator delete(*(void **)(__idx.__r_.__value_.__r.__words[0] + 8));
                      v281 = v280;
                      v282 = 0x1012C404EF22A49;
                      goto LABEL_614;
                    }
                  }
                  break;
                case 3:
                  v313 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v314 = __ldaxr(v313);
                    v305 = --v314 == 0;
                  }
                  while (__stlxr(v314, v313));
LABEL_594:
                  if (v305)
                  {
                    v335 = __idx.__r_.__value_.__r.__words[0];
                    if (__idx.__r_.__value_.__r.__words[0])
                    {
                      v336 = *(void **)(__idx.__r_.__value_.__r.__words[0] + 8);
                      if (v336)
                      {
                        *(_QWORD *)(__idx.__r_.__value_.__r.__words[0] + 16) = v336;
                        operator delete(v336);
                      }
                      v281 = v335;
                      v282 = 0x1080C409938AC02;
                      goto LABEL_614;
                    }
                  }
                  break;
                case 4:
                  v299 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v300 = __ldaxr(v299);
                    v291 = --v300 == 0;
                  }
                  while (__stlxr(v300, v299));
LABEL_578:
                  if (v291)
                  {
                    v326 = __idx.__r_.__value_.__r.__words[0];
                    if (__idx.__r_.__value_.__r.__words[0])
                    {
                      __p[0] = (void *)(__idx.__r_.__value_.__r.__words[0] + 8);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                      goto LABEL_606;
                    }
                  }
                  break;
                case 5:
                  v320 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v321 = __ldaxr(v320);
                    v310 = --v321 == 0;
                  }
                  while (__stlxr(v321, v320));
LABEL_602:
                  if (v310)
                  {
                    v326 = __idx.__r_.__value_.__r.__words[0];
                    if (__idx.__r_.__value_.__r.__words[0])
                    {
                      __p[0] = (void *)(__idx.__r_.__value_.__r.__words[0] + 8);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_606:
                      v281 = v326;
                      v282 = 0x1020C405E66F15BLL;
                      goto LABEL_614;
                    }
                  }
                  break;
                case 8:
                  v322 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v323 = __ldaxr(v322);
                    v317 = --v323 == 0;
                  }
                  while (__stlxr(v323, v322));
LABEL_609:
                  if (v317)
                  {
                    v341 = __idx.__r_.__value_.__r.__words[0];
                    if (__idx.__r_.__value_.__r.__words[0])
                    {
                      boost::detail::shared_count::~shared_count((unsigned int **)(__idx.__r_.__value_.__r.__words[0]
                                                                                 + 16));
                      v281 = v341;
                      v332 = -235920773;
                      goto LABEL_613;
                    }
                  }
                  break;
                case 9:
                  v301 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
                  do
                  {
                    v302 = __ldaxr(v301);
                    v296 = --v302 == 0;
                  }
                  while (__stlxr(v302, v301));
LABEL_584:
                  if (v296)
                  {
                    v329 = __idx.__r_.__value_.__r.__words[0];
                    if (__idx.__r_.__value_.__r.__words[0])
                    {
                      v330 = *(void **)(__idx.__r_.__value_.__r.__words[0] + 48);
                      if (v330)
                      {
                        *(_QWORD *)(__idx.__r_.__value_.__r.__words[0] + 56) = v330;
                        operator delete(v330);
                      }
                      v331 = *(void **)(v329 + 24);
                      if (v331)
                      {
                        *(_QWORD *)(v329 + 32) = v331;
                        operator delete(v331);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v329 + 8);
                      v281 = v329;
                      v332 = 2071181815;
LABEL_613:
                      v282 = v332 | 0x1030C4000000000;
LABEL_614:
                      MEMORY[0x219A19A08](v281, v282);
                    }
                  }
                  break;
                default:
                  goto LABEL_615;
              }
              break;
            case 7:
              memset(&v436, 0, sizeof(v436));
              break;
            case 8:
              v283 = *(_QWORD *)v227;
              v284 = *(unsigned int **)(*(_QWORD *)v227 + 16);
              __p[0] = *(void **)(*(_QWORD *)v227 + 8);
              __p[1] = v284;
              if (v284)
              {
                v285 = v284 + 2;
                do
                  v286 = __ldxr(v285);
                while (__stxr(v286 + 1, v285));
              }
              v287 = *(_OWORD *)(v283 + 24);
              v288 = *(_OWORD *)(v283 + 56);
              v441 = *(_OWORD *)(v283 + 40);
              v442 = v288;
              v440 = v287;
              turi::flexible_type_fail(0);
              memset(&v436, 0, sizeof(v436));
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              break;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v227 + 8);
              turi::flexible_type_fail(0);
              memset(&v436, 0, sizeof(v436));
              if (*((_QWORD *)&v441 + 1))
              {
                *(_QWORD *)&v442 = *((_QWORD *)&v441 + 1);
                operator delete(*((void **)&v441 + 1));
              }
              if ((_QWORD)v440)
              {
                *((_QWORD *)&v440 + 1) = v440;
                operator delete((void *)v440);
              }
              v233 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v234 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v235 = __ldaxr(v234);
                while (__stlxr(v235 - 1, v234));
                if (!v235)
                {
                  ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                  std::__shared_weak_count::__release_weak(v233);
                }
              }
              break;
            default:
              goto LABEL_758;
          }
LABEL_615:
          for (j = v436.__r_.__value_.__r.__words[0]; j != v436.__r_.__value_.__l.__size_; j += 16)
          {
            if (*(_BYTE *)(j + 12) != 2)
              tc_sframe_read_csv::$_3::operator()();
          }
          std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[15],std::vector<turi::flexible_type> &,0>((uint64_t)__p, "output_columns", (uint64_t **)&v436);
          std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
          std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v226);
          __p[0] = &v436;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "row_limit");
        v343 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v343)
        {
          v344 = (_BYTE *)turi::variant_get_ref<turi::flexible_type>((int *)(v343 + 56));
          v345 = 0;
          switch(v344[12])
          {
            case 0:
              v345 = *(_QWORD *)v344;
              goto LABEL_651;
            case 1:
              v345 = (uint64_t)*(double *)v344;
              goto LABEL_651;
            case 2:
              v349 = *(_QWORD *)v344;
              v350 = (char **)(*(_QWORD *)v344 + 8);
              __idx.__r_.__value_.__r.__words[0] = 0;
              v351 = (char *)v350;
              if (*(char *)(v349 + 31) < 0)
                v351 = *v350;
              std::string::basic_string[abi:ne180100]<0>(__p, v351);
              v345 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
              if (SBYTE7(v440) < 0)
                operator delete(__p[0]);
              if (*(char *)(v349 + 31) < 0)
                v352 = *(_QWORD *)(v349 + 16);
              else
                v352 = *(unsigned __int8 *)(v349 + 31);
              if (__idx.__r_.__value_.__r.__words[0] != v352)
              {
                v401 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v402 = std::string::append(&v436, " cannot be interpreted as an integer");
                v403 = *(_OWORD *)&v402->__r_.__value_.__l.__data_;
                *(_QWORD *)&v440 = *((_QWORD *)&v402->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v403;
                v402->__r_.__value_.__l.__size_ = 0;
                v402->__r_.__value_.__r.__words[2] = 0;
                v402->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v401, (const std::string *)__p);
                __cxa_throw(v401, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_651;
            case 3:
              v346 = *(_QWORD *)v344;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v346 + 8), *(_QWORD *)(v346 + 16), (uint64_t)(*(_QWORD *)(v346 + 16) - *(_QWORD *)(v346 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              goto LABEL_650;
            case 4:
              v353 = *(_QWORD *)v344;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v353 + 8), *(uint64_t **)(v353 + 16), (uint64_t)(*(_QWORD *)(v353 + 16) - *(_QWORD *)(v353 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
              goto LABEL_650;
            case 5:
              v354 = *(_QWORD *)v344;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v354 + 8), *(uint64_t **)(v354 + 16), (uint64_t)(*(_QWORD *)(v354 + 16) - *(_QWORD *)(v354 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
              goto LABEL_650;
            case 6:
              v345 = (uint64_t)(*(_QWORD *)v344 << 8) >> 8;
              goto LABEL_651;
            case 7:
              goto LABEL_651;
            case 8:
              v355 = *(_QWORD *)v344;
              v356 = *(unsigned int **)(*(_QWORD *)v344 + 16);
              __p[0] = *(void **)(*(_QWORD *)v344 + 8);
              __p[1] = v356;
              if (v356)
              {
                v357 = v356 + 2;
                do
                  v358 = __ldxr(v357);
                while (__stxr(v358 + 1, v357));
              }
              v359 = *(_OWORD *)(v355 + 24);
              v360 = *(_OWORD *)(v355 + 56);
              v441 = *(_OWORD *)(v355 + 40);
              v442 = v360;
              v440 = v359;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              goto LABEL_650;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v344 + 8);
              turi::flexible_type_fail(0);
              if (*((_QWORD *)&v441 + 1))
              {
                *(_QWORD *)&v442 = *((_QWORD *)&v441 + 1);
                operator delete(*((void **)&v441 + 1));
              }
              if ((_QWORD)v440)
              {
                *((_QWORD *)&v440 + 1) = v440;
                operator delete((void *)v440);
              }
              v345 = (uint64_t)__p[1];
              if (!__p[1])
                goto LABEL_651;
              v347 = (unint64_t *)((char *)__p[1] + 8);
              do
                v348 = __ldaxr(v347);
              while (__stlxr(v348 - 1, v347));
              if (!v348)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v345 + 16))(v345);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v345);
              }
LABEL_650:
              v345 = 0;
LABEL_651:
              std::string::basic_string[abi:ne180100]<0>(__p, "row_limit");
              BYTE4(v441) = 0;
              LODWORD(v441) = 0;
              *((_QWORD *)&v440 + 1) = v345;
              std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
              std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
              std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v343);
              break;
            default:
              goto LABEL_758;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "skip_rows");
        v361 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v361)
        {
          v362 = (_BYTE *)turi::variant_get_ref<turi::flexible_type>((int *)(v361 + 56));
          v363 = 0;
          switch(v362[12])
          {
            case 0:
              v363 = *(_QWORD *)v362;
              goto LABEL_683;
            case 1:
              v363 = (uint64_t)*(double *)v362;
              goto LABEL_683;
            case 2:
              v367 = *(_QWORD *)v362;
              v368 = (char **)(*(_QWORD *)v362 + 8);
              __idx.__r_.__value_.__r.__words[0] = 0;
              v369 = (char *)v368;
              if (*(char *)(v367 + 31) < 0)
                v369 = *v368;
              std::string::basic_string[abi:ne180100]<0>(__p, v369);
              v363 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
              if (SBYTE7(v440) < 0)
                operator delete(__p[0]);
              if (*(char *)(v367 + 31) < 0)
                v370 = *(_QWORD *)(v367 + 16);
              else
                v370 = *(unsigned __int8 *)(v367 + 31);
              if (__idx.__r_.__value_.__r.__words[0] != v370)
              {
                v404 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v405 = std::string::append(&v436, " cannot be interpreted as an integer");
                v406 = *(_OWORD *)&v405->__r_.__value_.__l.__data_;
                *(_QWORD *)&v440 = *((_QWORD *)&v405->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v406;
                v405->__r_.__value_.__l.__size_ = 0;
                v405->__r_.__value_.__r.__words[2] = 0;
                v405->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v404, (const std::string *)__p);
                __cxa_throw(v404, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_683;
            case 3:
              v364 = *(_QWORD *)v362;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v364 + 8), *(_QWORD *)(v364 + 16), (uint64_t)(*(_QWORD *)(v364 + 16) - *(_QWORD *)(v364 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              goto LABEL_682;
            case 4:
              v371 = *(_QWORD *)v362;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v371 + 8), *(uint64_t **)(v371 + 16), (uint64_t)(*(_QWORD *)(v371 + 16) - *(_QWORD *)(v371 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
              goto LABEL_682;
            case 5:
              v372 = *(_QWORD *)v362;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v372 + 8), *(uint64_t **)(v372 + 16), (uint64_t)(*(_QWORD *)(v372 + 16) - *(_QWORD *)(v372 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
              goto LABEL_682;
            case 6:
              v363 = (uint64_t)(*(_QWORD *)v362 << 8) >> 8;
              goto LABEL_683;
            case 7:
              goto LABEL_683;
            case 8:
              v373 = *(_QWORD *)v362;
              v374 = *(unsigned int **)(*(_QWORD *)v362 + 16);
              __p[0] = *(void **)(*(_QWORD *)v362 + 8);
              __p[1] = v374;
              if (v374)
              {
                v375 = v374 + 2;
                do
                  v376 = __ldxr(v375);
                while (__stxr(v376 + 1, v375));
              }
              v377 = *(_OWORD *)(v373 + 24);
              v378 = *(_OWORD *)(v373 + 56);
              v441 = *(_OWORD *)(v373 + 40);
              v442 = v378;
              v440 = v377;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              goto LABEL_682;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v362 + 8);
              turi::flexible_type_fail(0);
              if (*((_QWORD *)&v441 + 1))
              {
                *(_QWORD *)&v442 = *((_QWORD *)&v441 + 1);
                operator delete(*((void **)&v441 + 1));
              }
              if ((_QWORD)v440)
              {
                *((_QWORD *)&v440 + 1) = v440;
                operator delete((void *)v440);
              }
              v363 = (uint64_t)__p[1];
              if (!__p[1])
                goto LABEL_683;
              v365 = (unint64_t *)((char *)__p[1] + 8);
              do
                v366 = __ldaxr(v365);
              while (__stlxr(v366 - 1, v365));
              if (!v366)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v363 + 16))(v363);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v363);
              }
LABEL_682:
              v363 = 0;
LABEL_683:
              std::string::basic_string[abi:ne180100]<0>(__p, "skip_rows");
              BYTE4(v441) = 0;
              LODWORD(v441) = 0;
              *((_QWORD *)&v440 + 1) = v363;
              std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
              std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
              std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v361);
              break;
            default:
              goto LABEL_758;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "verbose");
        v379 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v429, (const void **)__p);
        if (SBYTE7(v440) < 0)
          operator delete(__p[0]);
        if (&v430 != (char **)v379)
        {
          v380 = (_BYTE *)turi::variant_get_ref<turi::flexible_type>((int *)(v379 + 56));
          v381 = 0;
          switch(v380[12])
          {
            case 0:
              v381 = *(_QWORD *)v380;
              goto LABEL_715;
            case 1:
              v381 = (uint64_t)*(double *)v380;
              goto LABEL_715;
            case 2:
              v385 = *(_QWORD *)v380;
              v386 = (char **)(*(_QWORD *)v380 + 8);
              __idx.__r_.__value_.__r.__words[0] = 0;
              v387 = (char *)v386;
              if (*(char *)(v385 + 31) < 0)
                v387 = *v386;
              std::string::basic_string[abi:ne180100]<0>(__p, v387);
              v381 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
              if (SBYTE7(v440) < 0)
                operator delete(__p[0]);
              if (*(char *)(v385 + 31) < 0)
                v388 = *(_QWORD *)(v385 + 16);
              else
                v388 = *(unsigned __int8 *)(v385 + 31);
              if (__idx.__r_.__value_.__r.__words[0] != v388)
              {
                v407 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v408 = std::string::append(&v436, " cannot be interpreted as an integer");
                v409 = *(_OWORD *)&v408->__r_.__value_.__l.__data_;
                *(_QWORD *)&v440 = *((_QWORD *)&v408->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v409;
                v408->__r_.__value_.__l.__size_ = 0;
                v408->__r_.__value_.__r.__words[2] = 0;
                v408->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v407, (const std::string *)__p);
                __cxa_throw(v407, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_715;
            case 3:
              v382 = *(_QWORD *)v380;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v382 + 8), *(_QWORD *)(v382 + 16), (uint64_t)(*(_QWORD *)(v382 + 16) - *(_QWORD *)(v382 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              goto LABEL_714;
            case 4:
              v389 = *(_QWORD *)v380;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v389 + 8), *(uint64_t **)(v389 + 16), (uint64_t)(*(_QWORD *)(v389 + 16) - *(_QWORD *)(v389 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
              goto LABEL_714;
            case 5:
              v390 = *(_QWORD *)v380;
              __p[1] = 0;
              *(_QWORD *)&v440 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v390 + 8), *(uint64_t **)(v390 + 16), (uint64_t)(*(_QWORD *)(v390 + 16) - *(_QWORD *)(v390 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v436.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
              goto LABEL_714;
            case 6:
              v381 = (uint64_t)(*(_QWORD *)v380 << 8) >> 8;
              goto LABEL_715;
            case 7:
              goto LABEL_715;
            case 8:
              v391 = *(_QWORD *)v380;
              v392 = *(unsigned int **)(*(_QWORD *)v380 + 16);
              __p[0] = *(void **)(*(_QWORD *)v380 + 8);
              __p[1] = v392;
              if (v392)
              {
                v393 = v392 + 2;
                do
                  v394 = __ldxr(v393);
                while (__stxr(v394 + 1, v393));
              }
              v395 = *(_OWORD *)(v391 + 24);
              v396 = *(_OWORD *)(v391 + 56);
              v441 = *(_OWORD *)(v391 + 40);
              v442 = v396;
              v440 = v395;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              goto LABEL_714;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v380 + 8);
              turi::flexible_type_fail(0);
              if (*((_QWORD *)&v441 + 1))
              {
                *(_QWORD *)&v442 = *((_QWORD *)&v441 + 1);
                operator delete(*((void **)&v441 + 1));
              }
              if ((_QWORD)v440)
              {
                *((_QWORD *)&v440 + 1) = v440;
                operator delete((void *)v440);
              }
              v381 = (uint64_t)__p[1];
              if (!__p[1])
                goto LABEL_715;
              v383 = (unint64_t *)((char *)__p[1] + 8);
              do
                v384 = __ldaxr(v383);
              while (__stlxr(v384 - 1, v383));
              if (!v384)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v381 + 16))(v381);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v381);
              }
LABEL_714:
              v381 = 0;
LABEL_715:
              std::string::basic_string[abi:ne180100]<0>(__p, "verbose");
              BYTE4(v441) = 0;
              LODWORD(v441) = 0;
              *((_QWORD *)&v440 + 1) = v381;
              std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v434, (const void **)__p, (__int128 *)__p);
              std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
              std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, (uint64_t *)v379);
              break;
            default:
              goto LABEL_758;
          }
        }
        if (v431)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Error: csv options ", 19);
          while (v431)
          {
            v416 = (uint64_t *)v429;
            v417 = *((char *)v429 + 55);
            if (v417 >= 0)
              v418 = (uint64_t *)(v429 + 4);
            else
              v418 = (uint64_t *)v429[4];
            if (v417 >= 0)
              v419 = *((unsigned __int8 *)v429 + 55);
            else
              v419 = (uint64_t)v429[5];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v418, v419);
            std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase((uint64_t **)&v429, v416);
            if (!v431)
              break;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)", ", 2);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)" not recognized.  Options are header [0/1], delimeter [string], comment_char [string], escape_char [string], quote_char [string], error_bad_lines [0/1], skip_initial_space [0/1], column_type_hints [list], na_values [any], line_terminator [string], usecols [list], nrows [int], skiprows [int], verbose [0/1].", 307);
          v410 = (uint64_t *)v429;
          if (v429 != &v430)
          {
            do
            {
              v411 = *((char *)v410 + 55);
              if (v411 >= 0)
                v412 = (uint64_t)(v410 + 4);
              else
                v412 = v410[4];
              if (v411 >= 0)
                v413 = *((unsigned __int8 *)v410 + 55);
              else
                v413 = v410[5];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v412, v413);
              v414 = (char *)v410[1];
              if (v414)
              {
                do
                {
                  v415 = (char **)v414;
                  v414 = *(char **)v414;
                }
                while (v414);
              }
              else
              {
                do
                {
                  v415 = (char **)v410[2];
                  v49 = *v415 == (char *)v410;
                  v410 = (uint64_t *)v415;
                }
                while (!v49);
              }
              v410 = (uint64_t *)v415;
            }
            while (v415 != &v430);
          }
          v436.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          tc_sframe_read_csv::$_4::operator()();
        }
      }
    }
  }
  v397 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"column_type_hints = ", 20);
  v398 = turi::operator<<<std::string,turi::flex_type_enum>(v397, &v432);
  std::ios_base::getloc((const std::ios_base *)((char *)v398 + *(_QWORD *)(*v398 - 24)));
  v399 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v399->__vftable[2].~facet_0)(v399, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::string::basic_string[abi:ne180100]<0>(v427, v3);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v426, (uint64_t)&v434);
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100](v425, (const void ***)&v432);
  turi::gl_sframe::construct_from_csvs((uint64_t)v4 + 8, (uint64_t)v427, (uint64_t)v426, (uint64_t)v425);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v425, (char *)v425[1]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v426, (_QWORD *)v426[1]);
  if (v428 < 0)
    operator delete(v427[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v429, v430);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v432, v433[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v434, v435[0]);
  return (uint64_t)v4;
}

void sub_217ED218C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  void *v57;
  int v58;

  if (!a2)
    _Unwind_Resume(a1);
  if (a57 < 0)
    operator delete(__p);
  if (a44 < 0)
  {
    operator delete(a39);
    if ((v58 & 1) == 0)
    {
LABEL_9:
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a30, (char *)a31);
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a33, (char *)a34);
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a36, (_QWORD *)a37);
      __cxa_begin_catch(a1);
      std::current_exception();
      fill_error_from_exception(&a20);
      std::exception_ptr::~exception_ptr(&a20);
      __cxa_end_catch();
      JUMPOUT(0x217ED1DA4);
    }
  }
  else if (!v58)
  {
    goto LABEL_9;
  }
  __cxa_free_exception(v57);
  goto LABEL_9;
}

void sub_217ED3098(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_217ED30BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t turi::flex_type_enum_from_name(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t v4;
  uint64_t *v5[3];
  char v6;
  _QWORD v7[3];
  char v8;
  _QWORD v9[3];
  char v10;
  _QWORD v11[3];
  char v12;
  _QWORD v13[3];
  char v14;
  _QWORD v15[3];
  char v16;
  _QWORD v17[3];
  char v18;
  _QWORD v19[3];
  char v20;
  _QWORD v21[3];
  char v22;
  _QWORD v23[3];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if ((v2 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "integer");
    v6 = 0;
    std::string::basic_string[abi:ne180100]<0>(v7, "datetime");
    v8 = 6;
    std::string::basic_string[abi:ne180100]<0>(v9, "float");
    v10 = 1;
    std::string::basic_string[abi:ne180100]<0>(v11, "string");
    v12 = 2;
    std::string::basic_string[abi:ne180100]<0>(v13, "array");
    v14 = 3;
    std::string::basic_string[abi:ne180100]<0>(v15, "ndarray");
    v16 = 9;
    std::string::basic_string[abi:ne180100]<0>(v17, "list");
    v18 = 4;
    std::string::basic_string[abi:ne180100]<0>(v19, "dictionary");
    v20 = 5;
    std::string::basic_string[abi:ne180100]<0>(v21, "image");
    v22 = 8;
    std::string::basic_string[abi:ne180100]<0>(v23, "undefined");
    v24 = 7;
    std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::flex_type_enum_from_name(std::string const&)::type_map, (const void **)v5, 10);
    v4 = 40;
    do
    {
      if (*((char *)&v5[v4 - 1] - 1) < 0)
        operator delete(v5[v4 - 4]);
      v4 -= 4;
    }
    while (v4 * 8);
    __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::flex_type_enum_from_name(std::string const&)::type_map, &dword_217E69000);
  }
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&turi::flex_type_enum_from_name(std::string const&)::type_map, (const void **)a1))
  {
    v5[0] = a1;
    turi::flex_type_enum_from_name(std::string const&)::{lambda(void)#1}::operator()(v5);
  }
  return *(char *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&turi::flex_type_enum_from_name(std::string const&)::type_map, (const void **)a1);
}

void sub_217ED3310(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 320;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0)
      operator delete(*(void **)(v1 + v3 - 32));
    v3 -= 32;
    if (!v3)
    {
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *turi::operator<<<std::string,turi::flex_type_enum>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    while (1)
    {
      v7 = *((char *)v5 + 55);
      v8 = v7 >= 0 ? (uint64_t)(v5 + 4) : v5[4];
      v9 = v7 >= 0 ? *((unsigned __int8 *)v5 + 55) : v5[5];
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"-->", 3);
      std::ostream::operator<<();
      v11 = (_QWORD *)v5[1];
      v12 = v5;
      if (v11)
      {
        do
        {
          v5 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v12[2];
          v13 = *v5 == (_QWORD)v12;
          v12 = v5;
        }
        while (!v13);
      }
      if (v5 == v4)
        break;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

uint64_t std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

_OWORD *tc_sframe_read_json_lines(turi *a1)
{
  _OWORD *v2;
  turi::gl_sframe *v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v12[3];
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22[3];
  uint64_t v23[3];
  void *__p[2];
  char v25;
  char **v26;
  char *v27[2];
  uint64_t *v28;
  _QWORD *v29[3];
  __int128 v30;
  std::__shared_weak_count *v31;
  _BYTE v32[13];
  void *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v2 = (_OWORD *)operator new();
  v3 = (turi::gl_sframe *)((char *)v2 + 8);
  *v2 = 0u;
  v2[1] = 0u;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v2 + 8));
  *(_QWORD *)v2 = &capi_struct_type_info_tc_sframe_inst;
  v29[0] = 0;
  v29[1] = 0;
  v27[1] = 0;
  v28 = (uint64_t *)v29;
  v26 = v27;
  v27[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v30, "header");
  memset(v32, 0, sizeof(v32));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(&v28, (const void **)&v30, &v30);
  std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v30);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a1);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v23, (uint64_t)&v28);
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100](v22, (const void ***)&v26);
  turi::gl_sframe::construct_from_csvs((uint64_t)v2 + 8, (uint64_t)__p, (uint64_t)v23, (uint64_t)v22);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v22, (char *)v22[1]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v23, (_QWORD *)v23[1]);
  if (v25 < 0)
    operator delete(__p[0]);
  if (turi::gl_sframe::num_columns(v3) != 1)
    tc_sframe_read_json_lines::$_0::operator()();
  std::string::basic_string[abi:ne180100]<0>(v20, "X1");
  turi::gl_sframe::operator[]((uint64_t)v3, (uint64_t)v20, (turi::gl_sarray *)&v30);
  v4 = turi::gl_sarray::dtype((turi::gl_sarray *)&v30);
  *(_QWORD *)&v30 = off_24D91EA30;
  if (v34 < 0)
    operator delete(v33);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v30);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  if (v4 == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "X1");
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    v13 = 0;
    v14 = 0;
    v15 = 0;
    memset(v12, 0, sizeof(v12));
    turi::gl_sframe::unpack((uint64_t)v3, (uint64_t)v18, (uint64_t)v16, (uint64_t)&v13, (uint64_t)&turi::FLEX_UNDEFINED, v12, (turi::gl_sframe *)v20);
    v2 = (_OWORD *)operator new();
    *v2 = 0u;
    v2[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v2 + 8));
    *(_QWORD *)v2 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&v30, v20);
    turi::gl_sframe::operator=((uint64_t)v2 + 8, (uint64_t)&v30);
    *(_QWORD *)&v30 = off_24D91E9C0;
    v5 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v20[0] = off_24D91E9C0;
    v8 = v21;
    if (v21)
    {
      v9 = (unint64_t *)&v21->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_QWORD *)&v30 = v12;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
    if (v17 < 0)
      operator delete(v16[0]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v26, v27[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v28, v29[0]);
  return v2;
}

void sub_217ED3824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217ED37E4);
  }
  _Unwind_Resume(a1);
}

void turi::gl_sarray_reference::~gl_sarray_reference(void **this)
{
  *this = off_24D91EA30;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)this);
}

{
  *this = off_24D91EA30;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)this);
  JUMPOUT(0x219A19A08);
}

_OWORD *tc_sframe_read_json(turi *a1)
{
  _BOOL4 v2;
  _OWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v18[3];
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  void *__p;
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  std::__shared_weak_count *v29;
  _QWORD v30[2];
  std::__shared_weak_count *v31;
  void **v32;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v30);
  std::string::basic_string[abi:ne180100]<0>(v26, (char *)a1);
  turi::gl_sarray::read_json((uint64_t)v26, (turi::gl_sarray *)v28);
  std::string::basic_string[abi:ne180100]<0>(&v19, "X1");
  turi::gl_sframe::operator[]((uint64_t)v30, (uint64_t)&v19, (turi::gl_sarray *)v22);
  turi::gl_sarray_reference::operator=((uint64_t)v22, (uint64_t)v28);
  v22[0] = off_24D91EA30;
  if (v25 < 0)
    operator delete(__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v22);
  if (SHIBYTE(v21) < 0)
    operator delete(v19);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v28);
  if (v27 < 0)
    operator delete(v26[0]);
  std::string::basic_string[abi:ne180100]<0>(v28, "X1");
  turi::gl_sframe::operator[]((uint64_t)v30, (uint64_t)v28, (turi::gl_sarray *)v22);
  v2 = turi::gl_sarray::empty((turi::gl_sarray *)v22);
  v22[0] = off_24D91EA30;
  if (v25 < 0)
    operator delete(__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v22);
  if (SHIBYTE(v29) < 0)
  {
    operator delete(v28[0]);
    if (v2)
      goto LABEL_13;
  }
  else if (v2)
  {
LABEL_13:
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)v28);
    v3 = (_OWORD *)operator new();
    *v3 = 0u;
    v3[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v3 + 8));
    *(_QWORD *)v3 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(v22, v28);
    turi::gl_sframe::operator=((uint64_t)v3 + 8, (uint64_t)v22);
    v22[0] = off_24D91E9C0;
    v4 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v28[0] = off_24D91E9C0;
    v7 = v29;
    if (v29)
    {
      v8 = (unint64_t *)&v29->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_37;
    }
    goto LABEL_39;
  }
  std::string::basic_string[abi:ne180100]<0>(v28, "X1");
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  v19 = 0;
  v20 = 0;
  v21 = 0;
  memset(v18, 0, sizeof(v18));
  turi::gl_sframe::unpack((uint64_t)v30, (uint64_t)v28, (uint64_t)v26, (uint64_t)&v19, (uint64_t)&turi::FLEX_UNDEFINED, v18, (turi::gl_sframe *)v22);
  turi::gl_sframe::operator=((uint64_t)v30, (uint64_t)v22);
  v22[0] = off_24D91E9C0;
  v10 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v32 = (void **)v18;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  if (v27 < 0)
    operator delete(v26[0]);
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v3 + 8));
  *(_QWORD *)v3 = &capi_struct_type_info_tc_sframe_inst;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v22, (const turi::gl_sframe *)v30);
  turi::gl_sframe::operator=((uint64_t)v3 + 8, (uint64_t)v22);
  v22[0] = off_24D91E9C0;
  v7 = v23;
  if (v23)
  {
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v9 = __ldaxr(v13);
    while (__stlxr(v9 - 1, v13));
LABEL_37:
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_39:
  v30[0] = off_24D91E9C0;
  v14 = v31;
  if (v31)
  {
    v15 = (unint64_t *)&v31->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v3;
}

void sub_217ED3E64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED3E48);
}

void tc_sframe_export(turi *a1, char *__s, char *a3)
{
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  std::string::basic_string[abi:ne180100]<0>(v8, __s);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  turi::gl_sframe::save((uint64_t)a1 + 8, (uint64_t)v8, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_217ED40EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED40D8);
}

void sub_217ED4150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_head(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v14[2];
  std::__shared_weak_count *v15;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sframe::head((turi::gl_sframe *)(a1 + 8), a2, v14);
    v6 = (_OWORD *)operator new();
    *v6 = 0u;
    v6[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v6 + 8));
    *(_QWORD *)v6 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&__p, v14);
    turi::gl_sframe::operator=((uint64_t)v6 + 8, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v7 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v8 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v14[0] = off_24D91E9C0;
    v10 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217ED42D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED42BCLL);
}

void sub_217ED438C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_tail(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v14[2];
  std::__shared_weak_count *v15;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sframe::tail((turi::gl_sframe *)(a1 + 8), a2, v14);
    v6 = (_OWORD *)operator new();
    *v6 = 0u;
    v6[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v6 + 8));
    *(_QWORD *)v6 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&__p, v14);
    turi::gl_sframe::operator=((uint64_t)v6 + 8, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v7 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v8 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v14[0] = off_24D91E9C0;
    v10 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217ED4514(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED44F8);
}

void sub_217ED45C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

char *tc_sframe_column_name(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  char *result;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    result = (char *)turi::gl_sframe::column_name((turi::gl_sframe *)(a1 + 8), a2);
    if (result[23] < 0)
      return *(char **)result;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return result;
}

void sub_217ED467C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED4664);
}

void sub_217ED46C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sframe_column_type(turi *a1, char *__s, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  void *v9[2];
  char v10;
  std::string v11[2];
  void *__p;
  char v13;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, __s);
    turi::gl_sframe::operator[]((uint64_t)a1 + 8, (uint64_t)v9, (turi::gl_sarray *)v11);
    v6 = turi::gl_sarray::dtype((turi::gl_sarray *)v11);
    v11[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA58;
    if (v13 < 0)
      operator delete(__p);
    v7 = v6;
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v11);
    if (v10 < 0)
      operator delete(v9[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "\"sframe\" is null.");
    set_error(a3, v11);
    if (SHIBYTE(v11[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11[0].__r_.__value_.__l.__data_);
    return 7;
  }
  return v7;
}

void sub_217ED47C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED47ACLL);
}

void sub_217ED483C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void turi::const_gl_sarray_reference::~const_gl_sarray_reference(void **this)
{
  *this = off_24D91EA58;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)this);
}

{
  *this = off_24D91EA58;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)this);
  JUMPOUT(0x219A19A08);
}

void tc_sframe_random_split(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, double a6)
{
  _OWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _OWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string __p;
  uint64_t (**v27)(turi::gl_sframe *__hidden);
  std::__shared_weak_count *v28;
  _QWORD v29[2];
  std::__shared_weak_count *v30;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sframe::random_split((turi::gl_sframe *)(a1 + 8), a6, a2, 0, (turi::gl_sframe *)&__p);
    v12 = (_OWORD *)operator new();
    *v12 = 0u;
    v12[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v12 + 8));
    *(_QWORD *)v12 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)v29, (const turi::gl_sframe *)&__p);
    turi::gl_sframe::operator=((uint64_t)v12 + 8, (uint64_t)v29);
    v29[0] = off_24D91E9C0;
    v13 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    *a3 = v12;
    v16 = (_OWORD *)operator new();
    *v16 = 0u;
    v16[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v16 + 8));
    *(_QWORD *)v16 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)v29, (const turi::gl_sframe *)&v27);
    turi::gl_sframe::operator=((uint64_t)v16 + 8, (uint64_t)v29);
    v29[0] = off_24D91E9C0;
    v17 = v30;
    if (v30)
    {
      v18 = (unint64_t *)&v30->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *a4 = v16;
    v27 = off_24D91E9C0;
    v20 = v28;
    if (v28)
    {
      v21 = (unint64_t *)&v28->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v23 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v24 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a5, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_217ED4B04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED4AE4);
}

void sub_217ED4BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::pair<turi::gl_sframe,turi::gl_sframe>::~pair(_QWORD *a1)
{
  a1[3] = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  *a1 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

_OWORD *tc_sframe_append(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"top sframe\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return tc_sframe_create_copy(a2);
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"bottom sframe\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return tc_sframe_create_copy(a1);
  }
  turi::gl_sframe::append((turi::gl_sframe *)(a1 + 8), (const turi::gl_sframe *)(a2 + 8), v15);
  v6 = (_OWORD *)operator new();
  *v6 = 0u;
  v6[1] = 0u;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v6 + 8));
  *(_QWORD *)v6 = &capi_struct_type_info_tc_sframe_inst;
  turi::gl_sframe::gl_sframe(&__p, v15);
  turi::gl_sframe::operator=((uint64_t)v6 + 8, (uint64_t)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
  v7 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    v8 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v15[0] = off_24D91E9C0;
  v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v6;
}

void sub_217ED4DDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED4DC4);
}

void sub_217ED4E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sframe_is_materialized(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
    return turi::gl_sframe::is_materialized((turi::gl_sframe *)(a1 + 8));
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217ED4F30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED4F1CLL);
}

void sub_217ED4F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_sframe_size_is_known(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
    return turi::gl_sframe::has_size((turi::gl_sframe *)(a1 + 8));
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
  set_error(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217ED5010(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED4FFCLL);
}

void sub_217ED505C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sframe_save_reference(turi *a1, char *__s, uint64_t *a3)
{
  void *__p[2];
  char v7;
  std::string v8;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    turi::gl_sframe::save((uint64_t)a1 + 8, (uint64_t)&v8, (uint64_t)__p);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "\"sframe\" is null.");
    set_error(a3, &v8);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_217ED512C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED5118);
}

void sub_217ED5198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sframe_materialize(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sframe::materialize((turi::gl_sframe *)(a1 + 8));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_217ED5228(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED5218);
}

void sub_217ED5274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL tc_sframe_contains_column(turi *a1, char *__s, uint64_t *a3)
{
  _BOOL8 v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v6 = turi::gl_sframe::contains_column((uint64_t)a1 + 8, (unsigned __int8 **)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217ED533C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED5320);
}

void sub_217ED5390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_sample(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  _OWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD v16[2];
  std::__shared_weak_count *v17;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sframe::sample((turi::gl_sframe *)(a1 + 8), a4, a2, 0, v16);
    v8 = (_OWORD *)operator new();
    *v8 = 0u;
    v8[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v8 + 8));
    *(_QWORD *)v8 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&__p, v16);
    turi::gl_sframe::operator=((uint64_t)v8 + 8, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v9 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v10 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v16[0] = off_24D91E9C0;
    v12 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217ED552C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED550CLL);
}

void sub_217ED55E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sframe_replace_add_column(turi *a1, char *__s, uint64_t a3, uint64_t *a4)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, __s);
      turi::gl_sframe::replace_add_column((uint64_t)a1 + 8, a3 + 8, (const void **)&__p.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
      set_error(a4, &__p);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a4, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217ED56B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED56A4);
}

void sub_217ED5714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sframe_add_constant_column(turi *a1, char *__s, uint64_t a3, uint64_t *a4)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, __s);
      turi::gl_sframe::add_column((uint64_t)a1 + 8, (turi::gl_sarray *)(a3 + 8), (uint64_t)&__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_flexible_type\" is null.");
      set_error(a4, &__p);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a4, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217ED57EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED57D8);
}

void sub_217ED5848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sframe_add_columns(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1 && a2)
  {
    turi::gl_sframe::add_columns((turi::gl_sframe *)(a1 + 8), (const turi::gl_sframe *)(a2 + 8));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_217ED590C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED58F8);
}

void sub_217ED5960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_topk(turi *a1, char *__s, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _OWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p[2];
  char v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  std::string v22;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    turi::gl_sframe::topk((uint64_t)a1 + 8, (uint64_t)__p, a3, a4, v20);
    v10 = (_OWORD *)operator new();
    *v10 = 0u;
    v10[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v10 + 8));
    *(_QWORD *)v10 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&v22, v20);
    turi::gl_sframe::operator=((uint64_t)v10 + 8, (uint64_t)&v22);
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v11 = (std::__shared_weak_count *)v22.__r_.__value_.__r.__words[2];
    if (v22.__r_.__value_.__r.__words[2])
    {
      v12 = (unint64_t *)(v22.__r_.__value_.__r.__words[2] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v20[0] = off_24D91E9C0;
    v14 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v19 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "\"sframe\" is null.");
    set_error(a5, &v22);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    return 0;
  }
  return v10;
}

void sub_217ED5B1C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED5AFCLL);
}

void sub_217ED5BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sframe_swap_columns(turi *a1, char *__s, char *a3, uint64_t *a4)
{
  void *__p[2];
  char v9;
  std::string v10;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    turi::gl_sframe::swap_columns((uint64_t)a1 + 8, (unsigned __int8 **)&v10, (unsigned __int8 **)__p);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "\"sframe\" is null.");
    set_error(a4, &v10);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_217ED5CB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED5CA0);
}

void sub_217ED5D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sframe_rename_column(turi *a1, char *__s, char *a3, uint64_t *a4)
{
  void *v8;
  void *v9[2];
  uint64_t v10;
  std::string v11;
  _QWORD v12[3];
  std::string v13;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "\"sframe\" is null.");
    set_error(a4, &v13);
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v8 = (void *)v13.__r_.__value_.__r.__words[0];
    goto LABEL_14;
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, __s);
  std::string::basic_string[abi:ne180100]<0>(v9, a3);
  v13 = v11;
  *(_OWORD *)__p = *(_OWORD *)v9;
  v15 = v10;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  memset(&v11, 0, sizeof(v11));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v12, (const void **)&v13.__r_.__value_.__l.__data_, 1);
  turi::gl_sframe::rename((uint64_t)a1 + 8, v12);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v12, (_QWORD *)v12[1]);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)v11.__r_.__value_.__r.__words[0];
LABEL_14:
    operator delete(v8);
  }
}

void sub_217ED5E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2)
  {
    if (a32 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217ED5E60);
  }
  _Unwind_Resume(exception_object);
}

void tc_sframe_rename_columns(turi *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t *i;
  std::string __p;
  void *v9;
  char v10;
  uint64_t *v11;
  _QWORD *v12[2];
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a2)
    {
      v12[0] = 0;
      v12[1] = 0;
      v11 = (uint64_t *)v12;
      v6 = *(uint64_t **)(a2 + 8);
      for (i = *(uint64_t **)(a2 + 16); v6 != i; v6 += 4)
      {
        std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]((uint64_t)&v13, v6);
        if (v14 != 2)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "entries are not of type str");
          set_error(a3, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v16 != 2)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "entries are not of type str");
          set_error(a3, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&__p, (__int128 *)(v13 + 8), (__int128 *)(v15 + 8));
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(&v11, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
        if (v10 < 0)
          operator delete(v9);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v13);
      }
      turi::gl_sframe::rename((uint64_t)a1 + 8, &v11);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11, v12[0]);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_flex_dict\" is null.");
    set_error(a3, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a3, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217ED614C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
  {
    if (a16 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217ED6118);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *tc_sframe_filter_by(turi *a1, uint64_t a2, char *__s, char a4, uint64_t *a5)
{
  _OWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p[2];
  char v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  std::string v22;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      turi::gl_sframe::filter_by((uint64_t)a1 + 8, (turi::gl_sarray *)(a2 + 8), (uint64_t)__p, a4, v20);
      v10 = (_OWORD *)operator new();
      *v10 = 0u;
      v10[1] = 0u;
      turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v10 + 8));
      *(_QWORD *)v10 = &capi_struct_type_info_tc_sframe_inst;
      turi::gl_sframe::gl_sframe(&v22, v20);
      turi::gl_sframe::operator=((uint64_t)v10 + 8, (uint64_t)&v22);
      v22.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
      v11 = (std::__shared_weak_count *)v22.__r_.__value_.__r.__words[2];
      if (v22.__r_.__value_.__r.__words[2])
      {
        v12 = (unint64_t *)(v22.__r_.__value_.__r.__words[2] + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v20[0] = off_24D91E9C0;
      v14 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v19 < 0)
        operator delete(__p[0]);
      return v10;
    }
    std::string::basic_string[abi:ne180100]<0>(&v22, "\"sarray\" is null.");
    set_error(a5, &v22);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "\"sframe\" is null.");
    set_error(a5, &v22);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217ED6408(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED63E8);
}

void sub_217ED64D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_pack_columns_vector(turi *a1, uint64_t a2, char *a3, char a4, uint64_t a5, uint64_t *a6)
{
  turi::flexible_type_impl *v12;
  turi::flexible_type_impl *v13;
  turi::flexible_type_impl *v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  void *v51[2];
  char v52;
  _QWORD v53[2];
  std::__shared_weak_count *v54;
  std::string v55;
  std::string __p;
  _QWORD *v57[3];

  v57[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a2)
    {
      v12 = *(turi::flexible_type_impl **)(a2 + 8);
      v13 = *(turi::flexible_type_impl **)(a2 + 16);
      if (v12 == v13)
      {
LABEL_9:
        memset(&v55, 0, sizeof(v55));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(&v55, v12, v13, (v13 - v12) >> 4);
        std::string::basic_string[abi:ne180100]<0>(v51, a3);
        memset(v57, 0, 13);
        if ((_QWORD **)(a5 + 8) != v57)
        {
          *(_QWORD **)((char *)v57 + 5) = *(_QWORD **)(a5 + 13);
          v57[0] = *(_QWORD **)(a5 + 8);
          BYTE4(v57[1]) = *(_BYTE *)(a5 + 20);
          if (BYTE4(v57[1]) <= 9u && ((1 << SBYTE4(v57[1])) & 0x33C) != 0)
          {
            v15 = v57[0];
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 + 1, v15));
          }
        }
        turi::gl_sframe::pack_columns((uint64_t)a1 + 8, (__int128 **)&v55, (uint64_t)v51, a4, (uint64_t)v57, v53);
        v17 = (_OWORD *)operator new();
        *v17 = 0u;
        v17[1] = 0u;
        turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v17 + 8));
        *(_QWORD *)v17 = &capi_struct_type_info_tc_sframe_inst;
        turi::gl_sframe::gl_sframe(&__p, v53);
        turi::gl_sframe::operator=((uint64_t)v17 + 8, (uint64_t)&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
        v18 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
        {
          v19 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v53[0] = off_24D91E9C0;
        v21 = v54;
        if (v54)
        {
          p_shared_owners = (unint64_t *)&v54->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        switch(BYTE4(v57[1]))
        {
          case 2:
            v24 = v57[0];
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v27 = v57[0];
              if (v57[0])
              {
                if (*((char *)v57[0] + 31) < 0)
                  operator delete(*((void **)v57[0] + 1));
                v28 = v27;
                v29 = 0x1012C404EF22A49;
                goto LABEL_67;
              }
            }
            break;
          case 3:
            v38 = v57[0];
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              v41 = v57[0];
              if (v57[0])
              {
                v42 = (void *)v57[0][1];
                if (v42)
                {
                  v57[0][2] = v42;
                  operator delete(v42);
                }
                v28 = v41;
                v29 = 0x1080C409938AC02;
                goto LABEL_67;
              }
            }
            break;
          case 4:
            v30 = v57[0];
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = v57[0];
              if (v57[0])
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v57[0] + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                goto LABEL_60;
              }
            }
            break;
          case 5:
            v43 = v57[0];
            do
            {
              v44 = __ldaxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
            {
              v33 = v57[0];
              if (v57[0])
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v57[0] + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_60:
                v28 = v33;
                v29 = 0x1020C405E66F15BLL;
                goto LABEL_67;
              }
            }
            break;
          case 8:
            v46 = v57[0];
            do
            {
              v47 = __ldaxr(v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v46));
            if (!v48)
            {
              v49 = v57[0];
              if (v57[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)v57[0] + 2);
                v28 = v49;
                v37 = -235920773;
                goto LABEL_66;
              }
            }
            break;
          case 9:
            v34 = v57[0];
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36 && v57[0])
            {
              v28 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v57[0]);
              v37 = 2071181815;
LABEL_66:
              v29 = v37 | 0x1030C4000000000;
LABEL_67:
              MEMORY[0x219A19A08](v28, v29);
            }
            break;
          default:
            break;
        }
        memset(v57, 0, 13);
        if (v52 < 0)
          operator delete(v51[0]);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        return v17;
      }
      v14 = *(turi::flexible_type_impl **)(a2 + 8);
      while (*((_BYTE *)v14 + 12) == 2)
      {
        v14 = (turi::flexible_type_impl *)((char *)v14 + 16);
        if (v14 == v13)
          goto LABEL_9;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Contains a non-string column.");
      set_error(a6, &__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "\"flex_list\" is null.");
      set_error(a6, &__p);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a6, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217ED696C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2)
  {
    if (a28 < 0)
      operator delete(__p);
    __cxa_begin_catch(a1);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217ED67CCLL);
  }
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_pack_columns_string(turi *a1, char *__s, char *a3, char a4, uint64_t a5, uint64_t *a6)
{
  unint64_t *v12;
  unint64_t v13;
  _OWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  _QWORD v55[2];
  std::__shared_weak_count *v56;
  std::string __p;
  _QWORD v58[3];

  v58[2] = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, __s);
    std::string::basic_string[abi:ne180100]<0>(v51, a3);
    memset(v58, 0, 13);
    if ((_QWORD *)(a5 + 8) != v58)
    {
      *(_QWORD *)((char *)v58 + 5) = *(_QWORD *)(a5 + 13);
      v58[0] = *(_QWORD *)(a5 + 8);
      BYTE4(v58[1]) = *(_BYTE *)(a5 + 20);
      if (BYTE4(v58[1]) <= 9u && ((1 << SBYTE4(v58[1])) & 0x33C) != 0)
      {
        v12 = (unint64_t *)v58[0];
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
    }
    turi::gl_sframe::pack_columns((uint64_t)a1 + 8, (unsigned __int8 *)v53, (uint64_t)v51, a4, (uint64_t)v58, v55);
    v14 = (_OWORD *)operator new();
    *v14 = 0u;
    v14[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v14 + 8));
    *(_QWORD *)v14 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&__p, v55);
    turi::gl_sframe::operator=((uint64_t)v14 + 8, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v15 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v16 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v55[0] = off_24D91E9C0;
    v18 = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    switch(BYTE4(v58[1]))
    {
      case 2:
        v21 = (unint64_t *)v58[0];
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v24 = v58[0];
          if (v58[0])
          {
            if (*(char *)(v58[0] + 31) < 0)
              operator delete(*(void **)(v58[0] + 8));
            v25 = v24;
            v26 = 0x1012C404EF22A49;
            goto LABEL_63;
          }
        }
        break;
      case 3:
        v38 = (unint64_t *)v58[0];
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          v41 = v58[0];
          if (v58[0])
          {
            v42 = *(void **)(v58[0] + 8);
            if (v42)
            {
              *(_QWORD *)(v58[0] + 16) = v42;
              operator delete(v42);
            }
            v25 = v41;
            v26 = 0x1080C409938AC02;
            goto LABEL_63;
          }
        }
        break;
      case 4:
        v27 = (unint64_t *)v58[0];
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = v58[0];
          if (v58[0])
          {
            __p.__r_.__value_.__r.__words[0] = v58[0] + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_56;
          }
        }
        break;
      case 5:
        v43 = (unint64_t *)v58[0];
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          v30 = v58[0];
          if (v58[0])
          {
            __p.__r_.__value_.__r.__words[0] = v58[0] + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_56:
            v25 = v30;
            v26 = 0x1020C405E66F15BLL;
            goto LABEL_63;
          }
        }
        break;
      case 8:
        v46 = (unint64_t *)v58[0];
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
        {
          v49 = v58[0];
          if (v58[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v58[0] + 16));
            v25 = v49;
            v37 = -235920773;
            goto LABEL_62;
          }
        }
        break;
      case 9:
        v31 = (unint64_t *)v58[0];
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v34 = v58[0];
          if (v58[0])
          {
            v35 = *(void **)(v58[0] + 48);
            if (v35)
            {
              *(_QWORD *)(v58[0] + 56) = v35;
              operator delete(v35);
            }
            v36 = *(void **)(v34 + 24);
            if (v36)
            {
              *(_QWORD *)(v34 + 32) = v36;
              operator delete(v36);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v34 + 8);
            v25 = v34;
            v37 = 2071181815;
LABEL_62:
            v26 = v37 | 0x1030C4000000000;
LABEL_63:
            MEMORY[0x219A19A08](v25, v26);
          }
        }
        break;
      default:
        break;
    }
    memset(v58, 0, 13);
    if (v52 < 0)
      operator delete(v51[0]);
    if (v54 < 0)
      operator delete(v53[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a6, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v14;
}

void sub_217ED708C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2)
  {
    if (a31 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217ED6EC4);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *tc_sframe_split_datetime(turi *a1, char *a2, char *a3, uint64_t a4, int a5, uint64_t *a6)
{
  turi::flexible_type_impl *v12;
  turi::flexible_type_impl *v13;
  turi::flexible_type_impl *v14;
  _OWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  _QWORD v27[2];
  std::__shared_weak_count *v28;
  std::string v29;
  std::string v30;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v12 = *(turi::flexible_type_impl **)(a4 + 8);
    v13 = *(turi::flexible_type_impl **)(a4 + 16);
    if (v12 == v13)
    {
LABEL_8:
      memset(&v29, 0, sizeof(v29));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(&v29, v12, v13, (v13 - v12) >> 4);
      std::string::basic_string[abi:ne180100]<0>(v25, a2);
      std::string::basic_string[abi:ne180100]<0>(__p, a3);
      turi::gl_sframe::split_datetime((uint64_t)a1 + 8, (uint64_t)v25, (uint64_t)__p, (__int128 **)&v29, a5, (turi::gl_sframe *)v27);
      v15 = (_OWORD *)operator new();
      *v15 = 0u;
      v15[1] = 0u;
      turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v15 + 8));
      *(_QWORD *)v15 = &capi_struct_type_info_tc_sframe_inst;
      turi::gl_sframe::gl_sframe(&v30, v27);
      turi::gl_sframe::operator=((uint64_t)v15 + 8, (uint64_t)&v30);
      v30.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
      v16 = (std::__shared_weak_count *)v30.__r_.__value_.__r.__words[2];
      if (v30.__r_.__value_.__r.__words[2])
      {
        v17 = (unint64_t *)(v30.__r_.__value_.__r.__words[2] + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v27[0] = off_24D91E9C0;
      v19 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(v25[0]);
      v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
      return v15;
    }
    v14 = *(turi::flexible_type_impl **)(a4 + 8);
    while (*((_BYTE *)v14 + 12) == 2)
    {
      v14 = (turi::flexible_type_impl *)((char *)v14 + 16);
      if (v14 == v13)
        goto LABEL_8;
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "Element of limit is not of type str");
    set_error(a6, &v30);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "\"sframe\" is null.");
    set_error(a6, &v30);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217ED75A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED7584);
}

void sub_217ED76A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_unpack(turi *a1, char *__s, uint64_t *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v14[3];
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  std::string v24;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, __s);
    std::string::basic_string[abi:ne180100]<0>(v18, "X");
    __p = 0;
    v16 = 0;
    v17 = 0;
    memset(v14, 0, sizeof(v14));
    turi::gl_sframe::unpack((uint64_t)a1 + 8, (uint64_t)v20, (uint64_t)v18, (uint64_t)&__p, (uint64_t)&turi::FLEX_UNDEFINED, v14, (turi::gl_sframe *)v22);
    v6 = (_OWORD *)operator new();
    *v6 = 0u;
    v6[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v6 + 8));
    *(_QWORD *)v6 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&v24, v22);
    turi::gl_sframe::operator=((uint64_t)v6 + 8, (uint64_t)&v24);
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v7 = (std::__shared_weak_count *)v24.__r_.__value_.__r.__words[2];
    if (v24.__r_.__value_.__r.__words[2])
    {
      v8 = (unint64_t *)(v24.__r_.__value_.__r.__words[2] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v22[0] = off_24D91E9C0;
    v10 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (v19 < 0)
      operator delete(v18[0]);
    if (v21 < 0)
      operator delete(v20[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "\"sframe\" is null.");
    set_error(a3, &v24);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217ED78B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED7894);
}

void sub_217ED79B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_unpack_detailed(turi *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char v27;
  _OWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  char *v36;
  uint64_t v37;
  char *__s;
  void *__p[2];
  char v40;
  void *v41[2];
  char v42;
  _QWORD v43[2];
  std::__shared_weak_count *v44;
  void *v45;
  void *v46;
  char *v47;
  std::string v48;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    __s = a2;
    v36 = a3;
    v37 = a5;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v14 = *(char **)(a4 + 8);
    v15 = *(char **)(a4 + 16);
    if (v14 != v15)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      do
      {
        if (v16 >= v17)
        {
          v20 = &v16[-v18];
          v21 = (uint64_t)&v16[-v18 + 1];
          if (v21 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (2 * (uint64_t)&v17[-v18] > (unint64_t)v21)
            v21 = 2 * (_QWORD)&v17[-v18];
          if ((unint64_t)&v17[-v18] >= 0x3FFFFFFFFFFFFFFFLL)
            v22 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
            v23 = (char *)operator new(v22);
          else
            v23 = 0;
          v24 = &v20[(_QWORD)v23];
          v25 = &v20[(_QWORD)v23];
          *v25 = *v14;
          v19 = v25 + 1;
          if (v16 != (char *)v18)
          {
            v26 = &v16[~v18];
            do
            {
              v27 = *--v16;
              (v26--)[(_QWORD)v23] = v27;
            }
            while (v16 != (char *)v18);
            v24 = v23;
          }
          v17 = &v23[v22];
          v45 = v24;
          v47 = v17;
          if (v18)
            operator delete((void *)v18);
          v18 = (unint64_t)v24;
        }
        else
        {
          *v16 = *v14;
          v19 = v16 + 1;
        }
        v46 = v19;
        ++v14;
        v16 = v19;
      }
      while (v14 != v15);
    }
    std::string::basic_string[abi:ne180100]<0>(v41, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, v36);
    turi::gl_sframe::unpack((uint64_t)a1 + 8, (uint64_t)v41, (uint64_t)__p, (uint64_t)&v45, v37 + 8, (uint64_t **)(a6 + 8), (turi::gl_sframe *)v43);
    v28 = (_OWORD *)operator new();
    *v28 = 0u;
    v28[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v28 + 8));
    *(_QWORD *)v28 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&v48, v43);
    turi::gl_sframe::operator=((uint64_t)v28 + 8, (uint64_t)&v48);
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v29 = (std::__shared_weak_count *)v48.__r_.__value_.__r.__words[2];
    if (v48.__r_.__value_.__r.__words[2])
    {
      v30 = (unint64_t *)(v48.__r_.__value_.__r.__words[2] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v43[0] = off_24D91E9C0;
    v32 = v44;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v40 < 0)
      operator delete(__p[0]);
    if (v42 < 0)
      operator delete(v41[0]);
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "\"sframe\" is null.");
    set_error(a7, &v48);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    return 0;
  }
  return v28;
}

void sub_217ED7CB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 89) < 0)
    operator delete(*(void **)(v31 - 112));
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a14);
  std::exception_ptr::~exception_ptr(&a14);
  __cxa_end_catch();
  JUMPOUT(0x217ED7C80);
}

void sub_217ED7DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14)
{
  std::exception_ptr::~exception_ptr(&a14);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_stack(turi *a1, char *__s, uint64_t *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;
  std::string v20;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    turi::gl_sframe::stack((uint64_t)a1 + 8, (uint64_t)v16, (uint64_t)__p, 0, v18);
    v6 = (_OWORD *)operator new();
    *v6 = 0u;
    v6[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v6 + 8));
    *(_QWORD *)v6 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&v20, v18);
    turi::gl_sframe::operator=((uint64_t)v6 + 8, (uint64_t)&v20);
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v7 = (std::__shared_weak_count *)v20.__r_.__value_.__r.__words[2];
    if (v20.__r_.__value_.__r.__words[2])
    {
      v8 = (unint64_t *)(v20.__r_.__value_.__r.__words[2] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v18[0] = off_24D91E9C0;
    v10 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "\"sframe\" is null.");
    set_error(a3, &v20);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217ED7F80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED7F64);
}

void sub_217ED8060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_stack_and_rename(turi *a1, char *__s, char *a3, unsigned int a4, uint64_t *a5)
{
  _OWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  std::string v24;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    turi::gl_sframe::stack((uint64_t)a1 + 8, (uint64_t)v20, (uint64_t)__p, a4, v22);
    v10 = (_OWORD *)operator new();
    *v10 = 0u;
    v10[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v10 + 8));
    *(_QWORD *)v10 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&v24, v22);
    turi::gl_sframe::operator=((uint64_t)v10 + 8, (uint64_t)&v24);
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v11 = (std::__shared_weak_count *)v24.__r_.__value_.__r.__words[2];
    if (v24.__r_.__value_.__r.__words[2])
    {
      v12 = (unint64_t *)(v24.__r_.__value_.__r.__words[2] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v22[0] = off_24D91E9C0;
    v14 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v19 < 0)
      operator delete(__p[0]);
    if (v21 < 0)
      operator delete(v20[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "\"sframe\" is null.");
    set_error(a5, &v24);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    return 0;
  }
  return v10;
}

void sub_217ED8238(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 49) < 0)
    operator delete(*(void **)(v23 - 72));
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED8218);
}

void sub_217ED8318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_unstack(turi *a1, char *__s, char *a3, uint64_t *a4)
{
  _OWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  std::string v22;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    turi::gl_sframe::unstack((uint64_t)a1 + 8, (uint64_t)v18, (uint64_t)__p, v20);
    v8 = (_OWORD *)operator new();
    *v8 = 0u;
    v8[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v8 + 8));
    *(_QWORD *)v8 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&v22, v20);
    turi::gl_sframe::operator=((uint64_t)v8 + 8, (uint64_t)&v22);
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v9 = (std::__shared_weak_count *)v22.__r_.__value_.__r.__words[2];
    if (v22.__r_.__value_.__r.__words[2])
    {
      v10 = (unint64_t *)(v22.__r_.__value_.__r.__words[2] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v20[0] = off_24D91E9C0;
    v12 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "\"sframe\" is null.");
    set_error(a4, &v22);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217ED84E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED84C4);
}

void sub_217ED85C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_unstack_vector(turi *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  turi::flexible_type_impl *v8;
  turi::flexible_type_impl *v9;
  turi::flexible_type_impl *v10;
  _OWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p[2];
  char v20;
  _QWORD v21[2];
  std::__shared_weak_count *v22;
  std::string v23;
  std::string v24;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a2)
    {
      v8 = *(turi::flexible_type_impl **)(a2 + 8);
      v9 = *(turi::flexible_type_impl **)(a2 + 16);
      if (v8 == v9)
      {
LABEL_9:
        memset(&v23, 0, sizeof(v23));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(&v23, v8, v9, (v9 - v8) >> 4);
        std::string::basic_string[abi:ne180100]<0>(__p, a3);
        turi::gl_sframe::unstack((uint64_t)a1 + 8, (uint64_t *)&v23, (uint64_t)__p, v21);
        v11 = (_OWORD *)operator new();
        *v11 = 0u;
        v11[1] = 0u;
        turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v11 + 8));
        *(_QWORD *)v11 = &capi_struct_type_info_tc_sframe_inst;
        turi::gl_sframe::gl_sframe(&v24, v21);
        turi::gl_sframe::operator=((uint64_t)v11 + 8, (uint64_t)&v24);
        v24.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
        v12 = (std::__shared_weak_count *)v24.__r_.__value_.__r.__words[2];
        if (v24.__r_.__value_.__r.__words[2])
        {
          v13 = (unint64_t *)(v24.__r_.__value_.__r.__words[2] + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v21[0] = off_24D91E9C0;
        v15 = v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (v20 < 0)
          operator delete(__p[0]);
        v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
        return v11;
      }
      v10 = *(turi::flexible_type_impl **)(a2 + 8);
      while (*((_BYTE *)v10 + 12) == 2)
      {
        v10 = (turi::flexible_type_impl *)((char *)v10 + 16);
        if (v10 == v9)
          goto LABEL_9;
      }
      std::string::basic_string[abi:ne180100]<0>(&v24, "Contains a non-string column.");
      set_error(a4, &v24);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v24, "\"flex_list\" is null.");
      set_error(a4, &v24);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "\"sframe\" is null.");
    set_error(a4, &v24);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217ED8800(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 33) < 0)
    operator delete(*(void **)(v20 - 56));
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED87E4);
}

void sub_217ED88F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_unique(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sframe::unique((turi::gl_sframe *)(a1 + 8), v12);
    v4 = (_OWORD *)operator new();
    *v4 = 0u;
    v4[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v4 + 8));
    *(_QWORD *)v4 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&__p, v12);
    turi::gl_sframe::operator=((uint64_t)v4 + 8, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v5 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v6 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v12[0] = off_24D91E9C0;
    v8 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217ED8A78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED8A5CLL);
}

void sub_217ED8B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_sort_single_column(turi *a1, char *__s, int a3, uint64_t *a4)
{
  _OWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;
  std::string v20;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    turi::gl_sframe::sort((uint64_t)a1 + 8, (uint64_t)__p, a3, v18);
    v8 = (_OWORD *)operator new();
    *v8 = 0u;
    v8[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v8 + 8));
    *(_QWORD *)v8 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&v20, v18);
    turi::gl_sframe::operator=((uint64_t)v8 + 8, (uint64_t)&v20);
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v9 = (std::__shared_weak_count *)v20.__r_.__value_.__r.__words[2];
    if (v20.__r_.__value_.__r.__words[2])
    {
      v10 = (unint64_t *)(v20.__r_.__value_.__r.__words[2] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v18[0] = off_24D91E9C0;
    v12 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v17 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "\"sframe\" is null.");
    set_error(a4, &v20);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    return 0;
  }
  return v8;
}

void sub_217ED8CD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED8CBCLL);
}

void sub_217ED8DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_drop_na(turi *a1, uint64_t a2, char *__s, uint64_t *a4)
{
  _BYTE *v8;
  _BYTE *v9;
  std::string *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  _OWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p[2];
  char v23;
  _QWORD v24[2];
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::string *v27;
  unint64_t v28;
  std::string v29;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "\"sframe\" is null.");
    set_error(a4, &v29);
LABEL_29:
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    return 0;
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "\"flex_list\" is null.");
    set_error(a4, &v29);
    goto LABEL_29;
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v8 = *(_BYTE **)(a2 + 8);
  v9 = *(_BYTE **)(a2 + 16);
  if (v8 == v9)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    turi::gl_sframe::dropna((uint64_t)a1 + 8, (uint64_t)&v26, (uint64_t *)__p, 0, v24);
    v14 = (_OWORD *)operator new();
    *v14 = 0u;
    v14[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v14 + 8));
    *(_QWORD *)v14 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&v29, v24);
    turi::gl_sframe::operator=((uint64_t)v14 + 8, (uint64_t)&v29);
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v15 = (std::__shared_weak_count *)v29.__r_.__value_.__r.__words[2];
    if (v29.__r_.__value_.__r.__words[2])
    {
      v16 = (unint64_t *)(v29.__r_.__value_.__r.__words[2] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v24[0] = off_24D91E9C0;
    v18 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v23 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v10 = 0;
    while (v8[12] == 2)
    {
      v11 = *(_QWORD *)v8;
      v12 = (__int128 *)(*(_QWORD *)v8 + 8);
      if ((unint64_t)v10 >= v28)
      {
        v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v26, v12);
      }
      else
      {
        if (*(char *)(v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(v11 + 8), *(_QWORD *)(v11 + 16));
        }
        else
        {
          v13 = *v12;
          v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)v8 + 24);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
        }
        ++v10;
      }
      v27 = v10;
      v8 += 16;
      if (v8 == v9)
        goto LABEL_15;
    }
    std::string::basic_string[abi:ne180100]<0>(&v29, "Contains a non-string column.");
    set_error(a4, &v29);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    v14 = 0;
  }
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  return v14;
}

void sub_217ED9044(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 49) < 0)
    operator delete(*(void **)(v21 - 72));
  a17 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217ED8FE0);
}

void sub_217ED9158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_sort_multiple_columns(turi *a1, uint64_t a2, std::vector<int>::value_type a3, uint64_t *a4)
{
  _BYTE *v8;
  _BYTE *v9;
  std::string *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  _OWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::string *v25;
  unint64_t v26;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a4, &__p);
LABEL_27:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"flex_list\" is null.");
    set_error(a4, &__p);
    goto LABEL_27;
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v8 = *(_BYTE **)(a2 + 8);
  v9 = *(_BYTE **)(a2 + 16);
  if (v8 == v9)
  {
LABEL_15:
    turi::gl_sframe::sort((uint64_t)a1 + 8, &v24, a3, v22);
    v14 = (_OWORD *)operator new();
    *v14 = 0u;
    v14[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v14 + 8));
    *(_QWORD *)v14 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&__p, v22);
    turi::gl_sframe::operator=((uint64_t)v14 + 8, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v15 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v16 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v22[0] = off_24D91E9C0;
    v18 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v10 = 0;
    while (v8[12] == 2)
    {
      v11 = *(_QWORD *)v8;
      v12 = (__int128 *)(*(_QWORD *)v8 + 8);
      if ((unint64_t)v10 >= v26)
      {
        v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v24, v12);
      }
      else
      {
        if (*(char *)(v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(v11 + 8), *(_QWORD *)(v11 + 16));
        }
        else
        {
          v13 = *v12;
          v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)v8 + 24);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
        }
        ++v10;
      }
      v25 = v10;
      v8 += 16;
      if (v8 == v9)
        goto LABEL_15;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Contains a non-string column.");
    set_error(a4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v14 = 0;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v14;
}

void sub_217ED93DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217ED9378);
}

void sub_217ED94D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_slice(turi *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _OWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v18[2];
  _QWORD v19[2];
  std::__shared_weak_count *v20;
  std::string __p;
  _QWORD v22[4];

  v22[3] = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v22[0] = a2;
    v22[1] = a3;
    v22[2] = a4;
    v18[0] = v22;
    v18[1] = 3;
    turi::gl_sframe::operator[]((uint64_t)a1 + 8, (uint64_t)v18, v19);
    v10 = (_OWORD *)operator new();
    *v10 = 0u;
    v10[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v10 + 8));
    *(_QWORD *)v10 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&__p, v19);
    turi::gl_sframe::operator=((uint64_t)v10 + 8, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v11 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v12 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v19[0] = off_24D91E9C0;
    v14 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a5, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v10;
}

void sub_217ED96AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    if (a21 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217ED9670);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_sframe_extract_row(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::string __p;
  std::string *p_p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sframe::operator[]((turi::gl_sframe *)(a1 + 8), a2, &v10);
    v6 = operator new();
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)v6 = &capi_struct_type_info_tc_flex_list_inst;
    v7 = v11;
    v9 = v10;
    v11 = 0;
    v10 = 0uLL;
    std::vector<turi::flexible_type>::__vdeallocate((void **)(v6 + 8));
    *(_OWORD *)(v6 + 8) = v9;
    *(_QWORD *)(v6 + 24) = v7;
    memset(&__p, 0, sizeof(__p));
    p_p = &__p;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217ED98C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception_ptr a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a12);
  std::exception_ptr::~exception_ptr(&a12);
  __cxa_end_catch();
  JUMPOUT(0x217ED98A4);
}

void sub_217ED9928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception_ptr a12)
{
  std::exception_ptr::~exception_ptr(&a12);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_replace_na(uint64_t a1, char *__s, uint64_t a3, uint64_t *a4)
{
  unint64_t *v8;
  unint64_t v9;
  _OWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  void *v44[2];
  char v45;
  _QWORD v46[2];
  std::__shared_weak_count *v47;
  std::string __p;
  _QWORD *v49[3];

  v49[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a3)
    {
      std::string::basic_string[abi:ne180100]<0>(v44, __s);
      memset(v49, 0, 13);
      if ((_QWORD **)(a3 + 8) != v49)
      {
        *(_QWORD **)((char *)v49 + 5) = *(_QWORD **)(a3 + 13);
        v49[0] = *(_QWORD **)(a3 + 8);
        BYTE4(v49[1]) = *(_BYTE *)(a3 + 20);
        if (BYTE4(v49[1]) <= 9u && ((1 << SBYTE4(v49[1])) & 0x33C) != 0)
        {
          v8 = v49[0];
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
        }
      }
      turi::gl_sframe::fillna((turi::gl_sframe *)(a1 + 8), (const void **)v44, (uint64_t)v49, (turi::gl_sframe *)v46);
      v10 = (_OWORD *)operator new();
      *v10 = 0u;
      v10[1] = 0u;
      turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v10 + 8));
      *(_QWORD *)v10 = &capi_struct_type_info_tc_sframe_inst;
      turi::gl_sframe::gl_sframe(&__p, v46);
      turi::gl_sframe::operator=((uint64_t)v10 + 8, (uint64_t)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
      v11 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        v12 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v46[0] = off_24D91E9C0;
      v14 = v47;
      if (v47)
      {
        p_shared_owners = (unint64_t *)&v47->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      switch(BYTE4(v49[1]))
      {
        case 2:
          v17 = v49[0];
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = v49[0];
            if (v49[0])
            {
              if (*((char *)v49[0] + 31) < 0)
                operator delete(*((void **)v49[0] + 1));
              v21 = v20;
              v22 = 0x1012C404EF22A49;
              goto LABEL_62;
            }
          }
          break;
        case 3:
          v31 = v49[0];
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            v34 = v49[0];
            if (v49[0])
            {
              v35 = (void *)v49[0][1];
              if (v35)
              {
                v49[0][2] = v35;
                operator delete(v35);
              }
              v21 = v34;
              v22 = 0x1080C409938AC02;
              goto LABEL_62;
            }
          }
          break;
        case 4:
          v23 = v49[0];
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v26 = v49[0];
            if (v49[0])
            {
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v49[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_55;
            }
          }
          break;
        case 5:
          v36 = v49[0];
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v26 = v49[0];
            if (v49[0])
            {
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v49[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_55:
              v21 = v26;
              v22 = 0x1020C405E66F15BLL;
              goto LABEL_62;
            }
          }
          break;
        case 8:
          v39 = v49[0];
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (!v41)
          {
            v42 = v49[0];
            if (v49[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v49[0] + 2);
              v21 = v42;
              v30 = -235920773;
              goto LABEL_61;
            }
          }
          break;
        case 9:
          v27 = v49[0];
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29 && v49[0])
          {
            v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v49[0]);
            v30 = 2071181815;
LABEL_61:
            v22 = v30 | 0x1030C4000000000;
LABEL_62:
            MEMORY[0x219A19A08](v21, v22);
          }
          break;
        default:
          break;
      }
      memset(v49, 0, 13);
      if (v45 < 0)
        operator delete(v44[0]);
      return v10;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"flexible_type\" is null.");
    set_error(a4, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a4, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217ED9D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217ED9BA8);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *tc_groupby_aggregator_create(turi *a1)
{
  _QWORD *result;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  result = (_QWORD *)operator new();
  result[3] = 0;
  result[2] = 0;
  *result = &capi_struct_type_info_tc_groupby_aggregator_inst;
  result[1] = result + 2;
  return result;
}

void sub_217EDA068(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EDA058);
}

void sub_217EDA094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_groupby_aggregator_add_parameterized_aggregator(turi *a1)
{
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
}

void sub_217EDA0E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EDA0D4);
}

void sub_217EDA10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_apply_mask(turi *a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v14[2];
  std::__shared_weak_count *v15;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a2)
    {
      turi::gl_sframe::operator[]((uint64_t)a1 + 8, a2 + 8, v14);
      v6 = (_OWORD *)operator new();
      *v6 = 0u;
      v6[1] = 0u;
      turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v6 + 8));
      *(_QWORD *)v6 = &capi_struct_type_info_tc_sframe_inst;
      turi::gl_sframe::gl_sframe(&__p, v14);
      turi::gl_sframe::operator=((uint64_t)v6 + 8, (uint64_t)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
      v7 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        v8 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v14[0] = off_24D91E9C0;
      v10 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      return v6;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_sarray\" is null.");
    set_error(a3, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_sframe\" is null.");
    set_error(a3, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EDA2B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EDA29CLL);
}

void sub_217EDA374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_groupby_aggregator_add_simple_aggregator(turi *a1, char *__s, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8;
  void *v9;
  uint64_t i;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  std::logic_error *exception;
  std::string v25;
  void *__p[2];
  char v27;
  _QWORD v28[4];
  _QWORD v29[3];
  _QWORD v30[4];
  _QWORD v31[3];
  _QWORD v32[4];
  _QWORD v33[3];
  _QWORD v34[4];
  _QWORD v35[3];
  _QWORD v36[4];
  _QWORD v37[3];
  _QWORD v38[4];
  _QWORD v39[3];
  _QWORD v40[4];
  _QWORD v41[3];
  _QWORD v42[4];
  _QWORD v43[3];
  _QWORD v44[4];
  _QWORD v45[3];
  _QWORD v46[4];
  _QWORD v47[3];
  _QWORD v48[5];

  v48[4] = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "count");
    v28[0] = &off_24D919858;
    v28[3] = v28;
    std::string::basic_string[abi:ne180100]<0>(v29, "sum");
    v30[0] = &off_24D9198E8;
    v30[3] = v30;
    std::string::basic_string[abi:ne180100]<0>(v31, "max");
    v32[0] = &off_24D919968;
    v32[3] = v32;
    std::string::basic_string[abi:ne180100]<0>(v33, "min");
    v34[0] = &off_24D9199E8;
    v34[3] = v34;
    std::string::basic_string[abi:ne180100]<0>(v35, "avg");
    v36[0] = &off_24D919A68;
    v36[3] = v36;
    std::string::basic_string[abi:ne180100]<0>(v37, "var");
    v38[0] = &off_24D919AE8;
    v38[3] = v38;
    std::string::basic_string[abi:ne180100]<0>(v39, "std");
    v40[0] = &off_24D919B68;
    v40[3] = v40;
    std::string::basic_string[abi:ne180100]<0>(v41, "stdv");
    v42[0] = &off_24D919BE8;
    v42[3] = v42;
    std::string::basic_string[abi:ne180100]<0>(v43, "select_one");
    v44[0] = &off_24D919C68;
    v44[3] = v44;
    std::string::basic_string[abi:ne180100]<0>(v45, "count_distinct");
    v46[0] = &off_24D919CE8;
    v46[3] = v46;
    std::string::basic_string[abi:ne180100]<0>(v47, "concat");
    v48[0] = &off_24D919D68;
    v48[3] = v48;
    std::map<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::map[abi:ne180100]((uint64_t)&tc_groupby_aggregator_add_simple_aggregator::agg_map, (const void **)__p, 11);
    for (i = 70; i != -7; i -= 7)
      std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::~pair((uint64_t)&__p[i]);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::~map[abi:ne180100], &tc_groupby_aggregator_add_simple_aggregator::agg_map, &dword_217E69000);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v9 = (void *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&tc_groupby_aggregator_add_simple_aggregator::agg_map, (const void **)__p);
  if (v27 < 0)
    operator delete(__p[0]);
  if (v9 == &unk_254FEDD68)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Aggregation ", 12);
    v13 = strlen(__s);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)__s, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" not recognized. ", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Available aggregation operators are ", 36);
    v16 = tc_groupby_aggregator_add_simple_aggregator::agg_map;
    if ((_UNKNOWN *)tc_groupby_aggregator_add_simple_aggregator::agg_map != &unk_254FEDD68)
    {
      do
      {
        v17 = *(char *)(v16 + 55);
        if (v17 >= 0)
          v18 = v16 + 32;
        else
          v18 = *(_QWORD *)(v16 + 32);
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(v16 + 55);
        else
          v19 = *(_QWORD *)(v16 + 40);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v18, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" ", 1);
        v21 = *(_QWORD **)(v16 + 8);
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = *(_QWORD **)(v16 + 16);
            v23 = *v22 == v16;
            v16 = (uint64_t)v22;
          }
          while (!v23);
        }
        v16 = (uint64_t)v22;
      }
      while (v22 != (_QWORD *)&unk_254FEDD68);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v25);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()((uint64_t)v9 + 56, (uint64_t)a1 + 8, a3, a4);
}

void sub_217EDA80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t i;

  if (a2)
  {
    for (i = 560; i != -56; i -= 56)
      std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::~pair((uint64_t)&a16 + i);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EDA44CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::~pair(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::map<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, a2, &v7, &v6);
}

void tc_groupby_aggregator_add_concat_two_columns(uint64_t **a1, char *a2, char *__s, char *a4, uint64_t *a5)
{
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17[2];
  char v18;
  _QWORD v19[2];
  char v20;
  std::string v21;
  __int128 v22;
  std::string __p;
  std::string v24;
  __int128 v25;
  std::string *v26;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"groupby_aggregator\" is null.");
    set_error(a5, &__p);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v16 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(v19, __s);
  std::string::basic_string[abi:ne180100]<0>(v17, a4);
  turi::aggregate::CONCAT((uint64_t)v19, (uint64_t)v17, &v21);
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  v24 = v21;
  memset(&v21, 0, sizeof(v21));
  v25 = v22;
  v22 = 0uLL;
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>(a1 + 1, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 *)&__p);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v26 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v26 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
  {
    v16 = (void *)v19[0];
LABEL_22:
    operator delete(v16);
  }
}

void sub_217EDABEC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EDABD4);
}

void sub_217EDAC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,turi::aggregate::groupby_descriptor_type>::~pair(uint64_t a1)
{
  void **v2;
  void **v4;

  v2 = (void **)(a1 + 24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 48);
  v4 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void turi::aggregate::groupby_descriptor_type::~groupby_descriptor_type(void **this)
{
  void **v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void tc_groupby_aggregator_add_quantile(uint64_t **a1, char *a2, char *__s, uint64_t *a4, double a5)
{
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  _QWORD v17[2];
  char v18;
  std::string v19;
  __int128 v20;
  std::string __p;
  std::string v22;
  __int128 v23;
  std::string *v24;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"groupby_aggregator\" is null.");
    set_error(a4, &__p);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v16 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, __s);
  turi::aggregate::QUANTILE((uint64_t)v17, &v19, a5);
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  v22 = v19;
  memset(&v19, 0, sizeof(v19));
  v23 = v20;
  v20 = 0uLL;
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>(a1 + 1, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 *)&__p);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v24 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v24 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v18 < 0)
  {
    v16 = (void *)v17[0];
LABEL_20:
    operator delete(v16);
  }
}

void sub_217EDAEC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EDAEACLL);
}

void sub_217EDAF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_groupby_aggregator_add_quantiles(uint64_t **a1, char *a2, char *__s, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  char *v29;
  _QWORD v30[2];
  char v31;
  std::string v32;
  __int128 v33;
  std::string __p;
  std::string v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  char *v39;
  void **v40[2];

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"groupby_aggregator\" is null.");
    set_error(a5, &__p);
LABEL_41:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v29 = (char *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_48;
  }
  if (!a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"flex_list\" is null.");
    set_error(a5, &__p);
    goto LABEL_41;
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v10 = *(_QWORD *)(a4 + 8);
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 == v11)
  {
LABEL_25:
    std::string::basic_string[abi:ne180100]<0>(v30, __s);
    turi::aggregate::QUANTILE((uint64_t)v30, (uint64_t *)&v37, &v32);
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    v35 = v32;
    memset(&v32, 0, sizeof(v32));
    v36 = v33;
    v33 = 0uLL;
    std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>(a1 + 1, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 *)&__p);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v40[0] = (void **)&v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v40[0] = (void **)&v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
    if ((v31 & 0x80000000) == 0)
      goto LABEL_46;
    v28 = (void *)v30[0];
  }
  else
  {
    v12 = 0;
    while (*(_BYTE *)(v10 + 12) == 1)
    {
      if (v12 >= v39)
      {
        v14 = v37;
        v15 = (v12 - v37) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v17 = v39 - v37;
        if ((v39 - v37) >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v39, v18);
          v14 = v37;
          v12 = (char *)v38;
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[8 * v15];
        *(_QWORD *)v20 = *(_QWORD *)v10;
        v13 = v20 + 8;
        while (v12 != v14)
        {
          v21 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *((_QWORD *)v20 - 1) = v21;
          v20 -= 8;
        }
        v37 = v20;
        v38 = (uint64_t)v13;
        v39 = &v19[8 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v12 = *(_QWORD *)v10;
        v13 = v12 + 8;
      }
      v38 = (uint64_t)v13;
      v10 += 16;
      v12 = v13;
      if (v10 == v11)
        goto LABEL_25;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Contains a non-float quantile.");
    set_error(a5, &__p);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
    v28 = (void *)__p.__r_.__value_.__r.__words[0];
  }
  operator delete(v28);
LABEL_46:
  v29 = v37;
  if (!v37)
    return;
  v38 = (uint64_t)v37;
LABEL_48:
  operator delete(v29);
}

void sub_217EDB25C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void *v28;

  if (a26 < 0)
    operator delete(__p);
  v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(_QWORD *)(v26 - 112) = v28;
    operator delete(v28);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EDB230);
}

void sub_217EDB31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_groupby_aggregator_add_argmax(uint64_t **a1, char *a2, char *__s, char *a4, uint64_t *a5)
{
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17[2];
  char v18;
  _QWORD v19[2];
  char v20;
  std::string v21;
  __int128 v22;
  std::string __p;
  std::string v24;
  __int128 v25;
  std::string *v26;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"groupby_aggregator\" is null.");
    set_error(a5, &__p);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v16 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(v19, __s);
  std::string::basic_string[abi:ne180100]<0>(v17, a4);
  turi::aggregate::ARGMAX((uint64_t)v19, (uint64_t)v17, &v21);
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  v24 = v21;
  memset(&v21, 0, sizeof(v21));
  v25 = v22;
  v22 = 0uLL;
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>(a1 + 1, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 *)&__p);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v26 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v26 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
  {
    v16 = (void *)v19[0];
LABEL_22:
    operator delete(v16);
  }
}

void sub_217EDB4E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EDB4D0);
}

void sub_217EDB584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_groupby_aggregator_add_argmin(uint64_t **a1, char *a2, char *__s, char *a4, uint64_t *a5)
{
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17[2];
  char v18;
  _QWORD v19[2];
  char v20;
  std::string v21;
  __int128 v22;
  std::string __p;
  std::string v24;
  __int128 v25;
  std::string *v26;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"groupby_aggregator\" is null.");
    set_error(a5, &__p);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v16 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(v19, __s);
  std::string::basic_string[abi:ne180100]<0>(v17, a4);
  turi::aggregate::ARGMIN((uint64_t)v19, (uint64_t)v17, &v21);
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  v24 = v21;
  memset(&v21, 0, sizeof(v21));
  v25 = v22;
  v22 = 0uLL;
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>(a1 + 1, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 *)&__p);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v26 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v26 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
  {
    v16 = (void *)v19[0];
LABEL_22:
    operator delete(v16);
  }
}

void sub_217EDB750(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EDB738);
}

void sub_217EDB7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_group_by(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _BYTE *v8;
  _BYTE *v9;
  std::string *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  _OWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  const void **v24;
  std::string *v25;
  unint64_t v26;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a4, &__p);
LABEL_29:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"string_list\" is null.");
    set_error(a4, &__p);
    goto LABEL_29;
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"groupby_aggregator\" is null.");
    set_error(a4, &__p);
    goto LABEL_29;
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v8 = *(_BYTE **)(a2 + 8);
  v9 = *(_BYTE **)(a2 + 16);
  if (v8 == v9)
  {
LABEL_16:
    turi::gl_sframe::groupby((uint64_t)a1 + 8, &v24, (_QWORD *)(a3 + 8), v22);
    v14 = (_OWORD *)operator new();
    *v14 = 0u;
    v14[1] = 0u;
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v14 + 8));
    *(_QWORD *)v14 = &capi_struct_type_info_tc_sframe_inst;
    turi::gl_sframe::gl_sframe(&__p, v22);
    turi::gl_sframe::operator=((uint64_t)v14 + 8, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v15 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v16 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v22[0] = off_24D91E9C0;
    v18 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v10 = 0;
    while (v8[12] == 2)
    {
      v11 = *(_QWORD *)v8;
      v12 = (__int128 *)(*(_QWORD *)v8 + 8);
      if ((unint64_t)v10 >= v26)
      {
        v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v24, v12);
      }
      else
      {
        if (*(char *)(v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(v11 + 8), *(_QWORD *)(v11 + 16));
        }
        else
        {
          v13 = *v12;
          v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)v8 + 24);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
        }
        ++v10;
      }
      v25 = v10;
      v8 += 16;
      if (v8 == v9)
        goto LABEL_16;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Contains a non-string column.");
    set_error(a4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v14 = 0;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v14;
}

void sub_217EDBA94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EDBA30);
}

void sub_217EDBB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_sframe_apply(turi *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  _OWORD *v12;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _BYTE v24[40];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::string __p;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"SFrame passed in is null.\" is null.");
    set_error(a6, &__p);
    goto LABEL_10;
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Callback function passed in is null.\" is null.");
    set_error(a6, &__p);
    goto LABEL_10;
  }
  if (!a3 && a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Context release function passed in is null.\" is null.");
    set_error(a6, &__p);
LABEL_10:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  std::shared_ptr<void>::shared_ptr[abi:ne180100]<void,void (*)(void *),void>(&v28, a4, a3);
  v25 = a2;
  v15 = v28;
  v14 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v26 = 0;
  v27 = 0;
  v32 = 0;
  v18 = operator new(0x20uLL);
  *v18 = &off_24D919DE8;
  v18[1] = a2;
  v18[2] = v15;
  v18[3] = v14;
  v32 = v18;
  turi::gl_sframe::apply((uint64_t)a1 + 8, (uint64_t)v31, a5, (uint64_t)v24);
  v12 = (_OWORD *)operator new();
  v12[1] = 0u;
  v12[2] = 0u;
  *v12 = 0u;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v12 + 8));
  *(_QWORD *)v12 = &capi_struct_type_info_tc_sarray_inst;
  turi::gl_sarray::gl_sarray(&__p, v24);
  turi::gl_sarray::operator=((uint64_t)v12 + 8, (uint64_t)&__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v24);
  v19 = v32;
  if (v32 == v31)
  {
    v20 = 4;
    v19 = v31;
    goto LABEL_21;
  }
  if (v32)
  {
    v20 = 5;
LABEL_21:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  v21 = v29;
  if (v29)
  {
    v22 = (unint64_t *)&v29->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v12;
}

void sub_217EDBE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;

  if (!a2)
    _Unwind_Resume(exception_object);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a13);
  v32 = *(_QWORD **)(v30 - 96);
  if (v32 == (_QWORD *)(v30 - 120))
  {
    v33 = 4;
    v32 = (_QWORD *)(v30 - 120);
  }
  else
  {
    if (!v32)
    {
LABEL_7:
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v28);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
      __cxa_begin_catch(exception_object);
      std::current_exception();
      fill_error_from_exception((std::exception_ptr *)&a9);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
      __cxa_end_catch();
      JUMPOUT(0x217EDBC8CLL);
    }
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
  goto LABEL_7;
}

uint64_t tc_variant_create_from_int64(turi *a1)
{
  uint64_t v2;
  unsigned int v4;
  turi *v5;
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v2 = operator new();
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_QWORD *)v2 = &capi_struct_type_info_tc_variant_inst;
  v5 = a1;
  v6 = 0;
  v7 = 0;
  v4 = 0;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v2 + 8), &v4);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v4);
  return v2;
}

void sub_217EDC044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int a10)
{
  if (a2)
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a10);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EDC010);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_from_double(turi *a1, double a2)
{
  uint64_t v3;
  unsigned int v5;
  double v6;
  int v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  v3 = operator new();
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_QWORD *)v3 = &capi_struct_type_info_tc_variant_inst;
  v6 = a2;
  v7 = 0;
  v8 = 1;
  v5 = 0;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v3 + 8), &v5);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v5);
  return v3;
}

void sub_217EDC198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int a10)
{
  if (a2)
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a10);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EDC164);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_from_cstring(turi *__s, uint64_t *a2)
{
  uint64_t v4;
  void *__p[2];
  char v7;
  std::string v8[3];
  _BYTE v9[13];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(__s);
  if (__s)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)__s);
    v4 = operator new();
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_variant_inst;
    turi::flexible_type::flexible_type<std::string>((uint64_t)v9, (__int128 *)__p);
    *(std::string::size_type *)((char *)&v8[0].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)&v9[5];
    v8[0].__r_.__value_.__l.__size_ = *(_QWORD *)v9;
    v8[0].__r_.__value_.__s.__data_[20] = v9[12];
    LODWORD(v8[0].__r_.__value_.__l.__data_) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v4 + 8), (unsigned int *)v8);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v8);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "\"CString\" is null.");
    set_error(a2, v8);
    if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EDC360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
  {
    if (a22 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EDC328);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_from_string(turi *__src, size_t __len, uint64_t *a3)
{
  uint64_t v6;
  void *__p[2];
  char v9;
  std::string v10[3];
  _BYTE v11[13];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(__src);
  if (__src)
  {
    std::string::basic_string[abi:ne180100](__p, __src, __len);
    v6 = operator new();
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_QWORD *)v6 = &capi_struct_type_info_tc_variant_inst;
    turi::flexible_type::flexible_type<std::string>((uint64_t)v11, (__int128 *)__p);
    *(std::string::size_type *)((char *)&v10[0].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)&v11[5];
    v10[0].__r_.__value_.__l.__size_ = *(_QWORD *)v11;
    v10[0].__r_.__value_.__s.__data_[20] = v11[12];
    LODWORD(v10[0].__r_.__value_.__l.__data_) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v6 + 8), (unsigned int *)v10);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v10);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "\"String\" is null.");
    set_error(a3, v10);
    if (SHIBYTE(v10[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217EDC568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
  {
    if (a22 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EDC530);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_from_double_array(turi *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  __n128 __p;
  uint64_t v9;
  std::string v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    __p = 0uLL;
    v9 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, a1, (uint64_t)a1 + 8 * a2, a2);
    v6 = operator new();
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_QWORD *)v6 = &capi_struct_type_info_tc_variant_inst;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<double>>((uint64_t)v10, &__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v6 + 8), (unsigned int *)v10);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v10);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "\"Double Array\" is null.");
    set_error(a3, v10);
    if (SHIBYTE(v10[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v6;
}

void sub_217EDC760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    if (a19 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EDC728);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_from_flex_list(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  std::string __p[3];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_variant_inst;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<turi::flexible_type> const>((uint64_t)__p, a1 + 1);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v4 + 8), (unsigned int *)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flex List\" is null.");
    set_error(a2, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EDC928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EDC8F0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_from_flex_dict(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  std::string __p[3];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_variant_inst;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> const>((uint64_t)__p, a1 + 1);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v4 + 8), (unsigned int *)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flex Dictionary\" is null.");
    set_error(a2, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EDCAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EDCA9CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_from_datetime(uint64_t a1, uint64_t *a2)
{
  std::string::size_type v4;
  int v5;
  uint64_t v7;
  std::string __p[3];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  if ((v4 & 0xFFFFFFFFFFFFFFLL) == 0 && v5 == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flex Datetime\" is null.");
    set_error(a2, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return 0;
  }
  else
  {
    v7 = operator new();
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_QWORD *)v7 = &capi_struct_type_info_tc_variant_inst;
    __p[0].__r_.__value_.__l.__size_ = v4;
    LODWORD(__p[0].__r_.__value_.__r.__words[2]) = v5;
    __p[0].__r_.__value_.__s.__data_[20] = 6;
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v7 + 8), (unsigned int *)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
  }
  return v7;
}

void sub_217EDCC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EDCC58);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_from_image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  unsigned int v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  v2 = operator new();
  v3 = v2;
  *(_QWORD *)v2 = 0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 3;
  *(_QWORD *)v2 = 1;
  if (*(_QWORD *)v2 == 1)
  {
    v4 = v2;
  }
  else
  {
    v4 = operator new();
    v5 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = v5;
    v6 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v4 + 16) = v6;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(v3 + 24);
    *(_OWORD *)(v4 + 40) = *(_OWORD *)(v3 + 40);
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(v3 + 56);
    *(_QWORD *)v4 = 1;
    do
    {
      v9 = __ldaxr((unint64_t *)v3);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unint64_t *)v3));
    if (!v10)
    {
      boost::detail::shared_count::~shared_count((unsigned int **)(v3 + 16));
      MEMORY[0x219A19A08](v3, 0x1030C40F1F0227BLL);
    }
  }
  v11 = (uint64_t *)(a1 + 8);
  boost::shared_ptr<char []>::operator=((__int128 *)(v4 + 8), (uint64_t *)(a1 + 8));
  v12 = (_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a1 + 56);
  do
  {
    v13 = __ldaxr((unint64_t *)v4);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unint64_t *)v4));
  if (!v14)
  {
    boost::detail::shared_count::~shared_count((unsigned int **)(v4 + 16));
    MEMORY[0x219A19A08](v4, 0x1030C40F1F0227BLL);
  }
  v15 = operator new();
  v16 = v15;
  *(_QWORD *)v15 = 0;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_QWORD *)(v15 + 56) = 0;
  *(_QWORD *)(v15 + 64) = 3;
  *(_QWORD *)v15 = 1;
  if (*(_QWORD *)v15 == 1)
  {
    v17 = v15;
  }
  else
  {
    v17 = operator new();
    v18 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)v17 = *(_QWORD *)v16;
    *(_QWORD *)(v17 + 8) = v18;
    v19 = *(_QWORD *)(v16 + 16);
    *(_QWORD *)(v17 + 16) = v19;
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    *(_OWORD *)(v17 + 24) = *(_OWORD *)(v16 + 24);
    *(_OWORD *)(v17 + 40) = *(_OWORD *)(v16 + 40);
    *(_OWORD *)(v17 + 56) = *(_OWORD *)(v16 + 56);
    *(_QWORD *)v17 = 1;
    do
    {
      v22 = __ldaxr((unint64_t *)v16);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unint64_t *)v16));
    if (!v23)
    {
      boost::detail::shared_count::~shared_count((unsigned int **)(v16 + 16));
      MEMORY[0x219A19A08](v16, 0x1030C40F1F0227BLL);
    }
  }
  boost::shared_ptr<char []>::operator=((__int128 *)(v17 + 8), v11);
  v24 = v12[1];
  *(_OWORD *)(v17 + 24) = *v12;
  *(_OWORD *)(v17 + 40) = v24;
  *(_OWORD *)(v17 + 56) = v12[2];
  v25 = operator new();
  *(_OWORD *)(v25 + 72) = 0u;
  *(_OWORD *)(v25 + 56) = 0u;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_QWORD *)v25 = &capi_struct_type_info_tc_variant_inst;
  v28 = v17;
  v29 = 0;
  v30 = 8;
  v27 = 0;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v25 + 8), &v27);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v27);
  return v25;
}

void sub_217EDD064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EDD02CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_from_flexible_type(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t *size;
  unint64_t v6;
  std::string __p[3];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_variant_inst;
    __p[0].__r_.__value_.__l.__size_ = 0;
    LODWORD(__p[0].__r_.__value_.__r.__words[2]) = 0;
    __p[0].__r_.__value_.__s.__data_[20] = 0;
    if (&__p[0].__r_.__value_.__r.__words[1] != (std::string::size_type *)(a1 + 8))
    {
      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)(a1 + 13);
      __p[0].__r_.__value_.__l.__size_ = *(_QWORD *)(a1 + 8);
      __p[0].__r_.__value_.__s.__data_[20] = *(_BYTE *)(a1 + 20);
      if (__p[0].__r_.__value_.__s.__data_[20] <= 9u
        && ((1 << __p[0].__r_.__value_.__s.__data_[20]) & 0x33C) != 0)
      {
        size = (unint64_t *)__p[0].__r_.__value_.__l.__size_;
        do
          v6 = __ldaxr(size);
        while (__stlxr(v6 + 1, size));
      }
    }
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v4 + 8), (unsigned int *)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flex Type\" is null.");
    set_error(a2, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EDD2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EDD2C4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_from_sarray(turi *a1, uint64_t *a2)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  std::string::size_type *p_size;
  int v16;
  __int128 *v17;
  std::string __p[3];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &v14);
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v14;
    if (*((_QWORD *)&v14 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::set((uint64_t *)__p, (uint64_t)&v16);
    size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      v7 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v9 = operator new();
    *(_OWORD *)(v9 + 8) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_QWORD *)v9 = &capi_struct_type_info_tc_variant_inst;
    p_size = &__p[0].__r_.__value_.__l.__size_;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_into,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((__int128 *)v16, v16 ^ (v16 >> 31), (__int128 ***)&p_size, &v17);
    LODWORD(__p[0].__r_.__value_.__l.__data_) = v16 ^ (v16 >> 31);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v9 + 8), (unsigned int *)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v16);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"SArray\" is null.");
    set_error(a2, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v9;
}

void sub_217EDD584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    if (a29 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EDD54CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_from_sframe(turi *a1, uint64_t *a2)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  std::string::size_type *p_size;
  int v16;
  __int128 *v17;
  std::string __p[3];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    turi::gl_sframe::get_proxy((uint64_t)a1 + 8, &v14);
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v14;
    if (*((_QWORD *)&v14 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)__p, (uint64_t)&v16);
    size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      v7 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v9 = operator new();
    *(_OWORD *)(v9 + 8) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_QWORD *)v9 = &capi_struct_type_info_tc_variant_inst;
    p_size = &__p[0].__r_.__value_.__l.__size_;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_into,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((__int128 *)v16, v16 ^ (v16 >> 31), (__int128 ***)&p_size, &v17);
    LODWORD(__p[0].__r_.__value_.__l.__data_) = v16 ^ (v16 >> 31);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v9 + 8), (unsigned int *)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v16);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"SFrame\" is null.");
    set_error(a2, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v9;
}

void sub_217EDD840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    if (a29 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EDD808);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_from_parameters(const void ***a1, uint64_t *a2)
{
  uint64_t v4;
  std::string __p[3];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_variant_inst;
    boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper((uint64_t **)&__p[0].__r_.__value_.__l.__size_, a1 + 1);
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 6;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v4 + 8), (unsigned int *)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Parameters\" is null.");
    set_error(a2, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EDDA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EDD9F0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_from_model(std::string::size_type *a1, uint64_t *a2)
{
  uint64_t v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;
  std::string __p[3];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_variant_inst;
    v5 = a1[2];
    __p[0].__r_.__value_.__l.__size_ = a1[1];
    __p[0].__r_.__value_.__r.__words[2] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 3;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v4 + 8), (unsigned int *)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Model\" is null.");
    set_error(a2, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EDDBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EDDBACLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_create_copy(unsigned int *a1, uint64_t *a2)
{
  uint64_t v4;
  std::string *v6;
  std::string __p[3];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_QWORD *)v4 = &capi_struct_type_info_tc_variant_inst;
    v6 = (std::string *)&__p[0].__r_.__value_.__r.__words[1];
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)a1[2], a1[2] ^ ((int)a1[2] >> 31), &v6, (uint64_t)(a1 + 4));
    LODWORD(__p[0].__r_.__value_.__l.__data_) = a1[2] ^ ((int)a1[2] >> 31);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v4 + 8), (unsigned int *)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Variant\" is null.");
    set_error(a2, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return 0;
  }
  return v4;
}

void sub_217EDDDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2)
  {
    if (a17 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EDDD7CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_int64(int *a1)
{
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  return *(_QWORD *)turi::variant_get_ref<turi::flexible_type>(a1 + 2);
}

void sub_217EDDE94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EDDE84);
}

void sub_217EDDEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

double tc_variant_double(int *a1)
{
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  return *(double *)turi::variant_get_ref<turi::flexible_type>(a1 + 2);
}

void sub_217EDDF20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EDDF10);
}

void sub_217EDDF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_variant_string_length(turi *a1, uint64_t *a2)
{
  int *v4;
  uint64_t v5;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v4 = (int *)((char *)a1 + 8);
    if (*(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) == 2)
    {
      v5 = turi::variant_get_ref<turi::flexible_type>(v4);
      if (*(char *)(*(_QWORD *)v5 + 31) < 0)
        return *(_QWORD *)(*(_QWORD *)v5 + 16);
      else
        return *(unsigned __int8 *)(*(_QWORD *)v5 + 31);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not a string.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type is null");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EDE030(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EDE014);
}

void sub_217EDE084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_variant_string_data(turi *a1, uint64_t *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t result;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v4 = (int *)((char *)a1 + 8);
    if (*(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) == 2)
    {
      v5 = *(_QWORD *)turi::variant_get_ref<turi::flexible_type>(v4);
      result = v5 + 8;
      if (*(char *)(v5 + 31) < 0)
        return *(_QWORD *)result;
      return result;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not a string.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EDE164(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EDE150);
}

void sub_217EDE1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_variant_array_length(turi *a1, uint64_t *a2)
{
  int *v4;
  uint64_t v5;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v4 = (int *)((char *)a1 + 8);
    if (*(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) == 3)
    {
      v5 = turi::variant_get_ref<turi::flexible_type>(v4);
      return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 16) - *(_QWORD *)(*(_QWORD *)v5 + 8)) >> 3;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not an Array.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EDE294(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EDE280);
}

void sub_217EDE2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_variant_array_data(turi *a1, uint64_t *a2)
{
  int *v4;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v4 = (int *)((char *)a1 + 8);
    if (*(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) == 3)
      return *(_QWORD *)(*(_QWORD *)turi::variant_get_ref<turi::flexible_type>(v4) + 8);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not an Array.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EDE3BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EDE3A8);
}

void sub_217EDE410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_variant_flex_list(turi *a1, uint64_t *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  std::string __p;
  std::string *p_p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v4 = (int *)((char *)a1 + 8);
    if (*(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) == 4)
    {
      v5 = *(_QWORD *)turi::variant_get_ref<turi::flexible_type>(v4);
      v6 = operator new();
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)v6 = &capi_struct_type_info_tc_flex_list_inst;
      memset(&__p, 0, sizeof(__p));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v5 + 8), *(uint64_t **)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 4);
      std::vector<turi::flexible_type>::__vdeallocate((void **)(v6 + 8));
      *(std::string *)(v6 + 8) = __p;
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      return v6;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not a list.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EDE56C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EDE550);
}

void sub_217EDE5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_variant_flex_dict(turi *a1, uint64_t *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  std::string __p;
  std::string *p_p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v4 = (int *)((char *)a1 + 8);
    if (*(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) == 5)
    {
      v5 = *(_QWORD *)turi::variant_get_ref<turi::flexible_type>(v4);
      v6 = operator new();
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)v6 = &capi_struct_type_info_tc_flex_dict_inst;
      memset(&__p, 0, sizeof(__p));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v5 + 8), *(uint64_t **)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 5);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(v6 + 8));
      *(std::string *)(v6 + 8) = __p;
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      return v6;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not a dict.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EDE71C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EDE700);
}

void sub_217EDE770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_variant_flex_image(turi *a1, uint64_t *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *__p;
  unsigned int *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unsigned int *v21;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v4 = (int *)((char *)a1 + 8);
    if (*(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) == 8)
    {
      v5 = *(_QWORD *)turi::variant_get_ref<turi::flexible_type>(v4);
      v6 = operator new();
      *(_QWORD *)v6 = &capi_struct_type_info_tc_flex_image_inst;
      v8 = *(_QWORD *)(v5 + 8);
      v7 = *(_QWORD *)(v5 + 16);
      if (v7)
      {
        v9 = (unsigned int *)(v7 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = *(_OWORD *)(v5 + 24);
      v12 = *(_OWORD *)(v5 + 56);
      v18 = *(_OWORD *)(v5 + 40);
      v19 = v12;
      v17 = v11;
      __p = 0;
      v16 = 0;
      *(_QWORD *)(v6 + 8) = v8;
      *(_QWORD *)(v6 + 16) = v7;
      v20 = 0;
      v21 = 0;
      boost::detail::shared_count::~shared_count(&v21);
      v13 = v18;
      *(_OWORD *)(v6 + 24) = v17;
      *(_OWORD *)(v6 + 40) = v13;
      *(_OWORD *)(v6 + 56) = v19;
      boost::detail::shared_count::~shared_count(&v16);
      return v6;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not an image.");
    set_error(a2, (const std::string *)&__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
    set_error(a2, (const std::string *)&__p);
  }
  if (SBYTE7(v17) < 0)
    operator delete(__p);
  return 0;
}

void sub_217EDE8E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x217EDE8C4);
}

void sub_217EDE934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_variant_datetime(turi *a1, uint64_t *a2)
{
  int *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    v4 = (int *)((char *)a1 + 8);
    if (*(_BYTE *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) == 6)
    {
      v5 = turi::variant_get_ref<turi::flexible_type>(v4);
      result = (_QWORD *)operator new();
      v7 = *(_QWORD *)v5;
      *result = &capi_struct_type_info_tc_datetime_inst;
      result[1] = v7;
      result[2] = 0;
      *((_DWORD *)result + 4) = *(_DWORD *)(v5 + 8);
      return result;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not a datetime.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EDEA38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EDEA24);
}

void sub_217EDEA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_variant_flexible_type(int *a1, uint64_t *a2)
{
  int *v4;
  int v5;
  uint64_t v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v5 = a1[2];
    v4 = a1 + 2;
    if (v5 == v5 >> 31)
    {
      v6 = turi::variant_get_ref<turi::flexible_type>(v4);
      return new_tc_flexible_type<turi::flexible_type const&>(v6);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Variant does not contain a flexible type.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Variant\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EDEB50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EDEB3CLL);
}

void sub_217EDEBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_variant_sarray(int *a1, uint64_t *a2)
{
  int *v4;
  int v5;
  uint64_t *v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v5 = a1[2];
    v4 = a1 + 2;
    if ((v5 ^ (v5 >> 31)) == 5)
    {
      v6 = (uint64_t *)turi::variant_get_ref<std::shared_ptr<turi::unity_sarray_base>>(v4);
      return new_tc_sarray<std::shared_ptr<turi::unity_sarray_base> const&>(v6);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Variant does not contain an SArray.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Variant\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

